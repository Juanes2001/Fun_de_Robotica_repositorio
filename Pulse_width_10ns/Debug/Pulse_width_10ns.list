
Pulse_width_10ns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08004ab0  08004ab0  00014ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004e90  08004e90  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e90  08004e90  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08004e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200001d0  08005068  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005068  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b52  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a2b  00000000  00000000  00022d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00023780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  00023a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fef4  00000000  00000000  00023d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000357c  00000000  00000000  00033c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056f22  00000000  00000000  000371b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e0da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bbc  00000000  00000000  0008e12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a94 	.word	0x08004a94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	08004a94 	.word	0x08004a94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <main>:
unsigned int thirdParameter;
char userMsg[64];
char bufferMsg[64];

int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	//Activamos la FPU
	SCB -> CPACR |= (0xF << 20);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <main+0x1c>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <main+0x1c>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	inSystem ();
 8000c0c:	f000 f804 	bl	8000c18 <inSystem>

    /* Loop forever */
	while(1){
 8000c10:	e7fe      	b.n	8000c10 <main+0x18>
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <inSystem>:

	}
}


void inSystem (void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 8000c1c:	f001 f976 	bl	8001f0c <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <inSystem+0xe0>)
 8000c22:	4a36      	ldr	r2, [pc, #216]	; (8000cfc <inSystem+0xe4>)
 8000c24:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <inSystem+0xe0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <inSystem+0xe0>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000c32:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <inSystem+0xe0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000c38:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <inSystem+0xe0>)
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <inSystem+0xe0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <inSystem+0xe0>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000c4a:	482b      	ldr	r0, [pc, #172]	; (8000cf8 <inSystem+0xe0>)
 8000c4c:	f000 fcb4 	bl	80015b8 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000c50:	2101      	movs	r1, #1
 8000c52:	4829      	ldr	r0, [pc, #164]	; (8000cf8 <inSystem+0xe0>)
 8000c54:	f000 fdda 	bl	800180c <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <inSystem+0xe8>)
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <inSystem+0xec>)
 8000c5c:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <inSystem+0xe8>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <inSystem+0xe8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <inSystem+0xe8>)
 8000c6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c70:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <inSystem+0xe8>)
 8000c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c78:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <inSystem+0xe8>)
 8000c7c:	f000 f956 	bl	8000f2c <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000c80:	481f      	ldr	r0, [pc, #124]	; (8000d00 <inSystem+0xe8>)
 8000c82:	f000 fc87 	bl	8001594 <startTimer>

	// PWM handler del GPIO y el PWM

	handlerPinPwm_pulse_10ns.pGPIOx                             = GPIOA;
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <inSystem+0xf0>)
 8000c88:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <inSystem+0xe4>)
 8000c8a:	601a      	str	r2, [r3, #0]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <inSystem+0xf0>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <inSystem+0xf0>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <inSystem+0xf0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <inSystem+0xf0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <inSystem+0xf0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <inSystem+0xf0>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_pulse_10ns);
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <inSystem+0xf0>)
 8000cb2:	f000 fc81 	bl	80015b8 <GPIO_Config>

	handlerPWM_pulse_10ns.ptrTIMx            = TIM5;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <inSystem+0xf4>)
 8000cb8:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <inSystem+0xf8>)
 8000cba:	601a      	str	r2, [r3, #0]
	handlerPWM_pulse_10ns.config.channel     = PWM_CHANNEL_1;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <inSystem+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	711a      	strb	r2, [r3, #4]
	handlerPWM_pulse_10ns.config.duttyCicle  = 50;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <inSystem+0xf4>)
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <inSystem+0xfc>)
 8000cc6:	611a      	str	r2, [r3, #16]
	handlerPWM_pulse_10ns.config.periodo     = 40; // se maneja 25 hz por testeo
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <inSystem+0xf4>)
 8000cca:	2228      	movs	r2, #40	; 0x28
 8000ccc:	819a      	strh	r2, [r3, #12]
	handlerPWM_pulse_10ns.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <inSystem+0xf4>)
 8000cd0:	2264      	movs	r2, #100	; 0x64
 8000cd2:	609a      	str	r2, [r3, #8]
	handlerPWM_pulse_10ns.config.polarity    = PWM_DISABLE_POLARITY;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <inSystem+0xf4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	751a      	strb	r2, [r3, #20]
	handlerPWM_pulse_10ns.config.optocoupler = PWM_DISABLE_OPTOCOUPLER;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <inSystem+0xf4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_pulse_10ns);
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <inSystem+0xf4>)
 8000ce2:	f000 fdf7 	bl	80018d4 <pwm_Config>
	startPwmSignal(&handlerPWM_pulse_10ns);
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <inSystem+0xf4>)
 8000ce8:	f000 fed6 	bl	8001a98 <startPwmSignal>
	enableOutput(&handlerPWM_pulse_10ns);
 8000cec:	4807      	ldr	r0, [pc, #28]	; (8000d0c <inSystem+0xf4>)
 8000cee:	f000 fee5 	bl	8001abc <enableOutput>

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001ec 	.word	0x200001ec
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	20000204 	.word	0x20000204
 8000d04:	40000400 	.word	0x40000400
 8000d08:	200001f8 	.word	0x200001f8
 8000d0c:	20000218 	.word	0x20000218
 8000d10:	40000c00 	.word	0x40000c00
 8000d14:	42480000 	.word	0x42480000

08000d18 <BasicTimer3_Callback>:

void BasicTimer3_Callback(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <BasicTimer3_Callback+0x10>)
 8000d1e:	f000 fdc1 	bl	80018a4 <GPIOxTooglePin>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200001ec 	.word	0x200001ec

08000d2c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <ITM_SendChar+0x48>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <ITM_SendChar+0x48>)
 8000d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d40:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <ITM_SendChar+0x4c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <ITM_SendChar+0x4c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d4e:	bf00      	nop
 8000d50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f8      	beq.n	8000d50 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000edfc 	.word	0xe000edfc
 8000d78:	e0000e00 	.word	0xe0000e00

08000d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	return 1;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_kill>:

int _kill(int pid, int sig)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d96:	f001 f929 	bl	8001fec <__errno>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2216      	movs	r2, #22
 8000d9e:	601a      	str	r2, [r3, #0]
	return -1;
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <_exit>:

void _exit (int status)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ffe7 	bl	8000d8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dbe:	e7fe      	b.n	8000dbe <_exit+0x12>

08000dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e009      	b.n	8000e20 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff89 	bl	8000d2c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf1      	blt.n	8000e0c <_write+0x12>
	}
	return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_close>:

int _close(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_isatty>:

int _isatty(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eca:	f001 f895 	bl	8001ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff fe93 	bl	8000bf8 <main>

08000ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   r0, =_estack
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000ee0:	08004e98 	.word	0x08004e98
  ldr r2, =_sbss
 8000ee4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000ee8:	20000248 	.word	0x20000248

08000eec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a6b      	ldr	r2, [pc, #428]	; (80010f4 <BasicTimer_Config+0x1c8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d106      	bne.n	8000f58 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000f4a:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	e030      	b.n	8000fba <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d106      	bne.n	8000f70 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000f62:	4b65      	ldr	r3, [pc, #404]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a64      	ldr	r2, [pc, #400]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	e024      	b.n	8000fba <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a61      	ldr	r2, [pc, #388]	; (80010fc <BasicTimer_Config+0x1d0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d106      	bne.n	8000f88 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000f7a:	4b5f      	ldr	r3, [pc, #380]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	e018      	b.n	8000fba <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a5c      	ldr	r2, [pc, #368]	; (8001100 <BasicTimer_Config+0x1d4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d106      	bne.n	8000fa0 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000f92:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a58      	ldr	r2, [pc, #352]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	e00c      	b.n	8000fba <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a57      	ldr	r2, [pc, #348]	; (8001104 <BasicTimer_Config+0x1d8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d106      	bne.n	8000fb8 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <BasicTimer_Config+0x1cc>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	e000      	b.n	8000fba <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8000fb8:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fc8:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6892      	ldr	r2, [r2, #8]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d144      	bne.n	8001066 <BasicTimer_Config+0x13a>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0210 	bic.w	r2, r2, #16
 8000fea:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2ba0      	cmp	r3, #160	; 0xa0
 8000ff6:	d003      	beq.n	8001000 <BasicTimer_Config+0xd4>
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffe:	d10b      	bne.n	8001018 <BasicTimer_Config+0xec>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2264      	movs	r2, #100	; 0x64
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	3a01      	subs	r2, #1
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
 8001016:	e021      	b.n	800105c <BasicTimer_Config+0x130>

		}else if ((speed == BTIMER_SPEED_16MHz_100us ) || (speed == BTIMER_SPEED_100MHz_100us)){
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800101e:	d004      	beq.n	800102a <BasicTimer_Config+0xfe>
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f242 7210 	movw	r2, #10000	; 0x2710
 8001026:	4293      	cmp	r3, r2
 8001028:	d10c      	bne.n	8001044 <BasicTimer_Config+0x118>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	3a01      	subs	r2, #1
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
 8001042:	e00b      	b.n	800105c <BasicTimer_Config+0x130>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms )){
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800104a:	d107      	bne.n	800105c <BasicTimer_Config+0x130>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period    ;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	3a01      	subs	r2, #1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c

		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
 8001064:	e013      	b.n	800108e <BasicTimer_Config+0x162>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0210 	orr.w	r2, r2, #16
 8001074:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3a01      	subs	r2, #1
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3a01      	subs	r2, #1
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a6:	d103      	bne.n	80010b0 <BasicTimer_Config+0x184>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80010a8:	201c      	movs	r0, #28
 80010aa:	f7ff ff21 	bl	8000ef0 <__NVIC_EnableIRQ>
 80010ae:	e01b      	b.n	80010e8 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <BasicTimer_Config+0x1d0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d103      	bne.n	80010c2 <BasicTimer_Config+0x196>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 80010ba:	201d      	movs	r0, #29
 80010bc:	f7ff ff18 	bl	8000ef0 <__NVIC_EnableIRQ>
 80010c0:	e012      	b.n	80010e8 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <BasicTimer_Config+0x1d4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d103      	bne.n	80010d4 <BasicTimer_Config+0x1a8>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 80010cc:	201e      	movs	r0, #30
 80010ce:	f7ff ff0f 	bl	8000ef0 <__NVIC_EnableIRQ>
 80010d2:	e009      	b.n	80010e8 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <BasicTimer_Config+0x1d8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d103      	bne.n	80010e6 <BasicTimer_Config+0x1ba>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80010de:	2032      	movs	r0, #50	; 0x32
 80010e0:	f7ff ff06 	bl	8000ef0 <__NVIC_EnableIRQ>
 80010e4:	e000      	b.n	80010e8 <BasicTimer_Config+0x1bc>
	}
	else{
		__NOP();
 80010e6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80010e8:	b662      	cpsie	i
}
 80010ea:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010000 	.word	0x40010000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40000400 	.word	0x40000400
 8001100:	40000800 	.word	0x40000800
 8001104:	40000c00 	.word	0x40000c00

08001108 <BasicTimer2_Callback>:

__attribute__((weak)) void BasicTimer2_Callback(void){
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800110c:	bf00      	nop
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800111c:	bf00      	nop
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800112c:	bf00      	nop
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800113c:	bf00      	nop
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800114c:	bf00      	nop
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800115c:	bf00      	nop
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800116c:	bf00      	nop
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800117c:	bf00      	nop
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800118c:	bf00      	nop
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800119c:	bf00      	nop
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80011ac:	bf00      	nop
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80011bc:	bf00      	nop
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80011cc:	bf00      	nop
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80011dc:	bf00      	nop
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80011ec:	bf00      	nop
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80011fc:	bf00      	nop
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800120c:	bf00      	nop
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800121c:	bf00      	nop
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 800122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 800123a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 800124a:	f7ff ff5d 	bl	8001108 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 800124e:	e066      	b.n	800131e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8001250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d012      	beq.n	8001284 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001268:	f023 0302 	bic.w	r3, r3, #2
 800126c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 800126e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800127c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 800127e:	f7ff ff5b 	bl	8001138 <Capture_TIM2_Ch1_Callback>
}
 8001282:	e04c      	b.n	800131e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8001284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d012      	beq.n	80012b8 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8001292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80012a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012b0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80012b2:	f7ff ff49 	bl	8001148 <Capture_TIM2_Ch2_Callback>
}
 80012b6:	e032      	b.n	800131e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 80012b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d012      	beq.n	80012ec <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 80012c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d0:	f023 0308 	bic.w	r3, r3, #8
 80012d4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012e4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 80012e6:	f7ff ff37 	bl	8001158 <Capture_TIM2_Ch3_Callback>
}
 80012ea:	e018      	b.n	800131e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 80012ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d011      	beq.n	800131e <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001304:	f023 0310 	bic.w	r3, r3, #16
 8001308:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800130a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001318:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 800131a:	f7ff ff25 	bl	8001168 <Capture_TIM2_Ch4_Callback>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8001340:	f7ff fcea 	bl	8000d18 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8001344:	e052      	b.n	80013ec <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00e      	beq.n	8001370 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001358:	f023 0302 	bic.w	r3, r3, #2
 800135c:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001368:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 800136a:	f7ff ff05 	bl	8001178 <Capture_TIM3_Ch1_Callback>
}
 800136e:	e03d      	b.n	80013ec <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00e      	beq.n	800139a <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 8001382:	f023 0304 	bic.w	r3, r3, #4
 8001386:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 800138e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001392:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8001394:	f7ff fef8 	bl	8001188 <Capture_TIM3_Ch2_Callback>
}
 8001398:	e028      	b.n	80013ec <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00e      	beq.n	80013c4 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013ac:	f023 0308 	bic.w	r3, r3, #8
 80013b0:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013bc:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 80013be:	f7ff feeb 	bl	8001198 <Capture_TIM3_Ch3_Callback>
}
 80013c2:	e013      	b.n	80013ec <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00d      	beq.n	80013ec <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013d6:	f023 0310 	bic.w	r3, r3, #16
 80013da:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <TIM3_IRQHandler+0xcc>)
 80013e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013e6:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80013e8:	f7ff fede 	bl	80011a8 <Capture_TIM3_Ch4_Callback>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40000400 	.word	0x40000400

080013f4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8001410:	f7ff fe82 	bl	8001118 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8001414:	e052      	b.n	80014bc <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00e      	beq.n	8001440 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001428:	f023 0302 	bic.w	r3, r3, #2
 800142c:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001438:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 800143a:	f7ff febd 	bl	80011b8 <Capture_TIM4_Ch1_Callback>
}
 800143e:	e03d      	b.n	80014bc <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00e      	beq.n	800146a <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001452:	f023 0304 	bic.w	r3, r3, #4
 8001456:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 800145e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001462:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001464:	f7ff fec8 	bl	80011f8 <Capture_TIM5_Ch2_Callback>
}
 8001468:	e028      	b.n	80014bc <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00e      	beq.n	8001494 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 800147c:	f023 0308 	bic.w	r3, r3, #8
 8001480:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800148c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 800148e:	f7ff fe9b 	bl	80011c8 <Capture_TIM4_Ch3_Callback>
}
 8001492:	e013      	b.n	80014bc <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00d      	beq.n	80014bc <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 80014a6:	f023 0310 	bic.w	r3, r3, #16
 80014aa:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <TIM4_IRQHandler+0xcc>)
 80014b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014b6:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 80014b8:	f7ff fe8e 	bl	80011d8 <Capture_TIM4_Ch4_Callback>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40000800 	.word	0x40000800

080014c4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <TIM5_IRQHandler+0xcc>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <TIM5_IRQHandler+0xcc>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <TIM5_IRQHandler+0xcc>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 80014e0:	f7ff fe22 	bl	8001128 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 80014e4:	e052      	b.n	800158c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <TIM5_IRQHandler+0xcc>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00e      	beq.n	8001510 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <TIM5_IRQHandler+0xcc>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	4a26      	ldr	r2, [pc, #152]	; (8001590 <TIM5_IRQHandler+0xcc>)
 80014f8:	f023 0302 	bic.w	r3, r3, #2
 80014fc:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	4a23      	ldr	r2, [pc, #140]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001508:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 800150a:	f7ff fe6d 	bl	80011e8 <Capture_TIM5_Ch1_Callback>
}
 800150e:	e03d      	b.n	800158c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00e      	beq.n	800153a <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <TIM5_IRQHandler+0xcc>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001522:	f023 0304 	bic.w	r3, r3, #4
 8001526:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <TIM5_IRQHandler+0xcc>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <TIM5_IRQHandler+0xcc>)
 800152e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001532:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001534:	f7ff fe60 	bl	80011f8 <Capture_TIM5_Ch2_Callback>
}
 8001538:	e028      	b.n	800158c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <TIM5_IRQHandler+0xcc>)
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00e      	beq.n	8001564 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <TIM5_IRQHandler+0xcc>)
 800154c:	f023 0308 	bic.w	r3, r3, #8
 8001550:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800155c:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 800155e:	f7ff fe53 	bl	8001208 <Capture_TIM5_Ch3_Callback>
}
 8001562:	e013      	b.n	800158c <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00d      	beq.n	800158c <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001576:	f023 0310 	bic.w	r3, r3, #16
 800157a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <TIM5_IRQHandler+0xcc>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <TIM5_IRQHandler+0xcc>)
 8001582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001586:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8001588:	f7ff fe46 	bl	8001218 <Capture_TIM5_Ch4_Callback>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40000c00 	.word	0x40000c00

08001594 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a88      	ldr	r2, [pc, #544]	; (80017f0 <GPIO_Config+0x238>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d106      	bne.n	80015e0 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80015d2:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <GPIO_Config+0x23c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a87      	ldr	r2, [pc, #540]	; (80017f4 <GPIO_Config+0x23c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	e03a      	b.n	8001656 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a84      	ldr	r2, [pc, #528]	; (80017f8 <GPIO_Config+0x240>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d106      	bne.n	80015f8 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80015ea:	4b82      	ldr	r3, [pc, #520]	; (80017f4 <GPIO_Config+0x23c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a81      	ldr	r2, [pc, #516]	; (80017f4 <GPIO_Config+0x23c>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	e02e      	b.n	8001656 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a7f      	ldr	r2, [pc, #508]	; (80017fc <GPIO_Config+0x244>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d106      	bne.n	8001610 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001602:	4b7c      	ldr	r3, [pc, #496]	; (80017f4 <GPIO_Config+0x23c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a7b      	ldr	r2, [pc, #492]	; (80017f4 <GPIO_Config+0x23c>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	e022      	b.n	8001656 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <GPIO_Config+0x248>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d106      	bne.n	8001628 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800161a:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <GPIO_Config+0x23c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a75      	ldr	r2, [pc, #468]	; (80017f4 <GPIO_Config+0x23c>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	e016      	b.n	8001656 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a75      	ldr	r2, [pc, #468]	; (8001804 <GPIO_Config+0x24c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d106      	bne.n	8001640 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001632:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <GPIO_Config+0x23c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a6f      	ldr	r2, [pc, #444]	; (80017f4 <GPIO_Config+0x23c>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	e00a      	b.n	8001656 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a70      	ldr	r2, [pc, #448]	; (8001808 <GPIO_Config+0x250>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d105      	bne.n	8001656 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800164a:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <GPIO_Config+0x23c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a69      	ldr	r2, [pc, #420]	; (80017f4 <GPIO_Config+0x23c>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	795b      	ldrb	r3, [r3, #5]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	791b      	ldrb	r3, [r3, #4]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	791b      	ldrb	r3, [r3, #4]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2103      	movs	r1, #3
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	400a      	ands	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7a1b      	ldrb	r3, [r3, #8]
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2301      	movs	r3, #1
 80016b4:	408b      	lsls	r3, r1
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	400a      	ands	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	799b      	ldrb	r3, [r3, #6]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	791b      	ldrb	r3, [r3, #4]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2103      	movs	r1, #3
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4619      	mov	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	400a      	ands	r2, r1
 8001700:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	79db      	ldrb	r3, [r3, #7]
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2103      	movs	r1, #3
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	400a      	ands	r2, r1
 8001740:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68d9      	ldr	r1, [r3, #12]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	430a      	orrs	r2, r1
 8001750:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d143      	bne.n	80017e2 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b07      	cmp	r3, #7
 8001760:	d81f      	bhi.n	80017a2 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	791b      	ldrb	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a1a      	ldr	r2, [r3, #32]
 8001770:	210f      	movs	r1, #15
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	400a      	ands	r2, r1
 8001782:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a1a      	ldr	r2, [r3, #32]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a5b      	ldrb	r3, [r3, #9]
 800178e:	4619      	mov	r1, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	4619      	mov	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 80017a0:	e01f      	b.n	80017e2 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	3b08      	subs	r3, #8
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	210f      	movs	r1, #15
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4619      	mov	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	400a      	ands	r2, r1
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7a5b      	ldrb	r3, [r3, #9]
 80017d0:	4619      	mov	r1, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40021c00 	.word	0x40021c00

0800180c <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10d      	bne.n	800183a <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	2301      	movs	r3, #1
 800182c:	408b      	lsls	r3, r1
 800182e:	4619      	mov	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8001838:	e00d      	b.n	8001856 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	791b      	ldrb	r3, [r3, #4]
 8001844:	3310      	adds	r3, #16
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	4619      	mov	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	619a      	str	r2, [r3, #24]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	461a      	mov	r2, r3
 8001874:	2301      	movs	r3, #1
 8001876:	4093      	lsls	r3, r2
 8001878:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	791b      	ldrb	r3, [r3, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	40d3      	lsrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffd8 	bl	8001862 <GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffa1 	bl	800180c <GPIO_WritePin>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a68      	ldr	r2, [pc, #416]	; (8001a84 <pwm_Config+0x1b0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d106      	bne.n	80018f4 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80018e6:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <pwm_Config+0x1b4>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a67      	ldr	r2, [pc, #412]	; (8001a88 <pwm_Config+0x1b4>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	e030      	b.n	8001956 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fc:	d106      	bne.n	800190c <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80018fe:	4b62      	ldr	r3, [pc, #392]	; (8001a88 <pwm_Config+0x1b4>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a61      	ldr	r2, [pc, #388]	; (8001a88 <pwm_Config+0x1b4>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	e024      	b.n	8001956 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a5e      	ldr	r2, [pc, #376]	; (8001a8c <pwm_Config+0x1b8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d106      	bne.n	8001924 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <pwm_Config+0x1b4>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a5b      	ldr	r2, [pc, #364]	; (8001a88 <pwm_Config+0x1b4>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	e018      	b.n	8001956 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a59      	ldr	r2, [pc, #356]	; (8001a90 <pwm_Config+0x1bc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d106      	bne.n	800193c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <pwm_Config+0x1b4>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a55      	ldr	r2, [pc, #340]	; (8001a88 <pwm_Config+0x1b4>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	e00c      	b.n	8001956 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a54      	ldr	r2, [pc, #336]	; (8001a94 <pwm_Config+0x1c0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d106      	bne.n	8001954 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001946:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <pwm_Config+0x1b4>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a4f      	ldr	r2, [pc, #316]	; (8001a88 <pwm_Config+0x1b4>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	e000      	b.n	8001956 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8001954:	bf00      	nop



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7d5b      	ldrb	r3, [r3, #21]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <pwm_Config+0x98>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8ec 	bl	8001b3c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f95b 	bl	8001c20 <setDuttyCycle>
 800196a:	e005      	b.n	8001978 <pwm_Config+0xa4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f8e5 	bl	8001b3c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fa06 	bl	8001d84 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0210 	bic.w	r2, r2, #16
 8001986:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d86f      	bhi.n	8001a78 <pwm_Config+0x1a4>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <pwm_Config+0xcc>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019e3 	.word	0x080019e3
 80019a8:	08001a15 	.word	0x08001a15
 80019ac:	08001a47 	.word	0x08001a47
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0203 	bic.w	r2, r2, #3
 80019be:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80019ce:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0208 	orr.w	r2, r2, #8
 80019de:	619a      	str	r2, [r3, #24]


		break;
 80019e0:	e04b      	b.n	8001a7a <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019f0:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001a00:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a10:	619a      	str	r2, [r3, #24]

		break;
 8001a12:	e032      	b.n	8001a7a <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0203 	bic.w	r2, r2, #3
 8001a22:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001a32:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0208 	orr.w	r2, r2, #8
 8001a42:	61da      	str	r2, [r3, #28]

		break;
 8001a44:	e019      	b.n	8001a7a <pwm_Config+0x1a6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a54:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001a64:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a74:	61da      	str	r2, [r3, #28]

		break;
 8001a76:	e000      	b.n	8001a7a <pwm_Config+0x1a6>
	}

	default:{
		break;
 8001a78:	bf00      	nop
	}// fin del switch-case




}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	40000800 	.word	0x40000800
 8001a94:	40000c00 	.word	0x40000c00

08001a98 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	791b      	ldrb	r3, [r3, #4]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d82f      	bhi.n	8001b2c <enableOutput+0x70>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <enableOutput+0x18>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001af7 	.word	0x08001af7
 8001adc:	08001b09 	.word	0x08001b09
 8001ae0:	08001b1b 	.word	0x08001b1b
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	621a      	str	r2, [r3, #32]

		break;
 8001af4:	e01b      	b.n	8001b2e <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a1a      	ldr	r2, [r3, #32]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0210 	orr.w	r2, r2, #16
 8001b04:	621a      	str	r2, [r3, #32]

		break;
 8001b06:	e012      	b.n	8001b2e <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a1a      	ldr	r2, [r3, #32]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b16:	621a      	str	r2, [r3, #32]

		break;
 8001b18:	e009      	b.n	8001b2e <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b28:	621a      	str	r2, [r3, #32]

		break;
 8001b2a:	e000      	b.n	8001b2e <enableOutput+0x72>
	}

	default: {
		break;
 8001b2c:	bf00      	nop
	}
	}

	return SET;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6892      	ldr	r2, [r2, #8]
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if  ((speed == PWM_SPEED_16MHz_1us ) || (speed == PWM_SPEED_100MHz_1us)) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d002      	beq.n	8001b64 <setFrequency+0x28>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b64      	cmp	r3, #100	; 0x64
 8001b62:	d111      	bne.n	8001b88 <setFrequency+0x4c>

		periodo = ptrPwmHandler->config.periodo * 1000  ;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	899b      	ldrh	r3, [r3, #12]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	0152      	lsls	r2, r2, #5
 8001b6c:	1ad2      	subs	r2, r2, r3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <setFrequency+0xe0>)
 8001b78:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <setFrequency+0xe0>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b86:	e043      	b.n	8001c10 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_10us ) || (speed == PWM_SPEED_100MHz_10us)){
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001b8c:	d003      	beq.n	8001b96 <setFrequency+0x5a>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b94:	d114      	bne.n	8001bc0 <setFrequency+0x84>

		periodo = ptrPwmHandler->config.periodo * 100  ;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	899b      	ldrh	r3, [r3, #12]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	0091      	lsls	r1, r2, #2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <setFrequency+0xe0>)
 8001bb0:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <setFrequency+0xe0>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bbe:	e027      	b.n	8001c10 <setFrequency+0xd4>

	}else if ((speed == PWM_SPEED_16MHz_100us ) || (speed == PWM_SPEED_100MHz_100us)){
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001bc6:	d004      	beq.n	8001bd2 <setFrequency+0x96>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10f      	bne.n	8001bf2 <setFrequency+0xb6>

		periodo = ptrPwmHandler->config.periodo * 10  ;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	899b      	ldrh	r3, [r3, #12]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <setFrequency+0xe0>)
 8001be2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <setFrequency+0xe0>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf0:	e00e      	b.n	8001c10 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_1ms )){
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001bf8:	d10a      	bne.n	8001c10 <setFrequency+0xd4>

		periodo = ptrPwmHandler->config.periodo   ;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	899a      	ldrh	r2, [r3, #12]
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <setFrequency+0xe0>)
 8001c00:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <setFrequency+0xe0>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	1e5a      	subs	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c

	}

}
 8001c0e:	e7ff      	b.n	8001c10 <setFrequency+0xd4>
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000230 	.word	0x20000230

08001c20 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b08b      	sub	sp, #44	; 0x2c
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	f200 809f 	bhi.w	8001d70 <setDuttyCycle+0x150>
 8001c32:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <setDuttyCycle+0x18>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001c93 	.word	0x08001c93
 8001c40:	08001cdd 	.word	0x08001cdd
 8001c44:	08001d27 	.word	0x08001d27
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <setDuttyCycle+0x15c>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	ee17 0a90 	vmov	r0, s15
 8001c62:	f7fe fc79 	bl	8000558 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <setDuttyCycle+0x160>)
 8001c74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c78:	f7fe fdf0 	bl	800085c <__aeabi_ddiv>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681c      	ldr	r4, [r3, #0]
 8001c88:	f7fe ff96 	bl	8000bb8 <__aeabi_d2uiz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8001c90:	e06f      	b.n	8001d72 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <setDuttyCycle+0x15c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca8:	ee17 0a90 	vmov	r0, s15
 8001cac:	f7fe fc54 	bl	8000558 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <setDuttyCycle+0x160>)
 8001cbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc2:	f7fe fdcb 	bl	800085c <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681c      	ldr	r4, [r3, #0]
 8001cd2:	f7fe ff71 	bl	8000bb8 <__aeabi_d2uiz>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8001cda:	e04a      	b.n	8001d72 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <setDuttyCycle+0x15c>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fc2f 	bl	8000558 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <setDuttyCycle+0x160>)
 8001d08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d0c:	f7fe fda6 	bl	800085c <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681c      	ldr	r4, [r3, #0]
 8001d1c:	f7fe ff4c 	bl	8000bb8 <__aeabi_d2uiz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8001d24:	e025      	b.n	8001d72 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <setDuttyCycle+0x15c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3c:	ee17 0a90 	vmov	r0, s15
 8001d40:	f7fe fc0a 	bl	8000558 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <setDuttyCycle+0x160>)
 8001d52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d56:	f7fe fd81 	bl	800085c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681c      	ldr	r4, [r3, #0]
 8001d66:	f7fe ff27 	bl	8000bb8 <__aeabi_d2uiz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001d6e:	e000      	b.n	8001d72 <setDuttyCycle+0x152>
	}

	default:{
		break;
 8001d70:	bf00      	nop
	}

	}// fin del switch-case

}
 8001d72:	bf00      	nop
 8001d74:	372c      	adds	r7, #44	; 0x2c
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000230 	.word	0x20000230
 8001d80:	40590000 	.word	0x40590000

08001d84 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b08b      	sub	sp, #44	; 0x2c
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	f200 80af 	bhi.w	8001ef4 <setDuttyCycleAfOpt+0x170>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <setDuttyCycleAfOpt+0x18>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e51 	.word	0x08001e51
 8001da8:	08001ea3 	.word	0x08001ea3
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	edd3 7a04 	vldr	s15, [r3, #16]
 8001db2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001f00 <setDuttyCycleAfOpt+0x17c>
 8001db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dba:	4b52      	ldr	r3, [pc, #328]	; (8001f04 <setDuttyCycleAfOpt+0x180>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <setDuttyCycleAfOpt+0x184>)
 8001de0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001de4:	f7fe fd3a 	bl	800085c <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681c      	ldr	r4, [r3, #0]
 8001df4:	f7fe fee0 	bl	8000bb8 <__aeabi_d2uiz>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8001dfc:	e07b      	b.n	8001ef6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e04:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001f00 <setDuttyCycleAfOpt+0x17c>
 8001e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <setDuttyCycleAfOpt+0x180>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	ee17 0a90 	vmov	r0, s15
 8001e20:	f7fe fb9a 	bl	8000558 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <setDuttyCycleAfOpt+0x184>)
 8001e32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e36:	f7fe fd11 	bl	800085c <__aeabi_ddiv>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681c      	ldr	r4, [r3, #0]
 8001e46:	f7fe feb7 	bl	8000bb8 <__aeabi_d2uiz>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8001e4e:	e052      	b.n	8001ef6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e56:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001f00 <setDuttyCycleAfOpt+0x17c>
 8001e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <setDuttyCycleAfOpt+0x180>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6e:	ee17 0a90 	vmov	r0, s15
 8001e72:	f7fe fb71 	bl	8000558 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <setDuttyCycleAfOpt+0x184>)
 8001e84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e88:	f7fe fce8 	bl	800085c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681c      	ldr	r4, [r3, #0]
 8001e98:	f7fe fe8e 	bl	8000bb8 <__aeabi_d2uiz>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8001ea0:	e029      	b.n	8001ef6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ea8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001f00 <setDuttyCycleAfOpt+0x17c>
 8001eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <setDuttyCycleAfOpt+0x180>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	ee17 0a90 	vmov	r0, s15
 8001ec4:	f7fe fb48 	bl	8000558 <__aeabi_f2d>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <setDuttyCycleAfOpt+0x184>)
 8001ed6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001eda:	f7fe fcbf 	bl	800085c <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681c      	ldr	r4, [r3, #0]
 8001eea:	f7fe fe65 	bl	8000bb8 <__aeabi_d2uiz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001ef2:	e000      	b.n	8001ef6 <setDuttyCycleAfOpt+0x172>
	}

	default:{
		break;
 8001ef4:	bf00      	nop
	}

	}// fin del switch-case


}
 8001ef6:	bf00      	nop
 8001ef8:	372c      	adds	r7, #44	; 0x2c
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	bf00      	nop
 8001f00:	42c80000 	.word	0x42c80000
 8001f04:	20000230 	.word	0x20000230
 8001f08:	40590000 	.word	0x40590000

08001f0c <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <RCC_enableMaxFrequencies+0xd8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <RCC_enableMaxFrequencies+0xd8>)
 8001f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f2e:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f4c:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8001f50:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f5c:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f68:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001f6a:	e000      	b.n	8001f6e <RCC_enableMaxFrequencies+0x62>
		__NOP();
 8001f6c:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f8      	beq.n	8001f6c <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f80:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f84:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f90:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9c:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <RCC_enableMaxFrequencies+0xdc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <RCC_enableMaxFrequencies+0xdc>)
 8001fa4:	f023 030f 	bic.w	r3, r3, #15
 8001fa8:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <RCC_enableMaxFrequencies+0xdc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <RCC_enableMaxFrequencies+0xdc>)
 8001fb0:	f043 0303 	orr.w	r3, r3, #3
 8001fb4:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8001fc2:	e000      	b.n	8001fc6 <RCC_enableMaxFrequencies+0xba>
		__NOP();
 8001fc4:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <RCC_enableMaxFrequencies+0xd4>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f8      	beq.n	8001fc4 <RCC_enableMaxFrequencies+0xb8>
	}



}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <__errno>:
 8001fec:	4b01      	ldr	r3, [pc, #4]	; (8001ff4 <__errno+0x8>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <__libc_init_array>:
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	4d0d      	ldr	r5, [pc, #52]	; (8002030 <__libc_init_array+0x38>)
 8001ffc:	4c0d      	ldr	r4, [pc, #52]	; (8002034 <__libc_init_array+0x3c>)
 8001ffe:	1b64      	subs	r4, r4, r5
 8002000:	10a4      	asrs	r4, r4, #2
 8002002:	2600      	movs	r6, #0
 8002004:	42a6      	cmp	r6, r4
 8002006:	d109      	bne.n	800201c <__libc_init_array+0x24>
 8002008:	4d0b      	ldr	r5, [pc, #44]	; (8002038 <__libc_init_array+0x40>)
 800200a:	4c0c      	ldr	r4, [pc, #48]	; (800203c <__libc_init_array+0x44>)
 800200c:	f002 fd42 	bl	8004a94 <_init>
 8002010:	1b64      	subs	r4, r4, r5
 8002012:	10a4      	asrs	r4, r4, #2
 8002014:	2600      	movs	r6, #0
 8002016:	42a6      	cmp	r6, r4
 8002018:	d105      	bne.n	8002026 <__libc_init_array+0x2e>
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002020:	4798      	blx	r3
 8002022:	3601      	adds	r6, #1
 8002024:	e7ee      	b.n	8002004 <__libc_init_array+0xc>
 8002026:	f855 3b04 	ldr.w	r3, [r5], #4
 800202a:	4798      	blx	r3
 800202c:	3601      	adds	r6, #1
 800202e:	e7f2      	b.n	8002016 <__libc_init_array+0x1e>
 8002030:	08004e90 	.word	0x08004e90
 8002034:	08004e90 	.word	0x08004e90
 8002038:	08004e90 	.word	0x08004e90
 800203c:	08004e94 	.word	0x08004e94

08002040 <memset>:
 8002040:	4402      	add	r2, r0
 8002042:	4603      	mov	r3, r0
 8002044:	4293      	cmp	r3, r2
 8002046:	d100      	bne.n	800204a <memset+0xa>
 8002048:	4770      	bx	lr
 800204a:	f803 1b01 	strb.w	r1, [r3], #1
 800204e:	e7f9      	b.n	8002044 <memset+0x4>

08002050 <__cvt>:
 8002050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002054:	ec55 4b10 	vmov	r4, r5, d0
 8002058:	2d00      	cmp	r5, #0
 800205a:	460e      	mov	r6, r1
 800205c:	4619      	mov	r1, r3
 800205e:	462b      	mov	r3, r5
 8002060:	bfbb      	ittet	lt
 8002062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002066:	461d      	movlt	r5, r3
 8002068:	2300      	movge	r3, #0
 800206a:	232d      	movlt	r3, #45	; 0x2d
 800206c:	700b      	strb	r3, [r1, #0]
 800206e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002074:	4691      	mov	r9, r2
 8002076:	f023 0820 	bic.w	r8, r3, #32
 800207a:	bfbc      	itt	lt
 800207c:	4622      	movlt	r2, r4
 800207e:	4614      	movlt	r4, r2
 8002080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002084:	d005      	beq.n	8002092 <__cvt+0x42>
 8002086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800208a:	d100      	bne.n	800208e <__cvt+0x3e>
 800208c:	3601      	adds	r6, #1
 800208e:	2102      	movs	r1, #2
 8002090:	e000      	b.n	8002094 <__cvt+0x44>
 8002092:	2103      	movs	r1, #3
 8002094:	ab03      	add	r3, sp, #12
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	ab02      	add	r3, sp, #8
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	ec45 4b10 	vmov	d0, r4, r5
 80020a0:	4653      	mov	r3, sl
 80020a2:	4632      	mov	r2, r6
 80020a4:	f000 fd30 	bl	8002b08 <_dtoa_r>
 80020a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80020ac:	4607      	mov	r7, r0
 80020ae:	d102      	bne.n	80020b6 <__cvt+0x66>
 80020b0:	f019 0f01 	tst.w	r9, #1
 80020b4:	d022      	beq.n	80020fc <__cvt+0xac>
 80020b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80020ba:	eb07 0906 	add.w	r9, r7, r6
 80020be:	d110      	bne.n	80020e2 <__cvt+0x92>
 80020c0:	783b      	ldrb	r3, [r7, #0]
 80020c2:	2b30      	cmp	r3, #48	; 0x30
 80020c4:	d10a      	bne.n	80020dc <__cvt+0x8c>
 80020c6:	2200      	movs	r2, #0
 80020c8:	2300      	movs	r3, #0
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 80020d2:	b918      	cbnz	r0, 80020dc <__cvt+0x8c>
 80020d4:	f1c6 0601 	rsb	r6, r6, #1
 80020d8:	f8ca 6000 	str.w	r6, [sl]
 80020dc:	f8da 3000 	ldr.w	r3, [sl]
 80020e0:	4499      	add	r9, r3
 80020e2:	2200      	movs	r2, #0
 80020e4:	2300      	movs	r3, #0
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80020ee:	b108      	cbz	r0, 80020f4 <__cvt+0xa4>
 80020f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80020f4:	2230      	movs	r2, #48	; 0x30
 80020f6:	9b03      	ldr	r3, [sp, #12]
 80020f8:	454b      	cmp	r3, r9
 80020fa:	d307      	bcc.n	800210c <__cvt+0xbc>
 80020fc:	9b03      	ldr	r3, [sp, #12]
 80020fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002100:	1bdb      	subs	r3, r3, r7
 8002102:	4638      	mov	r0, r7
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	b004      	add	sp, #16
 8002108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800210c:	1c59      	adds	r1, r3, #1
 800210e:	9103      	str	r1, [sp, #12]
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e7f0      	b.n	80020f6 <__cvt+0xa6>

08002114 <__exponent>:
 8002114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002116:	4603      	mov	r3, r0
 8002118:	2900      	cmp	r1, #0
 800211a:	bfb8      	it	lt
 800211c:	4249      	neglt	r1, r1
 800211e:	f803 2b02 	strb.w	r2, [r3], #2
 8002122:	bfb4      	ite	lt
 8002124:	222d      	movlt	r2, #45	; 0x2d
 8002126:	222b      	movge	r2, #43	; 0x2b
 8002128:	2909      	cmp	r1, #9
 800212a:	7042      	strb	r2, [r0, #1]
 800212c:	dd2a      	ble.n	8002184 <__exponent+0x70>
 800212e:	f10d 0407 	add.w	r4, sp, #7
 8002132:	46a4      	mov	ip, r4
 8002134:	270a      	movs	r7, #10
 8002136:	46a6      	mov	lr, r4
 8002138:	460a      	mov	r2, r1
 800213a:	fb91 f6f7 	sdiv	r6, r1, r7
 800213e:	fb07 1516 	mls	r5, r7, r6, r1
 8002142:	3530      	adds	r5, #48	; 0x30
 8002144:	2a63      	cmp	r2, #99	; 0x63
 8002146:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800214a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800214e:	4631      	mov	r1, r6
 8002150:	dcf1      	bgt.n	8002136 <__exponent+0x22>
 8002152:	3130      	adds	r1, #48	; 0x30
 8002154:	f1ae 0502 	sub.w	r5, lr, #2
 8002158:	f804 1c01 	strb.w	r1, [r4, #-1]
 800215c:	1c44      	adds	r4, r0, #1
 800215e:	4629      	mov	r1, r5
 8002160:	4561      	cmp	r1, ip
 8002162:	d30a      	bcc.n	800217a <__exponent+0x66>
 8002164:	f10d 0209 	add.w	r2, sp, #9
 8002168:	eba2 020e 	sub.w	r2, r2, lr
 800216c:	4565      	cmp	r5, ip
 800216e:	bf88      	it	hi
 8002170:	2200      	movhi	r2, #0
 8002172:	4413      	add	r3, r2
 8002174:	1a18      	subs	r0, r3, r0
 8002176:	b003      	add	sp, #12
 8002178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800217a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800217e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002182:	e7ed      	b.n	8002160 <__exponent+0x4c>
 8002184:	2330      	movs	r3, #48	; 0x30
 8002186:	3130      	adds	r1, #48	; 0x30
 8002188:	7083      	strb	r3, [r0, #2]
 800218a:	70c1      	strb	r1, [r0, #3]
 800218c:	1d03      	adds	r3, r0, #4
 800218e:	e7f1      	b.n	8002174 <__exponent+0x60>

08002190 <_printf_float>:
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	ed2d 8b02 	vpush	{d8}
 8002198:	b08d      	sub	sp, #52	; 0x34
 800219a:	460c      	mov	r4, r1
 800219c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80021a0:	4616      	mov	r6, r2
 80021a2:	461f      	mov	r7, r3
 80021a4:	4605      	mov	r5, r0
 80021a6:	f001 fa9d 	bl	80036e4 <_localeconv_r>
 80021aa:	f8d0 a000 	ldr.w	sl, [r0]
 80021ae:	4650      	mov	r0, sl
 80021b0:	f7fe f816 	bl	80001e0 <strlen>
 80021b4:	2300      	movs	r3, #0
 80021b6:	930a      	str	r3, [sp, #40]	; 0x28
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	9305      	str	r3, [sp, #20]
 80021bc:	f8d8 3000 	ldr.w	r3, [r8]
 80021c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80021c4:	3307      	adds	r3, #7
 80021c6:	f023 0307 	bic.w	r3, r3, #7
 80021ca:	f103 0208 	add.w	r2, r3, #8
 80021ce:	f8c8 2000 	str.w	r2, [r8]
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80021da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80021de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80021e2:	9307      	str	r3, [sp, #28]
 80021e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80021e8:	ee08 0a10 	vmov	s16, r0
 80021ec:	4b9f      	ldr	r3, [pc, #636]	; (800246c <_printf_float+0x2dc>)
 80021ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80021f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021f6:	f7fe fca1 	bl	8000b3c <__aeabi_dcmpun>
 80021fa:	bb88      	cbnz	r0, 8002260 <_printf_float+0xd0>
 80021fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002200:	4b9a      	ldr	r3, [pc, #616]	; (800246c <_printf_float+0x2dc>)
 8002202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002206:	f7fe fc7b 	bl	8000b00 <__aeabi_dcmple>
 800220a:	bb48      	cbnz	r0, 8002260 <_printf_float+0xd0>
 800220c:	2200      	movs	r2, #0
 800220e:	2300      	movs	r3, #0
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	f7fe fc6a 	bl	8000aec <__aeabi_dcmplt>
 8002218:	b110      	cbz	r0, 8002220 <_printf_float+0x90>
 800221a:	232d      	movs	r3, #45	; 0x2d
 800221c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002220:	4b93      	ldr	r3, [pc, #588]	; (8002470 <_printf_float+0x2e0>)
 8002222:	4894      	ldr	r0, [pc, #592]	; (8002474 <_printf_float+0x2e4>)
 8002224:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002228:	bf94      	ite	ls
 800222a:	4698      	movls	r8, r3
 800222c:	4680      	movhi	r8, r0
 800222e:	2303      	movs	r3, #3
 8002230:	6123      	str	r3, [r4, #16]
 8002232:	9b05      	ldr	r3, [sp, #20]
 8002234:	f023 0204 	bic.w	r2, r3, #4
 8002238:	6022      	str	r2, [r4, #0]
 800223a:	f04f 0900 	mov.w	r9, #0
 800223e:	9700      	str	r7, [sp, #0]
 8002240:	4633      	mov	r3, r6
 8002242:	aa0b      	add	r2, sp, #44	; 0x2c
 8002244:	4621      	mov	r1, r4
 8002246:	4628      	mov	r0, r5
 8002248:	f000 f9d8 	bl	80025fc <_printf_common>
 800224c:	3001      	adds	r0, #1
 800224e:	f040 8090 	bne.w	8002372 <_printf_float+0x1e2>
 8002252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002256:	b00d      	add	sp, #52	; 0x34
 8002258:	ecbd 8b02 	vpop	{d8}
 800225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002260:	4642      	mov	r2, r8
 8002262:	464b      	mov	r3, r9
 8002264:	4640      	mov	r0, r8
 8002266:	4649      	mov	r1, r9
 8002268:	f7fe fc68 	bl	8000b3c <__aeabi_dcmpun>
 800226c:	b140      	cbz	r0, 8002280 <_printf_float+0xf0>
 800226e:	464b      	mov	r3, r9
 8002270:	2b00      	cmp	r3, #0
 8002272:	bfbc      	itt	lt
 8002274:	232d      	movlt	r3, #45	; 0x2d
 8002276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800227a:	487f      	ldr	r0, [pc, #508]	; (8002478 <_printf_float+0x2e8>)
 800227c:	4b7f      	ldr	r3, [pc, #508]	; (800247c <_printf_float+0x2ec>)
 800227e:	e7d1      	b.n	8002224 <_printf_float+0x94>
 8002280:	6863      	ldr	r3, [r4, #4]
 8002282:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002286:	9206      	str	r2, [sp, #24]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	d13f      	bne.n	800230c <_printf_float+0x17c>
 800228c:	2306      	movs	r3, #6
 800228e:	6063      	str	r3, [r4, #4]
 8002290:	9b05      	ldr	r3, [sp, #20]
 8002292:	6861      	ldr	r1, [r4, #4]
 8002294:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002298:	2300      	movs	r3, #0
 800229a:	9303      	str	r3, [sp, #12]
 800229c:	ab0a      	add	r3, sp, #40	; 0x28
 800229e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80022a2:	ab09      	add	r3, sp, #36	; 0x24
 80022a4:	ec49 8b10 	vmov	d0, r8, r9
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	6022      	str	r2, [r4, #0]
 80022ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80022b0:	4628      	mov	r0, r5
 80022b2:	f7ff fecd 	bl	8002050 <__cvt>
 80022b6:	9b06      	ldr	r3, [sp, #24]
 80022b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80022ba:	2b47      	cmp	r3, #71	; 0x47
 80022bc:	4680      	mov	r8, r0
 80022be:	d108      	bne.n	80022d2 <_printf_float+0x142>
 80022c0:	1cc8      	adds	r0, r1, #3
 80022c2:	db02      	blt.n	80022ca <_printf_float+0x13a>
 80022c4:	6863      	ldr	r3, [r4, #4]
 80022c6:	4299      	cmp	r1, r3
 80022c8:	dd41      	ble.n	800234e <_printf_float+0x1be>
 80022ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80022ce:	fa5f fb8b 	uxtb.w	fp, fp
 80022d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80022d6:	d820      	bhi.n	800231a <_printf_float+0x18a>
 80022d8:	3901      	subs	r1, #1
 80022da:	465a      	mov	r2, fp
 80022dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80022e0:	9109      	str	r1, [sp, #36]	; 0x24
 80022e2:	f7ff ff17 	bl	8002114 <__exponent>
 80022e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022e8:	1813      	adds	r3, r2, r0
 80022ea:	2a01      	cmp	r2, #1
 80022ec:	4681      	mov	r9, r0
 80022ee:	6123      	str	r3, [r4, #16]
 80022f0:	dc02      	bgt.n	80022f8 <_printf_float+0x168>
 80022f2:	6822      	ldr	r2, [r4, #0]
 80022f4:	07d2      	lsls	r2, r2, #31
 80022f6:	d501      	bpl.n	80022fc <_printf_float+0x16c>
 80022f8:	3301      	adds	r3, #1
 80022fa:	6123      	str	r3, [r4, #16]
 80022fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002300:	2b00      	cmp	r3, #0
 8002302:	d09c      	beq.n	800223e <_printf_float+0xae>
 8002304:	232d      	movs	r3, #45	; 0x2d
 8002306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800230a:	e798      	b.n	800223e <_printf_float+0xae>
 800230c:	9a06      	ldr	r2, [sp, #24]
 800230e:	2a47      	cmp	r2, #71	; 0x47
 8002310:	d1be      	bne.n	8002290 <_printf_float+0x100>
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1bc      	bne.n	8002290 <_printf_float+0x100>
 8002316:	2301      	movs	r3, #1
 8002318:	e7b9      	b.n	800228e <_printf_float+0xfe>
 800231a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800231e:	d118      	bne.n	8002352 <_printf_float+0x1c2>
 8002320:	2900      	cmp	r1, #0
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	dd0b      	ble.n	800233e <_printf_float+0x1ae>
 8002326:	6121      	str	r1, [r4, #16]
 8002328:	b913      	cbnz	r3, 8002330 <_printf_float+0x1a0>
 800232a:	6822      	ldr	r2, [r4, #0]
 800232c:	07d0      	lsls	r0, r2, #31
 800232e:	d502      	bpl.n	8002336 <_printf_float+0x1a6>
 8002330:	3301      	adds	r3, #1
 8002332:	440b      	add	r3, r1
 8002334:	6123      	str	r3, [r4, #16]
 8002336:	65a1      	str	r1, [r4, #88]	; 0x58
 8002338:	f04f 0900 	mov.w	r9, #0
 800233c:	e7de      	b.n	80022fc <_printf_float+0x16c>
 800233e:	b913      	cbnz	r3, 8002346 <_printf_float+0x1b6>
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	07d2      	lsls	r2, r2, #31
 8002344:	d501      	bpl.n	800234a <_printf_float+0x1ba>
 8002346:	3302      	adds	r3, #2
 8002348:	e7f4      	b.n	8002334 <_printf_float+0x1a4>
 800234a:	2301      	movs	r3, #1
 800234c:	e7f2      	b.n	8002334 <_printf_float+0x1a4>
 800234e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002354:	4299      	cmp	r1, r3
 8002356:	db05      	blt.n	8002364 <_printf_float+0x1d4>
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	6121      	str	r1, [r4, #16]
 800235c:	07d8      	lsls	r0, r3, #31
 800235e:	d5ea      	bpl.n	8002336 <_printf_float+0x1a6>
 8002360:	1c4b      	adds	r3, r1, #1
 8002362:	e7e7      	b.n	8002334 <_printf_float+0x1a4>
 8002364:	2900      	cmp	r1, #0
 8002366:	bfd4      	ite	le
 8002368:	f1c1 0202 	rsble	r2, r1, #2
 800236c:	2201      	movgt	r2, #1
 800236e:	4413      	add	r3, r2
 8002370:	e7e0      	b.n	8002334 <_printf_float+0x1a4>
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	055a      	lsls	r2, r3, #21
 8002376:	d407      	bmi.n	8002388 <_printf_float+0x1f8>
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	4642      	mov	r2, r8
 800237c:	4631      	mov	r1, r6
 800237e:	4628      	mov	r0, r5
 8002380:	47b8      	blx	r7
 8002382:	3001      	adds	r0, #1
 8002384:	d12c      	bne.n	80023e0 <_printf_float+0x250>
 8002386:	e764      	b.n	8002252 <_printf_float+0xc2>
 8002388:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800238c:	f240 80e0 	bls.w	8002550 <_printf_float+0x3c0>
 8002390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002394:	2200      	movs	r2, #0
 8002396:	2300      	movs	r3, #0
 8002398:	f7fe fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800239c:	2800      	cmp	r0, #0
 800239e:	d034      	beq.n	800240a <_printf_float+0x27a>
 80023a0:	4a37      	ldr	r2, [pc, #220]	; (8002480 <_printf_float+0x2f0>)
 80023a2:	2301      	movs	r3, #1
 80023a4:	4631      	mov	r1, r6
 80023a6:	4628      	mov	r0, r5
 80023a8:	47b8      	blx	r7
 80023aa:	3001      	adds	r0, #1
 80023ac:	f43f af51 	beq.w	8002252 <_printf_float+0xc2>
 80023b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023b4:	429a      	cmp	r2, r3
 80023b6:	db02      	blt.n	80023be <_printf_float+0x22e>
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	07d8      	lsls	r0, r3, #31
 80023bc:	d510      	bpl.n	80023e0 <_printf_float+0x250>
 80023be:	ee18 3a10 	vmov	r3, s16
 80023c2:	4652      	mov	r2, sl
 80023c4:	4631      	mov	r1, r6
 80023c6:	4628      	mov	r0, r5
 80023c8:	47b8      	blx	r7
 80023ca:	3001      	adds	r0, #1
 80023cc:	f43f af41 	beq.w	8002252 <_printf_float+0xc2>
 80023d0:	f04f 0800 	mov.w	r8, #0
 80023d4:	f104 091a 	add.w	r9, r4, #26
 80023d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	4543      	cmp	r3, r8
 80023de:	dc09      	bgt.n	80023f4 <_printf_float+0x264>
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	079b      	lsls	r3, r3, #30
 80023e4:	f100 8105 	bmi.w	80025f2 <_printf_float+0x462>
 80023e8:	68e0      	ldr	r0, [r4, #12]
 80023ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80023ec:	4298      	cmp	r0, r3
 80023ee:	bfb8      	it	lt
 80023f0:	4618      	movlt	r0, r3
 80023f2:	e730      	b.n	8002256 <_printf_float+0xc6>
 80023f4:	2301      	movs	r3, #1
 80023f6:	464a      	mov	r2, r9
 80023f8:	4631      	mov	r1, r6
 80023fa:	4628      	mov	r0, r5
 80023fc:	47b8      	blx	r7
 80023fe:	3001      	adds	r0, #1
 8002400:	f43f af27 	beq.w	8002252 <_printf_float+0xc2>
 8002404:	f108 0801 	add.w	r8, r8, #1
 8002408:	e7e6      	b.n	80023d8 <_printf_float+0x248>
 800240a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	dc39      	bgt.n	8002484 <_printf_float+0x2f4>
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <_printf_float+0x2f0>)
 8002412:	2301      	movs	r3, #1
 8002414:	4631      	mov	r1, r6
 8002416:	4628      	mov	r0, r5
 8002418:	47b8      	blx	r7
 800241a:	3001      	adds	r0, #1
 800241c:	f43f af19 	beq.w	8002252 <_printf_float+0xc2>
 8002420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002424:	4313      	orrs	r3, r2
 8002426:	d102      	bne.n	800242e <_printf_float+0x29e>
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	07d9      	lsls	r1, r3, #31
 800242c:	d5d8      	bpl.n	80023e0 <_printf_float+0x250>
 800242e:	ee18 3a10 	vmov	r3, s16
 8002432:	4652      	mov	r2, sl
 8002434:	4631      	mov	r1, r6
 8002436:	4628      	mov	r0, r5
 8002438:	47b8      	blx	r7
 800243a:	3001      	adds	r0, #1
 800243c:	f43f af09 	beq.w	8002252 <_printf_float+0xc2>
 8002440:	f04f 0900 	mov.w	r9, #0
 8002444:	f104 0a1a 	add.w	sl, r4, #26
 8002448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800244a:	425b      	negs	r3, r3
 800244c:	454b      	cmp	r3, r9
 800244e:	dc01      	bgt.n	8002454 <_printf_float+0x2c4>
 8002450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002452:	e792      	b.n	800237a <_printf_float+0x1ea>
 8002454:	2301      	movs	r3, #1
 8002456:	4652      	mov	r2, sl
 8002458:	4631      	mov	r1, r6
 800245a:	4628      	mov	r0, r5
 800245c:	47b8      	blx	r7
 800245e:	3001      	adds	r0, #1
 8002460:	f43f aef7 	beq.w	8002252 <_printf_float+0xc2>
 8002464:	f109 0901 	add.w	r9, r9, #1
 8002468:	e7ee      	b.n	8002448 <_printf_float+0x2b8>
 800246a:	bf00      	nop
 800246c:	7fefffff 	.word	0x7fefffff
 8002470:	08004ab4 	.word	0x08004ab4
 8002474:	08004ab8 	.word	0x08004ab8
 8002478:	08004ac0 	.word	0x08004ac0
 800247c:	08004abc 	.word	0x08004abc
 8002480:	08004ac4 	.word	0x08004ac4
 8002484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002488:	429a      	cmp	r2, r3
 800248a:	bfa8      	it	ge
 800248c:	461a      	movge	r2, r3
 800248e:	2a00      	cmp	r2, #0
 8002490:	4691      	mov	r9, r2
 8002492:	dc37      	bgt.n	8002504 <_printf_float+0x374>
 8002494:	f04f 0b00 	mov.w	fp, #0
 8002498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800249c:	f104 021a 	add.w	r2, r4, #26
 80024a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	eba3 0309 	sub.w	r3, r3, r9
 80024a8:	455b      	cmp	r3, fp
 80024aa:	dc33      	bgt.n	8002514 <_printf_float+0x384>
 80024ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024b0:	429a      	cmp	r2, r3
 80024b2:	db3b      	blt.n	800252c <_printf_float+0x39c>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	07da      	lsls	r2, r3, #31
 80024b8:	d438      	bmi.n	800252c <_printf_float+0x39c>
 80024ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024bc:	9a05      	ldr	r2, [sp, #20]
 80024be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80024c0:	1a9a      	subs	r2, r3, r2
 80024c2:	eba3 0901 	sub.w	r9, r3, r1
 80024c6:	4591      	cmp	r9, r2
 80024c8:	bfa8      	it	ge
 80024ca:	4691      	movge	r9, r2
 80024cc:	f1b9 0f00 	cmp.w	r9, #0
 80024d0:	dc35      	bgt.n	800253e <_printf_float+0x3ae>
 80024d2:	f04f 0800 	mov.w	r8, #0
 80024d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024da:	f104 0a1a 	add.w	sl, r4, #26
 80024de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	eba3 0309 	sub.w	r3, r3, r9
 80024e8:	4543      	cmp	r3, r8
 80024ea:	f77f af79 	ble.w	80023e0 <_printf_float+0x250>
 80024ee:	2301      	movs	r3, #1
 80024f0:	4652      	mov	r2, sl
 80024f2:	4631      	mov	r1, r6
 80024f4:	4628      	mov	r0, r5
 80024f6:	47b8      	blx	r7
 80024f8:	3001      	adds	r0, #1
 80024fa:	f43f aeaa 	beq.w	8002252 <_printf_float+0xc2>
 80024fe:	f108 0801 	add.w	r8, r8, #1
 8002502:	e7ec      	b.n	80024de <_printf_float+0x34e>
 8002504:	4613      	mov	r3, r2
 8002506:	4631      	mov	r1, r6
 8002508:	4642      	mov	r2, r8
 800250a:	4628      	mov	r0, r5
 800250c:	47b8      	blx	r7
 800250e:	3001      	adds	r0, #1
 8002510:	d1c0      	bne.n	8002494 <_printf_float+0x304>
 8002512:	e69e      	b.n	8002252 <_printf_float+0xc2>
 8002514:	2301      	movs	r3, #1
 8002516:	4631      	mov	r1, r6
 8002518:	4628      	mov	r0, r5
 800251a:	9205      	str	r2, [sp, #20]
 800251c:	47b8      	blx	r7
 800251e:	3001      	adds	r0, #1
 8002520:	f43f ae97 	beq.w	8002252 <_printf_float+0xc2>
 8002524:	9a05      	ldr	r2, [sp, #20]
 8002526:	f10b 0b01 	add.w	fp, fp, #1
 800252a:	e7b9      	b.n	80024a0 <_printf_float+0x310>
 800252c:	ee18 3a10 	vmov	r3, s16
 8002530:	4652      	mov	r2, sl
 8002532:	4631      	mov	r1, r6
 8002534:	4628      	mov	r0, r5
 8002536:	47b8      	blx	r7
 8002538:	3001      	adds	r0, #1
 800253a:	d1be      	bne.n	80024ba <_printf_float+0x32a>
 800253c:	e689      	b.n	8002252 <_printf_float+0xc2>
 800253e:	9a05      	ldr	r2, [sp, #20]
 8002540:	464b      	mov	r3, r9
 8002542:	4442      	add	r2, r8
 8002544:	4631      	mov	r1, r6
 8002546:	4628      	mov	r0, r5
 8002548:	47b8      	blx	r7
 800254a:	3001      	adds	r0, #1
 800254c:	d1c1      	bne.n	80024d2 <_printf_float+0x342>
 800254e:	e680      	b.n	8002252 <_printf_float+0xc2>
 8002550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002552:	2a01      	cmp	r2, #1
 8002554:	dc01      	bgt.n	800255a <_printf_float+0x3ca>
 8002556:	07db      	lsls	r3, r3, #31
 8002558:	d538      	bpl.n	80025cc <_printf_float+0x43c>
 800255a:	2301      	movs	r3, #1
 800255c:	4642      	mov	r2, r8
 800255e:	4631      	mov	r1, r6
 8002560:	4628      	mov	r0, r5
 8002562:	47b8      	blx	r7
 8002564:	3001      	adds	r0, #1
 8002566:	f43f ae74 	beq.w	8002252 <_printf_float+0xc2>
 800256a:	ee18 3a10 	vmov	r3, s16
 800256e:	4652      	mov	r2, sl
 8002570:	4631      	mov	r1, r6
 8002572:	4628      	mov	r0, r5
 8002574:	47b8      	blx	r7
 8002576:	3001      	adds	r0, #1
 8002578:	f43f ae6b 	beq.w	8002252 <_printf_float+0xc2>
 800257c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002580:	2200      	movs	r2, #0
 8002582:	2300      	movs	r3, #0
 8002584:	f7fe faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8002588:	b9d8      	cbnz	r0, 80025c2 <_printf_float+0x432>
 800258a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800258c:	f108 0201 	add.w	r2, r8, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	4631      	mov	r1, r6
 8002594:	4628      	mov	r0, r5
 8002596:	47b8      	blx	r7
 8002598:	3001      	adds	r0, #1
 800259a:	d10e      	bne.n	80025ba <_printf_float+0x42a>
 800259c:	e659      	b.n	8002252 <_printf_float+0xc2>
 800259e:	2301      	movs	r3, #1
 80025a0:	4652      	mov	r2, sl
 80025a2:	4631      	mov	r1, r6
 80025a4:	4628      	mov	r0, r5
 80025a6:	47b8      	blx	r7
 80025a8:	3001      	adds	r0, #1
 80025aa:	f43f ae52 	beq.w	8002252 <_printf_float+0xc2>
 80025ae:	f108 0801 	add.w	r8, r8, #1
 80025b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	4543      	cmp	r3, r8
 80025b8:	dcf1      	bgt.n	800259e <_printf_float+0x40e>
 80025ba:	464b      	mov	r3, r9
 80025bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80025c0:	e6dc      	b.n	800237c <_printf_float+0x1ec>
 80025c2:	f04f 0800 	mov.w	r8, #0
 80025c6:	f104 0a1a 	add.w	sl, r4, #26
 80025ca:	e7f2      	b.n	80025b2 <_printf_float+0x422>
 80025cc:	2301      	movs	r3, #1
 80025ce:	4642      	mov	r2, r8
 80025d0:	e7df      	b.n	8002592 <_printf_float+0x402>
 80025d2:	2301      	movs	r3, #1
 80025d4:	464a      	mov	r2, r9
 80025d6:	4631      	mov	r1, r6
 80025d8:	4628      	mov	r0, r5
 80025da:	47b8      	blx	r7
 80025dc:	3001      	adds	r0, #1
 80025de:	f43f ae38 	beq.w	8002252 <_printf_float+0xc2>
 80025e2:	f108 0801 	add.w	r8, r8, #1
 80025e6:	68e3      	ldr	r3, [r4, #12]
 80025e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80025ea:	1a5b      	subs	r3, r3, r1
 80025ec:	4543      	cmp	r3, r8
 80025ee:	dcf0      	bgt.n	80025d2 <_printf_float+0x442>
 80025f0:	e6fa      	b.n	80023e8 <_printf_float+0x258>
 80025f2:	f04f 0800 	mov.w	r8, #0
 80025f6:	f104 0919 	add.w	r9, r4, #25
 80025fa:	e7f4      	b.n	80025e6 <_printf_float+0x456>

080025fc <_printf_common>:
 80025fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002600:	4616      	mov	r6, r2
 8002602:	4699      	mov	r9, r3
 8002604:	688a      	ldr	r2, [r1, #8]
 8002606:	690b      	ldr	r3, [r1, #16]
 8002608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800260c:	4293      	cmp	r3, r2
 800260e:	bfb8      	it	lt
 8002610:	4613      	movlt	r3, r2
 8002612:	6033      	str	r3, [r6, #0]
 8002614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002618:	4607      	mov	r7, r0
 800261a:	460c      	mov	r4, r1
 800261c:	b10a      	cbz	r2, 8002622 <_printf_common+0x26>
 800261e:	3301      	adds	r3, #1
 8002620:	6033      	str	r3, [r6, #0]
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	0699      	lsls	r1, r3, #26
 8002626:	bf42      	ittt	mi
 8002628:	6833      	ldrmi	r3, [r6, #0]
 800262a:	3302      	addmi	r3, #2
 800262c:	6033      	strmi	r3, [r6, #0]
 800262e:	6825      	ldr	r5, [r4, #0]
 8002630:	f015 0506 	ands.w	r5, r5, #6
 8002634:	d106      	bne.n	8002644 <_printf_common+0x48>
 8002636:	f104 0a19 	add.w	sl, r4, #25
 800263a:	68e3      	ldr	r3, [r4, #12]
 800263c:	6832      	ldr	r2, [r6, #0]
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	42ab      	cmp	r3, r5
 8002642:	dc26      	bgt.n	8002692 <_printf_common+0x96>
 8002644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002648:	1e13      	subs	r3, r2, #0
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	bf18      	it	ne
 800264e:	2301      	movne	r3, #1
 8002650:	0692      	lsls	r2, r2, #26
 8002652:	d42b      	bmi.n	80026ac <_printf_common+0xb0>
 8002654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002658:	4649      	mov	r1, r9
 800265a:	4638      	mov	r0, r7
 800265c:	47c0      	blx	r8
 800265e:	3001      	adds	r0, #1
 8002660:	d01e      	beq.n	80026a0 <_printf_common+0xa4>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	68e5      	ldr	r5, [r4, #12]
 8002666:	6832      	ldr	r2, [r6, #0]
 8002668:	f003 0306 	and.w	r3, r3, #6
 800266c:	2b04      	cmp	r3, #4
 800266e:	bf08      	it	eq
 8002670:	1aad      	subeq	r5, r5, r2
 8002672:	68a3      	ldr	r3, [r4, #8]
 8002674:	6922      	ldr	r2, [r4, #16]
 8002676:	bf0c      	ite	eq
 8002678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800267c:	2500      	movne	r5, #0
 800267e:	4293      	cmp	r3, r2
 8002680:	bfc4      	itt	gt
 8002682:	1a9b      	subgt	r3, r3, r2
 8002684:	18ed      	addgt	r5, r5, r3
 8002686:	2600      	movs	r6, #0
 8002688:	341a      	adds	r4, #26
 800268a:	42b5      	cmp	r5, r6
 800268c:	d11a      	bne.n	80026c4 <_printf_common+0xc8>
 800268e:	2000      	movs	r0, #0
 8002690:	e008      	b.n	80026a4 <_printf_common+0xa8>
 8002692:	2301      	movs	r3, #1
 8002694:	4652      	mov	r2, sl
 8002696:	4649      	mov	r1, r9
 8002698:	4638      	mov	r0, r7
 800269a:	47c0      	blx	r8
 800269c:	3001      	adds	r0, #1
 800269e:	d103      	bne.n	80026a8 <_printf_common+0xac>
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a8:	3501      	adds	r5, #1
 80026aa:	e7c6      	b.n	800263a <_printf_common+0x3e>
 80026ac:	18e1      	adds	r1, r4, r3
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	2030      	movs	r0, #48	; 0x30
 80026b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026b6:	4422      	add	r2, r4
 80026b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026c0:	3302      	adds	r3, #2
 80026c2:	e7c7      	b.n	8002654 <_printf_common+0x58>
 80026c4:	2301      	movs	r3, #1
 80026c6:	4622      	mov	r2, r4
 80026c8:	4649      	mov	r1, r9
 80026ca:	4638      	mov	r0, r7
 80026cc:	47c0      	blx	r8
 80026ce:	3001      	adds	r0, #1
 80026d0:	d0e6      	beq.n	80026a0 <_printf_common+0xa4>
 80026d2:	3601      	adds	r6, #1
 80026d4:	e7d9      	b.n	800268a <_printf_common+0x8e>
	...

080026d8 <_printf_i>:
 80026d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026dc:	7e0f      	ldrb	r7, [r1, #24]
 80026de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026e0:	2f78      	cmp	r7, #120	; 0x78
 80026e2:	4691      	mov	r9, r2
 80026e4:	4680      	mov	r8, r0
 80026e6:	460c      	mov	r4, r1
 80026e8:	469a      	mov	sl, r3
 80026ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026ee:	d807      	bhi.n	8002700 <_printf_i+0x28>
 80026f0:	2f62      	cmp	r7, #98	; 0x62
 80026f2:	d80a      	bhi.n	800270a <_printf_i+0x32>
 80026f4:	2f00      	cmp	r7, #0
 80026f6:	f000 80d8 	beq.w	80028aa <_printf_i+0x1d2>
 80026fa:	2f58      	cmp	r7, #88	; 0x58
 80026fc:	f000 80a3 	beq.w	8002846 <_printf_i+0x16e>
 8002700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002708:	e03a      	b.n	8002780 <_printf_i+0xa8>
 800270a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800270e:	2b15      	cmp	r3, #21
 8002710:	d8f6      	bhi.n	8002700 <_printf_i+0x28>
 8002712:	a101      	add	r1, pc, #4	; (adr r1, 8002718 <_printf_i+0x40>)
 8002714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002718:	08002771 	.word	0x08002771
 800271c:	08002785 	.word	0x08002785
 8002720:	08002701 	.word	0x08002701
 8002724:	08002701 	.word	0x08002701
 8002728:	08002701 	.word	0x08002701
 800272c:	08002701 	.word	0x08002701
 8002730:	08002785 	.word	0x08002785
 8002734:	08002701 	.word	0x08002701
 8002738:	08002701 	.word	0x08002701
 800273c:	08002701 	.word	0x08002701
 8002740:	08002701 	.word	0x08002701
 8002744:	08002891 	.word	0x08002891
 8002748:	080027b5 	.word	0x080027b5
 800274c:	08002873 	.word	0x08002873
 8002750:	08002701 	.word	0x08002701
 8002754:	08002701 	.word	0x08002701
 8002758:	080028b3 	.word	0x080028b3
 800275c:	08002701 	.word	0x08002701
 8002760:	080027b5 	.word	0x080027b5
 8002764:	08002701 	.word	0x08002701
 8002768:	08002701 	.word	0x08002701
 800276c:	0800287b 	.word	0x0800287b
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	1d1a      	adds	r2, r3, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	602a      	str	r2, [r5, #0]
 8002778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800277c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002780:	2301      	movs	r3, #1
 8002782:	e0a3      	b.n	80028cc <_printf_i+0x1f4>
 8002784:	6820      	ldr	r0, [r4, #0]
 8002786:	6829      	ldr	r1, [r5, #0]
 8002788:	0606      	lsls	r6, r0, #24
 800278a:	f101 0304 	add.w	r3, r1, #4
 800278e:	d50a      	bpl.n	80027a6 <_printf_i+0xce>
 8002790:	680e      	ldr	r6, [r1, #0]
 8002792:	602b      	str	r3, [r5, #0]
 8002794:	2e00      	cmp	r6, #0
 8002796:	da03      	bge.n	80027a0 <_printf_i+0xc8>
 8002798:	232d      	movs	r3, #45	; 0x2d
 800279a:	4276      	negs	r6, r6
 800279c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027a0:	485e      	ldr	r0, [pc, #376]	; (800291c <_printf_i+0x244>)
 80027a2:	230a      	movs	r3, #10
 80027a4:	e019      	b.n	80027da <_printf_i+0x102>
 80027a6:	680e      	ldr	r6, [r1, #0]
 80027a8:	602b      	str	r3, [r5, #0]
 80027aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027ae:	bf18      	it	ne
 80027b0:	b236      	sxthne	r6, r6
 80027b2:	e7ef      	b.n	8002794 <_printf_i+0xbc>
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	6820      	ldr	r0, [r4, #0]
 80027b8:	1d19      	adds	r1, r3, #4
 80027ba:	6029      	str	r1, [r5, #0]
 80027bc:	0601      	lsls	r1, r0, #24
 80027be:	d501      	bpl.n	80027c4 <_printf_i+0xec>
 80027c0:	681e      	ldr	r6, [r3, #0]
 80027c2:	e002      	b.n	80027ca <_printf_i+0xf2>
 80027c4:	0646      	lsls	r6, r0, #25
 80027c6:	d5fb      	bpl.n	80027c0 <_printf_i+0xe8>
 80027c8:	881e      	ldrh	r6, [r3, #0]
 80027ca:	4854      	ldr	r0, [pc, #336]	; (800291c <_printf_i+0x244>)
 80027cc:	2f6f      	cmp	r7, #111	; 0x6f
 80027ce:	bf0c      	ite	eq
 80027d0:	2308      	moveq	r3, #8
 80027d2:	230a      	movne	r3, #10
 80027d4:	2100      	movs	r1, #0
 80027d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027da:	6865      	ldr	r5, [r4, #4]
 80027dc:	60a5      	str	r5, [r4, #8]
 80027de:	2d00      	cmp	r5, #0
 80027e0:	bfa2      	ittt	ge
 80027e2:	6821      	ldrge	r1, [r4, #0]
 80027e4:	f021 0104 	bicge.w	r1, r1, #4
 80027e8:	6021      	strge	r1, [r4, #0]
 80027ea:	b90e      	cbnz	r6, 80027f0 <_printf_i+0x118>
 80027ec:	2d00      	cmp	r5, #0
 80027ee:	d04d      	beq.n	800288c <_printf_i+0x1b4>
 80027f0:	4615      	mov	r5, r2
 80027f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80027f6:	fb03 6711 	mls	r7, r3, r1, r6
 80027fa:	5dc7      	ldrb	r7, [r0, r7]
 80027fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002800:	4637      	mov	r7, r6
 8002802:	42bb      	cmp	r3, r7
 8002804:	460e      	mov	r6, r1
 8002806:	d9f4      	bls.n	80027f2 <_printf_i+0x11a>
 8002808:	2b08      	cmp	r3, #8
 800280a:	d10b      	bne.n	8002824 <_printf_i+0x14c>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	07de      	lsls	r6, r3, #31
 8002810:	d508      	bpl.n	8002824 <_printf_i+0x14c>
 8002812:	6923      	ldr	r3, [r4, #16]
 8002814:	6861      	ldr	r1, [r4, #4]
 8002816:	4299      	cmp	r1, r3
 8002818:	bfde      	ittt	le
 800281a:	2330      	movle	r3, #48	; 0x30
 800281c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002824:	1b52      	subs	r2, r2, r5
 8002826:	6122      	str	r2, [r4, #16]
 8002828:	f8cd a000 	str.w	sl, [sp]
 800282c:	464b      	mov	r3, r9
 800282e:	aa03      	add	r2, sp, #12
 8002830:	4621      	mov	r1, r4
 8002832:	4640      	mov	r0, r8
 8002834:	f7ff fee2 	bl	80025fc <_printf_common>
 8002838:	3001      	adds	r0, #1
 800283a:	d14c      	bne.n	80028d6 <_printf_i+0x1fe>
 800283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002840:	b004      	add	sp, #16
 8002842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002846:	4835      	ldr	r0, [pc, #212]	; (800291c <_printf_i+0x244>)
 8002848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800284c:	6829      	ldr	r1, [r5, #0]
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	f851 6b04 	ldr.w	r6, [r1], #4
 8002854:	6029      	str	r1, [r5, #0]
 8002856:	061d      	lsls	r5, r3, #24
 8002858:	d514      	bpl.n	8002884 <_printf_i+0x1ac>
 800285a:	07df      	lsls	r7, r3, #31
 800285c:	bf44      	itt	mi
 800285e:	f043 0320 	orrmi.w	r3, r3, #32
 8002862:	6023      	strmi	r3, [r4, #0]
 8002864:	b91e      	cbnz	r6, 800286e <_printf_i+0x196>
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	f023 0320 	bic.w	r3, r3, #32
 800286c:	6023      	str	r3, [r4, #0]
 800286e:	2310      	movs	r3, #16
 8002870:	e7b0      	b.n	80027d4 <_printf_i+0xfc>
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	f043 0320 	orr.w	r3, r3, #32
 8002878:	6023      	str	r3, [r4, #0]
 800287a:	2378      	movs	r3, #120	; 0x78
 800287c:	4828      	ldr	r0, [pc, #160]	; (8002920 <_printf_i+0x248>)
 800287e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002882:	e7e3      	b.n	800284c <_printf_i+0x174>
 8002884:	0659      	lsls	r1, r3, #25
 8002886:	bf48      	it	mi
 8002888:	b2b6      	uxthmi	r6, r6
 800288a:	e7e6      	b.n	800285a <_printf_i+0x182>
 800288c:	4615      	mov	r5, r2
 800288e:	e7bb      	b.n	8002808 <_printf_i+0x130>
 8002890:	682b      	ldr	r3, [r5, #0]
 8002892:	6826      	ldr	r6, [r4, #0]
 8002894:	6961      	ldr	r1, [r4, #20]
 8002896:	1d18      	adds	r0, r3, #4
 8002898:	6028      	str	r0, [r5, #0]
 800289a:	0635      	lsls	r5, r6, #24
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	d501      	bpl.n	80028a4 <_printf_i+0x1cc>
 80028a0:	6019      	str	r1, [r3, #0]
 80028a2:	e002      	b.n	80028aa <_printf_i+0x1d2>
 80028a4:	0670      	lsls	r0, r6, #25
 80028a6:	d5fb      	bpl.n	80028a0 <_printf_i+0x1c8>
 80028a8:	8019      	strh	r1, [r3, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	6123      	str	r3, [r4, #16]
 80028ae:	4615      	mov	r5, r2
 80028b0:	e7ba      	b.n	8002828 <_printf_i+0x150>
 80028b2:	682b      	ldr	r3, [r5, #0]
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	602a      	str	r2, [r5, #0]
 80028b8:	681d      	ldr	r5, [r3, #0]
 80028ba:	6862      	ldr	r2, [r4, #4]
 80028bc:	2100      	movs	r1, #0
 80028be:	4628      	mov	r0, r5
 80028c0:	f7fd fc96 	bl	80001f0 <memchr>
 80028c4:	b108      	cbz	r0, 80028ca <_printf_i+0x1f2>
 80028c6:	1b40      	subs	r0, r0, r5
 80028c8:	6060      	str	r0, [r4, #4]
 80028ca:	6863      	ldr	r3, [r4, #4]
 80028cc:	6123      	str	r3, [r4, #16]
 80028ce:	2300      	movs	r3, #0
 80028d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028d4:	e7a8      	b.n	8002828 <_printf_i+0x150>
 80028d6:	6923      	ldr	r3, [r4, #16]
 80028d8:	462a      	mov	r2, r5
 80028da:	4649      	mov	r1, r9
 80028dc:	4640      	mov	r0, r8
 80028de:	47d0      	blx	sl
 80028e0:	3001      	adds	r0, #1
 80028e2:	d0ab      	beq.n	800283c <_printf_i+0x164>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	079b      	lsls	r3, r3, #30
 80028e8:	d413      	bmi.n	8002912 <_printf_i+0x23a>
 80028ea:	68e0      	ldr	r0, [r4, #12]
 80028ec:	9b03      	ldr	r3, [sp, #12]
 80028ee:	4298      	cmp	r0, r3
 80028f0:	bfb8      	it	lt
 80028f2:	4618      	movlt	r0, r3
 80028f4:	e7a4      	b.n	8002840 <_printf_i+0x168>
 80028f6:	2301      	movs	r3, #1
 80028f8:	4632      	mov	r2, r6
 80028fa:	4649      	mov	r1, r9
 80028fc:	4640      	mov	r0, r8
 80028fe:	47d0      	blx	sl
 8002900:	3001      	adds	r0, #1
 8002902:	d09b      	beq.n	800283c <_printf_i+0x164>
 8002904:	3501      	adds	r5, #1
 8002906:	68e3      	ldr	r3, [r4, #12]
 8002908:	9903      	ldr	r1, [sp, #12]
 800290a:	1a5b      	subs	r3, r3, r1
 800290c:	42ab      	cmp	r3, r5
 800290e:	dcf2      	bgt.n	80028f6 <_printf_i+0x21e>
 8002910:	e7eb      	b.n	80028ea <_printf_i+0x212>
 8002912:	2500      	movs	r5, #0
 8002914:	f104 0619 	add.w	r6, r4, #25
 8002918:	e7f5      	b.n	8002906 <_printf_i+0x22e>
 800291a:	bf00      	nop
 800291c:	08004ac6 	.word	0x08004ac6
 8002920:	08004ad7 	.word	0x08004ad7

08002924 <__sread>:
 8002924:	b510      	push	{r4, lr}
 8002926:	460c      	mov	r4, r1
 8002928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800292c:	f001 fb80 	bl	8004030 <_read_r>
 8002930:	2800      	cmp	r0, #0
 8002932:	bfab      	itete	ge
 8002934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002936:	89a3      	ldrhlt	r3, [r4, #12]
 8002938:	181b      	addge	r3, r3, r0
 800293a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800293e:	bfac      	ite	ge
 8002940:	6563      	strge	r3, [r4, #84]	; 0x54
 8002942:	81a3      	strhlt	r3, [r4, #12]
 8002944:	bd10      	pop	{r4, pc}

08002946 <__swrite>:
 8002946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800294a:	461f      	mov	r7, r3
 800294c:	898b      	ldrh	r3, [r1, #12]
 800294e:	05db      	lsls	r3, r3, #23
 8002950:	4605      	mov	r5, r0
 8002952:	460c      	mov	r4, r1
 8002954:	4616      	mov	r6, r2
 8002956:	d505      	bpl.n	8002964 <__swrite+0x1e>
 8002958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295c:	2302      	movs	r3, #2
 800295e:	2200      	movs	r2, #0
 8002960:	f000 fec4 	bl	80036ec <_lseek_r>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800296a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800296e:	81a3      	strh	r3, [r4, #12]
 8002970:	4632      	mov	r2, r6
 8002972:	463b      	mov	r3, r7
 8002974:	4628      	mov	r0, r5
 8002976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800297a:	f000 b817 	b.w	80029ac <_write_r>

0800297e <__sseek>:
 800297e:	b510      	push	{r4, lr}
 8002980:	460c      	mov	r4, r1
 8002982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002986:	f000 feb1 	bl	80036ec <_lseek_r>
 800298a:	1c43      	adds	r3, r0, #1
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	bf15      	itete	ne
 8002990:	6560      	strne	r0, [r4, #84]	; 0x54
 8002992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800299a:	81a3      	strheq	r3, [r4, #12]
 800299c:	bf18      	it	ne
 800299e:	81a3      	strhne	r3, [r4, #12]
 80029a0:	bd10      	pop	{r4, pc}

080029a2 <__sclose>:
 80029a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a6:	f000 b813 	b.w	80029d0 <_close_r>
	...

080029ac <_write_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4d07      	ldr	r5, [pc, #28]	; (80029cc <_write_r+0x20>)
 80029b0:	4604      	mov	r4, r0
 80029b2:	4608      	mov	r0, r1
 80029b4:	4611      	mov	r1, r2
 80029b6:	2200      	movs	r2, #0
 80029b8:	602a      	str	r2, [r5, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f7fe fa1d 	bl	8000dfa <_write>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d102      	bne.n	80029ca <_write_r+0x1e>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	b103      	cbz	r3, 80029ca <_write_r+0x1e>
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	bd38      	pop	{r3, r4, r5, pc}
 80029cc:	2000023c 	.word	0x2000023c

080029d0 <_close_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	4d06      	ldr	r5, [pc, #24]	; (80029ec <_close_r+0x1c>)
 80029d4:	2300      	movs	r3, #0
 80029d6:	4604      	mov	r4, r0
 80029d8:	4608      	mov	r0, r1
 80029da:	602b      	str	r3, [r5, #0]
 80029dc:	f7fe fa29 	bl	8000e32 <_close>
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d102      	bne.n	80029ea <_close_r+0x1a>
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	b103      	cbz	r3, 80029ea <_close_r+0x1a>
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
 80029ec:	2000023c 	.word	0x2000023c

080029f0 <quorem>:
 80029f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f4:	6903      	ldr	r3, [r0, #16]
 80029f6:	690c      	ldr	r4, [r1, #16]
 80029f8:	42a3      	cmp	r3, r4
 80029fa:	4607      	mov	r7, r0
 80029fc:	f2c0 8081 	blt.w	8002b02 <quorem+0x112>
 8002a00:	3c01      	subs	r4, #1
 8002a02:	f101 0814 	add.w	r8, r1, #20
 8002a06:	f100 0514 	add.w	r5, r0, #20
 8002a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002a20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a24:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a28:	d331      	bcc.n	8002a8e <quorem+0x9e>
 8002a2a:	f04f 0e00 	mov.w	lr, #0
 8002a2e:	4640      	mov	r0, r8
 8002a30:	46ac      	mov	ip, r5
 8002a32:	46f2      	mov	sl, lr
 8002a34:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a38:	b293      	uxth	r3, r2
 8002a3a:	fb06 e303 	mla	r3, r6, r3, lr
 8002a3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	ebaa 0303 	sub.w	r3, sl, r3
 8002a48:	f8dc a000 	ldr.w	sl, [ip]
 8002a4c:	0c12      	lsrs	r2, r2, #16
 8002a4e:	fa13 f38a 	uxtah	r3, r3, sl
 8002a52:	fb06 e202 	mla	r2, r6, r2, lr
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	9b00      	ldr	r3, [sp, #0]
 8002a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a68:	f8bd 3000 	ldrh.w	r3, [sp]
 8002a6c:	4581      	cmp	r9, r0
 8002a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a72:	f84c 3b04 	str.w	r3, [ip], #4
 8002a76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002a7a:	d2db      	bcs.n	8002a34 <quorem+0x44>
 8002a7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8002a80:	b92b      	cbnz	r3, 8002a8e <quorem+0x9e>
 8002a82:	9b01      	ldr	r3, [sp, #4]
 8002a84:	3b04      	subs	r3, #4
 8002a86:	429d      	cmp	r5, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	d32e      	bcc.n	8002aea <quorem+0xfa>
 8002a8c:	613c      	str	r4, [r7, #16]
 8002a8e:	4638      	mov	r0, r7
 8002a90:	f001 f8d6 	bl	8003c40 <__mcmp>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	db24      	blt.n	8002ae2 <quorem+0xf2>
 8002a98:	3601      	adds	r6, #1
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f04f 0c00 	mov.w	ip, #0
 8002aa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8002aa4:	f8d0 e000 	ldr.w	lr, [r0]
 8002aa8:	b293      	uxth	r3, r2
 8002aaa:	ebac 0303 	sub.w	r3, ip, r3
 8002aae:	0c12      	lsrs	r2, r2, #16
 8002ab0:	fa13 f38e 	uxtah	r3, r3, lr
 8002ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ac2:	45c1      	cmp	r9, r8
 8002ac4:	f840 3b04 	str.w	r3, [r0], #4
 8002ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002acc:	d2e8      	bcs.n	8002aa0 <quorem+0xb0>
 8002ace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002ad6:	b922      	cbnz	r2, 8002ae2 <quorem+0xf2>
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	429d      	cmp	r5, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	d30a      	bcc.n	8002af6 <quorem+0x106>
 8002ae0:	613c      	str	r4, [r7, #16]
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	b003      	add	sp, #12
 8002ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	3b04      	subs	r3, #4
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d1cc      	bne.n	8002a8c <quorem+0x9c>
 8002af2:	3c01      	subs	r4, #1
 8002af4:	e7c7      	b.n	8002a86 <quorem+0x96>
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d1f0      	bne.n	8002ae0 <quorem+0xf0>
 8002afe:	3c01      	subs	r4, #1
 8002b00:	e7eb      	b.n	8002ada <quorem+0xea>
 8002b02:	2000      	movs	r0, #0
 8002b04:	e7ee      	b.n	8002ae4 <quorem+0xf4>
	...

08002b08 <_dtoa_r>:
 8002b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b0c:	ed2d 8b04 	vpush	{d8-d9}
 8002b10:	ec57 6b10 	vmov	r6, r7, d0
 8002b14:	b093      	sub	sp, #76	; 0x4c
 8002b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002b18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002b1c:	9106      	str	r1, [sp, #24]
 8002b1e:	ee10 aa10 	vmov	sl, s0
 8002b22:	4604      	mov	r4, r0
 8002b24:	9209      	str	r2, [sp, #36]	; 0x24
 8002b26:	930c      	str	r3, [sp, #48]	; 0x30
 8002b28:	46bb      	mov	fp, r7
 8002b2a:	b975      	cbnz	r5, 8002b4a <_dtoa_r+0x42>
 8002b2c:	2010      	movs	r0, #16
 8002b2e:	f000 fdef 	bl	8003710 <malloc>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6260      	str	r0, [r4, #36]	; 0x24
 8002b36:	b920      	cbnz	r0, 8002b42 <_dtoa_r+0x3a>
 8002b38:	4ba7      	ldr	r3, [pc, #668]	; (8002dd8 <_dtoa_r+0x2d0>)
 8002b3a:	21ea      	movs	r1, #234	; 0xea
 8002b3c:	48a7      	ldr	r0, [pc, #668]	; (8002ddc <_dtoa_r+0x2d4>)
 8002b3e:	f001 fa99 	bl	8004074 <__assert_func>
 8002b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b46:	6005      	str	r5, [r0, #0]
 8002b48:	60c5      	str	r5, [r0, #12]
 8002b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b4c:	6819      	ldr	r1, [r3, #0]
 8002b4e:	b151      	cbz	r1, 8002b66 <_dtoa_r+0x5e>
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	604a      	str	r2, [r1, #4]
 8002b54:	2301      	movs	r3, #1
 8002b56:	4093      	lsls	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f000 fe2e 	bl	80037bc <_Bfree>
 8002b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	1e3b      	subs	r3, r7, #0
 8002b68:	bfaa      	itet	ge
 8002b6a:	2300      	movge	r3, #0
 8002b6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002b70:	f8c8 3000 	strge.w	r3, [r8]
 8002b74:	4b9a      	ldr	r3, [pc, #616]	; (8002de0 <_dtoa_r+0x2d8>)
 8002b76:	bfbc      	itt	lt
 8002b78:	2201      	movlt	r2, #1
 8002b7a:	f8c8 2000 	strlt.w	r2, [r8]
 8002b7e:	ea33 030b 	bics.w	r3, r3, fp
 8002b82:	d11b      	bne.n	8002bbc <_dtoa_r+0xb4>
 8002b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002b90:	4333      	orrs	r3, r6
 8002b92:	f000 8592 	beq.w	80036ba <_dtoa_r+0xbb2>
 8002b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002b98:	b963      	cbnz	r3, 8002bb4 <_dtoa_r+0xac>
 8002b9a:	4b92      	ldr	r3, [pc, #584]	; (8002de4 <_dtoa_r+0x2dc>)
 8002b9c:	e022      	b.n	8002be4 <_dtoa_r+0xdc>
 8002b9e:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <_dtoa_r+0x2e0>)
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	9801      	ldr	r0, [sp, #4]
 8002baa:	b013      	add	sp, #76	; 0x4c
 8002bac:	ecbd 8b04 	vpop	{d8-d9}
 8002bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb4:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <_dtoa_r+0x2dc>)
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	3303      	adds	r3, #3
 8002bba:	e7f3      	b.n	8002ba4 <_dtoa_r+0x9c>
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	4650      	mov	r0, sl
 8002bc2:	4659      	mov	r1, fp
 8002bc4:	f7fd ff88 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bc8:	ec4b ab19 	vmov	d9, sl, fp
 8002bcc:	4680      	mov	r8, r0
 8002bce:	b158      	cbz	r0, 8002be8 <_dtoa_r+0xe0>
 8002bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 856b 	beq.w	80036b4 <_dtoa_r+0xbac>
 8002bde:	4883      	ldr	r0, [pc, #524]	; (8002dec <_dtoa_r+0x2e4>)
 8002be0:	6018      	str	r0, [r3, #0]
 8002be2:	1e43      	subs	r3, r0, #1
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	e7df      	b.n	8002ba8 <_dtoa_r+0xa0>
 8002be8:	ec4b ab10 	vmov	d0, sl, fp
 8002bec:	aa10      	add	r2, sp, #64	; 0x40
 8002bee:	a911      	add	r1, sp, #68	; 0x44
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f001 f8cb 	bl	8003d8c <__d2b>
 8002bf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8002bfa:	ee08 0a10 	vmov	s16, r0
 8002bfe:	2d00      	cmp	r5, #0
 8002c00:	f000 8084 	beq.w	8002d0c <_dtoa_r+0x204>
 8002c04:	ee19 3a90 	vmov	r3, s19
 8002c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002c10:	4656      	mov	r6, sl
 8002c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8002c1e:	4b74      	ldr	r3, [pc, #464]	; (8002df0 <_dtoa_r+0x2e8>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	4630      	mov	r0, r6
 8002c24:	4639      	mov	r1, r7
 8002c26:	f7fd fb37 	bl	8000298 <__aeabi_dsub>
 8002c2a:	a365      	add	r3, pc, #404	; (adr r3, 8002dc0 <_dtoa_r+0x2b8>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fcea 	bl	8000608 <__aeabi_dmul>
 8002c34:	a364      	add	r3, pc, #400	; (adr r3, 8002dc8 <_dtoa_r+0x2c0>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fb2f 	bl	800029c <__adddf3>
 8002c3e:	4606      	mov	r6, r0
 8002c40:	4628      	mov	r0, r5
 8002c42:	460f      	mov	r7, r1
 8002c44:	f7fd fc76 	bl	8000534 <__aeabi_i2d>
 8002c48:	a361      	add	r3, pc, #388	; (adr r3, 8002dd0 <_dtoa_r+0x2c8>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fcdb 	bl	8000608 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4630      	mov	r0, r6
 8002c58:	4639      	mov	r1, r7
 8002c5a:	f7fd fb1f 	bl	800029c <__adddf3>
 8002c5e:	4606      	mov	r6, r0
 8002c60:	460f      	mov	r7, r1
 8002c62:	f7fd ff81 	bl	8000b68 <__aeabi_d2iz>
 8002c66:	2200      	movs	r2, #0
 8002c68:	9000      	str	r0, [sp, #0]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	4639      	mov	r1, r7
 8002c70:	f7fd ff3c 	bl	8000aec <__aeabi_dcmplt>
 8002c74:	b150      	cbz	r0, 8002c8c <_dtoa_r+0x184>
 8002c76:	9800      	ldr	r0, [sp, #0]
 8002c78:	f7fd fc5c 	bl	8000534 <__aeabi_i2d>
 8002c7c:	4632      	mov	r2, r6
 8002c7e:	463b      	mov	r3, r7
 8002c80:	f7fd ff2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c84:	b910      	cbnz	r0, 8002c8c <_dtoa_r+0x184>
 8002c86:	9b00      	ldr	r3, [sp, #0]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	9b00      	ldr	r3, [sp, #0]
 8002c8e:	2b16      	cmp	r3, #22
 8002c90:	d85a      	bhi.n	8002d48 <_dtoa_r+0x240>
 8002c92:	9a00      	ldr	r2, [sp, #0]
 8002c94:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <_dtoa_r+0x2ec>)
 8002c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	ec51 0b19 	vmov	r0, r1, d9
 8002ca2:	f7fd ff23 	bl	8000aec <__aeabi_dcmplt>
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	d050      	beq.n	8002d4c <_dtoa_r+0x244>
 8002caa:	9b00      	ldr	r3, [sp, #0]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002cb6:	1b5d      	subs	r5, r3, r5
 8002cb8:	1e6b      	subs	r3, r5, #1
 8002cba:	9305      	str	r3, [sp, #20]
 8002cbc:	bf45      	ittet	mi
 8002cbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8002cc2:	9304      	strmi	r3, [sp, #16]
 8002cc4:	2300      	movpl	r3, #0
 8002cc6:	2300      	movmi	r3, #0
 8002cc8:	bf4c      	ite	mi
 8002cca:	9305      	strmi	r3, [sp, #20]
 8002ccc:	9304      	strpl	r3, [sp, #16]
 8002cce:	9b00      	ldr	r3, [sp, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db3d      	blt.n	8002d50 <_dtoa_r+0x248>
 8002cd4:	9b05      	ldr	r3, [sp, #20]
 8002cd6:	9a00      	ldr	r2, [sp, #0]
 8002cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8002cda:	4413      	add	r3, r2
 8002cdc:	9305      	str	r3, [sp, #20]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9307      	str	r3, [sp, #28]
 8002ce2:	9b06      	ldr	r3, [sp, #24]
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	f200 8089 	bhi.w	8002dfc <_dtoa_r+0x2f4>
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	bfc4      	itt	gt
 8002cee:	3b04      	subgt	r3, #4
 8002cf0:	9306      	strgt	r3, [sp, #24]
 8002cf2:	9b06      	ldr	r3, [sp, #24]
 8002cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8002cf8:	bfcc      	ite	gt
 8002cfa:	2500      	movgt	r5, #0
 8002cfc:	2501      	movle	r5, #1
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	f200 8087 	bhi.w	8002e12 <_dtoa_r+0x30a>
 8002d04:	e8df f003 	tbb	[pc, r3]
 8002d08:	59383a2d 	.word	0x59383a2d
 8002d0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002d10:	441d      	add	r5, r3
 8002d12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	bfc1      	itttt	gt
 8002d1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002d22:	fa0b f303 	lslgt.w	r3, fp, r3
 8002d26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002d2a:	bfda      	itte	le
 8002d2c:	f1c3 0320 	rsble	r3, r3, #32
 8002d30:	fa06 f003 	lslle.w	r0, r6, r3
 8002d34:	4318      	orrgt	r0, r3
 8002d36:	f7fd fbed 	bl	8000514 <__aeabi_ui2d>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	4606      	mov	r6, r0
 8002d3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002d42:	3d01      	subs	r5, #1
 8002d44:	930e      	str	r3, [sp, #56]	; 0x38
 8002d46:	e76a      	b.n	8002c1e <_dtoa_r+0x116>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e7b2      	b.n	8002cb2 <_dtoa_r+0x1aa>
 8002d4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8002d4e:	e7b1      	b.n	8002cb4 <_dtoa_r+0x1ac>
 8002d50:	9b04      	ldr	r3, [sp, #16]
 8002d52:	9a00      	ldr	r2, [sp, #0]
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	4253      	negs	r3, r2
 8002d5a:	9307      	str	r3, [sp, #28]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8002d60:	e7bf      	b.n	8002ce2 <_dtoa_r+0x1da>
 8002d62:	2300      	movs	r3, #0
 8002d64:	9308      	str	r3, [sp, #32]
 8002d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	dc55      	bgt.n	8002e18 <_dtoa_r+0x310>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002d72:	461a      	mov	r2, r3
 8002d74:	9209      	str	r2, [sp, #36]	; 0x24
 8002d76:	e00c      	b.n	8002d92 <_dtoa_r+0x28a>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e7f3      	b.n	8002d64 <_dtoa_r+0x25c>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d80:	9308      	str	r3, [sp, #32]
 8002d82:	9b00      	ldr	r3, [sp, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	9302      	str	r3, [sp, #8]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	9303      	str	r3, [sp, #12]
 8002d8e:	bfb8      	it	lt
 8002d90:	2301      	movlt	r3, #1
 8002d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d94:	2200      	movs	r2, #0
 8002d96:	6042      	str	r2, [r0, #4]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	f102 0614 	add.w	r6, r2, #20
 8002d9e:	429e      	cmp	r6, r3
 8002da0:	6841      	ldr	r1, [r0, #4]
 8002da2:	d93d      	bls.n	8002e20 <_dtoa_r+0x318>
 8002da4:	4620      	mov	r0, r4
 8002da6:	f000 fcc9 	bl	800373c <_Balloc>
 8002daa:	9001      	str	r0, [sp, #4]
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d13b      	bne.n	8002e28 <_dtoa_r+0x320>
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_dtoa_r+0x2f0>)
 8002db2:	4602      	mov	r2, r0
 8002db4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002db8:	e6c0      	b.n	8002b3c <_dtoa_r+0x34>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e7df      	b.n	8002d7e <_dtoa_r+0x276>
 8002dbe:	bf00      	nop
 8002dc0:	636f4361 	.word	0x636f4361
 8002dc4:	3fd287a7 	.word	0x3fd287a7
 8002dc8:	8b60c8b3 	.word	0x8b60c8b3
 8002dcc:	3fc68a28 	.word	0x3fc68a28
 8002dd0:	509f79fb 	.word	0x509f79fb
 8002dd4:	3fd34413 	.word	0x3fd34413
 8002dd8:	08004af5 	.word	0x08004af5
 8002ddc:	08004b0c 	.word	0x08004b0c
 8002de0:	7ff00000 	.word	0x7ff00000
 8002de4:	08004af1 	.word	0x08004af1
 8002de8:	08004ae8 	.word	0x08004ae8
 8002dec:	08004ac5 	.word	0x08004ac5
 8002df0:	3ff80000 	.word	0x3ff80000
 8002df4:	08004c00 	.word	0x08004c00
 8002df8:	08004b67 	.word	0x08004b67
 8002dfc:	2501      	movs	r5, #1
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9306      	str	r3, [sp, #24]
 8002e02:	9508      	str	r5, [sp, #32]
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2312      	movs	r3, #18
 8002e10:	e7b0      	b.n	8002d74 <_dtoa_r+0x26c>
 8002e12:	2301      	movs	r3, #1
 8002e14:	9308      	str	r3, [sp, #32]
 8002e16:	e7f5      	b.n	8002e04 <_dtoa_r+0x2fc>
 8002e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e1e:	e7b8      	b.n	8002d92 <_dtoa_r+0x28a>
 8002e20:	3101      	adds	r1, #1
 8002e22:	6041      	str	r1, [r0, #4]
 8002e24:	0052      	lsls	r2, r2, #1
 8002e26:	e7b8      	b.n	8002d9a <_dtoa_r+0x292>
 8002e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e2a:	9a01      	ldr	r2, [sp, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	2b0e      	cmp	r3, #14
 8002e32:	f200 809d 	bhi.w	8002f70 <_dtoa_r+0x468>
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	f000 809a 	beq.w	8002f70 <_dtoa_r+0x468>
 8002e3c:	9b00      	ldr	r3, [sp, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	dd32      	ble.n	8002ea8 <_dtoa_r+0x3a0>
 8002e42:	4ab7      	ldr	r2, [pc, #732]	; (8003120 <_dtoa_r+0x618>)
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e50:	9b00      	ldr	r3, [sp, #0]
 8002e52:	05d8      	lsls	r0, r3, #23
 8002e54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8002e58:	d516      	bpl.n	8002e88 <_dtoa_r+0x380>
 8002e5a:	4bb2      	ldr	r3, [pc, #712]	; (8003124 <_dtoa_r+0x61c>)
 8002e5c:	ec51 0b19 	vmov	r0, r1, d9
 8002e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e64:	f7fd fcfa 	bl	800085c <__aeabi_ddiv>
 8002e68:	f007 070f 	and.w	r7, r7, #15
 8002e6c:	4682      	mov	sl, r0
 8002e6e:	468b      	mov	fp, r1
 8002e70:	2503      	movs	r5, #3
 8002e72:	4eac      	ldr	r6, [pc, #688]	; (8003124 <_dtoa_r+0x61c>)
 8002e74:	b957      	cbnz	r7, 8002e8c <_dtoa_r+0x384>
 8002e76:	4642      	mov	r2, r8
 8002e78:	464b      	mov	r3, r9
 8002e7a:	4650      	mov	r0, sl
 8002e7c:	4659      	mov	r1, fp
 8002e7e:	f7fd fced 	bl	800085c <__aeabi_ddiv>
 8002e82:	4682      	mov	sl, r0
 8002e84:	468b      	mov	fp, r1
 8002e86:	e028      	b.n	8002eda <_dtoa_r+0x3d2>
 8002e88:	2502      	movs	r5, #2
 8002e8a:	e7f2      	b.n	8002e72 <_dtoa_r+0x36a>
 8002e8c:	07f9      	lsls	r1, r7, #31
 8002e8e:	d508      	bpl.n	8002ea2 <_dtoa_r+0x39a>
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002e98:	f7fd fbb6 	bl	8000608 <__aeabi_dmul>
 8002e9c:	3501      	adds	r5, #1
 8002e9e:	4680      	mov	r8, r0
 8002ea0:	4689      	mov	r9, r1
 8002ea2:	107f      	asrs	r7, r7, #1
 8002ea4:	3608      	adds	r6, #8
 8002ea6:	e7e5      	b.n	8002e74 <_dtoa_r+0x36c>
 8002ea8:	f000 809b 	beq.w	8002fe2 <_dtoa_r+0x4da>
 8002eac:	9b00      	ldr	r3, [sp, #0]
 8002eae:	4f9d      	ldr	r7, [pc, #628]	; (8003124 <_dtoa_r+0x61c>)
 8002eb0:	425e      	negs	r6, r3
 8002eb2:	4b9b      	ldr	r3, [pc, #620]	; (8003120 <_dtoa_r+0x618>)
 8002eb4:	f006 020f 	and.w	r2, r6, #15
 8002eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	ec51 0b19 	vmov	r0, r1, d9
 8002ec4:	f7fd fba0 	bl	8000608 <__aeabi_dmul>
 8002ec8:	1136      	asrs	r6, r6, #4
 8002eca:	4682      	mov	sl, r0
 8002ecc:	468b      	mov	fp, r1
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2502      	movs	r5, #2
 8002ed2:	2e00      	cmp	r6, #0
 8002ed4:	d17a      	bne.n	8002fcc <_dtoa_r+0x4c4>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1d3      	bne.n	8002e82 <_dtoa_r+0x37a>
 8002eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8082 	beq.w	8002fe6 <_dtoa_r+0x4de>
 8002ee2:	4b91      	ldr	r3, [pc, #580]	; (8003128 <_dtoa_r+0x620>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4650      	mov	r0, sl
 8002ee8:	4659      	mov	r1, fp
 8002eea:	f7fd fdff 	bl	8000aec <__aeabi_dcmplt>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d079      	beq.n	8002fe6 <_dtoa_r+0x4de>
 8002ef2:	9b03      	ldr	r3, [sp, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d076      	beq.n	8002fe6 <_dtoa_r+0x4de>
 8002ef8:	9b02      	ldr	r3, [sp, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	dd36      	ble.n	8002f6c <_dtoa_r+0x464>
 8002efe:	9b00      	ldr	r3, [sp, #0]
 8002f00:	4650      	mov	r0, sl
 8002f02:	4659      	mov	r1, fp
 8002f04:	1e5f      	subs	r7, r3, #1
 8002f06:	2200      	movs	r2, #0
 8002f08:	4b88      	ldr	r3, [pc, #544]	; (800312c <_dtoa_r+0x624>)
 8002f0a:	f7fd fb7d 	bl	8000608 <__aeabi_dmul>
 8002f0e:	9e02      	ldr	r6, [sp, #8]
 8002f10:	4682      	mov	sl, r0
 8002f12:	468b      	mov	fp, r1
 8002f14:	3501      	adds	r5, #1
 8002f16:	4628      	mov	r0, r5
 8002f18:	f7fd fb0c 	bl	8000534 <__aeabi_i2d>
 8002f1c:	4652      	mov	r2, sl
 8002f1e:	465b      	mov	r3, fp
 8002f20:	f7fd fb72 	bl	8000608 <__aeabi_dmul>
 8002f24:	4b82      	ldr	r3, [pc, #520]	; (8003130 <_dtoa_r+0x628>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	f7fd f9b8 	bl	800029c <__adddf3>
 8002f2c:	46d0      	mov	r8, sl
 8002f2e:	46d9      	mov	r9, fp
 8002f30:	4682      	mov	sl, r0
 8002f32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8002f36:	2e00      	cmp	r6, #0
 8002f38:	d158      	bne.n	8002fec <_dtoa_r+0x4e4>
 8002f3a:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <_dtoa_r+0x62c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4640      	mov	r0, r8
 8002f40:	4649      	mov	r1, r9
 8002f42:	f7fd f9a9 	bl	8000298 <__aeabi_dsub>
 8002f46:	4652      	mov	r2, sl
 8002f48:	465b      	mov	r3, fp
 8002f4a:	4680      	mov	r8, r0
 8002f4c:	4689      	mov	r9, r1
 8002f4e:	f7fd fdeb 	bl	8000b28 <__aeabi_dcmpgt>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	f040 8295 	bne.w	8003482 <_dtoa_r+0x97a>
 8002f58:	4652      	mov	r2, sl
 8002f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002f5e:	4640      	mov	r0, r8
 8002f60:	4649      	mov	r1, r9
 8002f62:	f7fd fdc3 	bl	8000aec <__aeabi_dcmplt>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	f040 8289 	bne.w	800347e <_dtoa_r+0x976>
 8002f6c:	ec5b ab19 	vmov	sl, fp, d9
 8002f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f2c0 8148 	blt.w	8003208 <_dtoa_r+0x700>
 8002f78:	9a00      	ldr	r2, [sp, #0]
 8002f7a:	2a0e      	cmp	r2, #14
 8002f7c:	f300 8144 	bgt.w	8003208 <_dtoa_r+0x700>
 8002f80:	4b67      	ldr	r3, [pc, #412]	; (8003120 <_dtoa_r+0x618>)
 8002f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f280 80d5 	bge.w	800313c <_dtoa_r+0x634>
 8002f92:	9b03      	ldr	r3, [sp, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f300 80d1 	bgt.w	800313c <_dtoa_r+0x634>
 8002f9a:	f040 826f 	bne.w	800347c <_dtoa_r+0x974>
 8002f9e:	4b65      	ldr	r3, [pc, #404]	; (8003134 <_dtoa_r+0x62c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f7fd fb2f 	bl	8000608 <__aeabi_dmul>
 8002faa:	4652      	mov	r2, sl
 8002fac:	465b      	mov	r3, fp
 8002fae:	f7fd fdb1 	bl	8000b14 <__aeabi_dcmpge>
 8002fb2:	9e03      	ldr	r6, [sp, #12]
 8002fb4:	4637      	mov	r7, r6
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	f040 8245 	bne.w	8003446 <_dtoa_r+0x93e>
 8002fbc:	9d01      	ldr	r5, [sp, #4]
 8002fbe:	2331      	movs	r3, #49	; 0x31
 8002fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8002fc4:	9b00      	ldr	r3, [sp, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	e240      	b.n	800344e <_dtoa_r+0x946>
 8002fcc:	07f2      	lsls	r2, r6, #31
 8002fce:	d505      	bpl.n	8002fdc <_dtoa_r+0x4d4>
 8002fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd4:	f7fd fb18 	bl	8000608 <__aeabi_dmul>
 8002fd8:	3501      	adds	r5, #1
 8002fda:	2301      	movs	r3, #1
 8002fdc:	1076      	asrs	r6, r6, #1
 8002fde:	3708      	adds	r7, #8
 8002fe0:	e777      	b.n	8002ed2 <_dtoa_r+0x3ca>
 8002fe2:	2502      	movs	r5, #2
 8002fe4:	e779      	b.n	8002eda <_dtoa_r+0x3d2>
 8002fe6:	9f00      	ldr	r7, [sp, #0]
 8002fe8:	9e03      	ldr	r6, [sp, #12]
 8002fea:	e794      	b.n	8002f16 <_dtoa_r+0x40e>
 8002fec:	9901      	ldr	r1, [sp, #4]
 8002fee:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <_dtoa_r+0x618>)
 8002ff0:	4431      	add	r1, r6
 8002ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8002ff4:	9908      	ldr	r1, [sp, #32]
 8002ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d043      	beq.n	800308a <_dtoa_r+0x582>
 8003002:	494d      	ldr	r1, [pc, #308]	; (8003138 <_dtoa_r+0x630>)
 8003004:	2000      	movs	r0, #0
 8003006:	f7fd fc29 	bl	800085c <__aeabi_ddiv>
 800300a:	4652      	mov	r2, sl
 800300c:	465b      	mov	r3, fp
 800300e:	f7fd f943 	bl	8000298 <__aeabi_dsub>
 8003012:	9d01      	ldr	r5, [sp, #4]
 8003014:	4682      	mov	sl, r0
 8003016:	468b      	mov	fp, r1
 8003018:	4649      	mov	r1, r9
 800301a:	4640      	mov	r0, r8
 800301c:	f7fd fda4 	bl	8000b68 <__aeabi_d2iz>
 8003020:	4606      	mov	r6, r0
 8003022:	f7fd fa87 	bl	8000534 <__aeabi_i2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4640      	mov	r0, r8
 800302c:	4649      	mov	r1, r9
 800302e:	f7fd f933 	bl	8000298 <__aeabi_dsub>
 8003032:	3630      	adds	r6, #48	; 0x30
 8003034:	f805 6b01 	strb.w	r6, [r5], #1
 8003038:	4652      	mov	r2, sl
 800303a:	465b      	mov	r3, fp
 800303c:	4680      	mov	r8, r0
 800303e:	4689      	mov	r9, r1
 8003040:	f7fd fd54 	bl	8000aec <__aeabi_dcmplt>
 8003044:	2800      	cmp	r0, #0
 8003046:	d163      	bne.n	8003110 <_dtoa_r+0x608>
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	4936      	ldr	r1, [pc, #216]	; (8003128 <_dtoa_r+0x620>)
 800304e:	2000      	movs	r0, #0
 8003050:	f7fd f922 	bl	8000298 <__aeabi_dsub>
 8003054:	4652      	mov	r2, sl
 8003056:	465b      	mov	r3, fp
 8003058:	f7fd fd48 	bl	8000aec <__aeabi_dcmplt>
 800305c:	2800      	cmp	r0, #0
 800305e:	f040 80b5 	bne.w	80031cc <_dtoa_r+0x6c4>
 8003062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003064:	429d      	cmp	r5, r3
 8003066:	d081      	beq.n	8002f6c <_dtoa_r+0x464>
 8003068:	4b30      	ldr	r3, [pc, #192]	; (800312c <_dtoa_r+0x624>)
 800306a:	2200      	movs	r2, #0
 800306c:	4650      	mov	r0, sl
 800306e:	4659      	mov	r1, fp
 8003070:	f7fd faca 	bl	8000608 <__aeabi_dmul>
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <_dtoa_r+0x624>)
 8003076:	4682      	mov	sl, r0
 8003078:	468b      	mov	fp, r1
 800307a:	4640      	mov	r0, r8
 800307c:	4649      	mov	r1, r9
 800307e:	2200      	movs	r2, #0
 8003080:	f7fd fac2 	bl	8000608 <__aeabi_dmul>
 8003084:	4680      	mov	r8, r0
 8003086:	4689      	mov	r9, r1
 8003088:	e7c6      	b.n	8003018 <_dtoa_r+0x510>
 800308a:	4650      	mov	r0, sl
 800308c:	4659      	mov	r1, fp
 800308e:	f7fd fabb 	bl	8000608 <__aeabi_dmul>
 8003092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003094:	9d01      	ldr	r5, [sp, #4]
 8003096:	930f      	str	r3, [sp, #60]	; 0x3c
 8003098:	4682      	mov	sl, r0
 800309a:	468b      	mov	fp, r1
 800309c:	4649      	mov	r1, r9
 800309e:	4640      	mov	r0, r8
 80030a0:	f7fd fd62 	bl	8000b68 <__aeabi_d2iz>
 80030a4:	4606      	mov	r6, r0
 80030a6:	f7fd fa45 	bl	8000534 <__aeabi_i2d>
 80030aa:	3630      	adds	r6, #48	; 0x30
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	f7fd f8f0 	bl	8000298 <__aeabi_dsub>
 80030b8:	f805 6b01 	strb.w	r6, [r5], #1
 80030bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030be:	429d      	cmp	r5, r3
 80030c0:	4680      	mov	r8, r0
 80030c2:	4689      	mov	r9, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	d124      	bne.n	8003114 <_dtoa_r+0x60c>
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <_dtoa_r+0x630>)
 80030cc:	4650      	mov	r0, sl
 80030ce:	4659      	mov	r1, fp
 80030d0:	f7fd f8e4 	bl	800029c <__adddf3>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4640      	mov	r0, r8
 80030da:	4649      	mov	r1, r9
 80030dc:	f7fd fd24 	bl	8000b28 <__aeabi_dcmpgt>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d173      	bne.n	80031cc <_dtoa_r+0x6c4>
 80030e4:	4652      	mov	r2, sl
 80030e6:	465b      	mov	r3, fp
 80030e8:	4913      	ldr	r1, [pc, #76]	; (8003138 <_dtoa_r+0x630>)
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd f8d4 	bl	8000298 <__aeabi_dsub>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4640      	mov	r0, r8
 80030f6:	4649      	mov	r1, r9
 80030f8:	f7fd fcf8 	bl	8000aec <__aeabi_dcmplt>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	f43f af35 	beq.w	8002f6c <_dtoa_r+0x464>
 8003102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003104:	1e6b      	subs	r3, r5, #1
 8003106:	930f      	str	r3, [sp, #60]	; 0x3c
 8003108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	d0f8      	beq.n	8003102 <_dtoa_r+0x5fa>
 8003110:	9700      	str	r7, [sp, #0]
 8003112:	e049      	b.n	80031a8 <_dtoa_r+0x6a0>
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <_dtoa_r+0x624>)
 8003116:	f7fd fa77 	bl	8000608 <__aeabi_dmul>
 800311a:	4680      	mov	r8, r0
 800311c:	4689      	mov	r9, r1
 800311e:	e7bd      	b.n	800309c <_dtoa_r+0x594>
 8003120:	08004c00 	.word	0x08004c00
 8003124:	08004bd8 	.word	0x08004bd8
 8003128:	3ff00000 	.word	0x3ff00000
 800312c:	40240000 	.word	0x40240000
 8003130:	401c0000 	.word	0x401c0000
 8003134:	40140000 	.word	0x40140000
 8003138:	3fe00000 	.word	0x3fe00000
 800313c:	9d01      	ldr	r5, [sp, #4]
 800313e:	4656      	mov	r6, sl
 8003140:	465f      	mov	r7, fp
 8003142:	4642      	mov	r2, r8
 8003144:	464b      	mov	r3, r9
 8003146:	4630      	mov	r0, r6
 8003148:	4639      	mov	r1, r7
 800314a:	f7fd fb87 	bl	800085c <__aeabi_ddiv>
 800314e:	f7fd fd0b 	bl	8000b68 <__aeabi_d2iz>
 8003152:	4682      	mov	sl, r0
 8003154:	f7fd f9ee 	bl	8000534 <__aeabi_i2d>
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	f7fd fa54 	bl	8000608 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4630      	mov	r0, r6
 8003166:	4639      	mov	r1, r7
 8003168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800316c:	f7fd f894 	bl	8000298 <__aeabi_dsub>
 8003170:	f805 6b01 	strb.w	r6, [r5], #1
 8003174:	9e01      	ldr	r6, [sp, #4]
 8003176:	9f03      	ldr	r7, [sp, #12]
 8003178:	1bae      	subs	r6, r5, r6
 800317a:	42b7      	cmp	r7, r6
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	d135      	bne.n	80031ee <_dtoa_r+0x6e6>
 8003182:	f7fd f88b 	bl	800029c <__adddf3>
 8003186:	4642      	mov	r2, r8
 8003188:	464b      	mov	r3, r9
 800318a:	4606      	mov	r6, r0
 800318c:	460f      	mov	r7, r1
 800318e:	f7fd fccb 	bl	8000b28 <__aeabi_dcmpgt>
 8003192:	b9d0      	cbnz	r0, 80031ca <_dtoa_r+0x6c2>
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	4630      	mov	r0, r6
 800319a:	4639      	mov	r1, r7
 800319c:	f7fd fc9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80031a0:	b110      	cbz	r0, 80031a8 <_dtoa_r+0x6a0>
 80031a2:	f01a 0f01 	tst.w	sl, #1
 80031a6:	d110      	bne.n	80031ca <_dtoa_r+0x6c2>
 80031a8:	4620      	mov	r0, r4
 80031aa:	ee18 1a10 	vmov	r1, s16
 80031ae:	f000 fb05 	bl	80037bc <_Bfree>
 80031b2:	2300      	movs	r3, #0
 80031b4:	9800      	ldr	r0, [sp, #0]
 80031b6:	702b      	strb	r3, [r5, #0]
 80031b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ba:	3001      	adds	r0, #1
 80031bc:	6018      	str	r0, [r3, #0]
 80031be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f43f acf1 	beq.w	8002ba8 <_dtoa_r+0xa0>
 80031c6:	601d      	str	r5, [r3, #0]
 80031c8:	e4ee      	b.n	8002ba8 <_dtoa_r+0xa0>
 80031ca:	9f00      	ldr	r7, [sp, #0]
 80031cc:	462b      	mov	r3, r5
 80031ce:	461d      	mov	r5, r3
 80031d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80031d4:	2a39      	cmp	r2, #57	; 0x39
 80031d6:	d106      	bne.n	80031e6 <_dtoa_r+0x6de>
 80031d8:	9a01      	ldr	r2, [sp, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d1f7      	bne.n	80031ce <_dtoa_r+0x6c6>
 80031de:	9901      	ldr	r1, [sp, #4]
 80031e0:	2230      	movs	r2, #48	; 0x30
 80031e2:	3701      	adds	r7, #1
 80031e4:	700a      	strb	r2, [r1, #0]
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	3201      	adds	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e790      	b.n	8003110 <_dtoa_r+0x608>
 80031ee:	4ba6      	ldr	r3, [pc, #664]	; (8003488 <_dtoa_r+0x980>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f7fd fa09 	bl	8000608 <__aeabi_dmul>
 80031f6:	2200      	movs	r2, #0
 80031f8:	2300      	movs	r3, #0
 80031fa:	4606      	mov	r6, r0
 80031fc:	460f      	mov	r7, r1
 80031fe:	f7fd fc6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003202:	2800      	cmp	r0, #0
 8003204:	d09d      	beq.n	8003142 <_dtoa_r+0x63a>
 8003206:	e7cf      	b.n	80031a8 <_dtoa_r+0x6a0>
 8003208:	9a08      	ldr	r2, [sp, #32]
 800320a:	2a00      	cmp	r2, #0
 800320c:	f000 80d7 	beq.w	80033be <_dtoa_r+0x8b6>
 8003210:	9a06      	ldr	r2, [sp, #24]
 8003212:	2a01      	cmp	r2, #1
 8003214:	f300 80ba 	bgt.w	800338c <_dtoa_r+0x884>
 8003218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800321a:	2a00      	cmp	r2, #0
 800321c:	f000 80b2 	beq.w	8003384 <_dtoa_r+0x87c>
 8003220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003224:	9e07      	ldr	r6, [sp, #28]
 8003226:	9d04      	ldr	r5, [sp, #16]
 8003228:	9a04      	ldr	r2, [sp, #16]
 800322a:	441a      	add	r2, r3
 800322c:	9204      	str	r2, [sp, #16]
 800322e:	9a05      	ldr	r2, [sp, #20]
 8003230:	2101      	movs	r1, #1
 8003232:	441a      	add	r2, r3
 8003234:	4620      	mov	r0, r4
 8003236:	9205      	str	r2, [sp, #20]
 8003238:	f000 fb78 	bl	800392c <__i2b>
 800323c:	4607      	mov	r7, r0
 800323e:	2d00      	cmp	r5, #0
 8003240:	dd0c      	ble.n	800325c <_dtoa_r+0x754>
 8003242:	9b05      	ldr	r3, [sp, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	dd09      	ble.n	800325c <_dtoa_r+0x754>
 8003248:	42ab      	cmp	r3, r5
 800324a:	9a04      	ldr	r2, [sp, #16]
 800324c:	bfa8      	it	ge
 800324e:	462b      	movge	r3, r5
 8003250:	1ad2      	subs	r2, r2, r3
 8003252:	9204      	str	r2, [sp, #16]
 8003254:	9a05      	ldr	r2, [sp, #20]
 8003256:	1aed      	subs	r5, r5, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	9305      	str	r3, [sp, #20]
 800325c:	9b07      	ldr	r3, [sp, #28]
 800325e:	b31b      	cbz	r3, 80032a8 <_dtoa_r+0x7a0>
 8003260:	9b08      	ldr	r3, [sp, #32]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80af 	beq.w	80033c6 <_dtoa_r+0x8be>
 8003268:	2e00      	cmp	r6, #0
 800326a:	dd13      	ble.n	8003294 <_dtoa_r+0x78c>
 800326c:	4639      	mov	r1, r7
 800326e:	4632      	mov	r2, r6
 8003270:	4620      	mov	r0, r4
 8003272:	f000 fc1b 	bl	8003aac <__pow5mult>
 8003276:	ee18 2a10 	vmov	r2, s16
 800327a:	4601      	mov	r1, r0
 800327c:	4607      	mov	r7, r0
 800327e:	4620      	mov	r0, r4
 8003280:	f000 fb6a 	bl	8003958 <__multiply>
 8003284:	ee18 1a10 	vmov	r1, s16
 8003288:	4680      	mov	r8, r0
 800328a:	4620      	mov	r0, r4
 800328c:	f000 fa96 	bl	80037bc <_Bfree>
 8003290:	ee08 8a10 	vmov	s16, r8
 8003294:	9b07      	ldr	r3, [sp, #28]
 8003296:	1b9a      	subs	r2, r3, r6
 8003298:	d006      	beq.n	80032a8 <_dtoa_r+0x7a0>
 800329a:	ee18 1a10 	vmov	r1, s16
 800329e:	4620      	mov	r0, r4
 80032a0:	f000 fc04 	bl	8003aac <__pow5mult>
 80032a4:	ee08 0a10 	vmov	s16, r0
 80032a8:	2101      	movs	r1, #1
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 fb3e 	bl	800392c <__i2b>
 80032b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	4606      	mov	r6, r0
 80032b6:	f340 8088 	ble.w	80033ca <_dtoa_r+0x8c2>
 80032ba:	461a      	mov	r2, r3
 80032bc:	4601      	mov	r1, r0
 80032be:	4620      	mov	r0, r4
 80032c0:	f000 fbf4 	bl	8003aac <__pow5mult>
 80032c4:	9b06      	ldr	r3, [sp, #24]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	4606      	mov	r6, r0
 80032ca:	f340 8081 	ble.w	80033d0 <_dtoa_r+0x8c8>
 80032ce:	f04f 0800 	mov.w	r8, #0
 80032d2:	6933      	ldr	r3, [r6, #16]
 80032d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80032d8:	6918      	ldr	r0, [r3, #16]
 80032da:	f000 fad7 	bl	800388c <__hi0bits>
 80032de:	f1c0 0020 	rsb	r0, r0, #32
 80032e2:	9b05      	ldr	r3, [sp, #20]
 80032e4:	4418      	add	r0, r3
 80032e6:	f010 001f 	ands.w	r0, r0, #31
 80032ea:	f000 8092 	beq.w	8003412 <_dtoa_r+0x90a>
 80032ee:	f1c0 0320 	rsb	r3, r0, #32
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	f340 808a 	ble.w	800340c <_dtoa_r+0x904>
 80032f8:	f1c0 001c 	rsb	r0, r0, #28
 80032fc:	9b04      	ldr	r3, [sp, #16]
 80032fe:	4403      	add	r3, r0
 8003300:	9304      	str	r3, [sp, #16]
 8003302:	9b05      	ldr	r3, [sp, #20]
 8003304:	4403      	add	r3, r0
 8003306:	4405      	add	r5, r0
 8003308:	9305      	str	r3, [sp, #20]
 800330a:	9b04      	ldr	r3, [sp, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	dd07      	ble.n	8003320 <_dtoa_r+0x818>
 8003310:	ee18 1a10 	vmov	r1, s16
 8003314:	461a      	mov	r2, r3
 8003316:	4620      	mov	r0, r4
 8003318:	f000 fc22 	bl	8003b60 <__lshift>
 800331c:	ee08 0a10 	vmov	s16, r0
 8003320:	9b05      	ldr	r3, [sp, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	dd05      	ble.n	8003332 <_dtoa_r+0x82a>
 8003326:	4631      	mov	r1, r6
 8003328:	461a      	mov	r2, r3
 800332a:	4620      	mov	r0, r4
 800332c:	f000 fc18 	bl	8003b60 <__lshift>
 8003330:	4606      	mov	r6, r0
 8003332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d06e      	beq.n	8003416 <_dtoa_r+0x90e>
 8003338:	ee18 0a10 	vmov	r0, s16
 800333c:	4631      	mov	r1, r6
 800333e:	f000 fc7f 	bl	8003c40 <__mcmp>
 8003342:	2800      	cmp	r0, #0
 8003344:	da67      	bge.n	8003416 <_dtoa_r+0x90e>
 8003346:	9b00      	ldr	r3, [sp, #0]
 8003348:	3b01      	subs	r3, #1
 800334a:	ee18 1a10 	vmov	r1, s16
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	220a      	movs	r2, #10
 8003352:	2300      	movs	r3, #0
 8003354:	4620      	mov	r0, r4
 8003356:	f000 fa53 	bl	8003800 <__multadd>
 800335a:	9b08      	ldr	r3, [sp, #32]
 800335c:	ee08 0a10 	vmov	s16, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 81b1 	beq.w	80036c8 <_dtoa_r+0xbc0>
 8003366:	2300      	movs	r3, #0
 8003368:	4639      	mov	r1, r7
 800336a:	220a      	movs	r2, #10
 800336c:	4620      	mov	r0, r4
 800336e:	f000 fa47 	bl	8003800 <__multadd>
 8003372:	9b02      	ldr	r3, [sp, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	4607      	mov	r7, r0
 8003378:	f300 808e 	bgt.w	8003498 <_dtoa_r+0x990>
 800337c:	9b06      	ldr	r3, [sp, #24]
 800337e:	2b02      	cmp	r3, #2
 8003380:	dc51      	bgt.n	8003426 <_dtoa_r+0x91e>
 8003382:	e089      	b.n	8003498 <_dtoa_r+0x990>
 8003384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800338a:	e74b      	b.n	8003224 <_dtoa_r+0x71c>
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	1e5e      	subs	r6, r3, #1
 8003390:	9b07      	ldr	r3, [sp, #28]
 8003392:	42b3      	cmp	r3, r6
 8003394:	bfbf      	itttt	lt
 8003396:	9b07      	ldrlt	r3, [sp, #28]
 8003398:	9607      	strlt	r6, [sp, #28]
 800339a:	1af2      	sublt	r2, r6, r3
 800339c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800339e:	bfb6      	itet	lt
 80033a0:	189b      	addlt	r3, r3, r2
 80033a2:	1b9e      	subge	r6, r3, r6
 80033a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80033a6:	9b03      	ldr	r3, [sp, #12]
 80033a8:	bfb8      	it	lt
 80033aa:	2600      	movlt	r6, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bfb7      	itett	lt
 80033b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80033b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80033b8:	1a9d      	sublt	r5, r3, r2
 80033ba:	2300      	movlt	r3, #0
 80033bc:	e734      	b.n	8003228 <_dtoa_r+0x720>
 80033be:	9e07      	ldr	r6, [sp, #28]
 80033c0:	9d04      	ldr	r5, [sp, #16]
 80033c2:	9f08      	ldr	r7, [sp, #32]
 80033c4:	e73b      	b.n	800323e <_dtoa_r+0x736>
 80033c6:	9a07      	ldr	r2, [sp, #28]
 80033c8:	e767      	b.n	800329a <_dtoa_r+0x792>
 80033ca:	9b06      	ldr	r3, [sp, #24]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	dc18      	bgt.n	8003402 <_dtoa_r+0x8fa>
 80033d0:	f1ba 0f00 	cmp.w	sl, #0
 80033d4:	d115      	bne.n	8003402 <_dtoa_r+0x8fa>
 80033d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80033da:	b993      	cbnz	r3, 8003402 <_dtoa_r+0x8fa>
 80033dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80033e0:	0d1b      	lsrs	r3, r3, #20
 80033e2:	051b      	lsls	r3, r3, #20
 80033e4:	b183      	cbz	r3, 8003408 <_dtoa_r+0x900>
 80033e6:	9b04      	ldr	r3, [sp, #16]
 80033e8:	3301      	adds	r3, #1
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	9b05      	ldr	r3, [sp, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	9305      	str	r3, [sp, #20]
 80033f2:	f04f 0801 	mov.w	r8, #1
 80033f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f47f af6a 	bne.w	80032d2 <_dtoa_r+0x7ca>
 80033fe:	2001      	movs	r0, #1
 8003400:	e76f      	b.n	80032e2 <_dtoa_r+0x7da>
 8003402:	f04f 0800 	mov.w	r8, #0
 8003406:	e7f6      	b.n	80033f6 <_dtoa_r+0x8ee>
 8003408:	4698      	mov	r8, r3
 800340a:	e7f4      	b.n	80033f6 <_dtoa_r+0x8ee>
 800340c:	f43f af7d 	beq.w	800330a <_dtoa_r+0x802>
 8003410:	4618      	mov	r0, r3
 8003412:	301c      	adds	r0, #28
 8003414:	e772      	b.n	80032fc <_dtoa_r+0x7f4>
 8003416:	9b03      	ldr	r3, [sp, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	dc37      	bgt.n	800348c <_dtoa_r+0x984>
 800341c:	9b06      	ldr	r3, [sp, #24]
 800341e:	2b02      	cmp	r3, #2
 8003420:	dd34      	ble.n	800348c <_dtoa_r+0x984>
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	9b02      	ldr	r3, [sp, #8]
 8003428:	b96b      	cbnz	r3, 8003446 <_dtoa_r+0x93e>
 800342a:	4631      	mov	r1, r6
 800342c:	2205      	movs	r2, #5
 800342e:	4620      	mov	r0, r4
 8003430:	f000 f9e6 	bl	8003800 <__multadd>
 8003434:	4601      	mov	r1, r0
 8003436:	4606      	mov	r6, r0
 8003438:	ee18 0a10 	vmov	r0, s16
 800343c:	f000 fc00 	bl	8003c40 <__mcmp>
 8003440:	2800      	cmp	r0, #0
 8003442:	f73f adbb 	bgt.w	8002fbc <_dtoa_r+0x4b4>
 8003446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003448:	9d01      	ldr	r5, [sp, #4]
 800344a:	43db      	mvns	r3, r3
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	f04f 0800 	mov.w	r8, #0
 8003452:	4631      	mov	r1, r6
 8003454:	4620      	mov	r0, r4
 8003456:	f000 f9b1 	bl	80037bc <_Bfree>
 800345a:	2f00      	cmp	r7, #0
 800345c:	f43f aea4 	beq.w	80031a8 <_dtoa_r+0x6a0>
 8003460:	f1b8 0f00 	cmp.w	r8, #0
 8003464:	d005      	beq.n	8003472 <_dtoa_r+0x96a>
 8003466:	45b8      	cmp	r8, r7
 8003468:	d003      	beq.n	8003472 <_dtoa_r+0x96a>
 800346a:	4641      	mov	r1, r8
 800346c:	4620      	mov	r0, r4
 800346e:	f000 f9a5 	bl	80037bc <_Bfree>
 8003472:	4639      	mov	r1, r7
 8003474:	4620      	mov	r0, r4
 8003476:	f000 f9a1 	bl	80037bc <_Bfree>
 800347a:	e695      	b.n	80031a8 <_dtoa_r+0x6a0>
 800347c:	2600      	movs	r6, #0
 800347e:	4637      	mov	r7, r6
 8003480:	e7e1      	b.n	8003446 <_dtoa_r+0x93e>
 8003482:	9700      	str	r7, [sp, #0]
 8003484:	4637      	mov	r7, r6
 8003486:	e599      	b.n	8002fbc <_dtoa_r+0x4b4>
 8003488:	40240000 	.word	0x40240000
 800348c:	9b08      	ldr	r3, [sp, #32]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80ca 	beq.w	8003628 <_dtoa_r+0xb20>
 8003494:	9b03      	ldr	r3, [sp, #12]
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	2d00      	cmp	r5, #0
 800349a:	dd05      	ble.n	80034a8 <_dtoa_r+0x9a0>
 800349c:	4639      	mov	r1, r7
 800349e:	462a      	mov	r2, r5
 80034a0:	4620      	mov	r0, r4
 80034a2:	f000 fb5d 	bl	8003b60 <__lshift>
 80034a6:	4607      	mov	r7, r0
 80034a8:	f1b8 0f00 	cmp.w	r8, #0
 80034ac:	d05b      	beq.n	8003566 <_dtoa_r+0xa5e>
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4620      	mov	r0, r4
 80034b2:	f000 f943 	bl	800373c <_Balloc>
 80034b6:	4605      	mov	r5, r0
 80034b8:	b928      	cbnz	r0, 80034c6 <_dtoa_r+0x9be>
 80034ba:	4b87      	ldr	r3, [pc, #540]	; (80036d8 <_dtoa_r+0xbd0>)
 80034bc:	4602      	mov	r2, r0
 80034be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80034c2:	f7ff bb3b 	b.w	8002b3c <_dtoa_r+0x34>
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	3202      	adds	r2, #2
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	f107 010c 	add.w	r1, r7, #12
 80034d0:	300c      	adds	r0, #12
 80034d2:	f000 f925 	bl	8003720 <memcpy>
 80034d6:	2201      	movs	r2, #1
 80034d8:	4629      	mov	r1, r5
 80034da:	4620      	mov	r0, r4
 80034dc:	f000 fb40 	bl	8003b60 <__lshift>
 80034e0:	9b01      	ldr	r3, [sp, #4]
 80034e2:	f103 0901 	add.w	r9, r3, #1
 80034e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	9305      	str	r3, [sp, #20]
 80034ee:	f00a 0301 	and.w	r3, sl, #1
 80034f2:	46b8      	mov	r8, r7
 80034f4:	9304      	str	r3, [sp, #16]
 80034f6:	4607      	mov	r7, r0
 80034f8:	4631      	mov	r1, r6
 80034fa:	ee18 0a10 	vmov	r0, s16
 80034fe:	f7ff fa77 	bl	80029f0 <quorem>
 8003502:	4641      	mov	r1, r8
 8003504:	9002      	str	r0, [sp, #8]
 8003506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800350a:	ee18 0a10 	vmov	r0, s16
 800350e:	f000 fb97 	bl	8003c40 <__mcmp>
 8003512:	463a      	mov	r2, r7
 8003514:	9003      	str	r0, [sp, #12]
 8003516:	4631      	mov	r1, r6
 8003518:	4620      	mov	r0, r4
 800351a:	f000 fbad 	bl	8003c78 <__mdiff>
 800351e:	68c2      	ldr	r2, [r0, #12]
 8003520:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8003524:	4605      	mov	r5, r0
 8003526:	bb02      	cbnz	r2, 800356a <_dtoa_r+0xa62>
 8003528:	4601      	mov	r1, r0
 800352a:	ee18 0a10 	vmov	r0, s16
 800352e:	f000 fb87 	bl	8003c40 <__mcmp>
 8003532:	4602      	mov	r2, r0
 8003534:	4629      	mov	r1, r5
 8003536:	4620      	mov	r0, r4
 8003538:	9207      	str	r2, [sp, #28]
 800353a:	f000 f93f 	bl	80037bc <_Bfree>
 800353e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003542:	ea43 0102 	orr.w	r1, r3, r2
 8003546:	9b04      	ldr	r3, [sp, #16]
 8003548:	430b      	orrs	r3, r1
 800354a:	464d      	mov	r5, r9
 800354c:	d10f      	bne.n	800356e <_dtoa_r+0xa66>
 800354e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003552:	d02a      	beq.n	80035aa <_dtoa_r+0xaa2>
 8003554:	9b03      	ldr	r3, [sp, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	dd02      	ble.n	8003560 <_dtoa_r+0xa58>
 800355a:	9b02      	ldr	r3, [sp, #8]
 800355c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003560:	f88b a000 	strb.w	sl, [fp]
 8003564:	e775      	b.n	8003452 <_dtoa_r+0x94a>
 8003566:	4638      	mov	r0, r7
 8003568:	e7ba      	b.n	80034e0 <_dtoa_r+0x9d8>
 800356a:	2201      	movs	r2, #1
 800356c:	e7e2      	b.n	8003534 <_dtoa_r+0xa2c>
 800356e:	9b03      	ldr	r3, [sp, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db04      	blt.n	800357e <_dtoa_r+0xa76>
 8003574:	9906      	ldr	r1, [sp, #24]
 8003576:	430b      	orrs	r3, r1
 8003578:	9904      	ldr	r1, [sp, #16]
 800357a:	430b      	orrs	r3, r1
 800357c:	d122      	bne.n	80035c4 <_dtoa_r+0xabc>
 800357e:	2a00      	cmp	r2, #0
 8003580:	ddee      	ble.n	8003560 <_dtoa_r+0xa58>
 8003582:	ee18 1a10 	vmov	r1, s16
 8003586:	2201      	movs	r2, #1
 8003588:	4620      	mov	r0, r4
 800358a:	f000 fae9 	bl	8003b60 <__lshift>
 800358e:	4631      	mov	r1, r6
 8003590:	ee08 0a10 	vmov	s16, r0
 8003594:	f000 fb54 	bl	8003c40 <__mcmp>
 8003598:	2800      	cmp	r0, #0
 800359a:	dc03      	bgt.n	80035a4 <_dtoa_r+0xa9c>
 800359c:	d1e0      	bne.n	8003560 <_dtoa_r+0xa58>
 800359e:	f01a 0f01 	tst.w	sl, #1
 80035a2:	d0dd      	beq.n	8003560 <_dtoa_r+0xa58>
 80035a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80035a8:	d1d7      	bne.n	800355a <_dtoa_r+0xa52>
 80035aa:	2339      	movs	r3, #57	; 0x39
 80035ac:	f88b 3000 	strb.w	r3, [fp]
 80035b0:	462b      	mov	r3, r5
 80035b2:	461d      	mov	r5, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80035ba:	2a39      	cmp	r2, #57	; 0x39
 80035bc:	d071      	beq.n	80036a2 <_dtoa_r+0xb9a>
 80035be:	3201      	adds	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e746      	b.n	8003452 <_dtoa_r+0x94a>
 80035c4:	2a00      	cmp	r2, #0
 80035c6:	dd07      	ble.n	80035d8 <_dtoa_r+0xad0>
 80035c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80035cc:	d0ed      	beq.n	80035aa <_dtoa_r+0xaa2>
 80035ce:	f10a 0301 	add.w	r3, sl, #1
 80035d2:	f88b 3000 	strb.w	r3, [fp]
 80035d6:	e73c      	b.n	8003452 <_dtoa_r+0x94a>
 80035d8:	9b05      	ldr	r3, [sp, #20]
 80035da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80035de:	4599      	cmp	r9, r3
 80035e0:	d047      	beq.n	8003672 <_dtoa_r+0xb6a>
 80035e2:	ee18 1a10 	vmov	r1, s16
 80035e6:	2300      	movs	r3, #0
 80035e8:	220a      	movs	r2, #10
 80035ea:	4620      	mov	r0, r4
 80035ec:	f000 f908 	bl	8003800 <__multadd>
 80035f0:	45b8      	cmp	r8, r7
 80035f2:	ee08 0a10 	vmov	s16, r0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	f04f 020a 	mov.w	r2, #10
 80035fe:	4641      	mov	r1, r8
 8003600:	4620      	mov	r0, r4
 8003602:	d106      	bne.n	8003612 <_dtoa_r+0xb0a>
 8003604:	f000 f8fc 	bl	8003800 <__multadd>
 8003608:	4680      	mov	r8, r0
 800360a:	4607      	mov	r7, r0
 800360c:	f109 0901 	add.w	r9, r9, #1
 8003610:	e772      	b.n	80034f8 <_dtoa_r+0x9f0>
 8003612:	f000 f8f5 	bl	8003800 <__multadd>
 8003616:	4639      	mov	r1, r7
 8003618:	4680      	mov	r8, r0
 800361a:	2300      	movs	r3, #0
 800361c:	220a      	movs	r2, #10
 800361e:	4620      	mov	r0, r4
 8003620:	f000 f8ee 	bl	8003800 <__multadd>
 8003624:	4607      	mov	r7, r0
 8003626:	e7f1      	b.n	800360c <_dtoa_r+0xb04>
 8003628:	9b03      	ldr	r3, [sp, #12]
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	9d01      	ldr	r5, [sp, #4]
 800362e:	ee18 0a10 	vmov	r0, s16
 8003632:	4631      	mov	r1, r6
 8003634:	f7ff f9dc 	bl	80029f0 <quorem>
 8003638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800363c:	9b01      	ldr	r3, [sp, #4]
 800363e:	f805 ab01 	strb.w	sl, [r5], #1
 8003642:	1aea      	subs	r2, r5, r3
 8003644:	9b02      	ldr	r3, [sp, #8]
 8003646:	4293      	cmp	r3, r2
 8003648:	dd09      	ble.n	800365e <_dtoa_r+0xb56>
 800364a:	ee18 1a10 	vmov	r1, s16
 800364e:	2300      	movs	r3, #0
 8003650:	220a      	movs	r2, #10
 8003652:	4620      	mov	r0, r4
 8003654:	f000 f8d4 	bl	8003800 <__multadd>
 8003658:	ee08 0a10 	vmov	s16, r0
 800365c:	e7e7      	b.n	800362e <_dtoa_r+0xb26>
 800365e:	9b02      	ldr	r3, [sp, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	bfc8      	it	gt
 8003664:	461d      	movgt	r5, r3
 8003666:	9b01      	ldr	r3, [sp, #4]
 8003668:	bfd8      	it	le
 800366a:	2501      	movle	r5, #1
 800366c:	441d      	add	r5, r3
 800366e:	f04f 0800 	mov.w	r8, #0
 8003672:	ee18 1a10 	vmov	r1, s16
 8003676:	2201      	movs	r2, #1
 8003678:	4620      	mov	r0, r4
 800367a:	f000 fa71 	bl	8003b60 <__lshift>
 800367e:	4631      	mov	r1, r6
 8003680:	ee08 0a10 	vmov	s16, r0
 8003684:	f000 fadc 	bl	8003c40 <__mcmp>
 8003688:	2800      	cmp	r0, #0
 800368a:	dc91      	bgt.n	80035b0 <_dtoa_r+0xaa8>
 800368c:	d102      	bne.n	8003694 <_dtoa_r+0xb8c>
 800368e:	f01a 0f01 	tst.w	sl, #1
 8003692:	d18d      	bne.n	80035b0 <_dtoa_r+0xaa8>
 8003694:	462b      	mov	r3, r5
 8003696:	461d      	mov	r5, r3
 8003698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800369c:	2a30      	cmp	r2, #48	; 0x30
 800369e:	d0fa      	beq.n	8003696 <_dtoa_r+0xb8e>
 80036a0:	e6d7      	b.n	8003452 <_dtoa_r+0x94a>
 80036a2:	9a01      	ldr	r2, [sp, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d184      	bne.n	80035b2 <_dtoa_r+0xaaa>
 80036a8:	9b00      	ldr	r3, [sp, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2331      	movs	r3, #49	; 0x31
 80036b0:	7013      	strb	r3, [r2, #0]
 80036b2:	e6ce      	b.n	8003452 <_dtoa_r+0x94a>
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <_dtoa_r+0xbd4>)
 80036b6:	f7ff ba95 	b.w	8002be4 <_dtoa_r+0xdc>
 80036ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f47f aa6e 	bne.w	8002b9e <_dtoa_r+0x96>
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <_dtoa_r+0xbd8>)
 80036c4:	f7ff ba8e 	b.w	8002be4 <_dtoa_r+0xdc>
 80036c8:	9b02      	ldr	r3, [sp, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	dcae      	bgt.n	800362c <_dtoa_r+0xb24>
 80036ce:	9b06      	ldr	r3, [sp, #24]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f73f aea8 	bgt.w	8003426 <_dtoa_r+0x91e>
 80036d6:	e7a9      	b.n	800362c <_dtoa_r+0xb24>
 80036d8:	08004b67 	.word	0x08004b67
 80036dc:	08004ac4 	.word	0x08004ac4
 80036e0:	08004ae8 	.word	0x08004ae8

080036e4 <_localeconv_r>:
 80036e4:	4800      	ldr	r0, [pc, #0]	; (80036e8 <_localeconv_r+0x4>)
 80036e6:	4770      	bx	lr
 80036e8:	20000154 	.word	0x20000154

080036ec <_lseek_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d07      	ldr	r5, [pc, #28]	; (800370c <_lseek_r+0x20>)
 80036f0:	4604      	mov	r4, r0
 80036f2:	4608      	mov	r0, r1
 80036f4:	4611      	mov	r1, r2
 80036f6:	2200      	movs	r2, #0
 80036f8:	602a      	str	r2, [r5, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7fd fbc0 	bl	8000e80 <_lseek>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_lseek_r+0x1e>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	b103      	cbz	r3, 800370a <_lseek_r+0x1e>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	2000023c 	.word	0x2000023c

08003710 <malloc>:
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <malloc+0xc>)
 8003712:	4601      	mov	r1, r0
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	f000 bc17 	b.w	8003f48 <_malloc_r>
 800371a:	bf00      	nop
 800371c:	20000000 	.word	0x20000000

08003720 <memcpy>:
 8003720:	440a      	add	r2, r1
 8003722:	4291      	cmp	r1, r2
 8003724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003728:	d100      	bne.n	800372c <memcpy+0xc>
 800372a:	4770      	bx	lr
 800372c:	b510      	push	{r4, lr}
 800372e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003736:	4291      	cmp	r1, r2
 8003738:	d1f9      	bne.n	800372e <memcpy+0xe>
 800373a:	bd10      	pop	{r4, pc}

0800373c <_Balloc>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003740:	4604      	mov	r4, r0
 8003742:	460d      	mov	r5, r1
 8003744:	b976      	cbnz	r6, 8003764 <_Balloc+0x28>
 8003746:	2010      	movs	r0, #16
 8003748:	f7ff ffe2 	bl	8003710 <malloc>
 800374c:	4602      	mov	r2, r0
 800374e:	6260      	str	r0, [r4, #36]	; 0x24
 8003750:	b920      	cbnz	r0, 800375c <_Balloc+0x20>
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <_Balloc+0x78>)
 8003754:	4818      	ldr	r0, [pc, #96]	; (80037b8 <_Balloc+0x7c>)
 8003756:	2166      	movs	r1, #102	; 0x66
 8003758:	f000 fc8c 	bl	8004074 <__assert_func>
 800375c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003760:	6006      	str	r6, [r0, #0]
 8003762:	60c6      	str	r6, [r0, #12]
 8003764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003766:	68f3      	ldr	r3, [r6, #12]
 8003768:	b183      	cbz	r3, 800378c <_Balloc+0x50>
 800376a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003772:	b9b8      	cbnz	r0, 80037a4 <_Balloc+0x68>
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f605 	lsl.w	r6, r1, r5
 800377a:	1d72      	adds	r2, r6, #5
 800377c:	0092      	lsls	r2, r2, #2
 800377e:	4620      	mov	r0, r4
 8003780:	f000 fb60 	bl	8003e44 <_calloc_r>
 8003784:	b160      	cbz	r0, 80037a0 <_Balloc+0x64>
 8003786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800378a:	e00e      	b.n	80037aa <_Balloc+0x6e>
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	2104      	movs	r1, #4
 8003790:	4620      	mov	r0, r4
 8003792:	f000 fb57 	bl	8003e44 <_calloc_r>
 8003796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003798:	60f0      	str	r0, [r6, #12]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e4      	bne.n	800376a <_Balloc+0x2e>
 80037a0:	2000      	movs	r0, #0
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	6802      	ldr	r2, [r0, #0]
 80037a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80037aa:	2300      	movs	r3, #0
 80037ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80037b0:	e7f7      	b.n	80037a2 <_Balloc+0x66>
 80037b2:	bf00      	nop
 80037b4:	08004af5 	.word	0x08004af5
 80037b8:	08004b78 	.word	0x08004b78

080037bc <_Bfree>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80037c0:	4605      	mov	r5, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	b976      	cbnz	r6, 80037e4 <_Bfree+0x28>
 80037c6:	2010      	movs	r0, #16
 80037c8:	f7ff ffa2 	bl	8003710 <malloc>
 80037cc:	4602      	mov	r2, r0
 80037ce:	6268      	str	r0, [r5, #36]	; 0x24
 80037d0:	b920      	cbnz	r0, 80037dc <_Bfree+0x20>
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <_Bfree+0x3c>)
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <_Bfree+0x40>)
 80037d6:	218a      	movs	r1, #138	; 0x8a
 80037d8:	f000 fc4c 	bl	8004074 <__assert_func>
 80037dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80037e0:	6006      	str	r6, [r0, #0]
 80037e2:	60c6      	str	r6, [r0, #12]
 80037e4:	b13c      	cbz	r4, 80037f6 <_Bfree+0x3a>
 80037e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037f0:	6021      	str	r1, [r4, #0]
 80037f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	08004af5 	.word	0x08004af5
 80037fc:	08004b78 	.word	0x08004b78

08003800 <__multadd>:
 8003800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003804:	690d      	ldr	r5, [r1, #16]
 8003806:	4607      	mov	r7, r0
 8003808:	460c      	mov	r4, r1
 800380a:	461e      	mov	r6, r3
 800380c:	f101 0c14 	add.w	ip, r1, #20
 8003810:	2000      	movs	r0, #0
 8003812:	f8dc 3000 	ldr.w	r3, [ip]
 8003816:	b299      	uxth	r1, r3
 8003818:	fb02 6101 	mla	r1, r2, r1, r6
 800381c:	0c1e      	lsrs	r6, r3, #16
 800381e:	0c0b      	lsrs	r3, r1, #16
 8003820:	fb02 3306 	mla	r3, r2, r6, r3
 8003824:	b289      	uxth	r1, r1
 8003826:	3001      	adds	r0, #1
 8003828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800382c:	4285      	cmp	r5, r0
 800382e:	f84c 1b04 	str.w	r1, [ip], #4
 8003832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003836:	dcec      	bgt.n	8003812 <__multadd+0x12>
 8003838:	b30e      	cbz	r6, 800387e <__multadd+0x7e>
 800383a:	68a3      	ldr	r3, [r4, #8]
 800383c:	42ab      	cmp	r3, r5
 800383e:	dc19      	bgt.n	8003874 <__multadd+0x74>
 8003840:	6861      	ldr	r1, [r4, #4]
 8003842:	4638      	mov	r0, r7
 8003844:	3101      	adds	r1, #1
 8003846:	f7ff ff79 	bl	800373c <_Balloc>
 800384a:	4680      	mov	r8, r0
 800384c:	b928      	cbnz	r0, 800385a <__multadd+0x5a>
 800384e:	4602      	mov	r2, r0
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <__multadd+0x84>)
 8003852:	480d      	ldr	r0, [pc, #52]	; (8003888 <__multadd+0x88>)
 8003854:	21b5      	movs	r1, #181	; 0xb5
 8003856:	f000 fc0d 	bl	8004074 <__assert_func>
 800385a:	6922      	ldr	r2, [r4, #16]
 800385c:	3202      	adds	r2, #2
 800385e:	f104 010c 	add.w	r1, r4, #12
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	300c      	adds	r0, #12
 8003866:	f7ff ff5b 	bl	8003720 <memcpy>
 800386a:	4621      	mov	r1, r4
 800386c:	4638      	mov	r0, r7
 800386e:	f7ff ffa5 	bl	80037bc <_Bfree>
 8003872:	4644      	mov	r4, r8
 8003874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003878:	3501      	adds	r5, #1
 800387a:	615e      	str	r6, [r3, #20]
 800387c:	6125      	str	r5, [r4, #16]
 800387e:	4620      	mov	r0, r4
 8003880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003884:	08004b67 	.word	0x08004b67
 8003888:	08004b78 	.word	0x08004b78

0800388c <__hi0bits>:
 800388c:	0c03      	lsrs	r3, r0, #16
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	b9d3      	cbnz	r3, 80038c8 <__hi0bits+0x3c>
 8003892:	0400      	lsls	r0, r0, #16
 8003894:	2310      	movs	r3, #16
 8003896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800389a:	bf04      	itt	eq
 800389c:	0200      	lsleq	r0, r0, #8
 800389e:	3308      	addeq	r3, #8
 80038a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80038a4:	bf04      	itt	eq
 80038a6:	0100      	lsleq	r0, r0, #4
 80038a8:	3304      	addeq	r3, #4
 80038aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80038ae:	bf04      	itt	eq
 80038b0:	0080      	lsleq	r0, r0, #2
 80038b2:	3302      	addeq	r3, #2
 80038b4:	2800      	cmp	r0, #0
 80038b6:	db05      	blt.n	80038c4 <__hi0bits+0x38>
 80038b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80038bc:	f103 0301 	add.w	r3, r3, #1
 80038c0:	bf08      	it	eq
 80038c2:	2320      	moveq	r3, #32
 80038c4:	4618      	mov	r0, r3
 80038c6:	4770      	bx	lr
 80038c8:	2300      	movs	r3, #0
 80038ca:	e7e4      	b.n	8003896 <__hi0bits+0xa>

080038cc <__lo0bits>:
 80038cc:	6803      	ldr	r3, [r0, #0]
 80038ce:	f013 0207 	ands.w	r2, r3, #7
 80038d2:	4601      	mov	r1, r0
 80038d4:	d00b      	beq.n	80038ee <__lo0bits+0x22>
 80038d6:	07da      	lsls	r2, r3, #31
 80038d8:	d423      	bmi.n	8003922 <__lo0bits+0x56>
 80038da:	0798      	lsls	r0, r3, #30
 80038dc:	bf49      	itett	mi
 80038de:	085b      	lsrmi	r3, r3, #1
 80038e0:	089b      	lsrpl	r3, r3, #2
 80038e2:	2001      	movmi	r0, #1
 80038e4:	600b      	strmi	r3, [r1, #0]
 80038e6:	bf5c      	itt	pl
 80038e8:	600b      	strpl	r3, [r1, #0]
 80038ea:	2002      	movpl	r0, #2
 80038ec:	4770      	bx	lr
 80038ee:	b298      	uxth	r0, r3
 80038f0:	b9a8      	cbnz	r0, 800391e <__lo0bits+0x52>
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	2010      	movs	r0, #16
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	b90a      	cbnz	r2, 80038fe <__lo0bits+0x32>
 80038fa:	3008      	adds	r0, #8
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	071a      	lsls	r2, r3, #28
 8003900:	bf04      	itt	eq
 8003902:	091b      	lsreq	r3, r3, #4
 8003904:	3004      	addeq	r0, #4
 8003906:	079a      	lsls	r2, r3, #30
 8003908:	bf04      	itt	eq
 800390a:	089b      	lsreq	r3, r3, #2
 800390c:	3002      	addeq	r0, #2
 800390e:	07da      	lsls	r2, r3, #31
 8003910:	d403      	bmi.n	800391a <__lo0bits+0x4e>
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	f100 0001 	add.w	r0, r0, #1
 8003918:	d005      	beq.n	8003926 <__lo0bits+0x5a>
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	4770      	bx	lr
 800391e:	4610      	mov	r0, r2
 8003920:	e7e9      	b.n	80038f6 <__lo0bits+0x2a>
 8003922:	2000      	movs	r0, #0
 8003924:	4770      	bx	lr
 8003926:	2020      	movs	r0, #32
 8003928:	4770      	bx	lr
	...

0800392c <__i2b>:
 800392c:	b510      	push	{r4, lr}
 800392e:	460c      	mov	r4, r1
 8003930:	2101      	movs	r1, #1
 8003932:	f7ff ff03 	bl	800373c <_Balloc>
 8003936:	4602      	mov	r2, r0
 8003938:	b928      	cbnz	r0, 8003946 <__i2b+0x1a>
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <__i2b+0x24>)
 800393c:	4805      	ldr	r0, [pc, #20]	; (8003954 <__i2b+0x28>)
 800393e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003942:	f000 fb97 	bl	8004074 <__assert_func>
 8003946:	2301      	movs	r3, #1
 8003948:	6144      	str	r4, [r0, #20]
 800394a:	6103      	str	r3, [r0, #16]
 800394c:	bd10      	pop	{r4, pc}
 800394e:	bf00      	nop
 8003950:	08004b67 	.word	0x08004b67
 8003954:	08004b78 	.word	0x08004b78

08003958 <__multiply>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	4691      	mov	r9, r2
 800395e:	690a      	ldr	r2, [r1, #16]
 8003960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	bfb8      	it	lt
 8003968:	460b      	movlt	r3, r1
 800396a:	460c      	mov	r4, r1
 800396c:	bfbc      	itt	lt
 800396e:	464c      	movlt	r4, r9
 8003970:	4699      	movlt	r9, r3
 8003972:	6927      	ldr	r7, [r4, #16]
 8003974:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003978:	68a3      	ldr	r3, [r4, #8]
 800397a:	6861      	ldr	r1, [r4, #4]
 800397c:	eb07 060a 	add.w	r6, r7, sl
 8003980:	42b3      	cmp	r3, r6
 8003982:	b085      	sub	sp, #20
 8003984:	bfb8      	it	lt
 8003986:	3101      	addlt	r1, #1
 8003988:	f7ff fed8 	bl	800373c <_Balloc>
 800398c:	b930      	cbnz	r0, 800399c <__multiply+0x44>
 800398e:	4602      	mov	r2, r0
 8003990:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <__multiply+0x14c>)
 8003992:	4845      	ldr	r0, [pc, #276]	; (8003aa8 <__multiply+0x150>)
 8003994:	f240 115d 	movw	r1, #349	; 0x15d
 8003998:	f000 fb6c 	bl	8004074 <__assert_func>
 800399c:	f100 0514 	add.w	r5, r0, #20
 80039a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80039a4:	462b      	mov	r3, r5
 80039a6:	2200      	movs	r2, #0
 80039a8:	4543      	cmp	r3, r8
 80039aa:	d321      	bcc.n	80039f0 <__multiply+0x98>
 80039ac:	f104 0314 	add.w	r3, r4, #20
 80039b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80039b4:	f109 0314 	add.w	r3, r9, #20
 80039b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80039bc:	9202      	str	r2, [sp, #8]
 80039be:	1b3a      	subs	r2, r7, r4
 80039c0:	3a15      	subs	r2, #21
 80039c2:	f022 0203 	bic.w	r2, r2, #3
 80039c6:	3204      	adds	r2, #4
 80039c8:	f104 0115 	add.w	r1, r4, #21
 80039cc:	428f      	cmp	r7, r1
 80039ce:	bf38      	it	cc
 80039d0:	2204      	movcc	r2, #4
 80039d2:	9201      	str	r2, [sp, #4]
 80039d4:	9a02      	ldr	r2, [sp, #8]
 80039d6:	9303      	str	r3, [sp, #12]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d80c      	bhi.n	80039f6 <__multiply+0x9e>
 80039dc:	2e00      	cmp	r6, #0
 80039de:	dd03      	ble.n	80039e8 <__multiply+0x90>
 80039e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d05a      	beq.n	8003a9e <__multiply+0x146>
 80039e8:	6106      	str	r6, [r0, #16]
 80039ea:	b005      	add	sp, #20
 80039ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f0:	f843 2b04 	str.w	r2, [r3], #4
 80039f4:	e7d8      	b.n	80039a8 <__multiply+0x50>
 80039f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80039fa:	f1ba 0f00 	cmp.w	sl, #0
 80039fe:	d024      	beq.n	8003a4a <__multiply+0xf2>
 8003a00:	f104 0e14 	add.w	lr, r4, #20
 8003a04:	46a9      	mov	r9, r5
 8003a06:	f04f 0c00 	mov.w	ip, #0
 8003a0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003a0e:	f8d9 1000 	ldr.w	r1, [r9]
 8003a12:	fa1f fb82 	uxth.w	fp, r2
 8003a16:	b289      	uxth	r1, r1
 8003a18:	fb0a 110b 	mla	r1, sl, fp, r1
 8003a1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003a20:	f8d9 2000 	ldr.w	r2, [r9]
 8003a24:	4461      	add	r1, ip
 8003a26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003a2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8003a2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003a32:	b289      	uxth	r1, r1
 8003a34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003a38:	4577      	cmp	r7, lr
 8003a3a:	f849 1b04 	str.w	r1, [r9], #4
 8003a3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003a42:	d8e2      	bhi.n	8003a0a <__multiply+0xb2>
 8003a44:	9a01      	ldr	r2, [sp, #4]
 8003a46:	f845 c002 	str.w	ip, [r5, r2]
 8003a4a:	9a03      	ldr	r2, [sp, #12]
 8003a4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003a50:	3304      	adds	r3, #4
 8003a52:	f1b9 0f00 	cmp.w	r9, #0
 8003a56:	d020      	beq.n	8003a9a <__multiply+0x142>
 8003a58:	6829      	ldr	r1, [r5, #0]
 8003a5a:	f104 0c14 	add.w	ip, r4, #20
 8003a5e:	46ae      	mov	lr, r5
 8003a60:	f04f 0a00 	mov.w	sl, #0
 8003a64:	f8bc b000 	ldrh.w	fp, [ip]
 8003a68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003a6c:	fb09 220b 	mla	r2, r9, fp, r2
 8003a70:	4492      	add	sl, r2
 8003a72:	b289      	uxth	r1, r1
 8003a74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003a78:	f84e 1b04 	str.w	r1, [lr], #4
 8003a7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003a80:	f8be 1000 	ldrh.w	r1, [lr]
 8003a84:	0c12      	lsrs	r2, r2, #16
 8003a86:	fb09 1102 	mla	r1, r9, r2, r1
 8003a8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003a8e:	4567      	cmp	r7, ip
 8003a90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003a94:	d8e6      	bhi.n	8003a64 <__multiply+0x10c>
 8003a96:	9a01      	ldr	r2, [sp, #4]
 8003a98:	50a9      	str	r1, [r5, r2]
 8003a9a:	3504      	adds	r5, #4
 8003a9c:	e79a      	b.n	80039d4 <__multiply+0x7c>
 8003a9e:	3e01      	subs	r6, #1
 8003aa0:	e79c      	b.n	80039dc <__multiply+0x84>
 8003aa2:	bf00      	nop
 8003aa4:	08004b67 	.word	0x08004b67
 8003aa8:	08004b78 	.word	0x08004b78

08003aac <__pow5mult>:
 8003aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab0:	4615      	mov	r5, r2
 8003ab2:	f012 0203 	ands.w	r2, r2, #3
 8003ab6:	4606      	mov	r6, r0
 8003ab8:	460f      	mov	r7, r1
 8003aba:	d007      	beq.n	8003acc <__pow5mult+0x20>
 8003abc:	4c25      	ldr	r4, [pc, #148]	; (8003b54 <__pow5mult+0xa8>)
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ac6:	f7ff fe9b 	bl	8003800 <__multadd>
 8003aca:	4607      	mov	r7, r0
 8003acc:	10ad      	asrs	r5, r5, #2
 8003ace:	d03d      	beq.n	8003b4c <__pow5mult+0xa0>
 8003ad0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003ad2:	b97c      	cbnz	r4, 8003af4 <__pow5mult+0x48>
 8003ad4:	2010      	movs	r0, #16
 8003ad6:	f7ff fe1b 	bl	8003710 <malloc>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6270      	str	r0, [r6, #36]	; 0x24
 8003ade:	b928      	cbnz	r0, 8003aec <__pow5mult+0x40>
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <__pow5mult+0xac>)
 8003ae2:	481e      	ldr	r0, [pc, #120]	; (8003b5c <__pow5mult+0xb0>)
 8003ae4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003ae8:	f000 fac4 	bl	8004074 <__assert_func>
 8003aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003af0:	6004      	str	r4, [r0, #0]
 8003af2:	60c4      	str	r4, [r0, #12]
 8003af4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003afc:	b94c      	cbnz	r4, 8003b12 <__pow5mult+0x66>
 8003afe:	f240 2171 	movw	r1, #625	; 0x271
 8003b02:	4630      	mov	r0, r6
 8003b04:	f7ff ff12 	bl	800392c <__i2b>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8003b0e:	4604      	mov	r4, r0
 8003b10:	6003      	str	r3, [r0, #0]
 8003b12:	f04f 0900 	mov.w	r9, #0
 8003b16:	07eb      	lsls	r3, r5, #31
 8003b18:	d50a      	bpl.n	8003b30 <__pow5mult+0x84>
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f7ff ff1a 	bl	8003958 <__multiply>
 8003b24:	4639      	mov	r1, r7
 8003b26:	4680      	mov	r8, r0
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f7ff fe47 	bl	80037bc <_Bfree>
 8003b2e:	4647      	mov	r7, r8
 8003b30:	106d      	asrs	r5, r5, #1
 8003b32:	d00b      	beq.n	8003b4c <__pow5mult+0xa0>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	b938      	cbnz	r0, 8003b48 <__pow5mult+0x9c>
 8003b38:	4622      	mov	r2, r4
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f7ff ff0b 	bl	8003958 <__multiply>
 8003b42:	6020      	str	r0, [r4, #0]
 8003b44:	f8c0 9000 	str.w	r9, [r0]
 8003b48:	4604      	mov	r4, r0
 8003b4a:	e7e4      	b.n	8003b16 <__pow5mult+0x6a>
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b52:	bf00      	nop
 8003b54:	08004cc8 	.word	0x08004cc8
 8003b58:	08004af5 	.word	0x08004af5
 8003b5c:	08004b78 	.word	0x08004b78

08003b60 <__lshift>:
 8003b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	460c      	mov	r4, r1
 8003b66:	6849      	ldr	r1, [r1, #4]
 8003b68:	6923      	ldr	r3, [r4, #16]
 8003b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	4607      	mov	r7, r0
 8003b72:	4691      	mov	r9, r2
 8003b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003b78:	f108 0601 	add.w	r6, r8, #1
 8003b7c:	42b3      	cmp	r3, r6
 8003b7e:	db0b      	blt.n	8003b98 <__lshift+0x38>
 8003b80:	4638      	mov	r0, r7
 8003b82:	f7ff fddb 	bl	800373c <_Balloc>
 8003b86:	4605      	mov	r5, r0
 8003b88:	b948      	cbnz	r0, 8003b9e <__lshift+0x3e>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <__lshift+0xd8>)
 8003b8e:	482b      	ldr	r0, [pc, #172]	; (8003c3c <__lshift+0xdc>)
 8003b90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003b94:	f000 fa6e 	bl	8004074 <__assert_func>
 8003b98:	3101      	adds	r1, #1
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	e7ee      	b.n	8003b7c <__lshift+0x1c>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f100 0114 	add.w	r1, r0, #20
 8003ba4:	f100 0210 	add.w	r2, r0, #16
 8003ba8:	4618      	mov	r0, r3
 8003baa:	4553      	cmp	r3, sl
 8003bac:	db37      	blt.n	8003c1e <__lshift+0xbe>
 8003bae:	6920      	ldr	r0, [r4, #16]
 8003bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003bb4:	f104 0314 	add.w	r3, r4, #20
 8003bb8:	f019 091f 	ands.w	r9, r9, #31
 8003bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003bc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003bc4:	d02f      	beq.n	8003c26 <__lshift+0xc6>
 8003bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8003bca:	468a      	mov	sl, r1
 8003bcc:	f04f 0c00 	mov.w	ip, #0
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	fa02 f209 	lsl.w	r2, r2, r9
 8003bd6:	ea42 020c 	orr.w	r2, r2, ip
 8003bda:	f84a 2b04 	str.w	r2, [sl], #4
 8003bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be2:	4298      	cmp	r0, r3
 8003be4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003be8:	d8f2      	bhi.n	8003bd0 <__lshift+0x70>
 8003bea:	1b03      	subs	r3, r0, r4
 8003bec:	3b15      	subs	r3, #21
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	f104 0215 	add.w	r2, r4, #21
 8003bf8:	4290      	cmp	r0, r2
 8003bfa:	bf38      	it	cc
 8003bfc:	2304      	movcc	r3, #4
 8003bfe:	f841 c003 	str.w	ip, [r1, r3]
 8003c02:	f1bc 0f00 	cmp.w	ip, #0
 8003c06:	d001      	beq.n	8003c0c <__lshift+0xac>
 8003c08:	f108 0602 	add.w	r6, r8, #2
 8003c0c:	3e01      	subs	r6, #1
 8003c0e:	4638      	mov	r0, r7
 8003c10:	612e      	str	r6, [r5, #16]
 8003c12:	4621      	mov	r1, r4
 8003c14:	f7ff fdd2 	bl	80037bc <_Bfree>
 8003c18:	4628      	mov	r0, r5
 8003c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8003c22:	3301      	adds	r3, #1
 8003c24:	e7c1      	b.n	8003baa <__lshift+0x4a>
 8003c26:	3904      	subs	r1, #4
 8003c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8003c30:	4298      	cmp	r0, r3
 8003c32:	d8f9      	bhi.n	8003c28 <__lshift+0xc8>
 8003c34:	e7ea      	b.n	8003c0c <__lshift+0xac>
 8003c36:	bf00      	nop
 8003c38:	08004b67 	.word	0x08004b67
 8003c3c:	08004b78 	.word	0x08004b78

08003c40 <__mcmp>:
 8003c40:	b530      	push	{r4, r5, lr}
 8003c42:	6902      	ldr	r2, [r0, #16]
 8003c44:	690c      	ldr	r4, [r1, #16]
 8003c46:	1b12      	subs	r2, r2, r4
 8003c48:	d10e      	bne.n	8003c68 <__mcmp+0x28>
 8003c4a:	f100 0314 	add.w	r3, r0, #20
 8003c4e:	3114      	adds	r1, #20
 8003c50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003c54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003c58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003c5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003c60:	42a5      	cmp	r5, r4
 8003c62:	d003      	beq.n	8003c6c <__mcmp+0x2c>
 8003c64:	d305      	bcc.n	8003c72 <__mcmp+0x32>
 8003c66:	2201      	movs	r2, #1
 8003c68:	4610      	mov	r0, r2
 8003c6a:	bd30      	pop	{r4, r5, pc}
 8003c6c:	4283      	cmp	r3, r0
 8003c6e:	d3f3      	bcc.n	8003c58 <__mcmp+0x18>
 8003c70:	e7fa      	b.n	8003c68 <__mcmp+0x28>
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c76:	e7f7      	b.n	8003c68 <__mcmp+0x28>

08003c78 <__mdiff>:
 8003c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	4606      	mov	r6, r0
 8003c80:	4611      	mov	r1, r2
 8003c82:	4620      	mov	r0, r4
 8003c84:	4690      	mov	r8, r2
 8003c86:	f7ff ffdb 	bl	8003c40 <__mcmp>
 8003c8a:	1e05      	subs	r5, r0, #0
 8003c8c:	d110      	bne.n	8003cb0 <__mdiff+0x38>
 8003c8e:	4629      	mov	r1, r5
 8003c90:	4630      	mov	r0, r6
 8003c92:	f7ff fd53 	bl	800373c <_Balloc>
 8003c96:	b930      	cbnz	r0, 8003ca6 <__mdiff+0x2e>
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <__mdiff+0x10c>)
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f240 2132 	movw	r1, #562	; 0x232
 8003ca0:	4839      	ldr	r0, [pc, #228]	; (8003d88 <__mdiff+0x110>)
 8003ca2:	f000 f9e7 	bl	8004074 <__assert_func>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb0:	bfa4      	itt	ge
 8003cb2:	4643      	movge	r3, r8
 8003cb4:	46a0      	movge	r8, r4
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003cbc:	bfa6      	itte	ge
 8003cbe:	461c      	movge	r4, r3
 8003cc0:	2500      	movge	r5, #0
 8003cc2:	2501      	movlt	r5, #1
 8003cc4:	f7ff fd3a 	bl	800373c <_Balloc>
 8003cc8:	b920      	cbnz	r0, 8003cd4 <__mdiff+0x5c>
 8003cca:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <__mdiff+0x10c>)
 8003ccc:	4602      	mov	r2, r0
 8003cce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003cd2:	e7e5      	b.n	8003ca0 <__mdiff+0x28>
 8003cd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003cd8:	6926      	ldr	r6, [r4, #16]
 8003cda:	60c5      	str	r5, [r0, #12]
 8003cdc:	f104 0914 	add.w	r9, r4, #20
 8003ce0:	f108 0514 	add.w	r5, r8, #20
 8003ce4:	f100 0e14 	add.w	lr, r0, #20
 8003ce8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003cec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003cf0:	f108 0210 	add.w	r2, r8, #16
 8003cf4:	46f2      	mov	sl, lr
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8003cfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003d00:	fa1f f883 	uxth.w	r8, r3
 8003d04:	fa11 f18b 	uxtah	r1, r1, fp
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	eba1 0808 	sub.w	r8, r1, r8
 8003d0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003d12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003d16:	fa1f f888 	uxth.w	r8, r8
 8003d1a:	1419      	asrs	r1, r3, #16
 8003d1c:	454e      	cmp	r6, r9
 8003d1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003d22:	f84a 3b04 	str.w	r3, [sl], #4
 8003d26:	d8e7      	bhi.n	8003cf8 <__mdiff+0x80>
 8003d28:	1b33      	subs	r3, r6, r4
 8003d2a:	3b15      	subs	r3, #21
 8003d2c:	f023 0303 	bic.w	r3, r3, #3
 8003d30:	3304      	adds	r3, #4
 8003d32:	3415      	adds	r4, #21
 8003d34:	42a6      	cmp	r6, r4
 8003d36:	bf38      	it	cc
 8003d38:	2304      	movcc	r3, #4
 8003d3a:	441d      	add	r5, r3
 8003d3c:	4473      	add	r3, lr
 8003d3e:	469e      	mov	lr, r3
 8003d40:	462e      	mov	r6, r5
 8003d42:	4566      	cmp	r6, ip
 8003d44:	d30e      	bcc.n	8003d64 <__mdiff+0xec>
 8003d46:	f10c 0203 	add.w	r2, ip, #3
 8003d4a:	1b52      	subs	r2, r2, r5
 8003d4c:	f022 0203 	bic.w	r2, r2, #3
 8003d50:	3d03      	subs	r5, #3
 8003d52:	45ac      	cmp	ip, r5
 8003d54:	bf38      	it	cc
 8003d56:	2200      	movcc	r2, #0
 8003d58:	441a      	add	r2, r3
 8003d5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003d5e:	b17b      	cbz	r3, 8003d80 <__mdiff+0x108>
 8003d60:	6107      	str	r7, [r0, #16]
 8003d62:	e7a3      	b.n	8003cac <__mdiff+0x34>
 8003d64:	f856 8b04 	ldr.w	r8, [r6], #4
 8003d68:	fa11 f288 	uxtah	r2, r1, r8
 8003d6c:	1414      	asrs	r4, r2, #16
 8003d6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003d72:	b292      	uxth	r2, r2
 8003d74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003d78:	f84e 2b04 	str.w	r2, [lr], #4
 8003d7c:	1421      	asrs	r1, r4, #16
 8003d7e:	e7e0      	b.n	8003d42 <__mdiff+0xca>
 8003d80:	3f01      	subs	r7, #1
 8003d82:	e7ea      	b.n	8003d5a <__mdiff+0xe2>
 8003d84:	08004b67 	.word	0x08004b67
 8003d88:	08004b78 	.word	0x08004b78

08003d8c <__d2b>:
 8003d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d90:	4689      	mov	r9, r1
 8003d92:	2101      	movs	r1, #1
 8003d94:	ec57 6b10 	vmov	r6, r7, d0
 8003d98:	4690      	mov	r8, r2
 8003d9a:	f7ff fccf 	bl	800373c <_Balloc>
 8003d9e:	4604      	mov	r4, r0
 8003da0:	b930      	cbnz	r0, 8003db0 <__d2b+0x24>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <__d2b+0xb0>)
 8003da6:	4826      	ldr	r0, [pc, #152]	; (8003e40 <__d2b+0xb4>)
 8003da8:	f240 310a 	movw	r1, #778	; 0x30a
 8003dac:	f000 f962 	bl	8004074 <__assert_func>
 8003db0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003db4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003db8:	bb35      	cbnz	r5, 8003e08 <__d2b+0x7c>
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	d028      	beq.n	8003e12 <__d2b+0x86>
 8003dc0:	4668      	mov	r0, sp
 8003dc2:	9600      	str	r6, [sp, #0]
 8003dc4:	f7ff fd82 	bl	80038cc <__lo0bits>
 8003dc8:	9900      	ldr	r1, [sp, #0]
 8003dca:	b300      	cbz	r0, 8003e0e <__d2b+0x82>
 8003dcc:	9a01      	ldr	r2, [sp, #4]
 8003dce:	f1c0 0320 	rsb	r3, r0, #32
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	40c2      	lsrs	r2, r0
 8003dda:	6163      	str	r3, [r4, #20]
 8003ddc:	9201      	str	r2, [sp, #4]
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	61a3      	str	r3, [r4, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bf14      	ite	ne
 8003de6:	2202      	movne	r2, #2
 8003de8:	2201      	moveq	r2, #1
 8003dea:	6122      	str	r2, [r4, #16]
 8003dec:	b1d5      	cbz	r5, 8003e24 <__d2b+0x98>
 8003dee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003df2:	4405      	add	r5, r0
 8003df4:	f8c9 5000 	str.w	r5, [r9]
 8003df8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003dfc:	f8c8 0000 	str.w	r0, [r8]
 8003e00:	4620      	mov	r0, r4
 8003e02:	b003      	add	sp, #12
 8003e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0c:	e7d5      	b.n	8003dba <__d2b+0x2e>
 8003e0e:	6161      	str	r1, [r4, #20]
 8003e10:	e7e5      	b.n	8003dde <__d2b+0x52>
 8003e12:	a801      	add	r0, sp, #4
 8003e14:	f7ff fd5a 	bl	80038cc <__lo0bits>
 8003e18:	9b01      	ldr	r3, [sp, #4]
 8003e1a:	6163      	str	r3, [r4, #20]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	6122      	str	r2, [r4, #16]
 8003e20:	3020      	adds	r0, #32
 8003e22:	e7e3      	b.n	8003dec <__d2b+0x60>
 8003e24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003e28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003e2c:	f8c9 0000 	str.w	r0, [r9]
 8003e30:	6918      	ldr	r0, [r3, #16]
 8003e32:	f7ff fd2b 	bl	800388c <__hi0bits>
 8003e36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003e3a:	e7df      	b.n	8003dfc <__d2b+0x70>
 8003e3c:	08004b67 	.word	0x08004b67
 8003e40:	08004b78 	.word	0x08004b78

08003e44 <_calloc_r>:
 8003e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e46:	fba1 2402 	umull	r2, r4, r1, r2
 8003e4a:	b94c      	cbnz	r4, 8003e60 <_calloc_r+0x1c>
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	9201      	str	r2, [sp, #4]
 8003e50:	f000 f87a 	bl	8003f48 <_malloc_r>
 8003e54:	9a01      	ldr	r2, [sp, #4]
 8003e56:	4605      	mov	r5, r0
 8003e58:	b930      	cbnz	r0, 8003e68 <_calloc_r+0x24>
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	b003      	add	sp, #12
 8003e5e:	bd30      	pop	{r4, r5, pc}
 8003e60:	220c      	movs	r2, #12
 8003e62:	6002      	str	r2, [r0, #0]
 8003e64:	2500      	movs	r5, #0
 8003e66:	e7f8      	b.n	8003e5a <_calloc_r+0x16>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	f7fe f8e9 	bl	8002040 <memset>
 8003e6e:	e7f4      	b.n	8003e5a <_calloc_r+0x16>

08003e70 <_free_r>:
 8003e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e72:	2900      	cmp	r1, #0
 8003e74:	d044      	beq.n	8003f00 <_free_r+0x90>
 8003e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e7a:	9001      	str	r0, [sp, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e82:	bfb8      	it	lt
 8003e84:	18e4      	addlt	r4, r4, r3
 8003e86:	f000 faf1 	bl	800446c <__malloc_lock>
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <_free_r+0x94>)
 8003e8c:	9801      	ldr	r0, [sp, #4]
 8003e8e:	6813      	ldr	r3, [r2, #0]
 8003e90:	b933      	cbnz	r3, 8003ea0 <_free_r+0x30>
 8003e92:	6063      	str	r3, [r4, #4]
 8003e94:	6014      	str	r4, [r2, #0]
 8003e96:	b003      	add	sp, #12
 8003e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e9c:	f000 baec 	b.w	8004478 <__malloc_unlock>
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d908      	bls.n	8003eb6 <_free_r+0x46>
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	1961      	adds	r1, r4, r5
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	bf01      	itttt	eq
 8003eac:	6819      	ldreq	r1, [r3, #0]
 8003eae:	685b      	ldreq	r3, [r3, #4]
 8003eb0:	1949      	addeq	r1, r1, r5
 8003eb2:	6021      	streq	r1, [r4, #0]
 8003eb4:	e7ed      	b.n	8003e92 <_free_r+0x22>
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b10b      	cbz	r3, 8003ec0 <_free_r+0x50>
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	d9fa      	bls.n	8003eb6 <_free_r+0x46>
 8003ec0:	6811      	ldr	r1, [r2, #0]
 8003ec2:	1855      	adds	r5, r2, r1
 8003ec4:	42a5      	cmp	r5, r4
 8003ec6:	d10b      	bne.n	8003ee0 <_free_r+0x70>
 8003ec8:	6824      	ldr	r4, [r4, #0]
 8003eca:	4421      	add	r1, r4
 8003ecc:	1854      	adds	r4, r2, r1
 8003ece:	42a3      	cmp	r3, r4
 8003ed0:	6011      	str	r1, [r2, #0]
 8003ed2:	d1e0      	bne.n	8003e96 <_free_r+0x26>
 8003ed4:	681c      	ldr	r4, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	6053      	str	r3, [r2, #4]
 8003eda:	4421      	add	r1, r4
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	e7da      	b.n	8003e96 <_free_r+0x26>
 8003ee0:	d902      	bls.n	8003ee8 <_free_r+0x78>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	6003      	str	r3, [r0, #0]
 8003ee6:	e7d6      	b.n	8003e96 <_free_r+0x26>
 8003ee8:	6825      	ldr	r5, [r4, #0]
 8003eea:	1961      	adds	r1, r4, r5
 8003eec:	428b      	cmp	r3, r1
 8003eee:	bf04      	itt	eq
 8003ef0:	6819      	ldreq	r1, [r3, #0]
 8003ef2:	685b      	ldreq	r3, [r3, #4]
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	bf04      	itt	eq
 8003ef8:	1949      	addeq	r1, r1, r5
 8003efa:	6021      	streq	r1, [r4, #0]
 8003efc:	6054      	str	r4, [r2, #4]
 8003efe:	e7ca      	b.n	8003e96 <_free_r+0x26>
 8003f00:	b003      	add	sp, #12
 8003f02:	bd30      	pop	{r4, r5, pc}
 8003f04:	20000234 	.word	0x20000234

08003f08 <sbrk_aligned>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4e0e      	ldr	r6, [pc, #56]	; (8003f44 <sbrk_aligned+0x3c>)
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	6831      	ldr	r1, [r6, #0]
 8003f10:	4605      	mov	r5, r0
 8003f12:	b911      	cbnz	r1, 8003f1a <sbrk_aligned+0x12>
 8003f14:	f000 f89e 	bl	8004054 <_sbrk_r>
 8003f18:	6030      	str	r0, [r6, #0]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 f899 	bl	8004054 <_sbrk_r>
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	d00a      	beq.n	8003f3c <sbrk_aligned+0x34>
 8003f26:	1cc4      	adds	r4, r0, #3
 8003f28:	f024 0403 	bic.w	r4, r4, #3
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d007      	beq.n	8003f40 <sbrk_aligned+0x38>
 8003f30:	1a21      	subs	r1, r4, r0
 8003f32:	4628      	mov	r0, r5
 8003f34:	f000 f88e 	bl	8004054 <_sbrk_r>
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d101      	bne.n	8003f40 <sbrk_aligned+0x38>
 8003f3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f40:	4620      	mov	r0, r4
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	20000238 	.word	0x20000238

08003f48 <_malloc_r>:
 8003f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4c:	1ccd      	adds	r5, r1, #3
 8003f4e:	f025 0503 	bic.w	r5, r5, #3
 8003f52:	3508      	adds	r5, #8
 8003f54:	2d0c      	cmp	r5, #12
 8003f56:	bf38      	it	cc
 8003f58:	250c      	movcc	r5, #12
 8003f5a:	2d00      	cmp	r5, #0
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	db01      	blt.n	8003f64 <_malloc_r+0x1c>
 8003f60:	42a9      	cmp	r1, r5
 8003f62:	d905      	bls.n	8003f70 <_malloc_r+0x28>
 8003f64:	230c      	movs	r3, #12
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	2600      	movs	r6, #0
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f70:	4e2e      	ldr	r6, [pc, #184]	; (800402c <_malloc_r+0xe4>)
 8003f72:	f000 fa7b 	bl	800446c <__malloc_lock>
 8003f76:	6833      	ldr	r3, [r6, #0]
 8003f78:	461c      	mov	r4, r3
 8003f7a:	bb34      	cbnz	r4, 8003fca <_malloc_r+0x82>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	4638      	mov	r0, r7
 8003f80:	f7ff ffc2 	bl	8003f08 <sbrk_aligned>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	4604      	mov	r4, r0
 8003f88:	d14d      	bne.n	8004026 <_malloc_r+0xde>
 8003f8a:	6834      	ldr	r4, [r6, #0]
 8003f8c:	4626      	mov	r6, r4
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	d140      	bne.n	8004014 <_malloc_r+0xcc>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4631      	mov	r1, r6
 8003f96:	4638      	mov	r0, r7
 8003f98:	eb04 0803 	add.w	r8, r4, r3
 8003f9c:	f000 f85a 	bl	8004054 <_sbrk_r>
 8003fa0:	4580      	cmp	r8, r0
 8003fa2:	d13a      	bne.n	800401a <_malloc_r+0xd2>
 8003fa4:	6821      	ldr	r1, [r4, #0]
 8003fa6:	3503      	adds	r5, #3
 8003fa8:	1a6d      	subs	r5, r5, r1
 8003faa:	f025 0503 	bic.w	r5, r5, #3
 8003fae:	3508      	adds	r5, #8
 8003fb0:	2d0c      	cmp	r5, #12
 8003fb2:	bf38      	it	cc
 8003fb4:	250c      	movcc	r5, #12
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f7ff ffa5 	bl	8003f08 <sbrk_aligned>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d02b      	beq.n	800401a <_malloc_r+0xd2>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	442b      	add	r3, r5
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	e00e      	b.n	8003fe8 <_malloc_r+0xa0>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	1b52      	subs	r2, r2, r5
 8003fce:	d41e      	bmi.n	800400e <_malloc_r+0xc6>
 8003fd0:	2a0b      	cmp	r2, #11
 8003fd2:	d916      	bls.n	8004002 <_malloc_r+0xba>
 8003fd4:	1961      	adds	r1, r4, r5
 8003fd6:	42a3      	cmp	r3, r4
 8003fd8:	6025      	str	r5, [r4, #0]
 8003fda:	bf18      	it	ne
 8003fdc:	6059      	strne	r1, [r3, #4]
 8003fde:	6863      	ldr	r3, [r4, #4]
 8003fe0:	bf08      	it	eq
 8003fe2:	6031      	streq	r1, [r6, #0]
 8003fe4:	5162      	str	r2, [r4, r5]
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f104 060b 	add.w	r6, r4, #11
 8003fee:	f000 fa43 	bl	8004478 <__malloc_unlock>
 8003ff2:	f026 0607 	bic.w	r6, r6, #7
 8003ff6:	1d23      	adds	r3, r4, #4
 8003ff8:	1af2      	subs	r2, r6, r3
 8003ffa:	d0b6      	beq.n	8003f6a <_malloc_r+0x22>
 8003ffc:	1b9b      	subs	r3, r3, r6
 8003ffe:	50a3      	str	r3, [r4, r2]
 8004000:	e7b3      	b.n	8003f6a <_malloc_r+0x22>
 8004002:	6862      	ldr	r2, [r4, #4]
 8004004:	42a3      	cmp	r3, r4
 8004006:	bf0c      	ite	eq
 8004008:	6032      	streq	r2, [r6, #0]
 800400a:	605a      	strne	r2, [r3, #4]
 800400c:	e7ec      	b.n	8003fe8 <_malloc_r+0xa0>
 800400e:	4623      	mov	r3, r4
 8004010:	6864      	ldr	r4, [r4, #4]
 8004012:	e7b2      	b.n	8003f7a <_malloc_r+0x32>
 8004014:	4634      	mov	r4, r6
 8004016:	6876      	ldr	r6, [r6, #4]
 8004018:	e7b9      	b.n	8003f8e <_malloc_r+0x46>
 800401a:	230c      	movs	r3, #12
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4638      	mov	r0, r7
 8004020:	f000 fa2a 	bl	8004478 <__malloc_unlock>
 8004024:	e7a1      	b.n	8003f6a <_malloc_r+0x22>
 8004026:	6025      	str	r5, [r4, #0]
 8004028:	e7de      	b.n	8003fe8 <_malloc_r+0xa0>
 800402a:	bf00      	nop
 800402c:	20000234 	.word	0x20000234

08004030 <_read_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d07      	ldr	r5, [pc, #28]	; (8004050 <_read_r+0x20>)
 8004034:	4604      	mov	r4, r0
 8004036:	4608      	mov	r0, r1
 8004038:	4611      	mov	r1, r2
 800403a:	2200      	movs	r2, #0
 800403c:	602a      	str	r2, [r5, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f7fc febe 	bl	8000dc0 <_read>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_read_r+0x1e>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_read_r+0x1e>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	2000023c 	.word	0x2000023c

08004054 <_sbrk_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4d06      	ldr	r5, [pc, #24]	; (8004070 <_sbrk_r+0x1c>)
 8004058:	2300      	movs	r3, #0
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	f000 fd0a 	bl	8004a78 <_sbrk>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_sbrk_r+0x1a>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_sbrk_r+0x1a>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	2000023c 	.word	0x2000023c

08004074 <__assert_func>:
 8004074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004076:	4614      	mov	r4, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <__assert_func+0x2c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4605      	mov	r5, r0
 8004080:	68d8      	ldr	r0, [r3, #12]
 8004082:	b14c      	cbz	r4, 8004098 <__assert_func+0x24>
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <__assert_func+0x30>)
 8004086:	9100      	str	r1, [sp, #0]
 8004088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800408c:	4906      	ldr	r1, [pc, #24]	; (80040a8 <__assert_func+0x34>)
 800408e:	462b      	mov	r3, r5
 8004090:	f000 f9a6 	bl	80043e0 <fiprintf>
 8004094:	f000 fc1e 	bl	80048d4 <abort>
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <__assert_func+0x38>)
 800409a:	461c      	mov	r4, r3
 800409c:	e7f3      	b.n	8004086 <__assert_func+0x12>
 800409e:	bf00      	nop
 80040a0:	20000000 	.word	0x20000000
 80040a4:	08004cd4 	.word	0x08004cd4
 80040a8:	08004ce1 	.word	0x08004ce1
 80040ac:	08004d0f 	.word	0x08004d0f

080040b0 <__sflush_r>:
 80040b0:	898a      	ldrh	r2, [r1, #12]
 80040b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b6:	4605      	mov	r5, r0
 80040b8:	0710      	lsls	r0, r2, #28
 80040ba:	460c      	mov	r4, r1
 80040bc:	d458      	bmi.n	8004170 <__sflush_r+0xc0>
 80040be:	684b      	ldr	r3, [r1, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dc05      	bgt.n	80040d0 <__sflush_r+0x20>
 80040c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	dc02      	bgt.n	80040d0 <__sflush_r+0x20>
 80040ca:	2000      	movs	r0, #0
 80040cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	d0f9      	beq.n	80040ca <__sflush_r+0x1a>
 80040d6:	2300      	movs	r3, #0
 80040d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040dc:	682f      	ldr	r7, [r5, #0]
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	d032      	beq.n	8004148 <__sflush_r+0x98>
 80040e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	075a      	lsls	r2, r3, #29
 80040e8:	d505      	bpl.n	80040f6 <__sflush_r+0x46>
 80040ea:	6863      	ldr	r3, [r4, #4]
 80040ec:	1ac0      	subs	r0, r0, r3
 80040ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040f0:	b10b      	cbz	r3, 80040f6 <__sflush_r+0x46>
 80040f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f4:	1ac0      	subs	r0, r0, r3
 80040f6:	2300      	movs	r3, #0
 80040f8:	4602      	mov	r2, r0
 80040fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040fc:	6a21      	ldr	r1, [r4, #32]
 80040fe:	4628      	mov	r0, r5
 8004100:	47b0      	blx	r6
 8004102:	1c43      	adds	r3, r0, #1
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	d106      	bne.n	8004116 <__sflush_r+0x66>
 8004108:	6829      	ldr	r1, [r5, #0]
 800410a:	291d      	cmp	r1, #29
 800410c:	d82c      	bhi.n	8004168 <__sflush_r+0xb8>
 800410e:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <__sflush_r+0x108>)
 8004110:	40ca      	lsrs	r2, r1
 8004112:	07d6      	lsls	r6, r2, #31
 8004114:	d528      	bpl.n	8004168 <__sflush_r+0xb8>
 8004116:	2200      	movs	r2, #0
 8004118:	6062      	str	r2, [r4, #4]
 800411a:	04d9      	lsls	r1, r3, #19
 800411c:	6922      	ldr	r2, [r4, #16]
 800411e:	6022      	str	r2, [r4, #0]
 8004120:	d504      	bpl.n	800412c <__sflush_r+0x7c>
 8004122:	1c42      	adds	r2, r0, #1
 8004124:	d101      	bne.n	800412a <__sflush_r+0x7a>
 8004126:	682b      	ldr	r3, [r5, #0]
 8004128:	b903      	cbnz	r3, 800412c <__sflush_r+0x7c>
 800412a:	6560      	str	r0, [r4, #84]	; 0x54
 800412c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800412e:	602f      	str	r7, [r5, #0]
 8004130:	2900      	cmp	r1, #0
 8004132:	d0ca      	beq.n	80040ca <__sflush_r+0x1a>
 8004134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004138:	4299      	cmp	r1, r3
 800413a:	d002      	beq.n	8004142 <__sflush_r+0x92>
 800413c:	4628      	mov	r0, r5
 800413e:	f7ff fe97 	bl	8003e70 <_free_r>
 8004142:	2000      	movs	r0, #0
 8004144:	6360      	str	r0, [r4, #52]	; 0x34
 8004146:	e7c1      	b.n	80040cc <__sflush_r+0x1c>
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	2301      	movs	r3, #1
 800414c:	4628      	mov	r0, r5
 800414e:	47b0      	blx	r6
 8004150:	1c41      	adds	r1, r0, #1
 8004152:	d1c7      	bne.n	80040e4 <__sflush_r+0x34>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0c4      	beq.n	80040e4 <__sflush_r+0x34>
 800415a:	2b1d      	cmp	r3, #29
 800415c:	d001      	beq.n	8004162 <__sflush_r+0xb2>
 800415e:	2b16      	cmp	r3, #22
 8004160:	d101      	bne.n	8004166 <__sflush_r+0xb6>
 8004162:	602f      	str	r7, [r5, #0]
 8004164:	e7b1      	b.n	80040ca <__sflush_r+0x1a>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416c:	81a3      	strh	r3, [r4, #12]
 800416e:	e7ad      	b.n	80040cc <__sflush_r+0x1c>
 8004170:	690f      	ldr	r7, [r1, #16]
 8004172:	2f00      	cmp	r7, #0
 8004174:	d0a9      	beq.n	80040ca <__sflush_r+0x1a>
 8004176:	0793      	lsls	r3, r2, #30
 8004178:	680e      	ldr	r6, [r1, #0]
 800417a:	bf08      	it	eq
 800417c:	694b      	ldreq	r3, [r1, #20]
 800417e:	600f      	str	r7, [r1, #0]
 8004180:	bf18      	it	ne
 8004182:	2300      	movne	r3, #0
 8004184:	eba6 0807 	sub.w	r8, r6, r7
 8004188:	608b      	str	r3, [r1, #8]
 800418a:	f1b8 0f00 	cmp.w	r8, #0
 800418e:	dd9c      	ble.n	80040ca <__sflush_r+0x1a>
 8004190:	6a21      	ldr	r1, [r4, #32]
 8004192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004194:	4643      	mov	r3, r8
 8004196:	463a      	mov	r2, r7
 8004198:	4628      	mov	r0, r5
 800419a:	47b0      	blx	r6
 800419c:	2800      	cmp	r0, #0
 800419e:	dc06      	bgt.n	80041ae <__sflush_r+0xfe>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ac:	e78e      	b.n	80040cc <__sflush_r+0x1c>
 80041ae:	4407      	add	r7, r0
 80041b0:	eba8 0800 	sub.w	r8, r8, r0
 80041b4:	e7e9      	b.n	800418a <__sflush_r+0xda>
 80041b6:	bf00      	nop
 80041b8:	20400001 	.word	0x20400001

080041bc <_fflush_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	4605      	mov	r5, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	b913      	cbnz	r3, 80041cc <_fflush_r+0x10>
 80041c6:	2500      	movs	r5, #0
 80041c8:	4628      	mov	r0, r5
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	b118      	cbz	r0, 80041d6 <_fflush_r+0x1a>
 80041ce:	6983      	ldr	r3, [r0, #24]
 80041d0:	b90b      	cbnz	r3, 80041d6 <_fflush_r+0x1a>
 80041d2:	f000 f887 	bl	80042e4 <__sinit>
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <_fflush_r+0x6c>)
 80041d8:	429c      	cmp	r4, r3
 80041da:	d11b      	bne.n	8004214 <_fflush_r+0x58>
 80041dc:	686c      	ldr	r4, [r5, #4]
 80041de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <_fflush_r+0xa>
 80041e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041e8:	07d0      	lsls	r0, r2, #31
 80041ea:	d404      	bmi.n	80041f6 <_fflush_r+0x3a>
 80041ec:	0599      	lsls	r1, r3, #22
 80041ee:	d402      	bmi.n	80041f6 <_fflush_r+0x3a>
 80041f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041f2:	f000 f927 	bl	8004444 <__retarget_lock_acquire_recursive>
 80041f6:	4628      	mov	r0, r5
 80041f8:	4621      	mov	r1, r4
 80041fa:	f7ff ff59 	bl	80040b0 <__sflush_r>
 80041fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004200:	07da      	lsls	r2, r3, #31
 8004202:	4605      	mov	r5, r0
 8004204:	d4e0      	bmi.n	80041c8 <_fflush_r+0xc>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	059b      	lsls	r3, r3, #22
 800420a:	d4dd      	bmi.n	80041c8 <_fflush_r+0xc>
 800420c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800420e:	f000 f91a 	bl	8004446 <__retarget_lock_release_recursive>
 8004212:	e7d9      	b.n	80041c8 <_fflush_r+0xc>
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <_fflush_r+0x70>)
 8004216:	429c      	cmp	r4, r3
 8004218:	d101      	bne.n	800421e <_fflush_r+0x62>
 800421a:	68ac      	ldr	r4, [r5, #8]
 800421c:	e7df      	b.n	80041de <_fflush_r+0x22>
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <_fflush_r+0x74>)
 8004220:	429c      	cmp	r4, r3
 8004222:	bf08      	it	eq
 8004224:	68ec      	ldreq	r4, [r5, #12]
 8004226:	e7da      	b.n	80041de <_fflush_r+0x22>
 8004228:	08004e34 	.word	0x08004e34
 800422c:	08004e54 	.word	0x08004e54
 8004230:	08004e14 	.word	0x08004e14

08004234 <std>:
 8004234:	2300      	movs	r3, #0
 8004236:	b510      	push	{r4, lr}
 8004238:	4604      	mov	r4, r0
 800423a:	e9c0 3300 	strd	r3, r3, [r0]
 800423e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004242:	6083      	str	r3, [r0, #8]
 8004244:	8181      	strh	r1, [r0, #12]
 8004246:	6643      	str	r3, [r0, #100]	; 0x64
 8004248:	81c2      	strh	r2, [r0, #14]
 800424a:	6183      	str	r3, [r0, #24]
 800424c:	4619      	mov	r1, r3
 800424e:	2208      	movs	r2, #8
 8004250:	305c      	adds	r0, #92	; 0x5c
 8004252:	f7fd fef5 	bl	8002040 <memset>
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <std+0x38>)
 8004258:	6263      	str	r3, [r4, #36]	; 0x24
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <std+0x3c>)
 800425c:	62a3      	str	r3, [r4, #40]	; 0x28
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <std+0x40>)
 8004260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <std+0x44>)
 8004264:	6224      	str	r4, [r4, #32]
 8004266:	6323      	str	r3, [r4, #48]	; 0x30
 8004268:	bd10      	pop	{r4, pc}
 800426a:	bf00      	nop
 800426c:	08002925 	.word	0x08002925
 8004270:	08002947 	.word	0x08002947
 8004274:	0800297f 	.word	0x0800297f
 8004278:	080029a3 	.word	0x080029a3

0800427c <_cleanup_r>:
 800427c:	4901      	ldr	r1, [pc, #4]	; (8004284 <_cleanup_r+0x8>)
 800427e:	f000 b8c1 	b.w	8004404 <_fwalk_reent>
 8004282:	bf00      	nop
 8004284:	080041bd 	.word	0x080041bd

08004288 <__sfmoreglue>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	2268      	movs	r2, #104	; 0x68
 800428c:	1e4d      	subs	r5, r1, #1
 800428e:	4355      	muls	r5, r2
 8004290:	460e      	mov	r6, r1
 8004292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004296:	f7ff fe57 	bl	8003f48 <_malloc_r>
 800429a:	4604      	mov	r4, r0
 800429c:	b140      	cbz	r0, 80042b0 <__sfmoreglue+0x28>
 800429e:	2100      	movs	r1, #0
 80042a0:	e9c0 1600 	strd	r1, r6, [r0]
 80042a4:	300c      	adds	r0, #12
 80042a6:	60a0      	str	r0, [r4, #8]
 80042a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042ac:	f7fd fec8 	bl	8002040 <memset>
 80042b0:	4620      	mov	r0, r4
 80042b2:	bd70      	pop	{r4, r5, r6, pc}

080042b4 <__sfp_lock_acquire>:
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <__sfp_lock_acquire+0x8>)
 80042b6:	f000 b8c5 	b.w	8004444 <__retarget_lock_acquire_recursive>
 80042ba:	bf00      	nop
 80042bc:	20000241 	.word	0x20000241

080042c0 <__sfp_lock_release>:
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <__sfp_lock_release+0x8>)
 80042c2:	f000 b8c0 	b.w	8004446 <__retarget_lock_release_recursive>
 80042c6:	bf00      	nop
 80042c8:	20000241 	.word	0x20000241

080042cc <__sinit_lock_acquire>:
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <__sinit_lock_acquire+0x8>)
 80042ce:	f000 b8b9 	b.w	8004444 <__retarget_lock_acquire_recursive>
 80042d2:	bf00      	nop
 80042d4:	20000242 	.word	0x20000242

080042d8 <__sinit_lock_release>:
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <__sinit_lock_release+0x8>)
 80042da:	f000 b8b4 	b.w	8004446 <__retarget_lock_release_recursive>
 80042de:	bf00      	nop
 80042e0:	20000242 	.word	0x20000242

080042e4 <__sinit>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	4604      	mov	r4, r0
 80042e8:	f7ff fff0 	bl	80042cc <__sinit_lock_acquire>
 80042ec:	69a3      	ldr	r3, [r4, #24]
 80042ee:	b11b      	cbz	r3, 80042f8 <__sinit+0x14>
 80042f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f4:	f7ff bff0 	b.w	80042d8 <__sinit_lock_release>
 80042f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042fc:	6523      	str	r3, [r4, #80]	; 0x50
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <__sinit+0x68>)
 8004300:	4a13      	ldr	r2, [pc, #76]	; (8004350 <__sinit+0x6c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	62a2      	str	r2, [r4, #40]	; 0x28
 8004306:	42a3      	cmp	r3, r4
 8004308:	bf04      	itt	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	61a3      	streq	r3, [r4, #24]
 800430e:	4620      	mov	r0, r4
 8004310:	f000 f820 	bl	8004354 <__sfp>
 8004314:	6060      	str	r0, [r4, #4]
 8004316:	4620      	mov	r0, r4
 8004318:	f000 f81c 	bl	8004354 <__sfp>
 800431c:	60a0      	str	r0, [r4, #8]
 800431e:	4620      	mov	r0, r4
 8004320:	f000 f818 	bl	8004354 <__sfp>
 8004324:	2200      	movs	r2, #0
 8004326:	60e0      	str	r0, [r4, #12]
 8004328:	2104      	movs	r1, #4
 800432a:	6860      	ldr	r0, [r4, #4]
 800432c:	f7ff ff82 	bl	8004234 <std>
 8004330:	68a0      	ldr	r0, [r4, #8]
 8004332:	2201      	movs	r2, #1
 8004334:	2109      	movs	r1, #9
 8004336:	f7ff ff7d 	bl	8004234 <std>
 800433a:	68e0      	ldr	r0, [r4, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	2112      	movs	r1, #18
 8004340:	f7ff ff78 	bl	8004234 <std>
 8004344:	2301      	movs	r3, #1
 8004346:	61a3      	str	r3, [r4, #24]
 8004348:	e7d2      	b.n	80042f0 <__sinit+0xc>
 800434a:	bf00      	nop
 800434c:	08004ab0 	.word	0x08004ab0
 8004350:	0800427d 	.word	0x0800427d

08004354 <__sfp>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	4607      	mov	r7, r0
 8004358:	f7ff ffac 	bl	80042b4 <__sfp_lock_acquire>
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <__sfp+0x84>)
 800435e:	681e      	ldr	r6, [r3, #0]
 8004360:	69b3      	ldr	r3, [r6, #24]
 8004362:	b913      	cbnz	r3, 800436a <__sfp+0x16>
 8004364:	4630      	mov	r0, r6
 8004366:	f7ff ffbd 	bl	80042e4 <__sinit>
 800436a:	3648      	adds	r6, #72	; 0x48
 800436c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004370:	3b01      	subs	r3, #1
 8004372:	d503      	bpl.n	800437c <__sfp+0x28>
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	b30b      	cbz	r3, 80043bc <__sfp+0x68>
 8004378:	6836      	ldr	r6, [r6, #0]
 800437a:	e7f7      	b.n	800436c <__sfp+0x18>
 800437c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004380:	b9d5      	cbnz	r5, 80043b8 <__sfp+0x64>
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <__sfp+0x88>)
 8004384:	60e3      	str	r3, [r4, #12]
 8004386:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800438a:	6665      	str	r5, [r4, #100]	; 0x64
 800438c:	f000 f859 	bl	8004442 <__retarget_lock_init_recursive>
 8004390:	f7ff ff96 	bl	80042c0 <__sfp_lock_release>
 8004394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800439c:	6025      	str	r5, [r4, #0]
 800439e:	61a5      	str	r5, [r4, #24]
 80043a0:	2208      	movs	r2, #8
 80043a2:	4629      	mov	r1, r5
 80043a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043a8:	f7fd fe4a 	bl	8002040 <memset>
 80043ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043b4:	4620      	mov	r0, r4
 80043b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b8:	3468      	adds	r4, #104	; 0x68
 80043ba:	e7d9      	b.n	8004370 <__sfp+0x1c>
 80043bc:	2104      	movs	r1, #4
 80043be:	4638      	mov	r0, r7
 80043c0:	f7ff ff62 	bl	8004288 <__sfmoreglue>
 80043c4:	4604      	mov	r4, r0
 80043c6:	6030      	str	r0, [r6, #0]
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d1d5      	bne.n	8004378 <__sfp+0x24>
 80043cc:	f7ff ff78 	bl	80042c0 <__sfp_lock_release>
 80043d0:	230c      	movs	r3, #12
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	e7ee      	b.n	80043b4 <__sfp+0x60>
 80043d6:	bf00      	nop
 80043d8:	08004ab0 	.word	0x08004ab0
 80043dc:	ffff0001 	.word	0xffff0001

080043e0 <fiprintf>:
 80043e0:	b40e      	push	{r1, r2, r3}
 80043e2:	b503      	push	{r0, r1, lr}
 80043e4:	4601      	mov	r1, r0
 80043e6:	ab03      	add	r3, sp, #12
 80043e8:	4805      	ldr	r0, [pc, #20]	; (8004400 <fiprintf+0x20>)
 80043ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ee:	6800      	ldr	r0, [r0, #0]
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	f000 f871 	bl	80044d8 <_vfiprintf_r>
 80043f6:	b002      	add	sp, #8
 80043f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043fc:	b003      	add	sp, #12
 80043fe:	4770      	bx	lr
 8004400:	20000000 	.word	0x20000000

08004404 <_fwalk_reent>:
 8004404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004408:	4606      	mov	r6, r0
 800440a:	4688      	mov	r8, r1
 800440c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004410:	2700      	movs	r7, #0
 8004412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004416:	f1b9 0901 	subs.w	r9, r9, #1
 800441a:	d505      	bpl.n	8004428 <_fwalk_reent+0x24>
 800441c:	6824      	ldr	r4, [r4, #0]
 800441e:	2c00      	cmp	r4, #0
 8004420:	d1f7      	bne.n	8004412 <_fwalk_reent+0xe>
 8004422:	4638      	mov	r0, r7
 8004424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004428:	89ab      	ldrh	r3, [r5, #12]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d907      	bls.n	800443e <_fwalk_reent+0x3a>
 800442e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004432:	3301      	adds	r3, #1
 8004434:	d003      	beq.n	800443e <_fwalk_reent+0x3a>
 8004436:	4629      	mov	r1, r5
 8004438:	4630      	mov	r0, r6
 800443a:	47c0      	blx	r8
 800443c:	4307      	orrs	r7, r0
 800443e:	3568      	adds	r5, #104	; 0x68
 8004440:	e7e9      	b.n	8004416 <_fwalk_reent+0x12>

08004442 <__retarget_lock_init_recursive>:
 8004442:	4770      	bx	lr

08004444 <__retarget_lock_acquire_recursive>:
 8004444:	4770      	bx	lr

08004446 <__retarget_lock_release_recursive>:
 8004446:	4770      	bx	lr

08004448 <__ascii_mbtowc>:
 8004448:	b082      	sub	sp, #8
 800444a:	b901      	cbnz	r1, 800444e <__ascii_mbtowc+0x6>
 800444c:	a901      	add	r1, sp, #4
 800444e:	b142      	cbz	r2, 8004462 <__ascii_mbtowc+0x1a>
 8004450:	b14b      	cbz	r3, 8004466 <__ascii_mbtowc+0x1e>
 8004452:	7813      	ldrb	r3, [r2, #0]
 8004454:	600b      	str	r3, [r1, #0]
 8004456:	7812      	ldrb	r2, [r2, #0]
 8004458:	1e10      	subs	r0, r2, #0
 800445a:	bf18      	it	ne
 800445c:	2001      	movne	r0, #1
 800445e:	b002      	add	sp, #8
 8004460:	4770      	bx	lr
 8004462:	4610      	mov	r0, r2
 8004464:	e7fb      	b.n	800445e <__ascii_mbtowc+0x16>
 8004466:	f06f 0001 	mvn.w	r0, #1
 800446a:	e7f8      	b.n	800445e <__ascii_mbtowc+0x16>

0800446c <__malloc_lock>:
 800446c:	4801      	ldr	r0, [pc, #4]	; (8004474 <__malloc_lock+0x8>)
 800446e:	f7ff bfe9 	b.w	8004444 <__retarget_lock_acquire_recursive>
 8004472:	bf00      	nop
 8004474:	20000240 	.word	0x20000240

08004478 <__malloc_unlock>:
 8004478:	4801      	ldr	r0, [pc, #4]	; (8004480 <__malloc_unlock+0x8>)
 800447a:	f7ff bfe4 	b.w	8004446 <__retarget_lock_release_recursive>
 800447e:	bf00      	nop
 8004480:	20000240 	.word	0x20000240

08004484 <__sfputc_r>:
 8004484:	6893      	ldr	r3, [r2, #8]
 8004486:	3b01      	subs	r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	b410      	push	{r4}
 800448c:	6093      	str	r3, [r2, #8]
 800448e:	da08      	bge.n	80044a2 <__sfputc_r+0x1e>
 8004490:	6994      	ldr	r4, [r2, #24]
 8004492:	42a3      	cmp	r3, r4
 8004494:	db01      	blt.n	800449a <__sfputc_r+0x16>
 8004496:	290a      	cmp	r1, #10
 8004498:	d103      	bne.n	80044a2 <__sfputc_r+0x1e>
 800449a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800449e:	f000 b94b 	b.w	8004738 <__swbuf_r>
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	1c58      	adds	r0, r3, #1
 80044a6:	6010      	str	r0, [r2, #0]
 80044a8:	7019      	strb	r1, [r3, #0]
 80044aa:	4608      	mov	r0, r1
 80044ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <__sfputs_r>:
 80044b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b4:	4606      	mov	r6, r0
 80044b6:	460f      	mov	r7, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	18d5      	adds	r5, r2, r3
 80044bc:	42ac      	cmp	r4, r5
 80044be:	d101      	bne.n	80044c4 <__sfputs_r+0x12>
 80044c0:	2000      	movs	r0, #0
 80044c2:	e007      	b.n	80044d4 <__sfputs_r+0x22>
 80044c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c8:	463a      	mov	r2, r7
 80044ca:	4630      	mov	r0, r6
 80044cc:	f7ff ffda 	bl	8004484 <__sfputc_r>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d1f3      	bne.n	80044bc <__sfputs_r+0xa>
 80044d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044d8 <_vfiprintf_r>:
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	460d      	mov	r5, r1
 80044de:	b09d      	sub	sp, #116	; 0x74
 80044e0:	4614      	mov	r4, r2
 80044e2:	4698      	mov	r8, r3
 80044e4:	4606      	mov	r6, r0
 80044e6:	b118      	cbz	r0, 80044f0 <_vfiprintf_r+0x18>
 80044e8:	6983      	ldr	r3, [r0, #24]
 80044ea:	b90b      	cbnz	r3, 80044f0 <_vfiprintf_r+0x18>
 80044ec:	f7ff fefa 	bl	80042e4 <__sinit>
 80044f0:	4b89      	ldr	r3, [pc, #548]	; (8004718 <_vfiprintf_r+0x240>)
 80044f2:	429d      	cmp	r5, r3
 80044f4:	d11b      	bne.n	800452e <_vfiprintf_r+0x56>
 80044f6:	6875      	ldr	r5, [r6, #4]
 80044f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	d405      	bmi.n	800450a <_vfiprintf_r+0x32>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	059a      	lsls	r2, r3, #22
 8004502:	d402      	bmi.n	800450a <_vfiprintf_r+0x32>
 8004504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004506:	f7ff ff9d 	bl	8004444 <__retarget_lock_acquire_recursive>
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	071b      	lsls	r3, r3, #28
 800450e:	d501      	bpl.n	8004514 <_vfiprintf_r+0x3c>
 8004510:	692b      	ldr	r3, [r5, #16]
 8004512:	b9eb      	cbnz	r3, 8004550 <_vfiprintf_r+0x78>
 8004514:	4629      	mov	r1, r5
 8004516:	4630      	mov	r0, r6
 8004518:	f000 f96e 	bl	80047f8 <__swsetup_r>
 800451c:	b1c0      	cbz	r0, 8004550 <_vfiprintf_r+0x78>
 800451e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004520:	07dc      	lsls	r4, r3, #31
 8004522:	d50e      	bpl.n	8004542 <_vfiprintf_r+0x6a>
 8004524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004528:	b01d      	add	sp, #116	; 0x74
 800452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <_vfiprintf_r+0x244>)
 8004530:	429d      	cmp	r5, r3
 8004532:	d101      	bne.n	8004538 <_vfiprintf_r+0x60>
 8004534:	68b5      	ldr	r5, [r6, #8]
 8004536:	e7df      	b.n	80044f8 <_vfiprintf_r+0x20>
 8004538:	4b79      	ldr	r3, [pc, #484]	; (8004720 <_vfiprintf_r+0x248>)
 800453a:	429d      	cmp	r5, r3
 800453c:	bf08      	it	eq
 800453e:	68f5      	ldreq	r5, [r6, #12]
 8004540:	e7da      	b.n	80044f8 <_vfiprintf_r+0x20>
 8004542:	89ab      	ldrh	r3, [r5, #12]
 8004544:	0598      	lsls	r0, r3, #22
 8004546:	d4ed      	bmi.n	8004524 <_vfiprintf_r+0x4c>
 8004548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800454a:	f7ff ff7c 	bl	8004446 <__retarget_lock_release_recursive>
 800454e:	e7e9      	b.n	8004524 <_vfiprintf_r+0x4c>
 8004550:	2300      	movs	r3, #0
 8004552:	9309      	str	r3, [sp, #36]	; 0x24
 8004554:	2320      	movs	r3, #32
 8004556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800455a:	f8cd 800c 	str.w	r8, [sp, #12]
 800455e:	2330      	movs	r3, #48	; 0x30
 8004560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004724 <_vfiprintf_r+0x24c>
 8004564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004568:	f04f 0901 	mov.w	r9, #1
 800456c:	4623      	mov	r3, r4
 800456e:	469a      	mov	sl, r3
 8004570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004574:	b10a      	cbz	r2, 800457a <_vfiprintf_r+0xa2>
 8004576:	2a25      	cmp	r2, #37	; 0x25
 8004578:	d1f9      	bne.n	800456e <_vfiprintf_r+0x96>
 800457a:	ebba 0b04 	subs.w	fp, sl, r4
 800457e:	d00b      	beq.n	8004598 <_vfiprintf_r+0xc0>
 8004580:	465b      	mov	r3, fp
 8004582:	4622      	mov	r2, r4
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f7ff ff93 	bl	80044b2 <__sfputs_r>
 800458c:	3001      	adds	r0, #1
 800458e:	f000 80aa 	beq.w	80046e6 <_vfiprintf_r+0x20e>
 8004592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004594:	445a      	add	r2, fp
 8004596:	9209      	str	r2, [sp, #36]	; 0x24
 8004598:	f89a 3000 	ldrb.w	r3, [sl]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a2 	beq.w	80046e6 <_vfiprintf_r+0x20e>
 80045a2:	2300      	movs	r3, #0
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ac:	f10a 0a01 	add.w	sl, sl, #1
 80045b0:	9304      	str	r3, [sp, #16]
 80045b2:	9307      	str	r3, [sp, #28]
 80045b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045b8:	931a      	str	r3, [sp, #104]	; 0x68
 80045ba:	4654      	mov	r4, sl
 80045bc:	2205      	movs	r2, #5
 80045be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c2:	4858      	ldr	r0, [pc, #352]	; (8004724 <_vfiprintf_r+0x24c>)
 80045c4:	f7fb fe14 	bl	80001f0 <memchr>
 80045c8:	9a04      	ldr	r2, [sp, #16]
 80045ca:	b9d8      	cbnz	r0, 8004604 <_vfiprintf_r+0x12c>
 80045cc:	06d1      	lsls	r1, r2, #27
 80045ce:	bf44      	itt	mi
 80045d0:	2320      	movmi	r3, #32
 80045d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045d6:	0713      	lsls	r3, r2, #28
 80045d8:	bf44      	itt	mi
 80045da:	232b      	movmi	r3, #43	; 0x2b
 80045dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045e0:	f89a 3000 	ldrb.w	r3, [sl]
 80045e4:	2b2a      	cmp	r3, #42	; 0x2a
 80045e6:	d015      	beq.n	8004614 <_vfiprintf_r+0x13c>
 80045e8:	9a07      	ldr	r2, [sp, #28]
 80045ea:	4654      	mov	r4, sl
 80045ec:	2000      	movs	r0, #0
 80045ee:	f04f 0c0a 	mov.w	ip, #10
 80045f2:	4621      	mov	r1, r4
 80045f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045f8:	3b30      	subs	r3, #48	; 0x30
 80045fa:	2b09      	cmp	r3, #9
 80045fc:	d94e      	bls.n	800469c <_vfiprintf_r+0x1c4>
 80045fe:	b1b0      	cbz	r0, 800462e <_vfiprintf_r+0x156>
 8004600:	9207      	str	r2, [sp, #28]
 8004602:	e014      	b.n	800462e <_vfiprintf_r+0x156>
 8004604:	eba0 0308 	sub.w	r3, r0, r8
 8004608:	fa09 f303 	lsl.w	r3, r9, r3
 800460c:	4313      	orrs	r3, r2
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	46a2      	mov	sl, r4
 8004612:	e7d2      	b.n	80045ba <_vfiprintf_r+0xe2>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	1d19      	adds	r1, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	9103      	str	r1, [sp, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	bfbb      	ittet	lt
 8004620:	425b      	neglt	r3, r3
 8004622:	f042 0202 	orrlt.w	r2, r2, #2
 8004626:	9307      	strge	r3, [sp, #28]
 8004628:	9307      	strlt	r3, [sp, #28]
 800462a:	bfb8      	it	lt
 800462c:	9204      	strlt	r2, [sp, #16]
 800462e:	7823      	ldrb	r3, [r4, #0]
 8004630:	2b2e      	cmp	r3, #46	; 0x2e
 8004632:	d10c      	bne.n	800464e <_vfiprintf_r+0x176>
 8004634:	7863      	ldrb	r3, [r4, #1]
 8004636:	2b2a      	cmp	r3, #42	; 0x2a
 8004638:	d135      	bne.n	80046a6 <_vfiprintf_r+0x1ce>
 800463a:	9b03      	ldr	r3, [sp, #12]
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	9203      	str	r2, [sp, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	bfb8      	it	lt
 8004646:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800464a:	3402      	adds	r4, #2
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004734 <_vfiprintf_r+0x25c>
 8004652:	7821      	ldrb	r1, [r4, #0]
 8004654:	2203      	movs	r2, #3
 8004656:	4650      	mov	r0, sl
 8004658:	f7fb fdca 	bl	80001f0 <memchr>
 800465c:	b140      	cbz	r0, 8004670 <_vfiprintf_r+0x198>
 800465e:	2340      	movs	r3, #64	; 0x40
 8004660:	eba0 000a 	sub.w	r0, r0, sl
 8004664:	fa03 f000 	lsl.w	r0, r3, r0
 8004668:	9b04      	ldr	r3, [sp, #16]
 800466a:	4303      	orrs	r3, r0
 800466c:	3401      	adds	r4, #1
 800466e:	9304      	str	r3, [sp, #16]
 8004670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004674:	482c      	ldr	r0, [pc, #176]	; (8004728 <_vfiprintf_r+0x250>)
 8004676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800467a:	2206      	movs	r2, #6
 800467c:	f7fb fdb8 	bl	80001f0 <memchr>
 8004680:	2800      	cmp	r0, #0
 8004682:	d03f      	beq.n	8004704 <_vfiprintf_r+0x22c>
 8004684:	4b29      	ldr	r3, [pc, #164]	; (800472c <_vfiprintf_r+0x254>)
 8004686:	bb1b      	cbnz	r3, 80046d0 <_vfiprintf_r+0x1f8>
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	3307      	adds	r3, #7
 800468c:	f023 0307 	bic.w	r3, r3, #7
 8004690:	3308      	adds	r3, #8
 8004692:	9303      	str	r3, [sp, #12]
 8004694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004696:	443b      	add	r3, r7
 8004698:	9309      	str	r3, [sp, #36]	; 0x24
 800469a:	e767      	b.n	800456c <_vfiprintf_r+0x94>
 800469c:	fb0c 3202 	mla	r2, ip, r2, r3
 80046a0:	460c      	mov	r4, r1
 80046a2:	2001      	movs	r0, #1
 80046a4:	e7a5      	b.n	80045f2 <_vfiprintf_r+0x11a>
 80046a6:	2300      	movs	r3, #0
 80046a8:	3401      	adds	r4, #1
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	4619      	mov	r1, r3
 80046ae:	f04f 0c0a 	mov.w	ip, #10
 80046b2:	4620      	mov	r0, r4
 80046b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b8:	3a30      	subs	r2, #48	; 0x30
 80046ba:	2a09      	cmp	r2, #9
 80046bc:	d903      	bls.n	80046c6 <_vfiprintf_r+0x1ee>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0c5      	beq.n	800464e <_vfiprintf_r+0x176>
 80046c2:	9105      	str	r1, [sp, #20]
 80046c4:	e7c3      	b.n	800464e <_vfiprintf_r+0x176>
 80046c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80046ca:	4604      	mov	r4, r0
 80046cc:	2301      	movs	r3, #1
 80046ce:	e7f0      	b.n	80046b2 <_vfiprintf_r+0x1da>
 80046d0:	ab03      	add	r3, sp, #12
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	462a      	mov	r2, r5
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <_vfiprintf_r+0x258>)
 80046d8:	a904      	add	r1, sp, #16
 80046da:	4630      	mov	r0, r6
 80046dc:	f7fd fd58 	bl	8002190 <_printf_float>
 80046e0:	4607      	mov	r7, r0
 80046e2:	1c78      	adds	r0, r7, #1
 80046e4:	d1d6      	bne.n	8004694 <_vfiprintf_r+0x1bc>
 80046e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e8:	07d9      	lsls	r1, r3, #31
 80046ea:	d405      	bmi.n	80046f8 <_vfiprintf_r+0x220>
 80046ec:	89ab      	ldrh	r3, [r5, #12]
 80046ee:	059a      	lsls	r2, r3, #22
 80046f0:	d402      	bmi.n	80046f8 <_vfiprintf_r+0x220>
 80046f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046f4:	f7ff fea7 	bl	8004446 <__retarget_lock_release_recursive>
 80046f8:	89ab      	ldrh	r3, [r5, #12]
 80046fa:	065b      	lsls	r3, r3, #25
 80046fc:	f53f af12 	bmi.w	8004524 <_vfiprintf_r+0x4c>
 8004700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004702:	e711      	b.n	8004528 <_vfiprintf_r+0x50>
 8004704:	ab03      	add	r3, sp, #12
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	462a      	mov	r2, r5
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <_vfiprintf_r+0x258>)
 800470c:	a904      	add	r1, sp, #16
 800470e:	4630      	mov	r0, r6
 8004710:	f7fd ffe2 	bl	80026d8 <_printf_i>
 8004714:	e7e4      	b.n	80046e0 <_vfiprintf_r+0x208>
 8004716:	bf00      	nop
 8004718:	08004e34 	.word	0x08004e34
 800471c:	08004e54 	.word	0x08004e54
 8004720:	08004e14 	.word	0x08004e14
 8004724:	08004e7e 	.word	0x08004e7e
 8004728:	08004e88 	.word	0x08004e88
 800472c:	08002191 	.word	0x08002191
 8004730:	080044b3 	.word	0x080044b3
 8004734:	08004e84 	.word	0x08004e84

08004738 <__swbuf_r>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4605      	mov	r5, r0
 8004740:	b118      	cbz	r0, 800474a <__swbuf_r+0x12>
 8004742:	6983      	ldr	r3, [r0, #24]
 8004744:	b90b      	cbnz	r3, 800474a <__swbuf_r+0x12>
 8004746:	f7ff fdcd 	bl	80042e4 <__sinit>
 800474a:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <__swbuf_r+0x98>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d12b      	bne.n	80047a8 <__swbuf_r+0x70>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	69a3      	ldr	r3, [r4, #24]
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	071a      	lsls	r2, r3, #28
 800475a:	d52f      	bpl.n	80047bc <__swbuf_r+0x84>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b36b      	cbz	r3, 80047bc <__swbuf_r+0x84>
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	6963      	ldr	r3, [r4, #20]
 8004768:	b2f6      	uxtb	r6, r6
 800476a:	4283      	cmp	r3, r0
 800476c:	4637      	mov	r7, r6
 800476e:	dc04      	bgt.n	800477a <__swbuf_r+0x42>
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f7ff fd22 	bl	80041bc <_fflush_r>
 8004778:	bb30      	cbnz	r0, 80047c8 <__swbuf_r+0x90>
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	3b01      	subs	r3, #1
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	701e      	strb	r6, [r3, #0]
 8004788:	6963      	ldr	r3, [r4, #20]
 800478a:	3001      	adds	r0, #1
 800478c:	4283      	cmp	r3, r0
 800478e:	d004      	beq.n	800479a <__swbuf_r+0x62>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	07db      	lsls	r3, r3, #31
 8004794:	d506      	bpl.n	80047a4 <__swbuf_r+0x6c>
 8004796:	2e0a      	cmp	r6, #10
 8004798:	d104      	bne.n	80047a4 <__swbuf_r+0x6c>
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f7ff fd0d 	bl	80041bc <_fflush_r>
 80047a2:	b988      	cbnz	r0, 80047c8 <__swbuf_r+0x90>
 80047a4:	4638      	mov	r0, r7
 80047a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <__swbuf_r+0x9c>)
 80047aa:	429c      	cmp	r4, r3
 80047ac:	d101      	bne.n	80047b2 <__swbuf_r+0x7a>
 80047ae:	68ac      	ldr	r4, [r5, #8]
 80047b0:	e7cf      	b.n	8004752 <__swbuf_r+0x1a>
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <__swbuf_r+0xa0>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	bf08      	it	eq
 80047b8:	68ec      	ldreq	r4, [r5, #12]
 80047ba:	e7ca      	b.n	8004752 <__swbuf_r+0x1a>
 80047bc:	4621      	mov	r1, r4
 80047be:	4628      	mov	r0, r5
 80047c0:	f000 f81a 	bl	80047f8 <__swsetup_r>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d0cb      	beq.n	8004760 <__swbuf_r+0x28>
 80047c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047cc:	e7ea      	b.n	80047a4 <__swbuf_r+0x6c>
 80047ce:	bf00      	nop
 80047d0:	08004e34 	.word	0x08004e34
 80047d4:	08004e54 	.word	0x08004e54
 80047d8:	08004e14 	.word	0x08004e14

080047dc <__ascii_wctomb>:
 80047dc:	b149      	cbz	r1, 80047f2 <__ascii_wctomb+0x16>
 80047de:	2aff      	cmp	r2, #255	; 0xff
 80047e0:	bf85      	ittet	hi
 80047e2:	238a      	movhi	r3, #138	; 0x8a
 80047e4:	6003      	strhi	r3, [r0, #0]
 80047e6:	700a      	strbls	r2, [r1, #0]
 80047e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80047ec:	bf98      	it	ls
 80047ee:	2001      	movls	r0, #1
 80047f0:	4770      	bx	lr
 80047f2:	4608      	mov	r0, r1
 80047f4:	4770      	bx	lr
	...

080047f8 <__swsetup_r>:
 80047f8:	4b32      	ldr	r3, [pc, #200]	; (80048c4 <__swsetup_r+0xcc>)
 80047fa:	b570      	push	{r4, r5, r6, lr}
 80047fc:	681d      	ldr	r5, [r3, #0]
 80047fe:	4606      	mov	r6, r0
 8004800:	460c      	mov	r4, r1
 8004802:	b125      	cbz	r5, 800480e <__swsetup_r+0x16>
 8004804:	69ab      	ldr	r3, [r5, #24]
 8004806:	b913      	cbnz	r3, 800480e <__swsetup_r+0x16>
 8004808:	4628      	mov	r0, r5
 800480a:	f7ff fd6b 	bl	80042e4 <__sinit>
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <__swsetup_r+0xd0>)
 8004810:	429c      	cmp	r4, r3
 8004812:	d10f      	bne.n	8004834 <__swsetup_r+0x3c>
 8004814:	686c      	ldr	r4, [r5, #4]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800481c:	0719      	lsls	r1, r3, #28
 800481e:	d42c      	bmi.n	800487a <__swsetup_r+0x82>
 8004820:	06dd      	lsls	r5, r3, #27
 8004822:	d411      	bmi.n	8004848 <__swsetup_r+0x50>
 8004824:	2309      	movs	r3, #9
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004832:	e03e      	b.n	80048b2 <__swsetup_r+0xba>
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <__swsetup_r+0xd4>)
 8004836:	429c      	cmp	r4, r3
 8004838:	d101      	bne.n	800483e <__swsetup_r+0x46>
 800483a:	68ac      	ldr	r4, [r5, #8]
 800483c:	e7eb      	b.n	8004816 <__swsetup_r+0x1e>
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <__swsetup_r+0xd8>)
 8004840:	429c      	cmp	r4, r3
 8004842:	bf08      	it	eq
 8004844:	68ec      	ldreq	r4, [r5, #12]
 8004846:	e7e6      	b.n	8004816 <__swsetup_r+0x1e>
 8004848:	0758      	lsls	r0, r3, #29
 800484a:	d512      	bpl.n	8004872 <__swsetup_r+0x7a>
 800484c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484e:	b141      	cbz	r1, 8004862 <__swsetup_r+0x6a>
 8004850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004854:	4299      	cmp	r1, r3
 8004856:	d002      	beq.n	800485e <__swsetup_r+0x66>
 8004858:	4630      	mov	r0, r6
 800485a:	f7ff fb09 	bl	8003e70 <_free_r>
 800485e:	2300      	movs	r3, #0
 8004860:	6363      	str	r3, [r4, #52]	; 0x34
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	2300      	movs	r3, #0
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0308 	orr.w	r3, r3, #8
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	b94b      	cbnz	r3, 8004892 <__swsetup_r+0x9a>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d003      	beq.n	8004892 <__swsetup_r+0x9a>
 800488a:	4621      	mov	r1, r4
 800488c:	4630      	mov	r0, r6
 800488e:	f000 f84d 	bl	800492c <__smakebuf_r>
 8004892:	89a0      	ldrh	r0, [r4, #12]
 8004894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004898:	f010 0301 	ands.w	r3, r0, #1
 800489c:	d00a      	beq.n	80048b4 <__swsetup_r+0xbc>
 800489e:	2300      	movs	r3, #0
 80048a0:	60a3      	str	r3, [r4, #8]
 80048a2:	6963      	ldr	r3, [r4, #20]
 80048a4:	425b      	negs	r3, r3
 80048a6:	61a3      	str	r3, [r4, #24]
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	b943      	cbnz	r3, 80048be <__swsetup_r+0xc6>
 80048ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048b0:	d1ba      	bne.n	8004828 <__swsetup_r+0x30>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	0781      	lsls	r1, r0, #30
 80048b6:	bf58      	it	pl
 80048b8:	6963      	ldrpl	r3, [r4, #20]
 80048ba:	60a3      	str	r3, [r4, #8]
 80048bc:	e7f4      	b.n	80048a8 <__swsetup_r+0xb0>
 80048be:	2000      	movs	r0, #0
 80048c0:	e7f7      	b.n	80048b2 <__swsetup_r+0xba>
 80048c2:	bf00      	nop
 80048c4:	20000000 	.word	0x20000000
 80048c8:	08004e34 	.word	0x08004e34
 80048cc:	08004e54 	.word	0x08004e54
 80048d0:	08004e14 	.word	0x08004e14

080048d4 <abort>:
 80048d4:	b508      	push	{r3, lr}
 80048d6:	2006      	movs	r0, #6
 80048d8:	f000 f890 	bl	80049fc <raise>
 80048dc:	2001      	movs	r0, #1
 80048de:	f7fc fa65 	bl	8000dac <_exit>

080048e2 <__swhatbuf_r>:
 80048e2:	b570      	push	{r4, r5, r6, lr}
 80048e4:	460e      	mov	r6, r1
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	2900      	cmp	r1, #0
 80048ec:	b096      	sub	sp, #88	; 0x58
 80048ee:	4614      	mov	r4, r2
 80048f0:	461d      	mov	r5, r3
 80048f2:	da08      	bge.n	8004906 <__swhatbuf_r+0x24>
 80048f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	602a      	str	r2, [r5, #0]
 80048fc:	061a      	lsls	r2, r3, #24
 80048fe:	d410      	bmi.n	8004922 <__swhatbuf_r+0x40>
 8004900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004904:	e00e      	b.n	8004924 <__swhatbuf_r+0x42>
 8004906:	466a      	mov	r2, sp
 8004908:	f000 f894 	bl	8004a34 <_fstat_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	dbf1      	blt.n	80048f4 <__swhatbuf_r+0x12>
 8004910:	9a01      	ldr	r2, [sp, #4]
 8004912:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004916:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800491a:	425a      	negs	r2, r3
 800491c:	415a      	adcs	r2, r3
 800491e:	602a      	str	r2, [r5, #0]
 8004920:	e7ee      	b.n	8004900 <__swhatbuf_r+0x1e>
 8004922:	2340      	movs	r3, #64	; 0x40
 8004924:	2000      	movs	r0, #0
 8004926:	6023      	str	r3, [r4, #0]
 8004928:	b016      	add	sp, #88	; 0x58
 800492a:	bd70      	pop	{r4, r5, r6, pc}

0800492c <__smakebuf_r>:
 800492c:	898b      	ldrh	r3, [r1, #12]
 800492e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004930:	079d      	lsls	r5, r3, #30
 8004932:	4606      	mov	r6, r0
 8004934:	460c      	mov	r4, r1
 8004936:	d507      	bpl.n	8004948 <__smakebuf_r+0x1c>
 8004938:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	2301      	movs	r3, #1
 8004942:	6163      	str	r3, [r4, #20]
 8004944:	b002      	add	sp, #8
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	ab01      	add	r3, sp, #4
 800494a:	466a      	mov	r2, sp
 800494c:	f7ff ffc9 	bl	80048e2 <__swhatbuf_r>
 8004950:	9900      	ldr	r1, [sp, #0]
 8004952:	4605      	mov	r5, r0
 8004954:	4630      	mov	r0, r6
 8004956:	f7ff faf7 	bl	8003f48 <_malloc_r>
 800495a:	b948      	cbnz	r0, 8004970 <__smakebuf_r+0x44>
 800495c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004960:	059a      	lsls	r2, r3, #22
 8004962:	d4ef      	bmi.n	8004944 <__smakebuf_r+0x18>
 8004964:	f023 0303 	bic.w	r3, r3, #3
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	e7e3      	b.n	8004938 <__smakebuf_r+0xc>
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <__smakebuf_r+0x7c>)
 8004972:	62b3      	str	r3, [r6, #40]	; 0x28
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	6020      	str	r0, [r4, #0]
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	9b00      	ldr	r3, [sp, #0]
 8004980:	6163      	str	r3, [r4, #20]
 8004982:	9b01      	ldr	r3, [sp, #4]
 8004984:	6120      	str	r0, [r4, #16]
 8004986:	b15b      	cbz	r3, 80049a0 <__smakebuf_r+0x74>
 8004988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800498c:	4630      	mov	r0, r6
 800498e:	f000 f863 	bl	8004a58 <_isatty_r>
 8004992:	b128      	cbz	r0, 80049a0 <__smakebuf_r+0x74>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	89a0      	ldrh	r0, [r4, #12]
 80049a2:	4305      	orrs	r5, r0
 80049a4:	81a5      	strh	r5, [r4, #12]
 80049a6:	e7cd      	b.n	8004944 <__smakebuf_r+0x18>
 80049a8:	0800427d 	.word	0x0800427d

080049ac <_raise_r>:
 80049ac:	291f      	cmp	r1, #31
 80049ae:	b538      	push	{r3, r4, r5, lr}
 80049b0:	4604      	mov	r4, r0
 80049b2:	460d      	mov	r5, r1
 80049b4:	d904      	bls.n	80049c0 <_raise_r+0x14>
 80049b6:	2316      	movs	r3, #22
 80049b8:	6003      	str	r3, [r0, #0]
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049be:	bd38      	pop	{r3, r4, r5, pc}
 80049c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80049c2:	b112      	cbz	r2, 80049ca <_raise_r+0x1e>
 80049c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049c8:	b94b      	cbnz	r3, 80049de <_raise_r+0x32>
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 f830 	bl	8004a30 <_getpid_r>
 80049d0:	462a      	mov	r2, r5
 80049d2:	4601      	mov	r1, r0
 80049d4:	4620      	mov	r0, r4
 80049d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049da:	f000 b817 	b.w	8004a0c <_kill_r>
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d00a      	beq.n	80049f8 <_raise_r+0x4c>
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	d103      	bne.n	80049ee <_raise_r+0x42>
 80049e6:	2316      	movs	r3, #22
 80049e8:	6003      	str	r3, [r0, #0]
 80049ea:	2001      	movs	r0, #1
 80049ec:	e7e7      	b.n	80049be <_raise_r+0x12>
 80049ee:	2400      	movs	r4, #0
 80049f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049f4:	4628      	mov	r0, r5
 80049f6:	4798      	blx	r3
 80049f8:	2000      	movs	r0, #0
 80049fa:	e7e0      	b.n	80049be <_raise_r+0x12>

080049fc <raise>:
 80049fc:	4b02      	ldr	r3, [pc, #8]	; (8004a08 <raise+0xc>)
 80049fe:	4601      	mov	r1, r0
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f7ff bfd3 	b.w	80049ac <_raise_r>
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000

08004a0c <_kill_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d07      	ldr	r5, [pc, #28]	; (8004a2c <_kill_r+0x20>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	f7fc f9b7 	bl	8000d8c <_kill>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	d102      	bne.n	8004a28 <_kill_r+0x1c>
 8004a22:	682b      	ldr	r3, [r5, #0]
 8004a24:	b103      	cbz	r3, 8004a28 <_kill_r+0x1c>
 8004a26:	6023      	str	r3, [r4, #0]
 8004a28:	bd38      	pop	{r3, r4, r5, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000023c 	.word	0x2000023c

08004a30 <_getpid_r>:
 8004a30:	f7fc b9a4 	b.w	8000d7c <_getpid>

08004a34 <_fstat_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d07      	ldr	r5, [pc, #28]	; (8004a54 <_fstat_r+0x20>)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	f7fc fa02 	bl	8000e4a <_fstat>
 8004a46:	1c43      	adds	r3, r0, #1
 8004a48:	d102      	bne.n	8004a50 <_fstat_r+0x1c>
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	b103      	cbz	r3, 8004a50 <_fstat_r+0x1c>
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	bd38      	pop	{r3, r4, r5, pc}
 8004a52:	bf00      	nop
 8004a54:	2000023c 	.word	0x2000023c

08004a58 <_isatty_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d06      	ldr	r5, [pc, #24]	; (8004a74 <_isatty_r+0x1c>)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f7fc fa01 	bl	8000e6a <_isatty>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_isatty_r+0x1a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_isatty_r+0x1a>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	2000023c 	.word	0x2000023c

08004a78 <_sbrk>:
 8004a78:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <_sbrk+0x14>)
 8004a7a:	6811      	ldr	r1, [r2, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	b909      	cbnz	r1, 8004a84 <_sbrk+0xc>
 8004a80:	4903      	ldr	r1, [pc, #12]	; (8004a90 <_sbrk+0x18>)
 8004a82:	6011      	str	r1, [r2, #0]
 8004a84:	6810      	ldr	r0, [r2, #0]
 8004a86:	4403      	add	r3, r0
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4770      	bx	lr
 8004a8c:	20000244 	.word	0x20000244
 8004a90:	20000248 	.word	0x20000248

08004a94 <_init>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr

08004aa0 <_fini>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr
