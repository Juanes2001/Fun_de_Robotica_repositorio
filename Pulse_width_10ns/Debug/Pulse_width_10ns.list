
Pulse_width_10ns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08005f98  08005f98  00015f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a8  080063a8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080063a8  080063a8  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063a8  080063a8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080063b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001d8  08006584  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006584  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038f1  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc9  00000000  00000000  00023af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a8  00000000  00000000  000247c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000330  00000000  00000000  00024b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010304  00000000  00000000  00024e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004234  00000000  00000000  0003519c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000571ad  00000000  00000000  000393d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009057d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020dc  00000000  00000000  000905d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f80 	.word	0x08005f80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08005f80 	.word	0x08005f80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:

//Contador
uint8_t counter = 50;

int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	//Activamos la FPU
	SCB -> CPACR |= (0xF << 20);
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <main+0xa0>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <main+0xa0>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	inSystem ();
 8000cac:	f000 f84e 	bl	8000d4c <inSystem>

    /* Loop forever */
	while(1){


			if (rxData != '\0'){
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <main+0xa4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0fb      	beq.n	8000cb0 <main+0x18>

				writeChar(&handlerUSART, rxData);
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <main+0xa4>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4820      	ldr	r0, [pc, #128]	; (8000d40 <main+0xa8>)
 8000cc0:	f001 fbe0 	bl	8002484 <writeChar>

				if (rxData == '+'){
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <main+0xa4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b2b      	cmp	r3, #43	; 0x2b
 8000cca:	d118      	bne.n	8000cfe <main+0x66>

					if (counter < 100){
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <main+0xac>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b63      	cmp	r3, #99	; 0x63
 8000cd2:	d805      	bhi.n	8000ce0 <main+0x48>
					counter+= 1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <main+0xac>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <main+0xac>)
 8000cde:	701a      	strb	r2, [r3, #0]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <main+0xac>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cec:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf0:	4815      	ldr	r0, [pc, #84]	; (8000d48 <main+0xb0>)
 8000cf2:	f000 ff5f 	bl	8001bb4 <updateDuttyCycle>
					rxData = '\0';
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <main+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e7d8      	b.n	8000cb0 <main+0x18>

				}else if (rxData == '-'){
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <main+0xa4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b2d      	cmp	r3, #45	; 0x2d
 8000d04:	d1d4      	bne.n	8000cb0 <main+0x18>

					if (counter > 0){
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <main+0xac>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <main+0x82>
						counter-= 1;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <main+0xac>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <main+0xac>)
 8000d18:	701a      	strb	r2, [r3, #0]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <main+0xac>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <main+0xb0>)
 8000d2c:	f000 ff42 	bl	8001bb4 <updateDuttyCycle>
					rxData = '\0';
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <main+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			if (rxData != '\0'){
 8000d36:	e7bb      	b.n	8000cb0 <main+0x18>
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	200002d8 	.word	0x200002d8
 8000d40:	20000244 	.word	0x20000244
 8000d44:	20000000 	.word	0x20000000
 8000d48:	2000022c 	.word	0x2000022c

08000d4c <inSystem>:
		}
	}
}


void inSystem (void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 8000d50:	f000 ff40 	bl	8001bd4 <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000d54:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <inSystem+0x10c>)
 8000d56:	4a41      	ldr	r2, [pc, #260]	; (8000e5c <inSystem+0x110>)
 8000d58:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000d5a:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <inSystem+0x10c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d60:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <inSystem+0x10c>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <inSystem+0x10c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <inSystem+0x10c>)
 8000d6e:	2205      	movs	r2, #5
 8000d70:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <inSystem+0x10c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <inSystem+0x10c>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000d7e:	4836      	ldr	r0, [pc, #216]	; (8000e58 <inSystem+0x10c>)
 8000d80:	f000 fcd8 	bl	8001734 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000d84:	2101      	movs	r1, #1
 8000d86:	4834      	ldr	r0, [pc, #208]	; (8000e58 <inSystem+0x10c>)
 8000d88:	f000 fdfe 	bl	8001988 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000d8c:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <inSystem+0x114>)
 8000d8e:	4a35      	ldr	r2, [pc, #212]	; (8000e64 <inSystem+0x118>)
 8000d90:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000d92:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <inSystem+0x114>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <inSystem+0x114>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <inSystem+0x114>)
 8000da0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000da4:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 250;
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <inSystem+0x114>)
 8000da8:	22fa      	movs	r2, #250	; 0xfa
 8000daa:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000dac:	482c      	ldr	r0, [pc, #176]	; (8000e60 <inSystem+0x114>)
 8000dae:	f000 f97b 	bl	80010a8 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000db2:	482b      	ldr	r0, [pc, #172]	; (8000e60 <inSystem+0x114>)
 8000db4:	f000 fcac 	bl	8001710 <startTimer>


	//Comunicacion serial


	handlerRxPin.pGPIOx                             = GPIOA;
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <inSystem+0x11c>)
 8000dba:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <inSystem+0x110>)
 8000dbc:	601a      	str	r2, [r3, #0]
	handlerRxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <inSystem+0x11c>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	725a      	strb	r2, [r3, #9]
	handlerRxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <inSystem+0x11c>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	715a      	strb	r2, [r3, #5]
	handlerRxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <inSystem+0x11c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	721a      	strb	r2, [r3, #8]
	handlerRxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <inSystem+0x11c>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	711a      	strb	r2, [r3, #4]
	handlerRxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <inSystem+0x11c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	71da      	strb	r2, [r3, #7]
	handlerRxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <inSystem+0x11c>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerRxPin);
 8000de2:	4821      	ldr	r0, [pc, #132]	; (8000e68 <inSystem+0x11c>)
 8000de4:	f000 fca6 	bl	8001734 <GPIO_Config>


	handlerTxPin.pGPIOx                             = GPIOA;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <inSystem+0x120>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <inSystem+0x110>)
 8000dec:	601a      	str	r2, [r3, #0]
	handlerTxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <inSystem+0x120>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	725a      	strb	r2, [r3, #9]
	handlerTxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <inSystem+0x120>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	715a      	strb	r2, [r3, #5]
	handlerTxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <inSystem+0x120>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	721a      	strb	r2, [r3, #8]
	handlerTxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <inSystem+0x120>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	711a      	strb	r2, [r3, #4]
	handlerTxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <inSystem+0x120>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	71da      	strb	r2, [r3, #7]
	handlerTxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <inSystem+0x120>)
 8000e0e:	2203      	movs	r2, #3
 8000e10:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerTxPin);
 8000e12:	4816      	ldr	r0, [pc, #88]	; (8000e6c <inSystem+0x120>)
 8000e14:	f000 fc8e 	bl	8001734 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <inSystem+0x124>)
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <inSystem+0x128>)
 8000e1c:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <inSystem+0x124>)
 8000e20:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <inSystem+0x12c>)
 8000e22:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <inSystem+0x124>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <inSystem+0x124>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <inSystem+0x124>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <inSystem+0x124>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <inSystem+0x124>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <inSystem+0x124>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <inSystem+0x124>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <inSystem+0x124>)
 8000e50:	f000 ff4e 	bl	8001cf0 <USART_Config>

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001f4 	.word	0x200001f4
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	20000218 	.word	0x20000218
 8000e64:	40000400 	.word	0x40000400
 8000e68:	20000200 	.word	0x20000200
 8000e6c:	2000020c 	.word	0x2000020c
 8000e70:	20000244 	.word	0x20000244
 8000e74:	40004400 	.word	0x40004400
 8000e78:	02faf080 	.word	0x02faf080

08000e7c <BasicTimer3_Callback>:

void BasicTimer3_Callback(void){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <BasicTimer3_Callback+0x10>)
 8000e82:	f000 fdcd 	bl	8001a20 <GPIOxTooglePin>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001f4 	.word	0x200001f4

08000e90 <usart2Rx_Callback>:

void usart2Rx_Callback(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8000e94:	f001 fb1e 	bl	80024d4 <getRxData>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b01      	ldr	r3, [pc, #4]	; (8000ea4 <usart2Rx_Callback+0x14>)
 8000e9e:	701a      	strb	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200002d8 	.word	0x200002d8

08000ea8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <ITM_SendChar+0x48>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <ITM_SendChar+0x48>)
 8000eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ebc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <ITM_SendChar+0x4c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <ITM_SendChar+0x4c>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000eca:	bf00      	nop
 8000ecc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000eda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	6013      	str	r3, [r2, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000edfc 	.word	0xe000edfc
 8000ef4:	e0000e00 	.word	0xe0000e00

08000ef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return 1;
 8000efc:	2301      	movs	r3, #1
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_kill>:

int _kill(int pid, int sig)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f12:	f001 fb7d 	bl	8002610 <__errno>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2216      	movs	r2, #22
 8000f1a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_exit>:

void _exit (int status)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ffe7 	bl	8000f08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f3a:	e7fe      	b.n	8000f3a <_exit+0x12>

08000f3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4e:	f3af 8000 	nop.w
 8000f52:	4601      	mov	r1, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf0      	blt.n	8000f4e <_read+0x12>
	}

return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e009      	b.n	8000f9c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff89 	bl	8000ea8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf1      	blt.n	8000f88 <_write+0x12>
	}
	return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_close>:

int _close(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_isatty>:

int _isatty(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800101a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800101c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	; (8001064 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001046:	f001 fae9 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104a:	f7ff fe25 	bl	8000c98 <main>

0800104e <LoopForever>:

LoopForever:
    b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   r0, =_estack
 8001050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800105c:	080063b0 	.word	0x080063b0
  ldr r2, =_sbss
 8001060:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001064:	20000308 	.word	0x20000308

08001068 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a6b      	ldr	r2, [pc, #428]	; (8001270 <BasicTimer_Config+0x1c8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d106      	bne.n	80010d4 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80010c6:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <BasicTimer_Config+0x1cc>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a6a      	ldr	r2, [pc, #424]	; (8001274 <BasicTimer_Config+0x1cc>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	e030      	b.n	8001136 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d106      	bne.n	80010ec <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <BasicTimer_Config+0x1cc>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a64      	ldr	r2, [pc, #400]	; (8001274 <BasicTimer_Config+0x1cc>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	e024      	b.n	8001136 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a61      	ldr	r2, [pc, #388]	; (8001278 <BasicTimer_Config+0x1d0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d106      	bne.n	8001104 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80010f6:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <BasicTimer_Config+0x1cc>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a5e      	ldr	r2, [pc, #376]	; (8001274 <BasicTimer_Config+0x1cc>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	e018      	b.n	8001136 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a5c      	ldr	r2, [pc, #368]	; (800127c <BasicTimer_Config+0x1d4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d106      	bne.n	800111c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800110e:	4b59      	ldr	r3, [pc, #356]	; (8001274 <BasicTimer_Config+0x1cc>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a58      	ldr	r2, [pc, #352]	; (8001274 <BasicTimer_Config+0x1cc>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	e00c      	b.n	8001136 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a57      	ldr	r2, [pc, #348]	; (8001280 <BasicTimer_Config+0x1d8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d106      	bne.n	8001134 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <BasicTimer_Config+0x1cc>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <BasicTimer_Config+0x1cc>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	e000      	b.n	8001136 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8001134:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001144:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6892      	ldr	r2, [r2, #8]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	791b      	ldrb	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d144      	bne.n	80011e2 <BasicTimer_Config+0x13a>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0210 	bic.w	r2, r2, #16
 8001166:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )  ||(speed == BTIMER_SPEED_100MHz_10us)){
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2ba0      	cmp	r3, #160	; 0xa0
 8001172:	d003      	beq.n	800117c <BasicTimer_Config+0xd4>
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800117a:	d10b      	bne.n	8001194 <BasicTimer_Config+0xec>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2264      	movs	r2, #100	; 0x64
 8001182:	fb02 f303 	mul.w	r3, r2, r3
 8001186:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	3a01      	subs	r2, #1
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
 8001192:	e021      	b.n	80011d8 <BasicTimer_Config+0x130>

		}else if ((speed == BTIMER_SPEED_16MHz_100us ) || (speed == BTIMER_SPEED_100MHz_100us)){
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800119a:	d004      	beq.n	80011a6 <BasicTimer_Config+0xfe>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f242 7210 	movw	r2, #10000	; 0x2710
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10c      	bne.n	80011c0 <BasicTimer_Config+0x118>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	3a01      	subs	r2, #1
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80011be:	e00b      	b.n	80011d8 <BasicTimer_Config+0x130>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms )){
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80011c6:	d107      	bne.n	80011d8 <BasicTimer_Config+0x130>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period    ;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	3a01      	subs	r2, #1
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c

		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
 80011e0:	e013      	b.n	800120a <BasicTimer_Config+0x162>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3a01      	subs	r2, #1
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3a01      	subs	r2, #1
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001222:	d103      	bne.n	800122c <BasicTimer_Config+0x184>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001224:	201c      	movs	r0, #28
 8001226:	f7ff ff21 	bl	800106c <__NVIC_EnableIRQ>
 800122a:	e01b      	b.n	8001264 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <BasicTimer_Config+0x1d0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d103      	bne.n	800123e <BasicTimer_Config+0x196>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001236:	201d      	movs	r0, #29
 8001238:	f7ff ff18 	bl	800106c <__NVIC_EnableIRQ>
 800123c:	e012      	b.n	8001264 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <BasicTimer_Config+0x1d4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d103      	bne.n	8001250 <BasicTimer_Config+0x1a8>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001248:	201e      	movs	r0, #30
 800124a:	f7ff ff0f 	bl	800106c <__NVIC_EnableIRQ>
 800124e:	e009      	b.n	8001264 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <BasicTimer_Config+0x1d8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d103      	bne.n	8001262 <BasicTimer_Config+0x1ba>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 800125a:	2032      	movs	r0, #50	; 0x32
 800125c:	f7ff ff06 	bl	800106c <__NVIC_EnableIRQ>
 8001260:	e000      	b.n	8001264 <BasicTimer_Config+0x1bc>
	}
	else{
		__NOP();
 8001262:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001264:	b662      	cpsie	i
}
 8001266:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40010000 	.word	0x40010000
 8001274:	40023800 	.word	0x40023800
 8001278:	40000400 	.word	0x40000400
 800127c:	40000800 	.word	0x40000800
 8001280:	40000c00 	.word	0x40000c00

08001284 <BasicTimer2_Callback>:


__attribute__((weak)) void BasicTimer2_Callback(void){
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001288:	bf00      	nop
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001298:	bf00      	nop
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80012a8:	bf00      	nop
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80012b8:	bf00      	nop
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80012c8:	bf00      	nop
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80012d8:	bf00      	nop
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80012e8:	bf00      	nop
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80012f8:	bf00      	nop
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001308:	bf00      	nop
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001328:	bf00      	nop
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001338:	bf00      	nop
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001348:	bf00      	nop
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001358:	bf00      	nop
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001368:	bf00      	nop
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001378:	bf00      	nop
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001388:	bf00      	nop
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001398:	bf00      	nop
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80013a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00a      	beq.n	80013cc <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80013b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80013c6:	f7ff ff5d 	bl	8001284 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80013ca:	e066      	b.n	800149a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d012      	beq.n	8001400 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80013da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e4:	f023 0302 	bic.w	r3, r3, #2
 80013e8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80013ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013f8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80013fa:	f7ff ff5b 	bl	80012b4 <Capture_TIM2_Ch1_Callback>
}
 80013fe:	e04c      	b.n	800149a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8001400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800140e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 800141e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800142c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800142e:	f7ff ff49 	bl	80012c4 <Capture_TIM2_Ch2_Callback>
}
 8001432:	e032      	b.n	800149a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8001434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8001442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144c:	f023 0308 	bic.w	r3, r3, #8
 8001450:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8001452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001460:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8001462:	f7ff ff37 	bl	80012d4 <Capture_TIM2_Ch3_Callback>
}
 8001466:	e018      	b.n	800149a <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8001468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d011      	beq.n	800149a <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8001476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001480:	f023 0310 	bic.w	r3, r3, #16
 8001484:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8001486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001494:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8001496:	f7ff ff25 	bl	80012e4 <Capture_TIM2_Ch4_Callback>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	4a2d      	ldr	r2, [pc, #180]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80014bc:	f7ff fcde 	bl	8000e7c <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80014c0:	e052      	b.n	8001568 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00e      	beq.n	80014ec <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4a26      	ldr	r2, [pc, #152]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014d4:	f023 0302 	bic.w	r3, r3, #2
 80014d8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014e4:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80014e6:	f7ff ff05 	bl	80012f4 <Capture_TIM3_Ch1_Callback>
}
 80014ea:	e03d      	b.n	8001568 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00e      	beq.n	8001516 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <TIM3_IRQHandler+0xcc>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	4a18      	ldr	r2, [pc, #96]	; (800156c <TIM3_IRQHandler+0xcc>)
 800150a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800150e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8001510:	f7ff fef8 	bl	8001304 <Capture_TIM3_Ch2_Callback>
}
 8001514:	e028      	b.n	8001568 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00e      	beq.n	8001540 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001528:	f023 0308 	bic.w	r3, r3, #8
 800152c:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001538:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 800153a:	f7ff feeb 	bl	8001314 <Capture_TIM3_Ch3_Callback>
}
 800153e:	e013      	b.n	8001568 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00d      	beq.n	8001568 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <TIM3_IRQHandler+0xcc>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <TIM3_IRQHandler+0xcc>)
 8001552:	f023 0310 	bic.w	r3, r3, #16
 8001556:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <TIM3_IRQHandler+0xcc>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <TIM3_IRQHandler+0xcc>)
 800155e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001562:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8001564:	f7ff fede 	bl	8001324 <Capture_TIM3_Ch4_Callback>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40000400 	.word	0x40000400

08001570 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8001580:	4b2e      	ldr	r3, [pc, #184]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a2d      	ldr	r2, [pc, #180]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 800158c:	f7ff fe82 	bl	8001294 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8001590:	e052      	b.n	8001638 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00e      	beq.n	80015bc <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	4a26      	ldr	r2, [pc, #152]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015a4:	f023 0302 	bic.w	r3, r3, #2
 80015a8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015b4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80015b6:	f7ff febd 	bl	8001334 <Capture_TIM4_Ch1_Callback>
}
 80015ba:	e03d      	b.n	8001638 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00e      	beq.n	80015e6 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015ce:	f023 0304 	bic.w	r3, r3, #4
 80015d2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015de:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80015e0:	f7ff fec8 	bl	8001374 <Capture_TIM5_Ch2_Callback>
}
 80015e4:	e028      	b.n	8001638 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00e      	beq.n	8001610 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <TIM4_IRQHandler+0xcc>)
 80015f8:	f023 0308 	bic.w	r3, r3, #8
 80015fc:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001608:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 800160a:	f7ff fe9b 	bl	8001344 <Capture_TIM4_Ch3_Callback>
}
 800160e:	e013      	b.n	8001638 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00d      	beq.n	8001638 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <TIM4_IRQHandler+0xcc>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <TIM4_IRQHandler+0xcc>)
 8001622:	f023 0310 	bic.w	r3, r3, #16
 8001626:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <TIM4_IRQHandler+0xcc>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <TIM4_IRQHandler+0xcc>)
 800162e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001632:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8001634:	f7ff fe8e 	bl	8001354 <Capture_TIM4_Ch4_Callback>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40000800 	.word	0x40000800

08001640 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <TIM5_IRQHandler+0xcc>)
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <TIM5_IRQHandler+0xcc>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	4a2d      	ldr	r2, [pc, #180]	; (800170c <TIM5_IRQHandler+0xcc>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 800165c:	f7ff fe22 	bl	80012a4 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8001660:	e052      	b.n	8001708 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <TIM5_IRQHandler+0xcc>)
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00e      	beq.n	800168c <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <TIM5_IRQHandler+0xcc>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	4a26      	ldr	r2, [pc, #152]	; (800170c <TIM5_IRQHandler+0xcc>)
 8001674:	f023 0302 	bic.w	r3, r3, #2
 8001678:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <TIM5_IRQHandler+0xcc>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <TIM5_IRQHandler+0xcc>)
 8001680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001684:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8001686:	f7ff fe6d 	bl	8001364 <Capture_TIM5_Ch1_Callback>
}
 800168a:	e03d      	b.n	8001708 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <TIM5_IRQHandler+0xcc>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <TIM5_IRQHandler+0xcc>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <TIM5_IRQHandler+0xcc>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016ae:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80016b0:	f7ff fe60 	bl	8001374 <Capture_TIM5_Ch2_Callback>
}
 80016b4:	e028      	b.n	8001708 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00e      	beq.n	80016e0 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016c8:	f023 0308 	bic.w	r3, r3, #8
 80016cc:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016d8:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80016da:	f7ff fe53 	bl	8001384 <Capture_TIM5_Ch3_Callback>
}
 80016de:	e013      	b.n	8001708 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00d      	beq.n	8001708 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016f2:	f023 0310 	bic.w	r3, r3, #16
 80016f6:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <TIM5_IRQHandler+0xcc>)
 80016fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001702:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8001704:	f7ff fe46 	bl	8001394 <Capture_TIM5_Ch4_Callback>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40000c00 	.word	0x40000c00

08001710 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a88      	ldr	r2, [pc, #544]	; (800196c <GPIO_Config+0x238>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d106      	bne.n	800175c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800174e:	4b88      	ldr	r3, [pc, #544]	; (8001970 <GPIO_Config+0x23c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <GPIO_Config+0x23c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	e03a      	b.n	80017d2 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a84      	ldr	r2, [pc, #528]	; (8001974 <GPIO_Config+0x240>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d106      	bne.n	8001774 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001766:	4b82      	ldr	r3, [pc, #520]	; (8001970 <GPIO_Config+0x23c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a81      	ldr	r2, [pc, #516]	; (8001970 <GPIO_Config+0x23c>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	e02e      	b.n	80017d2 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a7f      	ldr	r2, [pc, #508]	; (8001978 <GPIO_Config+0x244>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d106      	bne.n	800178c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800177e:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <GPIO_Config+0x23c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a7b      	ldr	r2, [pc, #492]	; (8001970 <GPIO_Config+0x23c>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	e022      	b.n	80017d2 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7a      	ldr	r2, [pc, #488]	; (800197c <GPIO_Config+0x248>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d106      	bne.n	80017a4 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001796:	4b76      	ldr	r3, [pc, #472]	; (8001970 <GPIO_Config+0x23c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a75      	ldr	r2, [pc, #468]	; (8001970 <GPIO_Config+0x23c>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	e016      	b.n	80017d2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a75      	ldr	r2, [pc, #468]	; (8001980 <GPIO_Config+0x24c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d106      	bne.n	80017bc <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80017ae:	4b70      	ldr	r3, [pc, #448]	; (8001970 <GPIO_Config+0x23c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a6f      	ldr	r2, [pc, #444]	; (8001970 <GPIO_Config+0x23c>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	e00a      	b.n	80017d2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a70      	ldr	r2, [pc, #448]	; (8001984 <GPIO_Config+0x250>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d105      	bne.n	80017d2 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80017c6:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <GPIO_Config+0x23c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a69      	ldr	r2, [pc, #420]	; (8001970 <GPIO_Config+0x23c>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	795b      	ldrb	r3, [r3, #5]
 80017d6:	461a      	mov	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	791b      	ldrb	r3, [r3, #4]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2103      	movs	r1, #3
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6819      	ldr	r1, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7a1b      	ldrb	r3, [r3, #8]
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	4619      	mov	r1, r3
 800182e:	2301      	movs	r3, #1
 8001830:	408b      	lsls	r3, r1
 8001832:	43db      	mvns	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	400a      	ands	r2, r1
 800183c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	799b      	ldrb	r3, [r3, #6]
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2103      	movs	r1, #3
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	4619      	mov	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	400a      	ands	r2, r1
 800187c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6899      	ldr	r1, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	79db      	ldrb	r3, [r3, #7]
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	791b      	ldrb	r3, [r3, #4]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2103      	movs	r1, #3
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	400a      	ands	r2, r1
 80018bc:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68d9      	ldr	r1, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	795b      	ldrb	r3, [r3, #5]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d143      	bne.n	800195e <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	791b      	ldrb	r3, [r3, #4]
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d81f      	bhi.n	800191e <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	791b      	ldrb	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	210f      	movs	r1, #15
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	400a      	ands	r2, r1
 80018fe:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a5b      	ldrb	r3, [r3, #9]
 800190a:	4619      	mov	r1, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	4619      	mov	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 800191c:	e01f      	b.n	800195e <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	3b08      	subs	r3, #8
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192e:	210f      	movs	r1, #15
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	4619      	mov	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	400a      	ands	r2, r1
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7a5b      	ldrb	r3, [r3, #9]
 800194c:	4619      	mov	r1, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	4619      	mov	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40020000 	.word	0x40020000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020400 	.word	0x40020400
 8001978:	40020800 	.word	0x40020800
 800197c:	40020c00 	.word	0x40020c00
 8001980:	40021000 	.word	0x40021000
 8001984:	40021c00 	.word	0x40021c00

08001988 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d10d      	bne.n	80019b6 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	791b      	ldrb	r3, [r3, #4]
 80019a4:	4619      	mov	r1, r3
 80019a6:	2301      	movs	r3, #1
 80019a8:	408b      	lsls	r3, r1
 80019aa:	4619      	mov	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80019b4:	e00d      	b.n	80019d2 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	3310      	adds	r3, #16
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	461a      	mov	r2, r3
 80019f0:	2301      	movs	r3, #1
 80019f2:	4093      	lsls	r3, r2
 80019f4:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	791b      	ldrb	r3, [r3, #4]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	40d3      	lsrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ffd8 	bl	80019de <GPIO_ReadPin>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffa1 	bl	8001988 <GPIO_WritePin>
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	791b      	ldrb	r3, [r3, #4]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	f200 809f 	bhi.w	8001ba0 <setDuttyCycle+0x150>
 8001a62:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <setDuttyCycle+0x18>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001ac3 	.word	0x08001ac3
 8001a70:	08001b0d 	.word	0x08001b0d
 8001a74:	08001b57 	.word	0x08001b57
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a7e:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <setDuttyCycle+0x15c>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	ee17 0a90 	vmov	r0, s15
 8001a92:	f7fe fd61 	bl	8000558 <__aeabi_f2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <setDuttyCycle+0x160>)
 8001aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aa8:	f7fe fed8 	bl	800085c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681c      	ldr	r4, [r3, #0]
 8001ab8:	f7ff f87e 	bl	8000bb8 <__aeabi_d2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8001ac0:	e06f      	b.n	8001ba2 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ac8:	4b38      	ldr	r3, [pc, #224]	; (8001bac <setDuttyCycle+0x15c>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad8:	ee17 0a90 	vmov	r0, s15
 8001adc:	f7fe fd3c 	bl	8000558 <__aeabi_f2d>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <setDuttyCycle+0x160>)
 8001aee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001af2:	f7fe feb3 	bl	800085c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681c      	ldr	r4, [r3, #0]
 8001b02:	f7ff f859 	bl	8000bb8 <__aeabi_d2uiz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8001b0a:	e04a      	b.n	8001ba2 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <setDuttyCycle+0x15c>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f7fe fd17 	bl	8000558 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <setDuttyCycle+0x160>)
 8001b38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b3c:	f7fe fe8e 	bl	800085c <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681c      	ldr	r4, [r3, #0]
 8001b4c:	f7ff f834 	bl	8000bb8 <__aeabi_d2uiz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8001b54:	e025      	b.n	8001ba2 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <setDuttyCycle+0x15c>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	ee17 0a90 	vmov	r0, s15
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <setDuttyCycle+0x160>)
 8001b82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b86:	f7fe fe69 	bl	800085c <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681c      	ldr	r4, [r3, #0]
 8001b96:	f7ff f80f 	bl	8000bb8 <__aeabi_d2uiz>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001b9e:	e000      	b.n	8001ba2 <setDuttyCycle+0x152>
	}

	default:{
		break;
 8001ba0:	bf00      	nop
	}

	}// fin del switch-case

}
 8001ba2:	bf00      	nop
 8001ba4:	372c      	adds	r7, #44	; 0x2c
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002da 	.word	0x200002da
 8001bb0:	40590000 	.word	0x40590000

08001bb4 <updateDuttyCycle>:

}


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, float newDutty){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	ed87 0a00 	vstr	s0, [r7]
	// Actualizamos el registro que manipula el dutty
    ptrPwmHandler->config.duttyCicle = newDutty;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	611a      	str	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff42 	bl	8001a50 <setDuttyCycle>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <RCC_enableMaxFrequencies+0xd8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <RCC_enableMaxFrequencies+0xd8>)
 8001bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf6:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c14:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8001c18:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c20:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c24:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c30:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001c32:	e000      	b.n	8001c36 <RCC_enableMaxFrequencies+0x62>
		__NOP();
 8001c34:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f8      	beq.n	8001c34 <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c48:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c4c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c58:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c64:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <RCC_enableMaxFrequencies+0xdc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <RCC_enableMaxFrequencies+0xdc>)
 8001c6c:	f023 030f 	bic.w	r3, r3, #15
 8001c70:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <RCC_enableMaxFrequencies+0xdc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <RCC_enableMaxFrequencies+0xdc>)
 8001c78:	f043 0303 	orr.w	r3, r3, #3
 8001c7c:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8001c8a:	e000      	b.n	8001c8e <RCC_enableMaxFrequencies+0xba>
		__NOP();
 8001c8c:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <RCC_enableMaxFrequencies+0xd4>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f8      	beq.n	8001c8c <RCC_enableMaxFrequencies+0xb8>
	}



}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <__NVIC_EnableIRQ>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a8f      	ldr	r2, [pc, #572]	; (8001f40 <USART_Config+0x250>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d106      	bne.n	8001d14 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001d06:	4b8f      	ldr	r3, [pc, #572]	; (8001f44 <USART_Config+0x254>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a8e      	ldr	r2, [pc, #568]	; (8001f44 <USART_Config+0x254>)
 8001d0c:	f043 0310 	orr.w	r3, r3, #16
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	e018      	b.n	8001d46 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a8b      	ldr	r2, [pc, #556]	; (8001f48 <USART_Config+0x258>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d106      	bne.n	8001d2c <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001d1e:	4b89      	ldr	r3, [pc, #548]	; (8001f44 <USART_Config+0x254>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a88      	ldr	r2, [pc, #544]	; (8001f44 <USART_Config+0x254>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	e00c      	b.n	8001d46 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a86      	ldr	r2, [pc, #536]	; (8001f4c <USART_Config+0x25c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d106      	bne.n	8001d44 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001d36:	4b83      	ldr	r3, [pc, #524]	; (8001f44 <USART_Config+0x254>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a82      	ldr	r2, [pc, #520]	; (8001f44 <USART_Config+0x254>)
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	e000      	b.n	8001d46 <USART_Config+0x56>
	}
	else{
		__NOP();
 8001d44:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7a5b      	ldrb	r3, [r3, #9]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d025      	beq.n	8001daa <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7a5b      	ldrb	r3, [r3, #9]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d110      	bne.n	8001d88 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d74:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	e018      	b.n	8001dba <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d96:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	e007      	b.n	8001dba <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db8:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7a1b      	ldrb	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	e007      	b.n	8001de4 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001de2:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7a9b      	ldrb	r3, [r3, #10]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d82f      	bhi.n	8001e4c <USART_Config+0x15c>
 8001dec:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <USART_Config+0x104>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e05 	.word	0x08001e05
 8001df8:	08001e17 	.word	0x08001e17
 8001dfc:	08001e29 	.word	0x08001e29
 8001e00:	08001e3b 	.word	0x08001e3b
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e12:	611a      	str	r2, [r3, #16]
			break;
 8001e14:	e023      	b.n	8001e5e <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e24:	611a      	str	r2, [r3, #16]
			break;
 8001e26:	e01a      	b.n	8001e5e <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e36:	611a      	str	r2, [r3, #16]
			break;
 8001e38:	e011      	b.n	8001e5e <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001e48:	611a      	str	r2, [r3, #16]
			break;
 8001e4a:	e008      	b.n	8001e5e <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e5a:	611a      	str	r2, [r3, #16]
			break;
 8001e5c:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681c      	ldr	r4, [r3, #0]
 8001e66:	4611      	mov	r1, r2
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f8cd 	bl	8002008 <brrCalculus>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	799b      	ldrb	r3, [r3, #6]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d82e      	bhi.n	8001ed8 <USART_Config+0x1e8>
 8001e7a:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <USART_Config+0x190>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001e91 	.word	0x08001e91
 8001e84:	08001ea3 	.word	0x08001ea3
 8001e88:	08001eb5 	.word	0x08001eb5
 8001e8c:	08001ec7 	.word	0x08001ec7
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0208 	orr.w	r2, r2, #8
 8001e9e:	60da      	str	r2, [r3, #12]
			break;
 8001ea0:	e023      	b.n	8001eea <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0204 	orr.w	r2, r2, #4
 8001eb0:	60da      	str	r2, [r3, #12]
			break;
 8001eb2:	e01a      	b.n	8001eea <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 020c 	orr.w	r2, r2, #12
 8001ec2:	60da      	str	r2, [r3, #12]
			break;
 8001ec4:	e011      	b.n	8001eea <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 020c 	bic.w	r2, r2, #12
 8001ed4:	60da      	str	r2, [r3, #12]
			break;
 8001ed6:	e008      	b.n	8001eea <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020c 	bic.w	r2, r2, #12
 8001ee6:	60da      	str	r2, [r3, #12]
			break;
 8001ee8:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	799b      	ldrb	r3, [r3, #6]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d008      	beq.n	8001f04 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	e007      	b.n	8001f14 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f12:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	795b      	ldrb	r3, [r3, #5]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d12d      	bne.n	8001f78 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0220 	orr.w	r2, r2, #32
 8001f2a:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <USART_Config+0x250>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10c      	bne.n	8001f50 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8001f36:	2025      	movs	r0, #37	; 0x25
 8001f38:	f7ff febc 	bl	8001cb4 <__NVIC_EnableIRQ>
 8001f3c:	e024      	b.n	8001f88 <USART_Config+0x298>
 8001f3e:	bf00      	nop
 8001f40:	40011000 	.word	0x40011000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40004400 	.word	0x40004400
 8001f4c:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <USART_Config+0x308>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d103      	bne.n	8001f62 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8001f5a:	2026      	movs	r0, #38	; 0x26
 8001f5c:	f7ff feaa 	bl	8001cb4 <__NVIC_EnableIRQ>
 8001f60:	e012      	b.n	8001f88 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <USART_Config+0x30c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d103      	bne.n	8001f74 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8001f6c:	2047      	movs	r0, #71	; 0x47
 8001f6e:	f7ff fea1 	bl	8001cb4 <__NVIC_EnableIRQ>
 8001f72:	e009      	b.n	8001f88 <USART_Config+0x298>
		}
		else{
				__NOP();
 8001f74:	bf00      	nop
 8001f76:	e007      	b.n	8001f88 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0220 	bic.w	r2, r2, #32
 8001f86:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d124      	bne.n	8001fda <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f9e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a16      	ldr	r2, [pc, #88]	; (8002000 <USART_Config+0x310>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d103      	bne.n	8001fb2 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8001faa:	2025      	movs	r0, #37	; 0x25
 8001fac:	f7ff fe82 	bl	8001cb4 <__NVIC_EnableIRQ>
 8001fb0:	e01b      	b.n	8001fea <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <USART_Config+0x308>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d103      	bne.n	8001fc4 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8001fbc:	2026      	movs	r0, #38	; 0x26
 8001fbe:	f7ff fe79 	bl	8001cb4 <__NVIC_EnableIRQ>
 8001fc2:	e012      	b.n	8001fea <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <USART_Config+0x30c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d103      	bne.n	8001fd6 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8001fce:	2047      	movs	r0, #71	; 0x47
 8001fd0:	f7ff fe70 	bl	8001cb4 <__NVIC_EnableIRQ>
 8001fd4:	e009      	b.n	8001fea <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8001fd6:	bf00      	nop
 8001fd8:	e007      	b.n	8001fea <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fea:	b662      	cpsie	i
}
 8001fec:	bf00      	nop
	}

	__enable_irq();
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	40011400 	.word	0x40011400
 8002000:	40011000 	.word	0x40011000
 8002004:	00000000 	.word	0x00000000

08002008 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	79db      	ldrb	r3, [r3, #7]
 8002016:	2b03      	cmp	r3, #3
 8002018:	f200 8217 	bhi.w	800244a <brrCalculus+0x442>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <brrCalculus+0x1c>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002035 	.word	0x08002035
 8002028:	0800212f 	.word	0x0800212f
 800202c:	08002249 	.word	0x08002249
 8002030:	08002351 	.word	0x08002351

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8002034:	4980      	ldr	r1, [pc, #512]	; (8002238 <brrCalculus+0x230>)
 8002036:	a37c      	add	r3, pc, #496	; (adr r3, 8002228 <brrCalculus+0x220>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204a:	ee17 0a90 	vmov	r0, s15
 800204e:	f7fe fa83 	bl	8000558 <__aeabi_f2d>
 8002052:	4b79      	ldr	r3, [pc, #484]	; (8002238 <brrCalculus+0x230>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe fad6 	bl	8000608 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4975      	ldr	r1, [pc, #468]	; (8002238 <brrCalculus+0x230>)
 8002062:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <brrCalculus+0x230>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fd7a 	bl	8000b68 <__aeabi_d2iz>
 8002074:	4603      	mov	r3, r0
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b70      	ldr	r3, [pc, #448]	; (800223c <brrCalculus+0x234>)
 800207a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800207c:	4b6e      	ldr	r3, [pc, #440]	; (8002238 <brrCalculus+0x230>)
 800207e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002082:	4b6d      	ldr	r3, [pc, #436]	; (8002238 <brrCalculus+0x230>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fd6c 	bl	8000b68 <__aeabi_d2iz>
 8002090:	4603      	mov	r3, r0
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa4e 	bl	8000534 <__aeabi_i2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe f8fa 	bl	8000298 <__aeabi_dsub>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fda4 	bl	8000bf8 <__aeabi_d2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4a63      	ldr	r2, [pc, #396]	; (8002240 <brrCalculus+0x238>)
 80020b4:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <brrCalculus+0x238>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	2004      	movs	r0, #4
 80020be:	eeb0 0a67 	vmov.f32	s0, s15
 80020c2:	f000 fa55 	bl	8002570 <roundToNDecimals>
 80020c6:	eef0 7a40 	vmov.f32	s15, s0
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <brrCalculus+0x238>)
 80020cc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80020d0:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <brrCalculus+0x238>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80020da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020de:	4b58      	ldr	r3, [pc, #352]	; (8002240 <brrCalculus+0x238>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80020e4:	4b56      	ldr	r3, [pc, #344]	; (8002240 <brrCalculus+0x238>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa35 	bl	8000558 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	ec43 2b10 	vmov	d0, r2, r3
 80020f6:	f002 ffd3 	bl	80050a0 <round>
 80020fa:	ec53 2b10 	vmov	r2, r3, d0
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	f7fe fd79 	bl	8000bf8 <__aeabi_d2f>
 8002106:	4603      	mov	r3, r0
 8002108:	4a4d      	ldr	r2, [pc, #308]	; (8002240 <brrCalculus+0x238>)
 800210a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800210c:	4b4b      	ldr	r3, [pc, #300]	; (800223c <brrCalculus+0x234>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <brrCalculus+0x238>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800211e:	ee17 3a90 	vmov	r3, s15
 8002122:	b29b      	uxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <brrCalculus+0x23c>)
 800212a:	801a      	strh	r2, [r3, #0]


		break;
 800212c:	e18f      	b.n	800244e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800212e:	4942      	ldr	r1, [pc, #264]	; (8002238 <brrCalculus+0x230>)
 8002130:	a33f      	add	r3, pc, #252	; (adr r3, 8002230 <brrCalculus+0x228>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002144:	ee17 0a90 	vmov	r0, s15
 8002148:	f7fe fa06 	bl	8000558 <__aeabi_f2d>
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <brrCalculus+0x230>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fa59 	bl	8000608 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4937      	ldr	r1, [pc, #220]	; (8002238 <brrCalculus+0x230>)
 800215c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <brrCalculus+0x230>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fcfd 	bl	8000b68 <__aeabi_d2iz>
 800216e:	4603      	mov	r3, r0
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b32      	ldr	r3, [pc, #200]	; (800223c <brrCalculus+0x234>)
 8002174:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <brrCalculus+0x230>)
 8002178:	e9d3 4500 	ldrd	r4, r5, [r3]
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <brrCalculus+0x230>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fcef 	bl	8000b68 <__aeabi_d2iz>
 800218a:	4603      	mov	r3, r0
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9d1 	bl	8000534 <__aeabi_i2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	f7fe f87d 	bl	8000298 <__aeabi_dsub>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fd27 	bl	8000bf8 <__aeabi_d2f>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <brrCalculus+0x238>)
 80021ae:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <brrCalculus+0x238>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	2004      	movs	r0, #4
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f000 f9d8 	bl	8002570 <roundToNDecimals>
 80021c0:	eef0 7a40 	vmov.f32	s15, s0
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <brrCalculus+0x238>)
 80021c6:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <brrCalculus+0x238>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <brrCalculus+0x238>)
 80021da:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <brrCalculus+0x238>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b8 	bl	8000558 <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	ec43 2b10 	vmov	d0, r2, r3
 80021f0:	f002 ff56 	bl	80050a0 <round>
 80021f4:	ec53 2b10 	vmov	r2, r3, d0
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fcfc 	bl	8000bf8 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <brrCalculus+0x238>)
 8002204:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <brrCalculus+0x234>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <brrCalculus+0x238>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002218:	ee17 3a90 	vmov	r3, s15
 800221c:	b29b      	uxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b29a      	uxth	r2, r3
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <brrCalculus+0x23c>)
 8002224:	801a      	strh	r2, [r3, #0]


		break;
 8002226:	e112      	b.n	800244e <brrCalculus+0x446>
 8002228:	b4e81b4f 	.word	0xb4e81b4f
 800222c:	3edb4e81 	.word	0x3edb4e81
 8002230:	b4e81b4f 	.word	0xb4e81b4f
 8002234:	3ecb4e81 	.word	0x3ecb4e81
 8002238:	200002e8 	.word	0x200002e8
 800223c:	200002de 	.word	0x200002de
 8002240:	200002e0 	.word	0x200002e0
 8002244:	200002dc 	.word	0x200002dc
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8002248:	4989      	ldr	r1, [pc, #548]	; (8002470 <brrCalculus+0x468>)
 800224a:	a385      	add	r3, pc, #532	; (adr r3, 8002460 <brrCalculus+0x458>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225e:	ee17 0a90 	vmov	r0, s15
 8002262:	f7fe f979 	bl	8000558 <__aeabi_f2d>
 8002266:	4b82      	ldr	r3, [pc, #520]	; (8002470 <brrCalculus+0x468>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f9cc 	bl	8000608 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	497e      	ldr	r1, [pc, #504]	; (8002470 <brrCalculus+0x468>)
 8002276:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <brrCalculus+0x468>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fc70 	bl	8000b68 <__aeabi_d2iz>
 8002288:	4603      	mov	r3, r0
 800228a:	b29a      	uxth	r2, r3
 800228c:	4b79      	ldr	r3, [pc, #484]	; (8002474 <brrCalculus+0x46c>)
 800228e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8002290:	4b77      	ldr	r3, [pc, #476]	; (8002470 <brrCalculus+0x468>)
 8002292:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <brrCalculus+0x468>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc62 	bl	8000b68 <__aeabi_d2iz>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f944 	bl	8000534 <__aeabi_i2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fd fff0 	bl	8000298 <__aeabi_dsub>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fc9a 	bl	8000bf8 <__aeabi_d2f>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a6c      	ldr	r2, [pc, #432]	; (8002478 <brrCalculus+0x470>)
 80022c8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80022ca:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <brrCalculus+0x470>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	2004      	movs	r0, #4
 80022d2:	eeb0 0a67 	vmov.f32	s0, s15
 80022d6:	f000 f94b 	bl	8002570 <roundToNDecimals>
 80022da:	eef0 7a40 	vmov.f32	s15, s0
 80022de:	4b66      	ldr	r3, [pc, #408]	; (8002478 <brrCalculus+0x470>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <brrCalculus+0x470>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80022ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <brrCalculus+0x470>)
 80022f4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 80022f8:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <brrCalculus+0x470>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f92b 	bl	8000558 <__aeabi_f2d>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	ec43 2b10 	vmov	d0, r2, r3
 800230a:	f002 fec9 	bl	80050a0 <round>
 800230e:	ec51 0b10 	vmov	r0, r1, d0
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <brrCalculus+0x474>)
 8002318:	f7fd ffc0 	bl	800029c <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fc68 	bl	8000bf8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	4a53      	ldr	r2, [pc, #332]	; (8002478 <brrCalculus+0x470>)
 800232c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800232e:	4b51      	ldr	r3, [pc, #324]	; (8002474 <brrCalculus+0x46c>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b50      	ldr	r3, [pc, #320]	; (8002478 <brrCalculus+0x470>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002340:	ee17 3a90 	vmov	r3, s15
 8002344:	b29b      	uxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b29a      	uxth	r2, r3
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <brrCalculus+0x478>)
 800234c:	801a      	strh	r2, [r3, #0]


		break;
 800234e:	e07e      	b.n	800244e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8002350:	4947      	ldr	r1, [pc, #284]	; (8002470 <brrCalculus+0x468>)
 8002352:	a345      	add	r3, pc, #276	; (adr r3, 8002468 <brrCalculus+0x460>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002366:	ee17 0a90 	vmov	r0, s15
 800236a:	f7fe f8f5 	bl	8000558 <__aeabi_f2d>
 800236e:	4b40      	ldr	r3, [pc, #256]	; (8002470 <brrCalculus+0x468>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f948 	bl	8000608 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	493c      	ldr	r1, [pc, #240]	; (8002470 <brrCalculus+0x468>)
 800237e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <brrCalculus+0x468>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fbec 	bl	8000b68 <__aeabi_d2iz>
 8002390:	4603      	mov	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <brrCalculus+0x46c>)
 8002396:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <brrCalculus+0x468>)
 800239a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <brrCalculus+0x468>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fbde 	bl	8000b68 <__aeabi_d2iz>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8c0 	bl	8000534 <__aeabi_i2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fd ff6c 	bl	8000298 <__aeabi_dsub>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fc16 	bl	8000bf8 <__aeabi_d2f>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <brrCalculus+0x470>)
 80023d0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <brrCalculus+0x470>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	2004      	movs	r0, #4
 80023da:	eeb0 0a67 	vmov.f32	s0, s15
 80023de:	f000 f8c7 	bl	8002570 <roundToNDecimals>
 80023e2:	eef0 7a40 	vmov.f32	s15, s0
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <brrCalculus+0x470>)
 80023e8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <brrCalculus+0x470>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80023f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fa:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <brrCalculus+0x470>)
 80023fc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <brrCalculus+0x470>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8a7 	bl	8000558 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	ec43 2b10 	vmov	d0, r2, r3
 8002412:	f002 fe45 	bl	80050a0 <round>
 8002416:	ec53 2b10 	vmov	r2, r3, d0
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	f7fe fbeb 	bl	8000bf8 <__aeabi_d2f>
 8002422:	4603      	mov	r3, r0
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <brrCalculus+0x470>)
 8002426:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <brrCalculus+0x46c>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <brrCalculus+0x470>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243a:	ee17 3a90 	vmov	r3, s15
 800243e:	b29b      	uxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <brrCalculus+0x478>)
 8002446:	801a      	strh	r2, [r3, #0]


		break;
 8002448:	e001      	b.n	800244e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800244a:	bf00      	nop
		break;
 800244c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <brrCalculus+0x478>)
 8002450:	881b      	ldrh	r3, [r3, #0]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bdb0      	pop	{r4, r5, r7, pc}
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w
 8002460:	789abcdf 	.word	0x789abcdf
 8002464:	3ec23456 	.word	0x3ec23456
 8002468:	789abcdf 	.word	0x789abcdf
 800246c:	3ea23456 	.word	0x3ea23456
 8002470:	200002e8 	.word	0x200002e8
 8002474:	200002de 	.word	0x200002de
 8002478:	200002e0 	.word	0x200002e0
 800247c:	3ff00000 	.word	0x3ff00000
 8002480:	200002dc 	.word	0x200002dc

08002484 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800248e:	e000      	b.n	8002492 <writeChar+0xe>
		__NOP();
 8002490:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f7      	beq.n	8002490 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	605a      	str	r2, [r3, #4]

}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <usart1Rx_Callback>:
}

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	__NOP();
 80024b8:	bf00      	nop
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
	__NOP();
 80024c8:	bf00      	nop
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
	return auxRxData;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <getRxData+0x14>)
 80024da:	781b      	ldrb	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	200002f0 	.word	0x200002f0

080024ec <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <USART2_IRQHandler+0x24>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <USART2_IRQHandler+0x24>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <USART2_IRQHandler+0x28>)
 8002504:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8002506:	f7fe fcc3 	bl	8000e90 <usart2Rx_Callback>
	}

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40004400 	.word	0x40004400
 8002514:	200002f0 	.word	0x200002f0

08002518 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <USART1_IRQHandler+0x24>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <USART1_IRQHandler+0x24>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <USART1_IRQHandler+0x28>)
 8002530:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8002532:	f7ff ffbf 	bl	80024b4 <usart1Rx_Callback>
	}
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40011000 	.word	0x40011000
 8002540:	200002f0 	.word	0x200002f0

08002544 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <USART6_IRQHandler+0x24>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <USART6_IRQHandler+0x24>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b04      	ldr	r3, [pc, #16]	; (800256c <USART6_IRQHandler+0x28>)
 800255c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800255e:	f7ff ffb1 	bl	80024c4 <usart6Rx_Callback>
	}

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40011400 	.word	0x40011400
 800256c:	200002f0 	.word	0x200002f0

08002570 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	ed87 0a01 	vstr	s0, [r7, #4]
 800257a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800257c:	6838      	ldr	r0, [r7, #0]
 800257e:	f7fd ffd9 	bl	8000534 <__aeabi_i2d>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	ec43 2b11 	vmov	d1, r2, r3
 800258a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8002608 <roundToNDecimals+0x98>
 800258e:	f002 fdcd 	bl	800512c <pow>
 8002592:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fd ffde 	bl	8000558 <__aeabi_f2d>
 800259c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a0:	f7fe f832 	bl	8000608 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7fe fb24 	bl	8000bf8 <__aeabi_d2f>
 80025b0:	4603      	mov	r3, r0
 80025b2:	607b      	str	r3, [r7, #4]

    number = round(number);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fd ffcf 	bl	8000558 <__aeabi_f2d>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	ec43 2b10 	vmov	d0, r2, r3
 80025c2:	f002 fd6d 	bl	80050a0 <round>
 80025c6:	ec53 2b10 	vmov	r2, r3, d0
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fb13 	bl	8000bf8 <__aeabi_d2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	607b      	str	r3, [r7, #4]

    number /= factor;
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fd ffbe 	bl	8000558 <__aeabi_f2d>
 80025dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025e0:	f7fe f93c 	bl	800085c <__aeabi_ddiv>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fb04 	bl	8000bf8 <__aeabi_d2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	607b      	str	r3, [r7, #4]

    return number;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	ee07 3a90 	vmov	s15, r3
}
 80025fa:	eeb0 0a67 	vmov.f32	s0, s15
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	f3af 8000 	nop.w
 8002608:	00000000 	.word	0x00000000
 800260c:	40240000 	.word	0x40240000

08002610 <__errno>:
 8002610:	4b01      	ldr	r3, [pc, #4]	; (8002618 <__errno+0x8>)
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000004 	.word	0x20000004

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4d0d      	ldr	r5, [pc, #52]	; (8002654 <__libc_init_array+0x38>)
 8002620:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002622:	1b64      	subs	r4, r4, r5
 8002624:	10a4      	asrs	r4, r4, #2
 8002626:	2600      	movs	r6, #0
 8002628:	42a6      	cmp	r6, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	4d0b      	ldr	r5, [pc, #44]	; (800265c <__libc_init_array+0x40>)
 800262e:	4c0c      	ldr	r4, [pc, #48]	; (8002660 <__libc_init_array+0x44>)
 8002630:	f003 fca6 	bl	8005f80 <_init>
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	2600      	movs	r6, #0
 800263a:	42a6      	cmp	r6, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f855 3b04 	ldr.w	r3, [r5], #4
 8002644:	4798      	blx	r3
 8002646:	3601      	adds	r6, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f855 3b04 	ldr.w	r3, [r5], #4
 800264e:	4798      	blx	r3
 8002650:	3601      	adds	r6, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	080063a8 	.word	0x080063a8
 8002658:	080063a8 	.word	0x080063a8
 800265c:	080063a8 	.word	0x080063a8
 8002660:	080063ac 	.word	0x080063ac

08002664 <memset>:
 8002664:	4402      	add	r2, r0
 8002666:	4603      	mov	r3, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <__cvt>:
 8002674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002678:	ec55 4b10 	vmov	r4, r5, d0
 800267c:	2d00      	cmp	r5, #0
 800267e:	460e      	mov	r6, r1
 8002680:	4619      	mov	r1, r3
 8002682:	462b      	mov	r3, r5
 8002684:	bfbb      	ittet	lt
 8002686:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800268a:	461d      	movlt	r5, r3
 800268c:	2300      	movge	r3, #0
 800268e:	232d      	movlt	r3, #45	; 0x2d
 8002690:	700b      	strb	r3, [r1, #0]
 8002692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002694:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002698:	4691      	mov	r9, r2
 800269a:	f023 0820 	bic.w	r8, r3, #32
 800269e:	bfbc      	itt	lt
 80026a0:	4622      	movlt	r2, r4
 80026a2:	4614      	movlt	r4, r2
 80026a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80026a8:	d005      	beq.n	80026b6 <__cvt+0x42>
 80026aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80026ae:	d100      	bne.n	80026b2 <__cvt+0x3e>
 80026b0:	3601      	adds	r6, #1
 80026b2:	2102      	movs	r1, #2
 80026b4:	e000      	b.n	80026b8 <__cvt+0x44>
 80026b6:	2103      	movs	r1, #3
 80026b8:	ab03      	add	r3, sp, #12
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	ab02      	add	r3, sp, #8
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	ec45 4b10 	vmov	d0, r4, r5
 80026c4:	4653      	mov	r3, sl
 80026c6:	4632      	mov	r2, r6
 80026c8:	f000 fcca 	bl	8003060 <_dtoa_r>
 80026cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80026d0:	4607      	mov	r7, r0
 80026d2:	d102      	bne.n	80026da <__cvt+0x66>
 80026d4:	f019 0f01 	tst.w	r9, #1
 80026d8:	d022      	beq.n	8002720 <__cvt+0xac>
 80026da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80026de:	eb07 0906 	add.w	r9, r7, r6
 80026e2:	d110      	bne.n	8002706 <__cvt+0x92>
 80026e4:	783b      	ldrb	r3, [r7, #0]
 80026e6:	2b30      	cmp	r3, #48	; 0x30
 80026e8:	d10a      	bne.n	8002700 <__cvt+0x8c>
 80026ea:	2200      	movs	r2, #0
 80026ec:	2300      	movs	r3, #0
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fe f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80026f6:	b918      	cbnz	r0, 8002700 <__cvt+0x8c>
 80026f8:	f1c6 0601 	rsb	r6, r6, #1
 80026fc:	f8ca 6000 	str.w	r6, [sl]
 8002700:	f8da 3000 	ldr.w	r3, [sl]
 8002704:	4499      	add	r9, r3
 8002706:	2200      	movs	r2, #0
 8002708:	2300      	movs	r3, #0
 800270a:	4620      	mov	r0, r4
 800270c:	4629      	mov	r1, r5
 800270e:	f7fe f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002712:	b108      	cbz	r0, 8002718 <__cvt+0xa4>
 8002714:	f8cd 900c 	str.w	r9, [sp, #12]
 8002718:	2230      	movs	r2, #48	; 0x30
 800271a:	9b03      	ldr	r3, [sp, #12]
 800271c:	454b      	cmp	r3, r9
 800271e:	d307      	bcc.n	8002730 <__cvt+0xbc>
 8002720:	9b03      	ldr	r3, [sp, #12]
 8002722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002724:	1bdb      	subs	r3, r3, r7
 8002726:	4638      	mov	r0, r7
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	b004      	add	sp, #16
 800272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	9103      	str	r1, [sp, #12]
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	e7f0      	b.n	800271a <__cvt+0xa6>

08002738 <__exponent>:
 8002738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800273a:	4603      	mov	r3, r0
 800273c:	2900      	cmp	r1, #0
 800273e:	bfb8      	it	lt
 8002740:	4249      	neglt	r1, r1
 8002742:	f803 2b02 	strb.w	r2, [r3], #2
 8002746:	bfb4      	ite	lt
 8002748:	222d      	movlt	r2, #45	; 0x2d
 800274a:	222b      	movge	r2, #43	; 0x2b
 800274c:	2909      	cmp	r1, #9
 800274e:	7042      	strb	r2, [r0, #1]
 8002750:	dd2a      	ble.n	80027a8 <__exponent+0x70>
 8002752:	f10d 0407 	add.w	r4, sp, #7
 8002756:	46a4      	mov	ip, r4
 8002758:	270a      	movs	r7, #10
 800275a:	46a6      	mov	lr, r4
 800275c:	460a      	mov	r2, r1
 800275e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002762:	fb07 1516 	mls	r5, r7, r6, r1
 8002766:	3530      	adds	r5, #48	; 0x30
 8002768:	2a63      	cmp	r2, #99	; 0x63
 800276a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800276e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002772:	4631      	mov	r1, r6
 8002774:	dcf1      	bgt.n	800275a <__exponent+0x22>
 8002776:	3130      	adds	r1, #48	; 0x30
 8002778:	f1ae 0502 	sub.w	r5, lr, #2
 800277c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002780:	1c44      	adds	r4, r0, #1
 8002782:	4629      	mov	r1, r5
 8002784:	4561      	cmp	r1, ip
 8002786:	d30a      	bcc.n	800279e <__exponent+0x66>
 8002788:	f10d 0209 	add.w	r2, sp, #9
 800278c:	eba2 020e 	sub.w	r2, r2, lr
 8002790:	4565      	cmp	r5, ip
 8002792:	bf88      	it	hi
 8002794:	2200      	movhi	r2, #0
 8002796:	4413      	add	r3, r2
 8002798:	1a18      	subs	r0, r3, r0
 800279a:	b003      	add	sp, #12
 800279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800279e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80027a6:	e7ed      	b.n	8002784 <__exponent+0x4c>
 80027a8:	2330      	movs	r3, #48	; 0x30
 80027aa:	3130      	adds	r1, #48	; 0x30
 80027ac:	7083      	strb	r3, [r0, #2]
 80027ae:	70c1      	strb	r1, [r0, #3]
 80027b0:	1d03      	adds	r3, r0, #4
 80027b2:	e7f1      	b.n	8002798 <__exponent+0x60>

080027b4 <_printf_float>:
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	ed2d 8b02 	vpush	{d8}
 80027bc:	b08d      	sub	sp, #52	; 0x34
 80027be:	460c      	mov	r4, r1
 80027c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80027c4:	4616      	mov	r6, r2
 80027c6:	461f      	mov	r7, r3
 80027c8:	4605      	mov	r5, r0
 80027ca:	f001 fa37 	bl	8003c3c <_localeconv_r>
 80027ce:	f8d0 a000 	ldr.w	sl, [r0]
 80027d2:	4650      	mov	r0, sl
 80027d4:	f7fd fd04 	bl	80001e0 <strlen>
 80027d8:	2300      	movs	r3, #0
 80027da:	930a      	str	r3, [sp, #40]	; 0x28
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	9305      	str	r3, [sp, #20]
 80027e0:	f8d8 3000 	ldr.w	r3, [r8]
 80027e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80027e8:	3307      	adds	r3, #7
 80027ea:	f023 0307 	bic.w	r3, r3, #7
 80027ee:	f103 0208 	add.w	r2, r3, #8
 80027f2:	f8c8 2000 	str.w	r2, [r8]
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80027fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002806:	9307      	str	r3, [sp, #28]
 8002808:	f8cd 8018 	str.w	r8, [sp, #24]
 800280c:	ee08 0a10 	vmov	s16, r0
 8002810:	4b9f      	ldr	r3, [pc, #636]	; (8002a90 <_printf_float+0x2dc>)
 8002812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800281a:	f7fe f98f 	bl	8000b3c <__aeabi_dcmpun>
 800281e:	bb88      	cbnz	r0, 8002884 <_printf_float+0xd0>
 8002820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002824:	4b9a      	ldr	r3, [pc, #616]	; (8002a90 <_printf_float+0x2dc>)
 8002826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800282a:	f7fe f969 	bl	8000b00 <__aeabi_dcmple>
 800282e:	bb48      	cbnz	r0, 8002884 <_printf_float+0xd0>
 8002830:	2200      	movs	r2, #0
 8002832:	2300      	movs	r3, #0
 8002834:	4640      	mov	r0, r8
 8002836:	4649      	mov	r1, r9
 8002838:	f7fe f958 	bl	8000aec <__aeabi_dcmplt>
 800283c:	b110      	cbz	r0, 8002844 <_printf_float+0x90>
 800283e:	232d      	movs	r3, #45	; 0x2d
 8002840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002844:	4b93      	ldr	r3, [pc, #588]	; (8002a94 <_printf_float+0x2e0>)
 8002846:	4894      	ldr	r0, [pc, #592]	; (8002a98 <_printf_float+0x2e4>)
 8002848:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800284c:	bf94      	ite	ls
 800284e:	4698      	movls	r8, r3
 8002850:	4680      	movhi	r8, r0
 8002852:	2303      	movs	r3, #3
 8002854:	6123      	str	r3, [r4, #16]
 8002856:	9b05      	ldr	r3, [sp, #20]
 8002858:	f023 0204 	bic.w	r2, r3, #4
 800285c:	6022      	str	r2, [r4, #0]
 800285e:	f04f 0900 	mov.w	r9, #0
 8002862:	9700      	str	r7, [sp, #0]
 8002864:	4633      	mov	r3, r6
 8002866:	aa0b      	add	r2, sp, #44	; 0x2c
 8002868:	4621      	mov	r1, r4
 800286a:	4628      	mov	r0, r5
 800286c:	f000 f9d8 	bl	8002c20 <_printf_common>
 8002870:	3001      	adds	r0, #1
 8002872:	f040 8090 	bne.w	8002996 <_printf_float+0x1e2>
 8002876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287a:	b00d      	add	sp, #52	; 0x34
 800287c:	ecbd 8b02 	vpop	{d8}
 8002880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002884:	4642      	mov	r2, r8
 8002886:	464b      	mov	r3, r9
 8002888:	4640      	mov	r0, r8
 800288a:	4649      	mov	r1, r9
 800288c:	f7fe f956 	bl	8000b3c <__aeabi_dcmpun>
 8002890:	b140      	cbz	r0, 80028a4 <_printf_float+0xf0>
 8002892:	464b      	mov	r3, r9
 8002894:	2b00      	cmp	r3, #0
 8002896:	bfbc      	itt	lt
 8002898:	232d      	movlt	r3, #45	; 0x2d
 800289a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800289e:	487f      	ldr	r0, [pc, #508]	; (8002a9c <_printf_float+0x2e8>)
 80028a0:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <_printf_float+0x2ec>)
 80028a2:	e7d1      	b.n	8002848 <_printf_float+0x94>
 80028a4:	6863      	ldr	r3, [r4, #4]
 80028a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80028aa:	9206      	str	r2, [sp, #24]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	d13f      	bne.n	8002930 <_printf_float+0x17c>
 80028b0:	2306      	movs	r3, #6
 80028b2:	6063      	str	r3, [r4, #4]
 80028b4:	9b05      	ldr	r3, [sp, #20]
 80028b6:	6861      	ldr	r1, [r4, #4]
 80028b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80028bc:	2300      	movs	r3, #0
 80028be:	9303      	str	r3, [sp, #12]
 80028c0:	ab0a      	add	r3, sp, #40	; 0x28
 80028c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80028c6:	ab09      	add	r3, sp, #36	; 0x24
 80028c8:	ec49 8b10 	vmov	d0, r8, r9
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6022      	str	r2, [r4, #0]
 80028d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff fecd 	bl	8002674 <__cvt>
 80028da:	9b06      	ldr	r3, [sp, #24]
 80028dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028de:	2b47      	cmp	r3, #71	; 0x47
 80028e0:	4680      	mov	r8, r0
 80028e2:	d108      	bne.n	80028f6 <_printf_float+0x142>
 80028e4:	1cc8      	adds	r0, r1, #3
 80028e6:	db02      	blt.n	80028ee <_printf_float+0x13a>
 80028e8:	6863      	ldr	r3, [r4, #4]
 80028ea:	4299      	cmp	r1, r3
 80028ec:	dd41      	ble.n	8002972 <_printf_float+0x1be>
 80028ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80028f2:	fa5f fb8b 	uxtb.w	fp, fp
 80028f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80028fa:	d820      	bhi.n	800293e <_printf_float+0x18a>
 80028fc:	3901      	subs	r1, #1
 80028fe:	465a      	mov	r2, fp
 8002900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002904:	9109      	str	r1, [sp, #36]	; 0x24
 8002906:	f7ff ff17 	bl	8002738 <__exponent>
 800290a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800290c:	1813      	adds	r3, r2, r0
 800290e:	2a01      	cmp	r2, #1
 8002910:	4681      	mov	r9, r0
 8002912:	6123      	str	r3, [r4, #16]
 8002914:	dc02      	bgt.n	800291c <_printf_float+0x168>
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	07d2      	lsls	r2, r2, #31
 800291a:	d501      	bpl.n	8002920 <_printf_float+0x16c>
 800291c:	3301      	adds	r3, #1
 800291e:	6123      	str	r3, [r4, #16]
 8002920:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002924:	2b00      	cmp	r3, #0
 8002926:	d09c      	beq.n	8002862 <_printf_float+0xae>
 8002928:	232d      	movs	r3, #45	; 0x2d
 800292a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800292e:	e798      	b.n	8002862 <_printf_float+0xae>
 8002930:	9a06      	ldr	r2, [sp, #24]
 8002932:	2a47      	cmp	r2, #71	; 0x47
 8002934:	d1be      	bne.n	80028b4 <_printf_float+0x100>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1bc      	bne.n	80028b4 <_printf_float+0x100>
 800293a:	2301      	movs	r3, #1
 800293c:	e7b9      	b.n	80028b2 <_printf_float+0xfe>
 800293e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002942:	d118      	bne.n	8002976 <_printf_float+0x1c2>
 8002944:	2900      	cmp	r1, #0
 8002946:	6863      	ldr	r3, [r4, #4]
 8002948:	dd0b      	ble.n	8002962 <_printf_float+0x1ae>
 800294a:	6121      	str	r1, [r4, #16]
 800294c:	b913      	cbnz	r3, 8002954 <_printf_float+0x1a0>
 800294e:	6822      	ldr	r2, [r4, #0]
 8002950:	07d0      	lsls	r0, r2, #31
 8002952:	d502      	bpl.n	800295a <_printf_float+0x1a6>
 8002954:	3301      	adds	r3, #1
 8002956:	440b      	add	r3, r1
 8002958:	6123      	str	r3, [r4, #16]
 800295a:	65a1      	str	r1, [r4, #88]	; 0x58
 800295c:	f04f 0900 	mov.w	r9, #0
 8002960:	e7de      	b.n	8002920 <_printf_float+0x16c>
 8002962:	b913      	cbnz	r3, 800296a <_printf_float+0x1b6>
 8002964:	6822      	ldr	r2, [r4, #0]
 8002966:	07d2      	lsls	r2, r2, #31
 8002968:	d501      	bpl.n	800296e <_printf_float+0x1ba>
 800296a:	3302      	adds	r3, #2
 800296c:	e7f4      	b.n	8002958 <_printf_float+0x1a4>
 800296e:	2301      	movs	r3, #1
 8002970:	e7f2      	b.n	8002958 <_printf_float+0x1a4>
 8002972:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002978:	4299      	cmp	r1, r3
 800297a:	db05      	blt.n	8002988 <_printf_float+0x1d4>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	6121      	str	r1, [r4, #16]
 8002980:	07d8      	lsls	r0, r3, #31
 8002982:	d5ea      	bpl.n	800295a <_printf_float+0x1a6>
 8002984:	1c4b      	adds	r3, r1, #1
 8002986:	e7e7      	b.n	8002958 <_printf_float+0x1a4>
 8002988:	2900      	cmp	r1, #0
 800298a:	bfd4      	ite	le
 800298c:	f1c1 0202 	rsble	r2, r1, #2
 8002990:	2201      	movgt	r2, #1
 8002992:	4413      	add	r3, r2
 8002994:	e7e0      	b.n	8002958 <_printf_float+0x1a4>
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	055a      	lsls	r2, r3, #21
 800299a:	d407      	bmi.n	80029ac <_printf_float+0x1f8>
 800299c:	6923      	ldr	r3, [r4, #16]
 800299e:	4642      	mov	r2, r8
 80029a0:	4631      	mov	r1, r6
 80029a2:	4628      	mov	r0, r5
 80029a4:	47b8      	blx	r7
 80029a6:	3001      	adds	r0, #1
 80029a8:	d12c      	bne.n	8002a04 <_printf_float+0x250>
 80029aa:	e764      	b.n	8002876 <_printf_float+0xc2>
 80029ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80029b0:	f240 80e0 	bls.w	8002b74 <_printf_float+0x3c0>
 80029b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80029b8:	2200      	movs	r2, #0
 80029ba:	2300      	movs	r3, #0
 80029bc:	f7fe f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d034      	beq.n	8002a2e <_printf_float+0x27a>
 80029c4:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <_printf_float+0x2f0>)
 80029c6:	2301      	movs	r3, #1
 80029c8:	4631      	mov	r1, r6
 80029ca:	4628      	mov	r0, r5
 80029cc:	47b8      	blx	r7
 80029ce:	3001      	adds	r0, #1
 80029d0:	f43f af51 	beq.w	8002876 <_printf_float+0xc2>
 80029d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029d8:	429a      	cmp	r2, r3
 80029da:	db02      	blt.n	80029e2 <_printf_float+0x22e>
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	07d8      	lsls	r0, r3, #31
 80029e0:	d510      	bpl.n	8002a04 <_printf_float+0x250>
 80029e2:	ee18 3a10 	vmov	r3, s16
 80029e6:	4652      	mov	r2, sl
 80029e8:	4631      	mov	r1, r6
 80029ea:	4628      	mov	r0, r5
 80029ec:	47b8      	blx	r7
 80029ee:	3001      	adds	r0, #1
 80029f0:	f43f af41 	beq.w	8002876 <_printf_float+0xc2>
 80029f4:	f04f 0800 	mov.w	r8, #0
 80029f8:	f104 091a 	add.w	r9, r4, #26
 80029fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4543      	cmp	r3, r8
 8002a02:	dc09      	bgt.n	8002a18 <_printf_float+0x264>
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	079b      	lsls	r3, r3, #30
 8002a08:	f100 8105 	bmi.w	8002c16 <_printf_float+0x462>
 8002a0c:	68e0      	ldr	r0, [r4, #12]
 8002a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a10:	4298      	cmp	r0, r3
 8002a12:	bfb8      	it	lt
 8002a14:	4618      	movlt	r0, r3
 8002a16:	e730      	b.n	800287a <_printf_float+0xc6>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	464a      	mov	r2, r9
 8002a1c:	4631      	mov	r1, r6
 8002a1e:	4628      	mov	r0, r5
 8002a20:	47b8      	blx	r7
 8002a22:	3001      	adds	r0, #1
 8002a24:	f43f af27 	beq.w	8002876 <_printf_float+0xc2>
 8002a28:	f108 0801 	add.w	r8, r8, #1
 8002a2c:	e7e6      	b.n	80029fc <_printf_float+0x248>
 8002a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	dc39      	bgt.n	8002aa8 <_printf_float+0x2f4>
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <_printf_float+0x2f0>)
 8002a36:	2301      	movs	r3, #1
 8002a38:	4631      	mov	r1, r6
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	47b8      	blx	r7
 8002a3e:	3001      	adds	r0, #1
 8002a40:	f43f af19 	beq.w	8002876 <_printf_float+0xc2>
 8002a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	d102      	bne.n	8002a52 <_printf_float+0x29e>
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	07d9      	lsls	r1, r3, #31
 8002a50:	d5d8      	bpl.n	8002a04 <_printf_float+0x250>
 8002a52:	ee18 3a10 	vmov	r3, s16
 8002a56:	4652      	mov	r2, sl
 8002a58:	4631      	mov	r1, r6
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	47b8      	blx	r7
 8002a5e:	3001      	adds	r0, #1
 8002a60:	f43f af09 	beq.w	8002876 <_printf_float+0xc2>
 8002a64:	f04f 0900 	mov.w	r9, #0
 8002a68:	f104 0a1a 	add.w	sl, r4, #26
 8002a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a6e:	425b      	negs	r3, r3
 8002a70:	454b      	cmp	r3, r9
 8002a72:	dc01      	bgt.n	8002a78 <_printf_float+0x2c4>
 8002a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a76:	e792      	b.n	800299e <_printf_float+0x1ea>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	4652      	mov	r2, sl
 8002a7c:	4631      	mov	r1, r6
 8002a7e:	4628      	mov	r0, r5
 8002a80:	47b8      	blx	r7
 8002a82:	3001      	adds	r0, #1
 8002a84:	f43f aef7 	beq.w	8002876 <_printf_float+0xc2>
 8002a88:	f109 0901 	add.w	r9, r9, #1
 8002a8c:	e7ee      	b.n	8002a6c <_printf_float+0x2b8>
 8002a8e:	bf00      	nop
 8002a90:	7fefffff 	.word	0x7fefffff
 8002a94:	08005f9c 	.word	0x08005f9c
 8002a98:	08005fa0 	.word	0x08005fa0
 8002a9c:	08005fa8 	.word	0x08005fa8
 8002aa0:	08005fa4 	.word	0x08005fa4
 8002aa4:	08005fac 	.word	0x08005fac
 8002aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bfa8      	it	ge
 8002ab0:	461a      	movge	r2, r3
 8002ab2:	2a00      	cmp	r2, #0
 8002ab4:	4691      	mov	r9, r2
 8002ab6:	dc37      	bgt.n	8002b28 <_printf_float+0x374>
 8002ab8:	f04f 0b00 	mov.w	fp, #0
 8002abc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ac0:	f104 021a 	add.w	r2, r4, #26
 8002ac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ac6:	9305      	str	r3, [sp, #20]
 8002ac8:	eba3 0309 	sub.w	r3, r3, r9
 8002acc:	455b      	cmp	r3, fp
 8002ace:	dc33      	bgt.n	8002b38 <_printf_float+0x384>
 8002ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	db3b      	blt.n	8002b50 <_printf_float+0x39c>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	07da      	lsls	r2, r3, #31
 8002adc:	d438      	bmi.n	8002b50 <_printf_float+0x39c>
 8002ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ae0:	9a05      	ldr	r2, [sp, #20]
 8002ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ae4:	1a9a      	subs	r2, r3, r2
 8002ae6:	eba3 0901 	sub.w	r9, r3, r1
 8002aea:	4591      	cmp	r9, r2
 8002aec:	bfa8      	it	ge
 8002aee:	4691      	movge	r9, r2
 8002af0:	f1b9 0f00 	cmp.w	r9, #0
 8002af4:	dc35      	bgt.n	8002b62 <_printf_float+0x3ae>
 8002af6:	f04f 0800 	mov.w	r8, #0
 8002afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002afe:	f104 0a1a 	add.w	sl, r4, #26
 8002b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	eba3 0309 	sub.w	r3, r3, r9
 8002b0c:	4543      	cmp	r3, r8
 8002b0e:	f77f af79 	ble.w	8002a04 <_printf_float+0x250>
 8002b12:	2301      	movs	r3, #1
 8002b14:	4652      	mov	r2, sl
 8002b16:	4631      	mov	r1, r6
 8002b18:	4628      	mov	r0, r5
 8002b1a:	47b8      	blx	r7
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	f43f aeaa 	beq.w	8002876 <_printf_float+0xc2>
 8002b22:	f108 0801 	add.w	r8, r8, #1
 8002b26:	e7ec      	b.n	8002b02 <_printf_float+0x34e>
 8002b28:	4613      	mov	r3, r2
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	4628      	mov	r0, r5
 8002b30:	47b8      	blx	r7
 8002b32:	3001      	adds	r0, #1
 8002b34:	d1c0      	bne.n	8002ab8 <_printf_float+0x304>
 8002b36:	e69e      	b.n	8002876 <_printf_float+0xc2>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4631      	mov	r1, r6
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	9205      	str	r2, [sp, #20]
 8002b40:	47b8      	blx	r7
 8002b42:	3001      	adds	r0, #1
 8002b44:	f43f ae97 	beq.w	8002876 <_printf_float+0xc2>
 8002b48:	9a05      	ldr	r2, [sp, #20]
 8002b4a:	f10b 0b01 	add.w	fp, fp, #1
 8002b4e:	e7b9      	b.n	8002ac4 <_printf_float+0x310>
 8002b50:	ee18 3a10 	vmov	r3, s16
 8002b54:	4652      	mov	r2, sl
 8002b56:	4631      	mov	r1, r6
 8002b58:	4628      	mov	r0, r5
 8002b5a:	47b8      	blx	r7
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d1be      	bne.n	8002ade <_printf_float+0x32a>
 8002b60:	e689      	b.n	8002876 <_printf_float+0xc2>
 8002b62:	9a05      	ldr	r2, [sp, #20]
 8002b64:	464b      	mov	r3, r9
 8002b66:	4442      	add	r2, r8
 8002b68:	4631      	mov	r1, r6
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	47b8      	blx	r7
 8002b6e:	3001      	adds	r0, #1
 8002b70:	d1c1      	bne.n	8002af6 <_printf_float+0x342>
 8002b72:	e680      	b.n	8002876 <_printf_float+0xc2>
 8002b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b76:	2a01      	cmp	r2, #1
 8002b78:	dc01      	bgt.n	8002b7e <_printf_float+0x3ca>
 8002b7a:	07db      	lsls	r3, r3, #31
 8002b7c:	d538      	bpl.n	8002bf0 <_printf_float+0x43c>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	4642      	mov	r2, r8
 8002b82:	4631      	mov	r1, r6
 8002b84:	4628      	mov	r0, r5
 8002b86:	47b8      	blx	r7
 8002b88:	3001      	adds	r0, #1
 8002b8a:	f43f ae74 	beq.w	8002876 <_printf_float+0xc2>
 8002b8e:	ee18 3a10 	vmov	r3, s16
 8002b92:	4652      	mov	r2, sl
 8002b94:	4631      	mov	r1, r6
 8002b96:	4628      	mov	r0, r5
 8002b98:	47b8      	blx	r7
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	f43f ae6b 	beq.w	8002876 <_printf_float+0xc2>
 8002ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f7fd ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bac:	b9d8      	cbnz	r0, 8002be6 <_printf_float+0x432>
 8002bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bb0:	f108 0201 	add.w	r2, r8, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	4631      	mov	r1, r6
 8002bb8:	4628      	mov	r0, r5
 8002bba:	47b8      	blx	r7
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	d10e      	bne.n	8002bde <_printf_float+0x42a>
 8002bc0:	e659      	b.n	8002876 <_printf_float+0xc2>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	4652      	mov	r2, sl
 8002bc6:	4631      	mov	r1, r6
 8002bc8:	4628      	mov	r0, r5
 8002bca:	47b8      	blx	r7
 8002bcc:	3001      	adds	r0, #1
 8002bce:	f43f ae52 	beq.w	8002876 <_printf_float+0xc2>
 8002bd2:	f108 0801 	add.w	r8, r8, #1
 8002bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	4543      	cmp	r3, r8
 8002bdc:	dcf1      	bgt.n	8002bc2 <_printf_float+0x40e>
 8002bde:	464b      	mov	r3, r9
 8002be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002be4:	e6dc      	b.n	80029a0 <_printf_float+0x1ec>
 8002be6:	f04f 0800 	mov.w	r8, #0
 8002bea:	f104 0a1a 	add.w	sl, r4, #26
 8002bee:	e7f2      	b.n	8002bd6 <_printf_float+0x422>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4642      	mov	r2, r8
 8002bf4:	e7df      	b.n	8002bb6 <_printf_float+0x402>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	464a      	mov	r2, r9
 8002bfa:	4631      	mov	r1, r6
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	47b8      	blx	r7
 8002c00:	3001      	adds	r0, #1
 8002c02:	f43f ae38 	beq.w	8002876 <_printf_float+0xc2>
 8002c06:	f108 0801 	add.w	r8, r8, #1
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c0e:	1a5b      	subs	r3, r3, r1
 8002c10:	4543      	cmp	r3, r8
 8002c12:	dcf0      	bgt.n	8002bf6 <_printf_float+0x442>
 8002c14:	e6fa      	b.n	8002a0c <_printf_float+0x258>
 8002c16:	f04f 0800 	mov.w	r8, #0
 8002c1a:	f104 0919 	add.w	r9, r4, #25
 8002c1e:	e7f4      	b.n	8002c0a <_printf_float+0x456>

08002c20 <_printf_common>:
 8002c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	4616      	mov	r6, r2
 8002c26:	4699      	mov	r9, r3
 8002c28:	688a      	ldr	r2, [r1, #8]
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bfb8      	it	lt
 8002c34:	4613      	movlt	r3, r2
 8002c36:	6033      	str	r3, [r6, #0]
 8002c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	b10a      	cbz	r2, 8002c46 <_printf_common+0x26>
 8002c42:	3301      	adds	r3, #1
 8002c44:	6033      	str	r3, [r6, #0]
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	0699      	lsls	r1, r3, #26
 8002c4a:	bf42      	ittt	mi
 8002c4c:	6833      	ldrmi	r3, [r6, #0]
 8002c4e:	3302      	addmi	r3, #2
 8002c50:	6033      	strmi	r3, [r6, #0]
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	f015 0506 	ands.w	r5, r5, #6
 8002c58:	d106      	bne.n	8002c68 <_printf_common+0x48>
 8002c5a:	f104 0a19 	add.w	sl, r4, #25
 8002c5e:	68e3      	ldr	r3, [r4, #12]
 8002c60:	6832      	ldr	r2, [r6, #0]
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	42ab      	cmp	r3, r5
 8002c66:	dc26      	bgt.n	8002cb6 <_printf_common+0x96>
 8002c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c6c:	1e13      	subs	r3, r2, #0
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	bf18      	it	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	0692      	lsls	r2, r2, #26
 8002c76:	d42b      	bmi.n	8002cd0 <_printf_common+0xb0>
 8002c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	4638      	mov	r0, r7
 8002c80:	47c0      	blx	r8
 8002c82:	3001      	adds	r0, #1
 8002c84:	d01e      	beq.n	8002cc4 <_printf_common+0xa4>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	68e5      	ldr	r5, [r4, #12]
 8002c8a:	6832      	ldr	r2, [r6, #0]
 8002c8c:	f003 0306 	and.w	r3, r3, #6
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	bf08      	it	eq
 8002c94:	1aad      	subeq	r5, r5, r2
 8002c96:	68a3      	ldr	r3, [r4, #8]
 8002c98:	6922      	ldr	r2, [r4, #16]
 8002c9a:	bf0c      	ite	eq
 8002c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ca0:	2500      	movne	r5, #0
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	bfc4      	itt	gt
 8002ca6:	1a9b      	subgt	r3, r3, r2
 8002ca8:	18ed      	addgt	r5, r5, r3
 8002caa:	2600      	movs	r6, #0
 8002cac:	341a      	adds	r4, #26
 8002cae:	42b5      	cmp	r5, r6
 8002cb0:	d11a      	bne.n	8002ce8 <_printf_common+0xc8>
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e008      	b.n	8002cc8 <_printf_common+0xa8>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4652      	mov	r2, sl
 8002cba:	4649      	mov	r1, r9
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	47c0      	blx	r8
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d103      	bne.n	8002ccc <_printf_common+0xac>
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ccc:	3501      	adds	r5, #1
 8002cce:	e7c6      	b.n	8002c5e <_printf_common+0x3e>
 8002cd0:	18e1      	adds	r1, r4, r3
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	2030      	movs	r0, #48	; 0x30
 8002cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cda:	4422      	add	r2, r4
 8002cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	e7c7      	b.n	8002c78 <_printf_common+0x58>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4622      	mov	r2, r4
 8002cec:	4649      	mov	r1, r9
 8002cee:	4638      	mov	r0, r7
 8002cf0:	47c0      	blx	r8
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d0e6      	beq.n	8002cc4 <_printf_common+0xa4>
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7d9      	b.n	8002cae <_printf_common+0x8e>
	...

08002cfc <_printf_i>:
 8002cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d00:	7e0f      	ldrb	r7, [r1, #24]
 8002d02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d04:	2f78      	cmp	r7, #120	; 0x78
 8002d06:	4691      	mov	r9, r2
 8002d08:	4680      	mov	r8, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d12:	d807      	bhi.n	8002d24 <_printf_i+0x28>
 8002d14:	2f62      	cmp	r7, #98	; 0x62
 8002d16:	d80a      	bhi.n	8002d2e <_printf_i+0x32>
 8002d18:	2f00      	cmp	r7, #0
 8002d1a:	f000 80d8 	beq.w	8002ece <_printf_i+0x1d2>
 8002d1e:	2f58      	cmp	r7, #88	; 0x58
 8002d20:	f000 80a3 	beq.w	8002e6a <_printf_i+0x16e>
 8002d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d2c:	e03a      	b.n	8002da4 <_printf_i+0xa8>
 8002d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d32:	2b15      	cmp	r3, #21
 8002d34:	d8f6      	bhi.n	8002d24 <_printf_i+0x28>
 8002d36:	a101      	add	r1, pc, #4	; (adr r1, 8002d3c <_printf_i+0x40>)
 8002d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d3c:	08002d95 	.word	0x08002d95
 8002d40:	08002da9 	.word	0x08002da9
 8002d44:	08002d25 	.word	0x08002d25
 8002d48:	08002d25 	.word	0x08002d25
 8002d4c:	08002d25 	.word	0x08002d25
 8002d50:	08002d25 	.word	0x08002d25
 8002d54:	08002da9 	.word	0x08002da9
 8002d58:	08002d25 	.word	0x08002d25
 8002d5c:	08002d25 	.word	0x08002d25
 8002d60:	08002d25 	.word	0x08002d25
 8002d64:	08002d25 	.word	0x08002d25
 8002d68:	08002eb5 	.word	0x08002eb5
 8002d6c:	08002dd9 	.word	0x08002dd9
 8002d70:	08002e97 	.word	0x08002e97
 8002d74:	08002d25 	.word	0x08002d25
 8002d78:	08002d25 	.word	0x08002d25
 8002d7c:	08002ed7 	.word	0x08002ed7
 8002d80:	08002d25 	.word	0x08002d25
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002d25 	.word	0x08002d25
 8002d8c:	08002d25 	.word	0x08002d25
 8002d90:	08002e9f 	.word	0x08002e9f
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	602a      	str	r2, [r5, #0]
 8002d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0a3      	b.n	8002ef0 <_printf_i+0x1f4>
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	6829      	ldr	r1, [r5, #0]
 8002dac:	0606      	lsls	r6, r0, #24
 8002dae:	f101 0304 	add.w	r3, r1, #4
 8002db2:	d50a      	bpl.n	8002dca <_printf_i+0xce>
 8002db4:	680e      	ldr	r6, [r1, #0]
 8002db6:	602b      	str	r3, [r5, #0]
 8002db8:	2e00      	cmp	r6, #0
 8002dba:	da03      	bge.n	8002dc4 <_printf_i+0xc8>
 8002dbc:	232d      	movs	r3, #45	; 0x2d
 8002dbe:	4276      	negs	r6, r6
 8002dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dc4:	485e      	ldr	r0, [pc, #376]	; (8002f40 <_printf_i+0x244>)
 8002dc6:	230a      	movs	r3, #10
 8002dc8:	e019      	b.n	8002dfe <_printf_i+0x102>
 8002dca:	680e      	ldr	r6, [r1, #0]
 8002dcc:	602b      	str	r3, [r5, #0]
 8002dce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dd2:	bf18      	it	ne
 8002dd4:	b236      	sxthne	r6, r6
 8002dd6:	e7ef      	b.n	8002db8 <_printf_i+0xbc>
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	1d19      	adds	r1, r3, #4
 8002dde:	6029      	str	r1, [r5, #0]
 8002de0:	0601      	lsls	r1, r0, #24
 8002de2:	d501      	bpl.n	8002de8 <_printf_i+0xec>
 8002de4:	681e      	ldr	r6, [r3, #0]
 8002de6:	e002      	b.n	8002dee <_printf_i+0xf2>
 8002de8:	0646      	lsls	r6, r0, #25
 8002dea:	d5fb      	bpl.n	8002de4 <_printf_i+0xe8>
 8002dec:	881e      	ldrh	r6, [r3, #0]
 8002dee:	4854      	ldr	r0, [pc, #336]	; (8002f40 <_printf_i+0x244>)
 8002df0:	2f6f      	cmp	r7, #111	; 0x6f
 8002df2:	bf0c      	ite	eq
 8002df4:	2308      	moveq	r3, #8
 8002df6:	230a      	movne	r3, #10
 8002df8:	2100      	movs	r1, #0
 8002dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dfe:	6865      	ldr	r5, [r4, #4]
 8002e00:	60a5      	str	r5, [r4, #8]
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	bfa2      	ittt	ge
 8002e06:	6821      	ldrge	r1, [r4, #0]
 8002e08:	f021 0104 	bicge.w	r1, r1, #4
 8002e0c:	6021      	strge	r1, [r4, #0]
 8002e0e:	b90e      	cbnz	r6, 8002e14 <_printf_i+0x118>
 8002e10:	2d00      	cmp	r5, #0
 8002e12:	d04d      	beq.n	8002eb0 <_printf_i+0x1b4>
 8002e14:	4615      	mov	r5, r2
 8002e16:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e1a:	fb03 6711 	mls	r7, r3, r1, r6
 8002e1e:	5dc7      	ldrb	r7, [r0, r7]
 8002e20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e24:	4637      	mov	r7, r6
 8002e26:	42bb      	cmp	r3, r7
 8002e28:	460e      	mov	r6, r1
 8002e2a:	d9f4      	bls.n	8002e16 <_printf_i+0x11a>
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d10b      	bne.n	8002e48 <_printf_i+0x14c>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	07de      	lsls	r6, r3, #31
 8002e34:	d508      	bpl.n	8002e48 <_printf_i+0x14c>
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	6861      	ldr	r1, [r4, #4]
 8002e3a:	4299      	cmp	r1, r3
 8002e3c:	bfde      	ittt	le
 8002e3e:	2330      	movle	r3, #48	; 0x30
 8002e40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e44:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e48:	1b52      	subs	r2, r2, r5
 8002e4a:	6122      	str	r2, [r4, #16]
 8002e4c:	f8cd a000 	str.w	sl, [sp]
 8002e50:	464b      	mov	r3, r9
 8002e52:	aa03      	add	r2, sp, #12
 8002e54:	4621      	mov	r1, r4
 8002e56:	4640      	mov	r0, r8
 8002e58:	f7ff fee2 	bl	8002c20 <_printf_common>
 8002e5c:	3001      	adds	r0, #1
 8002e5e:	d14c      	bne.n	8002efa <_printf_i+0x1fe>
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e64:	b004      	add	sp, #16
 8002e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e6a:	4835      	ldr	r0, [pc, #212]	; (8002f40 <_printf_i+0x244>)
 8002e6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e70:	6829      	ldr	r1, [r5, #0]
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e78:	6029      	str	r1, [r5, #0]
 8002e7a:	061d      	lsls	r5, r3, #24
 8002e7c:	d514      	bpl.n	8002ea8 <_printf_i+0x1ac>
 8002e7e:	07df      	lsls	r7, r3, #31
 8002e80:	bf44      	itt	mi
 8002e82:	f043 0320 	orrmi.w	r3, r3, #32
 8002e86:	6023      	strmi	r3, [r4, #0]
 8002e88:	b91e      	cbnz	r6, 8002e92 <_printf_i+0x196>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	f023 0320 	bic.w	r3, r3, #32
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	2310      	movs	r3, #16
 8002e94:	e7b0      	b.n	8002df8 <_printf_i+0xfc>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	f043 0320 	orr.w	r3, r3, #32
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	2378      	movs	r3, #120	; 0x78
 8002ea0:	4828      	ldr	r0, [pc, #160]	; (8002f44 <_printf_i+0x248>)
 8002ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ea6:	e7e3      	b.n	8002e70 <_printf_i+0x174>
 8002ea8:	0659      	lsls	r1, r3, #25
 8002eaa:	bf48      	it	mi
 8002eac:	b2b6      	uxthmi	r6, r6
 8002eae:	e7e6      	b.n	8002e7e <_printf_i+0x182>
 8002eb0:	4615      	mov	r5, r2
 8002eb2:	e7bb      	b.n	8002e2c <_printf_i+0x130>
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	6826      	ldr	r6, [r4, #0]
 8002eb8:	6961      	ldr	r1, [r4, #20]
 8002eba:	1d18      	adds	r0, r3, #4
 8002ebc:	6028      	str	r0, [r5, #0]
 8002ebe:	0635      	lsls	r5, r6, #24
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	d501      	bpl.n	8002ec8 <_printf_i+0x1cc>
 8002ec4:	6019      	str	r1, [r3, #0]
 8002ec6:	e002      	b.n	8002ece <_printf_i+0x1d2>
 8002ec8:	0670      	lsls	r0, r6, #25
 8002eca:	d5fb      	bpl.n	8002ec4 <_printf_i+0x1c8>
 8002ecc:	8019      	strh	r1, [r3, #0]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6123      	str	r3, [r4, #16]
 8002ed2:	4615      	mov	r5, r2
 8002ed4:	e7ba      	b.n	8002e4c <_printf_i+0x150>
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	1d1a      	adds	r2, r3, #4
 8002eda:	602a      	str	r2, [r5, #0]
 8002edc:	681d      	ldr	r5, [r3, #0]
 8002ede:	6862      	ldr	r2, [r4, #4]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f7fd f984 	bl	80001f0 <memchr>
 8002ee8:	b108      	cbz	r0, 8002eee <_printf_i+0x1f2>
 8002eea:	1b40      	subs	r0, r0, r5
 8002eec:	6060      	str	r0, [r4, #4]
 8002eee:	6863      	ldr	r3, [r4, #4]
 8002ef0:	6123      	str	r3, [r4, #16]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef8:	e7a8      	b.n	8002e4c <_printf_i+0x150>
 8002efa:	6923      	ldr	r3, [r4, #16]
 8002efc:	462a      	mov	r2, r5
 8002efe:	4649      	mov	r1, r9
 8002f00:	4640      	mov	r0, r8
 8002f02:	47d0      	blx	sl
 8002f04:	3001      	adds	r0, #1
 8002f06:	d0ab      	beq.n	8002e60 <_printf_i+0x164>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	079b      	lsls	r3, r3, #30
 8002f0c:	d413      	bmi.n	8002f36 <_printf_i+0x23a>
 8002f0e:	68e0      	ldr	r0, [r4, #12]
 8002f10:	9b03      	ldr	r3, [sp, #12]
 8002f12:	4298      	cmp	r0, r3
 8002f14:	bfb8      	it	lt
 8002f16:	4618      	movlt	r0, r3
 8002f18:	e7a4      	b.n	8002e64 <_printf_i+0x168>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4632      	mov	r2, r6
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4640      	mov	r0, r8
 8002f22:	47d0      	blx	sl
 8002f24:	3001      	adds	r0, #1
 8002f26:	d09b      	beq.n	8002e60 <_printf_i+0x164>
 8002f28:	3501      	adds	r5, #1
 8002f2a:	68e3      	ldr	r3, [r4, #12]
 8002f2c:	9903      	ldr	r1, [sp, #12]
 8002f2e:	1a5b      	subs	r3, r3, r1
 8002f30:	42ab      	cmp	r3, r5
 8002f32:	dcf2      	bgt.n	8002f1a <_printf_i+0x21e>
 8002f34:	e7eb      	b.n	8002f0e <_printf_i+0x212>
 8002f36:	2500      	movs	r5, #0
 8002f38:	f104 0619 	add.w	r6, r4, #25
 8002f3c:	e7f5      	b.n	8002f2a <_printf_i+0x22e>
 8002f3e:	bf00      	nop
 8002f40:	08005fae 	.word	0x08005fae
 8002f44:	08005fbf 	.word	0x08005fbf

08002f48 <quorem>:
 8002f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	6903      	ldr	r3, [r0, #16]
 8002f4e:	690c      	ldr	r4, [r1, #16]
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	4607      	mov	r7, r0
 8002f54:	f2c0 8081 	blt.w	800305a <quorem+0x112>
 8002f58:	3c01      	subs	r4, #1
 8002f5a:	f101 0814 	add.w	r8, r1, #20
 8002f5e:	f100 0514 	add.w	r5, r0, #20
 8002f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f70:	3301      	adds	r3, #1
 8002f72:	429a      	cmp	r2, r3
 8002f74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002f78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002f7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f80:	d331      	bcc.n	8002fe6 <quorem+0x9e>
 8002f82:	f04f 0e00 	mov.w	lr, #0
 8002f86:	4640      	mov	r0, r8
 8002f88:	46ac      	mov	ip, r5
 8002f8a:	46f2      	mov	sl, lr
 8002f8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002f90:	b293      	uxth	r3, r2
 8002f92:	fb06 e303 	mla	r3, r6, r3, lr
 8002f96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8002fa0:	f8dc a000 	ldr.w	sl, [ip]
 8002fa4:	0c12      	lsrs	r2, r2, #16
 8002fa6:	fa13 f38a 	uxtah	r3, r3, sl
 8002faa:	fb06 e202 	mla	r2, r6, r2, lr
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	9b00      	ldr	r3, [sp, #0]
 8002fb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002fc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8002fc4:	4581      	cmp	r9, r0
 8002fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fca:	f84c 3b04 	str.w	r3, [ip], #4
 8002fce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002fd2:	d2db      	bcs.n	8002f8c <quorem+0x44>
 8002fd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8002fd8:	b92b      	cbnz	r3, 8002fe6 <quorem+0x9e>
 8002fda:	9b01      	ldr	r3, [sp, #4]
 8002fdc:	3b04      	subs	r3, #4
 8002fde:	429d      	cmp	r5, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	d32e      	bcc.n	8003042 <quorem+0xfa>
 8002fe4:	613c      	str	r4, [r7, #16]
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	f001 f8c4 	bl	8004174 <__mcmp>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	db24      	blt.n	800303a <quorem+0xf2>
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f04f 0c00 	mov.w	ip, #0
 8002ff8:	f858 2b04 	ldr.w	r2, [r8], #4
 8002ffc:	f8d0 e000 	ldr.w	lr, [r0]
 8003000:	b293      	uxth	r3, r2
 8003002:	ebac 0303 	sub.w	r3, ip, r3
 8003006:	0c12      	lsrs	r2, r2, #16
 8003008:	fa13 f38e 	uxtah	r3, r3, lr
 800300c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003014:	b29b      	uxth	r3, r3
 8003016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800301a:	45c1      	cmp	r9, r8
 800301c:	f840 3b04 	str.w	r3, [r0], #4
 8003020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003024:	d2e8      	bcs.n	8002ff8 <quorem+0xb0>
 8003026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800302a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800302e:	b922      	cbnz	r2, 800303a <quorem+0xf2>
 8003030:	3b04      	subs	r3, #4
 8003032:	429d      	cmp	r5, r3
 8003034:	461a      	mov	r2, r3
 8003036:	d30a      	bcc.n	800304e <quorem+0x106>
 8003038:	613c      	str	r4, [r7, #16]
 800303a:	4630      	mov	r0, r6
 800303c:	b003      	add	sp, #12
 800303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	3b04      	subs	r3, #4
 8003046:	2a00      	cmp	r2, #0
 8003048:	d1cc      	bne.n	8002fe4 <quorem+0x9c>
 800304a:	3c01      	subs	r4, #1
 800304c:	e7c7      	b.n	8002fde <quorem+0x96>
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	3b04      	subs	r3, #4
 8003052:	2a00      	cmp	r2, #0
 8003054:	d1f0      	bne.n	8003038 <quorem+0xf0>
 8003056:	3c01      	subs	r4, #1
 8003058:	e7eb      	b.n	8003032 <quorem+0xea>
 800305a:	2000      	movs	r0, #0
 800305c:	e7ee      	b.n	800303c <quorem+0xf4>
	...

08003060 <_dtoa_r>:
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	ed2d 8b04 	vpush	{d8-d9}
 8003068:	ec57 6b10 	vmov	r6, r7, d0
 800306c:	b093      	sub	sp, #76	; 0x4c
 800306e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003074:	9106      	str	r1, [sp, #24]
 8003076:	ee10 aa10 	vmov	sl, s0
 800307a:	4604      	mov	r4, r0
 800307c:	9209      	str	r2, [sp, #36]	; 0x24
 800307e:	930c      	str	r3, [sp, #48]	; 0x30
 8003080:	46bb      	mov	fp, r7
 8003082:	b975      	cbnz	r5, 80030a2 <_dtoa_r+0x42>
 8003084:	2010      	movs	r0, #16
 8003086:	f000 fddd 	bl	8003c44 <malloc>
 800308a:	4602      	mov	r2, r0
 800308c:	6260      	str	r0, [r4, #36]	; 0x24
 800308e:	b920      	cbnz	r0, 800309a <_dtoa_r+0x3a>
 8003090:	4ba7      	ldr	r3, [pc, #668]	; (8003330 <_dtoa_r+0x2d0>)
 8003092:	21ea      	movs	r1, #234	; 0xea
 8003094:	48a7      	ldr	r0, [pc, #668]	; (8003334 <_dtoa_r+0x2d4>)
 8003096:	f001 fa75 	bl	8004584 <__assert_func>
 800309a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800309e:	6005      	str	r5, [r0, #0]
 80030a0:	60c5      	str	r5, [r0, #12]
 80030a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	b151      	cbz	r1, 80030be <_dtoa_r+0x5e>
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	604a      	str	r2, [r1, #4]
 80030ac:	2301      	movs	r3, #1
 80030ae:	4093      	lsls	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
 80030b2:	4620      	mov	r0, r4
 80030b4:	f000 fe1c 	bl	8003cf0 <_Bfree>
 80030b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	1e3b      	subs	r3, r7, #0
 80030c0:	bfaa      	itet	ge
 80030c2:	2300      	movge	r3, #0
 80030c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80030c8:	f8c8 3000 	strge.w	r3, [r8]
 80030cc:	4b9a      	ldr	r3, [pc, #616]	; (8003338 <_dtoa_r+0x2d8>)
 80030ce:	bfbc      	itt	lt
 80030d0:	2201      	movlt	r2, #1
 80030d2:	f8c8 2000 	strlt.w	r2, [r8]
 80030d6:	ea33 030b 	bics.w	r3, r3, fp
 80030da:	d11b      	bne.n	8003114 <_dtoa_r+0xb4>
 80030dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030de:	f242 730f 	movw	r3, #9999	; 0x270f
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80030e8:	4333      	orrs	r3, r6
 80030ea:	f000 8592 	beq.w	8003c12 <_dtoa_r+0xbb2>
 80030ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030f0:	b963      	cbnz	r3, 800310c <_dtoa_r+0xac>
 80030f2:	4b92      	ldr	r3, [pc, #584]	; (800333c <_dtoa_r+0x2dc>)
 80030f4:	e022      	b.n	800313c <_dtoa_r+0xdc>
 80030f6:	4b92      	ldr	r3, [pc, #584]	; (8003340 <_dtoa_r+0x2e0>)
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	3308      	adds	r3, #8
 80030fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	9801      	ldr	r0, [sp, #4]
 8003102:	b013      	add	sp, #76	; 0x4c
 8003104:	ecbd 8b04 	vpop	{d8-d9}
 8003108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310c:	4b8b      	ldr	r3, [pc, #556]	; (800333c <_dtoa_r+0x2dc>)
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	3303      	adds	r3, #3
 8003112:	e7f3      	b.n	80030fc <_dtoa_r+0x9c>
 8003114:	2200      	movs	r2, #0
 8003116:	2300      	movs	r3, #0
 8003118:	4650      	mov	r0, sl
 800311a:	4659      	mov	r1, fp
 800311c:	f7fd fcdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003120:	ec4b ab19 	vmov	d9, sl, fp
 8003124:	4680      	mov	r8, r0
 8003126:	b158      	cbz	r0, 8003140 <_dtoa_r+0xe0>
 8003128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800312a:	2301      	movs	r3, #1
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 856b 	beq.w	8003c0c <_dtoa_r+0xbac>
 8003136:	4883      	ldr	r0, [pc, #524]	; (8003344 <_dtoa_r+0x2e4>)
 8003138:	6018      	str	r0, [r3, #0]
 800313a:	1e43      	subs	r3, r0, #1
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	e7df      	b.n	8003100 <_dtoa_r+0xa0>
 8003140:	ec4b ab10 	vmov	d0, sl, fp
 8003144:	aa10      	add	r2, sp, #64	; 0x40
 8003146:	a911      	add	r1, sp, #68	; 0x44
 8003148:	4620      	mov	r0, r4
 800314a:	f001 f8b9 	bl	80042c0 <__d2b>
 800314e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003152:	ee08 0a10 	vmov	s16, r0
 8003156:	2d00      	cmp	r5, #0
 8003158:	f000 8084 	beq.w	8003264 <_dtoa_r+0x204>
 800315c:	ee19 3a90 	vmov	r3, s19
 8003160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003168:	4656      	mov	r6, sl
 800316a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800316e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003176:	4b74      	ldr	r3, [pc, #464]	; (8003348 <_dtoa_r+0x2e8>)
 8003178:	2200      	movs	r2, #0
 800317a:	4630      	mov	r0, r6
 800317c:	4639      	mov	r1, r7
 800317e:	f7fd f88b 	bl	8000298 <__aeabi_dsub>
 8003182:	a365      	add	r3, pc, #404	; (adr r3, 8003318 <_dtoa_r+0x2b8>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd fa3e 	bl	8000608 <__aeabi_dmul>
 800318c:	a364      	add	r3, pc, #400	; (adr r3, 8003320 <_dtoa_r+0x2c0>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd f883 	bl	800029c <__adddf3>
 8003196:	4606      	mov	r6, r0
 8003198:	4628      	mov	r0, r5
 800319a:	460f      	mov	r7, r1
 800319c:	f7fd f9ca 	bl	8000534 <__aeabi_i2d>
 80031a0:	a361      	add	r3, pc, #388	; (adr r3, 8003328 <_dtoa_r+0x2c8>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd fa2f 	bl	8000608 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4630      	mov	r0, r6
 80031b0:	4639      	mov	r1, r7
 80031b2:	f7fd f873 	bl	800029c <__adddf3>
 80031b6:	4606      	mov	r6, r0
 80031b8:	460f      	mov	r7, r1
 80031ba:	f7fd fcd5 	bl	8000b68 <__aeabi_d2iz>
 80031be:	2200      	movs	r2, #0
 80031c0:	9000      	str	r0, [sp, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	4630      	mov	r0, r6
 80031c6:	4639      	mov	r1, r7
 80031c8:	f7fd fc90 	bl	8000aec <__aeabi_dcmplt>
 80031cc:	b150      	cbz	r0, 80031e4 <_dtoa_r+0x184>
 80031ce:	9800      	ldr	r0, [sp, #0]
 80031d0:	f7fd f9b0 	bl	8000534 <__aeabi_i2d>
 80031d4:	4632      	mov	r2, r6
 80031d6:	463b      	mov	r3, r7
 80031d8:	f7fd fc7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80031dc:	b910      	cbnz	r0, 80031e4 <_dtoa_r+0x184>
 80031de:	9b00      	ldr	r3, [sp, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	9b00      	ldr	r3, [sp, #0]
 80031e6:	2b16      	cmp	r3, #22
 80031e8:	d85a      	bhi.n	80032a0 <_dtoa_r+0x240>
 80031ea:	9a00      	ldr	r2, [sp, #0]
 80031ec:	4b57      	ldr	r3, [pc, #348]	; (800334c <_dtoa_r+0x2ec>)
 80031ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	ec51 0b19 	vmov	r0, r1, d9
 80031fa:	f7fd fc77 	bl	8000aec <__aeabi_dcmplt>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d050      	beq.n	80032a4 <_dtoa_r+0x244>
 8003202:	9b00      	ldr	r3, [sp, #0]
 8003204:	3b01      	subs	r3, #1
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	930b      	str	r3, [sp, #44]	; 0x2c
 800320c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800320e:	1b5d      	subs	r5, r3, r5
 8003210:	1e6b      	subs	r3, r5, #1
 8003212:	9305      	str	r3, [sp, #20]
 8003214:	bf45      	ittet	mi
 8003216:	f1c5 0301 	rsbmi	r3, r5, #1
 800321a:	9304      	strmi	r3, [sp, #16]
 800321c:	2300      	movpl	r3, #0
 800321e:	2300      	movmi	r3, #0
 8003220:	bf4c      	ite	mi
 8003222:	9305      	strmi	r3, [sp, #20]
 8003224:	9304      	strpl	r3, [sp, #16]
 8003226:	9b00      	ldr	r3, [sp, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db3d      	blt.n	80032a8 <_dtoa_r+0x248>
 800322c:	9b05      	ldr	r3, [sp, #20]
 800322e:	9a00      	ldr	r2, [sp, #0]
 8003230:	920a      	str	r2, [sp, #40]	; 0x28
 8003232:	4413      	add	r3, r2
 8003234:	9305      	str	r3, [sp, #20]
 8003236:	2300      	movs	r3, #0
 8003238:	9307      	str	r3, [sp, #28]
 800323a:	9b06      	ldr	r3, [sp, #24]
 800323c:	2b09      	cmp	r3, #9
 800323e:	f200 8089 	bhi.w	8003354 <_dtoa_r+0x2f4>
 8003242:	2b05      	cmp	r3, #5
 8003244:	bfc4      	itt	gt
 8003246:	3b04      	subgt	r3, #4
 8003248:	9306      	strgt	r3, [sp, #24]
 800324a:	9b06      	ldr	r3, [sp, #24]
 800324c:	f1a3 0302 	sub.w	r3, r3, #2
 8003250:	bfcc      	ite	gt
 8003252:	2500      	movgt	r5, #0
 8003254:	2501      	movle	r5, #1
 8003256:	2b03      	cmp	r3, #3
 8003258:	f200 8087 	bhi.w	800336a <_dtoa_r+0x30a>
 800325c:	e8df f003 	tbb	[pc, r3]
 8003260:	59383a2d 	.word	0x59383a2d
 8003264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003268:	441d      	add	r5, r3
 800326a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800326e:	2b20      	cmp	r3, #32
 8003270:	bfc1      	itttt	gt
 8003272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800327a:	fa0b f303 	lslgt.w	r3, fp, r3
 800327e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003282:	bfda      	itte	le
 8003284:	f1c3 0320 	rsble	r3, r3, #32
 8003288:	fa06 f003 	lslle.w	r0, r6, r3
 800328c:	4318      	orrgt	r0, r3
 800328e:	f7fd f941 	bl	8000514 <__aeabi_ui2d>
 8003292:	2301      	movs	r3, #1
 8003294:	4606      	mov	r6, r0
 8003296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800329a:	3d01      	subs	r5, #1
 800329c:	930e      	str	r3, [sp, #56]	; 0x38
 800329e:	e76a      	b.n	8003176 <_dtoa_r+0x116>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e7b2      	b.n	800320a <_dtoa_r+0x1aa>
 80032a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80032a6:	e7b1      	b.n	800320c <_dtoa_r+0x1ac>
 80032a8:	9b04      	ldr	r3, [sp, #16]
 80032aa:	9a00      	ldr	r2, [sp, #0]
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	9304      	str	r3, [sp, #16]
 80032b0:	4253      	negs	r3, r2
 80032b2:	9307      	str	r3, [sp, #28]
 80032b4:	2300      	movs	r3, #0
 80032b6:	930a      	str	r3, [sp, #40]	; 0x28
 80032b8:	e7bf      	b.n	800323a <_dtoa_r+0x1da>
 80032ba:	2300      	movs	r3, #0
 80032bc:	9308      	str	r3, [sp, #32]
 80032be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	dc55      	bgt.n	8003370 <_dtoa_r+0x310>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80032ca:	461a      	mov	r2, r3
 80032cc:	9209      	str	r2, [sp, #36]	; 0x24
 80032ce:	e00c      	b.n	80032ea <_dtoa_r+0x28a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e7f3      	b.n	80032bc <_dtoa_r+0x25c>
 80032d4:	2300      	movs	r3, #0
 80032d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032d8:	9308      	str	r3, [sp, #32]
 80032da:	9b00      	ldr	r3, [sp, #0]
 80032dc:	4413      	add	r3, r2
 80032de:	9302      	str	r3, [sp, #8]
 80032e0:	3301      	adds	r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	9303      	str	r3, [sp, #12]
 80032e6:	bfb8      	it	lt
 80032e8:	2301      	movlt	r3, #1
 80032ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80032ec:	2200      	movs	r2, #0
 80032ee:	6042      	str	r2, [r0, #4]
 80032f0:	2204      	movs	r2, #4
 80032f2:	f102 0614 	add.w	r6, r2, #20
 80032f6:	429e      	cmp	r6, r3
 80032f8:	6841      	ldr	r1, [r0, #4]
 80032fa:	d93d      	bls.n	8003378 <_dtoa_r+0x318>
 80032fc:	4620      	mov	r0, r4
 80032fe:	f000 fcb7 	bl	8003c70 <_Balloc>
 8003302:	9001      	str	r0, [sp, #4]
 8003304:	2800      	cmp	r0, #0
 8003306:	d13b      	bne.n	8003380 <_dtoa_r+0x320>
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <_dtoa_r+0x2f0>)
 800330a:	4602      	mov	r2, r0
 800330c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003310:	e6c0      	b.n	8003094 <_dtoa_r+0x34>
 8003312:	2301      	movs	r3, #1
 8003314:	e7df      	b.n	80032d6 <_dtoa_r+0x276>
 8003316:	bf00      	nop
 8003318:	636f4361 	.word	0x636f4361
 800331c:	3fd287a7 	.word	0x3fd287a7
 8003320:	8b60c8b3 	.word	0x8b60c8b3
 8003324:	3fc68a28 	.word	0x3fc68a28
 8003328:	509f79fb 	.word	0x509f79fb
 800332c:	3fd34413 	.word	0x3fd34413
 8003330:	08005fdd 	.word	0x08005fdd
 8003334:	08005ff4 	.word	0x08005ff4
 8003338:	7ff00000 	.word	0x7ff00000
 800333c:	08005fd9 	.word	0x08005fd9
 8003340:	08005fd0 	.word	0x08005fd0
 8003344:	08005fad 	.word	0x08005fad
 8003348:	3ff80000 	.word	0x3ff80000
 800334c:	080060e8 	.word	0x080060e8
 8003350:	0800604f 	.word	0x0800604f
 8003354:	2501      	movs	r5, #1
 8003356:	2300      	movs	r3, #0
 8003358:	9306      	str	r3, [sp, #24]
 800335a:	9508      	str	r5, [sp, #32]
 800335c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003364:	2200      	movs	r2, #0
 8003366:	2312      	movs	r3, #18
 8003368:	e7b0      	b.n	80032cc <_dtoa_r+0x26c>
 800336a:	2301      	movs	r3, #1
 800336c:	9308      	str	r3, [sp, #32]
 800336e:	e7f5      	b.n	800335c <_dtoa_r+0x2fc>
 8003370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003376:	e7b8      	b.n	80032ea <_dtoa_r+0x28a>
 8003378:	3101      	adds	r1, #1
 800337a:	6041      	str	r1, [r0, #4]
 800337c:	0052      	lsls	r2, r2, #1
 800337e:	e7b8      	b.n	80032f2 <_dtoa_r+0x292>
 8003380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003382:	9a01      	ldr	r2, [sp, #4]
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	2b0e      	cmp	r3, #14
 800338a:	f200 809d 	bhi.w	80034c8 <_dtoa_r+0x468>
 800338e:	2d00      	cmp	r5, #0
 8003390:	f000 809a 	beq.w	80034c8 <_dtoa_r+0x468>
 8003394:	9b00      	ldr	r3, [sp, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	dd32      	ble.n	8003400 <_dtoa_r+0x3a0>
 800339a:	4ab7      	ldr	r2, [pc, #732]	; (8003678 <_dtoa_r+0x618>)
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80033a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033a8:	9b00      	ldr	r3, [sp, #0]
 80033aa:	05d8      	lsls	r0, r3, #23
 80033ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80033b0:	d516      	bpl.n	80033e0 <_dtoa_r+0x380>
 80033b2:	4bb2      	ldr	r3, [pc, #712]	; (800367c <_dtoa_r+0x61c>)
 80033b4:	ec51 0b19 	vmov	r0, r1, d9
 80033b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033bc:	f7fd fa4e 	bl	800085c <__aeabi_ddiv>
 80033c0:	f007 070f 	and.w	r7, r7, #15
 80033c4:	4682      	mov	sl, r0
 80033c6:	468b      	mov	fp, r1
 80033c8:	2503      	movs	r5, #3
 80033ca:	4eac      	ldr	r6, [pc, #688]	; (800367c <_dtoa_r+0x61c>)
 80033cc:	b957      	cbnz	r7, 80033e4 <_dtoa_r+0x384>
 80033ce:	4642      	mov	r2, r8
 80033d0:	464b      	mov	r3, r9
 80033d2:	4650      	mov	r0, sl
 80033d4:	4659      	mov	r1, fp
 80033d6:	f7fd fa41 	bl	800085c <__aeabi_ddiv>
 80033da:	4682      	mov	sl, r0
 80033dc:	468b      	mov	fp, r1
 80033de:	e028      	b.n	8003432 <_dtoa_r+0x3d2>
 80033e0:	2502      	movs	r5, #2
 80033e2:	e7f2      	b.n	80033ca <_dtoa_r+0x36a>
 80033e4:	07f9      	lsls	r1, r7, #31
 80033e6:	d508      	bpl.n	80033fa <_dtoa_r+0x39a>
 80033e8:	4640      	mov	r0, r8
 80033ea:	4649      	mov	r1, r9
 80033ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80033f0:	f7fd f90a 	bl	8000608 <__aeabi_dmul>
 80033f4:	3501      	adds	r5, #1
 80033f6:	4680      	mov	r8, r0
 80033f8:	4689      	mov	r9, r1
 80033fa:	107f      	asrs	r7, r7, #1
 80033fc:	3608      	adds	r6, #8
 80033fe:	e7e5      	b.n	80033cc <_dtoa_r+0x36c>
 8003400:	f000 809b 	beq.w	800353a <_dtoa_r+0x4da>
 8003404:	9b00      	ldr	r3, [sp, #0]
 8003406:	4f9d      	ldr	r7, [pc, #628]	; (800367c <_dtoa_r+0x61c>)
 8003408:	425e      	negs	r6, r3
 800340a:	4b9b      	ldr	r3, [pc, #620]	; (8003678 <_dtoa_r+0x618>)
 800340c:	f006 020f 	and.w	r2, r6, #15
 8003410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	ec51 0b19 	vmov	r0, r1, d9
 800341c:	f7fd f8f4 	bl	8000608 <__aeabi_dmul>
 8003420:	1136      	asrs	r6, r6, #4
 8003422:	4682      	mov	sl, r0
 8003424:	468b      	mov	fp, r1
 8003426:	2300      	movs	r3, #0
 8003428:	2502      	movs	r5, #2
 800342a:	2e00      	cmp	r6, #0
 800342c:	d17a      	bne.n	8003524 <_dtoa_r+0x4c4>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1d3      	bne.n	80033da <_dtoa_r+0x37a>
 8003432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8082 	beq.w	800353e <_dtoa_r+0x4de>
 800343a:	4b91      	ldr	r3, [pc, #580]	; (8003680 <_dtoa_r+0x620>)
 800343c:	2200      	movs	r2, #0
 800343e:	4650      	mov	r0, sl
 8003440:	4659      	mov	r1, fp
 8003442:	f7fd fb53 	bl	8000aec <__aeabi_dcmplt>
 8003446:	2800      	cmp	r0, #0
 8003448:	d079      	beq.n	800353e <_dtoa_r+0x4de>
 800344a:	9b03      	ldr	r3, [sp, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d076      	beq.n	800353e <_dtoa_r+0x4de>
 8003450:	9b02      	ldr	r3, [sp, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	dd36      	ble.n	80034c4 <_dtoa_r+0x464>
 8003456:	9b00      	ldr	r3, [sp, #0]
 8003458:	4650      	mov	r0, sl
 800345a:	4659      	mov	r1, fp
 800345c:	1e5f      	subs	r7, r3, #1
 800345e:	2200      	movs	r2, #0
 8003460:	4b88      	ldr	r3, [pc, #544]	; (8003684 <_dtoa_r+0x624>)
 8003462:	f7fd f8d1 	bl	8000608 <__aeabi_dmul>
 8003466:	9e02      	ldr	r6, [sp, #8]
 8003468:	4682      	mov	sl, r0
 800346a:	468b      	mov	fp, r1
 800346c:	3501      	adds	r5, #1
 800346e:	4628      	mov	r0, r5
 8003470:	f7fd f860 	bl	8000534 <__aeabi_i2d>
 8003474:	4652      	mov	r2, sl
 8003476:	465b      	mov	r3, fp
 8003478:	f7fd f8c6 	bl	8000608 <__aeabi_dmul>
 800347c:	4b82      	ldr	r3, [pc, #520]	; (8003688 <_dtoa_r+0x628>)
 800347e:	2200      	movs	r2, #0
 8003480:	f7fc ff0c 	bl	800029c <__adddf3>
 8003484:	46d0      	mov	r8, sl
 8003486:	46d9      	mov	r9, fp
 8003488:	4682      	mov	sl, r0
 800348a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800348e:	2e00      	cmp	r6, #0
 8003490:	d158      	bne.n	8003544 <_dtoa_r+0x4e4>
 8003492:	4b7e      	ldr	r3, [pc, #504]	; (800368c <_dtoa_r+0x62c>)
 8003494:	2200      	movs	r2, #0
 8003496:	4640      	mov	r0, r8
 8003498:	4649      	mov	r1, r9
 800349a:	f7fc fefd 	bl	8000298 <__aeabi_dsub>
 800349e:	4652      	mov	r2, sl
 80034a0:	465b      	mov	r3, fp
 80034a2:	4680      	mov	r8, r0
 80034a4:	4689      	mov	r9, r1
 80034a6:	f7fd fb3f 	bl	8000b28 <__aeabi_dcmpgt>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	f040 8295 	bne.w	80039da <_dtoa_r+0x97a>
 80034b0:	4652      	mov	r2, sl
 80034b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80034b6:	4640      	mov	r0, r8
 80034b8:	4649      	mov	r1, r9
 80034ba:	f7fd fb17 	bl	8000aec <__aeabi_dcmplt>
 80034be:	2800      	cmp	r0, #0
 80034c0:	f040 8289 	bne.w	80039d6 <_dtoa_r+0x976>
 80034c4:	ec5b ab19 	vmov	sl, fp, d9
 80034c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f2c0 8148 	blt.w	8003760 <_dtoa_r+0x700>
 80034d0:	9a00      	ldr	r2, [sp, #0]
 80034d2:	2a0e      	cmp	r2, #14
 80034d4:	f300 8144 	bgt.w	8003760 <_dtoa_r+0x700>
 80034d8:	4b67      	ldr	r3, [pc, #412]	; (8003678 <_dtoa_r+0x618>)
 80034da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f280 80d5 	bge.w	8003694 <_dtoa_r+0x634>
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f300 80d1 	bgt.w	8003694 <_dtoa_r+0x634>
 80034f2:	f040 826f 	bne.w	80039d4 <_dtoa_r+0x974>
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <_dtoa_r+0x62c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	4640      	mov	r0, r8
 80034fc:	4649      	mov	r1, r9
 80034fe:	f7fd f883 	bl	8000608 <__aeabi_dmul>
 8003502:	4652      	mov	r2, sl
 8003504:	465b      	mov	r3, fp
 8003506:	f7fd fb05 	bl	8000b14 <__aeabi_dcmpge>
 800350a:	9e03      	ldr	r6, [sp, #12]
 800350c:	4637      	mov	r7, r6
 800350e:	2800      	cmp	r0, #0
 8003510:	f040 8245 	bne.w	800399e <_dtoa_r+0x93e>
 8003514:	9d01      	ldr	r5, [sp, #4]
 8003516:	2331      	movs	r3, #49	; 0x31
 8003518:	f805 3b01 	strb.w	r3, [r5], #1
 800351c:	9b00      	ldr	r3, [sp, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	e240      	b.n	80039a6 <_dtoa_r+0x946>
 8003524:	07f2      	lsls	r2, r6, #31
 8003526:	d505      	bpl.n	8003534 <_dtoa_r+0x4d4>
 8003528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800352c:	f7fd f86c 	bl	8000608 <__aeabi_dmul>
 8003530:	3501      	adds	r5, #1
 8003532:	2301      	movs	r3, #1
 8003534:	1076      	asrs	r6, r6, #1
 8003536:	3708      	adds	r7, #8
 8003538:	e777      	b.n	800342a <_dtoa_r+0x3ca>
 800353a:	2502      	movs	r5, #2
 800353c:	e779      	b.n	8003432 <_dtoa_r+0x3d2>
 800353e:	9f00      	ldr	r7, [sp, #0]
 8003540:	9e03      	ldr	r6, [sp, #12]
 8003542:	e794      	b.n	800346e <_dtoa_r+0x40e>
 8003544:	9901      	ldr	r1, [sp, #4]
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <_dtoa_r+0x618>)
 8003548:	4431      	add	r1, r6
 800354a:	910d      	str	r1, [sp, #52]	; 0x34
 800354c:	9908      	ldr	r1, [sp, #32]
 800354e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003556:	2900      	cmp	r1, #0
 8003558:	d043      	beq.n	80035e2 <_dtoa_r+0x582>
 800355a:	494d      	ldr	r1, [pc, #308]	; (8003690 <_dtoa_r+0x630>)
 800355c:	2000      	movs	r0, #0
 800355e:	f7fd f97d 	bl	800085c <__aeabi_ddiv>
 8003562:	4652      	mov	r2, sl
 8003564:	465b      	mov	r3, fp
 8003566:	f7fc fe97 	bl	8000298 <__aeabi_dsub>
 800356a:	9d01      	ldr	r5, [sp, #4]
 800356c:	4682      	mov	sl, r0
 800356e:	468b      	mov	fp, r1
 8003570:	4649      	mov	r1, r9
 8003572:	4640      	mov	r0, r8
 8003574:	f7fd faf8 	bl	8000b68 <__aeabi_d2iz>
 8003578:	4606      	mov	r6, r0
 800357a:	f7fc ffdb 	bl	8000534 <__aeabi_i2d>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4640      	mov	r0, r8
 8003584:	4649      	mov	r1, r9
 8003586:	f7fc fe87 	bl	8000298 <__aeabi_dsub>
 800358a:	3630      	adds	r6, #48	; 0x30
 800358c:	f805 6b01 	strb.w	r6, [r5], #1
 8003590:	4652      	mov	r2, sl
 8003592:	465b      	mov	r3, fp
 8003594:	4680      	mov	r8, r0
 8003596:	4689      	mov	r9, r1
 8003598:	f7fd faa8 	bl	8000aec <__aeabi_dcmplt>
 800359c:	2800      	cmp	r0, #0
 800359e:	d163      	bne.n	8003668 <_dtoa_r+0x608>
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	4936      	ldr	r1, [pc, #216]	; (8003680 <_dtoa_r+0x620>)
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fc fe76 	bl	8000298 <__aeabi_dsub>
 80035ac:	4652      	mov	r2, sl
 80035ae:	465b      	mov	r3, fp
 80035b0:	f7fd fa9c 	bl	8000aec <__aeabi_dcmplt>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	f040 80b5 	bne.w	8003724 <_dtoa_r+0x6c4>
 80035ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035bc:	429d      	cmp	r5, r3
 80035be:	d081      	beq.n	80034c4 <_dtoa_r+0x464>
 80035c0:	4b30      	ldr	r3, [pc, #192]	; (8003684 <_dtoa_r+0x624>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	4650      	mov	r0, sl
 80035c6:	4659      	mov	r1, fp
 80035c8:	f7fd f81e 	bl	8000608 <__aeabi_dmul>
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <_dtoa_r+0x624>)
 80035ce:	4682      	mov	sl, r0
 80035d0:	468b      	mov	fp, r1
 80035d2:	4640      	mov	r0, r8
 80035d4:	4649      	mov	r1, r9
 80035d6:	2200      	movs	r2, #0
 80035d8:	f7fd f816 	bl	8000608 <__aeabi_dmul>
 80035dc:	4680      	mov	r8, r0
 80035de:	4689      	mov	r9, r1
 80035e0:	e7c6      	b.n	8003570 <_dtoa_r+0x510>
 80035e2:	4650      	mov	r0, sl
 80035e4:	4659      	mov	r1, fp
 80035e6:	f7fd f80f 	bl	8000608 <__aeabi_dmul>
 80035ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035ec:	9d01      	ldr	r5, [sp, #4]
 80035ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80035f0:	4682      	mov	sl, r0
 80035f2:	468b      	mov	fp, r1
 80035f4:	4649      	mov	r1, r9
 80035f6:	4640      	mov	r0, r8
 80035f8:	f7fd fab6 	bl	8000b68 <__aeabi_d2iz>
 80035fc:	4606      	mov	r6, r0
 80035fe:	f7fc ff99 	bl	8000534 <__aeabi_i2d>
 8003602:	3630      	adds	r6, #48	; 0x30
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4640      	mov	r0, r8
 800360a:	4649      	mov	r1, r9
 800360c:	f7fc fe44 	bl	8000298 <__aeabi_dsub>
 8003610:	f805 6b01 	strb.w	r6, [r5], #1
 8003614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003616:	429d      	cmp	r5, r3
 8003618:	4680      	mov	r8, r0
 800361a:	4689      	mov	r9, r1
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	d124      	bne.n	800366c <_dtoa_r+0x60c>
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <_dtoa_r+0x630>)
 8003624:	4650      	mov	r0, sl
 8003626:	4659      	mov	r1, fp
 8003628:	f7fc fe38 	bl	800029c <__adddf3>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4640      	mov	r0, r8
 8003632:	4649      	mov	r1, r9
 8003634:	f7fd fa78 	bl	8000b28 <__aeabi_dcmpgt>
 8003638:	2800      	cmp	r0, #0
 800363a:	d173      	bne.n	8003724 <_dtoa_r+0x6c4>
 800363c:	4652      	mov	r2, sl
 800363e:	465b      	mov	r3, fp
 8003640:	4913      	ldr	r1, [pc, #76]	; (8003690 <_dtoa_r+0x630>)
 8003642:	2000      	movs	r0, #0
 8003644:	f7fc fe28 	bl	8000298 <__aeabi_dsub>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4640      	mov	r0, r8
 800364e:	4649      	mov	r1, r9
 8003650:	f7fd fa4c 	bl	8000aec <__aeabi_dcmplt>
 8003654:	2800      	cmp	r0, #0
 8003656:	f43f af35 	beq.w	80034c4 <_dtoa_r+0x464>
 800365a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800365c:	1e6b      	subs	r3, r5, #1
 800365e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003664:	2b30      	cmp	r3, #48	; 0x30
 8003666:	d0f8      	beq.n	800365a <_dtoa_r+0x5fa>
 8003668:	9700      	str	r7, [sp, #0]
 800366a:	e049      	b.n	8003700 <_dtoa_r+0x6a0>
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <_dtoa_r+0x624>)
 800366e:	f7fc ffcb 	bl	8000608 <__aeabi_dmul>
 8003672:	4680      	mov	r8, r0
 8003674:	4689      	mov	r9, r1
 8003676:	e7bd      	b.n	80035f4 <_dtoa_r+0x594>
 8003678:	080060e8 	.word	0x080060e8
 800367c:	080060c0 	.word	0x080060c0
 8003680:	3ff00000 	.word	0x3ff00000
 8003684:	40240000 	.word	0x40240000
 8003688:	401c0000 	.word	0x401c0000
 800368c:	40140000 	.word	0x40140000
 8003690:	3fe00000 	.word	0x3fe00000
 8003694:	9d01      	ldr	r5, [sp, #4]
 8003696:	4656      	mov	r6, sl
 8003698:	465f      	mov	r7, fp
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
 800369e:	4630      	mov	r0, r6
 80036a0:	4639      	mov	r1, r7
 80036a2:	f7fd f8db 	bl	800085c <__aeabi_ddiv>
 80036a6:	f7fd fa5f 	bl	8000b68 <__aeabi_d2iz>
 80036aa:	4682      	mov	sl, r0
 80036ac:	f7fc ff42 	bl	8000534 <__aeabi_i2d>
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	f7fc ffa8 	bl	8000608 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4630      	mov	r0, r6
 80036be:	4639      	mov	r1, r7
 80036c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80036c4:	f7fc fde8 	bl	8000298 <__aeabi_dsub>
 80036c8:	f805 6b01 	strb.w	r6, [r5], #1
 80036cc:	9e01      	ldr	r6, [sp, #4]
 80036ce:	9f03      	ldr	r7, [sp, #12]
 80036d0:	1bae      	subs	r6, r5, r6
 80036d2:	42b7      	cmp	r7, r6
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	d135      	bne.n	8003746 <_dtoa_r+0x6e6>
 80036da:	f7fc fddf 	bl	800029c <__adddf3>
 80036de:	4642      	mov	r2, r8
 80036e0:	464b      	mov	r3, r9
 80036e2:	4606      	mov	r6, r0
 80036e4:	460f      	mov	r7, r1
 80036e6:	f7fd fa1f 	bl	8000b28 <__aeabi_dcmpgt>
 80036ea:	b9d0      	cbnz	r0, 8003722 <_dtoa_r+0x6c2>
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	4630      	mov	r0, r6
 80036f2:	4639      	mov	r1, r7
 80036f4:	f7fd f9f0 	bl	8000ad8 <__aeabi_dcmpeq>
 80036f8:	b110      	cbz	r0, 8003700 <_dtoa_r+0x6a0>
 80036fa:	f01a 0f01 	tst.w	sl, #1
 80036fe:	d110      	bne.n	8003722 <_dtoa_r+0x6c2>
 8003700:	4620      	mov	r0, r4
 8003702:	ee18 1a10 	vmov	r1, s16
 8003706:	f000 faf3 	bl	8003cf0 <_Bfree>
 800370a:	2300      	movs	r3, #0
 800370c:	9800      	ldr	r0, [sp, #0]
 800370e:	702b      	strb	r3, [r5, #0]
 8003710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003712:	3001      	adds	r0, #1
 8003714:	6018      	str	r0, [r3, #0]
 8003716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003718:	2b00      	cmp	r3, #0
 800371a:	f43f acf1 	beq.w	8003100 <_dtoa_r+0xa0>
 800371e:	601d      	str	r5, [r3, #0]
 8003720:	e4ee      	b.n	8003100 <_dtoa_r+0xa0>
 8003722:	9f00      	ldr	r7, [sp, #0]
 8003724:	462b      	mov	r3, r5
 8003726:	461d      	mov	r5, r3
 8003728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800372c:	2a39      	cmp	r2, #57	; 0x39
 800372e:	d106      	bne.n	800373e <_dtoa_r+0x6de>
 8003730:	9a01      	ldr	r2, [sp, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d1f7      	bne.n	8003726 <_dtoa_r+0x6c6>
 8003736:	9901      	ldr	r1, [sp, #4]
 8003738:	2230      	movs	r2, #48	; 0x30
 800373a:	3701      	adds	r7, #1
 800373c:	700a      	strb	r2, [r1, #0]
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	3201      	adds	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e790      	b.n	8003668 <_dtoa_r+0x608>
 8003746:	4ba6      	ldr	r3, [pc, #664]	; (80039e0 <_dtoa_r+0x980>)
 8003748:	2200      	movs	r2, #0
 800374a:	f7fc ff5d 	bl	8000608 <__aeabi_dmul>
 800374e:	2200      	movs	r2, #0
 8003750:	2300      	movs	r3, #0
 8003752:	4606      	mov	r6, r0
 8003754:	460f      	mov	r7, r1
 8003756:	f7fd f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800375a:	2800      	cmp	r0, #0
 800375c:	d09d      	beq.n	800369a <_dtoa_r+0x63a>
 800375e:	e7cf      	b.n	8003700 <_dtoa_r+0x6a0>
 8003760:	9a08      	ldr	r2, [sp, #32]
 8003762:	2a00      	cmp	r2, #0
 8003764:	f000 80d7 	beq.w	8003916 <_dtoa_r+0x8b6>
 8003768:	9a06      	ldr	r2, [sp, #24]
 800376a:	2a01      	cmp	r2, #1
 800376c:	f300 80ba 	bgt.w	80038e4 <_dtoa_r+0x884>
 8003770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003772:	2a00      	cmp	r2, #0
 8003774:	f000 80b2 	beq.w	80038dc <_dtoa_r+0x87c>
 8003778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800377c:	9e07      	ldr	r6, [sp, #28]
 800377e:	9d04      	ldr	r5, [sp, #16]
 8003780:	9a04      	ldr	r2, [sp, #16]
 8003782:	441a      	add	r2, r3
 8003784:	9204      	str	r2, [sp, #16]
 8003786:	9a05      	ldr	r2, [sp, #20]
 8003788:	2101      	movs	r1, #1
 800378a:	441a      	add	r2, r3
 800378c:	4620      	mov	r0, r4
 800378e:	9205      	str	r2, [sp, #20]
 8003790:	f000 fb66 	bl	8003e60 <__i2b>
 8003794:	4607      	mov	r7, r0
 8003796:	2d00      	cmp	r5, #0
 8003798:	dd0c      	ble.n	80037b4 <_dtoa_r+0x754>
 800379a:	9b05      	ldr	r3, [sp, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	dd09      	ble.n	80037b4 <_dtoa_r+0x754>
 80037a0:	42ab      	cmp	r3, r5
 80037a2:	9a04      	ldr	r2, [sp, #16]
 80037a4:	bfa8      	it	ge
 80037a6:	462b      	movge	r3, r5
 80037a8:	1ad2      	subs	r2, r2, r3
 80037aa:	9204      	str	r2, [sp, #16]
 80037ac:	9a05      	ldr	r2, [sp, #20]
 80037ae:	1aed      	subs	r5, r5, r3
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	9305      	str	r3, [sp, #20]
 80037b4:	9b07      	ldr	r3, [sp, #28]
 80037b6:	b31b      	cbz	r3, 8003800 <_dtoa_r+0x7a0>
 80037b8:	9b08      	ldr	r3, [sp, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80af 	beq.w	800391e <_dtoa_r+0x8be>
 80037c0:	2e00      	cmp	r6, #0
 80037c2:	dd13      	ble.n	80037ec <_dtoa_r+0x78c>
 80037c4:	4639      	mov	r1, r7
 80037c6:	4632      	mov	r2, r6
 80037c8:	4620      	mov	r0, r4
 80037ca:	f000 fc09 	bl	8003fe0 <__pow5mult>
 80037ce:	ee18 2a10 	vmov	r2, s16
 80037d2:	4601      	mov	r1, r0
 80037d4:	4607      	mov	r7, r0
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 fb58 	bl	8003e8c <__multiply>
 80037dc:	ee18 1a10 	vmov	r1, s16
 80037e0:	4680      	mov	r8, r0
 80037e2:	4620      	mov	r0, r4
 80037e4:	f000 fa84 	bl	8003cf0 <_Bfree>
 80037e8:	ee08 8a10 	vmov	s16, r8
 80037ec:	9b07      	ldr	r3, [sp, #28]
 80037ee:	1b9a      	subs	r2, r3, r6
 80037f0:	d006      	beq.n	8003800 <_dtoa_r+0x7a0>
 80037f2:	ee18 1a10 	vmov	r1, s16
 80037f6:	4620      	mov	r0, r4
 80037f8:	f000 fbf2 	bl	8003fe0 <__pow5mult>
 80037fc:	ee08 0a10 	vmov	s16, r0
 8003800:	2101      	movs	r1, #1
 8003802:	4620      	mov	r0, r4
 8003804:	f000 fb2c 	bl	8003e60 <__i2b>
 8003808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	4606      	mov	r6, r0
 800380e:	f340 8088 	ble.w	8003922 <_dtoa_r+0x8c2>
 8003812:	461a      	mov	r2, r3
 8003814:	4601      	mov	r1, r0
 8003816:	4620      	mov	r0, r4
 8003818:	f000 fbe2 	bl	8003fe0 <__pow5mult>
 800381c:	9b06      	ldr	r3, [sp, #24]
 800381e:	2b01      	cmp	r3, #1
 8003820:	4606      	mov	r6, r0
 8003822:	f340 8081 	ble.w	8003928 <_dtoa_r+0x8c8>
 8003826:	f04f 0800 	mov.w	r8, #0
 800382a:	6933      	ldr	r3, [r6, #16]
 800382c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003830:	6918      	ldr	r0, [r3, #16]
 8003832:	f000 fac5 	bl	8003dc0 <__hi0bits>
 8003836:	f1c0 0020 	rsb	r0, r0, #32
 800383a:	9b05      	ldr	r3, [sp, #20]
 800383c:	4418      	add	r0, r3
 800383e:	f010 001f 	ands.w	r0, r0, #31
 8003842:	f000 8092 	beq.w	800396a <_dtoa_r+0x90a>
 8003846:	f1c0 0320 	rsb	r3, r0, #32
 800384a:	2b04      	cmp	r3, #4
 800384c:	f340 808a 	ble.w	8003964 <_dtoa_r+0x904>
 8003850:	f1c0 001c 	rsb	r0, r0, #28
 8003854:	9b04      	ldr	r3, [sp, #16]
 8003856:	4403      	add	r3, r0
 8003858:	9304      	str	r3, [sp, #16]
 800385a:	9b05      	ldr	r3, [sp, #20]
 800385c:	4403      	add	r3, r0
 800385e:	4405      	add	r5, r0
 8003860:	9305      	str	r3, [sp, #20]
 8003862:	9b04      	ldr	r3, [sp, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	dd07      	ble.n	8003878 <_dtoa_r+0x818>
 8003868:	ee18 1a10 	vmov	r1, s16
 800386c:	461a      	mov	r2, r3
 800386e:	4620      	mov	r0, r4
 8003870:	f000 fc10 	bl	8004094 <__lshift>
 8003874:	ee08 0a10 	vmov	s16, r0
 8003878:	9b05      	ldr	r3, [sp, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	dd05      	ble.n	800388a <_dtoa_r+0x82a>
 800387e:	4631      	mov	r1, r6
 8003880:	461a      	mov	r2, r3
 8003882:	4620      	mov	r0, r4
 8003884:	f000 fc06 	bl	8004094 <__lshift>
 8003888:	4606      	mov	r6, r0
 800388a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d06e      	beq.n	800396e <_dtoa_r+0x90e>
 8003890:	ee18 0a10 	vmov	r0, s16
 8003894:	4631      	mov	r1, r6
 8003896:	f000 fc6d 	bl	8004174 <__mcmp>
 800389a:	2800      	cmp	r0, #0
 800389c:	da67      	bge.n	800396e <_dtoa_r+0x90e>
 800389e:	9b00      	ldr	r3, [sp, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	ee18 1a10 	vmov	r1, s16
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	220a      	movs	r2, #10
 80038aa:	2300      	movs	r3, #0
 80038ac:	4620      	mov	r0, r4
 80038ae:	f000 fa41 	bl	8003d34 <__multadd>
 80038b2:	9b08      	ldr	r3, [sp, #32]
 80038b4:	ee08 0a10 	vmov	s16, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 81b1 	beq.w	8003c20 <_dtoa_r+0xbc0>
 80038be:	2300      	movs	r3, #0
 80038c0:	4639      	mov	r1, r7
 80038c2:	220a      	movs	r2, #10
 80038c4:	4620      	mov	r0, r4
 80038c6:	f000 fa35 	bl	8003d34 <__multadd>
 80038ca:	9b02      	ldr	r3, [sp, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	4607      	mov	r7, r0
 80038d0:	f300 808e 	bgt.w	80039f0 <_dtoa_r+0x990>
 80038d4:	9b06      	ldr	r3, [sp, #24]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	dc51      	bgt.n	800397e <_dtoa_r+0x91e>
 80038da:	e089      	b.n	80039f0 <_dtoa_r+0x990>
 80038dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80038e2:	e74b      	b.n	800377c <_dtoa_r+0x71c>
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	1e5e      	subs	r6, r3, #1
 80038e8:	9b07      	ldr	r3, [sp, #28]
 80038ea:	42b3      	cmp	r3, r6
 80038ec:	bfbf      	itttt	lt
 80038ee:	9b07      	ldrlt	r3, [sp, #28]
 80038f0:	9607      	strlt	r6, [sp, #28]
 80038f2:	1af2      	sublt	r2, r6, r3
 80038f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80038f6:	bfb6      	itet	lt
 80038f8:	189b      	addlt	r3, r3, r2
 80038fa:	1b9e      	subge	r6, r3, r6
 80038fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	bfb8      	it	lt
 8003902:	2600      	movlt	r6, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	bfb7      	itett	lt
 8003908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800390c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003910:	1a9d      	sublt	r5, r3, r2
 8003912:	2300      	movlt	r3, #0
 8003914:	e734      	b.n	8003780 <_dtoa_r+0x720>
 8003916:	9e07      	ldr	r6, [sp, #28]
 8003918:	9d04      	ldr	r5, [sp, #16]
 800391a:	9f08      	ldr	r7, [sp, #32]
 800391c:	e73b      	b.n	8003796 <_dtoa_r+0x736>
 800391e:	9a07      	ldr	r2, [sp, #28]
 8003920:	e767      	b.n	80037f2 <_dtoa_r+0x792>
 8003922:	9b06      	ldr	r3, [sp, #24]
 8003924:	2b01      	cmp	r3, #1
 8003926:	dc18      	bgt.n	800395a <_dtoa_r+0x8fa>
 8003928:	f1ba 0f00 	cmp.w	sl, #0
 800392c:	d115      	bne.n	800395a <_dtoa_r+0x8fa>
 800392e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003932:	b993      	cbnz	r3, 800395a <_dtoa_r+0x8fa>
 8003934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003938:	0d1b      	lsrs	r3, r3, #20
 800393a:	051b      	lsls	r3, r3, #20
 800393c:	b183      	cbz	r3, 8003960 <_dtoa_r+0x900>
 800393e:	9b04      	ldr	r3, [sp, #16]
 8003940:	3301      	adds	r3, #1
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	9b05      	ldr	r3, [sp, #20]
 8003946:	3301      	adds	r3, #1
 8003948:	9305      	str	r3, [sp, #20]
 800394a:	f04f 0801 	mov.w	r8, #1
 800394e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f af6a 	bne.w	800382a <_dtoa_r+0x7ca>
 8003956:	2001      	movs	r0, #1
 8003958:	e76f      	b.n	800383a <_dtoa_r+0x7da>
 800395a:	f04f 0800 	mov.w	r8, #0
 800395e:	e7f6      	b.n	800394e <_dtoa_r+0x8ee>
 8003960:	4698      	mov	r8, r3
 8003962:	e7f4      	b.n	800394e <_dtoa_r+0x8ee>
 8003964:	f43f af7d 	beq.w	8003862 <_dtoa_r+0x802>
 8003968:	4618      	mov	r0, r3
 800396a:	301c      	adds	r0, #28
 800396c:	e772      	b.n	8003854 <_dtoa_r+0x7f4>
 800396e:	9b03      	ldr	r3, [sp, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	dc37      	bgt.n	80039e4 <_dtoa_r+0x984>
 8003974:	9b06      	ldr	r3, [sp, #24]
 8003976:	2b02      	cmp	r3, #2
 8003978:	dd34      	ble.n	80039e4 <_dtoa_r+0x984>
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	9b02      	ldr	r3, [sp, #8]
 8003980:	b96b      	cbnz	r3, 800399e <_dtoa_r+0x93e>
 8003982:	4631      	mov	r1, r6
 8003984:	2205      	movs	r2, #5
 8003986:	4620      	mov	r0, r4
 8003988:	f000 f9d4 	bl	8003d34 <__multadd>
 800398c:	4601      	mov	r1, r0
 800398e:	4606      	mov	r6, r0
 8003990:	ee18 0a10 	vmov	r0, s16
 8003994:	f000 fbee 	bl	8004174 <__mcmp>
 8003998:	2800      	cmp	r0, #0
 800399a:	f73f adbb 	bgt.w	8003514 <_dtoa_r+0x4b4>
 800399e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a0:	9d01      	ldr	r5, [sp, #4]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f04f 0800 	mov.w	r8, #0
 80039aa:	4631      	mov	r1, r6
 80039ac:	4620      	mov	r0, r4
 80039ae:	f000 f99f 	bl	8003cf0 <_Bfree>
 80039b2:	2f00      	cmp	r7, #0
 80039b4:	f43f aea4 	beq.w	8003700 <_dtoa_r+0x6a0>
 80039b8:	f1b8 0f00 	cmp.w	r8, #0
 80039bc:	d005      	beq.n	80039ca <_dtoa_r+0x96a>
 80039be:	45b8      	cmp	r8, r7
 80039c0:	d003      	beq.n	80039ca <_dtoa_r+0x96a>
 80039c2:	4641      	mov	r1, r8
 80039c4:	4620      	mov	r0, r4
 80039c6:	f000 f993 	bl	8003cf0 <_Bfree>
 80039ca:	4639      	mov	r1, r7
 80039cc:	4620      	mov	r0, r4
 80039ce:	f000 f98f 	bl	8003cf0 <_Bfree>
 80039d2:	e695      	b.n	8003700 <_dtoa_r+0x6a0>
 80039d4:	2600      	movs	r6, #0
 80039d6:	4637      	mov	r7, r6
 80039d8:	e7e1      	b.n	800399e <_dtoa_r+0x93e>
 80039da:	9700      	str	r7, [sp, #0]
 80039dc:	4637      	mov	r7, r6
 80039de:	e599      	b.n	8003514 <_dtoa_r+0x4b4>
 80039e0:	40240000 	.word	0x40240000
 80039e4:	9b08      	ldr	r3, [sp, #32]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80ca 	beq.w	8003b80 <_dtoa_r+0xb20>
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	9302      	str	r3, [sp, #8]
 80039f0:	2d00      	cmp	r5, #0
 80039f2:	dd05      	ble.n	8003a00 <_dtoa_r+0x9a0>
 80039f4:	4639      	mov	r1, r7
 80039f6:	462a      	mov	r2, r5
 80039f8:	4620      	mov	r0, r4
 80039fa:	f000 fb4b 	bl	8004094 <__lshift>
 80039fe:	4607      	mov	r7, r0
 8003a00:	f1b8 0f00 	cmp.w	r8, #0
 8003a04:	d05b      	beq.n	8003abe <_dtoa_r+0xa5e>
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f000 f931 	bl	8003c70 <_Balloc>
 8003a0e:	4605      	mov	r5, r0
 8003a10:	b928      	cbnz	r0, 8003a1e <_dtoa_r+0x9be>
 8003a12:	4b87      	ldr	r3, [pc, #540]	; (8003c30 <_dtoa_r+0xbd0>)
 8003a14:	4602      	mov	r2, r0
 8003a16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003a1a:	f7ff bb3b 	b.w	8003094 <_dtoa_r+0x34>
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	3202      	adds	r2, #2
 8003a22:	0092      	lsls	r2, r2, #2
 8003a24:	f107 010c 	add.w	r1, r7, #12
 8003a28:	300c      	adds	r0, #12
 8003a2a:	f000 f913 	bl	8003c54 <memcpy>
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4629      	mov	r1, r5
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 fb2e 	bl	8004094 <__lshift>
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	f103 0901 	add.w	r9, r3, #1
 8003a3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	9305      	str	r3, [sp, #20]
 8003a46:	f00a 0301 	and.w	r3, sl, #1
 8003a4a:	46b8      	mov	r8, r7
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	4607      	mov	r7, r0
 8003a50:	4631      	mov	r1, r6
 8003a52:	ee18 0a10 	vmov	r0, s16
 8003a56:	f7ff fa77 	bl	8002f48 <quorem>
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	9002      	str	r0, [sp, #8]
 8003a5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003a62:	ee18 0a10 	vmov	r0, s16
 8003a66:	f000 fb85 	bl	8004174 <__mcmp>
 8003a6a:	463a      	mov	r2, r7
 8003a6c:	9003      	str	r0, [sp, #12]
 8003a6e:	4631      	mov	r1, r6
 8003a70:	4620      	mov	r0, r4
 8003a72:	f000 fb9b 	bl	80041ac <__mdiff>
 8003a76:	68c2      	ldr	r2, [r0, #12]
 8003a78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	bb02      	cbnz	r2, 8003ac2 <_dtoa_r+0xa62>
 8003a80:	4601      	mov	r1, r0
 8003a82:	ee18 0a10 	vmov	r0, s16
 8003a86:	f000 fb75 	bl	8004174 <__mcmp>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4620      	mov	r0, r4
 8003a90:	9207      	str	r2, [sp, #28]
 8003a92:	f000 f92d 	bl	8003cf0 <_Bfree>
 8003a96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003a9a:	ea43 0102 	orr.w	r1, r3, r2
 8003a9e:	9b04      	ldr	r3, [sp, #16]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	464d      	mov	r5, r9
 8003aa4:	d10f      	bne.n	8003ac6 <_dtoa_r+0xa66>
 8003aa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003aaa:	d02a      	beq.n	8003b02 <_dtoa_r+0xaa2>
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	dd02      	ble.n	8003ab8 <_dtoa_r+0xa58>
 8003ab2:	9b02      	ldr	r3, [sp, #8]
 8003ab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003ab8:	f88b a000 	strb.w	sl, [fp]
 8003abc:	e775      	b.n	80039aa <_dtoa_r+0x94a>
 8003abe:	4638      	mov	r0, r7
 8003ac0:	e7ba      	b.n	8003a38 <_dtoa_r+0x9d8>
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	e7e2      	b.n	8003a8c <_dtoa_r+0xa2c>
 8003ac6:	9b03      	ldr	r3, [sp, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db04      	blt.n	8003ad6 <_dtoa_r+0xa76>
 8003acc:	9906      	ldr	r1, [sp, #24]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	9904      	ldr	r1, [sp, #16]
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	d122      	bne.n	8003b1c <_dtoa_r+0xabc>
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	ddee      	ble.n	8003ab8 <_dtoa_r+0xa58>
 8003ada:	ee18 1a10 	vmov	r1, s16
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f000 fad7 	bl	8004094 <__lshift>
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	ee08 0a10 	vmov	s16, r0
 8003aec:	f000 fb42 	bl	8004174 <__mcmp>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	dc03      	bgt.n	8003afc <_dtoa_r+0xa9c>
 8003af4:	d1e0      	bne.n	8003ab8 <_dtoa_r+0xa58>
 8003af6:	f01a 0f01 	tst.w	sl, #1
 8003afa:	d0dd      	beq.n	8003ab8 <_dtoa_r+0xa58>
 8003afc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003b00:	d1d7      	bne.n	8003ab2 <_dtoa_r+0xa52>
 8003b02:	2339      	movs	r3, #57	; 0x39
 8003b04:	f88b 3000 	strb.w	r3, [fp]
 8003b08:	462b      	mov	r3, r5
 8003b0a:	461d      	mov	r5, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003b12:	2a39      	cmp	r2, #57	; 0x39
 8003b14:	d071      	beq.n	8003bfa <_dtoa_r+0xb9a>
 8003b16:	3201      	adds	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e746      	b.n	80039aa <_dtoa_r+0x94a>
 8003b1c:	2a00      	cmp	r2, #0
 8003b1e:	dd07      	ble.n	8003b30 <_dtoa_r+0xad0>
 8003b20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003b24:	d0ed      	beq.n	8003b02 <_dtoa_r+0xaa2>
 8003b26:	f10a 0301 	add.w	r3, sl, #1
 8003b2a:	f88b 3000 	strb.w	r3, [fp]
 8003b2e:	e73c      	b.n	80039aa <_dtoa_r+0x94a>
 8003b30:	9b05      	ldr	r3, [sp, #20]
 8003b32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003b36:	4599      	cmp	r9, r3
 8003b38:	d047      	beq.n	8003bca <_dtoa_r+0xb6a>
 8003b3a:	ee18 1a10 	vmov	r1, s16
 8003b3e:	2300      	movs	r3, #0
 8003b40:	220a      	movs	r2, #10
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f8f6 	bl	8003d34 <__multadd>
 8003b48:	45b8      	cmp	r8, r7
 8003b4a:	ee08 0a10 	vmov	s16, r0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f04f 020a 	mov.w	r2, #10
 8003b56:	4641      	mov	r1, r8
 8003b58:	4620      	mov	r0, r4
 8003b5a:	d106      	bne.n	8003b6a <_dtoa_r+0xb0a>
 8003b5c:	f000 f8ea 	bl	8003d34 <__multadd>
 8003b60:	4680      	mov	r8, r0
 8003b62:	4607      	mov	r7, r0
 8003b64:	f109 0901 	add.w	r9, r9, #1
 8003b68:	e772      	b.n	8003a50 <_dtoa_r+0x9f0>
 8003b6a:	f000 f8e3 	bl	8003d34 <__multadd>
 8003b6e:	4639      	mov	r1, r7
 8003b70:	4680      	mov	r8, r0
 8003b72:	2300      	movs	r3, #0
 8003b74:	220a      	movs	r2, #10
 8003b76:	4620      	mov	r0, r4
 8003b78:	f000 f8dc 	bl	8003d34 <__multadd>
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	e7f1      	b.n	8003b64 <_dtoa_r+0xb04>
 8003b80:	9b03      	ldr	r3, [sp, #12]
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	9d01      	ldr	r5, [sp, #4]
 8003b86:	ee18 0a10 	vmov	r0, s16
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	f7ff f9dc 	bl	8002f48 <quorem>
 8003b90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003b94:	9b01      	ldr	r3, [sp, #4]
 8003b96:	f805 ab01 	strb.w	sl, [r5], #1
 8003b9a:	1aea      	subs	r2, r5, r3
 8003b9c:	9b02      	ldr	r3, [sp, #8]
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	dd09      	ble.n	8003bb6 <_dtoa_r+0xb56>
 8003ba2:	ee18 1a10 	vmov	r1, s16
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	220a      	movs	r2, #10
 8003baa:	4620      	mov	r0, r4
 8003bac:	f000 f8c2 	bl	8003d34 <__multadd>
 8003bb0:	ee08 0a10 	vmov	s16, r0
 8003bb4:	e7e7      	b.n	8003b86 <_dtoa_r+0xb26>
 8003bb6:	9b02      	ldr	r3, [sp, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bfc8      	it	gt
 8003bbc:	461d      	movgt	r5, r3
 8003bbe:	9b01      	ldr	r3, [sp, #4]
 8003bc0:	bfd8      	it	le
 8003bc2:	2501      	movle	r5, #1
 8003bc4:	441d      	add	r5, r3
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	ee18 1a10 	vmov	r1, s16
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f000 fa5f 	bl	8004094 <__lshift>
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	ee08 0a10 	vmov	s16, r0
 8003bdc:	f000 faca 	bl	8004174 <__mcmp>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	dc91      	bgt.n	8003b08 <_dtoa_r+0xaa8>
 8003be4:	d102      	bne.n	8003bec <_dtoa_r+0xb8c>
 8003be6:	f01a 0f01 	tst.w	sl, #1
 8003bea:	d18d      	bne.n	8003b08 <_dtoa_r+0xaa8>
 8003bec:	462b      	mov	r3, r5
 8003bee:	461d      	mov	r5, r3
 8003bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003bf4:	2a30      	cmp	r2, #48	; 0x30
 8003bf6:	d0fa      	beq.n	8003bee <_dtoa_r+0xb8e>
 8003bf8:	e6d7      	b.n	80039aa <_dtoa_r+0x94a>
 8003bfa:	9a01      	ldr	r2, [sp, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d184      	bne.n	8003b0a <_dtoa_r+0xaaa>
 8003c00:	9b00      	ldr	r3, [sp, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2331      	movs	r3, #49	; 0x31
 8003c08:	7013      	strb	r3, [r2, #0]
 8003c0a:	e6ce      	b.n	80039aa <_dtoa_r+0x94a>
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <_dtoa_r+0xbd4>)
 8003c0e:	f7ff ba95 	b.w	800313c <_dtoa_r+0xdc>
 8003c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f47f aa6e 	bne.w	80030f6 <_dtoa_r+0x96>
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <_dtoa_r+0xbd8>)
 8003c1c:	f7ff ba8e 	b.w	800313c <_dtoa_r+0xdc>
 8003c20:	9b02      	ldr	r3, [sp, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dcae      	bgt.n	8003b84 <_dtoa_r+0xb24>
 8003c26:	9b06      	ldr	r3, [sp, #24]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	f73f aea8 	bgt.w	800397e <_dtoa_r+0x91e>
 8003c2e:	e7a9      	b.n	8003b84 <_dtoa_r+0xb24>
 8003c30:	0800604f 	.word	0x0800604f
 8003c34:	08005fac 	.word	0x08005fac
 8003c38:	08005fd0 	.word	0x08005fd0

08003c3c <_localeconv_r>:
 8003c3c:	4800      	ldr	r0, [pc, #0]	; (8003c40 <_localeconv_r+0x4>)
 8003c3e:	4770      	bx	lr
 8003c40:	20000158 	.word	0x20000158

08003c44 <malloc>:
 8003c44:	4b02      	ldr	r3, [pc, #8]	; (8003c50 <malloc+0xc>)
 8003c46:	4601      	mov	r1, r0
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	f000 bc17 	b.w	800447c <_malloc_r>
 8003c4e:	bf00      	nop
 8003c50:	20000004 	.word	0x20000004

08003c54 <memcpy>:
 8003c54:	440a      	add	r2, r1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003c5c:	d100      	bne.n	8003c60 <memcpy+0xc>
 8003c5e:	4770      	bx	lr
 8003c60:	b510      	push	{r4, lr}
 8003c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6a:	4291      	cmp	r1, r2
 8003c6c:	d1f9      	bne.n	8003c62 <memcpy+0xe>
 8003c6e:	bd10      	pop	{r4, pc}

08003c70 <_Balloc>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003c74:	4604      	mov	r4, r0
 8003c76:	460d      	mov	r5, r1
 8003c78:	b976      	cbnz	r6, 8003c98 <_Balloc+0x28>
 8003c7a:	2010      	movs	r0, #16
 8003c7c:	f7ff ffe2 	bl	8003c44 <malloc>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6260      	str	r0, [r4, #36]	; 0x24
 8003c84:	b920      	cbnz	r0, 8003c90 <_Balloc+0x20>
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <_Balloc+0x78>)
 8003c88:	4818      	ldr	r0, [pc, #96]	; (8003cec <_Balloc+0x7c>)
 8003c8a:	2166      	movs	r1, #102	; 0x66
 8003c8c:	f000 fc7a 	bl	8004584 <__assert_func>
 8003c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c94:	6006      	str	r6, [r0, #0]
 8003c96:	60c6      	str	r6, [r0, #12]
 8003c98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003c9a:	68f3      	ldr	r3, [r6, #12]
 8003c9c:	b183      	cbz	r3, 8003cc0 <_Balloc+0x50>
 8003c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003ca6:	b9b8      	cbnz	r0, 8003cd8 <_Balloc+0x68>
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f605 	lsl.w	r6, r1, r5
 8003cae:	1d72      	adds	r2, r6, #5
 8003cb0:	0092      	lsls	r2, r2, #2
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f000 fb60 	bl	8004378 <_calloc_r>
 8003cb8:	b160      	cbz	r0, 8003cd4 <_Balloc+0x64>
 8003cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003cbe:	e00e      	b.n	8003cde <_Balloc+0x6e>
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f000 fb57 	bl	8004378 <_calloc_r>
 8003cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ccc:	60f0      	str	r0, [r6, #12]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e4      	bne.n	8003c9e <_Balloc+0x2e>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	6802      	ldr	r2, [r0, #0]
 8003cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003ce4:	e7f7      	b.n	8003cd6 <_Balloc+0x66>
 8003ce6:	bf00      	nop
 8003ce8:	08005fdd 	.word	0x08005fdd
 8003cec:	08006060 	.word	0x08006060

08003cf0 <_Bfree>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	b976      	cbnz	r6, 8003d18 <_Bfree+0x28>
 8003cfa:	2010      	movs	r0, #16
 8003cfc:	f7ff ffa2 	bl	8003c44 <malloc>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6268      	str	r0, [r5, #36]	; 0x24
 8003d04:	b920      	cbnz	r0, 8003d10 <_Bfree+0x20>
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <_Bfree+0x3c>)
 8003d08:	4809      	ldr	r0, [pc, #36]	; (8003d30 <_Bfree+0x40>)
 8003d0a:	218a      	movs	r1, #138	; 0x8a
 8003d0c:	f000 fc3a 	bl	8004584 <__assert_func>
 8003d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003d14:	6006      	str	r6, [r0, #0]
 8003d16:	60c6      	str	r6, [r0, #12]
 8003d18:	b13c      	cbz	r4, 8003d2a <_Bfree+0x3a>
 8003d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d1c:	6862      	ldr	r2, [r4, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d24:	6021      	str	r1, [r4, #0]
 8003d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	08005fdd 	.word	0x08005fdd
 8003d30:	08006060 	.word	0x08006060

08003d34 <__multadd>:
 8003d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d38:	690d      	ldr	r5, [r1, #16]
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	461e      	mov	r6, r3
 8003d40:	f101 0c14 	add.w	ip, r1, #20
 8003d44:	2000      	movs	r0, #0
 8003d46:	f8dc 3000 	ldr.w	r3, [ip]
 8003d4a:	b299      	uxth	r1, r3
 8003d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8003d50:	0c1e      	lsrs	r6, r3, #16
 8003d52:	0c0b      	lsrs	r3, r1, #16
 8003d54:	fb02 3306 	mla	r3, r2, r6, r3
 8003d58:	b289      	uxth	r1, r1
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003d60:	4285      	cmp	r5, r0
 8003d62:	f84c 1b04 	str.w	r1, [ip], #4
 8003d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003d6a:	dcec      	bgt.n	8003d46 <__multadd+0x12>
 8003d6c:	b30e      	cbz	r6, 8003db2 <__multadd+0x7e>
 8003d6e:	68a3      	ldr	r3, [r4, #8]
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	dc19      	bgt.n	8003da8 <__multadd+0x74>
 8003d74:	6861      	ldr	r1, [r4, #4]
 8003d76:	4638      	mov	r0, r7
 8003d78:	3101      	adds	r1, #1
 8003d7a:	f7ff ff79 	bl	8003c70 <_Balloc>
 8003d7e:	4680      	mov	r8, r0
 8003d80:	b928      	cbnz	r0, 8003d8e <__multadd+0x5a>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <__multadd+0x84>)
 8003d86:	480d      	ldr	r0, [pc, #52]	; (8003dbc <__multadd+0x88>)
 8003d88:	21b5      	movs	r1, #181	; 0xb5
 8003d8a:	f000 fbfb 	bl	8004584 <__assert_func>
 8003d8e:	6922      	ldr	r2, [r4, #16]
 8003d90:	3202      	adds	r2, #2
 8003d92:	f104 010c 	add.w	r1, r4, #12
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	300c      	adds	r0, #12
 8003d9a:	f7ff ff5b 	bl	8003c54 <memcpy>
 8003d9e:	4621      	mov	r1, r4
 8003da0:	4638      	mov	r0, r7
 8003da2:	f7ff ffa5 	bl	8003cf0 <_Bfree>
 8003da6:	4644      	mov	r4, r8
 8003da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003dac:	3501      	adds	r5, #1
 8003dae:	615e      	str	r6, [r3, #20]
 8003db0:	6125      	str	r5, [r4, #16]
 8003db2:	4620      	mov	r0, r4
 8003db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db8:	0800604f 	.word	0x0800604f
 8003dbc:	08006060 	.word	0x08006060

08003dc0 <__hi0bits>:
 8003dc0:	0c03      	lsrs	r3, r0, #16
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	b9d3      	cbnz	r3, 8003dfc <__hi0bits+0x3c>
 8003dc6:	0400      	lsls	r0, r0, #16
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003dce:	bf04      	itt	eq
 8003dd0:	0200      	lsleq	r0, r0, #8
 8003dd2:	3308      	addeq	r3, #8
 8003dd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003dd8:	bf04      	itt	eq
 8003dda:	0100      	lsleq	r0, r0, #4
 8003ddc:	3304      	addeq	r3, #4
 8003dde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003de2:	bf04      	itt	eq
 8003de4:	0080      	lsleq	r0, r0, #2
 8003de6:	3302      	addeq	r3, #2
 8003de8:	2800      	cmp	r0, #0
 8003dea:	db05      	blt.n	8003df8 <__hi0bits+0x38>
 8003dec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003df0:	f103 0301 	add.w	r3, r3, #1
 8003df4:	bf08      	it	eq
 8003df6:	2320      	moveq	r3, #32
 8003df8:	4618      	mov	r0, r3
 8003dfa:	4770      	bx	lr
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e7e4      	b.n	8003dca <__hi0bits+0xa>

08003e00 <__lo0bits>:
 8003e00:	6803      	ldr	r3, [r0, #0]
 8003e02:	f013 0207 	ands.w	r2, r3, #7
 8003e06:	4601      	mov	r1, r0
 8003e08:	d00b      	beq.n	8003e22 <__lo0bits+0x22>
 8003e0a:	07da      	lsls	r2, r3, #31
 8003e0c:	d423      	bmi.n	8003e56 <__lo0bits+0x56>
 8003e0e:	0798      	lsls	r0, r3, #30
 8003e10:	bf49      	itett	mi
 8003e12:	085b      	lsrmi	r3, r3, #1
 8003e14:	089b      	lsrpl	r3, r3, #2
 8003e16:	2001      	movmi	r0, #1
 8003e18:	600b      	strmi	r3, [r1, #0]
 8003e1a:	bf5c      	itt	pl
 8003e1c:	600b      	strpl	r3, [r1, #0]
 8003e1e:	2002      	movpl	r0, #2
 8003e20:	4770      	bx	lr
 8003e22:	b298      	uxth	r0, r3
 8003e24:	b9a8      	cbnz	r0, 8003e52 <__lo0bits+0x52>
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	2010      	movs	r0, #16
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	b90a      	cbnz	r2, 8003e32 <__lo0bits+0x32>
 8003e2e:	3008      	adds	r0, #8
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	071a      	lsls	r2, r3, #28
 8003e34:	bf04      	itt	eq
 8003e36:	091b      	lsreq	r3, r3, #4
 8003e38:	3004      	addeq	r0, #4
 8003e3a:	079a      	lsls	r2, r3, #30
 8003e3c:	bf04      	itt	eq
 8003e3e:	089b      	lsreq	r3, r3, #2
 8003e40:	3002      	addeq	r0, #2
 8003e42:	07da      	lsls	r2, r3, #31
 8003e44:	d403      	bmi.n	8003e4e <__lo0bits+0x4e>
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	f100 0001 	add.w	r0, r0, #1
 8003e4c:	d005      	beq.n	8003e5a <__lo0bits+0x5a>
 8003e4e:	600b      	str	r3, [r1, #0]
 8003e50:	4770      	bx	lr
 8003e52:	4610      	mov	r0, r2
 8003e54:	e7e9      	b.n	8003e2a <__lo0bits+0x2a>
 8003e56:	2000      	movs	r0, #0
 8003e58:	4770      	bx	lr
 8003e5a:	2020      	movs	r0, #32
 8003e5c:	4770      	bx	lr
	...

08003e60 <__i2b>:
 8003e60:	b510      	push	{r4, lr}
 8003e62:	460c      	mov	r4, r1
 8003e64:	2101      	movs	r1, #1
 8003e66:	f7ff ff03 	bl	8003c70 <_Balloc>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	b928      	cbnz	r0, 8003e7a <__i2b+0x1a>
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <__i2b+0x24>)
 8003e70:	4805      	ldr	r0, [pc, #20]	; (8003e88 <__i2b+0x28>)
 8003e72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003e76:	f000 fb85 	bl	8004584 <__assert_func>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	6144      	str	r4, [r0, #20]
 8003e7e:	6103      	str	r3, [r0, #16]
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	bf00      	nop
 8003e84:	0800604f 	.word	0x0800604f
 8003e88:	08006060 	.word	0x08006060

08003e8c <__multiply>:
 8003e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	4691      	mov	r9, r2
 8003e92:	690a      	ldr	r2, [r1, #16]
 8003e94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bfb8      	it	lt
 8003e9c:	460b      	movlt	r3, r1
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	bfbc      	itt	lt
 8003ea2:	464c      	movlt	r4, r9
 8003ea4:	4699      	movlt	r9, r3
 8003ea6:	6927      	ldr	r7, [r4, #16]
 8003ea8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003eac:	68a3      	ldr	r3, [r4, #8]
 8003eae:	6861      	ldr	r1, [r4, #4]
 8003eb0:	eb07 060a 	add.w	r6, r7, sl
 8003eb4:	42b3      	cmp	r3, r6
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	bfb8      	it	lt
 8003eba:	3101      	addlt	r1, #1
 8003ebc:	f7ff fed8 	bl	8003c70 <_Balloc>
 8003ec0:	b930      	cbnz	r0, 8003ed0 <__multiply+0x44>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <__multiply+0x14c>)
 8003ec6:	4845      	ldr	r0, [pc, #276]	; (8003fdc <__multiply+0x150>)
 8003ec8:	f240 115d 	movw	r1, #349	; 0x15d
 8003ecc:	f000 fb5a 	bl	8004584 <__assert_func>
 8003ed0:	f100 0514 	add.w	r5, r0, #20
 8003ed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003ed8:	462b      	mov	r3, r5
 8003eda:	2200      	movs	r2, #0
 8003edc:	4543      	cmp	r3, r8
 8003ede:	d321      	bcc.n	8003f24 <__multiply+0x98>
 8003ee0:	f104 0314 	add.w	r3, r4, #20
 8003ee4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003ee8:	f109 0314 	add.w	r3, r9, #20
 8003eec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003ef0:	9202      	str	r2, [sp, #8]
 8003ef2:	1b3a      	subs	r2, r7, r4
 8003ef4:	3a15      	subs	r2, #21
 8003ef6:	f022 0203 	bic.w	r2, r2, #3
 8003efa:	3204      	adds	r2, #4
 8003efc:	f104 0115 	add.w	r1, r4, #21
 8003f00:	428f      	cmp	r7, r1
 8003f02:	bf38      	it	cc
 8003f04:	2204      	movcc	r2, #4
 8003f06:	9201      	str	r2, [sp, #4]
 8003f08:	9a02      	ldr	r2, [sp, #8]
 8003f0a:	9303      	str	r3, [sp, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d80c      	bhi.n	8003f2a <__multiply+0x9e>
 8003f10:	2e00      	cmp	r6, #0
 8003f12:	dd03      	ble.n	8003f1c <__multiply+0x90>
 8003f14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d05a      	beq.n	8003fd2 <__multiply+0x146>
 8003f1c:	6106      	str	r6, [r0, #16]
 8003f1e:	b005      	add	sp, #20
 8003f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f24:	f843 2b04 	str.w	r2, [r3], #4
 8003f28:	e7d8      	b.n	8003edc <__multiply+0x50>
 8003f2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8003f2e:	f1ba 0f00 	cmp.w	sl, #0
 8003f32:	d024      	beq.n	8003f7e <__multiply+0xf2>
 8003f34:	f104 0e14 	add.w	lr, r4, #20
 8003f38:	46a9      	mov	r9, r5
 8003f3a:	f04f 0c00 	mov.w	ip, #0
 8003f3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003f42:	f8d9 1000 	ldr.w	r1, [r9]
 8003f46:	fa1f fb82 	uxth.w	fp, r2
 8003f4a:	b289      	uxth	r1, r1
 8003f4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8003f50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003f54:	f8d9 2000 	ldr.w	r2, [r9]
 8003f58:	4461      	add	r1, ip
 8003f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003f5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8003f62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003f66:	b289      	uxth	r1, r1
 8003f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003f6c:	4577      	cmp	r7, lr
 8003f6e:	f849 1b04 	str.w	r1, [r9], #4
 8003f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003f76:	d8e2      	bhi.n	8003f3e <__multiply+0xb2>
 8003f78:	9a01      	ldr	r2, [sp, #4]
 8003f7a:	f845 c002 	str.w	ip, [r5, r2]
 8003f7e:	9a03      	ldr	r2, [sp, #12]
 8003f80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003f84:	3304      	adds	r3, #4
 8003f86:	f1b9 0f00 	cmp.w	r9, #0
 8003f8a:	d020      	beq.n	8003fce <__multiply+0x142>
 8003f8c:	6829      	ldr	r1, [r5, #0]
 8003f8e:	f104 0c14 	add.w	ip, r4, #20
 8003f92:	46ae      	mov	lr, r5
 8003f94:	f04f 0a00 	mov.w	sl, #0
 8003f98:	f8bc b000 	ldrh.w	fp, [ip]
 8003f9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003fa0:	fb09 220b 	mla	r2, r9, fp, r2
 8003fa4:	4492      	add	sl, r2
 8003fa6:	b289      	uxth	r1, r1
 8003fa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003fac:	f84e 1b04 	str.w	r1, [lr], #4
 8003fb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003fb4:	f8be 1000 	ldrh.w	r1, [lr]
 8003fb8:	0c12      	lsrs	r2, r2, #16
 8003fba:	fb09 1102 	mla	r1, r9, r2, r1
 8003fbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003fc2:	4567      	cmp	r7, ip
 8003fc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003fc8:	d8e6      	bhi.n	8003f98 <__multiply+0x10c>
 8003fca:	9a01      	ldr	r2, [sp, #4]
 8003fcc:	50a9      	str	r1, [r5, r2]
 8003fce:	3504      	adds	r5, #4
 8003fd0:	e79a      	b.n	8003f08 <__multiply+0x7c>
 8003fd2:	3e01      	subs	r6, #1
 8003fd4:	e79c      	b.n	8003f10 <__multiply+0x84>
 8003fd6:	bf00      	nop
 8003fd8:	0800604f 	.word	0x0800604f
 8003fdc:	08006060 	.word	0x08006060

08003fe0 <__pow5mult>:
 8003fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe4:	4615      	mov	r5, r2
 8003fe6:	f012 0203 	ands.w	r2, r2, #3
 8003fea:	4606      	mov	r6, r0
 8003fec:	460f      	mov	r7, r1
 8003fee:	d007      	beq.n	8004000 <__pow5mult+0x20>
 8003ff0:	4c25      	ldr	r4, [pc, #148]	; (8004088 <__pow5mult+0xa8>)
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ffa:	f7ff fe9b 	bl	8003d34 <__multadd>
 8003ffe:	4607      	mov	r7, r0
 8004000:	10ad      	asrs	r5, r5, #2
 8004002:	d03d      	beq.n	8004080 <__pow5mult+0xa0>
 8004004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004006:	b97c      	cbnz	r4, 8004028 <__pow5mult+0x48>
 8004008:	2010      	movs	r0, #16
 800400a:	f7ff fe1b 	bl	8003c44 <malloc>
 800400e:	4602      	mov	r2, r0
 8004010:	6270      	str	r0, [r6, #36]	; 0x24
 8004012:	b928      	cbnz	r0, 8004020 <__pow5mult+0x40>
 8004014:	4b1d      	ldr	r3, [pc, #116]	; (800408c <__pow5mult+0xac>)
 8004016:	481e      	ldr	r0, [pc, #120]	; (8004090 <__pow5mult+0xb0>)
 8004018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800401c:	f000 fab2 	bl	8004584 <__assert_func>
 8004020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004024:	6004      	str	r4, [r0, #0]
 8004026:	60c4      	str	r4, [r0, #12]
 8004028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800402c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004030:	b94c      	cbnz	r4, 8004046 <__pow5mult+0x66>
 8004032:	f240 2171 	movw	r1, #625	; 0x271
 8004036:	4630      	mov	r0, r6
 8004038:	f7ff ff12 	bl	8003e60 <__i2b>
 800403c:	2300      	movs	r3, #0
 800403e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004042:	4604      	mov	r4, r0
 8004044:	6003      	str	r3, [r0, #0]
 8004046:	f04f 0900 	mov.w	r9, #0
 800404a:	07eb      	lsls	r3, r5, #31
 800404c:	d50a      	bpl.n	8004064 <__pow5mult+0x84>
 800404e:	4639      	mov	r1, r7
 8004050:	4622      	mov	r2, r4
 8004052:	4630      	mov	r0, r6
 8004054:	f7ff ff1a 	bl	8003e8c <__multiply>
 8004058:	4639      	mov	r1, r7
 800405a:	4680      	mov	r8, r0
 800405c:	4630      	mov	r0, r6
 800405e:	f7ff fe47 	bl	8003cf0 <_Bfree>
 8004062:	4647      	mov	r7, r8
 8004064:	106d      	asrs	r5, r5, #1
 8004066:	d00b      	beq.n	8004080 <__pow5mult+0xa0>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	b938      	cbnz	r0, 800407c <__pow5mult+0x9c>
 800406c:	4622      	mov	r2, r4
 800406e:	4621      	mov	r1, r4
 8004070:	4630      	mov	r0, r6
 8004072:	f7ff ff0b 	bl	8003e8c <__multiply>
 8004076:	6020      	str	r0, [r4, #0]
 8004078:	f8c0 9000 	str.w	r9, [r0]
 800407c:	4604      	mov	r4, r0
 800407e:	e7e4      	b.n	800404a <__pow5mult+0x6a>
 8004080:	4638      	mov	r0, r7
 8004082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004086:	bf00      	nop
 8004088:	080061b0 	.word	0x080061b0
 800408c:	08005fdd 	.word	0x08005fdd
 8004090:	08006060 	.word	0x08006060

08004094 <__lshift>:
 8004094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	460c      	mov	r4, r1
 800409a:	6849      	ldr	r1, [r1, #4]
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	4607      	mov	r7, r0
 80040a6:	4691      	mov	r9, r2
 80040a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80040ac:	f108 0601 	add.w	r6, r8, #1
 80040b0:	42b3      	cmp	r3, r6
 80040b2:	db0b      	blt.n	80040cc <__lshift+0x38>
 80040b4:	4638      	mov	r0, r7
 80040b6:	f7ff fddb 	bl	8003c70 <_Balloc>
 80040ba:	4605      	mov	r5, r0
 80040bc:	b948      	cbnz	r0, 80040d2 <__lshift+0x3e>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <__lshift+0xd8>)
 80040c2:	482b      	ldr	r0, [pc, #172]	; (8004170 <__lshift+0xdc>)
 80040c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80040c8:	f000 fa5c 	bl	8004584 <__assert_func>
 80040cc:	3101      	adds	r1, #1
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	e7ee      	b.n	80040b0 <__lshift+0x1c>
 80040d2:	2300      	movs	r3, #0
 80040d4:	f100 0114 	add.w	r1, r0, #20
 80040d8:	f100 0210 	add.w	r2, r0, #16
 80040dc:	4618      	mov	r0, r3
 80040de:	4553      	cmp	r3, sl
 80040e0:	db37      	blt.n	8004152 <__lshift+0xbe>
 80040e2:	6920      	ldr	r0, [r4, #16]
 80040e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80040e8:	f104 0314 	add.w	r3, r4, #20
 80040ec:	f019 091f 	ands.w	r9, r9, #31
 80040f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80040f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80040f8:	d02f      	beq.n	800415a <__lshift+0xc6>
 80040fa:	f1c9 0e20 	rsb	lr, r9, #32
 80040fe:	468a      	mov	sl, r1
 8004100:	f04f 0c00 	mov.w	ip, #0
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	fa02 f209 	lsl.w	r2, r2, r9
 800410a:	ea42 020c 	orr.w	r2, r2, ip
 800410e:	f84a 2b04 	str.w	r2, [sl], #4
 8004112:	f853 2b04 	ldr.w	r2, [r3], #4
 8004116:	4298      	cmp	r0, r3
 8004118:	fa22 fc0e 	lsr.w	ip, r2, lr
 800411c:	d8f2      	bhi.n	8004104 <__lshift+0x70>
 800411e:	1b03      	subs	r3, r0, r4
 8004120:	3b15      	subs	r3, #21
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	3304      	adds	r3, #4
 8004128:	f104 0215 	add.w	r2, r4, #21
 800412c:	4290      	cmp	r0, r2
 800412e:	bf38      	it	cc
 8004130:	2304      	movcc	r3, #4
 8004132:	f841 c003 	str.w	ip, [r1, r3]
 8004136:	f1bc 0f00 	cmp.w	ip, #0
 800413a:	d001      	beq.n	8004140 <__lshift+0xac>
 800413c:	f108 0602 	add.w	r6, r8, #2
 8004140:	3e01      	subs	r6, #1
 8004142:	4638      	mov	r0, r7
 8004144:	612e      	str	r6, [r5, #16]
 8004146:	4621      	mov	r1, r4
 8004148:	f7ff fdd2 	bl	8003cf0 <_Bfree>
 800414c:	4628      	mov	r0, r5
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	f842 0f04 	str.w	r0, [r2, #4]!
 8004156:	3301      	adds	r3, #1
 8004158:	e7c1      	b.n	80040de <__lshift+0x4a>
 800415a:	3904      	subs	r1, #4
 800415c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004160:	f841 2f04 	str.w	r2, [r1, #4]!
 8004164:	4298      	cmp	r0, r3
 8004166:	d8f9      	bhi.n	800415c <__lshift+0xc8>
 8004168:	e7ea      	b.n	8004140 <__lshift+0xac>
 800416a:	bf00      	nop
 800416c:	0800604f 	.word	0x0800604f
 8004170:	08006060 	.word	0x08006060

08004174 <__mcmp>:
 8004174:	b530      	push	{r4, r5, lr}
 8004176:	6902      	ldr	r2, [r0, #16]
 8004178:	690c      	ldr	r4, [r1, #16]
 800417a:	1b12      	subs	r2, r2, r4
 800417c:	d10e      	bne.n	800419c <__mcmp+0x28>
 800417e:	f100 0314 	add.w	r3, r0, #20
 8004182:	3114      	adds	r1, #20
 8004184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800418c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004194:	42a5      	cmp	r5, r4
 8004196:	d003      	beq.n	80041a0 <__mcmp+0x2c>
 8004198:	d305      	bcc.n	80041a6 <__mcmp+0x32>
 800419a:	2201      	movs	r2, #1
 800419c:	4610      	mov	r0, r2
 800419e:	bd30      	pop	{r4, r5, pc}
 80041a0:	4283      	cmp	r3, r0
 80041a2:	d3f3      	bcc.n	800418c <__mcmp+0x18>
 80041a4:	e7fa      	b.n	800419c <__mcmp+0x28>
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041aa:	e7f7      	b.n	800419c <__mcmp+0x28>

080041ac <__mdiff>:
 80041ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	460c      	mov	r4, r1
 80041b2:	4606      	mov	r6, r0
 80041b4:	4611      	mov	r1, r2
 80041b6:	4620      	mov	r0, r4
 80041b8:	4690      	mov	r8, r2
 80041ba:	f7ff ffdb 	bl	8004174 <__mcmp>
 80041be:	1e05      	subs	r5, r0, #0
 80041c0:	d110      	bne.n	80041e4 <__mdiff+0x38>
 80041c2:	4629      	mov	r1, r5
 80041c4:	4630      	mov	r0, r6
 80041c6:	f7ff fd53 	bl	8003c70 <_Balloc>
 80041ca:	b930      	cbnz	r0, 80041da <__mdiff+0x2e>
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <__mdiff+0x10c>)
 80041ce:	4602      	mov	r2, r0
 80041d0:	f240 2132 	movw	r1, #562	; 0x232
 80041d4:	4839      	ldr	r0, [pc, #228]	; (80042bc <__mdiff+0x110>)
 80041d6:	f000 f9d5 	bl	8004584 <__assert_func>
 80041da:	2301      	movs	r3, #1
 80041dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80041e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e4:	bfa4      	itt	ge
 80041e6:	4643      	movge	r3, r8
 80041e8:	46a0      	movge	r8, r4
 80041ea:	4630      	mov	r0, r6
 80041ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80041f0:	bfa6      	itte	ge
 80041f2:	461c      	movge	r4, r3
 80041f4:	2500      	movge	r5, #0
 80041f6:	2501      	movlt	r5, #1
 80041f8:	f7ff fd3a 	bl	8003c70 <_Balloc>
 80041fc:	b920      	cbnz	r0, 8004208 <__mdiff+0x5c>
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <__mdiff+0x10c>)
 8004200:	4602      	mov	r2, r0
 8004202:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004206:	e7e5      	b.n	80041d4 <__mdiff+0x28>
 8004208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800420c:	6926      	ldr	r6, [r4, #16]
 800420e:	60c5      	str	r5, [r0, #12]
 8004210:	f104 0914 	add.w	r9, r4, #20
 8004214:	f108 0514 	add.w	r5, r8, #20
 8004218:	f100 0e14 	add.w	lr, r0, #20
 800421c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004224:	f108 0210 	add.w	r2, r8, #16
 8004228:	46f2      	mov	sl, lr
 800422a:	2100      	movs	r1, #0
 800422c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004234:	fa1f f883 	uxth.w	r8, r3
 8004238:	fa11 f18b 	uxtah	r1, r1, fp
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	eba1 0808 	sub.w	r8, r1, r8
 8004242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004246:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800424a:	fa1f f888 	uxth.w	r8, r8
 800424e:	1419      	asrs	r1, r3, #16
 8004250:	454e      	cmp	r6, r9
 8004252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004256:	f84a 3b04 	str.w	r3, [sl], #4
 800425a:	d8e7      	bhi.n	800422c <__mdiff+0x80>
 800425c:	1b33      	subs	r3, r6, r4
 800425e:	3b15      	subs	r3, #21
 8004260:	f023 0303 	bic.w	r3, r3, #3
 8004264:	3304      	adds	r3, #4
 8004266:	3415      	adds	r4, #21
 8004268:	42a6      	cmp	r6, r4
 800426a:	bf38      	it	cc
 800426c:	2304      	movcc	r3, #4
 800426e:	441d      	add	r5, r3
 8004270:	4473      	add	r3, lr
 8004272:	469e      	mov	lr, r3
 8004274:	462e      	mov	r6, r5
 8004276:	4566      	cmp	r6, ip
 8004278:	d30e      	bcc.n	8004298 <__mdiff+0xec>
 800427a:	f10c 0203 	add.w	r2, ip, #3
 800427e:	1b52      	subs	r2, r2, r5
 8004280:	f022 0203 	bic.w	r2, r2, #3
 8004284:	3d03      	subs	r5, #3
 8004286:	45ac      	cmp	ip, r5
 8004288:	bf38      	it	cc
 800428a:	2200      	movcc	r2, #0
 800428c:	441a      	add	r2, r3
 800428e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004292:	b17b      	cbz	r3, 80042b4 <__mdiff+0x108>
 8004294:	6107      	str	r7, [r0, #16]
 8004296:	e7a3      	b.n	80041e0 <__mdiff+0x34>
 8004298:	f856 8b04 	ldr.w	r8, [r6], #4
 800429c:	fa11 f288 	uxtah	r2, r1, r8
 80042a0:	1414      	asrs	r4, r2, #16
 80042a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80042a6:	b292      	uxth	r2, r2
 80042a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80042ac:	f84e 2b04 	str.w	r2, [lr], #4
 80042b0:	1421      	asrs	r1, r4, #16
 80042b2:	e7e0      	b.n	8004276 <__mdiff+0xca>
 80042b4:	3f01      	subs	r7, #1
 80042b6:	e7ea      	b.n	800428e <__mdiff+0xe2>
 80042b8:	0800604f 	.word	0x0800604f
 80042bc:	08006060 	.word	0x08006060

080042c0 <__d2b>:
 80042c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042c4:	4689      	mov	r9, r1
 80042c6:	2101      	movs	r1, #1
 80042c8:	ec57 6b10 	vmov	r6, r7, d0
 80042cc:	4690      	mov	r8, r2
 80042ce:	f7ff fccf 	bl	8003c70 <_Balloc>
 80042d2:	4604      	mov	r4, r0
 80042d4:	b930      	cbnz	r0, 80042e4 <__d2b+0x24>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <__d2b+0xb0>)
 80042da:	4826      	ldr	r0, [pc, #152]	; (8004374 <__d2b+0xb4>)
 80042dc:	f240 310a 	movw	r1, #778	; 0x30a
 80042e0:	f000 f950 	bl	8004584 <__assert_func>
 80042e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80042e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80042ec:	bb35      	cbnz	r5, 800433c <__d2b+0x7c>
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	d028      	beq.n	8004346 <__d2b+0x86>
 80042f4:	4668      	mov	r0, sp
 80042f6:	9600      	str	r6, [sp, #0]
 80042f8:	f7ff fd82 	bl	8003e00 <__lo0bits>
 80042fc:	9900      	ldr	r1, [sp, #0]
 80042fe:	b300      	cbz	r0, 8004342 <__d2b+0x82>
 8004300:	9a01      	ldr	r2, [sp, #4]
 8004302:	f1c0 0320 	rsb	r3, r0, #32
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	430b      	orrs	r3, r1
 800430c:	40c2      	lsrs	r2, r0
 800430e:	6163      	str	r3, [r4, #20]
 8004310:	9201      	str	r2, [sp, #4]
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	61a3      	str	r3, [r4, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2202      	movne	r2, #2
 800431c:	2201      	moveq	r2, #1
 800431e:	6122      	str	r2, [r4, #16]
 8004320:	b1d5      	cbz	r5, 8004358 <__d2b+0x98>
 8004322:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004326:	4405      	add	r5, r0
 8004328:	f8c9 5000 	str.w	r5, [r9]
 800432c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004330:	f8c8 0000 	str.w	r0, [r8]
 8004334:	4620      	mov	r0, r4
 8004336:	b003      	add	sp, #12
 8004338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800433c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004340:	e7d5      	b.n	80042ee <__d2b+0x2e>
 8004342:	6161      	str	r1, [r4, #20]
 8004344:	e7e5      	b.n	8004312 <__d2b+0x52>
 8004346:	a801      	add	r0, sp, #4
 8004348:	f7ff fd5a 	bl	8003e00 <__lo0bits>
 800434c:	9b01      	ldr	r3, [sp, #4]
 800434e:	6163      	str	r3, [r4, #20]
 8004350:	2201      	movs	r2, #1
 8004352:	6122      	str	r2, [r4, #16]
 8004354:	3020      	adds	r0, #32
 8004356:	e7e3      	b.n	8004320 <__d2b+0x60>
 8004358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800435c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004360:	f8c9 0000 	str.w	r0, [r9]
 8004364:	6918      	ldr	r0, [r3, #16]
 8004366:	f7ff fd2b 	bl	8003dc0 <__hi0bits>
 800436a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800436e:	e7df      	b.n	8004330 <__d2b+0x70>
 8004370:	0800604f 	.word	0x0800604f
 8004374:	08006060 	.word	0x08006060

08004378 <_calloc_r>:
 8004378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800437a:	fba1 2402 	umull	r2, r4, r1, r2
 800437e:	b94c      	cbnz	r4, 8004394 <_calloc_r+0x1c>
 8004380:	4611      	mov	r1, r2
 8004382:	9201      	str	r2, [sp, #4]
 8004384:	f000 f87a 	bl	800447c <_malloc_r>
 8004388:	9a01      	ldr	r2, [sp, #4]
 800438a:	4605      	mov	r5, r0
 800438c:	b930      	cbnz	r0, 800439c <_calloc_r+0x24>
 800438e:	4628      	mov	r0, r5
 8004390:	b003      	add	sp, #12
 8004392:	bd30      	pop	{r4, r5, pc}
 8004394:	220c      	movs	r2, #12
 8004396:	6002      	str	r2, [r0, #0]
 8004398:	2500      	movs	r5, #0
 800439a:	e7f8      	b.n	800438e <_calloc_r+0x16>
 800439c:	4621      	mov	r1, r4
 800439e:	f7fe f961 	bl	8002664 <memset>
 80043a2:	e7f4      	b.n	800438e <_calloc_r+0x16>

080043a4 <_free_r>:
 80043a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043a6:	2900      	cmp	r1, #0
 80043a8:	d044      	beq.n	8004434 <_free_r+0x90>
 80043aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ae:	9001      	str	r0, [sp, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f1a1 0404 	sub.w	r4, r1, #4
 80043b6:	bfb8      	it	lt
 80043b8:	18e4      	addlt	r4, r4, r3
 80043ba:	f000 f925 	bl	8004608 <__malloc_lock>
 80043be:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <_free_r+0x94>)
 80043c0:	9801      	ldr	r0, [sp, #4]
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	b933      	cbnz	r3, 80043d4 <_free_r+0x30>
 80043c6:	6063      	str	r3, [r4, #4]
 80043c8:	6014      	str	r4, [r2, #0]
 80043ca:	b003      	add	sp, #12
 80043cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d0:	f000 b920 	b.w	8004614 <__malloc_unlock>
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	d908      	bls.n	80043ea <_free_r+0x46>
 80043d8:	6825      	ldr	r5, [r4, #0]
 80043da:	1961      	adds	r1, r4, r5
 80043dc:	428b      	cmp	r3, r1
 80043de:	bf01      	itttt	eq
 80043e0:	6819      	ldreq	r1, [r3, #0]
 80043e2:	685b      	ldreq	r3, [r3, #4]
 80043e4:	1949      	addeq	r1, r1, r5
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	e7ed      	b.n	80043c6 <_free_r+0x22>
 80043ea:	461a      	mov	r2, r3
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b10b      	cbz	r3, 80043f4 <_free_r+0x50>
 80043f0:	42a3      	cmp	r3, r4
 80043f2:	d9fa      	bls.n	80043ea <_free_r+0x46>
 80043f4:	6811      	ldr	r1, [r2, #0]
 80043f6:	1855      	adds	r5, r2, r1
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d10b      	bne.n	8004414 <_free_r+0x70>
 80043fc:	6824      	ldr	r4, [r4, #0]
 80043fe:	4421      	add	r1, r4
 8004400:	1854      	adds	r4, r2, r1
 8004402:	42a3      	cmp	r3, r4
 8004404:	6011      	str	r1, [r2, #0]
 8004406:	d1e0      	bne.n	80043ca <_free_r+0x26>
 8004408:	681c      	ldr	r4, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	6053      	str	r3, [r2, #4]
 800440e:	4421      	add	r1, r4
 8004410:	6011      	str	r1, [r2, #0]
 8004412:	e7da      	b.n	80043ca <_free_r+0x26>
 8004414:	d902      	bls.n	800441c <_free_r+0x78>
 8004416:	230c      	movs	r3, #12
 8004418:	6003      	str	r3, [r0, #0]
 800441a:	e7d6      	b.n	80043ca <_free_r+0x26>
 800441c:	6825      	ldr	r5, [r4, #0]
 800441e:	1961      	adds	r1, r4, r5
 8004420:	428b      	cmp	r3, r1
 8004422:	bf04      	itt	eq
 8004424:	6819      	ldreq	r1, [r3, #0]
 8004426:	685b      	ldreq	r3, [r3, #4]
 8004428:	6063      	str	r3, [r4, #4]
 800442a:	bf04      	itt	eq
 800442c:	1949      	addeq	r1, r1, r5
 800442e:	6021      	streq	r1, [r4, #0]
 8004430:	6054      	str	r4, [r2, #4]
 8004432:	e7ca      	b.n	80043ca <_free_r+0x26>
 8004434:	b003      	add	sp, #12
 8004436:	bd30      	pop	{r4, r5, pc}
 8004438:	200002f4 	.word	0x200002f4

0800443c <sbrk_aligned>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4e0e      	ldr	r6, [pc, #56]	; (8004478 <sbrk_aligned+0x3c>)
 8004440:	460c      	mov	r4, r1
 8004442:	6831      	ldr	r1, [r6, #0]
 8004444:	4605      	mov	r5, r0
 8004446:	b911      	cbnz	r1, 800444e <sbrk_aligned+0x12>
 8004448:	f000 f88c 	bl	8004564 <_sbrk_r>
 800444c:	6030      	str	r0, [r6, #0]
 800444e:	4621      	mov	r1, r4
 8004450:	4628      	mov	r0, r5
 8004452:	f000 f887 	bl	8004564 <_sbrk_r>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	d00a      	beq.n	8004470 <sbrk_aligned+0x34>
 800445a:	1cc4      	adds	r4, r0, #3
 800445c:	f024 0403 	bic.w	r4, r4, #3
 8004460:	42a0      	cmp	r0, r4
 8004462:	d007      	beq.n	8004474 <sbrk_aligned+0x38>
 8004464:	1a21      	subs	r1, r4, r0
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f87c 	bl	8004564 <_sbrk_r>
 800446c:	3001      	adds	r0, #1
 800446e:	d101      	bne.n	8004474 <sbrk_aligned+0x38>
 8004470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004474:	4620      	mov	r0, r4
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	200002f8 	.word	0x200002f8

0800447c <_malloc_r>:
 800447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004480:	1ccd      	adds	r5, r1, #3
 8004482:	f025 0503 	bic.w	r5, r5, #3
 8004486:	3508      	adds	r5, #8
 8004488:	2d0c      	cmp	r5, #12
 800448a:	bf38      	it	cc
 800448c:	250c      	movcc	r5, #12
 800448e:	2d00      	cmp	r5, #0
 8004490:	4607      	mov	r7, r0
 8004492:	db01      	blt.n	8004498 <_malloc_r+0x1c>
 8004494:	42a9      	cmp	r1, r5
 8004496:	d905      	bls.n	80044a4 <_malloc_r+0x28>
 8004498:	230c      	movs	r3, #12
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	2600      	movs	r6, #0
 800449e:	4630      	mov	r0, r6
 80044a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a4:	4e2e      	ldr	r6, [pc, #184]	; (8004560 <_malloc_r+0xe4>)
 80044a6:	f000 f8af 	bl	8004608 <__malloc_lock>
 80044aa:	6833      	ldr	r3, [r6, #0]
 80044ac:	461c      	mov	r4, r3
 80044ae:	bb34      	cbnz	r4, 80044fe <_malloc_r+0x82>
 80044b0:	4629      	mov	r1, r5
 80044b2:	4638      	mov	r0, r7
 80044b4:	f7ff ffc2 	bl	800443c <sbrk_aligned>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	4604      	mov	r4, r0
 80044bc:	d14d      	bne.n	800455a <_malloc_r+0xde>
 80044be:	6834      	ldr	r4, [r6, #0]
 80044c0:	4626      	mov	r6, r4
 80044c2:	2e00      	cmp	r6, #0
 80044c4:	d140      	bne.n	8004548 <_malloc_r+0xcc>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	4631      	mov	r1, r6
 80044ca:	4638      	mov	r0, r7
 80044cc:	eb04 0803 	add.w	r8, r4, r3
 80044d0:	f000 f848 	bl	8004564 <_sbrk_r>
 80044d4:	4580      	cmp	r8, r0
 80044d6:	d13a      	bne.n	800454e <_malloc_r+0xd2>
 80044d8:	6821      	ldr	r1, [r4, #0]
 80044da:	3503      	adds	r5, #3
 80044dc:	1a6d      	subs	r5, r5, r1
 80044de:	f025 0503 	bic.w	r5, r5, #3
 80044e2:	3508      	adds	r5, #8
 80044e4:	2d0c      	cmp	r5, #12
 80044e6:	bf38      	it	cc
 80044e8:	250c      	movcc	r5, #12
 80044ea:	4629      	mov	r1, r5
 80044ec:	4638      	mov	r0, r7
 80044ee:	f7ff ffa5 	bl	800443c <sbrk_aligned>
 80044f2:	3001      	adds	r0, #1
 80044f4:	d02b      	beq.n	800454e <_malloc_r+0xd2>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	442b      	add	r3, r5
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	e00e      	b.n	800451c <_malloc_r+0xa0>
 80044fe:	6822      	ldr	r2, [r4, #0]
 8004500:	1b52      	subs	r2, r2, r5
 8004502:	d41e      	bmi.n	8004542 <_malloc_r+0xc6>
 8004504:	2a0b      	cmp	r2, #11
 8004506:	d916      	bls.n	8004536 <_malloc_r+0xba>
 8004508:	1961      	adds	r1, r4, r5
 800450a:	42a3      	cmp	r3, r4
 800450c:	6025      	str	r5, [r4, #0]
 800450e:	bf18      	it	ne
 8004510:	6059      	strne	r1, [r3, #4]
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	bf08      	it	eq
 8004516:	6031      	streq	r1, [r6, #0]
 8004518:	5162      	str	r2, [r4, r5]
 800451a:	604b      	str	r3, [r1, #4]
 800451c:	4638      	mov	r0, r7
 800451e:	f104 060b 	add.w	r6, r4, #11
 8004522:	f000 f877 	bl	8004614 <__malloc_unlock>
 8004526:	f026 0607 	bic.w	r6, r6, #7
 800452a:	1d23      	adds	r3, r4, #4
 800452c:	1af2      	subs	r2, r6, r3
 800452e:	d0b6      	beq.n	800449e <_malloc_r+0x22>
 8004530:	1b9b      	subs	r3, r3, r6
 8004532:	50a3      	str	r3, [r4, r2]
 8004534:	e7b3      	b.n	800449e <_malloc_r+0x22>
 8004536:	6862      	ldr	r2, [r4, #4]
 8004538:	42a3      	cmp	r3, r4
 800453a:	bf0c      	ite	eq
 800453c:	6032      	streq	r2, [r6, #0]
 800453e:	605a      	strne	r2, [r3, #4]
 8004540:	e7ec      	b.n	800451c <_malloc_r+0xa0>
 8004542:	4623      	mov	r3, r4
 8004544:	6864      	ldr	r4, [r4, #4]
 8004546:	e7b2      	b.n	80044ae <_malloc_r+0x32>
 8004548:	4634      	mov	r4, r6
 800454a:	6876      	ldr	r6, [r6, #4]
 800454c:	e7b9      	b.n	80044c2 <_malloc_r+0x46>
 800454e:	230c      	movs	r3, #12
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4638      	mov	r0, r7
 8004554:	f000 f85e 	bl	8004614 <__malloc_unlock>
 8004558:	e7a1      	b.n	800449e <_malloc_r+0x22>
 800455a:	6025      	str	r5, [r4, #0]
 800455c:	e7de      	b.n	800451c <_malloc_r+0xa0>
 800455e:	bf00      	nop
 8004560:	200002f4 	.word	0x200002f4

08004564 <_sbrk_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d06      	ldr	r5, [pc, #24]	; (8004580 <_sbrk_r+0x1c>)
 8004568:	2300      	movs	r3, #0
 800456a:	4604      	mov	r4, r0
 800456c:	4608      	mov	r0, r1
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f001 fcf8 	bl	8005f64 <_sbrk>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_sbrk_r+0x1a>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_sbrk_r+0x1a>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	200002fc 	.word	0x200002fc

08004584 <__assert_func>:
 8004584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004586:	4614      	mov	r4, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <__assert_func+0x2c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4605      	mov	r5, r0
 8004590:	68d8      	ldr	r0, [r3, #12]
 8004592:	b14c      	cbz	r4, 80045a8 <__assert_func+0x24>
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <__assert_func+0x30>)
 8004596:	9100      	str	r1, [sp, #0]
 8004598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800459c:	4906      	ldr	r1, [pc, #24]	; (80045b8 <__assert_func+0x34>)
 800459e:	462b      	mov	r3, r5
 80045a0:	f000 f80e 	bl	80045c0 <fiprintf>
 80045a4:	f000 fa64 	bl	8004a70 <abort>
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <__assert_func+0x38>)
 80045aa:	461c      	mov	r4, r3
 80045ac:	e7f3      	b.n	8004596 <__assert_func+0x12>
 80045ae:	bf00      	nop
 80045b0:	20000004 	.word	0x20000004
 80045b4:	080061bc 	.word	0x080061bc
 80045b8:	080061c9 	.word	0x080061c9
 80045bc:	080061f7 	.word	0x080061f7

080045c0 <fiprintf>:
 80045c0:	b40e      	push	{r1, r2, r3}
 80045c2:	b503      	push	{r0, r1, lr}
 80045c4:	4601      	mov	r1, r0
 80045c6:	ab03      	add	r3, sp, #12
 80045c8:	4805      	ldr	r0, [pc, #20]	; (80045e0 <fiprintf+0x20>)
 80045ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	f000 f84f 	bl	8004674 <_vfiprintf_r>
 80045d6:	b002      	add	sp, #8
 80045d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045dc:	b003      	add	sp, #12
 80045de:	4770      	bx	lr
 80045e0:	20000004 	.word	0x20000004

080045e4 <__ascii_mbtowc>:
 80045e4:	b082      	sub	sp, #8
 80045e6:	b901      	cbnz	r1, 80045ea <__ascii_mbtowc+0x6>
 80045e8:	a901      	add	r1, sp, #4
 80045ea:	b142      	cbz	r2, 80045fe <__ascii_mbtowc+0x1a>
 80045ec:	b14b      	cbz	r3, 8004602 <__ascii_mbtowc+0x1e>
 80045ee:	7813      	ldrb	r3, [r2, #0]
 80045f0:	600b      	str	r3, [r1, #0]
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	1e10      	subs	r0, r2, #0
 80045f6:	bf18      	it	ne
 80045f8:	2001      	movne	r0, #1
 80045fa:	b002      	add	sp, #8
 80045fc:	4770      	bx	lr
 80045fe:	4610      	mov	r0, r2
 8004600:	e7fb      	b.n	80045fa <__ascii_mbtowc+0x16>
 8004602:	f06f 0001 	mvn.w	r0, #1
 8004606:	e7f8      	b.n	80045fa <__ascii_mbtowc+0x16>

08004608 <__malloc_lock>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__malloc_lock+0x8>)
 800460a:	f000 bbf1 	b.w	8004df0 <__retarget_lock_acquire_recursive>
 800460e:	bf00      	nop
 8004610:	20000300 	.word	0x20000300

08004614 <__malloc_unlock>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__malloc_unlock+0x8>)
 8004616:	f000 bbec 	b.w	8004df2 <__retarget_lock_release_recursive>
 800461a:	bf00      	nop
 800461c:	20000300 	.word	0x20000300

08004620 <__sfputc_r>:
 8004620:	6893      	ldr	r3, [r2, #8]
 8004622:	3b01      	subs	r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	b410      	push	{r4}
 8004628:	6093      	str	r3, [r2, #8]
 800462a:	da08      	bge.n	800463e <__sfputc_r+0x1e>
 800462c:	6994      	ldr	r4, [r2, #24]
 800462e:	42a3      	cmp	r3, r4
 8004630:	db01      	blt.n	8004636 <__sfputc_r+0x16>
 8004632:	290a      	cmp	r1, #10
 8004634:	d103      	bne.n	800463e <__sfputc_r+0x1e>
 8004636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800463a:	f000 b94b 	b.w	80048d4 <__swbuf_r>
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	1c58      	adds	r0, r3, #1
 8004642:	6010      	str	r0, [r2, #0]
 8004644:	7019      	strb	r1, [r3, #0]
 8004646:	4608      	mov	r0, r1
 8004648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800464c:	4770      	bx	lr

0800464e <__sfputs_r>:
 800464e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004650:	4606      	mov	r6, r0
 8004652:	460f      	mov	r7, r1
 8004654:	4614      	mov	r4, r2
 8004656:	18d5      	adds	r5, r2, r3
 8004658:	42ac      	cmp	r4, r5
 800465a:	d101      	bne.n	8004660 <__sfputs_r+0x12>
 800465c:	2000      	movs	r0, #0
 800465e:	e007      	b.n	8004670 <__sfputs_r+0x22>
 8004660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004664:	463a      	mov	r2, r7
 8004666:	4630      	mov	r0, r6
 8004668:	f7ff ffda 	bl	8004620 <__sfputc_r>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d1f3      	bne.n	8004658 <__sfputs_r+0xa>
 8004670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004674 <_vfiprintf_r>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	460d      	mov	r5, r1
 800467a:	b09d      	sub	sp, #116	; 0x74
 800467c:	4614      	mov	r4, r2
 800467e:	4698      	mov	r8, r3
 8004680:	4606      	mov	r6, r0
 8004682:	b118      	cbz	r0, 800468c <_vfiprintf_r+0x18>
 8004684:	6983      	ldr	r3, [r0, #24]
 8004686:	b90b      	cbnz	r3, 800468c <_vfiprintf_r+0x18>
 8004688:	f000 fb14 	bl	8004cb4 <__sinit>
 800468c:	4b89      	ldr	r3, [pc, #548]	; (80048b4 <_vfiprintf_r+0x240>)
 800468e:	429d      	cmp	r5, r3
 8004690:	d11b      	bne.n	80046ca <_vfiprintf_r+0x56>
 8004692:	6875      	ldr	r5, [r6, #4]
 8004694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004696:	07d9      	lsls	r1, r3, #31
 8004698:	d405      	bmi.n	80046a6 <_vfiprintf_r+0x32>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	059a      	lsls	r2, r3, #22
 800469e:	d402      	bmi.n	80046a6 <_vfiprintf_r+0x32>
 80046a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046a2:	f000 fba5 	bl	8004df0 <__retarget_lock_acquire_recursive>
 80046a6:	89ab      	ldrh	r3, [r5, #12]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	d501      	bpl.n	80046b0 <_vfiprintf_r+0x3c>
 80046ac:	692b      	ldr	r3, [r5, #16]
 80046ae:	b9eb      	cbnz	r3, 80046ec <_vfiprintf_r+0x78>
 80046b0:	4629      	mov	r1, r5
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f96e 	bl	8004994 <__swsetup_r>
 80046b8:	b1c0      	cbz	r0, 80046ec <_vfiprintf_r+0x78>
 80046ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046bc:	07dc      	lsls	r4, r3, #31
 80046be:	d50e      	bpl.n	80046de <_vfiprintf_r+0x6a>
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c4:	b01d      	add	sp, #116	; 0x74
 80046c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ca:	4b7b      	ldr	r3, [pc, #492]	; (80048b8 <_vfiprintf_r+0x244>)
 80046cc:	429d      	cmp	r5, r3
 80046ce:	d101      	bne.n	80046d4 <_vfiprintf_r+0x60>
 80046d0:	68b5      	ldr	r5, [r6, #8]
 80046d2:	e7df      	b.n	8004694 <_vfiprintf_r+0x20>
 80046d4:	4b79      	ldr	r3, [pc, #484]	; (80048bc <_vfiprintf_r+0x248>)
 80046d6:	429d      	cmp	r5, r3
 80046d8:	bf08      	it	eq
 80046da:	68f5      	ldreq	r5, [r6, #12]
 80046dc:	e7da      	b.n	8004694 <_vfiprintf_r+0x20>
 80046de:	89ab      	ldrh	r3, [r5, #12]
 80046e0:	0598      	lsls	r0, r3, #22
 80046e2:	d4ed      	bmi.n	80046c0 <_vfiprintf_r+0x4c>
 80046e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046e6:	f000 fb84 	bl	8004df2 <__retarget_lock_release_recursive>
 80046ea:	e7e9      	b.n	80046c0 <_vfiprintf_r+0x4c>
 80046ec:	2300      	movs	r3, #0
 80046ee:	9309      	str	r3, [sp, #36]	; 0x24
 80046f0:	2320      	movs	r3, #32
 80046f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80046fa:	2330      	movs	r3, #48	; 0x30
 80046fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048c0 <_vfiprintf_r+0x24c>
 8004700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004704:	f04f 0901 	mov.w	r9, #1
 8004708:	4623      	mov	r3, r4
 800470a:	469a      	mov	sl, r3
 800470c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004710:	b10a      	cbz	r2, 8004716 <_vfiprintf_r+0xa2>
 8004712:	2a25      	cmp	r2, #37	; 0x25
 8004714:	d1f9      	bne.n	800470a <_vfiprintf_r+0x96>
 8004716:	ebba 0b04 	subs.w	fp, sl, r4
 800471a:	d00b      	beq.n	8004734 <_vfiprintf_r+0xc0>
 800471c:	465b      	mov	r3, fp
 800471e:	4622      	mov	r2, r4
 8004720:	4629      	mov	r1, r5
 8004722:	4630      	mov	r0, r6
 8004724:	f7ff ff93 	bl	800464e <__sfputs_r>
 8004728:	3001      	adds	r0, #1
 800472a:	f000 80aa 	beq.w	8004882 <_vfiprintf_r+0x20e>
 800472e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004730:	445a      	add	r2, fp
 8004732:	9209      	str	r2, [sp, #36]	; 0x24
 8004734:	f89a 3000 	ldrb.w	r3, [sl]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80a2 	beq.w	8004882 <_vfiprintf_r+0x20e>
 800473e:	2300      	movs	r3, #0
 8004740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004748:	f10a 0a01 	add.w	sl, sl, #1
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004754:	931a      	str	r3, [sp, #104]	; 0x68
 8004756:	4654      	mov	r4, sl
 8004758:	2205      	movs	r2, #5
 800475a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475e:	4858      	ldr	r0, [pc, #352]	; (80048c0 <_vfiprintf_r+0x24c>)
 8004760:	f7fb fd46 	bl	80001f0 <memchr>
 8004764:	9a04      	ldr	r2, [sp, #16]
 8004766:	b9d8      	cbnz	r0, 80047a0 <_vfiprintf_r+0x12c>
 8004768:	06d1      	lsls	r1, r2, #27
 800476a:	bf44      	itt	mi
 800476c:	2320      	movmi	r3, #32
 800476e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004772:	0713      	lsls	r3, r2, #28
 8004774:	bf44      	itt	mi
 8004776:	232b      	movmi	r3, #43	; 0x2b
 8004778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477c:	f89a 3000 	ldrb.w	r3, [sl]
 8004780:	2b2a      	cmp	r3, #42	; 0x2a
 8004782:	d015      	beq.n	80047b0 <_vfiprintf_r+0x13c>
 8004784:	9a07      	ldr	r2, [sp, #28]
 8004786:	4654      	mov	r4, sl
 8004788:	2000      	movs	r0, #0
 800478a:	f04f 0c0a 	mov.w	ip, #10
 800478e:	4621      	mov	r1, r4
 8004790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004794:	3b30      	subs	r3, #48	; 0x30
 8004796:	2b09      	cmp	r3, #9
 8004798:	d94e      	bls.n	8004838 <_vfiprintf_r+0x1c4>
 800479a:	b1b0      	cbz	r0, 80047ca <_vfiprintf_r+0x156>
 800479c:	9207      	str	r2, [sp, #28]
 800479e:	e014      	b.n	80047ca <_vfiprintf_r+0x156>
 80047a0:	eba0 0308 	sub.w	r3, r0, r8
 80047a4:	fa09 f303 	lsl.w	r3, r9, r3
 80047a8:	4313      	orrs	r3, r2
 80047aa:	9304      	str	r3, [sp, #16]
 80047ac:	46a2      	mov	sl, r4
 80047ae:	e7d2      	b.n	8004756 <_vfiprintf_r+0xe2>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	1d19      	adds	r1, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	9103      	str	r1, [sp, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bfbb      	ittet	lt
 80047bc:	425b      	neglt	r3, r3
 80047be:	f042 0202 	orrlt.w	r2, r2, #2
 80047c2:	9307      	strge	r3, [sp, #28]
 80047c4:	9307      	strlt	r3, [sp, #28]
 80047c6:	bfb8      	it	lt
 80047c8:	9204      	strlt	r2, [sp, #16]
 80047ca:	7823      	ldrb	r3, [r4, #0]
 80047cc:	2b2e      	cmp	r3, #46	; 0x2e
 80047ce:	d10c      	bne.n	80047ea <_vfiprintf_r+0x176>
 80047d0:	7863      	ldrb	r3, [r4, #1]
 80047d2:	2b2a      	cmp	r3, #42	; 0x2a
 80047d4:	d135      	bne.n	8004842 <_vfiprintf_r+0x1ce>
 80047d6:	9b03      	ldr	r3, [sp, #12]
 80047d8:	1d1a      	adds	r2, r3, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	9203      	str	r2, [sp, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bfb8      	it	lt
 80047e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047e6:	3402      	adds	r4, #2
 80047e8:	9305      	str	r3, [sp, #20]
 80047ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048d0 <_vfiprintf_r+0x25c>
 80047ee:	7821      	ldrb	r1, [r4, #0]
 80047f0:	2203      	movs	r2, #3
 80047f2:	4650      	mov	r0, sl
 80047f4:	f7fb fcfc 	bl	80001f0 <memchr>
 80047f8:	b140      	cbz	r0, 800480c <_vfiprintf_r+0x198>
 80047fa:	2340      	movs	r3, #64	; 0x40
 80047fc:	eba0 000a 	sub.w	r0, r0, sl
 8004800:	fa03 f000 	lsl.w	r0, r3, r0
 8004804:	9b04      	ldr	r3, [sp, #16]
 8004806:	4303      	orrs	r3, r0
 8004808:	3401      	adds	r4, #1
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004810:	482c      	ldr	r0, [pc, #176]	; (80048c4 <_vfiprintf_r+0x250>)
 8004812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004816:	2206      	movs	r2, #6
 8004818:	f7fb fcea 	bl	80001f0 <memchr>
 800481c:	2800      	cmp	r0, #0
 800481e:	d03f      	beq.n	80048a0 <_vfiprintf_r+0x22c>
 8004820:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <_vfiprintf_r+0x254>)
 8004822:	bb1b      	cbnz	r3, 800486c <_vfiprintf_r+0x1f8>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	3307      	adds	r3, #7
 8004828:	f023 0307 	bic.w	r3, r3, #7
 800482c:	3308      	adds	r3, #8
 800482e:	9303      	str	r3, [sp, #12]
 8004830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004832:	443b      	add	r3, r7
 8004834:	9309      	str	r3, [sp, #36]	; 0x24
 8004836:	e767      	b.n	8004708 <_vfiprintf_r+0x94>
 8004838:	fb0c 3202 	mla	r2, ip, r2, r3
 800483c:	460c      	mov	r4, r1
 800483e:	2001      	movs	r0, #1
 8004840:	e7a5      	b.n	800478e <_vfiprintf_r+0x11a>
 8004842:	2300      	movs	r3, #0
 8004844:	3401      	adds	r4, #1
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	4619      	mov	r1, r3
 800484a:	f04f 0c0a 	mov.w	ip, #10
 800484e:	4620      	mov	r0, r4
 8004850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004854:	3a30      	subs	r2, #48	; 0x30
 8004856:	2a09      	cmp	r2, #9
 8004858:	d903      	bls.n	8004862 <_vfiprintf_r+0x1ee>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0c5      	beq.n	80047ea <_vfiprintf_r+0x176>
 800485e:	9105      	str	r1, [sp, #20]
 8004860:	e7c3      	b.n	80047ea <_vfiprintf_r+0x176>
 8004862:	fb0c 2101 	mla	r1, ip, r1, r2
 8004866:	4604      	mov	r4, r0
 8004868:	2301      	movs	r3, #1
 800486a:	e7f0      	b.n	800484e <_vfiprintf_r+0x1da>
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	462a      	mov	r2, r5
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <_vfiprintf_r+0x258>)
 8004874:	a904      	add	r1, sp, #16
 8004876:	4630      	mov	r0, r6
 8004878:	f7fd ff9c 	bl	80027b4 <_printf_float>
 800487c:	4607      	mov	r7, r0
 800487e:	1c78      	adds	r0, r7, #1
 8004880:	d1d6      	bne.n	8004830 <_vfiprintf_r+0x1bc>
 8004882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004884:	07d9      	lsls	r1, r3, #31
 8004886:	d405      	bmi.n	8004894 <_vfiprintf_r+0x220>
 8004888:	89ab      	ldrh	r3, [r5, #12]
 800488a:	059a      	lsls	r2, r3, #22
 800488c:	d402      	bmi.n	8004894 <_vfiprintf_r+0x220>
 800488e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004890:	f000 faaf 	bl	8004df2 <__retarget_lock_release_recursive>
 8004894:	89ab      	ldrh	r3, [r5, #12]
 8004896:	065b      	lsls	r3, r3, #25
 8004898:	f53f af12 	bmi.w	80046c0 <_vfiprintf_r+0x4c>
 800489c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800489e:	e711      	b.n	80046c4 <_vfiprintf_r+0x50>
 80048a0:	ab03      	add	r3, sp, #12
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	462a      	mov	r2, r5
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <_vfiprintf_r+0x258>)
 80048a8:	a904      	add	r1, sp, #16
 80048aa:	4630      	mov	r0, r6
 80048ac:	f7fe fa26 	bl	8002cfc <_printf_i>
 80048b0:	e7e4      	b.n	800487c <_vfiprintf_r+0x208>
 80048b2:	bf00      	nop
 80048b4:	08006334 	.word	0x08006334
 80048b8:	08006354 	.word	0x08006354
 80048bc:	08006314 	.word	0x08006314
 80048c0:	08006202 	.word	0x08006202
 80048c4:	0800620c 	.word	0x0800620c
 80048c8:	080027b5 	.word	0x080027b5
 80048cc:	0800464f 	.word	0x0800464f
 80048d0:	08006208 	.word	0x08006208

080048d4 <__swbuf_r>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	460e      	mov	r6, r1
 80048d8:	4614      	mov	r4, r2
 80048da:	4605      	mov	r5, r0
 80048dc:	b118      	cbz	r0, 80048e6 <__swbuf_r+0x12>
 80048de:	6983      	ldr	r3, [r0, #24]
 80048e0:	b90b      	cbnz	r3, 80048e6 <__swbuf_r+0x12>
 80048e2:	f000 f9e7 	bl	8004cb4 <__sinit>
 80048e6:	4b21      	ldr	r3, [pc, #132]	; (800496c <__swbuf_r+0x98>)
 80048e8:	429c      	cmp	r4, r3
 80048ea:	d12b      	bne.n	8004944 <__swbuf_r+0x70>
 80048ec:	686c      	ldr	r4, [r5, #4]
 80048ee:	69a3      	ldr	r3, [r4, #24]
 80048f0:	60a3      	str	r3, [r4, #8]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	071a      	lsls	r2, r3, #28
 80048f6:	d52f      	bpl.n	8004958 <__swbuf_r+0x84>
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	b36b      	cbz	r3, 8004958 <__swbuf_r+0x84>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	6820      	ldr	r0, [r4, #0]
 8004900:	1ac0      	subs	r0, r0, r3
 8004902:	6963      	ldr	r3, [r4, #20]
 8004904:	b2f6      	uxtb	r6, r6
 8004906:	4283      	cmp	r3, r0
 8004908:	4637      	mov	r7, r6
 800490a:	dc04      	bgt.n	8004916 <__swbuf_r+0x42>
 800490c:	4621      	mov	r1, r4
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f93c 	bl	8004b8c <_fflush_r>
 8004914:	bb30      	cbnz	r0, 8004964 <__swbuf_r+0x90>
 8004916:	68a3      	ldr	r3, [r4, #8]
 8004918:	3b01      	subs	r3, #1
 800491a:	60a3      	str	r3, [r4, #8]
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	701e      	strb	r6, [r3, #0]
 8004924:	6963      	ldr	r3, [r4, #20]
 8004926:	3001      	adds	r0, #1
 8004928:	4283      	cmp	r3, r0
 800492a:	d004      	beq.n	8004936 <__swbuf_r+0x62>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	07db      	lsls	r3, r3, #31
 8004930:	d506      	bpl.n	8004940 <__swbuf_r+0x6c>
 8004932:	2e0a      	cmp	r6, #10
 8004934:	d104      	bne.n	8004940 <__swbuf_r+0x6c>
 8004936:	4621      	mov	r1, r4
 8004938:	4628      	mov	r0, r5
 800493a:	f000 f927 	bl	8004b8c <_fflush_r>
 800493e:	b988      	cbnz	r0, 8004964 <__swbuf_r+0x90>
 8004940:	4638      	mov	r0, r7
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <__swbuf_r+0x9c>)
 8004946:	429c      	cmp	r4, r3
 8004948:	d101      	bne.n	800494e <__swbuf_r+0x7a>
 800494a:	68ac      	ldr	r4, [r5, #8]
 800494c:	e7cf      	b.n	80048ee <__swbuf_r+0x1a>
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <__swbuf_r+0xa0>)
 8004950:	429c      	cmp	r4, r3
 8004952:	bf08      	it	eq
 8004954:	68ec      	ldreq	r4, [r5, #12]
 8004956:	e7ca      	b.n	80048ee <__swbuf_r+0x1a>
 8004958:	4621      	mov	r1, r4
 800495a:	4628      	mov	r0, r5
 800495c:	f000 f81a 	bl	8004994 <__swsetup_r>
 8004960:	2800      	cmp	r0, #0
 8004962:	d0cb      	beq.n	80048fc <__swbuf_r+0x28>
 8004964:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004968:	e7ea      	b.n	8004940 <__swbuf_r+0x6c>
 800496a:	bf00      	nop
 800496c:	08006334 	.word	0x08006334
 8004970:	08006354 	.word	0x08006354
 8004974:	08006314 	.word	0x08006314

08004978 <__ascii_wctomb>:
 8004978:	b149      	cbz	r1, 800498e <__ascii_wctomb+0x16>
 800497a:	2aff      	cmp	r2, #255	; 0xff
 800497c:	bf85      	ittet	hi
 800497e:	238a      	movhi	r3, #138	; 0x8a
 8004980:	6003      	strhi	r3, [r0, #0]
 8004982:	700a      	strbls	r2, [r1, #0]
 8004984:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004988:	bf98      	it	ls
 800498a:	2001      	movls	r0, #1
 800498c:	4770      	bx	lr
 800498e:	4608      	mov	r0, r1
 8004990:	4770      	bx	lr
	...

08004994 <__swsetup_r>:
 8004994:	4b32      	ldr	r3, [pc, #200]	; (8004a60 <__swsetup_r+0xcc>)
 8004996:	b570      	push	{r4, r5, r6, lr}
 8004998:	681d      	ldr	r5, [r3, #0]
 800499a:	4606      	mov	r6, r0
 800499c:	460c      	mov	r4, r1
 800499e:	b125      	cbz	r5, 80049aa <__swsetup_r+0x16>
 80049a0:	69ab      	ldr	r3, [r5, #24]
 80049a2:	b913      	cbnz	r3, 80049aa <__swsetup_r+0x16>
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 f985 	bl	8004cb4 <__sinit>
 80049aa:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <__swsetup_r+0xd0>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	d10f      	bne.n	80049d0 <__swsetup_r+0x3c>
 80049b0:	686c      	ldr	r4, [r5, #4]
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049b8:	0719      	lsls	r1, r3, #28
 80049ba:	d42c      	bmi.n	8004a16 <__swsetup_r+0x82>
 80049bc:	06dd      	lsls	r5, r3, #27
 80049be:	d411      	bmi.n	80049e4 <__swsetup_r+0x50>
 80049c0:	2309      	movs	r3, #9
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ce:	e03e      	b.n	8004a4e <__swsetup_r+0xba>
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <__swsetup_r+0xd4>)
 80049d2:	429c      	cmp	r4, r3
 80049d4:	d101      	bne.n	80049da <__swsetup_r+0x46>
 80049d6:	68ac      	ldr	r4, [r5, #8]
 80049d8:	e7eb      	b.n	80049b2 <__swsetup_r+0x1e>
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <__swsetup_r+0xd8>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	bf08      	it	eq
 80049e0:	68ec      	ldreq	r4, [r5, #12]
 80049e2:	e7e6      	b.n	80049b2 <__swsetup_r+0x1e>
 80049e4:	0758      	lsls	r0, r3, #29
 80049e6:	d512      	bpl.n	8004a0e <__swsetup_r+0x7a>
 80049e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ea:	b141      	cbz	r1, 80049fe <__swsetup_r+0x6a>
 80049ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049f0:	4299      	cmp	r1, r3
 80049f2:	d002      	beq.n	80049fa <__swsetup_r+0x66>
 80049f4:	4630      	mov	r0, r6
 80049f6:	f7ff fcd5 	bl	80043a4 <_free_r>
 80049fa:	2300      	movs	r3, #0
 80049fc:	6363      	str	r3, [r4, #52]	; 0x34
 80049fe:	89a3      	ldrh	r3, [r4, #12]
 8004a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a04:	81a3      	strh	r3, [r4, #12]
 8004a06:	2300      	movs	r3, #0
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	f043 0308 	orr.w	r3, r3, #8
 8004a14:	81a3      	strh	r3, [r4, #12]
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	b94b      	cbnz	r3, 8004a2e <__swsetup_r+0x9a>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a24:	d003      	beq.n	8004a2e <__swsetup_r+0x9a>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f000 fa09 	bl	8004e40 <__smakebuf_r>
 8004a2e:	89a0      	ldrh	r0, [r4, #12]
 8004a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a34:	f010 0301 	ands.w	r3, r0, #1
 8004a38:	d00a      	beq.n	8004a50 <__swsetup_r+0xbc>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60a3      	str	r3, [r4, #8]
 8004a3e:	6963      	ldr	r3, [r4, #20]
 8004a40:	425b      	negs	r3, r3
 8004a42:	61a3      	str	r3, [r4, #24]
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	b943      	cbnz	r3, 8004a5a <__swsetup_r+0xc6>
 8004a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a4c:	d1ba      	bne.n	80049c4 <__swsetup_r+0x30>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	0781      	lsls	r1, r0, #30
 8004a52:	bf58      	it	pl
 8004a54:	6963      	ldrpl	r3, [r4, #20]
 8004a56:	60a3      	str	r3, [r4, #8]
 8004a58:	e7f4      	b.n	8004a44 <__swsetup_r+0xb0>
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e7f7      	b.n	8004a4e <__swsetup_r+0xba>
 8004a5e:	bf00      	nop
 8004a60:	20000004 	.word	0x20000004
 8004a64:	08006334 	.word	0x08006334
 8004a68:	08006354 	.word	0x08006354
 8004a6c:	08006314 	.word	0x08006314

08004a70 <abort>:
 8004a70:	b508      	push	{r3, lr}
 8004a72:	2006      	movs	r0, #6
 8004a74:	f000 fa4c 	bl	8004f10 <raise>
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7fc fa55 	bl	8000f28 <_exit>
	...

08004a80 <__sflush_r>:
 8004a80:	898a      	ldrh	r2, [r1, #12]
 8004a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	4605      	mov	r5, r0
 8004a88:	0710      	lsls	r0, r2, #28
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	d458      	bmi.n	8004b40 <__sflush_r+0xc0>
 8004a8e:	684b      	ldr	r3, [r1, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	dc05      	bgt.n	8004aa0 <__sflush_r+0x20>
 8004a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dc02      	bgt.n	8004aa0 <__sflush_r+0x20>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	d0f9      	beq.n	8004a9a <__sflush_r+0x1a>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004aac:	682f      	ldr	r7, [r5, #0]
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	d032      	beq.n	8004b18 <__sflush_r+0x98>
 8004ab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	075a      	lsls	r2, r3, #29
 8004ab8:	d505      	bpl.n	8004ac6 <__sflush_r+0x46>
 8004aba:	6863      	ldr	r3, [r4, #4]
 8004abc:	1ac0      	subs	r0, r0, r3
 8004abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ac0:	b10b      	cbz	r3, 8004ac6 <__sflush_r+0x46>
 8004ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ac4:	1ac0      	subs	r0, r0, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004acc:	6a21      	ldr	r1, [r4, #32]
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b0      	blx	r6
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	d106      	bne.n	8004ae6 <__sflush_r+0x66>
 8004ad8:	6829      	ldr	r1, [r5, #0]
 8004ada:	291d      	cmp	r1, #29
 8004adc:	d82c      	bhi.n	8004b38 <__sflush_r+0xb8>
 8004ade:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <__sflush_r+0x108>)
 8004ae0:	40ca      	lsrs	r2, r1
 8004ae2:	07d6      	lsls	r6, r2, #31
 8004ae4:	d528      	bpl.n	8004b38 <__sflush_r+0xb8>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	6062      	str	r2, [r4, #4]
 8004aea:	04d9      	lsls	r1, r3, #19
 8004aec:	6922      	ldr	r2, [r4, #16]
 8004aee:	6022      	str	r2, [r4, #0]
 8004af0:	d504      	bpl.n	8004afc <__sflush_r+0x7c>
 8004af2:	1c42      	adds	r2, r0, #1
 8004af4:	d101      	bne.n	8004afa <__sflush_r+0x7a>
 8004af6:	682b      	ldr	r3, [r5, #0]
 8004af8:	b903      	cbnz	r3, 8004afc <__sflush_r+0x7c>
 8004afa:	6560      	str	r0, [r4, #84]	; 0x54
 8004afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004afe:	602f      	str	r7, [r5, #0]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d0ca      	beq.n	8004a9a <__sflush_r+0x1a>
 8004b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	d002      	beq.n	8004b12 <__sflush_r+0x92>
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f7ff fc49 	bl	80043a4 <_free_r>
 8004b12:	2000      	movs	r0, #0
 8004b14:	6360      	str	r0, [r4, #52]	; 0x34
 8004b16:	e7c1      	b.n	8004a9c <__sflush_r+0x1c>
 8004b18:	6a21      	ldr	r1, [r4, #32]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b0      	blx	r6
 8004b20:	1c41      	adds	r1, r0, #1
 8004b22:	d1c7      	bne.n	8004ab4 <__sflush_r+0x34>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0c4      	beq.n	8004ab4 <__sflush_r+0x34>
 8004b2a:	2b1d      	cmp	r3, #29
 8004b2c:	d001      	beq.n	8004b32 <__sflush_r+0xb2>
 8004b2e:	2b16      	cmp	r3, #22
 8004b30:	d101      	bne.n	8004b36 <__sflush_r+0xb6>
 8004b32:	602f      	str	r7, [r5, #0]
 8004b34:	e7b1      	b.n	8004a9a <__sflush_r+0x1a>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b3c:	81a3      	strh	r3, [r4, #12]
 8004b3e:	e7ad      	b.n	8004a9c <__sflush_r+0x1c>
 8004b40:	690f      	ldr	r7, [r1, #16]
 8004b42:	2f00      	cmp	r7, #0
 8004b44:	d0a9      	beq.n	8004a9a <__sflush_r+0x1a>
 8004b46:	0793      	lsls	r3, r2, #30
 8004b48:	680e      	ldr	r6, [r1, #0]
 8004b4a:	bf08      	it	eq
 8004b4c:	694b      	ldreq	r3, [r1, #20]
 8004b4e:	600f      	str	r7, [r1, #0]
 8004b50:	bf18      	it	ne
 8004b52:	2300      	movne	r3, #0
 8004b54:	eba6 0807 	sub.w	r8, r6, r7
 8004b58:	608b      	str	r3, [r1, #8]
 8004b5a:	f1b8 0f00 	cmp.w	r8, #0
 8004b5e:	dd9c      	ble.n	8004a9a <__sflush_r+0x1a>
 8004b60:	6a21      	ldr	r1, [r4, #32]
 8004b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b64:	4643      	mov	r3, r8
 8004b66:	463a      	mov	r2, r7
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b0      	blx	r6
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	dc06      	bgt.n	8004b7e <__sflush_r+0xfe>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b76:	81a3      	strh	r3, [r4, #12]
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b7c:	e78e      	b.n	8004a9c <__sflush_r+0x1c>
 8004b7e:	4407      	add	r7, r0
 8004b80:	eba8 0800 	sub.w	r8, r8, r0
 8004b84:	e7e9      	b.n	8004b5a <__sflush_r+0xda>
 8004b86:	bf00      	nop
 8004b88:	20400001 	.word	0x20400001

08004b8c <_fflush_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	4605      	mov	r5, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	b913      	cbnz	r3, 8004b9c <_fflush_r+0x10>
 8004b96:	2500      	movs	r5, #0
 8004b98:	4628      	mov	r0, r5
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	b118      	cbz	r0, 8004ba6 <_fflush_r+0x1a>
 8004b9e:	6983      	ldr	r3, [r0, #24]
 8004ba0:	b90b      	cbnz	r3, 8004ba6 <_fflush_r+0x1a>
 8004ba2:	f000 f887 	bl	8004cb4 <__sinit>
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <_fflush_r+0x6c>)
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	d11b      	bne.n	8004be4 <_fflush_r+0x58>
 8004bac:	686c      	ldr	r4, [r5, #4]
 8004bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ef      	beq.n	8004b96 <_fflush_r+0xa>
 8004bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bb8:	07d0      	lsls	r0, r2, #31
 8004bba:	d404      	bmi.n	8004bc6 <_fflush_r+0x3a>
 8004bbc:	0599      	lsls	r1, r3, #22
 8004bbe:	d402      	bmi.n	8004bc6 <_fflush_r+0x3a>
 8004bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bc2:	f000 f915 	bl	8004df0 <__retarget_lock_acquire_recursive>
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	4621      	mov	r1, r4
 8004bca:	f7ff ff59 	bl	8004a80 <__sflush_r>
 8004bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bd0:	07da      	lsls	r2, r3, #31
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	d4e0      	bmi.n	8004b98 <_fflush_r+0xc>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	059b      	lsls	r3, r3, #22
 8004bda:	d4dd      	bmi.n	8004b98 <_fflush_r+0xc>
 8004bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bde:	f000 f908 	bl	8004df2 <__retarget_lock_release_recursive>
 8004be2:	e7d9      	b.n	8004b98 <_fflush_r+0xc>
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <_fflush_r+0x70>)
 8004be6:	429c      	cmp	r4, r3
 8004be8:	d101      	bne.n	8004bee <_fflush_r+0x62>
 8004bea:	68ac      	ldr	r4, [r5, #8]
 8004bec:	e7df      	b.n	8004bae <_fflush_r+0x22>
 8004bee:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <_fflush_r+0x74>)
 8004bf0:	429c      	cmp	r4, r3
 8004bf2:	bf08      	it	eq
 8004bf4:	68ec      	ldreq	r4, [r5, #12]
 8004bf6:	e7da      	b.n	8004bae <_fflush_r+0x22>
 8004bf8:	08006334 	.word	0x08006334
 8004bfc:	08006354 	.word	0x08006354
 8004c00:	08006314 	.word	0x08006314

08004c04 <std>:
 8004c04:	2300      	movs	r3, #0
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c12:	6083      	str	r3, [r0, #8]
 8004c14:	8181      	strh	r1, [r0, #12]
 8004c16:	6643      	str	r3, [r0, #100]	; 0x64
 8004c18:	81c2      	strh	r2, [r0, #14]
 8004c1a:	6183      	str	r3, [r0, #24]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2208      	movs	r2, #8
 8004c20:	305c      	adds	r0, #92	; 0x5c
 8004c22:	f7fd fd1f 	bl	8002664 <memset>
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <std+0x38>)
 8004c28:	6263      	str	r3, [r4, #36]	; 0x24
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <std+0x3c>)
 8004c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <std+0x40>)
 8004c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <std+0x44>)
 8004c34:	6224      	str	r4, [r4, #32]
 8004c36:	6323      	str	r3, [r4, #48]	; 0x30
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	bf00      	nop
 8004c3c:	08004f49 	.word	0x08004f49
 8004c40:	08004f6b 	.word	0x08004f6b
 8004c44:	08004fa3 	.word	0x08004fa3
 8004c48:	08004fc7 	.word	0x08004fc7

08004c4c <_cleanup_r>:
 8004c4c:	4901      	ldr	r1, [pc, #4]	; (8004c54 <_cleanup_r+0x8>)
 8004c4e:	f000 b8af 	b.w	8004db0 <_fwalk_reent>
 8004c52:	bf00      	nop
 8004c54:	08004b8d 	.word	0x08004b8d

08004c58 <__sfmoreglue>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	2268      	movs	r2, #104	; 0x68
 8004c5c:	1e4d      	subs	r5, r1, #1
 8004c5e:	4355      	muls	r5, r2
 8004c60:	460e      	mov	r6, r1
 8004c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c66:	f7ff fc09 	bl	800447c <_malloc_r>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	b140      	cbz	r0, 8004c80 <__sfmoreglue+0x28>
 8004c6e:	2100      	movs	r1, #0
 8004c70:	e9c0 1600 	strd	r1, r6, [r0]
 8004c74:	300c      	adds	r0, #12
 8004c76:	60a0      	str	r0, [r4, #8]
 8004c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c7c:	f7fd fcf2 	bl	8002664 <memset>
 8004c80:	4620      	mov	r0, r4
 8004c82:	bd70      	pop	{r4, r5, r6, pc}

08004c84 <__sfp_lock_acquire>:
 8004c84:	4801      	ldr	r0, [pc, #4]	; (8004c8c <__sfp_lock_acquire+0x8>)
 8004c86:	f000 b8b3 	b.w	8004df0 <__retarget_lock_acquire_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	20000301 	.word	0x20000301

08004c90 <__sfp_lock_release>:
 8004c90:	4801      	ldr	r0, [pc, #4]	; (8004c98 <__sfp_lock_release+0x8>)
 8004c92:	f000 b8ae 	b.w	8004df2 <__retarget_lock_release_recursive>
 8004c96:	bf00      	nop
 8004c98:	20000301 	.word	0x20000301

08004c9c <__sinit_lock_acquire>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	; (8004ca4 <__sinit_lock_acquire+0x8>)
 8004c9e:	f000 b8a7 	b.w	8004df0 <__retarget_lock_acquire_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	20000302 	.word	0x20000302

08004ca8 <__sinit_lock_release>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	; (8004cb0 <__sinit_lock_release+0x8>)
 8004caa:	f000 b8a2 	b.w	8004df2 <__retarget_lock_release_recursive>
 8004cae:	bf00      	nop
 8004cb0:	20000302 	.word	0x20000302

08004cb4 <__sinit>:
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	f7ff fff0 	bl	8004c9c <__sinit_lock_acquire>
 8004cbc:	69a3      	ldr	r3, [r4, #24]
 8004cbe:	b11b      	cbz	r3, 8004cc8 <__sinit+0x14>
 8004cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc4:	f7ff bff0 	b.w	8004ca8 <__sinit_lock_release>
 8004cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <__sinit+0x68>)
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <__sinit+0x6c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cd6:	42a3      	cmp	r3, r4
 8004cd8:	bf04      	itt	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	61a3      	streq	r3, [r4, #24]
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 f820 	bl	8004d24 <__sfp>
 8004ce4:	6060      	str	r0, [r4, #4]
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 f81c 	bl	8004d24 <__sfp>
 8004cec:	60a0      	str	r0, [r4, #8]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f000 f818 	bl	8004d24 <__sfp>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	60e0      	str	r0, [r4, #12]
 8004cf8:	2104      	movs	r1, #4
 8004cfa:	6860      	ldr	r0, [r4, #4]
 8004cfc:	f7ff ff82 	bl	8004c04 <std>
 8004d00:	68a0      	ldr	r0, [r4, #8]
 8004d02:	2201      	movs	r2, #1
 8004d04:	2109      	movs	r1, #9
 8004d06:	f7ff ff7d 	bl	8004c04 <std>
 8004d0a:	68e0      	ldr	r0, [r4, #12]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	2112      	movs	r1, #18
 8004d10:	f7ff ff78 	bl	8004c04 <std>
 8004d14:	2301      	movs	r3, #1
 8004d16:	61a3      	str	r3, [r4, #24]
 8004d18:	e7d2      	b.n	8004cc0 <__sinit+0xc>
 8004d1a:	bf00      	nop
 8004d1c:	08005f98 	.word	0x08005f98
 8004d20:	08004c4d 	.word	0x08004c4d

08004d24 <__sfp>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	4607      	mov	r7, r0
 8004d28:	f7ff ffac 	bl	8004c84 <__sfp_lock_acquire>
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <__sfp+0x84>)
 8004d2e:	681e      	ldr	r6, [r3, #0]
 8004d30:	69b3      	ldr	r3, [r6, #24]
 8004d32:	b913      	cbnz	r3, 8004d3a <__sfp+0x16>
 8004d34:	4630      	mov	r0, r6
 8004d36:	f7ff ffbd 	bl	8004cb4 <__sinit>
 8004d3a:	3648      	adds	r6, #72	; 0x48
 8004d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	d503      	bpl.n	8004d4c <__sfp+0x28>
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	b30b      	cbz	r3, 8004d8c <__sfp+0x68>
 8004d48:	6836      	ldr	r6, [r6, #0]
 8004d4a:	e7f7      	b.n	8004d3c <__sfp+0x18>
 8004d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d50:	b9d5      	cbnz	r5, 8004d88 <__sfp+0x64>
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <__sfp+0x88>)
 8004d54:	60e3      	str	r3, [r4, #12]
 8004d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8004d5c:	f000 f847 	bl	8004dee <__retarget_lock_init_recursive>
 8004d60:	f7ff ff96 	bl	8004c90 <__sfp_lock_release>
 8004d64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d6c:	6025      	str	r5, [r4, #0]
 8004d6e:	61a5      	str	r5, [r4, #24]
 8004d70:	2208      	movs	r2, #8
 8004d72:	4629      	mov	r1, r5
 8004d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d78:	f7fd fc74 	bl	8002664 <memset>
 8004d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d84:	4620      	mov	r0, r4
 8004d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d88:	3468      	adds	r4, #104	; 0x68
 8004d8a:	e7d9      	b.n	8004d40 <__sfp+0x1c>
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f7ff ff62 	bl	8004c58 <__sfmoreglue>
 8004d94:	4604      	mov	r4, r0
 8004d96:	6030      	str	r0, [r6, #0]
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d1d5      	bne.n	8004d48 <__sfp+0x24>
 8004d9c:	f7ff ff78 	bl	8004c90 <__sfp_lock_release>
 8004da0:	230c      	movs	r3, #12
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	e7ee      	b.n	8004d84 <__sfp+0x60>
 8004da6:	bf00      	nop
 8004da8:	08005f98 	.word	0x08005f98
 8004dac:	ffff0001 	.word	0xffff0001

08004db0 <_fwalk_reent>:
 8004db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db4:	4606      	mov	r6, r0
 8004db6:	4688      	mov	r8, r1
 8004db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004dbc:	2700      	movs	r7, #0
 8004dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8004dc6:	d505      	bpl.n	8004dd4 <_fwalk_reent+0x24>
 8004dc8:	6824      	ldr	r4, [r4, #0]
 8004dca:	2c00      	cmp	r4, #0
 8004dcc:	d1f7      	bne.n	8004dbe <_fwalk_reent+0xe>
 8004dce:	4638      	mov	r0, r7
 8004dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dd4:	89ab      	ldrh	r3, [r5, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d907      	bls.n	8004dea <_fwalk_reent+0x3a>
 8004dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dde:	3301      	adds	r3, #1
 8004de0:	d003      	beq.n	8004dea <_fwalk_reent+0x3a>
 8004de2:	4629      	mov	r1, r5
 8004de4:	4630      	mov	r0, r6
 8004de6:	47c0      	blx	r8
 8004de8:	4307      	orrs	r7, r0
 8004dea:	3568      	adds	r5, #104	; 0x68
 8004dec:	e7e9      	b.n	8004dc2 <_fwalk_reent+0x12>

08004dee <__retarget_lock_init_recursive>:
 8004dee:	4770      	bx	lr

08004df0 <__retarget_lock_acquire_recursive>:
 8004df0:	4770      	bx	lr

08004df2 <__retarget_lock_release_recursive>:
 8004df2:	4770      	bx	lr

08004df4 <__swhatbuf_r>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	460e      	mov	r6, r1
 8004df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	b096      	sub	sp, #88	; 0x58
 8004e00:	4614      	mov	r4, r2
 8004e02:	461d      	mov	r5, r3
 8004e04:	da08      	bge.n	8004e18 <__swhatbuf_r+0x24>
 8004e06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	602a      	str	r2, [r5, #0]
 8004e0e:	061a      	lsls	r2, r3, #24
 8004e10:	d410      	bmi.n	8004e34 <__swhatbuf_r+0x40>
 8004e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e16:	e00e      	b.n	8004e36 <__swhatbuf_r+0x42>
 8004e18:	466a      	mov	r2, sp
 8004e1a:	f000 f8fb 	bl	8005014 <_fstat_r>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	dbf1      	blt.n	8004e06 <__swhatbuf_r+0x12>
 8004e22:	9a01      	ldr	r2, [sp, #4]
 8004e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e2c:	425a      	negs	r2, r3
 8004e2e:	415a      	adcs	r2, r3
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	e7ee      	b.n	8004e12 <__swhatbuf_r+0x1e>
 8004e34:	2340      	movs	r3, #64	; 0x40
 8004e36:	2000      	movs	r0, #0
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	b016      	add	sp, #88	; 0x58
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e40 <__smakebuf_r>:
 8004e40:	898b      	ldrh	r3, [r1, #12]
 8004e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e44:	079d      	lsls	r5, r3, #30
 8004e46:	4606      	mov	r6, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	d507      	bpl.n	8004e5c <__smakebuf_r+0x1c>
 8004e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	6123      	str	r3, [r4, #16]
 8004e54:	2301      	movs	r3, #1
 8004e56:	6163      	str	r3, [r4, #20]
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	ab01      	add	r3, sp, #4
 8004e5e:	466a      	mov	r2, sp
 8004e60:	f7ff ffc8 	bl	8004df4 <__swhatbuf_r>
 8004e64:	9900      	ldr	r1, [sp, #0]
 8004e66:	4605      	mov	r5, r0
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff fb07 	bl	800447c <_malloc_r>
 8004e6e:	b948      	cbnz	r0, 8004e84 <__smakebuf_r+0x44>
 8004e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e74:	059a      	lsls	r2, r3, #22
 8004e76:	d4ef      	bmi.n	8004e58 <__smakebuf_r+0x18>
 8004e78:	f023 0303 	bic.w	r3, r3, #3
 8004e7c:	f043 0302 	orr.w	r3, r3, #2
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	e7e3      	b.n	8004e4c <__smakebuf_r+0xc>
 8004e84:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <__smakebuf_r+0x7c>)
 8004e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	6020      	str	r0, [r4, #0]
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	9b00      	ldr	r3, [sp, #0]
 8004e94:	6163      	str	r3, [r4, #20]
 8004e96:	9b01      	ldr	r3, [sp, #4]
 8004e98:	6120      	str	r0, [r4, #16]
 8004e9a:	b15b      	cbz	r3, 8004eb4 <__smakebuf_r+0x74>
 8004e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f8c9 	bl	8005038 <_isatty_r>
 8004ea6:	b128      	cbz	r0, 8004eb4 <__smakebuf_r+0x74>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	89a0      	ldrh	r0, [r4, #12]
 8004eb6:	4305      	orrs	r5, r0
 8004eb8:	81a5      	strh	r5, [r4, #12]
 8004eba:	e7cd      	b.n	8004e58 <__smakebuf_r+0x18>
 8004ebc:	08004c4d 	.word	0x08004c4d

08004ec0 <_raise_r>:
 8004ec0:	291f      	cmp	r1, #31
 8004ec2:	b538      	push	{r3, r4, r5, lr}
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	460d      	mov	r5, r1
 8004ec8:	d904      	bls.n	8004ed4 <_raise_r+0x14>
 8004eca:	2316      	movs	r3, #22
 8004ecc:	6003      	str	r3, [r0, #0]
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ed6:	b112      	cbz	r2, 8004ede <_raise_r+0x1e>
 8004ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004edc:	b94b      	cbnz	r3, 8004ef2 <_raise_r+0x32>
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f000 f830 	bl	8004f44 <_getpid_r>
 8004ee4:	462a      	mov	r2, r5
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	4620      	mov	r0, r4
 8004eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eee:	f000 b817 	b.w	8004f20 <_kill_r>
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d00a      	beq.n	8004f0c <_raise_r+0x4c>
 8004ef6:	1c59      	adds	r1, r3, #1
 8004ef8:	d103      	bne.n	8004f02 <_raise_r+0x42>
 8004efa:	2316      	movs	r3, #22
 8004efc:	6003      	str	r3, [r0, #0]
 8004efe:	2001      	movs	r0, #1
 8004f00:	e7e7      	b.n	8004ed2 <_raise_r+0x12>
 8004f02:	2400      	movs	r4, #0
 8004f04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f08:	4628      	mov	r0, r5
 8004f0a:	4798      	blx	r3
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e7e0      	b.n	8004ed2 <_raise_r+0x12>

08004f10 <raise>:
 8004f10:	4b02      	ldr	r3, [pc, #8]	; (8004f1c <raise+0xc>)
 8004f12:	4601      	mov	r1, r0
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	f7ff bfd3 	b.w	8004ec0 <_raise_r>
 8004f1a:	bf00      	nop
 8004f1c:	20000004 	.word	0x20000004

08004f20 <_kill_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d07      	ldr	r5, [pc, #28]	; (8004f40 <_kill_r+0x20>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	f7fb ffeb 	bl	8000f08 <_kill>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d102      	bne.n	8004f3c <_kill_r+0x1c>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	b103      	cbz	r3, 8004f3c <_kill_r+0x1c>
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	bf00      	nop
 8004f40:	200002fc 	.word	0x200002fc

08004f44 <_getpid_r>:
 8004f44:	f7fb bfd8 	b.w	8000ef8 <_getpid>

08004f48 <__sread>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f50:	f000 f894 	bl	800507c <_read_r>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	bfab      	itete	ge
 8004f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f5c:	181b      	addge	r3, r3, r0
 8004f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f62:	bfac      	ite	ge
 8004f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f66:	81a3      	strhlt	r3, [r4, #12]
 8004f68:	bd10      	pop	{r4, pc}

08004f6a <__swrite>:
 8004f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6e:	461f      	mov	r7, r3
 8004f70:	898b      	ldrh	r3, [r1, #12]
 8004f72:	05db      	lsls	r3, r3, #23
 8004f74:	4605      	mov	r5, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	4616      	mov	r6, r2
 8004f7a:	d505      	bpl.n	8004f88 <__swrite+0x1e>
 8004f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f80:	2302      	movs	r3, #2
 8004f82:	2200      	movs	r2, #0
 8004f84:	f000 f868 	bl	8005058 <_lseek_r>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	4632      	mov	r2, r6
 8004f96:	463b      	mov	r3, r7
 8004f98:	4628      	mov	r0, r5
 8004f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9e:	f000 b817 	b.w	8004fd0 <_write_r>

08004fa2 <__sseek>:
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004faa:	f000 f855 	bl	8005058 <_lseek_r>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	bf15      	itete	ne
 8004fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fbe:	81a3      	strheq	r3, [r4, #12]
 8004fc0:	bf18      	it	ne
 8004fc2:	81a3      	strhne	r3, [r4, #12]
 8004fc4:	bd10      	pop	{r4, pc}

08004fc6 <__sclose>:
 8004fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fca:	f000 b813 	b.w	8004ff4 <_close_r>
	...

08004fd0 <_write_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4d07      	ldr	r5, [pc, #28]	; (8004ff0 <_write_r+0x20>)
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	4611      	mov	r1, r2
 8004fda:	2200      	movs	r2, #0
 8004fdc:	602a      	str	r2, [r5, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f7fb ffc9 	bl	8000f76 <_write>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d102      	bne.n	8004fee <_write_r+0x1e>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	b103      	cbz	r3, 8004fee <_write_r+0x1e>
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
 8004ff0:	200002fc 	.word	0x200002fc

08004ff4 <_close_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_close_r+0x1c>)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	f7fb ffd5 	bl	8000fae <_close>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_close_r+0x1a>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_close_r+0x1a>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	200002fc 	.word	0x200002fc

08005014 <_fstat_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d07      	ldr	r5, [pc, #28]	; (8005034 <_fstat_r+0x20>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	4611      	mov	r1, r2
 8005020:	602b      	str	r3, [r5, #0]
 8005022:	f7fb ffd0 	bl	8000fc6 <_fstat>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	d102      	bne.n	8005030 <_fstat_r+0x1c>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	b103      	cbz	r3, 8005030 <_fstat_r+0x1c>
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	bd38      	pop	{r3, r4, r5, pc}
 8005032:	bf00      	nop
 8005034:	200002fc 	.word	0x200002fc

08005038 <_isatty_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4d06      	ldr	r5, [pc, #24]	; (8005054 <_isatty_r+0x1c>)
 800503c:	2300      	movs	r3, #0
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	f7fb ffcf 	bl	8000fe6 <_isatty>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_isatty_r+0x1a>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_isatty_r+0x1a>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	200002fc 	.word	0x200002fc

08005058 <_lseek_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d07      	ldr	r5, [pc, #28]	; (8005078 <_lseek_r+0x20>)
 800505c:	4604      	mov	r4, r0
 800505e:	4608      	mov	r0, r1
 8005060:	4611      	mov	r1, r2
 8005062:	2200      	movs	r2, #0
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f7fb ffc8 	bl	8000ffc <_lseek>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_lseek_r+0x1e>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_lseek_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	200002fc 	.word	0x200002fc

0800507c <_read_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4d07      	ldr	r5, [pc, #28]	; (800509c <_read_r+0x20>)
 8005080:	4604      	mov	r4, r0
 8005082:	4608      	mov	r0, r1
 8005084:	4611      	mov	r1, r2
 8005086:	2200      	movs	r2, #0
 8005088:	602a      	str	r2, [r5, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	f7fb ff56 	bl	8000f3c <_read>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_read_r+0x1e>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_read_r+0x1e>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	200002fc 	.word	0x200002fc

080050a0 <round>:
 80050a0:	ec51 0b10 	vmov	r0, r1, d0
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80050aa:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80050ae:	2c13      	cmp	r4, #19
 80050b0:	ee10 2a10 	vmov	r2, s0
 80050b4:	460b      	mov	r3, r1
 80050b6:	dc19      	bgt.n	80050ec <round+0x4c>
 80050b8:	2c00      	cmp	r4, #0
 80050ba:	da09      	bge.n	80050d0 <round+0x30>
 80050bc:	3401      	adds	r4, #1
 80050be:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80050c2:	d103      	bne.n	80050cc <round+0x2c>
 80050c4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80050c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80050cc:	2200      	movs	r2, #0
 80050ce:	e028      	b.n	8005122 <round+0x82>
 80050d0:	4d15      	ldr	r5, [pc, #84]	; (8005128 <round+0x88>)
 80050d2:	4125      	asrs	r5, r4
 80050d4:	ea01 0605 	and.w	r6, r1, r5
 80050d8:	4332      	orrs	r2, r6
 80050da:	d00e      	beq.n	80050fa <round+0x5a>
 80050dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80050e0:	fa42 f404 	asr.w	r4, r2, r4
 80050e4:	4423      	add	r3, r4
 80050e6:	ea23 0305 	bic.w	r3, r3, r5
 80050ea:	e7ef      	b.n	80050cc <round+0x2c>
 80050ec:	2c33      	cmp	r4, #51	; 0x33
 80050ee:	dd07      	ble.n	8005100 <round+0x60>
 80050f0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80050f4:	d101      	bne.n	80050fa <round+0x5a>
 80050f6:	f7fb f8d1 	bl	800029c <__adddf3>
 80050fa:	ec41 0b10 	vmov	d0, r0, r1
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8005104:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005108:	40f5      	lsrs	r5, r6
 800510a:	4228      	tst	r0, r5
 800510c:	d0f5      	beq.n	80050fa <round+0x5a>
 800510e:	2101      	movs	r1, #1
 8005110:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8005114:	fa01 f404 	lsl.w	r4, r1, r4
 8005118:	1912      	adds	r2, r2, r4
 800511a:	bf28      	it	cs
 800511c:	185b      	addcs	r3, r3, r1
 800511e:	ea22 0205 	bic.w	r2, r2, r5
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	e7e8      	b.n	80050fa <round+0x5a>
 8005128:	000fffff 	.word	0x000fffff

0800512c <pow>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	ed2d 8b02 	vpush	{d8}
 8005132:	eeb0 8a40 	vmov.f32	s16, s0
 8005136:	eef0 8a60 	vmov.f32	s17, s1
 800513a:	ec55 4b11 	vmov	r4, r5, d1
 800513e:	f000 f867 	bl	8005210 <__ieee754_pow>
 8005142:	4622      	mov	r2, r4
 8005144:	462b      	mov	r3, r5
 8005146:	4620      	mov	r0, r4
 8005148:	4629      	mov	r1, r5
 800514a:	ec57 6b10 	vmov	r6, r7, d0
 800514e:	f7fb fcf5 	bl	8000b3c <__aeabi_dcmpun>
 8005152:	2800      	cmp	r0, #0
 8005154:	d13b      	bne.n	80051ce <pow+0xa2>
 8005156:	ec51 0b18 	vmov	r0, r1, d8
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	f7fb fcbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005162:	b1b8      	cbz	r0, 8005194 <pow+0x68>
 8005164:	2200      	movs	r2, #0
 8005166:	2300      	movs	r3, #0
 8005168:	4620      	mov	r0, r4
 800516a:	4629      	mov	r1, r5
 800516c:	f7fb fcb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005170:	2800      	cmp	r0, #0
 8005172:	d146      	bne.n	8005202 <pow+0xd6>
 8005174:	ec45 4b10 	vmov	d0, r4, r5
 8005178:	f000 fe63 	bl	8005e42 <finite>
 800517c:	b338      	cbz	r0, 80051ce <pow+0xa2>
 800517e:	2200      	movs	r2, #0
 8005180:	2300      	movs	r3, #0
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb fcb1 	bl	8000aec <__aeabi_dcmplt>
 800518a:	b300      	cbz	r0, 80051ce <pow+0xa2>
 800518c:	f7fd fa40 	bl	8002610 <__errno>
 8005190:	2322      	movs	r3, #34	; 0x22
 8005192:	e01b      	b.n	80051cc <pow+0xa0>
 8005194:	ec47 6b10 	vmov	d0, r6, r7
 8005198:	f000 fe53 	bl	8005e42 <finite>
 800519c:	b9e0      	cbnz	r0, 80051d8 <pow+0xac>
 800519e:	eeb0 0a48 	vmov.f32	s0, s16
 80051a2:	eef0 0a68 	vmov.f32	s1, s17
 80051a6:	f000 fe4c 	bl	8005e42 <finite>
 80051aa:	b1a8      	cbz	r0, 80051d8 <pow+0xac>
 80051ac:	ec45 4b10 	vmov	d0, r4, r5
 80051b0:	f000 fe47 	bl	8005e42 <finite>
 80051b4:	b180      	cbz	r0, 80051d8 <pow+0xac>
 80051b6:	4632      	mov	r2, r6
 80051b8:	463b      	mov	r3, r7
 80051ba:	4630      	mov	r0, r6
 80051bc:	4639      	mov	r1, r7
 80051be:	f7fb fcbd 	bl	8000b3c <__aeabi_dcmpun>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d0e2      	beq.n	800518c <pow+0x60>
 80051c6:	f7fd fa23 	bl	8002610 <__errno>
 80051ca:	2321      	movs	r3, #33	; 0x21
 80051cc:	6003      	str	r3, [r0, #0]
 80051ce:	ecbd 8b02 	vpop	{d8}
 80051d2:	ec47 6b10 	vmov	d0, r6, r7
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d8:	2200      	movs	r2, #0
 80051da:	2300      	movs	r3, #0
 80051dc:	4630      	mov	r0, r6
 80051de:	4639      	mov	r1, r7
 80051e0:	f7fb fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d0f2      	beq.n	80051ce <pow+0xa2>
 80051e8:	eeb0 0a48 	vmov.f32	s0, s16
 80051ec:	eef0 0a68 	vmov.f32	s1, s17
 80051f0:	f000 fe27 	bl	8005e42 <finite>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d0ea      	beq.n	80051ce <pow+0xa2>
 80051f8:	ec45 4b10 	vmov	d0, r4, r5
 80051fc:	f000 fe21 	bl	8005e42 <finite>
 8005200:	e7c3      	b.n	800518a <pow+0x5e>
 8005202:	4f01      	ldr	r7, [pc, #4]	; (8005208 <pow+0xdc>)
 8005204:	2600      	movs	r6, #0
 8005206:	e7e2      	b.n	80051ce <pow+0xa2>
 8005208:	3ff00000 	.word	0x3ff00000
 800520c:	00000000 	.word	0x00000000

08005210 <__ieee754_pow>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	ed2d 8b06 	vpush	{d8-d10}
 8005218:	b089      	sub	sp, #36	; 0x24
 800521a:	ed8d 1b00 	vstr	d1, [sp]
 800521e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005222:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005226:	ea58 0102 	orrs.w	r1, r8, r2
 800522a:	ec57 6b10 	vmov	r6, r7, d0
 800522e:	d115      	bne.n	800525c <__ieee754_pow+0x4c>
 8005230:	19b3      	adds	r3, r6, r6
 8005232:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005236:	4152      	adcs	r2, r2
 8005238:	4299      	cmp	r1, r3
 800523a:	4b89      	ldr	r3, [pc, #548]	; (8005460 <__ieee754_pow+0x250>)
 800523c:	4193      	sbcs	r3, r2
 800523e:	f080 84d2 	bcs.w	8005be6 <__ieee754_pow+0x9d6>
 8005242:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005246:	4630      	mov	r0, r6
 8005248:	4639      	mov	r1, r7
 800524a:	f7fb f827 	bl	800029c <__adddf3>
 800524e:	ec41 0b10 	vmov	d0, r0, r1
 8005252:	b009      	add	sp, #36	; 0x24
 8005254:	ecbd 8b06 	vpop	{d8-d10}
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	4b81      	ldr	r3, [pc, #516]	; (8005464 <__ieee754_pow+0x254>)
 800525e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005262:	429c      	cmp	r4, r3
 8005264:	ee10 aa10 	vmov	sl, s0
 8005268:	463d      	mov	r5, r7
 800526a:	dc06      	bgt.n	800527a <__ieee754_pow+0x6a>
 800526c:	d101      	bne.n	8005272 <__ieee754_pow+0x62>
 800526e:	2e00      	cmp	r6, #0
 8005270:	d1e7      	bne.n	8005242 <__ieee754_pow+0x32>
 8005272:	4598      	cmp	r8, r3
 8005274:	dc01      	bgt.n	800527a <__ieee754_pow+0x6a>
 8005276:	d10f      	bne.n	8005298 <__ieee754_pow+0x88>
 8005278:	b172      	cbz	r2, 8005298 <__ieee754_pow+0x88>
 800527a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800527e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005282:	ea55 050a 	orrs.w	r5, r5, sl
 8005286:	d1dc      	bne.n	8005242 <__ieee754_pow+0x32>
 8005288:	e9dd 3200 	ldrd	r3, r2, [sp]
 800528c:	18db      	adds	r3, r3, r3
 800528e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005292:	4152      	adcs	r2, r2
 8005294:	429d      	cmp	r5, r3
 8005296:	e7d0      	b.n	800523a <__ieee754_pow+0x2a>
 8005298:	2d00      	cmp	r5, #0
 800529a:	da3b      	bge.n	8005314 <__ieee754_pow+0x104>
 800529c:	4b72      	ldr	r3, [pc, #456]	; (8005468 <__ieee754_pow+0x258>)
 800529e:	4598      	cmp	r8, r3
 80052a0:	dc51      	bgt.n	8005346 <__ieee754_pow+0x136>
 80052a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80052a6:	4598      	cmp	r8, r3
 80052a8:	f340 84ac 	ble.w	8005c04 <__ieee754_pow+0x9f4>
 80052ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 80052b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052b4:	2b14      	cmp	r3, #20
 80052b6:	dd0f      	ble.n	80052d8 <__ieee754_pow+0xc8>
 80052b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80052bc:	fa22 f103 	lsr.w	r1, r2, r3
 80052c0:	fa01 f303 	lsl.w	r3, r1, r3
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f040 849d 	bne.w	8005c04 <__ieee754_pow+0x9f4>
 80052ca:	f001 0101 	and.w	r1, r1, #1
 80052ce:	f1c1 0302 	rsb	r3, r1, #2
 80052d2:	9304      	str	r3, [sp, #16]
 80052d4:	b182      	cbz	r2, 80052f8 <__ieee754_pow+0xe8>
 80052d6:	e05f      	b.n	8005398 <__ieee754_pow+0x188>
 80052d8:	2a00      	cmp	r2, #0
 80052da:	d15b      	bne.n	8005394 <__ieee754_pow+0x184>
 80052dc:	f1c3 0314 	rsb	r3, r3, #20
 80052e0:	fa48 f103 	asr.w	r1, r8, r3
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	4543      	cmp	r3, r8
 80052ea:	f040 8488 	bne.w	8005bfe <__ieee754_pow+0x9ee>
 80052ee:	f001 0101 	and.w	r1, r1, #1
 80052f2:	f1c1 0302 	rsb	r3, r1, #2
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	4b5c      	ldr	r3, [pc, #368]	; (800546c <__ieee754_pow+0x25c>)
 80052fa:	4598      	cmp	r8, r3
 80052fc:	d132      	bne.n	8005364 <__ieee754_pow+0x154>
 80052fe:	f1b9 0f00 	cmp.w	r9, #0
 8005302:	f280 8478 	bge.w	8005bf6 <__ieee754_pow+0x9e6>
 8005306:	4959      	ldr	r1, [pc, #356]	; (800546c <__ieee754_pow+0x25c>)
 8005308:	4632      	mov	r2, r6
 800530a:	463b      	mov	r3, r7
 800530c:	2000      	movs	r0, #0
 800530e:	f7fb faa5 	bl	800085c <__aeabi_ddiv>
 8005312:	e79c      	b.n	800524e <__ieee754_pow+0x3e>
 8005314:	2300      	movs	r3, #0
 8005316:	9304      	str	r3, [sp, #16]
 8005318:	2a00      	cmp	r2, #0
 800531a:	d13d      	bne.n	8005398 <__ieee754_pow+0x188>
 800531c:	4b51      	ldr	r3, [pc, #324]	; (8005464 <__ieee754_pow+0x254>)
 800531e:	4598      	cmp	r8, r3
 8005320:	d1ea      	bne.n	80052f8 <__ieee754_pow+0xe8>
 8005322:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005326:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800532a:	ea53 030a 	orrs.w	r3, r3, sl
 800532e:	f000 845a 	beq.w	8005be6 <__ieee754_pow+0x9d6>
 8005332:	4b4f      	ldr	r3, [pc, #316]	; (8005470 <__ieee754_pow+0x260>)
 8005334:	429c      	cmp	r4, r3
 8005336:	dd08      	ble.n	800534a <__ieee754_pow+0x13a>
 8005338:	f1b9 0f00 	cmp.w	r9, #0
 800533c:	f2c0 8457 	blt.w	8005bee <__ieee754_pow+0x9de>
 8005340:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005344:	e783      	b.n	800524e <__ieee754_pow+0x3e>
 8005346:	2302      	movs	r3, #2
 8005348:	e7e5      	b.n	8005316 <__ieee754_pow+0x106>
 800534a:	f1b9 0f00 	cmp.w	r9, #0
 800534e:	f04f 0000 	mov.w	r0, #0
 8005352:	f04f 0100 	mov.w	r1, #0
 8005356:	f6bf af7a 	bge.w	800524e <__ieee754_pow+0x3e>
 800535a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800535e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005362:	e774      	b.n	800524e <__ieee754_pow+0x3e>
 8005364:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005368:	d106      	bne.n	8005378 <__ieee754_pow+0x168>
 800536a:	4632      	mov	r2, r6
 800536c:	463b      	mov	r3, r7
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	f7fb f949 	bl	8000608 <__aeabi_dmul>
 8005376:	e76a      	b.n	800524e <__ieee754_pow+0x3e>
 8005378:	4b3e      	ldr	r3, [pc, #248]	; (8005474 <__ieee754_pow+0x264>)
 800537a:	4599      	cmp	r9, r3
 800537c:	d10c      	bne.n	8005398 <__ieee754_pow+0x188>
 800537e:	2d00      	cmp	r5, #0
 8005380:	db0a      	blt.n	8005398 <__ieee754_pow+0x188>
 8005382:	ec47 6b10 	vmov	d0, r6, r7
 8005386:	b009      	add	sp, #36	; 0x24
 8005388:	ecbd 8b06 	vpop	{d8-d10}
 800538c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	f000 bc6c 	b.w	8005c6c <__ieee754_sqrt>
 8005394:	2300      	movs	r3, #0
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	ec47 6b10 	vmov	d0, r6, r7
 800539c:	f000 fd48 	bl	8005e30 <fabs>
 80053a0:	ec51 0b10 	vmov	r0, r1, d0
 80053a4:	f1ba 0f00 	cmp.w	sl, #0
 80053a8:	d129      	bne.n	80053fe <__ieee754_pow+0x1ee>
 80053aa:	b124      	cbz	r4, 80053b6 <__ieee754_pow+0x1a6>
 80053ac:	4b2f      	ldr	r3, [pc, #188]	; (800546c <__ieee754_pow+0x25c>)
 80053ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d123      	bne.n	80053fe <__ieee754_pow+0x1ee>
 80053b6:	f1b9 0f00 	cmp.w	r9, #0
 80053ba:	da05      	bge.n	80053c8 <__ieee754_pow+0x1b8>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	2000      	movs	r0, #0
 80053c2:	492a      	ldr	r1, [pc, #168]	; (800546c <__ieee754_pow+0x25c>)
 80053c4:	f7fb fa4a 	bl	800085c <__aeabi_ddiv>
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	f6bf af40 	bge.w	800524e <__ieee754_pow+0x3e>
 80053ce:	9b04      	ldr	r3, [sp, #16]
 80053d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80053d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80053d8:	4323      	orrs	r3, r4
 80053da:	d108      	bne.n	80053ee <__ieee754_pow+0x1de>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4610      	mov	r0, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	f7fa ff58 	bl	8000298 <__aeabi_dsub>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	e78f      	b.n	800530e <__ieee754_pow+0xfe>
 80053ee:	9b04      	ldr	r3, [sp, #16]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f47f af2c 	bne.w	800524e <__ieee754_pow+0x3e>
 80053f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053fa:	4619      	mov	r1, r3
 80053fc:	e727      	b.n	800524e <__ieee754_pow+0x3e>
 80053fe:	0feb      	lsrs	r3, r5, #31
 8005400:	3b01      	subs	r3, #1
 8005402:	9306      	str	r3, [sp, #24]
 8005404:	9a06      	ldr	r2, [sp, #24]
 8005406:	9b04      	ldr	r3, [sp, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	d102      	bne.n	8005412 <__ieee754_pow+0x202>
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	e7e6      	b.n	80053e0 <__ieee754_pow+0x1d0>
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <__ieee754_pow+0x268>)
 8005414:	4598      	cmp	r8, r3
 8005416:	f340 80fb 	ble.w	8005610 <__ieee754_pow+0x400>
 800541a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800541e:	4598      	cmp	r8, r3
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <__ieee754_pow+0x260>)
 8005422:	dd0c      	ble.n	800543e <__ieee754_pow+0x22e>
 8005424:	429c      	cmp	r4, r3
 8005426:	dc0f      	bgt.n	8005448 <__ieee754_pow+0x238>
 8005428:	f1b9 0f00 	cmp.w	r9, #0
 800542c:	da0f      	bge.n	800544e <__ieee754_pow+0x23e>
 800542e:	2000      	movs	r0, #0
 8005430:	b009      	add	sp, #36	; 0x24
 8005432:	ecbd 8b06 	vpop	{d8-d10}
 8005436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	f000 bcf0 	b.w	8005e1e <__math_oflow>
 800543e:	429c      	cmp	r4, r3
 8005440:	dbf2      	blt.n	8005428 <__ieee754_pow+0x218>
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <__ieee754_pow+0x25c>)
 8005444:	429c      	cmp	r4, r3
 8005446:	dd19      	ble.n	800547c <__ieee754_pow+0x26c>
 8005448:	f1b9 0f00 	cmp.w	r9, #0
 800544c:	dcef      	bgt.n	800542e <__ieee754_pow+0x21e>
 800544e:	2000      	movs	r0, #0
 8005450:	b009      	add	sp, #36	; 0x24
 8005452:	ecbd 8b06 	vpop	{d8-d10}
 8005456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f000 bcd7 	b.w	8005e0c <__math_uflow>
 800545e:	bf00      	nop
 8005460:	fff00000 	.word	0xfff00000
 8005464:	7ff00000 	.word	0x7ff00000
 8005468:	433fffff 	.word	0x433fffff
 800546c:	3ff00000 	.word	0x3ff00000
 8005470:	3fefffff 	.word	0x3fefffff
 8005474:	3fe00000 	.word	0x3fe00000
 8005478:	41e00000 	.word	0x41e00000
 800547c:	4b60      	ldr	r3, [pc, #384]	; (8005600 <__ieee754_pow+0x3f0>)
 800547e:	2200      	movs	r2, #0
 8005480:	f7fa ff0a 	bl	8000298 <__aeabi_dsub>
 8005484:	a354      	add	r3, pc, #336	; (adr r3, 80055d8 <__ieee754_pow+0x3c8>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	4604      	mov	r4, r0
 800548c:	460d      	mov	r5, r1
 800548e:	f7fb f8bb 	bl	8000608 <__aeabi_dmul>
 8005492:	a353      	add	r3, pc, #332	; (adr r3, 80055e0 <__ieee754_pow+0x3d0>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	4606      	mov	r6, r0
 800549a:	460f      	mov	r7, r1
 800549c:	4620      	mov	r0, r4
 800549e:	4629      	mov	r1, r5
 80054a0:	f7fb f8b2 	bl	8000608 <__aeabi_dmul>
 80054a4:	4b57      	ldr	r3, [pc, #348]	; (8005604 <__ieee754_pow+0x3f4>)
 80054a6:	4682      	mov	sl, r0
 80054a8:	468b      	mov	fp, r1
 80054aa:	2200      	movs	r2, #0
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fb f8aa 	bl	8000608 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	a14b      	add	r1, pc, #300	; (adr r1, 80055e8 <__ieee754_pow+0x3d8>)
 80054ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054be:	f7fa feeb 	bl	8000298 <__aeabi_dsub>
 80054c2:	4622      	mov	r2, r4
 80054c4:	462b      	mov	r3, r5
 80054c6:	f7fb f89f 	bl	8000608 <__aeabi_dmul>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	2000      	movs	r0, #0
 80054d0:	494d      	ldr	r1, [pc, #308]	; (8005608 <__ieee754_pow+0x3f8>)
 80054d2:	f7fa fee1 	bl	8000298 <__aeabi_dsub>
 80054d6:	4622      	mov	r2, r4
 80054d8:	4680      	mov	r8, r0
 80054da:	4689      	mov	r9, r1
 80054dc:	462b      	mov	r3, r5
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fb f891 	bl	8000608 <__aeabi_dmul>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f7fb f88b 	bl	8000608 <__aeabi_dmul>
 80054f2:	a33f      	add	r3, pc, #252	; (adr r3, 80055f0 <__ieee754_pow+0x3e0>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fb f886 	bl	8000608 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4650      	mov	r0, sl
 8005502:	4659      	mov	r1, fp
 8005504:	f7fa fec8 	bl	8000298 <__aeabi_dsub>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4680      	mov	r8, r0
 800550e:	4689      	mov	r9, r1
 8005510:	4630      	mov	r0, r6
 8005512:	4639      	mov	r1, r7
 8005514:	f7fa fec2 	bl	800029c <__adddf3>
 8005518:	2000      	movs	r0, #0
 800551a:	4632      	mov	r2, r6
 800551c:	463b      	mov	r3, r7
 800551e:	4604      	mov	r4, r0
 8005520:	460d      	mov	r5, r1
 8005522:	f7fa feb9 	bl	8000298 <__aeabi_dsub>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4640      	mov	r0, r8
 800552c:	4649      	mov	r1, r9
 800552e:	f7fa feb3 	bl	8000298 <__aeabi_dsub>
 8005532:	9b04      	ldr	r3, [sp, #16]
 8005534:	9a06      	ldr	r2, [sp, #24]
 8005536:	3b01      	subs	r3, #1
 8005538:	4313      	orrs	r3, r2
 800553a:	4682      	mov	sl, r0
 800553c:	468b      	mov	fp, r1
 800553e:	f040 81e7 	bne.w	8005910 <__ieee754_pow+0x700>
 8005542:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80055f8 <__ieee754_pow+0x3e8>
 8005546:	eeb0 8a47 	vmov.f32	s16, s14
 800554a:	eef0 8a67 	vmov.f32	s17, s15
 800554e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005552:	2600      	movs	r6, #0
 8005554:	4632      	mov	r2, r6
 8005556:	463b      	mov	r3, r7
 8005558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800555c:	f7fa fe9c 	bl	8000298 <__aeabi_dsub>
 8005560:	4622      	mov	r2, r4
 8005562:	462b      	mov	r3, r5
 8005564:	f7fb f850 	bl	8000608 <__aeabi_dmul>
 8005568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800556c:	4680      	mov	r8, r0
 800556e:	4689      	mov	r9, r1
 8005570:	4650      	mov	r0, sl
 8005572:	4659      	mov	r1, fp
 8005574:	f7fb f848 	bl	8000608 <__aeabi_dmul>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4640      	mov	r0, r8
 800557e:	4649      	mov	r1, r9
 8005580:	f7fa fe8c 	bl	800029c <__adddf3>
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	4680      	mov	r8, r0
 800558a:	4689      	mov	r9, r1
 800558c:	4620      	mov	r0, r4
 800558e:	4629      	mov	r1, r5
 8005590:	f7fb f83a 	bl	8000608 <__aeabi_dmul>
 8005594:	460b      	mov	r3, r1
 8005596:	4604      	mov	r4, r0
 8005598:	460d      	mov	r5, r1
 800559a:	4602      	mov	r2, r0
 800559c:	4649      	mov	r1, r9
 800559e:	4640      	mov	r0, r8
 80055a0:	f7fa fe7c 	bl	800029c <__adddf3>
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <__ieee754_pow+0x3fc>)
 80055a6:	4299      	cmp	r1, r3
 80055a8:	ec45 4b19 	vmov	d9, r4, r5
 80055ac:	4606      	mov	r6, r0
 80055ae:	460f      	mov	r7, r1
 80055b0:	468b      	mov	fp, r1
 80055b2:	f340 82f1 	ble.w	8005b98 <__ieee754_pow+0x988>
 80055b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80055ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80055be:	4303      	orrs	r3, r0
 80055c0:	f000 81e4 	beq.w	800598c <__ieee754_pow+0x77c>
 80055c4:	ec51 0b18 	vmov	r0, r1, d8
 80055c8:	2200      	movs	r2, #0
 80055ca:	2300      	movs	r3, #0
 80055cc:	f7fb fa8e 	bl	8000aec <__aeabi_dcmplt>
 80055d0:	3800      	subs	r0, #0
 80055d2:	bf18      	it	ne
 80055d4:	2001      	movne	r0, #1
 80055d6:	e72b      	b.n	8005430 <__ieee754_pow+0x220>
 80055d8:	60000000 	.word	0x60000000
 80055dc:	3ff71547 	.word	0x3ff71547
 80055e0:	f85ddf44 	.word	0xf85ddf44
 80055e4:	3e54ae0b 	.word	0x3e54ae0b
 80055e8:	55555555 	.word	0x55555555
 80055ec:	3fd55555 	.word	0x3fd55555
 80055f0:	652b82fe 	.word	0x652b82fe
 80055f4:	3ff71547 	.word	0x3ff71547
 80055f8:	00000000 	.word	0x00000000
 80055fc:	bff00000 	.word	0xbff00000
 8005600:	3ff00000 	.word	0x3ff00000
 8005604:	3fd00000 	.word	0x3fd00000
 8005608:	3fe00000 	.word	0x3fe00000
 800560c:	408fffff 	.word	0x408fffff
 8005610:	4bd5      	ldr	r3, [pc, #852]	; (8005968 <__ieee754_pow+0x758>)
 8005612:	402b      	ands	r3, r5
 8005614:	2200      	movs	r2, #0
 8005616:	b92b      	cbnz	r3, 8005624 <__ieee754_pow+0x414>
 8005618:	4bd4      	ldr	r3, [pc, #848]	; (800596c <__ieee754_pow+0x75c>)
 800561a:	f7fa fff5 	bl	8000608 <__aeabi_dmul>
 800561e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005622:	460c      	mov	r4, r1
 8005624:	1523      	asrs	r3, r4, #20
 8005626:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800562a:	4413      	add	r3, r2
 800562c:	9305      	str	r3, [sp, #20]
 800562e:	4bd0      	ldr	r3, [pc, #832]	; (8005970 <__ieee754_pow+0x760>)
 8005630:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005634:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005638:	429c      	cmp	r4, r3
 800563a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800563e:	dd08      	ble.n	8005652 <__ieee754_pow+0x442>
 8005640:	4bcc      	ldr	r3, [pc, #816]	; (8005974 <__ieee754_pow+0x764>)
 8005642:	429c      	cmp	r4, r3
 8005644:	f340 8162 	ble.w	800590c <__ieee754_pow+0x6fc>
 8005648:	9b05      	ldr	r3, [sp, #20]
 800564a:	3301      	adds	r3, #1
 800564c:	9305      	str	r3, [sp, #20]
 800564e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005652:	2400      	movs	r4, #0
 8005654:	00e3      	lsls	r3, r4, #3
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	4bc7      	ldr	r3, [pc, #796]	; (8005978 <__ieee754_pow+0x768>)
 800565a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800565e:	ed93 7b00 	vldr	d7, [r3]
 8005662:	4629      	mov	r1, r5
 8005664:	ec53 2b17 	vmov	r2, r3, d7
 8005668:	eeb0 9a47 	vmov.f32	s18, s14
 800566c:	eef0 9a67 	vmov.f32	s19, s15
 8005670:	4682      	mov	sl, r0
 8005672:	f7fa fe11 	bl	8000298 <__aeabi_dsub>
 8005676:	4652      	mov	r2, sl
 8005678:	4606      	mov	r6, r0
 800567a:	460f      	mov	r7, r1
 800567c:	462b      	mov	r3, r5
 800567e:	ec51 0b19 	vmov	r0, r1, d9
 8005682:	f7fa fe0b 	bl	800029c <__adddf3>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	2000      	movs	r0, #0
 800568c:	49bb      	ldr	r1, [pc, #748]	; (800597c <__ieee754_pow+0x76c>)
 800568e:	f7fb f8e5 	bl	800085c <__aeabi_ddiv>
 8005692:	ec41 0b1a 	vmov	d10, r0, r1
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4630      	mov	r0, r6
 800569c:	4639      	mov	r1, r7
 800569e:	f7fa ffb3 	bl	8000608 <__aeabi_dmul>
 80056a2:	2300      	movs	r3, #0
 80056a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a8:	9302      	str	r3, [sp, #8]
 80056aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056ae:	46ab      	mov	fp, r5
 80056b0:	106d      	asrs	r5, r5, #1
 80056b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80056b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80056ba:	ec41 0b18 	vmov	d8, r0, r1
 80056be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80056c2:	2200      	movs	r2, #0
 80056c4:	4640      	mov	r0, r8
 80056c6:	4649      	mov	r1, r9
 80056c8:	4614      	mov	r4, r2
 80056ca:	461d      	mov	r5, r3
 80056cc:	f7fa ff9c 	bl	8000608 <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4630      	mov	r0, r6
 80056d6:	4639      	mov	r1, r7
 80056d8:	f7fa fdde 	bl	8000298 <__aeabi_dsub>
 80056dc:	ec53 2b19 	vmov	r2, r3, d9
 80056e0:	4606      	mov	r6, r0
 80056e2:	460f      	mov	r7, r1
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7fa fdd6 	bl	8000298 <__aeabi_dsub>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4650      	mov	r0, sl
 80056f2:	4659      	mov	r1, fp
 80056f4:	f7fa fdd0 	bl	8000298 <__aeabi_dsub>
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	f7fa ff84 	bl	8000608 <__aeabi_dmul>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4630      	mov	r0, r6
 8005706:	4639      	mov	r1, r7
 8005708:	f7fa fdc6 	bl	8000298 <__aeabi_dsub>
 800570c:	ec53 2b1a 	vmov	r2, r3, d10
 8005710:	f7fa ff7a 	bl	8000608 <__aeabi_dmul>
 8005714:	ec53 2b18 	vmov	r2, r3, d8
 8005718:	ec41 0b19 	vmov	d9, r0, r1
 800571c:	ec51 0b18 	vmov	r0, r1, d8
 8005720:	f7fa ff72 	bl	8000608 <__aeabi_dmul>
 8005724:	a37c      	add	r3, pc, #496	; (adr r3, 8005918 <__ieee754_pow+0x708>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	4604      	mov	r4, r0
 800572c:	460d      	mov	r5, r1
 800572e:	f7fa ff6b 	bl	8000608 <__aeabi_dmul>
 8005732:	a37b      	add	r3, pc, #492	; (adr r3, 8005920 <__ieee754_pow+0x710>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa fdb0 	bl	800029c <__adddf3>
 800573c:	4622      	mov	r2, r4
 800573e:	462b      	mov	r3, r5
 8005740:	f7fa ff62 	bl	8000608 <__aeabi_dmul>
 8005744:	a378      	add	r3, pc, #480	; (adr r3, 8005928 <__ieee754_pow+0x718>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fda7 	bl	800029c <__adddf3>
 800574e:	4622      	mov	r2, r4
 8005750:	462b      	mov	r3, r5
 8005752:	f7fa ff59 	bl	8000608 <__aeabi_dmul>
 8005756:	a376      	add	r3, pc, #472	; (adr r3, 8005930 <__ieee754_pow+0x720>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fa fd9e 	bl	800029c <__adddf3>
 8005760:	4622      	mov	r2, r4
 8005762:	462b      	mov	r3, r5
 8005764:	f7fa ff50 	bl	8000608 <__aeabi_dmul>
 8005768:	a373      	add	r3, pc, #460	; (adr r3, 8005938 <__ieee754_pow+0x728>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fa fd95 	bl	800029c <__adddf3>
 8005772:	4622      	mov	r2, r4
 8005774:	462b      	mov	r3, r5
 8005776:	f7fa ff47 	bl	8000608 <__aeabi_dmul>
 800577a:	a371      	add	r3, pc, #452	; (adr r3, 8005940 <__ieee754_pow+0x730>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa fd8c 	bl	800029c <__adddf3>
 8005784:	4622      	mov	r2, r4
 8005786:	4606      	mov	r6, r0
 8005788:	460f      	mov	r7, r1
 800578a:	462b      	mov	r3, r5
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fa ff3a 	bl	8000608 <__aeabi_dmul>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4630      	mov	r0, r6
 800579a:	4639      	mov	r1, r7
 800579c:	f7fa ff34 	bl	8000608 <__aeabi_dmul>
 80057a0:	4642      	mov	r2, r8
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	464b      	mov	r3, r9
 80057a8:	ec51 0b18 	vmov	r0, r1, d8
 80057ac:	f7fa fd76 	bl	800029c <__adddf3>
 80057b0:	ec53 2b19 	vmov	r2, r3, d9
 80057b4:	f7fa ff28 	bl	8000608 <__aeabi_dmul>
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	f7fa fd6e 	bl	800029c <__adddf3>
 80057c0:	4642      	mov	r2, r8
 80057c2:	4682      	mov	sl, r0
 80057c4:	468b      	mov	fp, r1
 80057c6:	464b      	mov	r3, r9
 80057c8:	4640      	mov	r0, r8
 80057ca:	4649      	mov	r1, r9
 80057cc:	f7fa ff1c 	bl	8000608 <__aeabi_dmul>
 80057d0:	4b6b      	ldr	r3, [pc, #428]	; (8005980 <__ieee754_pow+0x770>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	f7fa fd60 	bl	800029c <__adddf3>
 80057dc:	4652      	mov	r2, sl
 80057de:	465b      	mov	r3, fp
 80057e0:	f7fa fd5c 	bl	800029c <__adddf3>
 80057e4:	2000      	movs	r0, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	460d      	mov	r5, r1
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4640      	mov	r0, r8
 80057f0:	4649      	mov	r1, r9
 80057f2:	f7fa ff09 	bl	8000608 <__aeabi_dmul>
 80057f6:	4b62      	ldr	r3, [pc, #392]	; (8005980 <__ieee754_pow+0x770>)
 80057f8:	4680      	mov	r8, r0
 80057fa:	4689      	mov	r9, r1
 80057fc:	2200      	movs	r2, #0
 80057fe:	4620      	mov	r0, r4
 8005800:	4629      	mov	r1, r5
 8005802:	f7fa fd49 	bl	8000298 <__aeabi_dsub>
 8005806:	4632      	mov	r2, r6
 8005808:	463b      	mov	r3, r7
 800580a:	f7fa fd45 	bl	8000298 <__aeabi_dsub>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4650      	mov	r0, sl
 8005814:	4659      	mov	r1, fp
 8005816:	f7fa fd3f 	bl	8000298 <__aeabi_dsub>
 800581a:	ec53 2b18 	vmov	r2, r3, d8
 800581e:	f7fa fef3 	bl	8000608 <__aeabi_dmul>
 8005822:	4622      	mov	r2, r4
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	462b      	mov	r3, r5
 800582a:	ec51 0b19 	vmov	r0, r1, d9
 800582e:	f7fa feeb 	bl	8000608 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	f7fa fd2f 	bl	800029c <__adddf3>
 800583e:	4606      	mov	r6, r0
 8005840:	460f      	mov	r7, r1
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4640      	mov	r0, r8
 8005848:	4649      	mov	r1, r9
 800584a:	f7fa fd27 	bl	800029c <__adddf3>
 800584e:	a33e      	add	r3, pc, #248	; (adr r3, 8005948 <__ieee754_pow+0x738>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	2000      	movs	r0, #0
 8005856:	4604      	mov	r4, r0
 8005858:	460d      	mov	r5, r1
 800585a:	f7fa fed5 	bl	8000608 <__aeabi_dmul>
 800585e:	4642      	mov	r2, r8
 8005860:	ec41 0b18 	vmov	d8, r0, r1
 8005864:	464b      	mov	r3, r9
 8005866:	4620      	mov	r0, r4
 8005868:	4629      	mov	r1, r5
 800586a:	f7fa fd15 	bl	8000298 <__aeabi_dsub>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4630      	mov	r0, r6
 8005874:	4639      	mov	r1, r7
 8005876:	f7fa fd0f 	bl	8000298 <__aeabi_dsub>
 800587a:	a335      	add	r3, pc, #212	; (adr r3, 8005950 <__ieee754_pow+0x740>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f7fa fec2 	bl	8000608 <__aeabi_dmul>
 8005884:	a334      	add	r3, pc, #208	; (adr r3, 8005958 <__ieee754_pow+0x748>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fa feb9 	bl	8000608 <__aeabi_dmul>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4630      	mov	r0, r6
 800589c:	4639      	mov	r1, r7
 800589e:	f7fa fcfd 	bl	800029c <__adddf3>
 80058a2:	9a07      	ldr	r2, [sp, #28]
 80058a4:	4b37      	ldr	r3, [pc, #220]	; (8005984 <__ieee754_pow+0x774>)
 80058a6:	4413      	add	r3, r2
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fcf6 	bl	800029c <__adddf3>
 80058b0:	4682      	mov	sl, r0
 80058b2:	9805      	ldr	r0, [sp, #20]
 80058b4:	468b      	mov	fp, r1
 80058b6:	f7fa fe3d 	bl	8000534 <__aeabi_i2d>
 80058ba:	9a07      	ldr	r2, [sp, #28]
 80058bc:	4b32      	ldr	r3, [pc, #200]	; (8005988 <__ieee754_pow+0x778>)
 80058be:	4413      	add	r3, r2
 80058c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	4652      	mov	r2, sl
 80058ca:	465b      	mov	r3, fp
 80058cc:	ec51 0b18 	vmov	r0, r1, d8
 80058d0:	f7fa fce4 	bl	800029c <__adddf3>
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	f7fa fce0 	bl	800029c <__adddf3>
 80058dc:	4632      	mov	r2, r6
 80058de:	463b      	mov	r3, r7
 80058e0:	f7fa fcdc 	bl	800029c <__adddf3>
 80058e4:	2000      	movs	r0, #0
 80058e6:	4632      	mov	r2, r6
 80058e8:	463b      	mov	r3, r7
 80058ea:	4604      	mov	r4, r0
 80058ec:	460d      	mov	r5, r1
 80058ee:	f7fa fcd3 	bl	8000298 <__aeabi_dsub>
 80058f2:	4642      	mov	r2, r8
 80058f4:	464b      	mov	r3, r9
 80058f6:	f7fa fccf 	bl	8000298 <__aeabi_dsub>
 80058fa:	ec53 2b18 	vmov	r2, r3, d8
 80058fe:	f7fa fccb 	bl	8000298 <__aeabi_dsub>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4650      	mov	r0, sl
 8005908:	4659      	mov	r1, fp
 800590a:	e610      	b.n	800552e <__ieee754_pow+0x31e>
 800590c:	2401      	movs	r4, #1
 800590e:	e6a1      	b.n	8005654 <__ieee754_pow+0x444>
 8005910:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005960 <__ieee754_pow+0x750>
 8005914:	e617      	b.n	8005546 <__ieee754_pow+0x336>
 8005916:	bf00      	nop
 8005918:	4a454eef 	.word	0x4a454eef
 800591c:	3fca7e28 	.word	0x3fca7e28
 8005920:	93c9db65 	.word	0x93c9db65
 8005924:	3fcd864a 	.word	0x3fcd864a
 8005928:	a91d4101 	.word	0xa91d4101
 800592c:	3fd17460 	.word	0x3fd17460
 8005930:	518f264d 	.word	0x518f264d
 8005934:	3fd55555 	.word	0x3fd55555
 8005938:	db6fabff 	.word	0xdb6fabff
 800593c:	3fdb6db6 	.word	0x3fdb6db6
 8005940:	33333303 	.word	0x33333303
 8005944:	3fe33333 	.word	0x3fe33333
 8005948:	e0000000 	.word	0xe0000000
 800594c:	3feec709 	.word	0x3feec709
 8005950:	dc3a03fd 	.word	0xdc3a03fd
 8005954:	3feec709 	.word	0x3feec709
 8005958:	145b01f5 	.word	0x145b01f5
 800595c:	be3e2fe0 	.word	0xbe3e2fe0
 8005960:	00000000 	.word	0x00000000
 8005964:	3ff00000 	.word	0x3ff00000
 8005968:	7ff00000 	.word	0x7ff00000
 800596c:	43400000 	.word	0x43400000
 8005970:	0003988e 	.word	0x0003988e
 8005974:	000bb679 	.word	0x000bb679
 8005978:	08006378 	.word	0x08006378
 800597c:	3ff00000 	.word	0x3ff00000
 8005980:	40080000 	.word	0x40080000
 8005984:	08006398 	.word	0x08006398
 8005988:	08006388 	.word	0x08006388
 800598c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005c64 <__ieee754_pow+0xa54>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	4640      	mov	r0, r8
 8005994:	4649      	mov	r1, r9
 8005996:	f7fa fc81 	bl	800029c <__adddf3>
 800599a:	4622      	mov	r2, r4
 800599c:	ec41 0b1a 	vmov	d10, r0, r1
 80059a0:	462b      	mov	r3, r5
 80059a2:	4630      	mov	r0, r6
 80059a4:	4639      	mov	r1, r7
 80059a6:	f7fa fc77 	bl	8000298 <__aeabi_dsub>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	ec51 0b1a 	vmov	r0, r1, d10
 80059b2:	f7fb f8b9 	bl	8000b28 <__aeabi_dcmpgt>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f47f ae04 	bne.w	80055c4 <__ieee754_pow+0x3b4>
 80059bc:	4aa4      	ldr	r2, [pc, #656]	; (8005c50 <__ieee754_pow+0xa40>)
 80059be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80059c2:	4293      	cmp	r3, r2
 80059c4:	f340 8108 	ble.w	8005bd8 <__ieee754_pow+0x9c8>
 80059c8:	151b      	asrs	r3, r3, #20
 80059ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80059ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80059d2:	fa4a f303 	asr.w	r3, sl, r3
 80059d6:	445b      	add	r3, fp
 80059d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80059dc:	4e9d      	ldr	r6, [pc, #628]	; (8005c54 <__ieee754_pow+0xa44>)
 80059de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80059e2:	4116      	asrs	r6, r2
 80059e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80059e8:	2000      	movs	r0, #0
 80059ea:	ea23 0106 	bic.w	r1, r3, r6
 80059ee:	f1c2 0214 	rsb	r2, r2, #20
 80059f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80059f6:	fa4a fa02 	asr.w	sl, sl, r2
 80059fa:	f1bb 0f00 	cmp.w	fp, #0
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	bfb8      	it	lt
 8005a08:	f1ca 0a00 	rsblt	sl, sl, #0
 8005a0c:	f7fa fc44 	bl	8000298 <__aeabi_dsub>
 8005a10:	ec41 0b19 	vmov	d9, r0, r1
 8005a14:	4642      	mov	r2, r8
 8005a16:	464b      	mov	r3, r9
 8005a18:	ec51 0b19 	vmov	r0, r1, d9
 8005a1c:	f7fa fc3e 	bl	800029c <__adddf3>
 8005a20:	a37b      	add	r3, pc, #492	; (adr r3, 8005c10 <__ieee754_pow+0xa00>)
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	2000      	movs	r0, #0
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	f7fa fdec 	bl	8000608 <__aeabi_dmul>
 8005a30:	ec53 2b19 	vmov	r2, r3, d9
 8005a34:	4606      	mov	r6, r0
 8005a36:	460f      	mov	r7, r1
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f7fa fc2c 	bl	8000298 <__aeabi_dsub>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	f7fa fc26 	bl	8000298 <__aeabi_dsub>
 8005a4c:	a372      	add	r3, pc, #456	; (adr r3, 8005c18 <__ieee754_pow+0xa08>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f7fa fdd9 	bl	8000608 <__aeabi_dmul>
 8005a56:	a372      	add	r3, pc, #456	; (adr r3, 8005c20 <__ieee754_pow+0xa10>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	4689      	mov	r9, r1
 8005a60:	4620      	mov	r0, r4
 8005a62:	4629      	mov	r1, r5
 8005a64:	f7fa fdd0 	bl	8000608 <__aeabi_dmul>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4649      	mov	r1, r9
 8005a70:	f7fa fc14 	bl	800029c <__adddf3>
 8005a74:	4604      	mov	r4, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4639      	mov	r1, r7
 8005a80:	f7fa fc0c 	bl	800029c <__adddf3>
 8005a84:	4632      	mov	r2, r6
 8005a86:	463b      	mov	r3, r7
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	f7fa fc04 	bl	8000298 <__aeabi_dsub>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4620      	mov	r0, r4
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7fa fbfe 	bl	8000298 <__aeabi_dsub>
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	460f      	mov	r7, r1
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	f7fa fdae 	bl	8000608 <__aeabi_dmul>
 8005aac:	a35e      	add	r3, pc, #376	; (adr r3, 8005c28 <__ieee754_pow+0xa18>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	f7fa fda7 	bl	8000608 <__aeabi_dmul>
 8005aba:	a35d      	add	r3, pc, #372	; (adr r3, 8005c30 <__ieee754_pow+0xa20>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f7fa fbea 	bl	8000298 <__aeabi_dsub>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	f7fa fd9e 	bl	8000608 <__aeabi_dmul>
 8005acc:	a35a      	add	r3, pc, #360	; (adr r3, 8005c38 <__ieee754_pow+0xa28>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fbe3 	bl	800029c <__adddf3>
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f7fa fd95 	bl	8000608 <__aeabi_dmul>
 8005ade:	a358      	add	r3, pc, #352	; (adr r3, 8005c40 <__ieee754_pow+0xa30>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fa fbd8 	bl	8000298 <__aeabi_dsub>
 8005ae8:	4622      	mov	r2, r4
 8005aea:	462b      	mov	r3, r5
 8005aec:	f7fa fd8c 	bl	8000608 <__aeabi_dmul>
 8005af0:	a355      	add	r3, pc, #340	; (adr r3, 8005c48 <__ieee754_pow+0xa38>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fbd1 	bl	800029c <__adddf3>
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f7fa fd83 	bl	8000608 <__aeabi_dmul>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fbc5 	bl	8000298 <__aeabi_dsub>
 8005b0e:	4604      	mov	r4, r0
 8005b10:	460d      	mov	r5, r1
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	f7fa fd75 	bl	8000608 <__aeabi_dmul>
 8005b1e:	2200      	movs	r2, #0
 8005b20:	ec41 0b19 	vmov	d9, r0, r1
 8005b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	f7fa fbb4 	bl	8000298 <__aeabi_dsub>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	ec51 0b19 	vmov	r0, r1, d9
 8005b38:	f7fa fe90 	bl	800085c <__aeabi_ddiv>
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	4604      	mov	r4, r0
 8005b40:	460d      	mov	r5, r1
 8005b42:	463b      	mov	r3, r7
 8005b44:	4640      	mov	r0, r8
 8005b46:	4649      	mov	r1, r9
 8005b48:	f7fa fd5e 	bl	8000608 <__aeabi_dmul>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	463b      	mov	r3, r7
 8005b50:	f7fa fba4 	bl	800029c <__adddf3>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4620      	mov	r0, r4
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	f7fa fb9c 	bl	8000298 <__aeabi_dsub>
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	f7fa fb98 	bl	8000298 <__aeabi_dsub>
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	493a      	ldr	r1, [pc, #232]	; (8005c58 <__ieee754_pow+0xa48>)
 8005b6e:	2000      	movs	r0, #0
 8005b70:	f7fa fb92 	bl	8000298 <__aeabi_dsub>
 8005b74:	ec41 0b10 	vmov	d0, r0, r1
 8005b78:	ee10 3a90 	vmov	r3, s1
 8005b7c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b84:	da2b      	bge.n	8005bde <__ieee754_pow+0x9ce>
 8005b86:	4650      	mov	r0, sl
 8005b88:	f000 f966 	bl	8005e58 <scalbn>
 8005b8c:	ec51 0b10 	vmov	r0, r1, d0
 8005b90:	ec53 2b18 	vmov	r2, r3, d8
 8005b94:	f7ff bbed 	b.w	8005372 <__ieee754_pow+0x162>
 8005b98:	4b30      	ldr	r3, [pc, #192]	; (8005c5c <__ieee754_pow+0xa4c>)
 8005b9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005b9e:	429e      	cmp	r6, r3
 8005ba0:	f77f af0c 	ble.w	80059bc <__ieee754_pow+0x7ac>
 8005ba4:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <__ieee754_pow+0xa50>)
 8005ba6:	440b      	add	r3, r1
 8005ba8:	4303      	orrs	r3, r0
 8005baa:	d009      	beq.n	8005bc0 <__ieee754_pow+0x9b0>
 8005bac:	ec51 0b18 	vmov	r0, r1, d8
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f7fa ff9a 	bl	8000aec <__aeabi_dcmplt>
 8005bb8:	3800      	subs	r0, #0
 8005bba:	bf18      	it	ne
 8005bbc:	2001      	movne	r0, #1
 8005bbe:	e447      	b.n	8005450 <__ieee754_pow+0x240>
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	f7fa fb68 	bl	8000298 <__aeabi_dsub>
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	f7fa ffa2 	bl	8000b14 <__aeabi_dcmpge>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f43f aef3 	beq.w	80059bc <__ieee754_pow+0x7ac>
 8005bd6:	e7e9      	b.n	8005bac <__ieee754_pow+0x99c>
 8005bd8:	f04f 0a00 	mov.w	sl, #0
 8005bdc:	e71a      	b.n	8005a14 <__ieee754_pow+0x804>
 8005bde:	ec51 0b10 	vmov	r0, r1, d0
 8005be2:	4619      	mov	r1, r3
 8005be4:	e7d4      	b.n	8005b90 <__ieee754_pow+0x980>
 8005be6:	491c      	ldr	r1, [pc, #112]	; (8005c58 <__ieee754_pow+0xa48>)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7ff bb30 	b.w	800524e <__ieee754_pow+0x3e>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	f7ff bb2c 	b.w	800524e <__ieee754_pow+0x3e>
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7ff bb28 	b.w	800524e <__ieee754_pow+0x3e>
 8005bfe:	9204      	str	r2, [sp, #16]
 8005c00:	f7ff bb7a 	b.w	80052f8 <__ieee754_pow+0xe8>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f7ff bb64 	b.w	80052d2 <__ieee754_pow+0xc2>
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w
 8005c10:	00000000 	.word	0x00000000
 8005c14:	3fe62e43 	.word	0x3fe62e43
 8005c18:	fefa39ef 	.word	0xfefa39ef
 8005c1c:	3fe62e42 	.word	0x3fe62e42
 8005c20:	0ca86c39 	.word	0x0ca86c39
 8005c24:	be205c61 	.word	0xbe205c61
 8005c28:	72bea4d0 	.word	0x72bea4d0
 8005c2c:	3e663769 	.word	0x3e663769
 8005c30:	c5d26bf1 	.word	0xc5d26bf1
 8005c34:	3ebbbd41 	.word	0x3ebbbd41
 8005c38:	af25de2c 	.word	0xaf25de2c
 8005c3c:	3f11566a 	.word	0x3f11566a
 8005c40:	16bebd93 	.word	0x16bebd93
 8005c44:	3f66c16c 	.word	0x3f66c16c
 8005c48:	5555553e 	.word	0x5555553e
 8005c4c:	3fc55555 	.word	0x3fc55555
 8005c50:	3fe00000 	.word	0x3fe00000
 8005c54:	000fffff 	.word	0x000fffff
 8005c58:	3ff00000 	.word	0x3ff00000
 8005c5c:	4090cbff 	.word	0x4090cbff
 8005c60:	3f6f3400 	.word	0x3f6f3400
 8005c64:	652b82fe 	.word	0x652b82fe
 8005c68:	3c971547 	.word	0x3c971547

08005c6c <__ieee754_sqrt>:
 8005c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	ec55 4b10 	vmov	r4, r5, d0
 8005c74:	4e55      	ldr	r6, [pc, #340]	; (8005dcc <__ieee754_sqrt+0x160>)
 8005c76:	43ae      	bics	r6, r5
 8005c78:	ee10 0a10 	vmov	r0, s0
 8005c7c:	ee10 3a10 	vmov	r3, s0
 8005c80:	462a      	mov	r2, r5
 8005c82:	4629      	mov	r1, r5
 8005c84:	d110      	bne.n	8005ca8 <__ieee754_sqrt+0x3c>
 8005c86:	ee10 2a10 	vmov	r2, s0
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	f7fa fcbc 	bl	8000608 <__aeabi_dmul>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4620      	mov	r0, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	f7fa fb00 	bl	800029c <__adddf3>
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	ec45 4b10 	vmov	d0, r4, r5
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca8:	2d00      	cmp	r5, #0
 8005caa:	dc10      	bgt.n	8005cce <__ieee754_sqrt+0x62>
 8005cac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005cb0:	4330      	orrs	r0, r6
 8005cb2:	d0f5      	beq.n	8005ca0 <__ieee754_sqrt+0x34>
 8005cb4:	b15d      	cbz	r5, 8005cce <__ieee754_sqrt+0x62>
 8005cb6:	ee10 2a10 	vmov	r2, s0
 8005cba:	462b      	mov	r3, r5
 8005cbc:	ee10 0a10 	vmov	r0, s0
 8005cc0:	f7fa faea 	bl	8000298 <__aeabi_dsub>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	f7fa fdc8 	bl	800085c <__aeabi_ddiv>
 8005ccc:	e7e6      	b.n	8005c9c <__ieee754_sqrt+0x30>
 8005cce:	1512      	asrs	r2, r2, #20
 8005cd0:	d074      	beq.n	8005dbc <__ieee754_sqrt+0x150>
 8005cd2:	07d4      	lsls	r4, r2, #31
 8005cd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005cd8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005cdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ce0:	bf5e      	ittt	pl
 8005ce2:	0fda      	lsrpl	r2, r3, #31
 8005ce4:	005b      	lslpl	r3, r3, #1
 8005ce6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005cea:	2400      	movs	r4, #0
 8005cec:	0fda      	lsrs	r2, r3, #31
 8005cee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005cf2:	107f      	asrs	r7, r7, #1
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	2516      	movs	r5, #22
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005cfe:	1886      	adds	r6, r0, r2
 8005d00:	428e      	cmp	r6, r1
 8005d02:	bfde      	ittt	le
 8005d04:	1b89      	suble	r1, r1, r6
 8005d06:	18b0      	addle	r0, r6, r2
 8005d08:	18a4      	addle	r4, r4, r2
 8005d0a:	0049      	lsls	r1, r1, #1
 8005d0c:	3d01      	subs	r5, #1
 8005d0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005d12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005d16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d1a:	d1f0      	bne.n	8005cfe <__ieee754_sqrt+0x92>
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	f04f 0e20 	mov.w	lr, #32
 8005d22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005d26:	4281      	cmp	r1, r0
 8005d28:	eb06 0c05 	add.w	ip, r6, r5
 8005d2c:	dc02      	bgt.n	8005d34 <__ieee754_sqrt+0xc8>
 8005d2e:	d113      	bne.n	8005d58 <__ieee754_sqrt+0xec>
 8005d30:	459c      	cmp	ip, r3
 8005d32:	d811      	bhi.n	8005d58 <__ieee754_sqrt+0xec>
 8005d34:	f1bc 0f00 	cmp.w	ip, #0
 8005d38:	eb0c 0506 	add.w	r5, ip, r6
 8005d3c:	da43      	bge.n	8005dc6 <__ieee754_sqrt+0x15a>
 8005d3e:	2d00      	cmp	r5, #0
 8005d40:	db41      	blt.n	8005dc6 <__ieee754_sqrt+0x15a>
 8005d42:	f100 0801 	add.w	r8, r0, #1
 8005d46:	1a09      	subs	r1, r1, r0
 8005d48:	459c      	cmp	ip, r3
 8005d4a:	bf88      	it	hi
 8005d4c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8005d50:	eba3 030c 	sub.w	r3, r3, ip
 8005d54:	4432      	add	r2, r6
 8005d56:	4640      	mov	r0, r8
 8005d58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005d5c:	f1be 0e01 	subs.w	lr, lr, #1
 8005d60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005d64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005d6c:	d1db      	bne.n	8005d26 <__ieee754_sqrt+0xba>
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	d006      	beq.n	8005d80 <__ieee754_sqrt+0x114>
 8005d72:	1c50      	adds	r0, r2, #1
 8005d74:	bf13      	iteet	ne
 8005d76:	3201      	addne	r2, #1
 8005d78:	3401      	addeq	r4, #1
 8005d7a:	4672      	moveq	r2, lr
 8005d7c:	f022 0201 	bicne.w	r2, r2, #1
 8005d80:	1063      	asrs	r3, r4, #1
 8005d82:	0852      	lsrs	r2, r2, #1
 8005d84:	07e1      	lsls	r1, r4, #31
 8005d86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005d8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005d8e:	bf48      	it	mi
 8005d90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005d94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005d98:	4614      	mov	r4, r2
 8005d9a:	e781      	b.n	8005ca0 <__ieee754_sqrt+0x34>
 8005d9c:	0ad9      	lsrs	r1, r3, #11
 8005d9e:	3815      	subs	r0, #21
 8005da0:	055b      	lsls	r3, r3, #21
 8005da2:	2900      	cmp	r1, #0
 8005da4:	d0fa      	beq.n	8005d9c <__ieee754_sqrt+0x130>
 8005da6:	02cd      	lsls	r5, r1, #11
 8005da8:	d50a      	bpl.n	8005dc0 <__ieee754_sqrt+0x154>
 8005daa:	f1c2 0420 	rsb	r4, r2, #32
 8005dae:	fa23 f404 	lsr.w	r4, r3, r4
 8005db2:	1e55      	subs	r5, r2, #1
 8005db4:	4093      	lsls	r3, r2
 8005db6:	4321      	orrs	r1, r4
 8005db8:	1b42      	subs	r2, r0, r5
 8005dba:	e78a      	b.n	8005cd2 <__ieee754_sqrt+0x66>
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	e7f0      	b.n	8005da2 <__ieee754_sqrt+0x136>
 8005dc0:	0049      	lsls	r1, r1, #1
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	e7ef      	b.n	8005da6 <__ieee754_sqrt+0x13a>
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	e7bd      	b.n	8005d46 <__ieee754_sqrt+0xda>
 8005dca:	bf00      	nop
 8005dcc:	7ff00000 	.word	0x7ff00000

08005dd0 <with_errno>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	4616      	mov	r6, r2
 8005dd8:	f7fc fc1a 	bl	8002610 <__errno>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	6006      	str	r6, [r0, #0]
 8005de0:	4620      	mov	r0, r4
 8005de2:	bd70      	pop	{r4, r5, r6, pc}

08005de4 <xflow>:
 8005de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005de6:	4614      	mov	r4, r2
 8005de8:	461d      	mov	r5, r3
 8005dea:	b108      	cbz	r0, 8005df0 <xflow+0xc>
 8005dec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	e9cd 2300 	strd	r2, r3, [sp]
 8005df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	f7fa fc04 	bl	8000608 <__aeabi_dmul>
 8005e00:	2222      	movs	r2, #34	; 0x22
 8005e02:	b003      	add	sp, #12
 8005e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e08:	f7ff bfe2 	b.w	8005dd0 <with_errno>

08005e0c <__math_uflow>:
 8005e0c:	b508      	push	{r3, lr}
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e14:	f7ff ffe6 	bl	8005de4 <xflow>
 8005e18:	ec41 0b10 	vmov	d0, r0, r1
 8005e1c:	bd08      	pop	{r3, pc}

08005e1e <__math_oflow>:
 8005e1e:	b508      	push	{r3, lr}
 8005e20:	2200      	movs	r2, #0
 8005e22:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005e26:	f7ff ffdd 	bl	8005de4 <xflow>
 8005e2a:	ec41 0b10 	vmov	d0, r0, r1
 8005e2e:	bd08      	pop	{r3, pc}

08005e30 <fabs>:
 8005e30:	ec51 0b10 	vmov	r0, r1, d0
 8005e34:	ee10 2a10 	vmov	r2, s0
 8005e38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e3c:	ec43 2b10 	vmov	d0, r2, r3
 8005e40:	4770      	bx	lr

08005e42 <finite>:
 8005e42:	b082      	sub	sp, #8
 8005e44:	ed8d 0b00 	vstr	d0, [sp]
 8005e48:	9801      	ldr	r0, [sp, #4]
 8005e4a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005e4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005e52:	0fc0      	lsrs	r0, r0, #31
 8005e54:	b002      	add	sp, #8
 8005e56:	4770      	bx	lr

08005e58 <scalbn>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	ec55 4b10 	vmov	r4, r5, d0
 8005e5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005e62:	4606      	mov	r6, r0
 8005e64:	462b      	mov	r3, r5
 8005e66:	b99a      	cbnz	r2, 8005e90 <scalbn+0x38>
 8005e68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e6c:	4323      	orrs	r3, r4
 8005e6e:	d036      	beq.n	8005ede <scalbn+0x86>
 8005e70:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <scalbn+0x100>)
 8005e72:	4629      	mov	r1, r5
 8005e74:	ee10 0a10 	vmov	r0, s0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f7fa fbc5 	bl	8000608 <__aeabi_dmul>
 8005e7e:	4b37      	ldr	r3, [pc, #220]	; (8005f5c <scalbn+0x104>)
 8005e80:	429e      	cmp	r6, r3
 8005e82:	4604      	mov	r4, r0
 8005e84:	460d      	mov	r5, r1
 8005e86:	da10      	bge.n	8005eaa <scalbn+0x52>
 8005e88:	a32b      	add	r3, pc, #172	; (adr r3, 8005f38 <scalbn+0xe0>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	e03a      	b.n	8005f06 <scalbn+0xae>
 8005e90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005e94:	428a      	cmp	r2, r1
 8005e96:	d10c      	bne.n	8005eb2 <scalbn+0x5a>
 8005e98:	ee10 2a10 	vmov	r2, s0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa f9fc 	bl	800029c <__adddf3>
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	e019      	b.n	8005ede <scalbn+0x86>
 8005eaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005eae:	460b      	mov	r3, r1
 8005eb0:	3a36      	subs	r2, #54	; 0x36
 8005eb2:	4432      	add	r2, r6
 8005eb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005eb8:	428a      	cmp	r2, r1
 8005eba:	dd08      	ble.n	8005ece <scalbn+0x76>
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	a120      	add	r1, pc, #128	; (adr r1, 8005f40 <scalbn+0xe8>)
 8005ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ec4:	da1c      	bge.n	8005f00 <scalbn+0xa8>
 8005ec6:	a120      	add	r1, pc, #128	; (adr r1, 8005f48 <scalbn+0xf0>)
 8005ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ecc:	e018      	b.n	8005f00 <scalbn+0xa8>
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	dd08      	ble.n	8005ee4 <scalbn+0x8c>
 8005ed2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ed6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005eda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ede:	ec45 4b10 	vmov	d0, r4, r5
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ee8:	da19      	bge.n	8005f1e <scalbn+0xc6>
 8005eea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005eee:	429e      	cmp	r6, r3
 8005ef0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005ef4:	dd0a      	ble.n	8005f0c <scalbn+0xb4>
 8005ef6:	a112      	add	r1, pc, #72	; (adr r1, 8005f40 <scalbn+0xe8>)
 8005ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e2      	bne.n	8005ec6 <scalbn+0x6e>
 8005f00:	a30f      	add	r3, pc, #60	; (adr r3, 8005f40 <scalbn+0xe8>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa fb7f 	bl	8000608 <__aeabi_dmul>
 8005f0a:	e7cb      	b.n	8005ea4 <scalbn+0x4c>
 8005f0c:	a10a      	add	r1, pc, #40	; (adr r1, 8005f38 <scalbn+0xe0>)
 8005f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0b8      	beq.n	8005e88 <scalbn+0x30>
 8005f16:	a10e      	add	r1, pc, #56	; (adr r1, 8005f50 <scalbn+0xf8>)
 8005f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f1c:	e7b4      	b.n	8005e88 <scalbn+0x30>
 8005f1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f22:	3236      	adds	r2, #54	; 0x36
 8005f24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <scalbn+0x108>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	e7e8      	b.n	8005f06 <scalbn+0xae>
 8005f34:	f3af 8000 	nop.w
 8005f38:	c2f8f359 	.word	0xc2f8f359
 8005f3c:	01a56e1f 	.word	0x01a56e1f
 8005f40:	8800759c 	.word	0x8800759c
 8005f44:	7e37e43c 	.word	0x7e37e43c
 8005f48:	8800759c 	.word	0x8800759c
 8005f4c:	fe37e43c 	.word	0xfe37e43c
 8005f50:	c2f8f359 	.word	0xc2f8f359
 8005f54:	81a56e1f 	.word	0x81a56e1f
 8005f58:	43500000 	.word	0x43500000
 8005f5c:	ffff3cb0 	.word	0xffff3cb0
 8005f60:	3c900000 	.word	0x3c900000

08005f64 <_sbrk>:
 8005f64:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <_sbrk+0x14>)
 8005f66:	6811      	ldr	r1, [r2, #0]
 8005f68:	4603      	mov	r3, r0
 8005f6a:	b909      	cbnz	r1, 8005f70 <_sbrk+0xc>
 8005f6c:	4903      	ldr	r1, [pc, #12]	; (8005f7c <_sbrk+0x18>)
 8005f6e:	6011      	str	r1, [r2, #0]
 8005f70:	6810      	ldr	r0, [r2, #0]
 8005f72:	4403      	add	r3, r0
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	4770      	bx	lr
 8005f78:	20000304 	.word	0x20000304
 8005f7c:	20000308 	.word	0x20000308

08005f80 <_init>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr

08005f8c <_fini>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr
