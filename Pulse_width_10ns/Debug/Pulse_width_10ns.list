
Pulse_width_10ns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080070d8  080070d8  000170d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080074f8  080074f8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074f8  080074f8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  200001d8  080076d8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080076d8  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eea  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e18  00000000  00000000  000240f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00024f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  000252d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106e6  00000000  00000000  00025618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004a1a  00000000  00000000  00035cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057912  00000000  00000000  0003a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009202a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  0009207c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070c0 	.word	0x080070c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080070c0 	.word	0x080070c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:

//Contador
uint8_t counter = 50;

int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	//Activamos la FPU
	SCB -> CPACR |= (0xF << 20);
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <main+0xa0>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <main+0xa0>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	inSystem ();
 8000cac:	f000 f84e 	bl	8000d4c <inSystem>

    /* Loop forever */
	while(1){


			if (rxData != '\0'){
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <main+0xa4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0fb      	beq.n	8000cb0 <main+0x18>

				writeChar(&handlerUSART, rxData);
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <main+0xa4>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4820      	ldr	r0, [pc, #128]	; (8000d40 <main+0xa8>)
 8000cc0:	f002 fbec 	bl	800349c <writeChar>

				if (rxData == '+'){
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <main+0xa4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b2b      	cmp	r3, #43	; 0x2b
 8000cca:	d118      	bne.n	8000cfe <main+0x66>

					if (counter < 100){
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <main+0xac>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b63      	cmp	r3, #99	; 0x63
 8000cd2:	d805      	bhi.n	8000ce0 <main+0x48>
					counter+= 1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <main+0xac>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <main+0xac>)
 8000cde:	701a      	strb	r2, [r3, #0]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <main+0xac>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cec:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf0:	4815      	ldr	r0, [pc, #84]	; (8000d48 <main+0xb0>)
 8000cf2:	f001 fbed 	bl	80024d0 <updateDuttyCycle>
					rxData = '\0';
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <main+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e7d8      	b.n	8000cb0 <main+0x18>

				}else if (rxData == '-'){
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <main+0xa4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b2d      	cmp	r3, #45	; 0x2d
 8000d04:	d1d4      	bne.n	8000cb0 <main+0x18>

					if (counter > 0){
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <main+0xac>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <main+0x82>
						counter-= 1;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <main+0xac>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <main+0xac>)
 8000d18:	701a      	strb	r2, [r3, #0]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <main+0xac>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <main+0xb0>)
 8000d2c:	f001 fbd0 	bl	80024d0 <updateDuttyCycle>
					rxData = '\0';
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <main+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			if (rxData != '\0'){
 8000d36:	e7bb      	b.n	8000cb0 <main+0x18>
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	200002f0 	.word	0x200002f0
 8000d40:	2000025c 	.word	0x2000025c
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000244 	.word	0x20000244

08000d4c <inSystem>:
		}
	}
}


void inSystem (void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	show_MaxFreq(MCO2,5); // Sale por el pin A8
 8000d50:	2105      	movs	r1, #5
 8000d52:	2001      	movs	r0, #1
 8000d54:	f001 ff00 	bl	8002b58 <show_MaxFreq>
	RCC_enableMaxFrequencies(RCC_20MHz);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f001 fbc9 	bl	80024f0 <RCC_enableMaxFrequencies>

	//Config del pin A8 salida de la velocidad del micro

	handlerMCOShow.pGPIOx                             = GPIOC;
 8000d5e:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <inSystem+0x1a8>)
 8000d60:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <inSystem+0x1ac>)
 8000d62:	601a      	str	r2, [r3, #0]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinNumber      = PIN_9 ;
 8000d64:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <inSystem+0x1a8>)
 8000d66:	2209      	movs	r2, #9
 8000d68:	711a      	strb	r2, [r3, #4]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000d6a:	4b62      	ldr	r3, [pc, #392]	; (8000ef4 <inSystem+0x1a8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	725a      	strb	r2, [r3, #9]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000d70:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <inSystem+0x1a8>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerMCOShow);
 8000d76:	485f      	ldr	r0, [pc, #380]	; (8000ef4 <inSystem+0x1a8>)
 8000d78:	f000 fdc0 	bl	80018fc <GPIO_Config>

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000d7c:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <inSystem+0x1b0>)
 8000d7e:	4a60      	ldr	r2, [pc, #384]	; (8000f00 <inSystem+0x1b4>)
 8000d80:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000d82:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <inSystem+0x1b0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d88:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <inSystem+0x1b0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000d8e:	4b5b      	ldr	r3, [pc, #364]	; (8000efc <inSystem+0x1b0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000d94:	4b59      	ldr	r3, [pc, #356]	; (8000efc <inSystem+0x1b0>)
 8000d96:	2205      	movs	r2, #5
 8000d98:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000d9a:	4b58      	ldr	r3, [pc, #352]	; (8000efc <inSystem+0x1b0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000da0:	4b56      	ldr	r3, [pc, #344]	; (8000efc <inSystem+0x1b0>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000da6:	4855      	ldr	r0, [pc, #340]	; (8000efc <inSystem+0x1b0>)
 8000da8:	f000 fda8 	bl	80018fc <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000dac:	2101      	movs	r1, #1
 8000dae:	4853      	ldr	r0, [pc, #332]	; (8000efc <inSystem+0x1b0>)
 8000db0:	f000 fece 	bl	8001b50 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM2;
 8000db4:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <inSystem+0x1b8>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000dbc:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <inSystem+0x1b8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000dc2:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <inSystem+0x1b8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	; (8000f04 <inSystem+0x1b8>)
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000dd0:	4b4c      	ldr	r3, [pc, #304]	; (8000f04 <inSystem+0x1b8>)
 8000dd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd6:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000dd8:	484a      	ldr	r0, [pc, #296]	; (8000f04 <inSystem+0x1b8>)
 8000dda:	f000 f9bd 	bl	8001158 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000dde:	4849      	ldr	r0, [pc, #292]	; (8000f04 <inSystem+0x1b8>)
 8000de0:	f000 fd7a 	bl	80018d8 <startTimer>

	// PWM handler del GPIO y el PWM

	handlerPinPwm_pulse_10ns.pGPIOx                             = GPIOA;
 8000de4:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <inSystem+0x1bc>)
 8000de6:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <inSystem+0x1b4>)
 8000de8:	601a      	str	r2, [r3, #0]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinAltFunMode  = AF1;
 8000dea:	4b47      	ldr	r3, [pc, #284]	; (8000f08 <inSystem+0x1bc>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000df0:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <inSystem+0x1bc>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000df6:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <inSystem+0x1bc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8000dfc:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <inSystem+0x1bc>)
 8000dfe:	2208      	movs	r2, #8
 8000e00:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e02:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <inSystem+0x1bc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <inSystem+0x1bc>)
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_pulse_10ns);
 8000e0e:	483e      	ldr	r0, [pc, #248]	; (8000f08 <inSystem+0x1bc>)
 8000e10:	f000 fd74 	bl	80018fc <GPIO_Config>

	handlerPWM_pulse_10ns.ptrTIMx            = TIM1;
 8000e14:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <inSystem+0x1c0>)
 8000e16:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <inSystem+0x1c4>)
 8000e18:	601a      	str	r2, [r3, #0]
	handlerPWM_pulse_10ns.config.channel     = PWM_CHANNEL_1;
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <inSystem+0x1c0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	711a      	strb	r2, [r3, #4]
	handlerPWM_pulse_10ns.config.duttyCicle  = 50;
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <inSystem+0x1c0>)
 8000e22:	4a3c      	ldr	r2, [pc, #240]	; (8000f14 <inSystem+0x1c8>)
 8000e24:	611a      	str	r2, [r3, #16]
	handlerPWM_pulse_10ns.config.periodo     = 10000; // se maneja 100kHz por testeo
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <inSystem+0x1c0>)
 8000e28:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e2c:	819a      	strh	r2, [r3, #12]
	handlerPWM_pulse_10ns.config.prescaler   = PWM_SPEED_100MHz_10ns;
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <inSystem+0x1c0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	609a      	str	r2, [r3, #8]
	handlerPWM_pulse_10ns.config.polarity    = PWM_DISABLE_POLARITY;
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <inSystem+0x1c0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	751a      	strb	r2, [r3, #20]
	handlerPWM_pulse_10ns.config.optocoupler = PWM_DISABLE_OPTOCOUPLER;
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <inSystem+0x1c0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_pulse_10ns);
 8000e40:	4832      	ldr	r0, [pc, #200]	; (8000f0c <inSystem+0x1c0>)
 8000e42:	f000 fee9 	bl	8001c18 <pwm_Config>
	startPwmSignal(&handlerPWM_pulse_10ns);
 8000e46:	4831      	ldr	r0, [pc, #196]	; (8000f0c <inSystem+0x1c0>)
 8000e48:	f000 ffd0 	bl	8001dec <startPwmSignal>
	enableOutput(&handlerPWM_pulse_10ns);
 8000e4c:	482f      	ldr	r0, [pc, #188]	; (8000f0c <inSystem+0x1c0>)
 8000e4e:	f000 ffdf 	bl	8001e10 <enableOutput>


	//Comunicacion serial


	handlerRxPin.pGPIOx                             = GPIOA;
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <inSystem+0x1cc>)
 8000e54:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <inSystem+0x1b4>)
 8000e56:	601a      	str	r2, [r3, #0]
	handlerRxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <inSystem+0x1cc>)
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	725a      	strb	r2, [r3, #9]
	handlerRxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <inSystem+0x1cc>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	715a      	strb	r2, [r3, #5]
	handlerRxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <inSystem+0x1cc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	721a      	strb	r2, [r3, #8]
	handlerRxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <inSystem+0x1cc>)
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	711a      	strb	r2, [r3, #4]
	handlerRxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <inSystem+0x1cc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	71da      	strb	r2, [r3, #7]
	handlerRxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <inSystem+0x1cc>)
 8000e78:	2203      	movs	r2, #3
 8000e7a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerRxPin);
 8000e7c:	4826      	ldr	r0, [pc, #152]	; (8000f18 <inSystem+0x1cc>)
 8000e7e:	f000 fd3d 	bl	80018fc <GPIO_Config>


	handlerTxPin.pGPIOx                             = GPIOA;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <inSystem+0x1d0>)
 8000e84:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <inSystem+0x1b4>)
 8000e86:	601a      	str	r2, [r3, #0]
	handlerTxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <inSystem+0x1d0>)
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	725a      	strb	r2, [r3, #9]
	handlerTxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <inSystem+0x1d0>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	715a      	strb	r2, [r3, #5]
	handlerTxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <inSystem+0x1d0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	721a      	strb	r2, [r3, #8]
	handlerTxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <inSystem+0x1d0>)
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	711a      	strb	r2, [r3, #4]
	handlerTxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <inSystem+0x1d0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	71da      	strb	r2, [r3, #7]
	handlerTxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <inSystem+0x1d0>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerTxPin);
 8000eac:	481b      	ldr	r0, [pc, #108]	; (8000f1c <inSystem+0x1d0>)
 8000eae:	f000 fd25 	bl	80018fc <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <inSystem+0x1d4>)
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <inSystem+0x1d8>)
 8000eb6:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <inSystem+0x1d4>)
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <inSystem+0x1dc>)
 8000ebc:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <inSystem+0x1d4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <inSystem+0x1d4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <inSystem+0x1d4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <inSystem+0x1d4>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <inSystem+0x1d4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <inSystem+0x1d4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <inSystem+0x1d4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <inSystem+0x1d4>)
 8000eea:	f001 ff0d 	bl	8002d08 <USART_Config>

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000020c 	.word	0x2000020c
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	200001f4 	.word	0x200001f4
 8000f00:	40020000 	.word	0x40020000
 8000f04:	20000230 	.word	0x20000230
 8000f08:	20000200 	.word	0x20000200
 8000f0c:	20000244 	.word	0x20000244
 8000f10:	40010000 	.word	0x40010000
 8000f14:	42480000 	.word	0x42480000
 8000f18:	20000218 	.word	0x20000218
 8000f1c:	20000224 	.word	0x20000224
 8000f20:	2000025c 	.word	0x2000025c
 8000f24:	40004400 	.word	0x40004400
 8000f28:	02faf080 	.word	0x02faf080

08000f2c <BasicTimer2_Callback>:

void BasicTimer2_Callback(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <BasicTimer2_Callback+0x10>)
 8000f32:	f000 fe59 	bl	8001be8 <GPIOxTooglePin>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001f4 	.word	0x200001f4

08000f40 <usart2Rx_Callback>:

void usart2Rx_Callback(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8000f44:	f002 fad2 	bl	80034ec <getRxData>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b01      	ldr	r3, [pc, #4]	; (8000f54 <usart2Rx_Callback+0x14>)
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200002f0 	.word	0x200002f0

08000f58 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <ITM_SendChar+0x48>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <ITM_SendChar+0x48>)
 8000f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <ITM_SendChar+0x4c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <ITM_SendChar+0x4c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000f7a:	bf00      	nop
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f8      	beq.n	8000f7c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000f8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000edfc 	.word	0xe000edfc
 8000fa4:	e0000e00 	.word	0xe0000e00

08000fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	return 1;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_kill>:

int _kill(int pid, int sig)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fc2:	f002 fbc3 	bl	800374c <__errno>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2216      	movs	r2, #22
 8000fca:	601a      	str	r2, [r3, #0]
	return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_exit>:

void _exit (int status)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffe7 	bl	8000fb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fea:	e7fe      	b.n	8000fea <_exit+0x12>

08000fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
	}

return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff89 	bl	8000f58 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x12>
	}
	return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001086:	605a      	str	r2, [r3, #4]
	return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010cc:	f002 faac 	bl	8003628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	; (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f6:	f002 fb2f 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff fdcd 	bl	8000c98 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   r0, =_estack
 8001100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800110c:	08007500 	.word	0x08007500
  ldr r2, =_sbss
 8001110:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001114:	20000320 	.word	0x20000320

08001118 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a85      	ldr	r2, [pc, #532]	; (8001388 <BasicTimer_Config+0x230>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d106      	bne.n	8001184 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001176:	4b85      	ldr	r3, [pc, #532]	; (800138c <BasicTimer_Config+0x234>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a84      	ldr	r2, [pc, #528]	; (800138c <BasicTimer_Config+0x234>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	e030      	b.n	80011e6 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d106      	bne.n	800119c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800118e:	4b7f      	ldr	r3, [pc, #508]	; (800138c <BasicTimer_Config+0x234>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a7e      	ldr	r2, [pc, #504]	; (800138c <BasicTimer_Config+0x234>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	e024      	b.n	80011e6 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a7b      	ldr	r2, [pc, #492]	; (8001390 <BasicTimer_Config+0x238>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d106      	bne.n	80011b4 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80011a6:	4b79      	ldr	r3, [pc, #484]	; (800138c <BasicTimer_Config+0x234>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a78      	ldr	r2, [pc, #480]	; (800138c <BasicTimer_Config+0x234>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	e018      	b.n	80011e6 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a76      	ldr	r2, [pc, #472]	; (8001394 <BasicTimer_Config+0x23c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d106      	bne.n	80011cc <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80011be:	4b73      	ldr	r3, [pc, #460]	; (800138c <BasicTimer_Config+0x234>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a72      	ldr	r2, [pc, #456]	; (800138c <BasicTimer_Config+0x234>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	e00c      	b.n	80011e6 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a71      	ldr	r2, [pc, #452]	; (8001398 <BasicTimer_Config+0x240>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d106      	bne.n	80011e4 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <BasicTimer_Config+0x234>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a6c      	ldr	r2, [pc, #432]	; (800138c <BasicTimer_Config+0x234>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	e000      	b.n	80011e6 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 80011e4:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011f4:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6892      	ldr	r2, [r2, #8]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f040 80d3 	bne.w	80013b0 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0210 	bic.w	r2, r2, #16
 8001218:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2ba0      	cmp	r3, #160	; 0xa0
 8001224:	d022      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2bc8      	cmp	r3, #200	; 0xc8
 800122a:	d01f      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001232:	d01b      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800123a:	d017      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001242:	d013      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800124a:	d00f      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001252:	d00b      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800125a:	d007      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001262:	d003      	beq.n	800126c <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800126a:	d10b      	bne.n	8001284 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2264      	movs	r2, #100	; 0x64
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	3a01      	subs	r2, #1
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
 8001282:	e07c      	b.n	800137e <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800128a:	d029      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001292:	d025      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800129a:	4293      	cmp	r3, r2
 800129c:	d020      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012a4:	d01c      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d017      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f241 7270 	movw	r2, #6000	; 0x1770
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d012      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f641 3258 	movw	r2, #7000	; 0x1b58
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80012ca:	d009      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f242 3228 	movw	r2, #9000	; 0x2328
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d004      	beq.n	80012e0 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80012dc:	4293      	cmp	r3, r2
 80012de:	d10c      	bne.n	80012fa <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	3a01      	subs	r2, #1
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f8:	e041      	b.n	800137e <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001300:	d028      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001308:	4293      	cmp	r3, r2
 800130a:	d023      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001312:	4293      	cmp	r3, r2
 8001314:	d01e      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f649 4240 	movw	r2, #40000	; 0x9c40
 800131c:	4293      	cmp	r3, r2
 800131e:	d019      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001326:	4293      	cmp	r3, r2
 8001328:	d014      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001330:	4293      	cmp	r3, r2
 8001332:	d00f      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <BasicTimer_Config+0x244>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00b      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <BasicTimer_Config+0x248>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <BasicTimer_Config+0x24c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d003      	beq.n	8001354 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <BasicTimer_Config+0x250>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d108      	bne.n	8001366 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	3a01      	subs	r2, #1
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
 8001364:	e00b      	b.n	800137e <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <BasicTimer_Config+0x254>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	3a01      	subs	r2, #1
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
 8001386:	e027      	b.n	80013d8 <BasicTimer_Config+0x280>
 8001388:	40010000 	.word	0x40010000
 800138c:	40023800 	.word	0x40023800
 8001390:	40000400 	.word	0x40000400
 8001394:	40000800 	.word	0x40000800
 8001398:	40000c00 	.word	0x40000c00
 800139c:	00011170 	.word	0x00011170
 80013a0:	00013880 	.word	0x00013880
 80013a4:	00015f90 	.word	0x00015f90
 80013a8:	000186a0 	.word	0x000186a0
 80013ac:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0210 	orr.w	r2, r2, #16
 80013be:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3a01      	subs	r2, #1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3a01      	subs	r2, #1
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d103      	bne.n	80013fa <BasicTimer_Config+0x2a2>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80013f2:	201c      	movs	r0, #28
 80013f4:	f7ff fe92 	bl	800111c <__NVIC_EnableIRQ>
 80013f8:	e01b      	b.n	8001432 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <BasicTimer_Config+0x2e8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d103      	bne.n	800140c <BasicTimer_Config+0x2b4>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001404:	201d      	movs	r0, #29
 8001406:	f7ff fe89 	bl	800111c <__NVIC_EnableIRQ>
 800140a:	e012      	b.n	8001432 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <BasicTimer_Config+0x2ec>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d103      	bne.n	800141e <BasicTimer_Config+0x2c6>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001416:	201e      	movs	r0, #30
 8001418:	f7ff fe80 	bl	800111c <__NVIC_EnableIRQ>
 800141c:	e009      	b.n	8001432 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <BasicTimer_Config+0x2f0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d103      	bne.n	8001430 <BasicTimer_Config+0x2d8>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001428:	2032      	movs	r0, #50	; 0x32
 800142a:	f7ff fe77 	bl	800111c <__NVIC_EnableIRQ>
 800142e:	e000      	b.n	8001432 <BasicTimer_Config+0x2da>
	}
	else{
		__NOP();
 8001430:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001432:	b662      	cpsie	i
}
 8001434:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40000400 	.word	0x40000400
 8001444:	40000800 	.word	0x40000800
 8001448:	40000c00 	.word	0x40000c00

0800144c <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001450:	bf00      	nop
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001460:	bf00      	nop
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001470:	bf00      	nop
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001480:	bf00      	nop
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001490:	bf00      	nop
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014a0:	bf00      	nop
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014b0:	bf00      	nop
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014c0:	bf00      	nop
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014d0:	bf00      	nop
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014e0:	bf00      	nop
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014f0:	bf00      	nop
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001500:	bf00      	nop
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001510:	bf00      	nop
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001520:	bf00      	nop
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001530:	bf00      	nop
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001540:	bf00      	nop
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001550:	bf00      	nop
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001560:	bf00      	nop
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8001570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 800157e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 800158e:	f7ff fccd 	bl	8000f2c <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8001592:	e066      	b.n	8001662 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d012      	beq.n	80015c8 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ac:	f023 0302 	bic.w	r3, r3, #2
 80015b0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015c0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80015c2:	f7ff ff5b 	bl	800147c <Capture_TIM2_Ch1_Callback>
}
 80015c6:	e04c      	b.n	8001662 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80015c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d012      	beq.n	80015fc <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80015d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80015e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015f4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80015f6:	f7ff ff49 	bl	800148c <Capture_TIM2_Ch2_Callback>
}
 80015fa:	e032      	b.n	8001662 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 80015fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d012      	beq.n	8001630 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800160a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001614:	f023 0308 	bic.w	r3, r3, #8
 8001618:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800161a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001628:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800162a:	f7ff ff37 	bl	800149c <Capture_TIM2_Ch3_Callback>
}
 800162e:	e018      	b.n	8001662 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8001630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	2b00      	cmp	r3, #0
 800163c:	d011      	beq.n	8001662 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 800163e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001648:	f023 0310 	bic.w	r3, r3, #16
 800164c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800164e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800165c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 800165e:	f7ff ff25 	bl	80014ac <Capture_TIM2_Ch4_Callback>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <TIM3_IRQHandler+0xcc>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8001678:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <TIM3_IRQHandler+0xcc>)
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <TIM3_IRQHandler+0xcc>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8001684:	f7ff fee2 	bl	800144c <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8001688:	e052      	b.n	8001730 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <TIM3_IRQHandler+0xcc>)
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <TIM3_IRQHandler+0xcc>)
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <TIM3_IRQHandler+0xcc>)
 800169c:	f023 0302 	bic.w	r3, r3, #2
 80016a0:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016ac:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80016ae:	f7ff ff05 	bl	80014bc <Capture_TIM3_Ch1_Callback>
}
 80016b2:	e03d      	b.n	8001730 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00e      	beq.n	80016de <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016d6:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80016d8:	f7ff fef8 	bl	80014cc <Capture_TIM3_Ch2_Callback>
}
 80016dc:	e028      	b.n	8001730 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00e      	beq.n	8001708 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016f0:	f023 0308 	bic.w	r3, r3, #8
 80016f4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <TIM3_IRQHandler+0xcc>)
 80016fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001700:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8001702:	f7ff feeb 	bl	80014dc <Capture_TIM3_Ch3_Callback>
}
 8001706:	e013      	b.n	8001730 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <TIM3_IRQHandler+0xcc>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00d      	beq.n	8001730 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <TIM3_IRQHandler+0xcc>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <TIM3_IRQHandler+0xcc>)
 800171a:	f023 0310 	bic.w	r3, r3, #16
 800171e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <TIM3_IRQHandler+0xcc>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a03      	ldr	r2, [pc, #12]	; (8001734 <TIM3_IRQHandler+0xcc>)
 8001726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800172a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 800172c:	f7ff fede 	bl	80014ec <Capture_TIM3_Ch4_Callback>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40000400 	.word	0x40000400

08001738 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <TIM4_IRQHandler+0xcc>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <TIM4_IRQHandler+0xcc>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <TIM4_IRQHandler+0xcc>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8001754:	f7ff fe82 	bl	800145c <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8001758:	e052      	b.n	8001800 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <TIM4_IRQHandler+0xcc>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00e      	beq.n	8001784 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <TIM4_IRQHandler+0xcc>)
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <TIM4_IRQHandler+0xcc>)
 800176c:	f023 0302 	bic.w	r3, r3, #2
 8001770:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <TIM4_IRQHandler+0xcc>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	4a23      	ldr	r2, [pc, #140]	; (8001804 <TIM4_IRQHandler+0xcc>)
 8001778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800177c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 800177e:	f7ff febd 	bl	80014fc <Capture_TIM4_Ch1_Callback>
}
 8001782:	e03d      	b.n	8001800 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <TIM4_IRQHandler+0xcc>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <TIM4_IRQHandler+0xcc>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <TIM4_IRQHandler+0xcc>)
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <TIM4_IRQHandler+0xcc>)
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017a6:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80017a8:	f7ff fec8 	bl	800153c <Capture_TIM5_Ch2_Callback>
}
 80017ac:	e028      	b.n	8001800 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00e      	beq.n	80017d8 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017c0:	f023 0308 	bic.w	r3, r3, #8
 80017c4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017d0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80017d2:	f7ff fe9b 	bl	800150c <Capture_TIM4_Ch3_Callback>
}
 80017d6:	e013      	b.n	8001800 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00d      	beq.n	8001800 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017ea:	f023 0310 	bic.w	r3, r3, #16
 80017ee:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	4a03      	ldr	r2, [pc, #12]	; (8001804 <TIM4_IRQHandler+0xcc>)
 80017f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017fa:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 80017fc:	f7ff fe8e 	bl	800151c <Capture_TIM4_Ch4_Callback>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40000800 	.word	0x40000800

08001808 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8001824:	f7ff fe22 	bl	800146c <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8001828:	e052      	b.n	80018d0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00e      	beq.n	8001854 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800183c:	f023 0302 	bic.w	r3, r3, #2
 8001840:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800184c:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 800184e:	f7ff fe6d 	bl	800152c <Capture_TIM5_Ch1_Callback>
}
 8001852:	e03d      	b.n	80018d0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00e      	beq.n	800187e <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001866:	f023 0304 	bic.w	r3, r3, #4
 800186a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001876:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001878:	f7ff fe60 	bl	800153c <Capture_TIM5_Ch2_Callback>
}
 800187c:	e028      	b.n	80018d0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00e      	beq.n	80018a8 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001890:	f023 0308 	bic.w	r3, r3, #8
 8001894:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 800189c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018a0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80018a2:	f7ff fe53 	bl	800154c <Capture_TIM5_Ch3_Callback>
}
 80018a6:	e013      	b.n	80018d0 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00d      	beq.n	80018d0 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 80018ba:	f023 0310 	bic.w	r3, r3, #16
 80018be:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <TIM5_IRQHandler+0xcc>)
 80018c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ca:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80018cc:	f7ff fe46 	bl	800155c <Capture_TIM5_Ch4_Callback>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40000c00 	.word	0x40000c00

080018d8 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a88      	ldr	r2, [pc, #544]	; (8001b34 <GPIO_Config+0x238>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d106      	bne.n	8001924 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <GPIO_Config+0x23c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a87      	ldr	r2, [pc, #540]	; (8001b38 <GPIO_Config+0x23c>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	e03a      	b.n	800199a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a84      	ldr	r2, [pc, #528]	; (8001b3c <GPIO_Config+0x240>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d106      	bne.n	800193c <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <GPIO_Config+0x23c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a81      	ldr	r2, [pc, #516]	; (8001b38 <GPIO_Config+0x23c>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	e02e      	b.n	800199a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a7f      	ldr	r2, [pc, #508]	; (8001b40 <GPIO_Config+0x244>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d106      	bne.n	8001954 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001946:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <GPIO_Config+0x23c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a7b      	ldr	r2, [pc, #492]	; (8001b38 <GPIO_Config+0x23c>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	e022      	b.n	800199a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <GPIO_Config+0x248>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d106      	bne.n	800196c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800195e:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <GPIO_Config+0x23c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a75      	ldr	r2, [pc, #468]	; (8001b38 <GPIO_Config+0x23c>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	e016      	b.n	800199a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a75      	ldr	r2, [pc, #468]	; (8001b48 <GPIO_Config+0x24c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d106      	bne.n	8001984 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <GPIO_Config+0x23c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a6f      	ldr	r2, [pc, #444]	; (8001b38 <GPIO_Config+0x23c>)
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	e00a      	b.n	800199a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a70      	ldr	r2, [pc, #448]	; (8001b4c <GPIO_Config+0x250>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d105      	bne.n	800199a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <GPIO_Config+0x23c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a69      	ldr	r2, [pc, #420]	; (8001b38 <GPIO_Config+0x23c>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	795b      	ldrb	r3, [r3, #5]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	791b      	ldrb	r3, [r3, #4]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2103      	movs	r1, #3
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7a1b      	ldrb	r3, [r3, #8]
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	791b      	ldrb	r3, [r3, #4]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	4619      	mov	r1, r3
 80019f6:	2301      	movs	r3, #1
 80019f8:	408b      	lsls	r3, r1
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	400a      	ands	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	799b      	ldrb	r3, [r3, #6]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	791b      	ldrb	r3, [r3, #4]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2103      	movs	r1, #3
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6899      	ldr	r1, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	79db      	ldrb	r3, [r3, #7]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	791b      	ldrb	r3, [r3, #4]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2103      	movs	r1, #3
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	400a      	ands	r2, r1
 8001a84:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	795b      	ldrb	r3, [r3, #5]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d143      	bne.n	8001b26 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	2b07      	cmp	r3, #7
 8001aa4:	d81f      	bhi.n	8001ae6 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	791b      	ldrb	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7a5b      	ldrb	r3, [r3, #9]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8001ae4:	e01f      	b.n	8001b26 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	3b08      	subs	r3, #8
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af6:	210f      	movs	r1, #15
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	400a      	ands	r2, r1
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7a5b      	ldrb	r3, [r3, #9]
 8001b14:	4619      	mov	r1, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40021c00 	.word	0x40021c00

08001b50 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d10d      	bne.n	8001b7e <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	791b      	ldrb	r3, [r3, #4]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2301      	movs	r3, #1
 8001b70:	408b      	lsls	r3, r1
 8001b72:	4619      	mov	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8001b7c:	e00d      	b.n	8001b9a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	3310      	adds	r3, #16
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	791b      	ldrb	r3, [r3, #4]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2301      	movs	r3, #1
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	791b      	ldrb	r3, [r3, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	40d3      	lsrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffd8 	bl	8001ba6 <GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffa1 	bl	8001b50 <GPIO_WritePin>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6c      	ldr	r2, [pc, #432]	; (8001dd8 <pwm_Config+0x1c0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d106      	bne.n	8001c38 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001c2a:	4b6c      	ldr	r3, [pc, #432]	; (8001ddc <pwm_Config+0x1c4>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a6b      	ldr	r2, [pc, #428]	; (8001ddc <pwm_Config+0x1c4>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	e030      	b.n	8001c9a <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c40:	d106      	bne.n	8001c50 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001c42:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <pwm_Config+0x1c4>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <pwm_Config+0x1c4>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	e024      	b.n	8001c9a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a62      	ldr	r2, [pc, #392]	; (8001de0 <pwm_Config+0x1c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d106      	bne.n	8001c68 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001c5a:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <pwm_Config+0x1c4>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a5f      	ldr	r2, [pc, #380]	; (8001ddc <pwm_Config+0x1c4>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	e018      	b.n	8001c9a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a5d      	ldr	r2, [pc, #372]	; (8001de4 <pwm_Config+0x1cc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d106      	bne.n	8001c80 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <pwm_Config+0x1c4>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a59      	ldr	r2, [pc, #356]	; (8001ddc <pwm_Config+0x1c4>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	e00c      	b.n	8001c9a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <pwm_Config+0x1d0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d106      	bne.n	8001c98 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <pwm_Config+0x1c4>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a53      	ldr	r2, [pc, #332]	; (8001ddc <pwm_Config+0x1c4>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	e000      	b.n	8001c9a <pwm_Config+0x82>
	}
	else{
		__NOP();
 8001c98:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ca8:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7d5b      	ldrb	r3, [r3, #21]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f930 	bl	8001f18 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fa47 	bl	800214c <setDuttyCycle>
 8001cbe:	e005      	b.n	8001ccc <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f929 	bl	8001f18 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fb18 	bl	80022fc <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0210 	bic.w	r2, r2, #16
 8001cda:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	791b      	ldrb	r3, [r3, #4]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d86f      	bhi.n	8001dcc <pwm_Config+0x1b4>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <pwm_Config+0xdc>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d37 	.word	0x08001d37
 8001cfc:	08001d69 	.word	0x08001d69
 8001d00:	08001d9b 	.word	0x08001d9b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0203 	bic.w	r2, r2, #3
 8001d12:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001d22:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0208 	orr.w	r2, r2, #8
 8001d32:	619a      	str	r2, [r3, #24]


		break;
 8001d34:	e04b      	b.n	8001dce <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d44:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699a      	ldr	r2, [r3, #24]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001d54:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699a      	ldr	r2, [r3, #24]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d64:	619a      	str	r2, [r3, #24]

		break;
 8001d66:	e032      	b.n	8001dce <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0203 	bic.w	r2, r2, #3
 8001d76:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001d86:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0208 	orr.w	r2, r2, #8
 8001d96:	61da      	str	r2, [r3, #28]

		break;
 8001d98:	e019      	b.n	8001dce <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001da8:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001db8:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc8:	61da      	str	r2, [r3, #28]

		break;
 8001dca:	e000      	b.n	8001dce <pwm_Config+0x1b6>
	}

	default:{
		break;
 8001dcc:	bf00      	nop
	}// fin del switch-case




}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	40000c00 	.word	0x40000c00

08001dec <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <enableOutput+0x104>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d13a      	bne.n	8001e98 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	791b      	ldrb	r3, [r3, #4]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d862      	bhi.n	8001f00 <enableOutput+0xf0>
 8001e3a:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <enableOutput+0x30>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001e51 	.word	0x08001e51
 8001e44:	08001e63 	.word	0x08001e63
 8001e48:	08001e75 	.word	0x08001e75
 8001e4c:	08001e87 	.word	0x08001e87
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a1a      	ldr	r2, [r3, #32]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	621a      	str	r2, [r3, #32]

				break;
 8001e60:	e051      	b.n	8001f06 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0210 	orr.w	r2, r2, #16
 8001e70:	621a      	str	r2, [r3, #32]

				break;
 8001e72:	e048      	b.n	8001f06 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a1a      	ldr	r2, [r3, #32]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e82:	621a      	str	r2, [r3, #32]

				break;
 8001e84:	e03f      	b.n	8001f06 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e94:	621a      	str	r2, [r3, #32]

				break;
 8001e96:	e036      	b.n	8001f06 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d831      	bhi.n	8001f04 <enableOutput+0xf4>
 8001ea0:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <enableOutput+0x98>)
 8001ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea6:	bf00      	nop
 8001ea8:	08001eb9 	.word	0x08001eb9
 8001eac:	08001ecb 	.word	0x08001ecb
 8001eb0:	08001edd 	.word	0x08001edd
 8001eb4:	08001eef 	.word	0x08001eef
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	621a      	str	r2, [r3, #32]

				break;
 8001ec8:	e01d      	b.n	8001f06 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0210 	orr.w	r2, r2, #16
 8001ed8:	621a      	str	r2, [r3, #32]

				break;
 8001eda:	e014      	b.n	8001f06 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eea:	621a      	str	r2, [r3, #32]

				break;
 8001eec:	e00b      	b.n	8001f06 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001efc:	621a      	str	r2, [r3, #32]

				break;
 8001efe:	e002      	b.n	8001f06 <enableOutput+0xf6>
				break;
 8001f00:	bf00      	nop
 8001f02:	e000      	b.n	8001f06 <enableOutput+0xf6>
			}

			default: {
				break;
 8001f04:	bf00      	nop
			}

		}
	}
	return SET;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40010000 	.word	0x40010000

08001f18 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6892      	ldr	r2, [r2, #8]
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_10us )
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2ba0      	cmp	r3, #160	; 0xa0
 8001f38:	d022      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_20MHz_10us)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2bc8      	cmp	r3, #200	; 0xc8
 8001f3e:	d01f      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_30MHz_10us)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f46:	d01b      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_40MHz_10us)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f4e:	d017      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_50MHz_10us)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f56:	d013      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_60MHz_10us)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f5e:	d00f      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_70MHz_10us)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001f66:	d00b      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_80MHz_10us)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001f6e:	d007      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_90MHz_10us)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f76:	d003      	beq.n	8001f80 <setFrequency+0x68>
     ||(speed == PWM_SPEED_100MHz_10us)){
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f7e:	d111      	bne.n	8001fa4 <setFrequency+0x8c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	899b      	ldrh	r3, [r3, #12]
 8001f84:	461a      	mov	r2, r3
 8001f86:	0152      	lsls	r2, r2, #5
 8001f88:	1ad2      	subs	r2, r2, r3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b68      	ldr	r3, [pc, #416]	; (8002134 <setFrequency+0x21c>)
 8001f94:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8001f96:	4b67      	ldr	r3, [pc, #412]	; (8002134 <setFrequency+0x21c>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	1e5a      	subs	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa2:	e0c0      	b.n	8002126 <setFrequency+0x20e>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fa8:	d022      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2bc8      	cmp	r3, #200	; 0xc8
 8001fae:	d01f      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fb6:	d01b      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fbe:	d017      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fc6:	d013      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001fce:	d00f      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001fd6:	d00b      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001fde:	d007      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001fe6:	d003      	beq.n	8001ff0 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fee:	d114      	bne.n	800201a <setFrequency+0x102>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	899b      	ldrh	r3, [r3, #12]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	0091      	lsls	r1, r2, #2
 8001ffe:	461a      	mov	r2, r3
 8002000:	460b      	mov	r3, r1
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <setFrequency+0x21c>)
 800200a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <setFrequency+0x21c>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
 8002018:	e085      	b.n	8002126 <setFrequency+0x20e>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002020:	d029      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002028:	d025      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_30MHz_100us)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002030:	4293      	cmp	r3, r2
 8002032:	d020      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800203a:	d01c      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_50MHz_100us)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d017      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_60MHz_100us)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f241 7270 	movw	r2, #6000	; 0x1770
 800204c:	4293      	cmp	r3, r2
 800204e:	d012      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_70MHz_100us)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_80MHz_100us)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002060:	d009      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_90MHz_100us)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f242 3228 	movw	r2, #9000	; 0x2328
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <setFrequency+0x15e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002072:	4293      	cmp	r3, r2
 8002074:	d10f      	bne.n	8002096 <setFrequency+0x17e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	899b      	ldrh	r3, [r3, #12]
 800207a:	461a      	mov	r2, r3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <setFrequency+0x21c>)
 8002086:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <setFrequency+0x21c>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
 8002094:	e047      	b.n	8002126 <setFrequency+0x20e>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800209c:	d028      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d023      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f247 5230 	movw	r2, #30000	; 0x7530
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01e      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d019      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f24c 3250 	movw	r2, #50000	; 0xc350
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d014      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00f      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <setFrequency+0x220>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00b      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4a18      	ldr	r2, [pc, #96]	; (800213c <setFrequency+0x224>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d007      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a17      	ldr	r2, [pc, #92]	; (8002140 <setFrequency+0x228>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a16      	ldr	r2, [pc, #88]	; (8002144 <setFrequency+0x22c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10a      	bne.n	8002106 <setFrequency+0x1ee>

		periodo = ptrPwmHandler->config.periodo;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	899a      	ldrh	r2, [r3, #12]
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <setFrequency+0x21c>)
 80020f6:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <setFrequency+0x21c>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
 8002104:	e00f      	b.n	8002126 <setFrequency+0x20e>

	}else{
		periodo = ptrPwmHandler->config.periodo / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	899b      	ldrh	r3, [r3, #12]
 800210a:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <setFrequency+0x230>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	08db      	lsrs	r3, r3, #3
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <setFrequency+0x21c>)
 8002116:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <setFrequency+0x21c>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200002f2 	.word	0x200002f2
 8002138:	00011170 	.word	0x00011170
 800213c:	00013880 	.word	0x00013880
 8002140:	00015f90 	.word	0x00015f90
 8002144:	000186a0 	.word	0x000186a0
 8002148:	cccccccd 	.word	0xcccccccd

0800214c <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b08b      	sub	sp, #44	; 0x2c
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	2b03      	cmp	r3, #3
 800215a:	f200 80c3 	bhi.w	80022e4 <setDuttyCycle+0x198>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <setDuttyCycle+0x18>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	08002175 	.word	0x08002175
 8002168:	080021d1 	.word	0x080021d1
 800216c:	0800222d 	.word	0x0800222d
 8002170:	08002289 	.word	0x08002289
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	ed93 7a04 	vldr	s14, [r3, #16]
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <setDuttyCycle+0x1a4>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	ee17 0a90 	vmov	r0, s15
 800218e:	f7fe f9e3 	bl	8000558 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <setDuttyCycle+0x1a8>)
 80021a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a4:	f7fe fb5a 	bl	800085c <__aeabi_ddiv>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <setDuttyCycle+0x1ac>)
 80021b6:	f7fe f86f 	bl	8000298 <__aeabi_dsub>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681c      	ldr	r4, [r3, #0]
 80021c6:	f7fe fcf7 	bl	8000bb8 <__aeabi_d2uiz>
 80021ca:	4603      	mov	r3, r0
 80021cc:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80021ce:	e08a      	b.n	80022e6 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80021d6:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <setDuttyCycle+0x1a4>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e6:	ee17 0a90 	vmov	r0, s15
 80021ea:	f7fe f9b5 	bl	8000558 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <setDuttyCycle+0x1a8>)
 80021fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002200:	f7fe fb2c 	bl	800085c <__aeabi_ddiv>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <setDuttyCycle+0x1ac>)
 8002212:	f7fe f841 	bl	8000298 <__aeabi_dsub>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681c      	ldr	r4, [r3, #0]
 8002222:	f7fe fcc9 	bl	8000bb8 <__aeabi_d2uiz>
 8002226:	4603      	mov	r3, r0
 8002228:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800222a:	e05c      	b.n	80022e6 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <setDuttyCycle+0x1a4>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	ee17 0a90 	vmov	r0, s15
 8002246:	f7fe f987 	bl	8000558 <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <setDuttyCycle+0x1a8>)
 8002258:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800225c:	f7fe fafe 	bl	800085c <__aeabi_ddiv>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <setDuttyCycle+0x1ac>)
 800226e:	f7fe f813 	bl	8000298 <__aeabi_dsub>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681c      	ldr	r4, [r3, #0]
 800227e:	f7fe fc9b 	bl	8000bb8 <__aeabi_d2uiz>
 8002282:	4603      	mov	r3, r0
 8002284:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8002286:	e02e      	b.n	80022e6 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	ed93 7a04 	vldr	s14, [r3, #16]
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <setDuttyCycle+0x1a4>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229e:	ee17 0a90 	vmov	r0, s15
 80022a2:	f7fe f959 	bl	8000558 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <setDuttyCycle+0x1a8>)
 80022b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022b8:	f7fe fad0 	bl	800085c <__aeabi_ddiv>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <setDuttyCycle+0x1ac>)
 80022ca:	f7fd ffe5 	bl	8000298 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681c      	ldr	r4, [r3, #0]
 80022da:	f7fe fc6d 	bl	8000bb8 <__aeabi_d2uiz>
 80022de:	4603      	mov	r3, r0
 80022e0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80022e2:	e000      	b.n	80022e6 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 80022e4:	bf00      	nop
	}

	}// fin del switch-case

}
 80022e6:	bf00      	nop
 80022e8:	372c      	adds	r7, #44	; 0x2c
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200002f2 	.word	0x200002f2
 80022f4:	40590000 	.word	0x40590000
 80022f8:	3ff00000 	.word	0x3ff00000

080022fc <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b08b      	sub	sp, #44	; 0x2c
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	2b03      	cmp	r3, #3
 800230a:	f200 80d3 	bhi.w	80024b4 <setDuttyCycleAfOpt+0x1b8>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <setDuttyCycleAfOpt+0x18>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	08002389 	.word	0x08002389
 800231c:	080023ed 	.word	0x080023ed
 8002320:	08002451 	.word	0x08002451
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	edd3 7a04 	vldr	s15, [r3, #16]
 800232a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80024c0 <setDuttyCycleAfOpt+0x1c4>
 800232e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002332:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <setDuttyCycleAfOpt+0x1c8>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002342:	ee17 0a90 	vmov	r0, s15
 8002346:	f7fe f907 	bl	8000558 <__aeabi_f2d>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	4b5c      	ldr	r3, [pc, #368]	; (80024c8 <setDuttyCycleAfOpt+0x1cc>)
 8002358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800235c:	f7fe fa7e 	bl	800085c <__aeabi_ddiv>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	4b57      	ldr	r3, [pc, #348]	; (80024cc <setDuttyCycleAfOpt+0x1d0>)
 800236e:	f7fd ff93 	bl	8000298 <__aeabi_dsub>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681c      	ldr	r4, [r3, #0]
 800237e:	f7fe fc1b 	bl	8000bb8 <__aeabi_d2uiz>
 8002382:	4603      	mov	r3, r0
 8002384:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8002386:	e096      	b.n	80024b6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	edd3 7a04 	vldr	s15, [r3, #16]
 800238e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80024c0 <setDuttyCycleAfOpt+0x1c4>
 8002392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002396:	4b4b      	ldr	r3, [pc, #300]	; (80024c4 <setDuttyCycleAfOpt+0x1c8>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a6:	ee17 0a90 	vmov	r0, s15
 80023aa:	f7fe f8d5 	bl	8000558 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <setDuttyCycleAfOpt+0x1cc>)
 80023bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c0:	f7fe fa4c 	bl	800085c <__aeabi_ddiv>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <setDuttyCycleAfOpt+0x1d0>)
 80023d2:	f7fd ff61 	bl	8000298 <__aeabi_dsub>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681c      	ldr	r4, [r3, #0]
 80023e2:	f7fe fbe9 	bl	8000bb8 <__aeabi_d2uiz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80023ea:	e064      	b.n	80024b6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80023f2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80024c0 <setDuttyCycleAfOpt+0x1c4>
 80023f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023fa:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <setDuttyCycleAfOpt+0x1c8>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	ee17 0a90 	vmov	r0, s15
 800240e:	f7fe f8a3 	bl	8000558 <__aeabi_f2d>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <setDuttyCycleAfOpt+0x1cc>)
 8002420:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002424:	f7fe fa1a 	bl	800085c <__aeabi_ddiv>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <setDuttyCycleAfOpt+0x1d0>)
 8002436:	f7fd ff2f 	bl	8000298 <__aeabi_dsub>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681c      	ldr	r4, [r3, #0]
 8002446:	f7fe fbb7 	bl	8000bb8 <__aeabi_d2uiz>
 800244a:	4603      	mov	r3, r0
 800244c:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800244e:	e032      	b.n	80024b6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	edd3 7a04 	vldr	s15, [r3, #16]
 8002456:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80024c0 <setDuttyCycleAfOpt+0x1c4>
 800245a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <setDuttyCycleAfOpt+0x1c8>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	ee17 0a90 	vmov	r0, s15
 8002472:	f7fe f871 	bl	8000558 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <setDuttyCycleAfOpt+0x1cc>)
 8002484:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002488:	f7fe f9e8 	bl	800085c <__aeabi_ddiv>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <setDuttyCycleAfOpt+0x1d0>)
 800249a:	f7fd fefd 	bl	8000298 <__aeabi_dsub>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681c      	ldr	r4, [r3, #0]
 80024aa:	f7fe fb85 	bl	8000bb8 <__aeabi_d2uiz>
 80024ae:	4603      	mov	r3, r0
 80024b0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80024b2:	e000      	b.n	80024b6 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 80024b4:	bf00      	nop
	}

	}// fin del switch-case


}
 80024b6:	bf00      	nop
 80024b8:	372c      	adds	r7, #44	; 0x2c
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	42c80000 	.word	0x42c80000
 80024c4:	200002f2 	.word	0x200002f2
 80024c8:	40590000 	.word	0x40590000
 80024cc:	3ff00000 	.word	0x3ff00000

080024d0 <updateDuttyCycle>:

}


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, float newDutty){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	ed87 0a00 	vstr	s0, [r7]
	// Actualizamos el registro que manipula el dutty
    ptrPwmHandler->config.duttyCicle = newDutty;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	611a      	str	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fe32 	bl	800214c <setDuttyCycle>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 80024fa:	4b92      	ldr	r3, [pc, #584]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a91      	ldr	r2, [pc, #580]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002504:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002506:	4b8f      	ldr	r3, [pc, #572]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800250e:	4b8e      	ldr	r3, [pc, #568]	; (8002748 <RCC_enableMaxFrequencies+0x258>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a8d      	ldr	r2, [pc, #564]	; (8002748 <RCC_enableMaxFrequencies+0x258>)
 8002514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002518:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800251a:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a89      	ldr	r2, [pc, #548]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002520:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002524:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b08      	cmp	r3, #8
 800252a:	f200 82fc 	bhi.w	8002b26 <RCC_enableMaxFrequencies+0x636>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <RCC_enableMaxFrequencies+0x44>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002559 	.word	0x08002559
 8002538:	080025fb 	.word	0x080025fb
 800253c:	0800269d 	.word	0x0800269d
 8002540:	08002751 	.word	0x08002751
 8002544:	080027f3 	.word	0x080027f3
 8002548:	08002895 	.word	0x08002895
 800254c:	08002941 	.word	0x08002941
 8002550:	080029e3 	.word	0x080029e3
 8002554:	08002a85 	.word	0x08002a85
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002558:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a79      	ldr	r2, [pc, #484]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800255e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002562:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002564:	4b77      	ldr	r3, [pc, #476]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a76      	ldr	r2, [pc, #472]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002570:	4b74      	ldr	r3, [pc, #464]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a73      	ldr	r2, [pc, #460]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002576:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800257a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800257e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8002580:	4b70      	ldr	r3, [pc, #448]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a6f      	ldr	r2, [pc, #444]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002586:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800258a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800258c:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a6c      	ldr	r2, [pc, #432]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002592:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002596:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a69      	ldr	r2, [pc, #420]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80025a4:	4b67      	ldr	r3, [pc, #412]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a66      	ldr	r2, [pc, #408]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ae:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80025b0:	4b64      	ldr	r3, [pc, #400]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a63      	ldr	r2, [pc, #396]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025ba:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80025bc:	4b61      	ldr	r3, [pc, #388]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a60      	ldr	r2, [pc, #384]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80025d4:	e000      	b.n	80025d8 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80025d6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80025d8:	4b5a      	ldr	r3, [pc, #360]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f8      	beq.n	80025d6 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a58      	ldr	r2, [pc, #352]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 80025ea:	f023 030f 	bic.w	r3, r3, #15
 80025ee:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80025f0:	4b56      	ldr	r3, [pc, #344]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 80025f2:	4a56      	ldr	r2, [pc, #344]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6013      	str	r3, [r2, #0]

			break;
 80025f8:	e296      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80025fa:	4b52      	ldr	r3, [pc, #328]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a51      	ldr	r2, [pc, #324]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002600:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002604:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002606:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800260c:	f043 0310 	orr.w	r3, r3, #16
 8002610:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002612:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a4b      	ldr	r2, [pc, #300]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002618:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800261c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002620:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8002622:	4b48      	ldr	r3, [pc, #288]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a47      	ldr	r2, [pc, #284]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002628:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800262c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800262e:	4b45      	ldr	r3, [pc, #276]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4a44      	ldr	r2, [pc, #272]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002634:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002638:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a41      	ldr	r2, [pc, #260]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4a3e      	ldr	r2, [pc, #248]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800264c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002650:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002658:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800265c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a38      	ldr	r2, [pc, #224]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002668:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a35      	ldr	r2, [pc, #212]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002674:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002676:	e000      	b.n	800267a <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8002678:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f8      	beq.n	8002678 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a30      	ldr	r2, [pc, #192]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 800268c:	f023 030f 	bic.w	r3, r3, #15
 8002690:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 8002694:	4a2d      	ldr	r2, [pc, #180]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6013      	str	r3, [r2, #0]

			break;
 800269a:	e245      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a28      	ldr	r2, [pc, #160]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a25      	ldr	r2, [pc, #148]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80026be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026ca:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80026ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a18      	ldr	r2, [pc, #96]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026f2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a12      	ldr	r2, [pc, #72]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 80026fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026fe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800270a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002718:	e000      	b.n	800271c <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800271a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <RCC_enableMaxFrequencies+0x254>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f8      	beq.n	800271a <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 800272e:	f023 030f 	bic.w	r3, r3, #15
 8002732:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <RCC_enableMaxFrequencies+0x25c>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6013      	str	r3, [r2, #0]


			break;
 8002740:	e1f2      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002750:	4b79      	ldr	r3, [pc, #484]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a78      	ldr	r2, [pc, #480]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800275a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a75      	ldr	r2, [pc, #468]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002768:	4b73      	ldr	r3, [pc, #460]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a72      	ldr	r2, [pc, #456]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800276e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002776:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800277e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8002782:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002784:	4b6c      	ldr	r3, [pc, #432]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a6b      	ldr	r2, [pc, #428]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800278a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800278e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002790:	4b69      	ldr	r3, [pc, #420]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002792:	4a69      	ldr	r2, [pc, #420]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002798:	4b67      	ldr	r3, [pc, #412]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a66      	ldr	r2, [pc, #408]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800279e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a63      	ldr	r2, [pc, #396]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027ae:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a60      	ldr	r2, [pc, #384]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027ba:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80027c8:	e000      	b.n	80027cc <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 80027ca:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80027cc:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f8      	beq.n	80027ca <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80027d8:	4b58      	ldr	r3, [pc, #352]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a57      	ldr	r2, [pc, #348]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 80027de:	f023 030f 	bic.w	r3, r3, #15
 80027e2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80027e4:	4b55      	ldr	r3, [pc, #340]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a54      	ldr	r2, [pc, #336]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6013      	str	r3, [r2, #0]

			break;
 80027f0:	e19a      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80027f2:	4b51      	ldr	r3, [pc, #324]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4a50      	ldr	r2, [pc, #320]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80027f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027fc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80027fe:	4b4e      	ldr	r3, [pc, #312]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a4d      	ldr	r2, [pc, #308]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800280a:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002810:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002818:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a46      	ldr	r2, [pc, #280]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002820:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8002824:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002826:	4b44      	ldr	r3, [pc, #272]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4a43      	ldr	r2, [pc, #268]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800282c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002830:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002834:	4a40      	ldr	r2, [pc, #256]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800283a:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	4a3e      	ldr	r2, [pc, #248]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002844:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800284c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002850:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4a38      	ldr	r2, [pc, #224]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a35      	ldr	r2, [pc, #212]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002868:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800286a:	e000      	b.n	800286e <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 800286c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f8      	beq.n	800286c <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2f      	ldr	r2, [pc, #188]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 8002880:	f023 030f 	bic.w	r3, r3, #15
 8002884:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6013      	str	r3, [r2, #0]

			break;
 8002892:	e149      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002894:	4b28      	ldr	r3, [pc, #160]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a27      	ldr	r2, [pc, #156]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 800289a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800289e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a24      	ldr	r2, [pc, #144]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028a6:	f043 0310 	orr.w	r3, r3, #16
 80028aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028c2:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80028c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028d6:	4a18      	ldr	r2, [pc, #96]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028f2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 80028fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028fe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800290c:	e000      	b.n	8002910 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800290e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <RCC_enableMaxFrequencies+0x448>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f8      	beq.n	800290e <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a06      	ldr	r2, [pc, #24]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 8002922:	f023 030f 	bic.w	r3, r3, #15
 8002926:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <RCC_enableMaxFrequencies+0x44c>)
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	6013      	str	r3, [r2, #0]

			break;
 8002934:	e0f8      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002940:	4b83      	ldr	r3, [pc, #524]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a82      	ldr	r2, [pc, #520]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800294c:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a7f      	ldr	r2, [pc, #508]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002952:	f043 0310 	orr.w	r3, r3, #16
 8002956:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002958:	4b7d      	ldr	r3, [pc, #500]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a7c      	ldr	r2, [pc, #496]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800295e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002966:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8002968:	4b79      	ldr	r3, [pc, #484]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a78      	ldr	r2, [pc, #480]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800296e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002972:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002974:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800297a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800297e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002980:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002982:	4a73      	ldr	r2, [pc, #460]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002988:	4b71      	ldr	r3, [pc, #452]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a70      	ldr	r2, [pc, #448]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002992:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002994:	4b6e      	ldr	r3, [pc, #440]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a6d      	ldr	r2, [pc, #436]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 800299a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800299e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80029a0:	4b6b      	ldr	r3, [pc, #428]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a6a      	ldr	r2, [pc, #424]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029aa:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80029b8:	e000      	b.n	80029bc <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 80029ba:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80029bc:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f8      	beq.n	80029ba <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80029c8:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a61      	ldr	r2, [pc, #388]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 80029ce:	f023 030f 	bic.w	r3, r3, #15
 80029d2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80029d4:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5e      	ldr	r2, [pc, #376]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	6013      	str	r3, [r2, #0]

			break;
 80029e0:	e0a2      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a5a      	ldr	r2, [pc, #360]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80029ee:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a57      	ldr	r2, [pc, #348]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029f4:	f043 0310 	orr.w	r3, r3, #16
 80029f8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80029fa:	4b55      	ldr	r3, [pc, #340]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a00:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a08:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a10:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8002a14:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a1c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a20:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002a22:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a24:	4a4a      	ldr	r2, [pc, #296]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a34:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4a45      	ldr	r2, [pc, #276]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a40:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4a42      	ldr	r2, [pc, #264]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a4c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002a4e:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3f      	ldr	r2, [pc, #252]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a58:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002a5a:	e000      	b.n	8002a5e <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8002a5c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f8      	beq.n	8002a5c <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a39      	ldr	r2, [pc, #228]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002a70:	f023 030f 	bic.w	r3, r3, #15
 8002a74:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6013      	str	r3, [r2, #0]

			break;
 8002a82:	e051      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002a84:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a2e      	ldr	r2, [pc, #184]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a96:	f043 0308 	orr.w	r3, r3, #8
 8002a9a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002aa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aaa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ab2:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8002ab6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002abe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ac2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ac6:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ade:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ae2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002aea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aee:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002afc:	e000      	b.n	8002b00 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8002afe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f8      	beq.n	8002afe <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002b12:	f023 030f 	bic.w	r3, r3, #15
 8002b16:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <RCC_enableMaxFrequencies+0x664>)
 8002b1e:	f043 0303 	orr.w	r3, r3, #3
 8002b22:	6013      	str	r3, [r2, #0]

			break;
 8002b24:	e000      	b.n	8002b28 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8002b26:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8002b34:	e000      	b.n	8002b38 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8002b36:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <RCC_enableMaxFrequencies+0x660>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f8      	beq.n	8002b36 <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8002b44:	f000 fd82 	bl	800364c <SystemCoreClockUpdate>

}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40023c00 	.word	0x40023c00

08002b58 <show_MaxFreq>:


void show_MaxFreq (uint8_t outputType ,uint8_t div){
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460a      	mov	r2, r1
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71bb      	strb	r3, [r7, #6]

	// Vemos si se quiere sacar el valor por el MCO1 o el MCO2

	if (outputType  == MCO1){
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d153      	bne.n	8002c16 <show_MaxFreq+0xbe>

		//Configuramos la salida MCO2 para verificar el estado real del MCU y su velocidad
		switch (div) {
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d847      	bhi.n	8002c06 <show_MaxFreq+0xae>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <show_MaxFreq+0x24>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002b91 	.word	0x08002b91
 8002b80:	08002b9f 	.word	0x08002b9f
 8002b84:	08002bb9 	.word	0x08002bb9
 8002b88:	08002bd3 	.word	0x08002bd3
 8002b8c:	08002bed 	.word	0x08002bed
			case 1:{
				// No dividimos el clock
				RCC->CFGR &= ~(0b100 << 24);
 8002b90:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <show_MaxFreq+0x170>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <show_MaxFreq+0x170>)
 8002b96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b9a:	6093      	str	r3, [r2, #8]
				break;
 8002b9c:	e034      	b.n	8002c08 <show_MaxFreq+0xb0>
			}case 2:{
				// dividimos el clock a la mitad
				RCC->CFGR &= ~(0b111  << 24);
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <show_MaxFreq+0x170>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <show_MaxFreq+0x170>)
 8002ba4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ba8:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b100  << 24);
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bb4:	6093      	str	r3, [r2, #8]

				break;
 8002bb6:	e027      	b.n	8002c08 <show_MaxFreq+0xb0>
			}case 3:{
				// dividimos el clock 3 veces
				RCC->CFGR &= ~(0b111  << 24);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a42      	ldr	r2, [pc, #264]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bc2:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b101  << 24);
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a3f      	ldr	r2, [pc, #252]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bca:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002bce:	6093      	str	r3, [r2, #8]
				break;
 8002bd0:	e01a      	b.n	8002c08 <show_MaxFreq+0xb0>
			}case 4:{
				// Dividimos el Clock 4 veces
				RCC->CFGR &= ~(0b111  << 24);
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bd8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bdc:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b110  << 24);
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <show_MaxFreq+0x170>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4a39      	ldr	r2, [pc, #228]	; (8002cc8 <show_MaxFreq+0x170>)
 8002be4:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8002be8:	6093      	str	r3, [r2, #8]
				break;
 8002bea:	e00d      	b.n	8002c08 <show_MaxFreq+0xb0>
			}case 5:{
				// Divimos el clock 5 veces
				RCC->CFGR &= ~(0b111  << 24);
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a35      	ldr	r2, [pc, #212]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bf6:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b111  << 24);
 8002bf8:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <show_MaxFreq+0x170>)
 8002bfe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c02:	6093      	str	r3, [r2, #8]
				break;
 8002c04:	e000      	b.n	8002c08 <show_MaxFreq+0xb0>
			}
			default:{
				break;
 8002c06:	bf00      	nop
			}
		}
		// habilitamos la salida del MCO1 para el PLL clock
		RCC->CFGR |= (0b11 << 21);
 8002c08:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c0e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8002c12:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (0b11 << 30);
	//	RCC->CFGR |= RCC_CFGR_MCO2;

	}

}
 8002c14:	e052      	b.n	8002cbc <show_MaxFreq+0x164>
		switch (div) {
 8002c16:	79bb      	ldrb	r3, [r7, #6]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d847      	bhi.n	8002cae <show_MaxFreq+0x156>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <show_MaxFreq+0xcc>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c39 	.word	0x08002c39
 8002c28:	08002c47 	.word	0x08002c47
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08002c7b 	.word	0x08002c7b
 8002c34:	08002c95 	.word	0x08002c95
				RCC->CFGR &= ~(0b100 << 27);
 8002c38:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002c42:	6093      	str	r3, [r2, #8]
				break;
 8002c44:	e034      	b.n	8002cb0 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c4c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8002c50:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b100  << 27);
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c5c:	6093      	str	r3, [r2, #8]
				break;
 8002c5e:	e027      	b.n	8002cb0 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c66:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8002c6a:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b101  << 27);
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c72:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8002c76:	6093      	str	r3, [r2, #8]
				break;
 8002c78:	e01a      	b.n	8002cb0 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c80:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8002c84:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b110  << 27);
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4a0f      	ldr	r2, [pc, #60]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c8c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8002c90:	6093      	str	r3, [r2, #8]
				break;
 8002c92:	e00d      	b.n	8002cb0 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <show_MaxFreq+0x170>)
 8002c9a:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8002c9e:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b111  << 27);
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <show_MaxFreq+0x170>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <show_MaxFreq+0x170>)
 8002ca6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002caa:	6093      	str	r3, [r2, #8]
				break;
 8002cac:	e000      	b.n	8002cb0 <show_MaxFreq+0x158>
				break;
 8002cae:	bf00      	nop
		RCC->CFGR |= (0b11 << 30);
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <show_MaxFreq+0x170>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <show_MaxFreq+0x170>)
 8002cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cba:	6093      	str	r3, [r2, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40023800 	.word	0x40023800

08002ccc <__NVIC_EnableIRQ>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	; (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d10:	b672      	cpsid	i
}
 8002d12:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8f      	ldr	r2, [pc, #572]	; (8002f58 <USART_Config+0x250>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d106      	bne.n	8002d2c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002d1e:	4b8f      	ldr	r3, [pc, #572]	; (8002f5c <USART_Config+0x254>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a8e      	ldr	r2, [pc, #568]	; (8002f5c <USART_Config+0x254>)
 8002d24:	f043 0310 	orr.w	r3, r3, #16
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	e018      	b.n	8002d5e <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a8b      	ldr	r2, [pc, #556]	; (8002f60 <USART_Config+0x258>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d106      	bne.n	8002d44 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002d36:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <USART_Config+0x254>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a88      	ldr	r2, [pc, #544]	; (8002f5c <USART_Config+0x254>)
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	e00c      	b.n	8002d5e <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a86      	ldr	r2, [pc, #536]	; (8002f64 <USART_Config+0x25c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d106      	bne.n	8002d5c <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002d4e:	4b83      	ldr	r3, [pc, #524]	; (8002f5c <USART_Config+0x254>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a82      	ldr	r2, [pc, #520]	; (8002f5c <USART_Config+0x254>)
 8002d54:	f043 0320 	orr.w	r3, r3, #32
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	e000      	b.n	8002d5e <USART_Config+0x56>
	}
	else{
		__NOP();
 8002d5c:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7a5b      	ldrb	r3, [r3, #9]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d025      	beq.n	8002dc2 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7a5b      	ldrb	r3, [r3, #9]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d110      	bne.n	8002da0 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d8c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	e018      	b.n	8002dd2 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dae:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dbe:	60da      	str	r2, [r3, #12]
 8002dc0:	e007      	b.n	8002dd2 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd0:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7a1b      	ldrb	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e007      	b.n	8002dfc <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dfa:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7a9b      	ldrb	r3, [r3, #10]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d82f      	bhi.n	8002e64 <USART_Config+0x15c>
 8002e04:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <USART_Config+0x104>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e2f 	.word	0x08002e2f
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08002e53 	.word	0x08002e53
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e2a:	611a      	str	r2, [r3, #16]
			break;
 8002e2c:	e023      	b.n	8002e76 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e3c:	611a      	str	r2, [r3, #16]
			break;
 8002e3e:	e01a      	b.n	8002e76 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e4e:	611a      	str	r2, [r3, #16]
			break;
 8002e50:	e011      	b.n	8002e76 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002e60:	611a      	str	r2, [r3, #16]
			break;
 8002e62:	e008      	b.n	8002e76 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e72:	611a      	str	r2, [r3, #16]
			break;
 8002e74:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681c      	ldr	r4, [r3, #0]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f8cd 	bl	8003020 <brrCalculus>
 8002e86:	4603      	mov	r3, r0
 8002e88:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	799b      	ldrb	r3, [r3, #6]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d82e      	bhi.n	8002ef0 <USART_Config+0x1e8>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <USART_Config+0x190>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002ebb 	.word	0x08002ebb
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08002edf 	.word	0x08002edf
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	60da      	str	r2, [r3, #12]
			break;
 8002eb8:	e023      	b.n	8002f02 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0204 	orr.w	r2, r2, #4
 8002ec8:	60da      	str	r2, [r3, #12]
			break;
 8002eca:	e01a      	b.n	8002f02 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 020c 	orr.w	r2, r2, #12
 8002eda:	60da      	str	r2, [r3, #12]
			break;
 8002edc:	e011      	b.n	8002f02 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 020c 	bic.w	r2, r2, #12
 8002eec:	60da      	str	r2, [r3, #12]
			break;
 8002eee:	e008      	b.n	8002f02 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020c 	bic.w	r2, r2, #12
 8002efe:	60da      	str	r2, [r3, #12]
			break;
 8002f00:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	799b      	ldrb	r3, [r3, #6]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d008      	beq.n	8002f1c <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	e007      	b.n	8002f2c <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	795b      	ldrb	r3, [r3, #5]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d12d      	bne.n	8002f90 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0220 	orr.w	r2, r2, #32
 8002f42:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a03      	ldr	r2, [pc, #12]	; (8002f58 <USART_Config+0x250>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10c      	bne.n	8002f68 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8002f4e:	2025      	movs	r0, #37	; 0x25
 8002f50:	f7ff febc 	bl	8002ccc <__NVIC_EnableIRQ>
 8002f54:	e024      	b.n	8002fa0 <USART_Config+0x298>
 8002f56:	bf00      	nop
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40004400 	.word	0x40004400
 8002f64:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a28      	ldr	r2, [pc, #160]	; (8003010 <USART_Config+0x308>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d103      	bne.n	8002f7a <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8002f72:	2026      	movs	r0, #38	; 0x26
 8002f74:	f7ff feaa 	bl	8002ccc <__NVIC_EnableIRQ>
 8002f78:	e012      	b.n	8002fa0 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <USART_Config+0x30c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8002f84:	2047      	movs	r0, #71	; 0x47
 8002f86:	f7ff fea1 	bl	8002ccc <__NVIC_EnableIRQ>
 8002f8a:	e009      	b.n	8002fa0 <USART_Config+0x298>
		}
		else{
				__NOP();
 8002f8c:	bf00      	nop
 8002f8e:	e007      	b.n	8002fa0 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0220 	bic.w	r2, r2, #32
 8002f9e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	791b      	ldrb	r3, [r3, #4]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d124      	bne.n	8002ff2 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fb6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a16      	ldr	r2, [pc, #88]	; (8003018 <USART_Config+0x310>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d103      	bne.n	8002fca <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8002fc2:	2025      	movs	r0, #37	; 0x25
 8002fc4:	f7ff fe82 	bl	8002ccc <__NVIC_EnableIRQ>
 8002fc8:	e01b      	b.n	8003002 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <USART_Config+0x308>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8002fd4:	2026      	movs	r0, #38	; 0x26
 8002fd6:	f7ff fe79 	bl	8002ccc <__NVIC_EnableIRQ>
 8002fda:	e012      	b.n	8003002 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <USART_Config+0x30c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d103      	bne.n	8002fee <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8002fe6:	2047      	movs	r0, #71	; 0x47
 8002fe8:	f7ff fe70 	bl	8002ccc <__NVIC_EnableIRQ>
 8002fec:	e009      	b.n	8003002 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8002fee:	bf00      	nop
 8002ff0:	e007      	b.n	8003002 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003000:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003002:	b662      	cpsie	i
}
 8003004:	bf00      	nop
	}

	__enable_irq();
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop
 8003010:	40004400 	.word	0x40004400
 8003014:	40011400 	.word	0x40011400
 8003018:	40011000 	.word	0x40011000
 800301c:	00000000 	.word	0x00000000

08003020 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8003020:	b5b0      	push	{r4, r5, r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	79db      	ldrb	r3, [r3, #7]
 800302e:	2b03      	cmp	r3, #3
 8003030:	f200 8217 	bhi.w	8003462 <brrCalculus+0x442>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <brrCalculus+0x1c>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003147 	.word	0x08003147
 8003044:	08003261 	.word	0x08003261
 8003048:	08003369 	.word	0x08003369

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800304c:	4980      	ldr	r1, [pc, #512]	; (8003250 <brrCalculus+0x230>)
 800304e:	a37c      	add	r3, pc, #496	; (adr r3, 8003240 <brrCalculus+0x220>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	ee17 0a90 	vmov	r0, s15
 8003066:	f7fd fa77 	bl	8000558 <__aeabi_f2d>
 800306a:	4b79      	ldr	r3, [pc, #484]	; (8003250 <brrCalculus+0x230>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f7fd faca 	bl	8000608 <__aeabi_dmul>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4975      	ldr	r1, [pc, #468]	; (8003250 <brrCalculus+0x230>)
 800307a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800307e:	4b74      	ldr	r3, [pc, #464]	; (8003250 <brrCalculus+0x230>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fd6e 	bl	8000b68 <__aeabi_d2iz>
 800308c:	4603      	mov	r3, r0
 800308e:	b29a      	uxth	r2, r3
 8003090:	4b70      	ldr	r3, [pc, #448]	; (8003254 <brrCalculus+0x234>)
 8003092:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8003094:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <brrCalculus+0x230>)
 8003096:	e9d3 4500 	ldrd	r4, r5, [r3]
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <brrCalculus+0x230>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd60 	bl	8000b68 <__aeabi_d2iz>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fa42 	bl	8000534 <__aeabi_i2d>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4620      	mov	r0, r4
 80030b6:	4629      	mov	r1, r5
 80030b8:	f7fd f8ee 	bl	8000298 <__aeabi_dsub>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7fd fd98 	bl	8000bf8 <__aeabi_d2f>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a63      	ldr	r2, [pc, #396]	; (8003258 <brrCalculus+0x238>)
 80030cc:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80030ce:	4b62      	ldr	r3, [pc, #392]	; (8003258 <brrCalculus+0x238>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	2004      	movs	r0, #4
 80030d6:	eeb0 0a67 	vmov.f32	s0, s15
 80030da:	f000 fa55 	bl	8003588 <roundToNDecimals>
 80030de:	eef0 7a40 	vmov.f32	s15, s0
 80030e2:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <brrCalculus+0x238>)
 80030e4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80030e8:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <brrCalculus+0x238>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <brrCalculus+0x238>)
 80030f8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80030fc:	4b56      	ldr	r3, [pc, #344]	; (8003258 <brrCalculus+0x238>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fa29 	bl	8000558 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	ec43 2b10 	vmov	d0, r2, r3
 800310e:	f003 f867 	bl	80061e0 <round>
 8003112:	ec53 2b10 	vmov	r2, r3, d0
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fd6d 	bl	8000bf8 <__aeabi_d2f>
 800311e:	4603      	mov	r3, r0
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <brrCalculus+0x238>)
 8003122:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8003124:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <brrCalculus+0x234>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <brrCalculus+0x238>)
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003136:	ee17 3a90 	vmov	r3, s15
 800313a:	b29b      	uxth	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b46      	ldr	r3, [pc, #280]	; (800325c <brrCalculus+0x23c>)
 8003142:	801a      	strh	r2, [r3, #0]


		break;
 8003144:	e18f      	b.n	8003466 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8003146:	4942      	ldr	r1, [pc, #264]	; (8003250 <brrCalculus+0x230>)
 8003148:	a33f      	add	r3, pc, #252	; (adr r3, 8003248 <brrCalculus+0x228>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315c:	ee17 0a90 	vmov	r0, s15
 8003160:	f7fd f9fa 	bl	8000558 <__aeabi_f2d>
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <brrCalculus+0x230>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fa4d 	bl	8000608 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4937      	ldr	r1, [pc, #220]	; (8003250 <brrCalculus+0x230>)
 8003174:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <brrCalculus+0x230>)
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f7fd fcf1 	bl	8000b68 <__aeabi_d2iz>
 8003186:	4603      	mov	r3, r0
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b32      	ldr	r3, [pc, #200]	; (8003254 <brrCalculus+0x234>)
 800318c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <brrCalculus+0x230>)
 8003190:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003194:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <brrCalculus+0x230>)
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fce3 	bl	8000b68 <__aeabi_d2iz>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f9c5 	bl	8000534 <__aeabi_i2d>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fd f871 	bl	8000298 <__aeabi_dsub>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f7fd fd1b 	bl	8000bf8 <__aeabi_d2f>
 80031c2:	4603      	mov	r3, r0
 80031c4:	4a24      	ldr	r2, [pc, #144]	; (8003258 <brrCalculus+0x238>)
 80031c6:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <brrCalculus+0x238>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	2004      	movs	r0, #4
 80031d0:	eeb0 0a67 	vmov.f32	s0, s15
 80031d4:	f000 f9d8 	bl	8003588 <roundToNDecimals>
 80031d8:	eef0 7a40 	vmov.f32	s15, s0
 80031dc:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <brrCalculus+0x238>)
 80031de:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <brrCalculus+0x238>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <brrCalculus+0x238>)
 80031f2:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <brrCalculus+0x238>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f9ac 	bl	8000558 <__aeabi_f2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	ec43 2b10 	vmov	d0, r2, r3
 8003208:	f002 ffea 	bl	80061e0 <round>
 800320c:	ec53 2b10 	vmov	r2, r3, d0
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fcf0 	bl	8000bf8 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <brrCalculus+0x238>)
 800321c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <brrCalculus+0x234>)
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	b29a      	uxth	r2, r3
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <brrCalculus+0x238>)
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003230:	ee17 3a90 	vmov	r3, s15
 8003234:	b29b      	uxth	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b29a      	uxth	r2, r3
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <brrCalculus+0x23c>)
 800323c:	801a      	strh	r2, [r3, #0]


		break;
 800323e:	e112      	b.n	8003466 <brrCalculus+0x446>
 8003240:	b4e81b4f 	.word	0xb4e81b4f
 8003244:	3edb4e81 	.word	0x3edb4e81
 8003248:	b4e81b4f 	.word	0xb4e81b4f
 800324c:	3ecb4e81 	.word	0x3ecb4e81
 8003250:	20000300 	.word	0x20000300
 8003254:	200002f6 	.word	0x200002f6
 8003258:	200002f8 	.word	0x200002f8
 800325c:	200002f4 	.word	0x200002f4
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8003260:	4989      	ldr	r1, [pc, #548]	; (8003488 <brrCalculus+0x468>)
 8003262:	a385      	add	r3, pc, #532	; (adr r3, 8003478 <brrCalculus+0x458>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	ee17 0a90 	vmov	r0, s15
 800327a:	f7fd f96d 	bl	8000558 <__aeabi_f2d>
 800327e:	4b82      	ldr	r3, [pc, #520]	; (8003488 <brrCalculus+0x468>)
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f7fd f9c0 	bl	8000608 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	497e      	ldr	r1, [pc, #504]	; (8003488 <brrCalculus+0x468>)
 800328e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8003292:	4b7d      	ldr	r3, [pc, #500]	; (8003488 <brrCalculus+0x468>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	f7fd fc64 	bl	8000b68 <__aeabi_d2iz>
 80032a0:	4603      	mov	r3, r0
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	4b79      	ldr	r3, [pc, #484]	; (800348c <brrCalculus+0x46c>)
 80032a6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80032a8:	4b77      	ldr	r3, [pc, #476]	; (8003488 <brrCalculus+0x468>)
 80032aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80032ae:	4b76      	ldr	r3, [pc, #472]	; (8003488 <brrCalculus+0x468>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f7fd fc56 	bl	8000b68 <__aeabi_d2iz>
 80032bc:	4603      	mov	r3, r0
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f938 	bl	8000534 <__aeabi_i2d>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f7fc ffe4 	bl	8000298 <__aeabi_dsub>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	f7fd fc8e 	bl	8000bf8 <__aeabi_d2f>
 80032dc:	4603      	mov	r3, r0
 80032de:	4a6c      	ldr	r2, [pc, #432]	; (8003490 <brrCalculus+0x470>)
 80032e0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80032e2:	4b6b      	ldr	r3, [pc, #428]	; (8003490 <brrCalculus+0x470>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	2004      	movs	r0, #4
 80032ea:	eeb0 0a67 	vmov.f32	s0, s15
 80032ee:	f000 f94b 	bl	8003588 <roundToNDecimals>
 80032f2:	eef0 7a40 	vmov.f32	s15, s0
 80032f6:	4b66      	ldr	r3, [pc, #408]	; (8003490 <brrCalculus+0x470>)
 80032f8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80032fc:	4b64      	ldr	r3, [pc, #400]	; (8003490 <brrCalculus+0x470>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800330a:	4b61      	ldr	r3, [pc, #388]	; (8003490 <brrCalculus+0x470>)
 800330c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8003310:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <brrCalculus+0x470>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f91f 	bl	8000558 <__aeabi_f2d>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	ec43 2b10 	vmov	d0, r2, r3
 8003322:	f002 ff5d 	bl	80061e0 <round>
 8003326:	ec51 0b10 	vmov	r0, r1, d0
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	4b59      	ldr	r3, [pc, #356]	; (8003494 <brrCalculus+0x474>)
 8003330:	f7fc ffb4 	bl	800029c <__adddf3>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f7fd fc5c 	bl	8000bf8 <__aeabi_d2f>
 8003340:	4603      	mov	r3, r0
 8003342:	4a53      	ldr	r2, [pc, #332]	; (8003490 <brrCalculus+0x470>)
 8003344:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8003346:	4b51      	ldr	r3, [pc, #324]	; (800348c <brrCalculus+0x46c>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b50      	ldr	r3, [pc, #320]	; (8003490 <brrCalculus+0x470>)
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003358:	ee17 3a90 	vmov	r3, s15
 800335c:	b29b      	uxth	r3, r3
 800335e:	4313      	orrs	r3, r2
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <brrCalculus+0x478>)
 8003364:	801a      	strh	r2, [r3, #0]


		break;
 8003366:	e07e      	b.n	8003466 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8003368:	4947      	ldr	r1, [pc, #284]	; (8003488 <brrCalculus+0x468>)
 800336a:	a345      	add	r3, pc, #276	; (adr r3, 8003480 <brrCalculus+0x460>)
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	ee17 0a90 	vmov	r0, s15
 8003382:	f7fd f8e9 	bl	8000558 <__aeabi_f2d>
 8003386:	4b40      	ldr	r3, [pc, #256]	; (8003488 <brrCalculus+0x468>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f7fd f93c 	bl	8000608 <__aeabi_dmul>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	493c      	ldr	r1, [pc, #240]	; (8003488 <brrCalculus+0x468>)
 8003396:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800339a:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <brrCalculus+0x468>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f7fd fbe0 	bl	8000b68 <__aeabi_d2iz>
 80033a8:	4603      	mov	r3, r0
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b37      	ldr	r3, [pc, #220]	; (800348c <brrCalculus+0x46c>)
 80033ae:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80033b0:	4b35      	ldr	r3, [pc, #212]	; (8003488 <brrCalculus+0x468>)
 80033b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <brrCalculus+0x468>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fd fbd2 	bl	8000b68 <__aeabi_d2iz>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f8b4 	bl	8000534 <__aeabi_i2d>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4620      	mov	r0, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	f7fc ff60 	bl	8000298 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f7fd fc0a 	bl	8000bf8 <__aeabi_d2f>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <brrCalculus+0x470>)
 80033e8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80033ea:	4b29      	ldr	r3, [pc, #164]	; (8003490 <brrCalculus+0x470>)
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	2004      	movs	r0, #4
 80033f2:	eeb0 0a67 	vmov.f32	s0, s15
 80033f6:	f000 f8c7 	bl	8003588 <roundToNDecimals>
 80033fa:	eef0 7a40 	vmov.f32	s15, s0
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <brrCalculus+0x470>)
 8003400:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8003404:	4b22      	ldr	r3, [pc, #136]	; (8003490 <brrCalculus+0x470>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800340e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <brrCalculus+0x470>)
 8003414:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <brrCalculus+0x470>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f89b 	bl	8000558 <__aeabi_f2d>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	ec43 2b10 	vmov	d0, r2, r3
 800342a:	f002 fed9 	bl	80061e0 <round>
 800342e:	ec53 2b10 	vmov	r2, r3, d0
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	f7fd fbdf 	bl	8000bf8 <__aeabi_d2f>
 800343a:	4603      	mov	r3, r0
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <brrCalculus+0x470>)
 800343e:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <brrCalculus+0x46c>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	b29a      	uxth	r2, r3
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <brrCalculus+0x470>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003452:	ee17 3a90 	vmov	r3, s15
 8003456:	b29b      	uxth	r3, r3
 8003458:	4313      	orrs	r3, r2
 800345a:	b29a      	uxth	r2, r3
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <brrCalculus+0x478>)
 800345e:	801a      	strh	r2, [r3, #0]


		break;
 8003460:	e001      	b.n	8003466 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8003462:	bf00      	nop
		break;
 8003464:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <brrCalculus+0x478>)
 8003468:	881b      	ldrh	r3, [r3, #0]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bdb0      	pop	{r4, r5, r7, pc}
 8003472:	bf00      	nop
 8003474:	f3af 8000 	nop.w
 8003478:	789abcdf 	.word	0x789abcdf
 800347c:	3ec23456 	.word	0x3ec23456
 8003480:	789abcdf 	.word	0x789abcdf
 8003484:	3ea23456 	.word	0x3ea23456
 8003488:	20000300 	.word	0x20000300
 800348c:	200002f6 	.word	0x200002f6
 8003490:	200002f8 	.word	0x200002f8
 8003494:	3ff00000 	.word	0x3ff00000
 8003498:	200002f4 	.word	0x200002f4

0800349c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80034a6:	e000      	b.n	80034aa <writeChar+0xe>
		__NOP();
 80034a8:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f7      	beq.n	80034a8 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]

}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <usart1Rx_Callback>:
}

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
	__NOP();
 80034d0:	bf00      	nop
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
	__NOP();
 80034e0:	bf00      	nop
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
	return auxRxData;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <getRxData+0x14>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000308 	.word	0x20000308

08003504 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <USART2_IRQHandler+0x24>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <USART2_IRQHandler+0x24>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <USART2_IRQHandler+0x28>)
 800351c:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800351e:	f7fd fd0f 	bl	8000f40 <usart2Rx_Callback>
	}

}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40004400 	.word	0x40004400
 800352c:	20000308 	.word	0x20000308

08003530 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <USART1_IRQHandler+0x24>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d006      	beq.n	800354e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <USART1_IRQHandler+0x24>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <USART1_IRQHandler+0x28>)
 8003548:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800354a:	f7ff ffbf 	bl	80034cc <usart1Rx_Callback>
	}
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40011000 	.word	0x40011000
 8003558:	20000308 	.word	0x20000308

0800355c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <USART6_IRQHandler+0x24>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <USART6_IRQHandler+0x24>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <USART6_IRQHandler+0x28>)
 8003574:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8003576:	f7ff ffb1 	bl	80034dc <usart6Rx_Callback>
	}

}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40011400 	.word	0x40011400
 8003584:	20000308 	.word	0x20000308

08003588 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003592:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8003594:	6838      	ldr	r0, [r7, #0]
 8003596:	f7fc ffcd 	bl	8000534 <__aeabi_i2d>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	ec43 2b11 	vmov	d1, r2, r3
 80035a2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8003620 <roundToNDecimals+0x98>
 80035a6:	f002 fe61 	bl	800626c <pow>
 80035aa:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fc ffd2 	bl	8000558 <__aeabi_f2d>
 80035b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b8:	f7fd f826 	bl	8000608 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	f7fd fb18 	bl	8000bf8 <__aeabi_d2f>
 80035c8:	4603      	mov	r3, r0
 80035ca:	607b      	str	r3, [r7, #4]

    number = round(number);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fc ffc3 	bl	8000558 <__aeabi_f2d>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	ec43 2b10 	vmov	d0, r2, r3
 80035da:	f002 fe01 	bl	80061e0 <round>
 80035de:	ec53 2b10 	vmov	r2, r3, d0
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f7fd fb07 	bl	8000bf8 <__aeabi_d2f>
 80035ea:	4603      	mov	r3, r0
 80035ec:	607b      	str	r3, [r7, #4]

    number /= factor;
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fc ffb2 	bl	8000558 <__aeabi_f2d>
 80035f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f8:	f7fd f930 	bl	800085c <__aeabi_ddiv>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f7fd faf8 	bl	8000bf8 <__aeabi_d2f>
 8003608:	4603      	mov	r3, r0
 800360a:	607b      	str	r3, [r7, #4]

    return number;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	ee07 3a90 	vmov	s15, r3
}
 8003612:	eeb0 0a67 	vmov.f32	s0, s15
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	f3af 8000 	nop.w
 8003620:	00000000 	.word	0x00000000
 8003624:	40240000 	.word	0x40240000

08003628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <SystemInit+0x20>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <SystemInit+0x20>)
 8003634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	2302      	movs	r3, #2
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	2302      	movs	r3, #2
 8003664:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003666:	4b34      	ldr	r3, [pc, #208]	; (8003738 <SystemCoreClockUpdate+0xec>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b08      	cmp	r3, #8
 8003674:	d011      	beq.n	800369a <SystemCoreClockUpdate+0x4e>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d844      	bhi.n	8003706 <SystemCoreClockUpdate+0xba>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <SystemCoreClockUpdate+0x3e>
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d004      	beq.n	8003692 <SystemCoreClockUpdate+0x46>
 8003688:	e03d      	b.n	8003706 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800368a:	4b2c      	ldr	r3, [pc, #176]	; (800373c <SystemCoreClockUpdate+0xf0>)
 800368c:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <SystemCoreClockUpdate+0xf4>)
 800368e:	601a      	str	r2, [r3, #0]
      break;
 8003690:	e03d      	b.n	800370e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <SystemCoreClockUpdate+0xf0>)
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <SystemCoreClockUpdate+0xf8>)
 8003696:	601a      	str	r2, [r3, #0]
      break;
 8003698:	e039      	b.n	800370e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <SystemCoreClockUpdate+0xec>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	0d9b      	lsrs	r3, r3, #22
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <SystemCoreClockUpdate+0xec>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ae:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036b6:	4a23      	ldr	r2, [pc, #140]	; (8003744 <SystemCoreClockUpdate+0xf8>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <SystemCoreClockUpdate+0xec>)
 80036c0:	6852      	ldr	r2, [r2, #4]
 80036c2:	0992      	lsrs	r2, r2, #6
 80036c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e00b      	b.n	80036e8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <SystemCoreClockUpdate+0xf4>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <SystemCoreClockUpdate+0xec>)
 80036da:	6852      	ldr	r2, [r2, #4]
 80036dc:	0992      	lsrs	r2, r2, #6
 80036de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <SystemCoreClockUpdate+0xec>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	3301      	adds	r3, #1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	4a0e      	ldr	r2, [pc, #56]	; (800373c <SystemCoreClockUpdate+0xf0>)
 8003702:	6013      	str	r3, [r2, #0]
      break;
 8003704:	e003      	b.n	800370e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <SystemCoreClockUpdate+0xf0>)
 8003708:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <SystemCoreClockUpdate+0xf4>)
 800370a:	601a      	str	r2, [r3, #0]
      break;
 800370c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <SystemCoreClockUpdate+0xec>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <SystemCoreClockUpdate+0xfc>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <SystemCoreClockUpdate+0xf0>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <SystemCoreClockUpdate+0xf0>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40023800 	.word	0x40023800
 800373c:	20000004 	.word	0x20000004
 8003740:	00f42400 	.word	0x00f42400
 8003744:	017d7840 	.word	0x017d7840
 8003748:	080070d8 	.word	0x080070d8

0800374c <__errno>:
 800374c:	4b01      	ldr	r3, [pc, #4]	; (8003754 <__errno+0x8>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000008 	.word	0x20000008

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	; (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	; (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	; (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	; (800379c <__libc_init_array+0x44>)
 800376c:	f003 fca8 	bl	80070c0 <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	080074f8 	.word	0x080074f8
 8003794:	080074f8 	.word	0x080074f8
 8003798:	080074f8 	.word	0x080074f8
 800379c:	080074fc 	.word	0x080074fc

080037a0 <memset>:
 80037a0:	4402      	add	r2, r0
 80037a2:	4603      	mov	r3, r0
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d100      	bne.n	80037aa <memset+0xa>
 80037a8:	4770      	bx	lr
 80037aa:	f803 1b01 	strb.w	r1, [r3], #1
 80037ae:	e7f9      	b.n	80037a4 <memset+0x4>

080037b0 <__cvt>:
 80037b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	ec55 4b10 	vmov	r4, r5, d0
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	460e      	mov	r6, r1
 80037bc:	4619      	mov	r1, r3
 80037be:	462b      	mov	r3, r5
 80037c0:	bfbb      	ittet	lt
 80037c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80037c6:	461d      	movlt	r5, r3
 80037c8:	2300      	movge	r3, #0
 80037ca:	232d      	movlt	r3, #45	; 0x2d
 80037cc:	700b      	strb	r3, [r1, #0]
 80037ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037d4:	4691      	mov	r9, r2
 80037d6:	f023 0820 	bic.w	r8, r3, #32
 80037da:	bfbc      	itt	lt
 80037dc:	4622      	movlt	r2, r4
 80037de:	4614      	movlt	r4, r2
 80037e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037e4:	d005      	beq.n	80037f2 <__cvt+0x42>
 80037e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80037ea:	d100      	bne.n	80037ee <__cvt+0x3e>
 80037ec:	3601      	adds	r6, #1
 80037ee:	2102      	movs	r1, #2
 80037f0:	e000      	b.n	80037f4 <__cvt+0x44>
 80037f2:	2103      	movs	r1, #3
 80037f4:	ab03      	add	r3, sp, #12
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	ab02      	add	r3, sp, #8
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	ec45 4b10 	vmov	d0, r4, r5
 8003800:	4653      	mov	r3, sl
 8003802:	4632      	mov	r2, r6
 8003804:	f000 fccc 	bl	80041a0 <_dtoa_r>
 8003808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800380c:	4607      	mov	r7, r0
 800380e:	d102      	bne.n	8003816 <__cvt+0x66>
 8003810:	f019 0f01 	tst.w	r9, #1
 8003814:	d022      	beq.n	800385c <__cvt+0xac>
 8003816:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800381a:	eb07 0906 	add.w	r9, r7, r6
 800381e:	d110      	bne.n	8003842 <__cvt+0x92>
 8003820:	783b      	ldrb	r3, [r7, #0]
 8003822:	2b30      	cmp	r3, #48	; 0x30
 8003824:	d10a      	bne.n	800383c <__cvt+0x8c>
 8003826:	2200      	movs	r2, #0
 8003828:	2300      	movs	r3, #0
 800382a:	4620      	mov	r0, r4
 800382c:	4629      	mov	r1, r5
 800382e:	f7fd f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8003832:	b918      	cbnz	r0, 800383c <__cvt+0x8c>
 8003834:	f1c6 0601 	rsb	r6, r6, #1
 8003838:	f8ca 6000 	str.w	r6, [sl]
 800383c:	f8da 3000 	ldr.w	r3, [sl]
 8003840:	4499      	add	r9, r3
 8003842:	2200      	movs	r2, #0
 8003844:	2300      	movs	r3, #0
 8003846:	4620      	mov	r0, r4
 8003848:	4629      	mov	r1, r5
 800384a:	f7fd f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800384e:	b108      	cbz	r0, 8003854 <__cvt+0xa4>
 8003850:	f8cd 900c 	str.w	r9, [sp, #12]
 8003854:	2230      	movs	r2, #48	; 0x30
 8003856:	9b03      	ldr	r3, [sp, #12]
 8003858:	454b      	cmp	r3, r9
 800385a:	d307      	bcc.n	800386c <__cvt+0xbc>
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003860:	1bdb      	subs	r3, r3, r7
 8003862:	4638      	mov	r0, r7
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	b004      	add	sp, #16
 8003868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386c:	1c59      	adds	r1, r3, #1
 800386e:	9103      	str	r1, [sp, #12]
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e7f0      	b.n	8003856 <__cvt+0xa6>

08003874 <__exponent>:
 8003874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003876:	4603      	mov	r3, r0
 8003878:	2900      	cmp	r1, #0
 800387a:	bfb8      	it	lt
 800387c:	4249      	neglt	r1, r1
 800387e:	f803 2b02 	strb.w	r2, [r3], #2
 8003882:	bfb4      	ite	lt
 8003884:	222d      	movlt	r2, #45	; 0x2d
 8003886:	222b      	movge	r2, #43	; 0x2b
 8003888:	2909      	cmp	r1, #9
 800388a:	7042      	strb	r2, [r0, #1]
 800388c:	dd2a      	ble.n	80038e4 <__exponent+0x70>
 800388e:	f10d 0407 	add.w	r4, sp, #7
 8003892:	46a4      	mov	ip, r4
 8003894:	270a      	movs	r7, #10
 8003896:	46a6      	mov	lr, r4
 8003898:	460a      	mov	r2, r1
 800389a:	fb91 f6f7 	sdiv	r6, r1, r7
 800389e:	fb07 1516 	mls	r5, r7, r6, r1
 80038a2:	3530      	adds	r5, #48	; 0x30
 80038a4:	2a63      	cmp	r2, #99	; 0x63
 80038a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80038aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038ae:	4631      	mov	r1, r6
 80038b0:	dcf1      	bgt.n	8003896 <__exponent+0x22>
 80038b2:	3130      	adds	r1, #48	; 0x30
 80038b4:	f1ae 0502 	sub.w	r5, lr, #2
 80038b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80038bc:	1c44      	adds	r4, r0, #1
 80038be:	4629      	mov	r1, r5
 80038c0:	4561      	cmp	r1, ip
 80038c2:	d30a      	bcc.n	80038da <__exponent+0x66>
 80038c4:	f10d 0209 	add.w	r2, sp, #9
 80038c8:	eba2 020e 	sub.w	r2, r2, lr
 80038cc:	4565      	cmp	r5, ip
 80038ce:	bf88      	it	hi
 80038d0:	2200      	movhi	r2, #0
 80038d2:	4413      	add	r3, r2
 80038d4:	1a18      	subs	r0, r3, r0
 80038d6:	b003      	add	sp, #12
 80038d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80038e2:	e7ed      	b.n	80038c0 <__exponent+0x4c>
 80038e4:	2330      	movs	r3, #48	; 0x30
 80038e6:	3130      	adds	r1, #48	; 0x30
 80038e8:	7083      	strb	r3, [r0, #2]
 80038ea:	70c1      	strb	r1, [r0, #3]
 80038ec:	1d03      	adds	r3, r0, #4
 80038ee:	e7f1      	b.n	80038d4 <__exponent+0x60>

080038f0 <_printf_float>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	ed2d 8b02 	vpush	{d8}
 80038f8:	b08d      	sub	sp, #52	; 0x34
 80038fa:	460c      	mov	r4, r1
 80038fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003900:	4616      	mov	r6, r2
 8003902:	461f      	mov	r7, r3
 8003904:	4605      	mov	r5, r0
 8003906:	f001 fa39 	bl	8004d7c <_localeconv_r>
 800390a:	f8d0 a000 	ldr.w	sl, [r0]
 800390e:	4650      	mov	r0, sl
 8003910:	f7fc fc66 	bl	80001e0 <strlen>
 8003914:	2300      	movs	r3, #0
 8003916:	930a      	str	r3, [sp, #40]	; 0x28
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	9305      	str	r3, [sp, #20]
 800391c:	f8d8 3000 	ldr.w	r3, [r8]
 8003920:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003924:	3307      	adds	r3, #7
 8003926:	f023 0307 	bic.w	r3, r3, #7
 800392a:	f103 0208 	add.w	r2, r3, #8
 800392e:	f8c8 2000 	str.w	r2, [r8]
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800393a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800393e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003942:	9307      	str	r3, [sp, #28]
 8003944:	f8cd 8018 	str.w	r8, [sp, #24]
 8003948:	ee08 0a10 	vmov	s16, r0
 800394c:	4b9f      	ldr	r3, [pc, #636]	; (8003bcc <_printf_float+0x2dc>)
 800394e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003956:	f7fd f8f1 	bl	8000b3c <__aeabi_dcmpun>
 800395a:	bb88      	cbnz	r0, 80039c0 <_printf_float+0xd0>
 800395c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003960:	4b9a      	ldr	r3, [pc, #616]	; (8003bcc <_printf_float+0x2dc>)
 8003962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003966:	f7fd f8cb 	bl	8000b00 <__aeabi_dcmple>
 800396a:	bb48      	cbnz	r0, 80039c0 <_printf_float+0xd0>
 800396c:	2200      	movs	r2, #0
 800396e:	2300      	movs	r3, #0
 8003970:	4640      	mov	r0, r8
 8003972:	4649      	mov	r1, r9
 8003974:	f7fd f8ba 	bl	8000aec <__aeabi_dcmplt>
 8003978:	b110      	cbz	r0, 8003980 <_printf_float+0x90>
 800397a:	232d      	movs	r3, #45	; 0x2d
 800397c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003980:	4b93      	ldr	r3, [pc, #588]	; (8003bd0 <_printf_float+0x2e0>)
 8003982:	4894      	ldr	r0, [pc, #592]	; (8003bd4 <_printf_float+0x2e4>)
 8003984:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003988:	bf94      	ite	ls
 800398a:	4698      	movls	r8, r3
 800398c:	4680      	movhi	r8, r0
 800398e:	2303      	movs	r3, #3
 8003990:	6123      	str	r3, [r4, #16]
 8003992:	9b05      	ldr	r3, [sp, #20]
 8003994:	f023 0204 	bic.w	r2, r3, #4
 8003998:	6022      	str	r2, [r4, #0]
 800399a:	f04f 0900 	mov.w	r9, #0
 800399e:	9700      	str	r7, [sp, #0]
 80039a0:	4633      	mov	r3, r6
 80039a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80039a4:	4621      	mov	r1, r4
 80039a6:	4628      	mov	r0, r5
 80039a8:	f000 f9d8 	bl	8003d5c <_printf_common>
 80039ac:	3001      	adds	r0, #1
 80039ae:	f040 8090 	bne.w	8003ad2 <_printf_float+0x1e2>
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b6:	b00d      	add	sp, #52	; 0x34
 80039b8:	ecbd 8b02 	vpop	{d8}
 80039bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	4640      	mov	r0, r8
 80039c6:	4649      	mov	r1, r9
 80039c8:	f7fd f8b8 	bl	8000b3c <__aeabi_dcmpun>
 80039cc:	b140      	cbz	r0, 80039e0 <_printf_float+0xf0>
 80039ce:	464b      	mov	r3, r9
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bfbc      	itt	lt
 80039d4:	232d      	movlt	r3, #45	; 0x2d
 80039d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80039da:	487f      	ldr	r0, [pc, #508]	; (8003bd8 <_printf_float+0x2e8>)
 80039dc:	4b7f      	ldr	r3, [pc, #508]	; (8003bdc <_printf_float+0x2ec>)
 80039de:	e7d1      	b.n	8003984 <_printf_float+0x94>
 80039e0:	6863      	ldr	r3, [r4, #4]
 80039e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80039e6:	9206      	str	r2, [sp, #24]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	d13f      	bne.n	8003a6c <_printf_float+0x17c>
 80039ec:	2306      	movs	r3, #6
 80039ee:	6063      	str	r3, [r4, #4]
 80039f0:	9b05      	ldr	r3, [sp, #20]
 80039f2:	6861      	ldr	r1, [r4, #4]
 80039f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039f8:	2300      	movs	r3, #0
 80039fa:	9303      	str	r3, [sp, #12]
 80039fc:	ab0a      	add	r3, sp, #40	; 0x28
 80039fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a02:	ab09      	add	r3, sp, #36	; 0x24
 8003a04:	ec49 8b10 	vmov	d0, r8, r9
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a10:	4628      	mov	r0, r5
 8003a12:	f7ff fecd 	bl	80037b0 <__cvt>
 8003a16:	9b06      	ldr	r3, [sp, #24]
 8003a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a1a:	2b47      	cmp	r3, #71	; 0x47
 8003a1c:	4680      	mov	r8, r0
 8003a1e:	d108      	bne.n	8003a32 <_printf_float+0x142>
 8003a20:	1cc8      	adds	r0, r1, #3
 8003a22:	db02      	blt.n	8003a2a <_printf_float+0x13a>
 8003a24:	6863      	ldr	r3, [r4, #4]
 8003a26:	4299      	cmp	r1, r3
 8003a28:	dd41      	ble.n	8003aae <_printf_float+0x1be>
 8003a2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a2e:	fa5f fb8b 	uxtb.w	fp, fp
 8003a32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a36:	d820      	bhi.n	8003a7a <_printf_float+0x18a>
 8003a38:	3901      	subs	r1, #1
 8003a3a:	465a      	mov	r2, fp
 8003a3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a40:	9109      	str	r1, [sp, #36]	; 0x24
 8003a42:	f7ff ff17 	bl	8003874 <__exponent>
 8003a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a48:	1813      	adds	r3, r2, r0
 8003a4a:	2a01      	cmp	r2, #1
 8003a4c:	4681      	mov	r9, r0
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	dc02      	bgt.n	8003a58 <_printf_float+0x168>
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	07d2      	lsls	r2, r2, #31
 8003a56:	d501      	bpl.n	8003a5c <_printf_float+0x16c>
 8003a58:	3301      	adds	r3, #1
 8003a5a:	6123      	str	r3, [r4, #16]
 8003a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d09c      	beq.n	800399e <_printf_float+0xae>
 8003a64:	232d      	movs	r3, #45	; 0x2d
 8003a66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a6a:	e798      	b.n	800399e <_printf_float+0xae>
 8003a6c:	9a06      	ldr	r2, [sp, #24]
 8003a6e:	2a47      	cmp	r2, #71	; 0x47
 8003a70:	d1be      	bne.n	80039f0 <_printf_float+0x100>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1bc      	bne.n	80039f0 <_printf_float+0x100>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e7b9      	b.n	80039ee <_printf_float+0xfe>
 8003a7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003a7e:	d118      	bne.n	8003ab2 <_printf_float+0x1c2>
 8003a80:	2900      	cmp	r1, #0
 8003a82:	6863      	ldr	r3, [r4, #4]
 8003a84:	dd0b      	ble.n	8003a9e <_printf_float+0x1ae>
 8003a86:	6121      	str	r1, [r4, #16]
 8003a88:	b913      	cbnz	r3, 8003a90 <_printf_float+0x1a0>
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	07d0      	lsls	r0, r2, #31
 8003a8e:	d502      	bpl.n	8003a96 <_printf_float+0x1a6>
 8003a90:	3301      	adds	r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	6123      	str	r3, [r4, #16]
 8003a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a98:	f04f 0900 	mov.w	r9, #0
 8003a9c:	e7de      	b.n	8003a5c <_printf_float+0x16c>
 8003a9e:	b913      	cbnz	r3, 8003aa6 <_printf_float+0x1b6>
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	07d2      	lsls	r2, r2, #31
 8003aa4:	d501      	bpl.n	8003aaa <_printf_float+0x1ba>
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	e7f4      	b.n	8003a94 <_printf_float+0x1a4>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e7f2      	b.n	8003a94 <_printf_float+0x1a4>
 8003aae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ab4:	4299      	cmp	r1, r3
 8003ab6:	db05      	blt.n	8003ac4 <_printf_float+0x1d4>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	6121      	str	r1, [r4, #16]
 8003abc:	07d8      	lsls	r0, r3, #31
 8003abe:	d5ea      	bpl.n	8003a96 <_printf_float+0x1a6>
 8003ac0:	1c4b      	adds	r3, r1, #1
 8003ac2:	e7e7      	b.n	8003a94 <_printf_float+0x1a4>
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	bfd4      	ite	le
 8003ac8:	f1c1 0202 	rsble	r2, r1, #2
 8003acc:	2201      	movgt	r2, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	e7e0      	b.n	8003a94 <_printf_float+0x1a4>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	055a      	lsls	r2, r3, #21
 8003ad6:	d407      	bmi.n	8003ae8 <_printf_float+0x1f8>
 8003ad8:	6923      	ldr	r3, [r4, #16]
 8003ada:	4642      	mov	r2, r8
 8003adc:	4631      	mov	r1, r6
 8003ade:	4628      	mov	r0, r5
 8003ae0:	47b8      	blx	r7
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d12c      	bne.n	8003b40 <_printf_float+0x250>
 8003ae6:	e764      	b.n	80039b2 <_printf_float+0xc2>
 8003ae8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003aec:	f240 80e0 	bls.w	8003cb0 <_printf_float+0x3c0>
 8003af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003af4:	2200      	movs	r2, #0
 8003af6:	2300      	movs	r3, #0
 8003af8:	f7fc ffee 	bl	8000ad8 <__aeabi_dcmpeq>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d034      	beq.n	8003b6a <_printf_float+0x27a>
 8003b00:	4a37      	ldr	r2, [pc, #220]	; (8003be0 <_printf_float+0x2f0>)
 8003b02:	2301      	movs	r3, #1
 8003b04:	4631      	mov	r1, r6
 8003b06:	4628      	mov	r0, r5
 8003b08:	47b8      	blx	r7
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	f43f af51 	beq.w	80039b2 <_printf_float+0xc2>
 8003b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b14:	429a      	cmp	r2, r3
 8003b16:	db02      	blt.n	8003b1e <_printf_float+0x22e>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	07d8      	lsls	r0, r3, #31
 8003b1c:	d510      	bpl.n	8003b40 <_printf_float+0x250>
 8003b1e:	ee18 3a10 	vmov	r3, s16
 8003b22:	4652      	mov	r2, sl
 8003b24:	4631      	mov	r1, r6
 8003b26:	4628      	mov	r0, r5
 8003b28:	47b8      	blx	r7
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	f43f af41 	beq.w	80039b2 <_printf_float+0xc2>
 8003b30:	f04f 0800 	mov.w	r8, #0
 8003b34:	f104 091a 	add.w	r9, r4, #26
 8003b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	4543      	cmp	r3, r8
 8003b3e:	dc09      	bgt.n	8003b54 <_printf_float+0x264>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	079b      	lsls	r3, r3, #30
 8003b44:	f100 8105 	bmi.w	8003d52 <_printf_float+0x462>
 8003b48:	68e0      	ldr	r0, [r4, #12]
 8003b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b4c:	4298      	cmp	r0, r3
 8003b4e:	bfb8      	it	lt
 8003b50:	4618      	movlt	r0, r3
 8003b52:	e730      	b.n	80039b6 <_printf_float+0xc6>
 8003b54:	2301      	movs	r3, #1
 8003b56:	464a      	mov	r2, r9
 8003b58:	4631      	mov	r1, r6
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	47b8      	blx	r7
 8003b5e:	3001      	adds	r0, #1
 8003b60:	f43f af27 	beq.w	80039b2 <_printf_float+0xc2>
 8003b64:	f108 0801 	add.w	r8, r8, #1
 8003b68:	e7e6      	b.n	8003b38 <_printf_float+0x248>
 8003b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dc39      	bgt.n	8003be4 <_printf_float+0x2f4>
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <_printf_float+0x2f0>)
 8003b72:	2301      	movs	r3, #1
 8003b74:	4631      	mov	r1, r6
 8003b76:	4628      	mov	r0, r5
 8003b78:	47b8      	blx	r7
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	f43f af19 	beq.w	80039b2 <_printf_float+0xc2>
 8003b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b84:	4313      	orrs	r3, r2
 8003b86:	d102      	bne.n	8003b8e <_printf_float+0x29e>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	07d9      	lsls	r1, r3, #31
 8003b8c:	d5d8      	bpl.n	8003b40 <_printf_float+0x250>
 8003b8e:	ee18 3a10 	vmov	r3, s16
 8003b92:	4652      	mov	r2, sl
 8003b94:	4631      	mov	r1, r6
 8003b96:	4628      	mov	r0, r5
 8003b98:	47b8      	blx	r7
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	f43f af09 	beq.w	80039b2 <_printf_float+0xc2>
 8003ba0:	f04f 0900 	mov.w	r9, #0
 8003ba4:	f104 0a1a 	add.w	sl, r4, #26
 8003ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003baa:	425b      	negs	r3, r3
 8003bac:	454b      	cmp	r3, r9
 8003bae:	dc01      	bgt.n	8003bb4 <_printf_float+0x2c4>
 8003bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bb2:	e792      	b.n	8003ada <_printf_float+0x1ea>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4652      	mov	r2, sl
 8003bb8:	4631      	mov	r1, r6
 8003bba:	4628      	mov	r0, r5
 8003bbc:	47b8      	blx	r7
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	f43f aef7 	beq.w	80039b2 <_printf_float+0xc2>
 8003bc4:	f109 0901 	add.w	r9, r9, #1
 8003bc8:	e7ee      	b.n	8003ba8 <_printf_float+0x2b8>
 8003bca:	bf00      	nop
 8003bcc:	7fefffff 	.word	0x7fefffff
 8003bd0:	080070ec 	.word	0x080070ec
 8003bd4:	080070f0 	.word	0x080070f0
 8003bd8:	080070f8 	.word	0x080070f8
 8003bdc:	080070f4 	.word	0x080070f4
 8003be0:	080070fc 	.word	0x080070fc
 8003be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003be8:	429a      	cmp	r2, r3
 8003bea:	bfa8      	it	ge
 8003bec:	461a      	movge	r2, r3
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	4691      	mov	r9, r2
 8003bf2:	dc37      	bgt.n	8003c64 <_printf_float+0x374>
 8003bf4:	f04f 0b00 	mov.w	fp, #0
 8003bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bfc:	f104 021a 	add.w	r2, r4, #26
 8003c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	eba3 0309 	sub.w	r3, r3, r9
 8003c08:	455b      	cmp	r3, fp
 8003c0a:	dc33      	bgt.n	8003c74 <_printf_float+0x384>
 8003c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c10:	429a      	cmp	r2, r3
 8003c12:	db3b      	blt.n	8003c8c <_printf_float+0x39c>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	07da      	lsls	r2, r3, #31
 8003c18:	d438      	bmi.n	8003c8c <_printf_float+0x39c>
 8003c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c1c:	9a05      	ldr	r2, [sp, #20]
 8003c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c20:	1a9a      	subs	r2, r3, r2
 8003c22:	eba3 0901 	sub.w	r9, r3, r1
 8003c26:	4591      	cmp	r9, r2
 8003c28:	bfa8      	it	ge
 8003c2a:	4691      	movge	r9, r2
 8003c2c:	f1b9 0f00 	cmp.w	r9, #0
 8003c30:	dc35      	bgt.n	8003c9e <_printf_float+0x3ae>
 8003c32:	f04f 0800 	mov.w	r8, #0
 8003c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c3a:	f104 0a1a 	add.w	sl, r4, #26
 8003c3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	eba3 0309 	sub.w	r3, r3, r9
 8003c48:	4543      	cmp	r3, r8
 8003c4a:	f77f af79 	ble.w	8003b40 <_printf_float+0x250>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4652      	mov	r2, sl
 8003c52:	4631      	mov	r1, r6
 8003c54:	4628      	mov	r0, r5
 8003c56:	47b8      	blx	r7
 8003c58:	3001      	adds	r0, #1
 8003c5a:	f43f aeaa 	beq.w	80039b2 <_printf_float+0xc2>
 8003c5e:	f108 0801 	add.w	r8, r8, #1
 8003c62:	e7ec      	b.n	8003c3e <_printf_float+0x34e>
 8003c64:	4613      	mov	r3, r2
 8003c66:	4631      	mov	r1, r6
 8003c68:	4642      	mov	r2, r8
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	47b8      	blx	r7
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d1c0      	bne.n	8003bf4 <_printf_float+0x304>
 8003c72:	e69e      	b.n	80039b2 <_printf_float+0xc2>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4631      	mov	r1, r6
 8003c78:	4628      	mov	r0, r5
 8003c7a:	9205      	str	r2, [sp, #20]
 8003c7c:	47b8      	blx	r7
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f43f ae97 	beq.w	80039b2 <_printf_float+0xc2>
 8003c84:	9a05      	ldr	r2, [sp, #20]
 8003c86:	f10b 0b01 	add.w	fp, fp, #1
 8003c8a:	e7b9      	b.n	8003c00 <_printf_float+0x310>
 8003c8c:	ee18 3a10 	vmov	r3, s16
 8003c90:	4652      	mov	r2, sl
 8003c92:	4631      	mov	r1, r6
 8003c94:	4628      	mov	r0, r5
 8003c96:	47b8      	blx	r7
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d1be      	bne.n	8003c1a <_printf_float+0x32a>
 8003c9c:	e689      	b.n	80039b2 <_printf_float+0xc2>
 8003c9e:	9a05      	ldr	r2, [sp, #20]
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	4442      	add	r2, r8
 8003ca4:	4631      	mov	r1, r6
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	47b8      	blx	r7
 8003caa:	3001      	adds	r0, #1
 8003cac:	d1c1      	bne.n	8003c32 <_printf_float+0x342>
 8003cae:	e680      	b.n	80039b2 <_printf_float+0xc2>
 8003cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cb2:	2a01      	cmp	r2, #1
 8003cb4:	dc01      	bgt.n	8003cba <_printf_float+0x3ca>
 8003cb6:	07db      	lsls	r3, r3, #31
 8003cb8:	d538      	bpl.n	8003d2c <_printf_float+0x43c>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	47b8      	blx	r7
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	f43f ae74 	beq.w	80039b2 <_printf_float+0xc2>
 8003cca:	ee18 3a10 	vmov	r3, s16
 8003cce:	4652      	mov	r2, sl
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f43f ae6b 	beq.w	80039b2 <_printf_float+0xc2>
 8003cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f7fc fef8 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ce8:	b9d8      	cbnz	r0, 8003d22 <_printf_float+0x432>
 8003cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cec:	f108 0201 	add.w	r2, r8, #1
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	47b8      	blx	r7
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d10e      	bne.n	8003d1a <_printf_float+0x42a>
 8003cfc:	e659      	b.n	80039b2 <_printf_float+0xc2>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4652      	mov	r2, sl
 8003d02:	4631      	mov	r1, r6
 8003d04:	4628      	mov	r0, r5
 8003d06:	47b8      	blx	r7
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f43f ae52 	beq.w	80039b2 <_printf_float+0xc2>
 8003d0e:	f108 0801 	add.w	r8, r8, #1
 8003d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	4543      	cmp	r3, r8
 8003d18:	dcf1      	bgt.n	8003cfe <_printf_float+0x40e>
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d20:	e6dc      	b.n	8003adc <_printf_float+0x1ec>
 8003d22:	f04f 0800 	mov.w	r8, #0
 8003d26:	f104 0a1a 	add.w	sl, r4, #26
 8003d2a:	e7f2      	b.n	8003d12 <_printf_float+0x422>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	4642      	mov	r2, r8
 8003d30:	e7df      	b.n	8003cf2 <_printf_float+0x402>
 8003d32:	2301      	movs	r3, #1
 8003d34:	464a      	mov	r2, r9
 8003d36:	4631      	mov	r1, r6
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f43f ae38 	beq.w	80039b2 <_printf_float+0xc2>
 8003d42:	f108 0801 	add.w	r8, r8, #1
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d4a:	1a5b      	subs	r3, r3, r1
 8003d4c:	4543      	cmp	r3, r8
 8003d4e:	dcf0      	bgt.n	8003d32 <_printf_float+0x442>
 8003d50:	e6fa      	b.n	8003b48 <_printf_float+0x258>
 8003d52:	f04f 0800 	mov.w	r8, #0
 8003d56:	f104 0919 	add.w	r9, r4, #25
 8003d5a:	e7f4      	b.n	8003d46 <_printf_float+0x456>

08003d5c <_printf_common>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	4616      	mov	r6, r2
 8003d62:	4699      	mov	r9, r3
 8003d64:	688a      	ldr	r2, [r1, #8]
 8003d66:	690b      	ldr	r3, [r1, #16]
 8003d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	bfb8      	it	lt
 8003d70:	4613      	movlt	r3, r2
 8003d72:	6033      	str	r3, [r6, #0]
 8003d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d78:	4607      	mov	r7, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	b10a      	cbz	r2, 8003d82 <_printf_common+0x26>
 8003d7e:	3301      	adds	r3, #1
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	0699      	lsls	r1, r3, #26
 8003d86:	bf42      	ittt	mi
 8003d88:	6833      	ldrmi	r3, [r6, #0]
 8003d8a:	3302      	addmi	r3, #2
 8003d8c:	6033      	strmi	r3, [r6, #0]
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	f015 0506 	ands.w	r5, r5, #6
 8003d94:	d106      	bne.n	8003da4 <_printf_common+0x48>
 8003d96:	f104 0a19 	add.w	sl, r4, #25
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	6832      	ldr	r2, [r6, #0]
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	42ab      	cmp	r3, r5
 8003da2:	dc26      	bgt.n	8003df2 <_printf_common+0x96>
 8003da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003da8:	1e13      	subs	r3, r2, #0
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	bf18      	it	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	0692      	lsls	r2, r2, #26
 8003db2:	d42b      	bmi.n	8003e0c <_printf_common+0xb0>
 8003db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003db8:	4649      	mov	r1, r9
 8003dba:	4638      	mov	r0, r7
 8003dbc:	47c0      	blx	r8
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d01e      	beq.n	8003e00 <_printf_common+0xa4>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	68e5      	ldr	r5, [r4, #12]
 8003dc6:	6832      	ldr	r2, [r6, #0]
 8003dc8:	f003 0306 	and.w	r3, r3, #6
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	bf08      	it	eq
 8003dd0:	1aad      	subeq	r5, r5, r2
 8003dd2:	68a3      	ldr	r3, [r4, #8]
 8003dd4:	6922      	ldr	r2, [r4, #16]
 8003dd6:	bf0c      	ite	eq
 8003dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ddc:	2500      	movne	r5, #0
 8003dde:	4293      	cmp	r3, r2
 8003de0:	bfc4      	itt	gt
 8003de2:	1a9b      	subgt	r3, r3, r2
 8003de4:	18ed      	addgt	r5, r5, r3
 8003de6:	2600      	movs	r6, #0
 8003de8:	341a      	adds	r4, #26
 8003dea:	42b5      	cmp	r5, r6
 8003dec:	d11a      	bne.n	8003e24 <_printf_common+0xc8>
 8003dee:	2000      	movs	r0, #0
 8003df0:	e008      	b.n	8003e04 <_printf_common+0xa8>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4652      	mov	r2, sl
 8003df6:	4649      	mov	r1, r9
 8003df8:	4638      	mov	r0, r7
 8003dfa:	47c0      	blx	r8
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d103      	bne.n	8003e08 <_printf_common+0xac>
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e08:	3501      	adds	r5, #1
 8003e0a:	e7c6      	b.n	8003d9a <_printf_common+0x3e>
 8003e0c:	18e1      	adds	r1, r4, r3
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	2030      	movs	r0, #48	; 0x30
 8003e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e16:	4422      	add	r2, r4
 8003e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e20:	3302      	adds	r3, #2
 8003e22:	e7c7      	b.n	8003db4 <_printf_common+0x58>
 8003e24:	2301      	movs	r3, #1
 8003e26:	4622      	mov	r2, r4
 8003e28:	4649      	mov	r1, r9
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	47c0      	blx	r8
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d0e6      	beq.n	8003e00 <_printf_common+0xa4>
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7d9      	b.n	8003dea <_printf_common+0x8e>
	...

08003e38 <_printf_i>:
 8003e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3c:	7e0f      	ldrb	r7, [r1, #24]
 8003e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e40:	2f78      	cmp	r7, #120	; 0x78
 8003e42:	4691      	mov	r9, r2
 8003e44:	4680      	mov	r8, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	469a      	mov	sl, r3
 8003e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e4e:	d807      	bhi.n	8003e60 <_printf_i+0x28>
 8003e50:	2f62      	cmp	r7, #98	; 0x62
 8003e52:	d80a      	bhi.n	8003e6a <_printf_i+0x32>
 8003e54:	2f00      	cmp	r7, #0
 8003e56:	f000 80d8 	beq.w	800400a <_printf_i+0x1d2>
 8003e5a:	2f58      	cmp	r7, #88	; 0x58
 8003e5c:	f000 80a3 	beq.w	8003fa6 <_printf_i+0x16e>
 8003e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e68:	e03a      	b.n	8003ee0 <_printf_i+0xa8>
 8003e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e6e:	2b15      	cmp	r3, #21
 8003e70:	d8f6      	bhi.n	8003e60 <_printf_i+0x28>
 8003e72:	a101      	add	r1, pc, #4	; (adr r1, 8003e78 <_printf_i+0x40>)
 8003e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e78:	08003ed1 	.word	0x08003ed1
 8003e7c:	08003ee5 	.word	0x08003ee5
 8003e80:	08003e61 	.word	0x08003e61
 8003e84:	08003e61 	.word	0x08003e61
 8003e88:	08003e61 	.word	0x08003e61
 8003e8c:	08003e61 	.word	0x08003e61
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003e61 	.word	0x08003e61
 8003e98:	08003e61 	.word	0x08003e61
 8003e9c:	08003e61 	.word	0x08003e61
 8003ea0:	08003e61 	.word	0x08003e61
 8003ea4:	08003ff1 	.word	0x08003ff1
 8003ea8:	08003f15 	.word	0x08003f15
 8003eac:	08003fd3 	.word	0x08003fd3
 8003eb0:	08003e61 	.word	0x08003e61
 8003eb4:	08003e61 	.word	0x08003e61
 8003eb8:	08004013 	.word	0x08004013
 8003ebc:	08003e61 	.word	0x08003e61
 8003ec0:	08003f15 	.word	0x08003f15
 8003ec4:	08003e61 	.word	0x08003e61
 8003ec8:	08003e61 	.word	0x08003e61
 8003ecc:	08003fdb 	.word	0x08003fdb
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	1d1a      	adds	r2, r3, #4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	602a      	str	r2, [r5, #0]
 8003ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0a3      	b.n	800402c <_printf_i+0x1f4>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	6829      	ldr	r1, [r5, #0]
 8003ee8:	0606      	lsls	r6, r0, #24
 8003eea:	f101 0304 	add.w	r3, r1, #4
 8003eee:	d50a      	bpl.n	8003f06 <_printf_i+0xce>
 8003ef0:	680e      	ldr	r6, [r1, #0]
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	2e00      	cmp	r6, #0
 8003ef6:	da03      	bge.n	8003f00 <_printf_i+0xc8>
 8003ef8:	232d      	movs	r3, #45	; 0x2d
 8003efa:	4276      	negs	r6, r6
 8003efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f00:	485e      	ldr	r0, [pc, #376]	; (800407c <_printf_i+0x244>)
 8003f02:	230a      	movs	r3, #10
 8003f04:	e019      	b.n	8003f3a <_printf_i+0x102>
 8003f06:	680e      	ldr	r6, [r1, #0]
 8003f08:	602b      	str	r3, [r5, #0]
 8003f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f0e:	bf18      	it	ne
 8003f10:	b236      	sxthne	r6, r6
 8003f12:	e7ef      	b.n	8003ef4 <_printf_i+0xbc>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	6029      	str	r1, [r5, #0]
 8003f1c:	0601      	lsls	r1, r0, #24
 8003f1e:	d501      	bpl.n	8003f24 <_printf_i+0xec>
 8003f20:	681e      	ldr	r6, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <_printf_i+0xf2>
 8003f24:	0646      	lsls	r6, r0, #25
 8003f26:	d5fb      	bpl.n	8003f20 <_printf_i+0xe8>
 8003f28:	881e      	ldrh	r6, [r3, #0]
 8003f2a:	4854      	ldr	r0, [pc, #336]	; (800407c <_printf_i+0x244>)
 8003f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f2e:	bf0c      	ite	eq
 8003f30:	2308      	moveq	r3, #8
 8003f32:	230a      	movne	r3, #10
 8003f34:	2100      	movs	r1, #0
 8003f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f3a:	6865      	ldr	r5, [r4, #4]
 8003f3c:	60a5      	str	r5, [r4, #8]
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	bfa2      	ittt	ge
 8003f42:	6821      	ldrge	r1, [r4, #0]
 8003f44:	f021 0104 	bicge.w	r1, r1, #4
 8003f48:	6021      	strge	r1, [r4, #0]
 8003f4a:	b90e      	cbnz	r6, 8003f50 <_printf_i+0x118>
 8003f4c:	2d00      	cmp	r5, #0
 8003f4e:	d04d      	beq.n	8003fec <_printf_i+0x1b4>
 8003f50:	4615      	mov	r5, r2
 8003f52:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f56:	fb03 6711 	mls	r7, r3, r1, r6
 8003f5a:	5dc7      	ldrb	r7, [r0, r7]
 8003f5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f60:	4637      	mov	r7, r6
 8003f62:	42bb      	cmp	r3, r7
 8003f64:	460e      	mov	r6, r1
 8003f66:	d9f4      	bls.n	8003f52 <_printf_i+0x11a>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d10b      	bne.n	8003f84 <_printf_i+0x14c>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	07de      	lsls	r6, r3, #31
 8003f70:	d508      	bpl.n	8003f84 <_printf_i+0x14c>
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	6861      	ldr	r1, [r4, #4]
 8003f76:	4299      	cmp	r1, r3
 8003f78:	bfde      	ittt	le
 8003f7a:	2330      	movle	r3, #48	; 0x30
 8003f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f84:	1b52      	subs	r2, r2, r5
 8003f86:	6122      	str	r2, [r4, #16]
 8003f88:	f8cd a000 	str.w	sl, [sp]
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	aa03      	add	r2, sp, #12
 8003f90:	4621      	mov	r1, r4
 8003f92:	4640      	mov	r0, r8
 8003f94:	f7ff fee2 	bl	8003d5c <_printf_common>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d14c      	bne.n	8004036 <_printf_i+0x1fe>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa0:	b004      	add	sp, #16
 8003fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa6:	4835      	ldr	r0, [pc, #212]	; (800407c <_printf_i+0x244>)
 8003fa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fac:	6829      	ldr	r1, [r5, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fb4:	6029      	str	r1, [r5, #0]
 8003fb6:	061d      	lsls	r5, r3, #24
 8003fb8:	d514      	bpl.n	8003fe4 <_printf_i+0x1ac>
 8003fba:	07df      	lsls	r7, r3, #31
 8003fbc:	bf44      	itt	mi
 8003fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003fc2:	6023      	strmi	r3, [r4, #0]
 8003fc4:	b91e      	cbnz	r6, 8003fce <_printf_i+0x196>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	f023 0320 	bic.w	r3, r3, #32
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	2310      	movs	r3, #16
 8003fd0:	e7b0      	b.n	8003f34 <_printf_i+0xfc>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	f043 0320 	orr.w	r3, r3, #32
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	2378      	movs	r3, #120	; 0x78
 8003fdc:	4828      	ldr	r0, [pc, #160]	; (8004080 <_printf_i+0x248>)
 8003fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fe2:	e7e3      	b.n	8003fac <_printf_i+0x174>
 8003fe4:	0659      	lsls	r1, r3, #25
 8003fe6:	bf48      	it	mi
 8003fe8:	b2b6      	uxthmi	r6, r6
 8003fea:	e7e6      	b.n	8003fba <_printf_i+0x182>
 8003fec:	4615      	mov	r5, r2
 8003fee:	e7bb      	b.n	8003f68 <_printf_i+0x130>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	6826      	ldr	r6, [r4, #0]
 8003ff4:	6961      	ldr	r1, [r4, #20]
 8003ff6:	1d18      	adds	r0, r3, #4
 8003ff8:	6028      	str	r0, [r5, #0]
 8003ffa:	0635      	lsls	r5, r6, #24
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	d501      	bpl.n	8004004 <_printf_i+0x1cc>
 8004000:	6019      	str	r1, [r3, #0]
 8004002:	e002      	b.n	800400a <_printf_i+0x1d2>
 8004004:	0670      	lsls	r0, r6, #25
 8004006:	d5fb      	bpl.n	8004000 <_printf_i+0x1c8>
 8004008:	8019      	strh	r1, [r3, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	4615      	mov	r5, r2
 8004010:	e7ba      	b.n	8003f88 <_printf_i+0x150>
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	602a      	str	r2, [r5, #0]
 8004018:	681d      	ldr	r5, [r3, #0]
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	2100      	movs	r1, #0
 800401e:	4628      	mov	r0, r5
 8004020:	f7fc f8e6 	bl	80001f0 <memchr>
 8004024:	b108      	cbz	r0, 800402a <_printf_i+0x1f2>
 8004026:	1b40      	subs	r0, r0, r5
 8004028:	6060      	str	r0, [r4, #4]
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	6123      	str	r3, [r4, #16]
 800402e:	2300      	movs	r3, #0
 8004030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004034:	e7a8      	b.n	8003f88 <_printf_i+0x150>
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	462a      	mov	r2, r5
 800403a:	4649      	mov	r1, r9
 800403c:	4640      	mov	r0, r8
 800403e:	47d0      	blx	sl
 8004040:	3001      	adds	r0, #1
 8004042:	d0ab      	beq.n	8003f9c <_printf_i+0x164>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	079b      	lsls	r3, r3, #30
 8004048:	d413      	bmi.n	8004072 <_printf_i+0x23a>
 800404a:	68e0      	ldr	r0, [r4, #12]
 800404c:	9b03      	ldr	r3, [sp, #12]
 800404e:	4298      	cmp	r0, r3
 8004050:	bfb8      	it	lt
 8004052:	4618      	movlt	r0, r3
 8004054:	e7a4      	b.n	8003fa0 <_printf_i+0x168>
 8004056:	2301      	movs	r3, #1
 8004058:	4632      	mov	r2, r6
 800405a:	4649      	mov	r1, r9
 800405c:	4640      	mov	r0, r8
 800405e:	47d0      	blx	sl
 8004060:	3001      	adds	r0, #1
 8004062:	d09b      	beq.n	8003f9c <_printf_i+0x164>
 8004064:	3501      	adds	r5, #1
 8004066:	68e3      	ldr	r3, [r4, #12]
 8004068:	9903      	ldr	r1, [sp, #12]
 800406a:	1a5b      	subs	r3, r3, r1
 800406c:	42ab      	cmp	r3, r5
 800406e:	dcf2      	bgt.n	8004056 <_printf_i+0x21e>
 8004070:	e7eb      	b.n	800404a <_printf_i+0x212>
 8004072:	2500      	movs	r5, #0
 8004074:	f104 0619 	add.w	r6, r4, #25
 8004078:	e7f5      	b.n	8004066 <_printf_i+0x22e>
 800407a:	bf00      	nop
 800407c:	080070fe 	.word	0x080070fe
 8004080:	0800710f 	.word	0x0800710f

08004084 <quorem>:
 8004084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004088:	6903      	ldr	r3, [r0, #16]
 800408a:	690c      	ldr	r4, [r1, #16]
 800408c:	42a3      	cmp	r3, r4
 800408e:	4607      	mov	r7, r0
 8004090:	f2c0 8081 	blt.w	8004196 <quorem+0x112>
 8004094:	3c01      	subs	r4, #1
 8004096:	f101 0814 	add.w	r8, r1, #20
 800409a:	f100 0514 	add.w	r5, r0, #20
 800409e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040ac:	3301      	adds	r3, #1
 80040ae:	429a      	cmp	r2, r3
 80040b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80040bc:	d331      	bcc.n	8004122 <quorem+0x9e>
 80040be:	f04f 0e00 	mov.w	lr, #0
 80040c2:	4640      	mov	r0, r8
 80040c4:	46ac      	mov	ip, r5
 80040c6:	46f2      	mov	sl, lr
 80040c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80040cc:	b293      	uxth	r3, r2
 80040ce:	fb06 e303 	mla	r3, r6, r3, lr
 80040d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	ebaa 0303 	sub.w	r3, sl, r3
 80040dc:	f8dc a000 	ldr.w	sl, [ip]
 80040e0:	0c12      	lsrs	r2, r2, #16
 80040e2:	fa13 f38a 	uxtah	r3, r3, sl
 80040e6:	fb06 e202 	mla	r2, r6, r2, lr
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	9b00      	ldr	r3, [sp, #0]
 80040ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80040f2:	b292      	uxth	r2, r2
 80040f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80040f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8004100:	4581      	cmp	r9, r0
 8004102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004106:	f84c 3b04 	str.w	r3, [ip], #4
 800410a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800410e:	d2db      	bcs.n	80040c8 <quorem+0x44>
 8004110:	f855 300b 	ldr.w	r3, [r5, fp]
 8004114:	b92b      	cbnz	r3, 8004122 <quorem+0x9e>
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	3b04      	subs	r3, #4
 800411a:	429d      	cmp	r5, r3
 800411c:	461a      	mov	r2, r3
 800411e:	d32e      	bcc.n	800417e <quorem+0xfa>
 8004120:	613c      	str	r4, [r7, #16]
 8004122:	4638      	mov	r0, r7
 8004124:	f001 f8c6 	bl	80052b4 <__mcmp>
 8004128:	2800      	cmp	r0, #0
 800412a:	db24      	blt.n	8004176 <quorem+0xf2>
 800412c:	3601      	adds	r6, #1
 800412e:	4628      	mov	r0, r5
 8004130:	f04f 0c00 	mov.w	ip, #0
 8004134:	f858 2b04 	ldr.w	r2, [r8], #4
 8004138:	f8d0 e000 	ldr.w	lr, [r0]
 800413c:	b293      	uxth	r3, r2
 800413e:	ebac 0303 	sub.w	r3, ip, r3
 8004142:	0c12      	lsrs	r2, r2, #16
 8004144:	fa13 f38e 	uxtah	r3, r3, lr
 8004148:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800414c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004150:	b29b      	uxth	r3, r3
 8004152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004156:	45c1      	cmp	r9, r8
 8004158:	f840 3b04 	str.w	r3, [r0], #4
 800415c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004160:	d2e8      	bcs.n	8004134 <quorem+0xb0>
 8004162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800416a:	b922      	cbnz	r2, 8004176 <quorem+0xf2>
 800416c:	3b04      	subs	r3, #4
 800416e:	429d      	cmp	r5, r3
 8004170:	461a      	mov	r2, r3
 8004172:	d30a      	bcc.n	800418a <quorem+0x106>
 8004174:	613c      	str	r4, [r7, #16]
 8004176:	4630      	mov	r0, r6
 8004178:	b003      	add	sp, #12
 800417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	3b04      	subs	r3, #4
 8004182:	2a00      	cmp	r2, #0
 8004184:	d1cc      	bne.n	8004120 <quorem+0x9c>
 8004186:	3c01      	subs	r4, #1
 8004188:	e7c7      	b.n	800411a <quorem+0x96>
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	3b04      	subs	r3, #4
 800418e:	2a00      	cmp	r2, #0
 8004190:	d1f0      	bne.n	8004174 <quorem+0xf0>
 8004192:	3c01      	subs	r4, #1
 8004194:	e7eb      	b.n	800416e <quorem+0xea>
 8004196:	2000      	movs	r0, #0
 8004198:	e7ee      	b.n	8004178 <quorem+0xf4>
 800419a:	0000      	movs	r0, r0
 800419c:	0000      	movs	r0, r0
	...

080041a0 <_dtoa_r>:
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	ed2d 8b04 	vpush	{d8-d9}
 80041a8:	ec57 6b10 	vmov	r6, r7, d0
 80041ac:	b093      	sub	sp, #76	; 0x4c
 80041ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80041b4:	9106      	str	r1, [sp, #24]
 80041b6:	ee10 aa10 	vmov	sl, s0
 80041ba:	4604      	mov	r4, r0
 80041bc:	9209      	str	r2, [sp, #36]	; 0x24
 80041be:	930c      	str	r3, [sp, #48]	; 0x30
 80041c0:	46bb      	mov	fp, r7
 80041c2:	b975      	cbnz	r5, 80041e2 <_dtoa_r+0x42>
 80041c4:	2010      	movs	r0, #16
 80041c6:	f000 fddd 	bl	8004d84 <malloc>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6260      	str	r0, [r4, #36]	; 0x24
 80041ce:	b920      	cbnz	r0, 80041da <_dtoa_r+0x3a>
 80041d0:	4ba7      	ldr	r3, [pc, #668]	; (8004470 <_dtoa_r+0x2d0>)
 80041d2:	21ea      	movs	r1, #234	; 0xea
 80041d4:	48a7      	ldr	r0, [pc, #668]	; (8004474 <_dtoa_r+0x2d4>)
 80041d6:	f001 fa75 	bl	80056c4 <__assert_func>
 80041da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80041de:	6005      	str	r5, [r0, #0]
 80041e0:	60c5      	str	r5, [r0, #12]
 80041e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	b151      	cbz	r1, 80041fe <_dtoa_r+0x5e>
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	604a      	str	r2, [r1, #4]
 80041ec:	2301      	movs	r3, #1
 80041ee:	4093      	lsls	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 fe1c 	bl	8004e30 <_Bfree>
 80041f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	1e3b      	subs	r3, r7, #0
 8004200:	bfaa      	itet	ge
 8004202:	2300      	movge	r3, #0
 8004204:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004208:	f8c8 3000 	strge.w	r3, [r8]
 800420c:	4b9a      	ldr	r3, [pc, #616]	; (8004478 <_dtoa_r+0x2d8>)
 800420e:	bfbc      	itt	lt
 8004210:	2201      	movlt	r2, #1
 8004212:	f8c8 2000 	strlt.w	r2, [r8]
 8004216:	ea33 030b 	bics.w	r3, r3, fp
 800421a:	d11b      	bne.n	8004254 <_dtoa_r+0xb4>
 800421c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800421e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004228:	4333      	orrs	r3, r6
 800422a:	f000 8592 	beq.w	8004d52 <_dtoa_r+0xbb2>
 800422e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004230:	b963      	cbnz	r3, 800424c <_dtoa_r+0xac>
 8004232:	4b92      	ldr	r3, [pc, #584]	; (800447c <_dtoa_r+0x2dc>)
 8004234:	e022      	b.n	800427c <_dtoa_r+0xdc>
 8004236:	4b92      	ldr	r3, [pc, #584]	; (8004480 <_dtoa_r+0x2e0>)
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	3308      	adds	r3, #8
 800423c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	9801      	ldr	r0, [sp, #4]
 8004242:	b013      	add	sp, #76	; 0x4c
 8004244:	ecbd 8b04 	vpop	{d8-d9}
 8004248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	4b8b      	ldr	r3, [pc, #556]	; (800447c <_dtoa_r+0x2dc>)
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	3303      	adds	r3, #3
 8004252:	e7f3      	b.n	800423c <_dtoa_r+0x9c>
 8004254:	2200      	movs	r2, #0
 8004256:	2300      	movs	r3, #0
 8004258:	4650      	mov	r0, sl
 800425a:	4659      	mov	r1, fp
 800425c:	f7fc fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004260:	ec4b ab19 	vmov	d9, sl, fp
 8004264:	4680      	mov	r8, r0
 8004266:	b158      	cbz	r0, 8004280 <_dtoa_r+0xe0>
 8004268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800426a:	2301      	movs	r3, #1
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 856b 	beq.w	8004d4c <_dtoa_r+0xbac>
 8004276:	4883      	ldr	r0, [pc, #524]	; (8004484 <_dtoa_r+0x2e4>)
 8004278:	6018      	str	r0, [r3, #0]
 800427a:	1e43      	subs	r3, r0, #1
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	e7df      	b.n	8004240 <_dtoa_r+0xa0>
 8004280:	ec4b ab10 	vmov	d0, sl, fp
 8004284:	aa10      	add	r2, sp, #64	; 0x40
 8004286:	a911      	add	r1, sp, #68	; 0x44
 8004288:	4620      	mov	r0, r4
 800428a:	f001 f8b9 	bl	8005400 <__d2b>
 800428e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004292:	ee08 0a10 	vmov	s16, r0
 8004296:	2d00      	cmp	r5, #0
 8004298:	f000 8084 	beq.w	80043a4 <_dtoa_r+0x204>
 800429c:	ee19 3a90 	vmov	r3, s19
 80042a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80042a8:	4656      	mov	r6, sl
 80042aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80042ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80042b6:	4b74      	ldr	r3, [pc, #464]	; (8004488 <_dtoa_r+0x2e8>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	4630      	mov	r0, r6
 80042bc:	4639      	mov	r1, r7
 80042be:	f7fb ffeb 	bl	8000298 <__aeabi_dsub>
 80042c2:	a365      	add	r3, pc, #404	; (adr r3, 8004458 <_dtoa_r+0x2b8>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fc f99e 	bl	8000608 <__aeabi_dmul>
 80042cc:	a364      	add	r3, pc, #400	; (adr r3, 8004460 <_dtoa_r+0x2c0>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fb ffe3 	bl	800029c <__adddf3>
 80042d6:	4606      	mov	r6, r0
 80042d8:	4628      	mov	r0, r5
 80042da:	460f      	mov	r7, r1
 80042dc:	f7fc f92a 	bl	8000534 <__aeabi_i2d>
 80042e0:	a361      	add	r3, pc, #388	; (adr r3, 8004468 <_dtoa_r+0x2c8>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fc f98f 	bl	8000608 <__aeabi_dmul>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4630      	mov	r0, r6
 80042f0:	4639      	mov	r1, r7
 80042f2:	f7fb ffd3 	bl	800029c <__adddf3>
 80042f6:	4606      	mov	r6, r0
 80042f8:	460f      	mov	r7, r1
 80042fa:	f7fc fc35 	bl	8000b68 <__aeabi_d2iz>
 80042fe:	2200      	movs	r2, #0
 8004300:	9000      	str	r0, [sp, #0]
 8004302:	2300      	movs	r3, #0
 8004304:	4630      	mov	r0, r6
 8004306:	4639      	mov	r1, r7
 8004308:	f7fc fbf0 	bl	8000aec <__aeabi_dcmplt>
 800430c:	b150      	cbz	r0, 8004324 <_dtoa_r+0x184>
 800430e:	9800      	ldr	r0, [sp, #0]
 8004310:	f7fc f910 	bl	8000534 <__aeabi_i2d>
 8004314:	4632      	mov	r2, r6
 8004316:	463b      	mov	r3, r7
 8004318:	f7fc fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 800431c:	b910      	cbnz	r0, 8004324 <_dtoa_r+0x184>
 800431e:	9b00      	ldr	r3, [sp, #0]
 8004320:	3b01      	subs	r3, #1
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	9b00      	ldr	r3, [sp, #0]
 8004326:	2b16      	cmp	r3, #22
 8004328:	d85a      	bhi.n	80043e0 <_dtoa_r+0x240>
 800432a:	9a00      	ldr	r2, [sp, #0]
 800432c:	4b57      	ldr	r3, [pc, #348]	; (800448c <_dtoa_r+0x2ec>)
 800432e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	ec51 0b19 	vmov	r0, r1, d9
 800433a:	f7fc fbd7 	bl	8000aec <__aeabi_dcmplt>
 800433e:	2800      	cmp	r0, #0
 8004340:	d050      	beq.n	80043e4 <_dtoa_r+0x244>
 8004342:	9b00      	ldr	r3, [sp, #0]
 8004344:	3b01      	subs	r3, #1
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	930b      	str	r3, [sp, #44]	; 0x2c
 800434c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800434e:	1b5d      	subs	r5, r3, r5
 8004350:	1e6b      	subs	r3, r5, #1
 8004352:	9305      	str	r3, [sp, #20]
 8004354:	bf45      	ittet	mi
 8004356:	f1c5 0301 	rsbmi	r3, r5, #1
 800435a:	9304      	strmi	r3, [sp, #16]
 800435c:	2300      	movpl	r3, #0
 800435e:	2300      	movmi	r3, #0
 8004360:	bf4c      	ite	mi
 8004362:	9305      	strmi	r3, [sp, #20]
 8004364:	9304      	strpl	r3, [sp, #16]
 8004366:	9b00      	ldr	r3, [sp, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	db3d      	blt.n	80043e8 <_dtoa_r+0x248>
 800436c:	9b05      	ldr	r3, [sp, #20]
 800436e:	9a00      	ldr	r2, [sp, #0]
 8004370:	920a      	str	r2, [sp, #40]	; 0x28
 8004372:	4413      	add	r3, r2
 8004374:	9305      	str	r3, [sp, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	9307      	str	r3, [sp, #28]
 800437a:	9b06      	ldr	r3, [sp, #24]
 800437c:	2b09      	cmp	r3, #9
 800437e:	f200 8089 	bhi.w	8004494 <_dtoa_r+0x2f4>
 8004382:	2b05      	cmp	r3, #5
 8004384:	bfc4      	itt	gt
 8004386:	3b04      	subgt	r3, #4
 8004388:	9306      	strgt	r3, [sp, #24]
 800438a:	9b06      	ldr	r3, [sp, #24]
 800438c:	f1a3 0302 	sub.w	r3, r3, #2
 8004390:	bfcc      	ite	gt
 8004392:	2500      	movgt	r5, #0
 8004394:	2501      	movle	r5, #1
 8004396:	2b03      	cmp	r3, #3
 8004398:	f200 8087 	bhi.w	80044aa <_dtoa_r+0x30a>
 800439c:	e8df f003 	tbb	[pc, r3]
 80043a0:	59383a2d 	.word	0x59383a2d
 80043a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80043a8:	441d      	add	r5, r3
 80043aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	bfc1      	itttt	gt
 80043b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80043b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80043ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80043be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80043c2:	bfda      	itte	le
 80043c4:	f1c3 0320 	rsble	r3, r3, #32
 80043c8:	fa06 f003 	lslle.w	r0, r6, r3
 80043cc:	4318      	orrgt	r0, r3
 80043ce:	f7fc f8a1 	bl	8000514 <__aeabi_ui2d>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4606      	mov	r6, r0
 80043d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80043da:	3d01      	subs	r5, #1
 80043dc:	930e      	str	r3, [sp, #56]	; 0x38
 80043de:	e76a      	b.n	80042b6 <_dtoa_r+0x116>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e7b2      	b.n	800434a <_dtoa_r+0x1aa>
 80043e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80043e6:	e7b1      	b.n	800434c <_dtoa_r+0x1ac>
 80043e8:	9b04      	ldr	r3, [sp, #16]
 80043ea:	9a00      	ldr	r2, [sp, #0]
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	4253      	negs	r3, r2
 80043f2:	9307      	str	r3, [sp, #28]
 80043f4:	2300      	movs	r3, #0
 80043f6:	930a      	str	r3, [sp, #40]	; 0x28
 80043f8:	e7bf      	b.n	800437a <_dtoa_r+0x1da>
 80043fa:	2300      	movs	r3, #0
 80043fc:	9308      	str	r3, [sp, #32]
 80043fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	dc55      	bgt.n	80044b0 <_dtoa_r+0x310>
 8004404:	2301      	movs	r3, #1
 8004406:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800440a:	461a      	mov	r2, r3
 800440c:	9209      	str	r2, [sp, #36]	; 0x24
 800440e:	e00c      	b.n	800442a <_dtoa_r+0x28a>
 8004410:	2301      	movs	r3, #1
 8004412:	e7f3      	b.n	80043fc <_dtoa_r+0x25c>
 8004414:	2300      	movs	r3, #0
 8004416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004418:	9308      	str	r3, [sp, #32]
 800441a:	9b00      	ldr	r3, [sp, #0]
 800441c:	4413      	add	r3, r2
 800441e:	9302      	str	r3, [sp, #8]
 8004420:	3301      	adds	r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	9303      	str	r3, [sp, #12]
 8004426:	bfb8      	it	lt
 8004428:	2301      	movlt	r3, #1
 800442a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800442c:	2200      	movs	r2, #0
 800442e:	6042      	str	r2, [r0, #4]
 8004430:	2204      	movs	r2, #4
 8004432:	f102 0614 	add.w	r6, r2, #20
 8004436:	429e      	cmp	r6, r3
 8004438:	6841      	ldr	r1, [r0, #4]
 800443a:	d93d      	bls.n	80044b8 <_dtoa_r+0x318>
 800443c:	4620      	mov	r0, r4
 800443e:	f000 fcb7 	bl	8004db0 <_Balloc>
 8004442:	9001      	str	r0, [sp, #4]
 8004444:	2800      	cmp	r0, #0
 8004446:	d13b      	bne.n	80044c0 <_dtoa_r+0x320>
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <_dtoa_r+0x2f0>)
 800444a:	4602      	mov	r2, r0
 800444c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004450:	e6c0      	b.n	80041d4 <_dtoa_r+0x34>
 8004452:	2301      	movs	r3, #1
 8004454:	e7df      	b.n	8004416 <_dtoa_r+0x276>
 8004456:	bf00      	nop
 8004458:	636f4361 	.word	0x636f4361
 800445c:	3fd287a7 	.word	0x3fd287a7
 8004460:	8b60c8b3 	.word	0x8b60c8b3
 8004464:	3fc68a28 	.word	0x3fc68a28
 8004468:	509f79fb 	.word	0x509f79fb
 800446c:	3fd34413 	.word	0x3fd34413
 8004470:	0800712d 	.word	0x0800712d
 8004474:	08007144 	.word	0x08007144
 8004478:	7ff00000 	.word	0x7ff00000
 800447c:	08007129 	.word	0x08007129
 8004480:	08007120 	.word	0x08007120
 8004484:	080070fd 	.word	0x080070fd
 8004488:	3ff80000 	.word	0x3ff80000
 800448c:	08007238 	.word	0x08007238
 8004490:	0800719f 	.word	0x0800719f
 8004494:	2501      	movs	r5, #1
 8004496:	2300      	movs	r3, #0
 8004498:	9306      	str	r3, [sp, #24]
 800449a:	9508      	str	r5, [sp, #32]
 800449c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2312      	movs	r3, #18
 80044a8:	e7b0      	b.n	800440c <_dtoa_r+0x26c>
 80044aa:	2301      	movs	r3, #1
 80044ac:	9308      	str	r3, [sp, #32]
 80044ae:	e7f5      	b.n	800449c <_dtoa_r+0x2fc>
 80044b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044b6:	e7b8      	b.n	800442a <_dtoa_r+0x28a>
 80044b8:	3101      	adds	r1, #1
 80044ba:	6041      	str	r1, [r0, #4]
 80044bc:	0052      	lsls	r2, r2, #1
 80044be:	e7b8      	b.n	8004432 <_dtoa_r+0x292>
 80044c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044c2:	9a01      	ldr	r2, [sp, #4]
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	9b03      	ldr	r3, [sp, #12]
 80044c8:	2b0e      	cmp	r3, #14
 80044ca:	f200 809d 	bhi.w	8004608 <_dtoa_r+0x468>
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	f000 809a 	beq.w	8004608 <_dtoa_r+0x468>
 80044d4:	9b00      	ldr	r3, [sp, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	dd32      	ble.n	8004540 <_dtoa_r+0x3a0>
 80044da:	4ab7      	ldr	r2, [pc, #732]	; (80047b8 <_dtoa_r+0x618>)
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044e8:	9b00      	ldr	r3, [sp, #0]
 80044ea:	05d8      	lsls	r0, r3, #23
 80044ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80044f0:	d516      	bpl.n	8004520 <_dtoa_r+0x380>
 80044f2:	4bb2      	ldr	r3, [pc, #712]	; (80047bc <_dtoa_r+0x61c>)
 80044f4:	ec51 0b19 	vmov	r0, r1, d9
 80044f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044fc:	f7fc f9ae 	bl	800085c <__aeabi_ddiv>
 8004500:	f007 070f 	and.w	r7, r7, #15
 8004504:	4682      	mov	sl, r0
 8004506:	468b      	mov	fp, r1
 8004508:	2503      	movs	r5, #3
 800450a:	4eac      	ldr	r6, [pc, #688]	; (80047bc <_dtoa_r+0x61c>)
 800450c:	b957      	cbnz	r7, 8004524 <_dtoa_r+0x384>
 800450e:	4642      	mov	r2, r8
 8004510:	464b      	mov	r3, r9
 8004512:	4650      	mov	r0, sl
 8004514:	4659      	mov	r1, fp
 8004516:	f7fc f9a1 	bl	800085c <__aeabi_ddiv>
 800451a:	4682      	mov	sl, r0
 800451c:	468b      	mov	fp, r1
 800451e:	e028      	b.n	8004572 <_dtoa_r+0x3d2>
 8004520:	2502      	movs	r5, #2
 8004522:	e7f2      	b.n	800450a <_dtoa_r+0x36a>
 8004524:	07f9      	lsls	r1, r7, #31
 8004526:	d508      	bpl.n	800453a <_dtoa_r+0x39a>
 8004528:	4640      	mov	r0, r8
 800452a:	4649      	mov	r1, r9
 800452c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004530:	f7fc f86a 	bl	8000608 <__aeabi_dmul>
 8004534:	3501      	adds	r5, #1
 8004536:	4680      	mov	r8, r0
 8004538:	4689      	mov	r9, r1
 800453a:	107f      	asrs	r7, r7, #1
 800453c:	3608      	adds	r6, #8
 800453e:	e7e5      	b.n	800450c <_dtoa_r+0x36c>
 8004540:	f000 809b 	beq.w	800467a <_dtoa_r+0x4da>
 8004544:	9b00      	ldr	r3, [sp, #0]
 8004546:	4f9d      	ldr	r7, [pc, #628]	; (80047bc <_dtoa_r+0x61c>)
 8004548:	425e      	negs	r6, r3
 800454a:	4b9b      	ldr	r3, [pc, #620]	; (80047b8 <_dtoa_r+0x618>)
 800454c:	f006 020f 	and.w	r2, r6, #15
 8004550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	ec51 0b19 	vmov	r0, r1, d9
 800455c:	f7fc f854 	bl	8000608 <__aeabi_dmul>
 8004560:	1136      	asrs	r6, r6, #4
 8004562:	4682      	mov	sl, r0
 8004564:	468b      	mov	fp, r1
 8004566:	2300      	movs	r3, #0
 8004568:	2502      	movs	r5, #2
 800456a:	2e00      	cmp	r6, #0
 800456c:	d17a      	bne.n	8004664 <_dtoa_r+0x4c4>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1d3      	bne.n	800451a <_dtoa_r+0x37a>
 8004572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8082 	beq.w	800467e <_dtoa_r+0x4de>
 800457a:	4b91      	ldr	r3, [pc, #580]	; (80047c0 <_dtoa_r+0x620>)
 800457c:	2200      	movs	r2, #0
 800457e:	4650      	mov	r0, sl
 8004580:	4659      	mov	r1, fp
 8004582:	f7fc fab3 	bl	8000aec <__aeabi_dcmplt>
 8004586:	2800      	cmp	r0, #0
 8004588:	d079      	beq.n	800467e <_dtoa_r+0x4de>
 800458a:	9b03      	ldr	r3, [sp, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d076      	beq.n	800467e <_dtoa_r+0x4de>
 8004590:	9b02      	ldr	r3, [sp, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	dd36      	ble.n	8004604 <_dtoa_r+0x464>
 8004596:	9b00      	ldr	r3, [sp, #0]
 8004598:	4650      	mov	r0, sl
 800459a:	4659      	mov	r1, fp
 800459c:	1e5f      	subs	r7, r3, #1
 800459e:	2200      	movs	r2, #0
 80045a0:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <_dtoa_r+0x624>)
 80045a2:	f7fc f831 	bl	8000608 <__aeabi_dmul>
 80045a6:	9e02      	ldr	r6, [sp, #8]
 80045a8:	4682      	mov	sl, r0
 80045aa:	468b      	mov	fp, r1
 80045ac:	3501      	adds	r5, #1
 80045ae:	4628      	mov	r0, r5
 80045b0:	f7fb ffc0 	bl	8000534 <__aeabi_i2d>
 80045b4:	4652      	mov	r2, sl
 80045b6:	465b      	mov	r3, fp
 80045b8:	f7fc f826 	bl	8000608 <__aeabi_dmul>
 80045bc:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <_dtoa_r+0x628>)
 80045be:	2200      	movs	r2, #0
 80045c0:	f7fb fe6c 	bl	800029c <__adddf3>
 80045c4:	46d0      	mov	r8, sl
 80045c6:	46d9      	mov	r9, fp
 80045c8:	4682      	mov	sl, r0
 80045ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	d158      	bne.n	8004684 <_dtoa_r+0x4e4>
 80045d2:	4b7e      	ldr	r3, [pc, #504]	; (80047cc <_dtoa_r+0x62c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	4640      	mov	r0, r8
 80045d8:	4649      	mov	r1, r9
 80045da:	f7fb fe5d 	bl	8000298 <__aeabi_dsub>
 80045de:	4652      	mov	r2, sl
 80045e0:	465b      	mov	r3, fp
 80045e2:	4680      	mov	r8, r0
 80045e4:	4689      	mov	r9, r1
 80045e6:	f7fc fa9f 	bl	8000b28 <__aeabi_dcmpgt>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	f040 8295 	bne.w	8004b1a <_dtoa_r+0x97a>
 80045f0:	4652      	mov	r2, sl
 80045f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80045f6:	4640      	mov	r0, r8
 80045f8:	4649      	mov	r1, r9
 80045fa:	f7fc fa77 	bl	8000aec <__aeabi_dcmplt>
 80045fe:	2800      	cmp	r0, #0
 8004600:	f040 8289 	bne.w	8004b16 <_dtoa_r+0x976>
 8004604:	ec5b ab19 	vmov	sl, fp, d9
 8004608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800460a:	2b00      	cmp	r3, #0
 800460c:	f2c0 8148 	blt.w	80048a0 <_dtoa_r+0x700>
 8004610:	9a00      	ldr	r2, [sp, #0]
 8004612:	2a0e      	cmp	r2, #14
 8004614:	f300 8144 	bgt.w	80048a0 <_dtoa_r+0x700>
 8004618:	4b67      	ldr	r3, [pc, #412]	; (80047b8 <_dtoa_r+0x618>)
 800461a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800461e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	f280 80d5 	bge.w	80047d4 <_dtoa_r+0x634>
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f300 80d1 	bgt.w	80047d4 <_dtoa_r+0x634>
 8004632:	f040 826f 	bne.w	8004b14 <_dtoa_r+0x974>
 8004636:	4b65      	ldr	r3, [pc, #404]	; (80047cc <_dtoa_r+0x62c>)
 8004638:	2200      	movs	r2, #0
 800463a:	4640      	mov	r0, r8
 800463c:	4649      	mov	r1, r9
 800463e:	f7fb ffe3 	bl	8000608 <__aeabi_dmul>
 8004642:	4652      	mov	r2, sl
 8004644:	465b      	mov	r3, fp
 8004646:	f7fc fa65 	bl	8000b14 <__aeabi_dcmpge>
 800464a:	9e03      	ldr	r6, [sp, #12]
 800464c:	4637      	mov	r7, r6
 800464e:	2800      	cmp	r0, #0
 8004650:	f040 8245 	bne.w	8004ade <_dtoa_r+0x93e>
 8004654:	9d01      	ldr	r5, [sp, #4]
 8004656:	2331      	movs	r3, #49	; 0x31
 8004658:	f805 3b01 	strb.w	r3, [r5], #1
 800465c:	9b00      	ldr	r3, [sp, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	e240      	b.n	8004ae6 <_dtoa_r+0x946>
 8004664:	07f2      	lsls	r2, r6, #31
 8004666:	d505      	bpl.n	8004674 <_dtoa_r+0x4d4>
 8004668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800466c:	f7fb ffcc 	bl	8000608 <__aeabi_dmul>
 8004670:	3501      	adds	r5, #1
 8004672:	2301      	movs	r3, #1
 8004674:	1076      	asrs	r6, r6, #1
 8004676:	3708      	adds	r7, #8
 8004678:	e777      	b.n	800456a <_dtoa_r+0x3ca>
 800467a:	2502      	movs	r5, #2
 800467c:	e779      	b.n	8004572 <_dtoa_r+0x3d2>
 800467e:	9f00      	ldr	r7, [sp, #0]
 8004680:	9e03      	ldr	r6, [sp, #12]
 8004682:	e794      	b.n	80045ae <_dtoa_r+0x40e>
 8004684:	9901      	ldr	r1, [sp, #4]
 8004686:	4b4c      	ldr	r3, [pc, #304]	; (80047b8 <_dtoa_r+0x618>)
 8004688:	4431      	add	r1, r6
 800468a:	910d      	str	r1, [sp, #52]	; 0x34
 800468c:	9908      	ldr	r1, [sp, #32]
 800468e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004692:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004696:	2900      	cmp	r1, #0
 8004698:	d043      	beq.n	8004722 <_dtoa_r+0x582>
 800469a:	494d      	ldr	r1, [pc, #308]	; (80047d0 <_dtoa_r+0x630>)
 800469c:	2000      	movs	r0, #0
 800469e:	f7fc f8dd 	bl	800085c <__aeabi_ddiv>
 80046a2:	4652      	mov	r2, sl
 80046a4:	465b      	mov	r3, fp
 80046a6:	f7fb fdf7 	bl	8000298 <__aeabi_dsub>
 80046aa:	9d01      	ldr	r5, [sp, #4]
 80046ac:	4682      	mov	sl, r0
 80046ae:	468b      	mov	fp, r1
 80046b0:	4649      	mov	r1, r9
 80046b2:	4640      	mov	r0, r8
 80046b4:	f7fc fa58 	bl	8000b68 <__aeabi_d2iz>
 80046b8:	4606      	mov	r6, r0
 80046ba:	f7fb ff3b 	bl	8000534 <__aeabi_i2d>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4640      	mov	r0, r8
 80046c4:	4649      	mov	r1, r9
 80046c6:	f7fb fde7 	bl	8000298 <__aeabi_dsub>
 80046ca:	3630      	adds	r6, #48	; 0x30
 80046cc:	f805 6b01 	strb.w	r6, [r5], #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	465b      	mov	r3, fp
 80046d4:	4680      	mov	r8, r0
 80046d6:	4689      	mov	r9, r1
 80046d8:	f7fc fa08 	bl	8000aec <__aeabi_dcmplt>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d163      	bne.n	80047a8 <_dtoa_r+0x608>
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	4936      	ldr	r1, [pc, #216]	; (80047c0 <_dtoa_r+0x620>)
 80046e6:	2000      	movs	r0, #0
 80046e8:	f7fb fdd6 	bl	8000298 <__aeabi_dsub>
 80046ec:	4652      	mov	r2, sl
 80046ee:	465b      	mov	r3, fp
 80046f0:	f7fc f9fc 	bl	8000aec <__aeabi_dcmplt>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f040 80b5 	bne.w	8004864 <_dtoa_r+0x6c4>
 80046fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046fc:	429d      	cmp	r5, r3
 80046fe:	d081      	beq.n	8004604 <_dtoa_r+0x464>
 8004700:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <_dtoa_r+0x624>)
 8004702:	2200      	movs	r2, #0
 8004704:	4650      	mov	r0, sl
 8004706:	4659      	mov	r1, fp
 8004708:	f7fb ff7e 	bl	8000608 <__aeabi_dmul>
 800470c:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <_dtoa_r+0x624>)
 800470e:	4682      	mov	sl, r0
 8004710:	468b      	mov	fp, r1
 8004712:	4640      	mov	r0, r8
 8004714:	4649      	mov	r1, r9
 8004716:	2200      	movs	r2, #0
 8004718:	f7fb ff76 	bl	8000608 <__aeabi_dmul>
 800471c:	4680      	mov	r8, r0
 800471e:	4689      	mov	r9, r1
 8004720:	e7c6      	b.n	80046b0 <_dtoa_r+0x510>
 8004722:	4650      	mov	r0, sl
 8004724:	4659      	mov	r1, fp
 8004726:	f7fb ff6f 	bl	8000608 <__aeabi_dmul>
 800472a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800472c:	9d01      	ldr	r5, [sp, #4]
 800472e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004730:	4682      	mov	sl, r0
 8004732:	468b      	mov	fp, r1
 8004734:	4649      	mov	r1, r9
 8004736:	4640      	mov	r0, r8
 8004738:	f7fc fa16 	bl	8000b68 <__aeabi_d2iz>
 800473c:	4606      	mov	r6, r0
 800473e:	f7fb fef9 	bl	8000534 <__aeabi_i2d>
 8004742:	3630      	adds	r6, #48	; 0x30
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4640      	mov	r0, r8
 800474a:	4649      	mov	r1, r9
 800474c:	f7fb fda4 	bl	8000298 <__aeabi_dsub>
 8004750:	f805 6b01 	strb.w	r6, [r5], #1
 8004754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004756:	429d      	cmp	r5, r3
 8004758:	4680      	mov	r8, r0
 800475a:	4689      	mov	r9, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	d124      	bne.n	80047ac <_dtoa_r+0x60c>
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <_dtoa_r+0x630>)
 8004764:	4650      	mov	r0, sl
 8004766:	4659      	mov	r1, fp
 8004768:	f7fb fd98 	bl	800029c <__adddf3>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4640      	mov	r0, r8
 8004772:	4649      	mov	r1, r9
 8004774:	f7fc f9d8 	bl	8000b28 <__aeabi_dcmpgt>
 8004778:	2800      	cmp	r0, #0
 800477a:	d173      	bne.n	8004864 <_dtoa_r+0x6c4>
 800477c:	4652      	mov	r2, sl
 800477e:	465b      	mov	r3, fp
 8004780:	4913      	ldr	r1, [pc, #76]	; (80047d0 <_dtoa_r+0x630>)
 8004782:	2000      	movs	r0, #0
 8004784:	f7fb fd88 	bl	8000298 <__aeabi_dsub>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4640      	mov	r0, r8
 800478e:	4649      	mov	r1, r9
 8004790:	f7fc f9ac 	bl	8000aec <__aeabi_dcmplt>
 8004794:	2800      	cmp	r0, #0
 8004796:	f43f af35 	beq.w	8004604 <_dtoa_r+0x464>
 800479a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800479c:	1e6b      	subs	r3, r5, #1
 800479e:	930f      	str	r3, [sp, #60]	; 0x3c
 80047a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047a4:	2b30      	cmp	r3, #48	; 0x30
 80047a6:	d0f8      	beq.n	800479a <_dtoa_r+0x5fa>
 80047a8:	9700      	str	r7, [sp, #0]
 80047aa:	e049      	b.n	8004840 <_dtoa_r+0x6a0>
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <_dtoa_r+0x624>)
 80047ae:	f7fb ff2b 	bl	8000608 <__aeabi_dmul>
 80047b2:	4680      	mov	r8, r0
 80047b4:	4689      	mov	r9, r1
 80047b6:	e7bd      	b.n	8004734 <_dtoa_r+0x594>
 80047b8:	08007238 	.word	0x08007238
 80047bc:	08007210 	.word	0x08007210
 80047c0:	3ff00000 	.word	0x3ff00000
 80047c4:	40240000 	.word	0x40240000
 80047c8:	401c0000 	.word	0x401c0000
 80047cc:	40140000 	.word	0x40140000
 80047d0:	3fe00000 	.word	0x3fe00000
 80047d4:	9d01      	ldr	r5, [sp, #4]
 80047d6:	4656      	mov	r6, sl
 80047d8:	465f      	mov	r7, fp
 80047da:	4642      	mov	r2, r8
 80047dc:	464b      	mov	r3, r9
 80047de:	4630      	mov	r0, r6
 80047e0:	4639      	mov	r1, r7
 80047e2:	f7fc f83b 	bl	800085c <__aeabi_ddiv>
 80047e6:	f7fc f9bf 	bl	8000b68 <__aeabi_d2iz>
 80047ea:	4682      	mov	sl, r0
 80047ec:	f7fb fea2 	bl	8000534 <__aeabi_i2d>
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	f7fb ff08 	bl	8000608 <__aeabi_dmul>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4630      	mov	r0, r6
 80047fe:	4639      	mov	r1, r7
 8004800:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004804:	f7fb fd48 	bl	8000298 <__aeabi_dsub>
 8004808:	f805 6b01 	strb.w	r6, [r5], #1
 800480c:	9e01      	ldr	r6, [sp, #4]
 800480e:	9f03      	ldr	r7, [sp, #12]
 8004810:	1bae      	subs	r6, r5, r6
 8004812:	42b7      	cmp	r7, r6
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	d135      	bne.n	8004886 <_dtoa_r+0x6e6>
 800481a:	f7fb fd3f 	bl	800029c <__adddf3>
 800481e:	4642      	mov	r2, r8
 8004820:	464b      	mov	r3, r9
 8004822:	4606      	mov	r6, r0
 8004824:	460f      	mov	r7, r1
 8004826:	f7fc f97f 	bl	8000b28 <__aeabi_dcmpgt>
 800482a:	b9d0      	cbnz	r0, 8004862 <_dtoa_r+0x6c2>
 800482c:	4642      	mov	r2, r8
 800482e:	464b      	mov	r3, r9
 8004830:	4630      	mov	r0, r6
 8004832:	4639      	mov	r1, r7
 8004834:	f7fc f950 	bl	8000ad8 <__aeabi_dcmpeq>
 8004838:	b110      	cbz	r0, 8004840 <_dtoa_r+0x6a0>
 800483a:	f01a 0f01 	tst.w	sl, #1
 800483e:	d110      	bne.n	8004862 <_dtoa_r+0x6c2>
 8004840:	4620      	mov	r0, r4
 8004842:	ee18 1a10 	vmov	r1, s16
 8004846:	f000 faf3 	bl	8004e30 <_Bfree>
 800484a:	2300      	movs	r3, #0
 800484c:	9800      	ldr	r0, [sp, #0]
 800484e:	702b      	strb	r3, [r5, #0]
 8004850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004852:	3001      	adds	r0, #1
 8004854:	6018      	str	r0, [r3, #0]
 8004856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004858:	2b00      	cmp	r3, #0
 800485a:	f43f acf1 	beq.w	8004240 <_dtoa_r+0xa0>
 800485e:	601d      	str	r5, [r3, #0]
 8004860:	e4ee      	b.n	8004240 <_dtoa_r+0xa0>
 8004862:	9f00      	ldr	r7, [sp, #0]
 8004864:	462b      	mov	r3, r5
 8004866:	461d      	mov	r5, r3
 8004868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800486c:	2a39      	cmp	r2, #57	; 0x39
 800486e:	d106      	bne.n	800487e <_dtoa_r+0x6de>
 8004870:	9a01      	ldr	r2, [sp, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d1f7      	bne.n	8004866 <_dtoa_r+0x6c6>
 8004876:	9901      	ldr	r1, [sp, #4]
 8004878:	2230      	movs	r2, #48	; 0x30
 800487a:	3701      	adds	r7, #1
 800487c:	700a      	strb	r2, [r1, #0]
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	3201      	adds	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e790      	b.n	80047a8 <_dtoa_r+0x608>
 8004886:	4ba6      	ldr	r3, [pc, #664]	; (8004b20 <_dtoa_r+0x980>)
 8004888:	2200      	movs	r2, #0
 800488a:	f7fb febd 	bl	8000608 <__aeabi_dmul>
 800488e:	2200      	movs	r2, #0
 8004890:	2300      	movs	r3, #0
 8004892:	4606      	mov	r6, r0
 8004894:	460f      	mov	r7, r1
 8004896:	f7fc f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800489a:	2800      	cmp	r0, #0
 800489c:	d09d      	beq.n	80047da <_dtoa_r+0x63a>
 800489e:	e7cf      	b.n	8004840 <_dtoa_r+0x6a0>
 80048a0:	9a08      	ldr	r2, [sp, #32]
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	f000 80d7 	beq.w	8004a56 <_dtoa_r+0x8b6>
 80048a8:	9a06      	ldr	r2, [sp, #24]
 80048aa:	2a01      	cmp	r2, #1
 80048ac:	f300 80ba 	bgt.w	8004a24 <_dtoa_r+0x884>
 80048b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048b2:	2a00      	cmp	r2, #0
 80048b4:	f000 80b2 	beq.w	8004a1c <_dtoa_r+0x87c>
 80048b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048bc:	9e07      	ldr	r6, [sp, #28]
 80048be:	9d04      	ldr	r5, [sp, #16]
 80048c0:	9a04      	ldr	r2, [sp, #16]
 80048c2:	441a      	add	r2, r3
 80048c4:	9204      	str	r2, [sp, #16]
 80048c6:	9a05      	ldr	r2, [sp, #20]
 80048c8:	2101      	movs	r1, #1
 80048ca:	441a      	add	r2, r3
 80048cc:	4620      	mov	r0, r4
 80048ce:	9205      	str	r2, [sp, #20]
 80048d0:	f000 fb66 	bl	8004fa0 <__i2b>
 80048d4:	4607      	mov	r7, r0
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	dd0c      	ble.n	80048f4 <_dtoa_r+0x754>
 80048da:	9b05      	ldr	r3, [sp, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	dd09      	ble.n	80048f4 <_dtoa_r+0x754>
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	9a04      	ldr	r2, [sp, #16]
 80048e4:	bfa8      	it	ge
 80048e6:	462b      	movge	r3, r5
 80048e8:	1ad2      	subs	r2, r2, r3
 80048ea:	9204      	str	r2, [sp, #16]
 80048ec:	9a05      	ldr	r2, [sp, #20]
 80048ee:	1aed      	subs	r5, r5, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	9305      	str	r3, [sp, #20]
 80048f4:	9b07      	ldr	r3, [sp, #28]
 80048f6:	b31b      	cbz	r3, 8004940 <_dtoa_r+0x7a0>
 80048f8:	9b08      	ldr	r3, [sp, #32]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80af 	beq.w	8004a5e <_dtoa_r+0x8be>
 8004900:	2e00      	cmp	r6, #0
 8004902:	dd13      	ble.n	800492c <_dtoa_r+0x78c>
 8004904:	4639      	mov	r1, r7
 8004906:	4632      	mov	r2, r6
 8004908:	4620      	mov	r0, r4
 800490a:	f000 fc09 	bl	8005120 <__pow5mult>
 800490e:	ee18 2a10 	vmov	r2, s16
 8004912:	4601      	mov	r1, r0
 8004914:	4607      	mov	r7, r0
 8004916:	4620      	mov	r0, r4
 8004918:	f000 fb58 	bl	8004fcc <__multiply>
 800491c:	ee18 1a10 	vmov	r1, s16
 8004920:	4680      	mov	r8, r0
 8004922:	4620      	mov	r0, r4
 8004924:	f000 fa84 	bl	8004e30 <_Bfree>
 8004928:	ee08 8a10 	vmov	s16, r8
 800492c:	9b07      	ldr	r3, [sp, #28]
 800492e:	1b9a      	subs	r2, r3, r6
 8004930:	d006      	beq.n	8004940 <_dtoa_r+0x7a0>
 8004932:	ee18 1a10 	vmov	r1, s16
 8004936:	4620      	mov	r0, r4
 8004938:	f000 fbf2 	bl	8005120 <__pow5mult>
 800493c:	ee08 0a10 	vmov	s16, r0
 8004940:	2101      	movs	r1, #1
 8004942:	4620      	mov	r0, r4
 8004944:	f000 fb2c 	bl	8004fa0 <__i2b>
 8004948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	4606      	mov	r6, r0
 800494e:	f340 8088 	ble.w	8004a62 <_dtoa_r+0x8c2>
 8004952:	461a      	mov	r2, r3
 8004954:	4601      	mov	r1, r0
 8004956:	4620      	mov	r0, r4
 8004958:	f000 fbe2 	bl	8005120 <__pow5mult>
 800495c:	9b06      	ldr	r3, [sp, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	4606      	mov	r6, r0
 8004962:	f340 8081 	ble.w	8004a68 <_dtoa_r+0x8c8>
 8004966:	f04f 0800 	mov.w	r8, #0
 800496a:	6933      	ldr	r3, [r6, #16]
 800496c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004970:	6918      	ldr	r0, [r3, #16]
 8004972:	f000 fac5 	bl	8004f00 <__hi0bits>
 8004976:	f1c0 0020 	rsb	r0, r0, #32
 800497a:	9b05      	ldr	r3, [sp, #20]
 800497c:	4418      	add	r0, r3
 800497e:	f010 001f 	ands.w	r0, r0, #31
 8004982:	f000 8092 	beq.w	8004aaa <_dtoa_r+0x90a>
 8004986:	f1c0 0320 	rsb	r3, r0, #32
 800498a:	2b04      	cmp	r3, #4
 800498c:	f340 808a 	ble.w	8004aa4 <_dtoa_r+0x904>
 8004990:	f1c0 001c 	rsb	r0, r0, #28
 8004994:	9b04      	ldr	r3, [sp, #16]
 8004996:	4403      	add	r3, r0
 8004998:	9304      	str	r3, [sp, #16]
 800499a:	9b05      	ldr	r3, [sp, #20]
 800499c:	4403      	add	r3, r0
 800499e:	4405      	add	r5, r0
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	9b04      	ldr	r3, [sp, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dd07      	ble.n	80049b8 <_dtoa_r+0x818>
 80049a8:	ee18 1a10 	vmov	r1, s16
 80049ac:	461a      	mov	r2, r3
 80049ae:	4620      	mov	r0, r4
 80049b0:	f000 fc10 	bl	80051d4 <__lshift>
 80049b4:	ee08 0a10 	vmov	s16, r0
 80049b8:	9b05      	ldr	r3, [sp, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dd05      	ble.n	80049ca <_dtoa_r+0x82a>
 80049be:	4631      	mov	r1, r6
 80049c0:	461a      	mov	r2, r3
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 fc06 	bl	80051d4 <__lshift>
 80049c8:	4606      	mov	r6, r0
 80049ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d06e      	beq.n	8004aae <_dtoa_r+0x90e>
 80049d0:	ee18 0a10 	vmov	r0, s16
 80049d4:	4631      	mov	r1, r6
 80049d6:	f000 fc6d 	bl	80052b4 <__mcmp>
 80049da:	2800      	cmp	r0, #0
 80049dc:	da67      	bge.n	8004aae <_dtoa_r+0x90e>
 80049de:	9b00      	ldr	r3, [sp, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	ee18 1a10 	vmov	r1, s16
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	220a      	movs	r2, #10
 80049ea:	2300      	movs	r3, #0
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 fa41 	bl	8004e74 <__multadd>
 80049f2:	9b08      	ldr	r3, [sp, #32]
 80049f4:	ee08 0a10 	vmov	s16, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 81b1 	beq.w	8004d60 <_dtoa_r+0xbc0>
 80049fe:	2300      	movs	r3, #0
 8004a00:	4639      	mov	r1, r7
 8004a02:	220a      	movs	r2, #10
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 fa35 	bl	8004e74 <__multadd>
 8004a0a:	9b02      	ldr	r3, [sp, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	4607      	mov	r7, r0
 8004a10:	f300 808e 	bgt.w	8004b30 <_dtoa_r+0x990>
 8004a14:	9b06      	ldr	r3, [sp, #24]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	dc51      	bgt.n	8004abe <_dtoa_r+0x91e>
 8004a1a:	e089      	b.n	8004b30 <_dtoa_r+0x990>
 8004a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a22:	e74b      	b.n	80048bc <_dtoa_r+0x71c>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	1e5e      	subs	r6, r3, #1
 8004a28:	9b07      	ldr	r3, [sp, #28]
 8004a2a:	42b3      	cmp	r3, r6
 8004a2c:	bfbf      	itttt	lt
 8004a2e:	9b07      	ldrlt	r3, [sp, #28]
 8004a30:	9607      	strlt	r6, [sp, #28]
 8004a32:	1af2      	sublt	r2, r6, r3
 8004a34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a36:	bfb6      	itet	lt
 8004a38:	189b      	addlt	r3, r3, r2
 8004a3a:	1b9e      	subge	r6, r3, r6
 8004a3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	bfb8      	it	lt
 8004a42:	2600      	movlt	r6, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bfb7      	itett	lt
 8004a48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004a4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004a50:	1a9d      	sublt	r5, r3, r2
 8004a52:	2300      	movlt	r3, #0
 8004a54:	e734      	b.n	80048c0 <_dtoa_r+0x720>
 8004a56:	9e07      	ldr	r6, [sp, #28]
 8004a58:	9d04      	ldr	r5, [sp, #16]
 8004a5a:	9f08      	ldr	r7, [sp, #32]
 8004a5c:	e73b      	b.n	80048d6 <_dtoa_r+0x736>
 8004a5e:	9a07      	ldr	r2, [sp, #28]
 8004a60:	e767      	b.n	8004932 <_dtoa_r+0x792>
 8004a62:	9b06      	ldr	r3, [sp, #24]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	dc18      	bgt.n	8004a9a <_dtoa_r+0x8fa>
 8004a68:	f1ba 0f00 	cmp.w	sl, #0
 8004a6c:	d115      	bne.n	8004a9a <_dtoa_r+0x8fa>
 8004a6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a72:	b993      	cbnz	r3, 8004a9a <_dtoa_r+0x8fa>
 8004a74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a78:	0d1b      	lsrs	r3, r3, #20
 8004a7a:	051b      	lsls	r3, r3, #20
 8004a7c:	b183      	cbz	r3, 8004aa0 <_dtoa_r+0x900>
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	9b05      	ldr	r3, [sp, #20]
 8004a86:	3301      	adds	r3, #1
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	f04f 0801 	mov.w	r8, #1
 8004a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f af6a 	bne.w	800496a <_dtoa_r+0x7ca>
 8004a96:	2001      	movs	r0, #1
 8004a98:	e76f      	b.n	800497a <_dtoa_r+0x7da>
 8004a9a:	f04f 0800 	mov.w	r8, #0
 8004a9e:	e7f6      	b.n	8004a8e <_dtoa_r+0x8ee>
 8004aa0:	4698      	mov	r8, r3
 8004aa2:	e7f4      	b.n	8004a8e <_dtoa_r+0x8ee>
 8004aa4:	f43f af7d 	beq.w	80049a2 <_dtoa_r+0x802>
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	301c      	adds	r0, #28
 8004aac:	e772      	b.n	8004994 <_dtoa_r+0x7f4>
 8004aae:	9b03      	ldr	r3, [sp, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dc37      	bgt.n	8004b24 <_dtoa_r+0x984>
 8004ab4:	9b06      	ldr	r3, [sp, #24]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	dd34      	ble.n	8004b24 <_dtoa_r+0x984>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	9b02      	ldr	r3, [sp, #8]
 8004ac0:	b96b      	cbnz	r3, 8004ade <_dtoa_r+0x93e>
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 f9d4 	bl	8004e74 <__multadd>
 8004acc:	4601      	mov	r1, r0
 8004ace:	4606      	mov	r6, r0
 8004ad0:	ee18 0a10 	vmov	r0, s16
 8004ad4:	f000 fbee 	bl	80052b4 <__mcmp>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	f73f adbb 	bgt.w	8004654 <_dtoa_r+0x4b4>
 8004ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae0:	9d01      	ldr	r5, [sp, #4]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	f04f 0800 	mov.w	r8, #0
 8004aea:	4631      	mov	r1, r6
 8004aec:	4620      	mov	r0, r4
 8004aee:	f000 f99f 	bl	8004e30 <_Bfree>
 8004af2:	2f00      	cmp	r7, #0
 8004af4:	f43f aea4 	beq.w	8004840 <_dtoa_r+0x6a0>
 8004af8:	f1b8 0f00 	cmp.w	r8, #0
 8004afc:	d005      	beq.n	8004b0a <_dtoa_r+0x96a>
 8004afe:	45b8      	cmp	r8, r7
 8004b00:	d003      	beq.n	8004b0a <_dtoa_r+0x96a>
 8004b02:	4641      	mov	r1, r8
 8004b04:	4620      	mov	r0, r4
 8004b06:	f000 f993 	bl	8004e30 <_Bfree>
 8004b0a:	4639      	mov	r1, r7
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 f98f 	bl	8004e30 <_Bfree>
 8004b12:	e695      	b.n	8004840 <_dtoa_r+0x6a0>
 8004b14:	2600      	movs	r6, #0
 8004b16:	4637      	mov	r7, r6
 8004b18:	e7e1      	b.n	8004ade <_dtoa_r+0x93e>
 8004b1a:	9700      	str	r7, [sp, #0]
 8004b1c:	4637      	mov	r7, r6
 8004b1e:	e599      	b.n	8004654 <_dtoa_r+0x4b4>
 8004b20:	40240000 	.word	0x40240000
 8004b24:	9b08      	ldr	r3, [sp, #32]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80ca 	beq.w	8004cc0 <_dtoa_r+0xb20>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	2d00      	cmp	r5, #0
 8004b32:	dd05      	ble.n	8004b40 <_dtoa_r+0x9a0>
 8004b34:	4639      	mov	r1, r7
 8004b36:	462a      	mov	r2, r5
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 fb4b 	bl	80051d4 <__lshift>
 8004b3e:	4607      	mov	r7, r0
 8004b40:	f1b8 0f00 	cmp.w	r8, #0
 8004b44:	d05b      	beq.n	8004bfe <_dtoa_r+0xa5e>
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 f931 	bl	8004db0 <_Balloc>
 8004b4e:	4605      	mov	r5, r0
 8004b50:	b928      	cbnz	r0, 8004b5e <_dtoa_r+0x9be>
 8004b52:	4b87      	ldr	r3, [pc, #540]	; (8004d70 <_dtoa_r+0xbd0>)
 8004b54:	4602      	mov	r2, r0
 8004b56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b5a:	f7ff bb3b 	b.w	80041d4 <_dtoa_r+0x34>
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	3202      	adds	r2, #2
 8004b62:	0092      	lsls	r2, r2, #2
 8004b64:	f107 010c 	add.w	r1, r7, #12
 8004b68:	300c      	adds	r0, #12
 8004b6a:	f000 f913 	bl	8004d94 <memcpy>
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4629      	mov	r1, r5
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fb2e 	bl	80051d4 <__lshift>
 8004b78:	9b01      	ldr	r3, [sp, #4]
 8004b7a:	f103 0901 	add.w	r9, r3, #1
 8004b7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	9305      	str	r3, [sp, #20]
 8004b86:	f00a 0301 	and.w	r3, sl, #1
 8004b8a:	46b8      	mov	r8, r7
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	4607      	mov	r7, r0
 8004b90:	4631      	mov	r1, r6
 8004b92:	ee18 0a10 	vmov	r0, s16
 8004b96:	f7ff fa75 	bl	8004084 <quorem>
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004ba2:	ee18 0a10 	vmov	r0, s16
 8004ba6:	f000 fb85 	bl	80052b4 <__mcmp>
 8004baa:	463a      	mov	r2, r7
 8004bac:	9003      	str	r0, [sp, #12]
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 fb9b 	bl	80052ec <__mdiff>
 8004bb6:	68c2      	ldr	r2, [r0, #12]
 8004bb8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	bb02      	cbnz	r2, 8004c02 <_dtoa_r+0xa62>
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	ee18 0a10 	vmov	r0, s16
 8004bc6:	f000 fb75 	bl	80052b4 <__mcmp>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4629      	mov	r1, r5
 8004bce:	4620      	mov	r0, r4
 8004bd0:	9207      	str	r2, [sp, #28]
 8004bd2:	f000 f92d 	bl	8004e30 <_Bfree>
 8004bd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004bda:	ea43 0102 	orr.w	r1, r3, r2
 8004bde:	9b04      	ldr	r3, [sp, #16]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	464d      	mov	r5, r9
 8004be4:	d10f      	bne.n	8004c06 <_dtoa_r+0xa66>
 8004be6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bea:	d02a      	beq.n	8004c42 <_dtoa_r+0xaa2>
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dd02      	ble.n	8004bf8 <_dtoa_r+0xa58>
 8004bf2:	9b02      	ldr	r3, [sp, #8]
 8004bf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004bf8:	f88b a000 	strb.w	sl, [fp]
 8004bfc:	e775      	b.n	8004aea <_dtoa_r+0x94a>
 8004bfe:	4638      	mov	r0, r7
 8004c00:	e7ba      	b.n	8004b78 <_dtoa_r+0x9d8>
 8004c02:	2201      	movs	r2, #1
 8004c04:	e7e2      	b.n	8004bcc <_dtoa_r+0xa2c>
 8004c06:	9b03      	ldr	r3, [sp, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db04      	blt.n	8004c16 <_dtoa_r+0xa76>
 8004c0c:	9906      	ldr	r1, [sp, #24]
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	9904      	ldr	r1, [sp, #16]
 8004c12:	430b      	orrs	r3, r1
 8004c14:	d122      	bne.n	8004c5c <_dtoa_r+0xabc>
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	ddee      	ble.n	8004bf8 <_dtoa_r+0xa58>
 8004c1a:	ee18 1a10 	vmov	r1, s16
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4620      	mov	r0, r4
 8004c22:	f000 fad7 	bl	80051d4 <__lshift>
 8004c26:	4631      	mov	r1, r6
 8004c28:	ee08 0a10 	vmov	s16, r0
 8004c2c:	f000 fb42 	bl	80052b4 <__mcmp>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	dc03      	bgt.n	8004c3c <_dtoa_r+0xa9c>
 8004c34:	d1e0      	bne.n	8004bf8 <_dtoa_r+0xa58>
 8004c36:	f01a 0f01 	tst.w	sl, #1
 8004c3a:	d0dd      	beq.n	8004bf8 <_dtoa_r+0xa58>
 8004c3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c40:	d1d7      	bne.n	8004bf2 <_dtoa_r+0xa52>
 8004c42:	2339      	movs	r3, #57	; 0x39
 8004c44:	f88b 3000 	strb.w	r3, [fp]
 8004c48:	462b      	mov	r3, r5
 8004c4a:	461d      	mov	r5, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c52:	2a39      	cmp	r2, #57	; 0x39
 8004c54:	d071      	beq.n	8004d3a <_dtoa_r+0xb9a>
 8004c56:	3201      	adds	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e746      	b.n	8004aea <_dtoa_r+0x94a>
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	dd07      	ble.n	8004c70 <_dtoa_r+0xad0>
 8004c60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c64:	d0ed      	beq.n	8004c42 <_dtoa_r+0xaa2>
 8004c66:	f10a 0301 	add.w	r3, sl, #1
 8004c6a:	f88b 3000 	strb.w	r3, [fp]
 8004c6e:	e73c      	b.n	8004aea <_dtoa_r+0x94a>
 8004c70:	9b05      	ldr	r3, [sp, #20]
 8004c72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004c76:	4599      	cmp	r9, r3
 8004c78:	d047      	beq.n	8004d0a <_dtoa_r+0xb6a>
 8004c7a:	ee18 1a10 	vmov	r1, s16
 8004c7e:	2300      	movs	r3, #0
 8004c80:	220a      	movs	r2, #10
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f8f6 	bl	8004e74 <__multadd>
 8004c88:	45b8      	cmp	r8, r7
 8004c8a:	ee08 0a10 	vmov	s16, r0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	f04f 020a 	mov.w	r2, #10
 8004c96:	4641      	mov	r1, r8
 8004c98:	4620      	mov	r0, r4
 8004c9a:	d106      	bne.n	8004caa <_dtoa_r+0xb0a>
 8004c9c:	f000 f8ea 	bl	8004e74 <__multadd>
 8004ca0:	4680      	mov	r8, r0
 8004ca2:	4607      	mov	r7, r0
 8004ca4:	f109 0901 	add.w	r9, r9, #1
 8004ca8:	e772      	b.n	8004b90 <_dtoa_r+0x9f0>
 8004caa:	f000 f8e3 	bl	8004e74 <__multadd>
 8004cae:	4639      	mov	r1, r7
 8004cb0:	4680      	mov	r8, r0
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	220a      	movs	r2, #10
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 f8dc 	bl	8004e74 <__multadd>
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	e7f1      	b.n	8004ca4 <_dtoa_r+0xb04>
 8004cc0:	9b03      	ldr	r3, [sp, #12]
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	9d01      	ldr	r5, [sp, #4]
 8004cc6:	ee18 0a10 	vmov	r0, s16
 8004cca:	4631      	mov	r1, r6
 8004ccc:	f7ff f9da 	bl	8004084 <quorem>
 8004cd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004cd4:	9b01      	ldr	r3, [sp, #4]
 8004cd6:	f805 ab01 	strb.w	sl, [r5], #1
 8004cda:	1aea      	subs	r2, r5, r3
 8004cdc:	9b02      	ldr	r3, [sp, #8]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	dd09      	ble.n	8004cf6 <_dtoa_r+0xb56>
 8004ce2:	ee18 1a10 	vmov	r1, s16
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	220a      	movs	r2, #10
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 f8c2 	bl	8004e74 <__multadd>
 8004cf0:	ee08 0a10 	vmov	s16, r0
 8004cf4:	e7e7      	b.n	8004cc6 <_dtoa_r+0xb26>
 8004cf6:	9b02      	ldr	r3, [sp, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfc8      	it	gt
 8004cfc:	461d      	movgt	r5, r3
 8004cfe:	9b01      	ldr	r3, [sp, #4]
 8004d00:	bfd8      	it	le
 8004d02:	2501      	movle	r5, #1
 8004d04:	441d      	add	r5, r3
 8004d06:	f04f 0800 	mov.w	r8, #0
 8004d0a:	ee18 1a10 	vmov	r1, s16
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 fa5f 	bl	80051d4 <__lshift>
 8004d16:	4631      	mov	r1, r6
 8004d18:	ee08 0a10 	vmov	s16, r0
 8004d1c:	f000 faca 	bl	80052b4 <__mcmp>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	dc91      	bgt.n	8004c48 <_dtoa_r+0xaa8>
 8004d24:	d102      	bne.n	8004d2c <_dtoa_r+0xb8c>
 8004d26:	f01a 0f01 	tst.w	sl, #1
 8004d2a:	d18d      	bne.n	8004c48 <_dtoa_r+0xaa8>
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	461d      	mov	r5, r3
 8004d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d34:	2a30      	cmp	r2, #48	; 0x30
 8004d36:	d0fa      	beq.n	8004d2e <_dtoa_r+0xb8e>
 8004d38:	e6d7      	b.n	8004aea <_dtoa_r+0x94a>
 8004d3a:	9a01      	ldr	r2, [sp, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d184      	bne.n	8004c4a <_dtoa_r+0xaaa>
 8004d40:	9b00      	ldr	r3, [sp, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	2331      	movs	r3, #49	; 0x31
 8004d48:	7013      	strb	r3, [r2, #0]
 8004d4a:	e6ce      	b.n	8004aea <_dtoa_r+0x94a>
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <_dtoa_r+0xbd4>)
 8004d4e:	f7ff ba95 	b.w	800427c <_dtoa_r+0xdc>
 8004d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f aa6e 	bne.w	8004236 <_dtoa_r+0x96>
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <_dtoa_r+0xbd8>)
 8004d5c:	f7ff ba8e 	b.w	800427c <_dtoa_r+0xdc>
 8004d60:	9b02      	ldr	r3, [sp, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	dcae      	bgt.n	8004cc4 <_dtoa_r+0xb24>
 8004d66:	9b06      	ldr	r3, [sp, #24]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	f73f aea8 	bgt.w	8004abe <_dtoa_r+0x91e>
 8004d6e:	e7a9      	b.n	8004cc4 <_dtoa_r+0xb24>
 8004d70:	0800719f 	.word	0x0800719f
 8004d74:	080070fc 	.word	0x080070fc
 8004d78:	08007120 	.word	0x08007120

08004d7c <_localeconv_r>:
 8004d7c:	4800      	ldr	r0, [pc, #0]	; (8004d80 <_localeconv_r+0x4>)
 8004d7e:	4770      	bx	lr
 8004d80:	2000015c 	.word	0x2000015c

08004d84 <malloc>:
 8004d84:	4b02      	ldr	r3, [pc, #8]	; (8004d90 <malloc+0xc>)
 8004d86:	4601      	mov	r1, r0
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f000 bc17 	b.w	80055bc <_malloc_r>
 8004d8e:	bf00      	nop
 8004d90:	20000008 	.word	0x20000008

08004d94 <memcpy>:
 8004d94:	440a      	add	r2, r1
 8004d96:	4291      	cmp	r1, r2
 8004d98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d9c:	d100      	bne.n	8004da0 <memcpy+0xc>
 8004d9e:	4770      	bx	lr
 8004da0:	b510      	push	{r4, lr}
 8004da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004daa:	4291      	cmp	r1, r2
 8004dac:	d1f9      	bne.n	8004da2 <memcpy+0xe>
 8004dae:	bd10      	pop	{r4, pc}

08004db0 <_Balloc>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004db4:	4604      	mov	r4, r0
 8004db6:	460d      	mov	r5, r1
 8004db8:	b976      	cbnz	r6, 8004dd8 <_Balloc+0x28>
 8004dba:	2010      	movs	r0, #16
 8004dbc:	f7ff ffe2 	bl	8004d84 <malloc>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6260      	str	r0, [r4, #36]	; 0x24
 8004dc4:	b920      	cbnz	r0, 8004dd0 <_Balloc+0x20>
 8004dc6:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <_Balloc+0x78>)
 8004dc8:	4818      	ldr	r0, [pc, #96]	; (8004e2c <_Balloc+0x7c>)
 8004dca:	2166      	movs	r1, #102	; 0x66
 8004dcc:	f000 fc7a 	bl	80056c4 <__assert_func>
 8004dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dd4:	6006      	str	r6, [r0, #0]
 8004dd6:	60c6      	str	r6, [r0, #12]
 8004dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004dda:	68f3      	ldr	r3, [r6, #12]
 8004ddc:	b183      	cbz	r3, 8004e00 <_Balloc+0x50>
 8004dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004de6:	b9b8      	cbnz	r0, 8004e18 <_Balloc+0x68>
 8004de8:	2101      	movs	r1, #1
 8004dea:	fa01 f605 	lsl.w	r6, r1, r5
 8004dee:	1d72      	adds	r2, r6, #5
 8004df0:	0092      	lsls	r2, r2, #2
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 fb60 	bl	80054b8 <_calloc_r>
 8004df8:	b160      	cbz	r0, 8004e14 <_Balloc+0x64>
 8004dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dfe:	e00e      	b.n	8004e1e <_Balloc+0x6e>
 8004e00:	2221      	movs	r2, #33	; 0x21
 8004e02:	2104      	movs	r1, #4
 8004e04:	4620      	mov	r0, r4
 8004e06:	f000 fb57 	bl	80054b8 <_calloc_r>
 8004e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e0c:	60f0      	str	r0, [r6, #12]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e4      	bne.n	8004dde <_Balloc+0x2e>
 8004e14:	2000      	movs	r0, #0
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	6802      	ldr	r2, [r0, #0]
 8004e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e24:	e7f7      	b.n	8004e16 <_Balloc+0x66>
 8004e26:	bf00      	nop
 8004e28:	0800712d 	.word	0x0800712d
 8004e2c:	080071b0 	.word	0x080071b0

08004e30 <_Bfree>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e34:	4605      	mov	r5, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	b976      	cbnz	r6, 8004e58 <_Bfree+0x28>
 8004e3a:	2010      	movs	r0, #16
 8004e3c:	f7ff ffa2 	bl	8004d84 <malloc>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6268      	str	r0, [r5, #36]	; 0x24
 8004e44:	b920      	cbnz	r0, 8004e50 <_Bfree+0x20>
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <_Bfree+0x3c>)
 8004e48:	4809      	ldr	r0, [pc, #36]	; (8004e70 <_Bfree+0x40>)
 8004e4a:	218a      	movs	r1, #138	; 0x8a
 8004e4c:	f000 fc3a 	bl	80056c4 <__assert_func>
 8004e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e54:	6006      	str	r6, [r0, #0]
 8004e56:	60c6      	str	r6, [r0, #12]
 8004e58:	b13c      	cbz	r4, 8004e6a <_Bfree+0x3a>
 8004e5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e5c:	6862      	ldr	r2, [r4, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e64:	6021      	str	r1, [r4, #0]
 8004e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	0800712d 	.word	0x0800712d
 8004e70:	080071b0 	.word	0x080071b0

08004e74 <__multadd>:
 8004e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	690d      	ldr	r5, [r1, #16]
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	461e      	mov	r6, r3
 8004e80:	f101 0c14 	add.w	ip, r1, #20
 8004e84:	2000      	movs	r0, #0
 8004e86:	f8dc 3000 	ldr.w	r3, [ip]
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	fb02 6101 	mla	r1, r2, r1, r6
 8004e90:	0c1e      	lsrs	r6, r3, #16
 8004e92:	0c0b      	lsrs	r3, r1, #16
 8004e94:	fb02 3306 	mla	r3, r2, r6, r3
 8004e98:	b289      	uxth	r1, r1
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ea0:	4285      	cmp	r5, r0
 8004ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8004ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004eaa:	dcec      	bgt.n	8004e86 <__multadd+0x12>
 8004eac:	b30e      	cbz	r6, 8004ef2 <__multadd+0x7e>
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	dc19      	bgt.n	8004ee8 <__multadd+0x74>
 8004eb4:	6861      	ldr	r1, [r4, #4]
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	3101      	adds	r1, #1
 8004eba:	f7ff ff79 	bl	8004db0 <_Balloc>
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	b928      	cbnz	r0, 8004ece <__multadd+0x5a>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <__multadd+0x84>)
 8004ec6:	480d      	ldr	r0, [pc, #52]	; (8004efc <__multadd+0x88>)
 8004ec8:	21b5      	movs	r1, #181	; 0xb5
 8004eca:	f000 fbfb 	bl	80056c4 <__assert_func>
 8004ece:	6922      	ldr	r2, [r4, #16]
 8004ed0:	3202      	adds	r2, #2
 8004ed2:	f104 010c 	add.w	r1, r4, #12
 8004ed6:	0092      	lsls	r2, r2, #2
 8004ed8:	300c      	adds	r0, #12
 8004eda:	f7ff ff5b 	bl	8004d94 <memcpy>
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	f7ff ffa5 	bl	8004e30 <_Bfree>
 8004ee6:	4644      	mov	r4, r8
 8004ee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004eec:	3501      	adds	r5, #1
 8004eee:	615e      	str	r6, [r3, #20]
 8004ef0:	6125      	str	r5, [r4, #16]
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef8:	0800719f 	.word	0x0800719f
 8004efc:	080071b0 	.word	0x080071b0

08004f00 <__hi0bits>:
 8004f00:	0c03      	lsrs	r3, r0, #16
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	b9d3      	cbnz	r3, 8004f3c <__hi0bits+0x3c>
 8004f06:	0400      	lsls	r0, r0, #16
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f0e:	bf04      	itt	eq
 8004f10:	0200      	lsleq	r0, r0, #8
 8004f12:	3308      	addeq	r3, #8
 8004f14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f18:	bf04      	itt	eq
 8004f1a:	0100      	lsleq	r0, r0, #4
 8004f1c:	3304      	addeq	r3, #4
 8004f1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f22:	bf04      	itt	eq
 8004f24:	0080      	lsleq	r0, r0, #2
 8004f26:	3302      	addeq	r3, #2
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	db05      	blt.n	8004f38 <__hi0bits+0x38>
 8004f2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f30:	f103 0301 	add.w	r3, r3, #1
 8004f34:	bf08      	it	eq
 8004f36:	2320      	moveq	r3, #32
 8004f38:	4618      	mov	r0, r3
 8004f3a:	4770      	bx	lr
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e7e4      	b.n	8004f0a <__hi0bits+0xa>

08004f40 <__lo0bits>:
 8004f40:	6803      	ldr	r3, [r0, #0]
 8004f42:	f013 0207 	ands.w	r2, r3, #7
 8004f46:	4601      	mov	r1, r0
 8004f48:	d00b      	beq.n	8004f62 <__lo0bits+0x22>
 8004f4a:	07da      	lsls	r2, r3, #31
 8004f4c:	d423      	bmi.n	8004f96 <__lo0bits+0x56>
 8004f4e:	0798      	lsls	r0, r3, #30
 8004f50:	bf49      	itett	mi
 8004f52:	085b      	lsrmi	r3, r3, #1
 8004f54:	089b      	lsrpl	r3, r3, #2
 8004f56:	2001      	movmi	r0, #1
 8004f58:	600b      	strmi	r3, [r1, #0]
 8004f5a:	bf5c      	itt	pl
 8004f5c:	600b      	strpl	r3, [r1, #0]
 8004f5e:	2002      	movpl	r0, #2
 8004f60:	4770      	bx	lr
 8004f62:	b298      	uxth	r0, r3
 8004f64:	b9a8      	cbnz	r0, 8004f92 <__lo0bits+0x52>
 8004f66:	0c1b      	lsrs	r3, r3, #16
 8004f68:	2010      	movs	r0, #16
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	b90a      	cbnz	r2, 8004f72 <__lo0bits+0x32>
 8004f6e:	3008      	adds	r0, #8
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	071a      	lsls	r2, r3, #28
 8004f74:	bf04      	itt	eq
 8004f76:	091b      	lsreq	r3, r3, #4
 8004f78:	3004      	addeq	r0, #4
 8004f7a:	079a      	lsls	r2, r3, #30
 8004f7c:	bf04      	itt	eq
 8004f7e:	089b      	lsreq	r3, r3, #2
 8004f80:	3002      	addeq	r0, #2
 8004f82:	07da      	lsls	r2, r3, #31
 8004f84:	d403      	bmi.n	8004f8e <__lo0bits+0x4e>
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	f100 0001 	add.w	r0, r0, #1
 8004f8c:	d005      	beq.n	8004f9a <__lo0bits+0x5a>
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	4770      	bx	lr
 8004f92:	4610      	mov	r0, r2
 8004f94:	e7e9      	b.n	8004f6a <__lo0bits+0x2a>
 8004f96:	2000      	movs	r0, #0
 8004f98:	4770      	bx	lr
 8004f9a:	2020      	movs	r0, #32
 8004f9c:	4770      	bx	lr
	...

08004fa0 <__i2b>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	f7ff ff03 	bl	8004db0 <_Balloc>
 8004faa:	4602      	mov	r2, r0
 8004fac:	b928      	cbnz	r0, 8004fba <__i2b+0x1a>
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <__i2b+0x24>)
 8004fb0:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <__i2b+0x28>)
 8004fb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fb6:	f000 fb85 	bl	80056c4 <__assert_func>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	6144      	str	r4, [r0, #20]
 8004fbe:	6103      	str	r3, [r0, #16]
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	0800719f 	.word	0x0800719f
 8004fc8:	080071b0 	.word	0x080071b0

08004fcc <__multiply>:
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	4691      	mov	r9, r2
 8004fd2:	690a      	ldr	r2, [r1, #16]
 8004fd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	bfb8      	it	lt
 8004fdc:	460b      	movlt	r3, r1
 8004fde:	460c      	mov	r4, r1
 8004fe0:	bfbc      	itt	lt
 8004fe2:	464c      	movlt	r4, r9
 8004fe4:	4699      	movlt	r9, r3
 8004fe6:	6927      	ldr	r7, [r4, #16]
 8004fe8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004fec:	68a3      	ldr	r3, [r4, #8]
 8004fee:	6861      	ldr	r1, [r4, #4]
 8004ff0:	eb07 060a 	add.w	r6, r7, sl
 8004ff4:	42b3      	cmp	r3, r6
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	bfb8      	it	lt
 8004ffa:	3101      	addlt	r1, #1
 8004ffc:	f7ff fed8 	bl	8004db0 <_Balloc>
 8005000:	b930      	cbnz	r0, 8005010 <__multiply+0x44>
 8005002:	4602      	mov	r2, r0
 8005004:	4b44      	ldr	r3, [pc, #272]	; (8005118 <__multiply+0x14c>)
 8005006:	4845      	ldr	r0, [pc, #276]	; (800511c <__multiply+0x150>)
 8005008:	f240 115d 	movw	r1, #349	; 0x15d
 800500c:	f000 fb5a 	bl	80056c4 <__assert_func>
 8005010:	f100 0514 	add.w	r5, r0, #20
 8005014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005018:	462b      	mov	r3, r5
 800501a:	2200      	movs	r2, #0
 800501c:	4543      	cmp	r3, r8
 800501e:	d321      	bcc.n	8005064 <__multiply+0x98>
 8005020:	f104 0314 	add.w	r3, r4, #20
 8005024:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005028:	f109 0314 	add.w	r3, r9, #20
 800502c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005030:	9202      	str	r2, [sp, #8]
 8005032:	1b3a      	subs	r2, r7, r4
 8005034:	3a15      	subs	r2, #21
 8005036:	f022 0203 	bic.w	r2, r2, #3
 800503a:	3204      	adds	r2, #4
 800503c:	f104 0115 	add.w	r1, r4, #21
 8005040:	428f      	cmp	r7, r1
 8005042:	bf38      	it	cc
 8005044:	2204      	movcc	r2, #4
 8005046:	9201      	str	r2, [sp, #4]
 8005048:	9a02      	ldr	r2, [sp, #8]
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	429a      	cmp	r2, r3
 800504e:	d80c      	bhi.n	800506a <__multiply+0x9e>
 8005050:	2e00      	cmp	r6, #0
 8005052:	dd03      	ble.n	800505c <__multiply+0x90>
 8005054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05a      	beq.n	8005112 <__multiply+0x146>
 800505c:	6106      	str	r6, [r0, #16]
 800505e:	b005      	add	sp, #20
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	f843 2b04 	str.w	r2, [r3], #4
 8005068:	e7d8      	b.n	800501c <__multiply+0x50>
 800506a:	f8b3 a000 	ldrh.w	sl, [r3]
 800506e:	f1ba 0f00 	cmp.w	sl, #0
 8005072:	d024      	beq.n	80050be <__multiply+0xf2>
 8005074:	f104 0e14 	add.w	lr, r4, #20
 8005078:	46a9      	mov	r9, r5
 800507a:	f04f 0c00 	mov.w	ip, #0
 800507e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005082:	f8d9 1000 	ldr.w	r1, [r9]
 8005086:	fa1f fb82 	uxth.w	fp, r2
 800508a:	b289      	uxth	r1, r1
 800508c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005090:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005094:	f8d9 2000 	ldr.w	r2, [r9]
 8005098:	4461      	add	r1, ip
 800509a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800509e:	fb0a c20b 	mla	r2, sl, fp, ip
 80050a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80050a6:	b289      	uxth	r1, r1
 80050a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050ac:	4577      	cmp	r7, lr
 80050ae:	f849 1b04 	str.w	r1, [r9], #4
 80050b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050b6:	d8e2      	bhi.n	800507e <__multiply+0xb2>
 80050b8:	9a01      	ldr	r2, [sp, #4]
 80050ba:	f845 c002 	str.w	ip, [r5, r2]
 80050be:	9a03      	ldr	r2, [sp, #12]
 80050c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050c4:	3304      	adds	r3, #4
 80050c6:	f1b9 0f00 	cmp.w	r9, #0
 80050ca:	d020      	beq.n	800510e <__multiply+0x142>
 80050cc:	6829      	ldr	r1, [r5, #0]
 80050ce:	f104 0c14 	add.w	ip, r4, #20
 80050d2:	46ae      	mov	lr, r5
 80050d4:	f04f 0a00 	mov.w	sl, #0
 80050d8:	f8bc b000 	ldrh.w	fp, [ip]
 80050dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80050e0:	fb09 220b 	mla	r2, r9, fp, r2
 80050e4:	4492      	add	sl, r2
 80050e6:	b289      	uxth	r1, r1
 80050e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80050ec:	f84e 1b04 	str.w	r1, [lr], #4
 80050f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80050f4:	f8be 1000 	ldrh.w	r1, [lr]
 80050f8:	0c12      	lsrs	r2, r2, #16
 80050fa:	fb09 1102 	mla	r1, r9, r2, r1
 80050fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005102:	4567      	cmp	r7, ip
 8005104:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005108:	d8e6      	bhi.n	80050d8 <__multiply+0x10c>
 800510a:	9a01      	ldr	r2, [sp, #4]
 800510c:	50a9      	str	r1, [r5, r2]
 800510e:	3504      	adds	r5, #4
 8005110:	e79a      	b.n	8005048 <__multiply+0x7c>
 8005112:	3e01      	subs	r6, #1
 8005114:	e79c      	b.n	8005050 <__multiply+0x84>
 8005116:	bf00      	nop
 8005118:	0800719f 	.word	0x0800719f
 800511c:	080071b0 	.word	0x080071b0

08005120 <__pow5mult>:
 8005120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005124:	4615      	mov	r5, r2
 8005126:	f012 0203 	ands.w	r2, r2, #3
 800512a:	4606      	mov	r6, r0
 800512c:	460f      	mov	r7, r1
 800512e:	d007      	beq.n	8005140 <__pow5mult+0x20>
 8005130:	4c25      	ldr	r4, [pc, #148]	; (80051c8 <__pow5mult+0xa8>)
 8005132:	3a01      	subs	r2, #1
 8005134:	2300      	movs	r3, #0
 8005136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800513a:	f7ff fe9b 	bl	8004e74 <__multadd>
 800513e:	4607      	mov	r7, r0
 8005140:	10ad      	asrs	r5, r5, #2
 8005142:	d03d      	beq.n	80051c0 <__pow5mult+0xa0>
 8005144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005146:	b97c      	cbnz	r4, 8005168 <__pow5mult+0x48>
 8005148:	2010      	movs	r0, #16
 800514a:	f7ff fe1b 	bl	8004d84 <malloc>
 800514e:	4602      	mov	r2, r0
 8005150:	6270      	str	r0, [r6, #36]	; 0x24
 8005152:	b928      	cbnz	r0, 8005160 <__pow5mult+0x40>
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <__pow5mult+0xac>)
 8005156:	481e      	ldr	r0, [pc, #120]	; (80051d0 <__pow5mult+0xb0>)
 8005158:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800515c:	f000 fab2 	bl	80056c4 <__assert_func>
 8005160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005164:	6004      	str	r4, [r0, #0]
 8005166:	60c4      	str	r4, [r0, #12]
 8005168:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800516c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005170:	b94c      	cbnz	r4, 8005186 <__pow5mult+0x66>
 8005172:	f240 2171 	movw	r1, #625	; 0x271
 8005176:	4630      	mov	r0, r6
 8005178:	f7ff ff12 	bl	8004fa0 <__i2b>
 800517c:	2300      	movs	r3, #0
 800517e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005182:	4604      	mov	r4, r0
 8005184:	6003      	str	r3, [r0, #0]
 8005186:	f04f 0900 	mov.w	r9, #0
 800518a:	07eb      	lsls	r3, r5, #31
 800518c:	d50a      	bpl.n	80051a4 <__pow5mult+0x84>
 800518e:	4639      	mov	r1, r7
 8005190:	4622      	mov	r2, r4
 8005192:	4630      	mov	r0, r6
 8005194:	f7ff ff1a 	bl	8004fcc <__multiply>
 8005198:	4639      	mov	r1, r7
 800519a:	4680      	mov	r8, r0
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff fe47 	bl	8004e30 <_Bfree>
 80051a2:	4647      	mov	r7, r8
 80051a4:	106d      	asrs	r5, r5, #1
 80051a6:	d00b      	beq.n	80051c0 <__pow5mult+0xa0>
 80051a8:	6820      	ldr	r0, [r4, #0]
 80051aa:	b938      	cbnz	r0, 80051bc <__pow5mult+0x9c>
 80051ac:	4622      	mov	r2, r4
 80051ae:	4621      	mov	r1, r4
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7ff ff0b 	bl	8004fcc <__multiply>
 80051b6:	6020      	str	r0, [r4, #0]
 80051b8:	f8c0 9000 	str.w	r9, [r0]
 80051bc:	4604      	mov	r4, r0
 80051be:	e7e4      	b.n	800518a <__pow5mult+0x6a>
 80051c0:	4638      	mov	r0, r7
 80051c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c6:	bf00      	nop
 80051c8:	08007300 	.word	0x08007300
 80051cc:	0800712d 	.word	0x0800712d
 80051d0:	080071b0 	.word	0x080071b0

080051d4 <__lshift>:
 80051d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	460c      	mov	r4, r1
 80051da:	6849      	ldr	r1, [r1, #4]
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051e2:	68a3      	ldr	r3, [r4, #8]
 80051e4:	4607      	mov	r7, r0
 80051e6:	4691      	mov	r9, r2
 80051e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051ec:	f108 0601 	add.w	r6, r8, #1
 80051f0:	42b3      	cmp	r3, r6
 80051f2:	db0b      	blt.n	800520c <__lshift+0x38>
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff fddb 	bl	8004db0 <_Balloc>
 80051fa:	4605      	mov	r5, r0
 80051fc:	b948      	cbnz	r0, 8005212 <__lshift+0x3e>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b2a      	ldr	r3, [pc, #168]	; (80052ac <__lshift+0xd8>)
 8005202:	482b      	ldr	r0, [pc, #172]	; (80052b0 <__lshift+0xdc>)
 8005204:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005208:	f000 fa5c 	bl	80056c4 <__assert_func>
 800520c:	3101      	adds	r1, #1
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	e7ee      	b.n	80051f0 <__lshift+0x1c>
 8005212:	2300      	movs	r3, #0
 8005214:	f100 0114 	add.w	r1, r0, #20
 8005218:	f100 0210 	add.w	r2, r0, #16
 800521c:	4618      	mov	r0, r3
 800521e:	4553      	cmp	r3, sl
 8005220:	db37      	blt.n	8005292 <__lshift+0xbe>
 8005222:	6920      	ldr	r0, [r4, #16]
 8005224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005228:	f104 0314 	add.w	r3, r4, #20
 800522c:	f019 091f 	ands.w	r9, r9, #31
 8005230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005234:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005238:	d02f      	beq.n	800529a <__lshift+0xc6>
 800523a:	f1c9 0e20 	rsb	lr, r9, #32
 800523e:	468a      	mov	sl, r1
 8005240:	f04f 0c00 	mov.w	ip, #0
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	fa02 f209 	lsl.w	r2, r2, r9
 800524a:	ea42 020c 	orr.w	r2, r2, ip
 800524e:	f84a 2b04 	str.w	r2, [sl], #4
 8005252:	f853 2b04 	ldr.w	r2, [r3], #4
 8005256:	4298      	cmp	r0, r3
 8005258:	fa22 fc0e 	lsr.w	ip, r2, lr
 800525c:	d8f2      	bhi.n	8005244 <__lshift+0x70>
 800525e:	1b03      	subs	r3, r0, r4
 8005260:	3b15      	subs	r3, #21
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	3304      	adds	r3, #4
 8005268:	f104 0215 	add.w	r2, r4, #21
 800526c:	4290      	cmp	r0, r2
 800526e:	bf38      	it	cc
 8005270:	2304      	movcc	r3, #4
 8005272:	f841 c003 	str.w	ip, [r1, r3]
 8005276:	f1bc 0f00 	cmp.w	ip, #0
 800527a:	d001      	beq.n	8005280 <__lshift+0xac>
 800527c:	f108 0602 	add.w	r6, r8, #2
 8005280:	3e01      	subs	r6, #1
 8005282:	4638      	mov	r0, r7
 8005284:	612e      	str	r6, [r5, #16]
 8005286:	4621      	mov	r1, r4
 8005288:	f7ff fdd2 	bl	8004e30 <_Bfree>
 800528c:	4628      	mov	r0, r5
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	f842 0f04 	str.w	r0, [r2, #4]!
 8005296:	3301      	adds	r3, #1
 8005298:	e7c1      	b.n	800521e <__lshift+0x4a>
 800529a:	3904      	subs	r1, #4
 800529c:	f853 2b04 	ldr.w	r2, [r3], #4
 80052a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80052a4:	4298      	cmp	r0, r3
 80052a6:	d8f9      	bhi.n	800529c <__lshift+0xc8>
 80052a8:	e7ea      	b.n	8005280 <__lshift+0xac>
 80052aa:	bf00      	nop
 80052ac:	0800719f 	.word	0x0800719f
 80052b0:	080071b0 	.word	0x080071b0

080052b4 <__mcmp>:
 80052b4:	b530      	push	{r4, r5, lr}
 80052b6:	6902      	ldr	r2, [r0, #16]
 80052b8:	690c      	ldr	r4, [r1, #16]
 80052ba:	1b12      	subs	r2, r2, r4
 80052bc:	d10e      	bne.n	80052dc <__mcmp+0x28>
 80052be:	f100 0314 	add.w	r3, r0, #20
 80052c2:	3114      	adds	r1, #20
 80052c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80052c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80052cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80052d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80052d4:	42a5      	cmp	r5, r4
 80052d6:	d003      	beq.n	80052e0 <__mcmp+0x2c>
 80052d8:	d305      	bcc.n	80052e6 <__mcmp+0x32>
 80052da:	2201      	movs	r2, #1
 80052dc:	4610      	mov	r0, r2
 80052de:	bd30      	pop	{r4, r5, pc}
 80052e0:	4283      	cmp	r3, r0
 80052e2:	d3f3      	bcc.n	80052cc <__mcmp+0x18>
 80052e4:	e7fa      	b.n	80052dc <__mcmp+0x28>
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ea:	e7f7      	b.n	80052dc <__mcmp+0x28>

080052ec <__mdiff>:
 80052ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	460c      	mov	r4, r1
 80052f2:	4606      	mov	r6, r0
 80052f4:	4611      	mov	r1, r2
 80052f6:	4620      	mov	r0, r4
 80052f8:	4690      	mov	r8, r2
 80052fa:	f7ff ffdb 	bl	80052b4 <__mcmp>
 80052fe:	1e05      	subs	r5, r0, #0
 8005300:	d110      	bne.n	8005324 <__mdiff+0x38>
 8005302:	4629      	mov	r1, r5
 8005304:	4630      	mov	r0, r6
 8005306:	f7ff fd53 	bl	8004db0 <_Balloc>
 800530a:	b930      	cbnz	r0, 800531a <__mdiff+0x2e>
 800530c:	4b3a      	ldr	r3, [pc, #232]	; (80053f8 <__mdiff+0x10c>)
 800530e:	4602      	mov	r2, r0
 8005310:	f240 2132 	movw	r1, #562	; 0x232
 8005314:	4839      	ldr	r0, [pc, #228]	; (80053fc <__mdiff+0x110>)
 8005316:	f000 f9d5 	bl	80056c4 <__assert_func>
 800531a:	2301      	movs	r3, #1
 800531c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005324:	bfa4      	itt	ge
 8005326:	4643      	movge	r3, r8
 8005328:	46a0      	movge	r8, r4
 800532a:	4630      	mov	r0, r6
 800532c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005330:	bfa6      	itte	ge
 8005332:	461c      	movge	r4, r3
 8005334:	2500      	movge	r5, #0
 8005336:	2501      	movlt	r5, #1
 8005338:	f7ff fd3a 	bl	8004db0 <_Balloc>
 800533c:	b920      	cbnz	r0, 8005348 <__mdiff+0x5c>
 800533e:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <__mdiff+0x10c>)
 8005340:	4602      	mov	r2, r0
 8005342:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005346:	e7e5      	b.n	8005314 <__mdiff+0x28>
 8005348:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800534c:	6926      	ldr	r6, [r4, #16]
 800534e:	60c5      	str	r5, [r0, #12]
 8005350:	f104 0914 	add.w	r9, r4, #20
 8005354:	f108 0514 	add.w	r5, r8, #20
 8005358:	f100 0e14 	add.w	lr, r0, #20
 800535c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005360:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005364:	f108 0210 	add.w	r2, r8, #16
 8005368:	46f2      	mov	sl, lr
 800536a:	2100      	movs	r1, #0
 800536c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005370:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005374:	fa1f f883 	uxth.w	r8, r3
 8005378:	fa11 f18b 	uxtah	r1, r1, fp
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	eba1 0808 	sub.w	r8, r1, r8
 8005382:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005386:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800538a:	fa1f f888 	uxth.w	r8, r8
 800538e:	1419      	asrs	r1, r3, #16
 8005390:	454e      	cmp	r6, r9
 8005392:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005396:	f84a 3b04 	str.w	r3, [sl], #4
 800539a:	d8e7      	bhi.n	800536c <__mdiff+0x80>
 800539c:	1b33      	subs	r3, r6, r4
 800539e:	3b15      	subs	r3, #21
 80053a0:	f023 0303 	bic.w	r3, r3, #3
 80053a4:	3304      	adds	r3, #4
 80053a6:	3415      	adds	r4, #21
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	bf38      	it	cc
 80053ac:	2304      	movcc	r3, #4
 80053ae:	441d      	add	r5, r3
 80053b0:	4473      	add	r3, lr
 80053b2:	469e      	mov	lr, r3
 80053b4:	462e      	mov	r6, r5
 80053b6:	4566      	cmp	r6, ip
 80053b8:	d30e      	bcc.n	80053d8 <__mdiff+0xec>
 80053ba:	f10c 0203 	add.w	r2, ip, #3
 80053be:	1b52      	subs	r2, r2, r5
 80053c0:	f022 0203 	bic.w	r2, r2, #3
 80053c4:	3d03      	subs	r5, #3
 80053c6:	45ac      	cmp	ip, r5
 80053c8:	bf38      	it	cc
 80053ca:	2200      	movcc	r2, #0
 80053cc:	441a      	add	r2, r3
 80053ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80053d2:	b17b      	cbz	r3, 80053f4 <__mdiff+0x108>
 80053d4:	6107      	str	r7, [r0, #16]
 80053d6:	e7a3      	b.n	8005320 <__mdiff+0x34>
 80053d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80053dc:	fa11 f288 	uxtah	r2, r1, r8
 80053e0:	1414      	asrs	r4, r2, #16
 80053e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80053e6:	b292      	uxth	r2, r2
 80053e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80053ec:	f84e 2b04 	str.w	r2, [lr], #4
 80053f0:	1421      	asrs	r1, r4, #16
 80053f2:	e7e0      	b.n	80053b6 <__mdiff+0xca>
 80053f4:	3f01      	subs	r7, #1
 80053f6:	e7ea      	b.n	80053ce <__mdiff+0xe2>
 80053f8:	0800719f 	.word	0x0800719f
 80053fc:	080071b0 	.word	0x080071b0

08005400 <__d2b>:
 8005400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005404:	4689      	mov	r9, r1
 8005406:	2101      	movs	r1, #1
 8005408:	ec57 6b10 	vmov	r6, r7, d0
 800540c:	4690      	mov	r8, r2
 800540e:	f7ff fccf 	bl	8004db0 <_Balloc>
 8005412:	4604      	mov	r4, r0
 8005414:	b930      	cbnz	r0, 8005424 <__d2b+0x24>
 8005416:	4602      	mov	r2, r0
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <__d2b+0xb0>)
 800541a:	4826      	ldr	r0, [pc, #152]	; (80054b4 <__d2b+0xb4>)
 800541c:	f240 310a 	movw	r1, #778	; 0x30a
 8005420:	f000 f950 	bl	80056c4 <__assert_func>
 8005424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800542c:	bb35      	cbnz	r5, 800547c <__d2b+0x7c>
 800542e:	2e00      	cmp	r6, #0
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	d028      	beq.n	8005486 <__d2b+0x86>
 8005434:	4668      	mov	r0, sp
 8005436:	9600      	str	r6, [sp, #0]
 8005438:	f7ff fd82 	bl	8004f40 <__lo0bits>
 800543c:	9900      	ldr	r1, [sp, #0]
 800543e:	b300      	cbz	r0, 8005482 <__d2b+0x82>
 8005440:	9a01      	ldr	r2, [sp, #4]
 8005442:	f1c0 0320 	rsb	r3, r0, #32
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	430b      	orrs	r3, r1
 800544c:	40c2      	lsrs	r2, r0
 800544e:	6163      	str	r3, [r4, #20]
 8005450:	9201      	str	r2, [sp, #4]
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	61a3      	str	r3, [r4, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	bf14      	ite	ne
 800545a:	2202      	movne	r2, #2
 800545c:	2201      	moveq	r2, #1
 800545e:	6122      	str	r2, [r4, #16]
 8005460:	b1d5      	cbz	r5, 8005498 <__d2b+0x98>
 8005462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005466:	4405      	add	r5, r0
 8005468:	f8c9 5000 	str.w	r5, [r9]
 800546c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005470:	f8c8 0000 	str.w	r0, [r8]
 8005474:	4620      	mov	r0, r4
 8005476:	b003      	add	sp, #12
 8005478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800547c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005480:	e7d5      	b.n	800542e <__d2b+0x2e>
 8005482:	6161      	str	r1, [r4, #20]
 8005484:	e7e5      	b.n	8005452 <__d2b+0x52>
 8005486:	a801      	add	r0, sp, #4
 8005488:	f7ff fd5a 	bl	8004f40 <__lo0bits>
 800548c:	9b01      	ldr	r3, [sp, #4]
 800548e:	6163      	str	r3, [r4, #20]
 8005490:	2201      	movs	r2, #1
 8005492:	6122      	str	r2, [r4, #16]
 8005494:	3020      	adds	r0, #32
 8005496:	e7e3      	b.n	8005460 <__d2b+0x60>
 8005498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800549c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80054a0:	f8c9 0000 	str.w	r0, [r9]
 80054a4:	6918      	ldr	r0, [r3, #16]
 80054a6:	f7ff fd2b 	bl	8004f00 <__hi0bits>
 80054aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80054ae:	e7df      	b.n	8005470 <__d2b+0x70>
 80054b0:	0800719f 	.word	0x0800719f
 80054b4:	080071b0 	.word	0x080071b0

080054b8 <_calloc_r>:
 80054b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ba:	fba1 2402 	umull	r2, r4, r1, r2
 80054be:	b94c      	cbnz	r4, 80054d4 <_calloc_r+0x1c>
 80054c0:	4611      	mov	r1, r2
 80054c2:	9201      	str	r2, [sp, #4]
 80054c4:	f000 f87a 	bl	80055bc <_malloc_r>
 80054c8:	9a01      	ldr	r2, [sp, #4]
 80054ca:	4605      	mov	r5, r0
 80054cc:	b930      	cbnz	r0, 80054dc <_calloc_r+0x24>
 80054ce:	4628      	mov	r0, r5
 80054d0:	b003      	add	sp, #12
 80054d2:	bd30      	pop	{r4, r5, pc}
 80054d4:	220c      	movs	r2, #12
 80054d6:	6002      	str	r2, [r0, #0]
 80054d8:	2500      	movs	r5, #0
 80054da:	e7f8      	b.n	80054ce <_calloc_r+0x16>
 80054dc:	4621      	mov	r1, r4
 80054de:	f7fe f95f 	bl	80037a0 <memset>
 80054e2:	e7f4      	b.n	80054ce <_calloc_r+0x16>

080054e4 <_free_r>:
 80054e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d044      	beq.n	8005574 <_free_r+0x90>
 80054ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ee:	9001      	str	r0, [sp, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f1a1 0404 	sub.w	r4, r1, #4
 80054f6:	bfb8      	it	lt
 80054f8:	18e4      	addlt	r4, r4, r3
 80054fa:	f000 f925 	bl	8005748 <__malloc_lock>
 80054fe:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <_free_r+0x94>)
 8005500:	9801      	ldr	r0, [sp, #4]
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	b933      	cbnz	r3, 8005514 <_free_r+0x30>
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	6014      	str	r4, [r2, #0]
 800550a:	b003      	add	sp, #12
 800550c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005510:	f000 b920 	b.w	8005754 <__malloc_unlock>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d908      	bls.n	800552a <_free_r+0x46>
 8005518:	6825      	ldr	r5, [r4, #0]
 800551a:	1961      	adds	r1, r4, r5
 800551c:	428b      	cmp	r3, r1
 800551e:	bf01      	itttt	eq
 8005520:	6819      	ldreq	r1, [r3, #0]
 8005522:	685b      	ldreq	r3, [r3, #4]
 8005524:	1949      	addeq	r1, r1, r5
 8005526:	6021      	streq	r1, [r4, #0]
 8005528:	e7ed      	b.n	8005506 <_free_r+0x22>
 800552a:	461a      	mov	r2, r3
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	b10b      	cbz	r3, 8005534 <_free_r+0x50>
 8005530:	42a3      	cmp	r3, r4
 8005532:	d9fa      	bls.n	800552a <_free_r+0x46>
 8005534:	6811      	ldr	r1, [r2, #0]
 8005536:	1855      	adds	r5, r2, r1
 8005538:	42a5      	cmp	r5, r4
 800553a:	d10b      	bne.n	8005554 <_free_r+0x70>
 800553c:	6824      	ldr	r4, [r4, #0]
 800553e:	4421      	add	r1, r4
 8005540:	1854      	adds	r4, r2, r1
 8005542:	42a3      	cmp	r3, r4
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	d1e0      	bne.n	800550a <_free_r+0x26>
 8005548:	681c      	ldr	r4, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	6053      	str	r3, [r2, #4]
 800554e:	4421      	add	r1, r4
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	e7da      	b.n	800550a <_free_r+0x26>
 8005554:	d902      	bls.n	800555c <_free_r+0x78>
 8005556:	230c      	movs	r3, #12
 8005558:	6003      	str	r3, [r0, #0]
 800555a:	e7d6      	b.n	800550a <_free_r+0x26>
 800555c:	6825      	ldr	r5, [r4, #0]
 800555e:	1961      	adds	r1, r4, r5
 8005560:	428b      	cmp	r3, r1
 8005562:	bf04      	itt	eq
 8005564:	6819      	ldreq	r1, [r3, #0]
 8005566:	685b      	ldreq	r3, [r3, #4]
 8005568:	6063      	str	r3, [r4, #4]
 800556a:	bf04      	itt	eq
 800556c:	1949      	addeq	r1, r1, r5
 800556e:	6021      	streq	r1, [r4, #0]
 8005570:	6054      	str	r4, [r2, #4]
 8005572:	e7ca      	b.n	800550a <_free_r+0x26>
 8005574:	b003      	add	sp, #12
 8005576:	bd30      	pop	{r4, r5, pc}
 8005578:	2000030c 	.word	0x2000030c

0800557c <sbrk_aligned>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4e0e      	ldr	r6, [pc, #56]	; (80055b8 <sbrk_aligned+0x3c>)
 8005580:	460c      	mov	r4, r1
 8005582:	6831      	ldr	r1, [r6, #0]
 8005584:	4605      	mov	r5, r0
 8005586:	b911      	cbnz	r1, 800558e <sbrk_aligned+0x12>
 8005588:	f000 f88c 	bl	80056a4 <_sbrk_r>
 800558c:	6030      	str	r0, [r6, #0]
 800558e:	4621      	mov	r1, r4
 8005590:	4628      	mov	r0, r5
 8005592:	f000 f887 	bl	80056a4 <_sbrk_r>
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	d00a      	beq.n	80055b0 <sbrk_aligned+0x34>
 800559a:	1cc4      	adds	r4, r0, #3
 800559c:	f024 0403 	bic.w	r4, r4, #3
 80055a0:	42a0      	cmp	r0, r4
 80055a2:	d007      	beq.n	80055b4 <sbrk_aligned+0x38>
 80055a4:	1a21      	subs	r1, r4, r0
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 f87c 	bl	80056a4 <_sbrk_r>
 80055ac:	3001      	adds	r0, #1
 80055ae:	d101      	bne.n	80055b4 <sbrk_aligned+0x38>
 80055b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055b4:	4620      	mov	r0, r4
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	20000310 	.word	0x20000310

080055bc <_malloc_r>:
 80055bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c0:	1ccd      	adds	r5, r1, #3
 80055c2:	f025 0503 	bic.w	r5, r5, #3
 80055c6:	3508      	adds	r5, #8
 80055c8:	2d0c      	cmp	r5, #12
 80055ca:	bf38      	it	cc
 80055cc:	250c      	movcc	r5, #12
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	4607      	mov	r7, r0
 80055d2:	db01      	blt.n	80055d8 <_malloc_r+0x1c>
 80055d4:	42a9      	cmp	r1, r5
 80055d6:	d905      	bls.n	80055e4 <_malloc_r+0x28>
 80055d8:	230c      	movs	r3, #12
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	2600      	movs	r6, #0
 80055de:	4630      	mov	r0, r6
 80055e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e4:	4e2e      	ldr	r6, [pc, #184]	; (80056a0 <_malloc_r+0xe4>)
 80055e6:	f000 f8af 	bl	8005748 <__malloc_lock>
 80055ea:	6833      	ldr	r3, [r6, #0]
 80055ec:	461c      	mov	r4, r3
 80055ee:	bb34      	cbnz	r4, 800563e <_malloc_r+0x82>
 80055f0:	4629      	mov	r1, r5
 80055f2:	4638      	mov	r0, r7
 80055f4:	f7ff ffc2 	bl	800557c <sbrk_aligned>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	4604      	mov	r4, r0
 80055fc:	d14d      	bne.n	800569a <_malloc_r+0xde>
 80055fe:	6834      	ldr	r4, [r6, #0]
 8005600:	4626      	mov	r6, r4
 8005602:	2e00      	cmp	r6, #0
 8005604:	d140      	bne.n	8005688 <_malloc_r+0xcc>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	4631      	mov	r1, r6
 800560a:	4638      	mov	r0, r7
 800560c:	eb04 0803 	add.w	r8, r4, r3
 8005610:	f000 f848 	bl	80056a4 <_sbrk_r>
 8005614:	4580      	cmp	r8, r0
 8005616:	d13a      	bne.n	800568e <_malloc_r+0xd2>
 8005618:	6821      	ldr	r1, [r4, #0]
 800561a:	3503      	adds	r5, #3
 800561c:	1a6d      	subs	r5, r5, r1
 800561e:	f025 0503 	bic.w	r5, r5, #3
 8005622:	3508      	adds	r5, #8
 8005624:	2d0c      	cmp	r5, #12
 8005626:	bf38      	it	cc
 8005628:	250c      	movcc	r5, #12
 800562a:	4629      	mov	r1, r5
 800562c:	4638      	mov	r0, r7
 800562e:	f7ff ffa5 	bl	800557c <sbrk_aligned>
 8005632:	3001      	adds	r0, #1
 8005634:	d02b      	beq.n	800568e <_malloc_r+0xd2>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	442b      	add	r3, r5
 800563a:	6023      	str	r3, [r4, #0]
 800563c:	e00e      	b.n	800565c <_malloc_r+0xa0>
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	1b52      	subs	r2, r2, r5
 8005642:	d41e      	bmi.n	8005682 <_malloc_r+0xc6>
 8005644:	2a0b      	cmp	r2, #11
 8005646:	d916      	bls.n	8005676 <_malloc_r+0xba>
 8005648:	1961      	adds	r1, r4, r5
 800564a:	42a3      	cmp	r3, r4
 800564c:	6025      	str	r5, [r4, #0]
 800564e:	bf18      	it	ne
 8005650:	6059      	strne	r1, [r3, #4]
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	bf08      	it	eq
 8005656:	6031      	streq	r1, [r6, #0]
 8005658:	5162      	str	r2, [r4, r5]
 800565a:	604b      	str	r3, [r1, #4]
 800565c:	4638      	mov	r0, r7
 800565e:	f104 060b 	add.w	r6, r4, #11
 8005662:	f000 f877 	bl	8005754 <__malloc_unlock>
 8005666:	f026 0607 	bic.w	r6, r6, #7
 800566a:	1d23      	adds	r3, r4, #4
 800566c:	1af2      	subs	r2, r6, r3
 800566e:	d0b6      	beq.n	80055de <_malloc_r+0x22>
 8005670:	1b9b      	subs	r3, r3, r6
 8005672:	50a3      	str	r3, [r4, r2]
 8005674:	e7b3      	b.n	80055de <_malloc_r+0x22>
 8005676:	6862      	ldr	r2, [r4, #4]
 8005678:	42a3      	cmp	r3, r4
 800567a:	bf0c      	ite	eq
 800567c:	6032      	streq	r2, [r6, #0]
 800567e:	605a      	strne	r2, [r3, #4]
 8005680:	e7ec      	b.n	800565c <_malloc_r+0xa0>
 8005682:	4623      	mov	r3, r4
 8005684:	6864      	ldr	r4, [r4, #4]
 8005686:	e7b2      	b.n	80055ee <_malloc_r+0x32>
 8005688:	4634      	mov	r4, r6
 800568a:	6876      	ldr	r6, [r6, #4]
 800568c:	e7b9      	b.n	8005602 <_malloc_r+0x46>
 800568e:	230c      	movs	r3, #12
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4638      	mov	r0, r7
 8005694:	f000 f85e 	bl	8005754 <__malloc_unlock>
 8005698:	e7a1      	b.n	80055de <_malloc_r+0x22>
 800569a:	6025      	str	r5, [r4, #0]
 800569c:	e7de      	b.n	800565c <_malloc_r+0xa0>
 800569e:	bf00      	nop
 80056a0:	2000030c 	.word	0x2000030c

080056a4 <_sbrk_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d06      	ldr	r5, [pc, #24]	; (80056c0 <_sbrk_r+0x1c>)
 80056a8:	2300      	movs	r3, #0
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	f001 fcf8 	bl	80070a4 <_sbrk>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_sbrk_r+0x1a>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	b103      	cbz	r3, 80056be <_sbrk_r+0x1a>
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	20000314 	.word	0x20000314

080056c4 <__assert_func>:
 80056c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056c6:	4614      	mov	r4, r2
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <__assert_func+0x2c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4605      	mov	r5, r0
 80056d0:	68d8      	ldr	r0, [r3, #12]
 80056d2:	b14c      	cbz	r4, 80056e8 <__assert_func+0x24>
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <__assert_func+0x30>)
 80056d6:	9100      	str	r1, [sp, #0]
 80056d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056dc:	4906      	ldr	r1, [pc, #24]	; (80056f8 <__assert_func+0x34>)
 80056de:	462b      	mov	r3, r5
 80056e0:	f000 f80e 	bl	8005700 <fiprintf>
 80056e4:	f000 fa64 	bl	8005bb0 <abort>
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <__assert_func+0x38>)
 80056ea:	461c      	mov	r4, r3
 80056ec:	e7f3      	b.n	80056d6 <__assert_func+0x12>
 80056ee:	bf00      	nop
 80056f0:	20000008 	.word	0x20000008
 80056f4:	0800730c 	.word	0x0800730c
 80056f8:	08007319 	.word	0x08007319
 80056fc:	08007347 	.word	0x08007347

08005700 <fiprintf>:
 8005700:	b40e      	push	{r1, r2, r3}
 8005702:	b503      	push	{r0, r1, lr}
 8005704:	4601      	mov	r1, r0
 8005706:	ab03      	add	r3, sp, #12
 8005708:	4805      	ldr	r0, [pc, #20]	; (8005720 <fiprintf+0x20>)
 800570a:	f853 2b04 	ldr.w	r2, [r3], #4
 800570e:	6800      	ldr	r0, [r0, #0]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	f000 f84f 	bl	80057b4 <_vfiprintf_r>
 8005716:	b002      	add	sp, #8
 8005718:	f85d eb04 	ldr.w	lr, [sp], #4
 800571c:	b003      	add	sp, #12
 800571e:	4770      	bx	lr
 8005720:	20000008 	.word	0x20000008

08005724 <__ascii_mbtowc>:
 8005724:	b082      	sub	sp, #8
 8005726:	b901      	cbnz	r1, 800572a <__ascii_mbtowc+0x6>
 8005728:	a901      	add	r1, sp, #4
 800572a:	b142      	cbz	r2, 800573e <__ascii_mbtowc+0x1a>
 800572c:	b14b      	cbz	r3, 8005742 <__ascii_mbtowc+0x1e>
 800572e:	7813      	ldrb	r3, [r2, #0]
 8005730:	600b      	str	r3, [r1, #0]
 8005732:	7812      	ldrb	r2, [r2, #0]
 8005734:	1e10      	subs	r0, r2, #0
 8005736:	bf18      	it	ne
 8005738:	2001      	movne	r0, #1
 800573a:	b002      	add	sp, #8
 800573c:	4770      	bx	lr
 800573e:	4610      	mov	r0, r2
 8005740:	e7fb      	b.n	800573a <__ascii_mbtowc+0x16>
 8005742:	f06f 0001 	mvn.w	r0, #1
 8005746:	e7f8      	b.n	800573a <__ascii_mbtowc+0x16>

08005748 <__malloc_lock>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__malloc_lock+0x8>)
 800574a:	f000 bbf1 	b.w	8005f30 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20000318 	.word	0x20000318

08005754 <__malloc_unlock>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__malloc_unlock+0x8>)
 8005756:	f000 bbec 	b.w	8005f32 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20000318 	.word	0x20000318

08005760 <__sfputc_r>:
 8005760:	6893      	ldr	r3, [r2, #8]
 8005762:	3b01      	subs	r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	b410      	push	{r4}
 8005768:	6093      	str	r3, [r2, #8]
 800576a:	da08      	bge.n	800577e <__sfputc_r+0x1e>
 800576c:	6994      	ldr	r4, [r2, #24]
 800576e:	42a3      	cmp	r3, r4
 8005770:	db01      	blt.n	8005776 <__sfputc_r+0x16>
 8005772:	290a      	cmp	r1, #10
 8005774:	d103      	bne.n	800577e <__sfputc_r+0x1e>
 8005776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800577a:	f000 b94b 	b.w	8005a14 <__swbuf_r>
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	1c58      	adds	r0, r3, #1
 8005782:	6010      	str	r0, [r2, #0]
 8005784:	7019      	strb	r1, [r3, #0]
 8005786:	4608      	mov	r0, r1
 8005788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800578c:	4770      	bx	lr

0800578e <__sfputs_r>:
 800578e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005790:	4606      	mov	r6, r0
 8005792:	460f      	mov	r7, r1
 8005794:	4614      	mov	r4, r2
 8005796:	18d5      	adds	r5, r2, r3
 8005798:	42ac      	cmp	r4, r5
 800579a:	d101      	bne.n	80057a0 <__sfputs_r+0x12>
 800579c:	2000      	movs	r0, #0
 800579e:	e007      	b.n	80057b0 <__sfputs_r+0x22>
 80057a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a4:	463a      	mov	r2, r7
 80057a6:	4630      	mov	r0, r6
 80057a8:	f7ff ffda 	bl	8005760 <__sfputc_r>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d1f3      	bne.n	8005798 <__sfputs_r+0xa>
 80057b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057b4 <_vfiprintf_r>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	460d      	mov	r5, r1
 80057ba:	b09d      	sub	sp, #116	; 0x74
 80057bc:	4614      	mov	r4, r2
 80057be:	4698      	mov	r8, r3
 80057c0:	4606      	mov	r6, r0
 80057c2:	b118      	cbz	r0, 80057cc <_vfiprintf_r+0x18>
 80057c4:	6983      	ldr	r3, [r0, #24]
 80057c6:	b90b      	cbnz	r3, 80057cc <_vfiprintf_r+0x18>
 80057c8:	f000 fb14 	bl	8005df4 <__sinit>
 80057cc:	4b89      	ldr	r3, [pc, #548]	; (80059f4 <_vfiprintf_r+0x240>)
 80057ce:	429d      	cmp	r5, r3
 80057d0:	d11b      	bne.n	800580a <_vfiprintf_r+0x56>
 80057d2:	6875      	ldr	r5, [r6, #4]
 80057d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057d6:	07d9      	lsls	r1, r3, #31
 80057d8:	d405      	bmi.n	80057e6 <_vfiprintf_r+0x32>
 80057da:	89ab      	ldrh	r3, [r5, #12]
 80057dc:	059a      	lsls	r2, r3, #22
 80057de:	d402      	bmi.n	80057e6 <_vfiprintf_r+0x32>
 80057e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057e2:	f000 fba5 	bl	8005f30 <__retarget_lock_acquire_recursive>
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	071b      	lsls	r3, r3, #28
 80057ea:	d501      	bpl.n	80057f0 <_vfiprintf_r+0x3c>
 80057ec:	692b      	ldr	r3, [r5, #16]
 80057ee:	b9eb      	cbnz	r3, 800582c <_vfiprintf_r+0x78>
 80057f0:	4629      	mov	r1, r5
 80057f2:	4630      	mov	r0, r6
 80057f4:	f000 f96e 	bl	8005ad4 <__swsetup_r>
 80057f8:	b1c0      	cbz	r0, 800582c <_vfiprintf_r+0x78>
 80057fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057fc:	07dc      	lsls	r4, r3, #31
 80057fe:	d50e      	bpl.n	800581e <_vfiprintf_r+0x6a>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005804:	b01d      	add	sp, #116	; 0x74
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	4b7b      	ldr	r3, [pc, #492]	; (80059f8 <_vfiprintf_r+0x244>)
 800580c:	429d      	cmp	r5, r3
 800580e:	d101      	bne.n	8005814 <_vfiprintf_r+0x60>
 8005810:	68b5      	ldr	r5, [r6, #8]
 8005812:	e7df      	b.n	80057d4 <_vfiprintf_r+0x20>
 8005814:	4b79      	ldr	r3, [pc, #484]	; (80059fc <_vfiprintf_r+0x248>)
 8005816:	429d      	cmp	r5, r3
 8005818:	bf08      	it	eq
 800581a:	68f5      	ldreq	r5, [r6, #12]
 800581c:	e7da      	b.n	80057d4 <_vfiprintf_r+0x20>
 800581e:	89ab      	ldrh	r3, [r5, #12]
 8005820:	0598      	lsls	r0, r3, #22
 8005822:	d4ed      	bmi.n	8005800 <_vfiprintf_r+0x4c>
 8005824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005826:	f000 fb84 	bl	8005f32 <__retarget_lock_release_recursive>
 800582a:	e7e9      	b.n	8005800 <_vfiprintf_r+0x4c>
 800582c:	2300      	movs	r3, #0
 800582e:	9309      	str	r3, [sp, #36]	; 0x24
 8005830:	2320      	movs	r3, #32
 8005832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005836:	f8cd 800c 	str.w	r8, [sp, #12]
 800583a:	2330      	movs	r3, #48	; 0x30
 800583c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a00 <_vfiprintf_r+0x24c>
 8005840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005844:	f04f 0901 	mov.w	r9, #1
 8005848:	4623      	mov	r3, r4
 800584a:	469a      	mov	sl, r3
 800584c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005850:	b10a      	cbz	r2, 8005856 <_vfiprintf_r+0xa2>
 8005852:	2a25      	cmp	r2, #37	; 0x25
 8005854:	d1f9      	bne.n	800584a <_vfiprintf_r+0x96>
 8005856:	ebba 0b04 	subs.w	fp, sl, r4
 800585a:	d00b      	beq.n	8005874 <_vfiprintf_r+0xc0>
 800585c:	465b      	mov	r3, fp
 800585e:	4622      	mov	r2, r4
 8005860:	4629      	mov	r1, r5
 8005862:	4630      	mov	r0, r6
 8005864:	f7ff ff93 	bl	800578e <__sfputs_r>
 8005868:	3001      	adds	r0, #1
 800586a:	f000 80aa 	beq.w	80059c2 <_vfiprintf_r+0x20e>
 800586e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005870:	445a      	add	r2, fp
 8005872:	9209      	str	r2, [sp, #36]	; 0x24
 8005874:	f89a 3000 	ldrb.w	r3, [sl]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80a2 	beq.w	80059c2 <_vfiprintf_r+0x20e>
 800587e:	2300      	movs	r3, #0
 8005880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005888:	f10a 0a01 	add.w	sl, sl, #1
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	9307      	str	r3, [sp, #28]
 8005890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005894:	931a      	str	r3, [sp, #104]	; 0x68
 8005896:	4654      	mov	r4, sl
 8005898:	2205      	movs	r2, #5
 800589a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800589e:	4858      	ldr	r0, [pc, #352]	; (8005a00 <_vfiprintf_r+0x24c>)
 80058a0:	f7fa fca6 	bl	80001f0 <memchr>
 80058a4:	9a04      	ldr	r2, [sp, #16]
 80058a6:	b9d8      	cbnz	r0, 80058e0 <_vfiprintf_r+0x12c>
 80058a8:	06d1      	lsls	r1, r2, #27
 80058aa:	bf44      	itt	mi
 80058ac:	2320      	movmi	r3, #32
 80058ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b2:	0713      	lsls	r3, r2, #28
 80058b4:	bf44      	itt	mi
 80058b6:	232b      	movmi	r3, #43	; 0x2b
 80058b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058bc:	f89a 3000 	ldrb.w	r3, [sl]
 80058c0:	2b2a      	cmp	r3, #42	; 0x2a
 80058c2:	d015      	beq.n	80058f0 <_vfiprintf_r+0x13c>
 80058c4:	9a07      	ldr	r2, [sp, #28]
 80058c6:	4654      	mov	r4, sl
 80058c8:	2000      	movs	r0, #0
 80058ca:	f04f 0c0a 	mov.w	ip, #10
 80058ce:	4621      	mov	r1, r4
 80058d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058d4:	3b30      	subs	r3, #48	; 0x30
 80058d6:	2b09      	cmp	r3, #9
 80058d8:	d94e      	bls.n	8005978 <_vfiprintf_r+0x1c4>
 80058da:	b1b0      	cbz	r0, 800590a <_vfiprintf_r+0x156>
 80058dc:	9207      	str	r2, [sp, #28]
 80058de:	e014      	b.n	800590a <_vfiprintf_r+0x156>
 80058e0:	eba0 0308 	sub.w	r3, r0, r8
 80058e4:	fa09 f303 	lsl.w	r3, r9, r3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	46a2      	mov	sl, r4
 80058ee:	e7d2      	b.n	8005896 <_vfiprintf_r+0xe2>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	1d19      	adds	r1, r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	9103      	str	r1, [sp, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfbb      	ittet	lt
 80058fc:	425b      	neglt	r3, r3
 80058fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005902:	9307      	strge	r3, [sp, #28]
 8005904:	9307      	strlt	r3, [sp, #28]
 8005906:	bfb8      	it	lt
 8005908:	9204      	strlt	r2, [sp, #16]
 800590a:	7823      	ldrb	r3, [r4, #0]
 800590c:	2b2e      	cmp	r3, #46	; 0x2e
 800590e:	d10c      	bne.n	800592a <_vfiprintf_r+0x176>
 8005910:	7863      	ldrb	r3, [r4, #1]
 8005912:	2b2a      	cmp	r3, #42	; 0x2a
 8005914:	d135      	bne.n	8005982 <_vfiprintf_r+0x1ce>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	9203      	str	r2, [sp, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfb8      	it	lt
 8005922:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005926:	3402      	adds	r4, #2
 8005928:	9305      	str	r3, [sp, #20]
 800592a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a10 <_vfiprintf_r+0x25c>
 800592e:	7821      	ldrb	r1, [r4, #0]
 8005930:	2203      	movs	r2, #3
 8005932:	4650      	mov	r0, sl
 8005934:	f7fa fc5c 	bl	80001f0 <memchr>
 8005938:	b140      	cbz	r0, 800594c <_vfiprintf_r+0x198>
 800593a:	2340      	movs	r3, #64	; 0x40
 800593c:	eba0 000a 	sub.w	r0, r0, sl
 8005940:	fa03 f000 	lsl.w	r0, r3, r0
 8005944:	9b04      	ldr	r3, [sp, #16]
 8005946:	4303      	orrs	r3, r0
 8005948:	3401      	adds	r4, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005950:	482c      	ldr	r0, [pc, #176]	; (8005a04 <_vfiprintf_r+0x250>)
 8005952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005956:	2206      	movs	r2, #6
 8005958:	f7fa fc4a 	bl	80001f0 <memchr>
 800595c:	2800      	cmp	r0, #0
 800595e:	d03f      	beq.n	80059e0 <_vfiprintf_r+0x22c>
 8005960:	4b29      	ldr	r3, [pc, #164]	; (8005a08 <_vfiprintf_r+0x254>)
 8005962:	bb1b      	cbnz	r3, 80059ac <_vfiprintf_r+0x1f8>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	3307      	adds	r3, #7
 8005968:	f023 0307 	bic.w	r3, r3, #7
 800596c:	3308      	adds	r3, #8
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005972:	443b      	add	r3, r7
 8005974:	9309      	str	r3, [sp, #36]	; 0x24
 8005976:	e767      	b.n	8005848 <_vfiprintf_r+0x94>
 8005978:	fb0c 3202 	mla	r2, ip, r2, r3
 800597c:	460c      	mov	r4, r1
 800597e:	2001      	movs	r0, #1
 8005980:	e7a5      	b.n	80058ce <_vfiprintf_r+0x11a>
 8005982:	2300      	movs	r3, #0
 8005984:	3401      	adds	r4, #1
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	4619      	mov	r1, r3
 800598a:	f04f 0c0a 	mov.w	ip, #10
 800598e:	4620      	mov	r0, r4
 8005990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005994:	3a30      	subs	r2, #48	; 0x30
 8005996:	2a09      	cmp	r2, #9
 8005998:	d903      	bls.n	80059a2 <_vfiprintf_r+0x1ee>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0c5      	beq.n	800592a <_vfiprintf_r+0x176>
 800599e:	9105      	str	r1, [sp, #20]
 80059a0:	e7c3      	b.n	800592a <_vfiprintf_r+0x176>
 80059a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a6:	4604      	mov	r4, r0
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7f0      	b.n	800598e <_vfiprintf_r+0x1da>
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4b16      	ldr	r3, [pc, #88]	; (8005a0c <_vfiprintf_r+0x258>)
 80059b4:	a904      	add	r1, sp, #16
 80059b6:	4630      	mov	r0, r6
 80059b8:	f7fd ff9a 	bl	80038f0 <_printf_float>
 80059bc:	4607      	mov	r7, r0
 80059be:	1c78      	adds	r0, r7, #1
 80059c0:	d1d6      	bne.n	8005970 <_vfiprintf_r+0x1bc>
 80059c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059c4:	07d9      	lsls	r1, r3, #31
 80059c6:	d405      	bmi.n	80059d4 <_vfiprintf_r+0x220>
 80059c8:	89ab      	ldrh	r3, [r5, #12]
 80059ca:	059a      	lsls	r2, r3, #22
 80059cc:	d402      	bmi.n	80059d4 <_vfiprintf_r+0x220>
 80059ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059d0:	f000 faaf 	bl	8005f32 <__retarget_lock_release_recursive>
 80059d4:	89ab      	ldrh	r3, [r5, #12]
 80059d6:	065b      	lsls	r3, r3, #25
 80059d8:	f53f af12 	bmi.w	8005800 <_vfiprintf_r+0x4c>
 80059dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059de:	e711      	b.n	8005804 <_vfiprintf_r+0x50>
 80059e0:	ab03      	add	r3, sp, #12
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	462a      	mov	r2, r5
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <_vfiprintf_r+0x258>)
 80059e8:	a904      	add	r1, sp, #16
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fe fa24 	bl	8003e38 <_printf_i>
 80059f0:	e7e4      	b.n	80059bc <_vfiprintf_r+0x208>
 80059f2:	bf00      	nop
 80059f4:	08007484 	.word	0x08007484
 80059f8:	080074a4 	.word	0x080074a4
 80059fc:	08007464 	.word	0x08007464
 8005a00:	08007352 	.word	0x08007352
 8005a04:	0800735c 	.word	0x0800735c
 8005a08:	080038f1 	.word	0x080038f1
 8005a0c:	0800578f 	.word	0x0800578f
 8005a10:	08007358 	.word	0x08007358

08005a14 <__swbuf_r>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	460e      	mov	r6, r1
 8005a18:	4614      	mov	r4, r2
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	b118      	cbz	r0, 8005a26 <__swbuf_r+0x12>
 8005a1e:	6983      	ldr	r3, [r0, #24]
 8005a20:	b90b      	cbnz	r3, 8005a26 <__swbuf_r+0x12>
 8005a22:	f000 f9e7 	bl	8005df4 <__sinit>
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <__swbuf_r+0x98>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	d12b      	bne.n	8005a84 <__swbuf_r+0x70>
 8005a2c:	686c      	ldr	r4, [r5, #4]
 8005a2e:	69a3      	ldr	r3, [r4, #24]
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	071a      	lsls	r2, r3, #28
 8005a36:	d52f      	bpl.n	8005a98 <__swbuf_r+0x84>
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	b36b      	cbz	r3, 8005a98 <__swbuf_r+0x84>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	1ac0      	subs	r0, r0, r3
 8005a42:	6963      	ldr	r3, [r4, #20]
 8005a44:	b2f6      	uxtb	r6, r6
 8005a46:	4283      	cmp	r3, r0
 8005a48:	4637      	mov	r7, r6
 8005a4a:	dc04      	bgt.n	8005a56 <__swbuf_r+0x42>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f93c 	bl	8005ccc <_fflush_r>
 8005a54:	bb30      	cbnz	r0, 8005aa4 <__swbuf_r+0x90>
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	701e      	strb	r6, [r3, #0]
 8005a64:	6963      	ldr	r3, [r4, #20]
 8005a66:	3001      	adds	r0, #1
 8005a68:	4283      	cmp	r3, r0
 8005a6a:	d004      	beq.n	8005a76 <__swbuf_r+0x62>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	07db      	lsls	r3, r3, #31
 8005a70:	d506      	bpl.n	8005a80 <__swbuf_r+0x6c>
 8005a72:	2e0a      	cmp	r6, #10
 8005a74:	d104      	bne.n	8005a80 <__swbuf_r+0x6c>
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f927 	bl	8005ccc <_fflush_r>
 8005a7e:	b988      	cbnz	r0, 8005aa4 <__swbuf_r+0x90>
 8005a80:	4638      	mov	r0, r7
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <__swbuf_r+0x9c>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d101      	bne.n	8005a8e <__swbuf_r+0x7a>
 8005a8a:	68ac      	ldr	r4, [r5, #8]
 8005a8c:	e7cf      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <__swbuf_r+0xa0>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	bf08      	it	eq
 8005a94:	68ec      	ldreq	r4, [r5, #12]
 8005a96:	e7ca      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f81a 	bl	8005ad4 <__swsetup_r>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d0cb      	beq.n	8005a3c <__swbuf_r+0x28>
 8005aa4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005aa8:	e7ea      	b.n	8005a80 <__swbuf_r+0x6c>
 8005aaa:	bf00      	nop
 8005aac:	08007484 	.word	0x08007484
 8005ab0:	080074a4 	.word	0x080074a4
 8005ab4:	08007464 	.word	0x08007464

08005ab8 <__ascii_wctomb>:
 8005ab8:	b149      	cbz	r1, 8005ace <__ascii_wctomb+0x16>
 8005aba:	2aff      	cmp	r2, #255	; 0xff
 8005abc:	bf85      	ittet	hi
 8005abe:	238a      	movhi	r3, #138	; 0x8a
 8005ac0:	6003      	strhi	r3, [r0, #0]
 8005ac2:	700a      	strbls	r2, [r1, #0]
 8005ac4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005ac8:	bf98      	it	ls
 8005aca:	2001      	movls	r0, #1
 8005acc:	4770      	bx	lr
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4770      	bx	lr
	...

08005ad4 <__swsetup_r>:
 8005ad4:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <__swsetup_r+0xcc>)
 8005ad6:	b570      	push	{r4, r5, r6, lr}
 8005ad8:	681d      	ldr	r5, [r3, #0]
 8005ada:	4606      	mov	r6, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	b125      	cbz	r5, 8005aea <__swsetup_r+0x16>
 8005ae0:	69ab      	ldr	r3, [r5, #24]
 8005ae2:	b913      	cbnz	r3, 8005aea <__swsetup_r+0x16>
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f985 	bl	8005df4 <__sinit>
 8005aea:	4b2e      	ldr	r3, [pc, #184]	; (8005ba4 <__swsetup_r+0xd0>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d10f      	bne.n	8005b10 <__swsetup_r+0x3c>
 8005af0:	686c      	ldr	r4, [r5, #4]
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005af8:	0719      	lsls	r1, r3, #28
 8005afa:	d42c      	bmi.n	8005b56 <__swsetup_r+0x82>
 8005afc:	06dd      	lsls	r5, r3, #27
 8005afe:	d411      	bmi.n	8005b24 <__swsetup_r+0x50>
 8005b00:	2309      	movs	r3, #9
 8005b02:	6033      	str	r3, [r6, #0]
 8005b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b0e:	e03e      	b.n	8005b8e <__swsetup_r+0xba>
 8005b10:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <__swsetup_r+0xd4>)
 8005b12:	429c      	cmp	r4, r3
 8005b14:	d101      	bne.n	8005b1a <__swsetup_r+0x46>
 8005b16:	68ac      	ldr	r4, [r5, #8]
 8005b18:	e7eb      	b.n	8005af2 <__swsetup_r+0x1e>
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <__swsetup_r+0xd8>)
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	bf08      	it	eq
 8005b20:	68ec      	ldreq	r4, [r5, #12]
 8005b22:	e7e6      	b.n	8005af2 <__swsetup_r+0x1e>
 8005b24:	0758      	lsls	r0, r3, #29
 8005b26:	d512      	bpl.n	8005b4e <__swsetup_r+0x7a>
 8005b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b2a:	b141      	cbz	r1, 8005b3e <__swsetup_r+0x6a>
 8005b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <__swsetup_r+0x66>
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff fcd5 	bl	80054e4 <_free_r>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	b94b      	cbnz	r3, 8005b6e <__swsetup_r+0x9a>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d003      	beq.n	8005b6e <__swsetup_r+0x9a>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f000 fa09 	bl	8005f80 <__smakebuf_r>
 8005b6e:	89a0      	ldrh	r0, [r4, #12]
 8005b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b74:	f010 0301 	ands.w	r3, r0, #1
 8005b78:	d00a      	beq.n	8005b90 <__swsetup_r+0xbc>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	6963      	ldr	r3, [r4, #20]
 8005b80:	425b      	negs	r3, r3
 8005b82:	61a3      	str	r3, [r4, #24]
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b943      	cbnz	r3, 8005b9a <__swsetup_r+0xc6>
 8005b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b8c:	d1ba      	bne.n	8005b04 <__swsetup_r+0x30>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	0781      	lsls	r1, r0, #30
 8005b92:	bf58      	it	pl
 8005b94:	6963      	ldrpl	r3, [r4, #20]
 8005b96:	60a3      	str	r3, [r4, #8]
 8005b98:	e7f4      	b.n	8005b84 <__swsetup_r+0xb0>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e7f7      	b.n	8005b8e <__swsetup_r+0xba>
 8005b9e:	bf00      	nop
 8005ba0:	20000008 	.word	0x20000008
 8005ba4:	08007484 	.word	0x08007484
 8005ba8:	080074a4 	.word	0x080074a4
 8005bac:	08007464 	.word	0x08007464

08005bb0 <abort>:
 8005bb0:	b508      	push	{r3, lr}
 8005bb2:	2006      	movs	r0, #6
 8005bb4:	f000 fa4c 	bl	8006050 <raise>
 8005bb8:	2001      	movs	r0, #1
 8005bba:	f7fb fa0d 	bl	8000fd8 <_exit>
	...

08005bc0 <__sflush_r>:
 8005bc0:	898a      	ldrh	r2, [r1, #12]
 8005bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	0710      	lsls	r0, r2, #28
 8005bca:	460c      	mov	r4, r1
 8005bcc:	d458      	bmi.n	8005c80 <__sflush_r+0xc0>
 8005bce:	684b      	ldr	r3, [r1, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dc05      	bgt.n	8005be0 <__sflush_r+0x20>
 8005bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	dc02      	bgt.n	8005be0 <__sflush_r+0x20>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	d0f9      	beq.n	8005bda <__sflush_r+0x1a>
 8005be6:	2300      	movs	r3, #0
 8005be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bec:	682f      	ldr	r7, [r5, #0]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	d032      	beq.n	8005c58 <__sflush_r+0x98>
 8005bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	075a      	lsls	r2, r3, #29
 8005bf8:	d505      	bpl.n	8005c06 <__sflush_r+0x46>
 8005bfa:	6863      	ldr	r3, [r4, #4]
 8005bfc:	1ac0      	subs	r0, r0, r3
 8005bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c00:	b10b      	cbz	r3, 8005c06 <__sflush_r+0x46>
 8005c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c04:	1ac0      	subs	r0, r0, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c0c:	6a21      	ldr	r1, [r4, #32]
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b0      	blx	r6
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	d106      	bne.n	8005c26 <__sflush_r+0x66>
 8005c18:	6829      	ldr	r1, [r5, #0]
 8005c1a:	291d      	cmp	r1, #29
 8005c1c:	d82c      	bhi.n	8005c78 <__sflush_r+0xb8>
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <__sflush_r+0x108>)
 8005c20:	40ca      	lsrs	r2, r1
 8005c22:	07d6      	lsls	r6, r2, #31
 8005c24:	d528      	bpl.n	8005c78 <__sflush_r+0xb8>
 8005c26:	2200      	movs	r2, #0
 8005c28:	6062      	str	r2, [r4, #4]
 8005c2a:	04d9      	lsls	r1, r3, #19
 8005c2c:	6922      	ldr	r2, [r4, #16]
 8005c2e:	6022      	str	r2, [r4, #0]
 8005c30:	d504      	bpl.n	8005c3c <__sflush_r+0x7c>
 8005c32:	1c42      	adds	r2, r0, #1
 8005c34:	d101      	bne.n	8005c3a <__sflush_r+0x7a>
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	b903      	cbnz	r3, 8005c3c <__sflush_r+0x7c>
 8005c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3e:	602f      	str	r7, [r5, #0]
 8005c40:	2900      	cmp	r1, #0
 8005c42:	d0ca      	beq.n	8005bda <__sflush_r+0x1a>
 8005c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	d002      	beq.n	8005c52 <__sflush_r+0x92>
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f7ff fc49 	bl	80054e4 <_free_r>
 8005c52:	2000      	movs	r0, #0
 8005c54:	6360      	str	r0, [r4, #52]	; 0x34
 8005c56:	e7c1      	b.n	8005bdc <__sflush_r+0x1c>
 8005c58:	6a21      	ldr	r1, [r4, #32]
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b0      	blx	r6
 8005c60:	1c41      	adds	r1, r0, #1
 8005c62:	d1c7      	bne.n	8005bf4 <__sflush_r+0x34>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0c4      	beq.n	8005bf4 <__sflush_r+0x34>
 8005c6a:	2b1d      	cmp	r3, #29
 8005c6c:	d001      	beq.n	8005c72 <__sflush_r+0xb2>
 8005c6e:	2b16      	cmp	r3, #22
 8005c70:	d101      	bne.n	8005c76 <__sflush_r+0xb6>
 8005c72:	602f      	str	r7, [r5, #0]
 8005c74:	e7b1      	b.n	8005bda <__sflush_r+0x1a>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	e7ad      	b.n	8005bdc <__sflush_r+0x1c>
 8005c80:	690f      	ldr	r7, [r1, #16]
 8005c82:	2f00      	cmp	r7, #0
 8005c84:	d0a9      	beq.n	8005bda <__sflush_r+0x1a>
 8005c86:	0793      	lsls	r3, r2, #30
 8005c88:	680e      	ldr	r6, [r1, #0]
 8005c8a:	bf08      	it	eq
 8005c8c:	694b      	ldreq	r3, [r1, #20]
 8005c8e:	600f      	str	r7, [r1, #0]
 8005c90:	bf18      	it	ne
 8005c92:	2300      	movne	r3, #0
 8005c94:	eba6 0807 	sub.w	r8, r6, r7
 8005c98:	608b      	str	r3, [r1, #8]
 8005c9a:	f1b8 0f00 	cmp.w	r8, #0
 8005c9e:	dd9c      	ble.n	8005bda <__sflush_r+0x1a>
 8005ca0:	6a21      	ldr	r1, [r4, #32]
 8005ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	463a      	mov	r2, r7
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b0      	blx	r6
 8005cac:	2800      	cmp	r0, #0
 8005cae:	dc06      	bgt.n	8005cbe <__sflush_r+0xfe>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cbc:	e78e      	b.n	8005bdc <__sflush_r+0x1c>
 8005cbe:	4407      	add	r7, r0
 8005cc0:	eba8 0800 	sub.w	r8, r8, r0
 8005cc4:	e7e9      	b.n	8005c9a <__sflush_r+0xda>
 8005cc6:	bf00      	nop
 8005cc8:	20400001 	.word	0x20400001

08005ccc <_fflush_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	690b      	ldr	r3, [r1, #16]
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	b913      	cbnz	r3, 8005cdc <_fflush_r+0x10>
 8005cd6:	2500      	movs	r5, #0
 8005cd8:	4628      	mov	r0, r5
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	b118      	cbz	r0, 8005ce6 <_fflush_r+0x1a>
 8005cde:	6983      	ldr	r3, [r0, #24]
 8005ce0:	b90b      	cbnz	r3, 8005ce6 <_fflush_r+0x1a>
 8005ce2:	f000 f887 	bl	8005df4 <__sinit>
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <_fflush_r+0x6c>)
 8005ce8:	429c      	cmp	r4, r3
 8005cea:	d11b      	bne.n	8005d24 <_fflush_r+0x58>
 8005cec:	686c      	ldr	r4, [r5, #4]
 8005cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0ef      	beq.n	8005cd6 <_fflush_r+0xa>
 8005cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf8:	07d0      	lsls	r0, r2, #31
 8005cfa:	d404      	bmi.n	8005d06 <_fflush_r+0x3a>
 8005cfc:	0599      	lsls	r1, r3, #22
 8005cfe:	d402      	bmi.n	8005d06 <_fflush_r+0x3a>
 8005d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d02:	f000 f915 	bl	8005f30 <__retarget_lock_acquire_recursive>
 8005d06:	4628      	mov	r0, r5
 8005d08:	4621      	mov	r1, r4
 8005d0a:	f7ff ff59 	bl	8005bc0 <__sflush_r>
 8005d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d10:	07da      	lsls	r2, r3, #31
 8005d12:	4605      	mov	r5, r0
 8005d14:	d4e0      	bmi.n	8005cd8 <_fflush_r+0xc>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	059b      	lsls	r3, r3, #22
 8005d1a:	d4dd      	bmi.n	8005cd8 <_fflush_r+0xc>
 8005d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d1e:	f000 f908 	bl	8005f32 <__retarget_lock_release_recursive>
 8005d22:	e7d9      	b.n	8005cd8 <_fflush_r+0xc>
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <_fflush_r+0x70>)
 8005d26:	429c      	cmp	r4, r3
 8005d28:	d101      	bne.n	8005d2e <_fflush_r+0x62>
 8005d2a:	68ac      	ldr	r4, [r5, #8]
 8005d2c:	e7df      	b.n	8005cee <_fflush_r+0x22>
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <_fflush_r+0x74>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	bf08      	it	eq
 8005d34:	68ec      	ldreq	r4, [r5, #12]
 8005d36:	e7da      	b.n	8005cee <_fflush_r+0x22>
 8005d38:	08007484 	.word	0x08007484
 8005d3c:	080074a4 	.word	0x080074a4
 8005d40:	08007464 	.word	0x08007464

08005d44 <std>:
 8005d44:	2300      	movs	r3, #0
 8005d46:	b510      	push	{r4, lr}
 8005d48:	4604      	mov	r4, r0
 8005d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d52:	6083      	str	r3, [r0, #8]
 8005d54:	8181      	strh	r1, [r0, #12]
 8005d56:	6643      	str	r3, [r0, #100]	; 0x64
 8005d58:	81c2      	strh	r2, [r0, #14]
 8005d5a:	6183      	str	r3, [r0, #24]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	2208      	movs	r2, #8
 8005d60:	305c      	adds	r0, #92	; 0x5c
 8005d62:	f7fd fd1d 	bl	80037a0 <memset>
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <std+0x38>)
 8005d68:	6263      	str	r3, [r4, #36]	; 0x24
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x3c>)
 8005d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x40>)
 8005d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <std+0x44>)
 8005d74:	6224      	str	r4, [r4, #32]
 8005d76:	6323      	str	r3, [r4, #48]	; 0x30
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08006089 	.word	0x08006089
 8005d80:	080060ab 	.word	0x080060ab
 8005d84:	080060e3 	.word	0x080060e3
 8005d88:	08006107 	.word	0x08006107

08005d8c <_cleanup_r>:
 8005d8c:	4901      	ldr	r1, [pc, #4]	; (8005d94 <_cleanup_r+0x8>)
 8005d8e:	f000 b8af 	b.w	8005ef0 <_fwalk_reent>
 8005d92:	bf00      	nop
 8005d94:	08005ccd 	.word	0x08005ccd

08005d98 <__sfmoreglue>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	2268      	movs	r2, #104	; 0x68
 8005d9c:	1e4d      	subs	r5, r1, #1
 8005d9e:	4355      	muls	r5, r2
 8005da0:	460e      	mov	r6, r1
 8005da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005da6:	f7ff fc09 	bl	80055bc <_malloc_r>
 8005daa:	4604      	mov	r4, r0
 8005dac:	b140      	cbz	r0, 8005dc0 <__sfmoreglue+0x28>
 8005dae:	2100      	movs	r1, #0
 8005db0:	e9c0 1600 	strd	r1, r6, [r0]
 8005db4:	300c      	adds	r0, #12
 8005db6:	60a0      	str	r0, [r4, #8]
 8005db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dbc:	f7fd fcf0 	bl	80037a0 <memset>
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}

08005dc4 <__sfp_lock_acquire>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__sfp_lock_acquire+0x8>)
 8005dc6:	f000 b8b3 	b.w	8005f30 <__retarget_lock_acquire_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000319 	.word	0x20000319

08005dd0 <__sfp_lock_release>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__sfp_lock_release+0x8>)
 8005dd2:	f000 b8ae 	b.w	8005f32 <__retarget_lock_release_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20000319 	.word	0x20000319

08005ddc <__sinit_lock_acquire>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <__sinit_lock_acquire+0x8>)
 8005dde:	f000 b8a7 	b.w	8005f30 <__retarget_lock_acquire_recursive>
 8005de2:	bf00      	nop
 8005de4:	2000031a 	.word	0x2000031a

08005de8 <__sinit_lock_release>:
 8005de8:	4801      	ldr	r0, [pc, #4]	; (8005df0 <__sinit_lock_release+0x8>)
 8005dea:	f000 b8a2 	b.w	8005f32 <__retarget_lock_release_recursive>
 8005dee:	bf00      	nop
 8005df0:	2000031a 	.word	0x2000031a

08005df4 <__sinit>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4604      	mov	r4, r0
 8005df8:	f7ff fff0 	bl	8005ddc <__sinit_lock_acquire>
 8005dfc:	69a3      	ldr	r3, [r4, #24]
 8005dfe:	b11b      	cbz	r3, 8005e08 <__sinit+0x14>
 8005e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e04:	f7ff bff0 	b.w	8005de8 <__sinit_lock_release>
 8005e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e0e:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <__sinit+0x68>)
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <__sinit+0x6c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	bf04      	itt	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	61a3      	streq	r3, [r4, #24]
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 f820 	bl	8005e64 <__sfp>
 8005e24:	6060      	str	r0, [r4, #4]
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 f81c 	bl	8005e64 <__sfp>
 8005e2c:	60a0      	str	r0, [r4, #8]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 f818 	bl	8005e64 <__sfp>
 8005e34:	2200      	movs	r2, #0
 8005e36:	60e0      	str	r0, [r4, #12]
 8005e38:	2104      	movs	r1, #4
 8005e3a:	6860      	ldr	r0, [r4, #4]
 8005e3c:	f7ff ff82 	bl	8005d44 <std>
 8005e40:	68a0      	ldr	r0, [r4, #8]
 8005e42:	2201      	movs	r2, #1
 8005e44:	2109      	movs	r1, #9
 8005e46:	f7ff ff7d 	bl	8005d44 <std>
 8005e4a:	68e0      	ldr	r0, [r4, #12]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	2112      	movs	r1, #18
 8005e50:	f7ff ff78 	bl	8005d44 <std>
 8005e54:	2301      	movs	r3, #1
 8005e56:	61a3      	str	r3, [r4, #24]
 8005e58:	e7d2      	b.n	8005e00 <__sinit+0xc>
 8005e5a:	bf00      	nop
 8005e5c:	080070e8 	.word	0x080070e8
 8005e60:	08005d8d 	.word	0x08005d8d

08005e64 <__sfp>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	4607      	mov	r7, r0
 8005e68:	f7ff ffac 	bl	8005dc4 <__sfp_lock_acquire>
 8005e6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ee8 <__sfp+0x84>)
 8005e6e:	681e      	ldr	r6, [r3, #0]
 8005e70:	69b3      	ldr	r3, [r6, #24]
 8005e72:	b913      	cbnz	r3, 8005e7a <__sfp+0x16>
 8005e74:	4630      	mov	r0, r6
 8005e76:	f7ff ffbd 	bl	8005df4 <__sinit>
 8005e7a:	3648      	adds	r6, #72	; 0x48
 8005e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	d503      	bpl.n	8005e8c <__sfp+0x28>
 8005e84:	6833      	ldr	r3, [r6, #0]
 8005e86:	b30b      	cbz	r3, 8005ecc <__sfp+0x68>
 8005e88:	6836      	ldr	r6, [r6, #0]
 8005e8a:	e7f7      	b.n	8005e7c <__sfp+0x18>
 8005e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e90:	b9d5      	cbnz	r5, 8005ec8 <__sfp+0x64>
 8005e92:	4b16      	ldr	r3, [pc, #88]	; (8005eec <__sfp+0x88>)
 8005e94:	60e3      	str	r3, [r4, #12]
 8005e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8005e9c:	f000 f847 	bl	8005f2e <__retarget_lock_init_recursive>
 8005ea0:	f7ff ff96 	bl	8005dd0 <__sfp_lock_release>
 8005ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005eac:	6025      	str	r5, [r4, #0]
 8005eae:	61a5      	str	r5, [r4, #24]
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eb8:	f7fd fc72 	bl	80037a0 <memset>
 8005ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec8:	3468      	adds	r4, #104	; 0x68
 8005eca:	e7d9      	b.n	8005e80 <__sfp+0x1c>
 8005ecc:	2104      	movs	r1, #4
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f7ff ff62 	bl	8005d98 <__sfmoreglue>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	6030      	str	r0, [r6, #0]
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d1d5      	bne.n	8005e88 <__sfp+0x24>
 8005edc:	f7ff ff78 	bl	8005dd0 <__sfp_lock_release>
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	e7ee      	b.n	8005ec4 <__sfp+0x60>
 8005ee6:	bf00      	nop
 8005ee8:	080070e8 	.word	0x080070e8
 8005eec:	ffff0001 	.word	0xffff0001

08005ef0 <_fwalk_reent>:
 8005ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	4688      	mov	r8, r1
 8005ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005efc:	2700      	movs	r7, #0
 8005efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f02:	f1b9 0901 	subs.w	r9, r9, #1
 8005f06:	d505      	bpl.n	8005f14 <_fwalk_reent+0x24>
 8005f08:	6824      	ldr	r4, [r4, #0]
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	d1f7      	bne.n	8005efe <_fwalk_reent+0xe>
 8005f0e:	4638      	mov	r0, r7
 8005f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f14:	89ab      	ldrh	r3, [r5, #12]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d907      	bls.n	8005f2a <_fwalk_reent+0x3a>
 8005f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	d003      	beq.n	8005f2a <_fwalk_reent+0x3a>
 8005f22:	4629      	mov	r1, r5
 8005f24:	4630      	mov	r0, r6
 8005f26:	47c0      	blx	r8
 8005f28:	4307      	orrs	r7, r0
 8005f2a:	3568      	adds	r5, #104	; 0x68
 8005f2c:	e7e9      	b.n	8005f02 <_fwalk_reent+0x12>

08005f2e <__retarget_lock_init_recursive>:
 8005f2e:	4770      	bx	lr

08005f30 <__retarget_lock_acquire_recursive>:
 8005f30:	4770      	bx	lr

08005f32 <__retarget_lock_release_recursive>:
 8005f32:	4770      	bx	lr

08005f34 <__swhatbuf_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	460e      	mov	r6, r1
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	b096      	sub	sp, #88	; 0x58
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	da08      	bge.n	8005f58 <__swhatbuf_r+0x24>
 8005f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	061a      	lsls	r2, r3, #24
 8005f50:	d410      	bmi.n	8005f74 <__swhatbuf_r+0x40>
 8005f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f56:	e00e      	b.n	8005f76 <__swhatbuf_r+0x42>
 8005f58:	466a      	mov	r2, sp
 8005f5a:	f000 f8fb 	bl	8006154 <_fstat_r>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	dbf1      	blt.n	8005f46 <__swhatbuf_r+0x12>
 8005f62:	9a01      	ldr	r2, [sp, #4]
 8005f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f6c:	425a      	negs	r2, r3
 8005f6e:	415a      	adcs	r2, r3
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	e7ee      	b.n	8005f52 <__swhatbuf_r+0x1e>
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	2000      	movs	r0, #0
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	b016      	add	sp, #88	; 0x58
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f80 <__smakebuf_r>:
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f84:	079d      	lsls	r5, r3, #30
 8005f86:	4606      	mov	r6, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	d507      	bpl.n	8005f9c <__smakebuf_r+0x1c>
 8005f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2301      	movs	r3, #1
 8005f96:	6163      	str	r3, [r4, #20]
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	ab01      	add	r3, sp, #4
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	f7ff ffc8 	bl	8005f34 <__swhatbuf_r>
 8005fa4:	9900      	ldr	r1, [sp, #0]
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff fb07 	bl	80055bc <_malloc_r>
 8005fae:	b948      	cbnz	r0, 8005fc4 <__smakebuf_r+0x44>
 8005fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb4:	059a      	lsls	r2, r3, #22
 8005fb6:	d4ef      	bmi.n	8005f98 <__smakebuf_r+0x18>
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	e7e3      	b.n	8005f8c <__smakebuf_r+0xc>
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <__smakebuf_r+0x7c>)
 8005fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	6020      	str	r0, [r4, #0]
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	9b00      	ldr	r3, [sp, #0]
 8005fd4:	6163      	str	r3, [r4, #20]
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	6120      	str	r0, [r4, #16]
 8005fda:	b15b      	cbz	r3, 8005ff4 <__smakebuf_r+0x74>
 8005fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 f8c9 	bl	8006178 <_isatty_r>
 8005fe6:	b128      	cbz	r0, 8005ff4 <__smakebuf_r+0x74>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	89a0      	ldrh	r0, [r4, #12]
 8005ff6:	4305      	orrs	r5, r0
 8005ff8:	81a5      	strh	r5, [r4, #12]
 8005ffa:	e7cd      	b.n	8005f98 <__smakebuf_r+0x18>
 8005ffc:	08005d8d 	.word	0x08005d8d

08006000 <_raise_r>:
 8006000:	291f      	cmp	r1, #31
 8006002:	b538      	push	{r3, r4, r5, lr}
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	d904      	bls.n	8006014 <_raise_r+0x14>
 800600a:	2316      	movs	r3, #22
 800600c:	6003      	str	r3, [r0, #0]
 800600e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006016:	b112      	cbz	r2, 800601e <_raise_r+0x1e>
 8006018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800601c:	b94b      	cbnz	r3, 8006032 <_raise_r+0x32>
 800601e:	4620      	mov	r0, r4
 8006020:	f000 f830 	bl	8006084 <_getpid_r>
 8006024:	462a      	mov	r2, r5
 8006026:	4601      	mov	r1, r0
 8006028:	4620      	mov	r0, r4
 800602a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800602e:	f000 b817 	b.w	8006060 <_kill_r>
 8006032:	2b01      	cmp	r3, #1
 8006034:	d00a      	beq.n	800604c <_raise_r+0x4c>
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	d103      	bne.n	8006042 <_raise_r+0x42>
 800603a:	2316      	movs	r3, #22
 800603c:	6003      	str	r3, [r0, #0]
 800603e:	2001      	movs	r0, #1
 8006040:	e7e7      	b.n	8006012 <_raise_r+0x12>
 8006042:	2400      	movs	r4, #0
 8006044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006048:	4628      	mov	r0, r5
 800604a:	4798      	blx	r3
 800604c:	2000      	movs	r0, #0
 800604e:	e7e0      	b.n	8006012 <_raise_r+0x12>

08006050 <raise>:
 8006050:	4b02      	ldr	r3, [pc, #8]	; (800605c <raise+0xc>)
 8006052:	4601      	mov	r1, r0
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f7ff bfd3 	b.w	8006000 <_raise_r>
 800605a:	bf00      	nop
 800605c:	20000008 	.word	0x20000008

08006060 <_kill_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d07      	ldr	r5, [pc, #28]	; (8006080 <_kill_r+0x20>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	4611      	mov	r1, r2
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	f7fa ffa3 	bl	8000fb8 <_kill>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	d102      	bne.n	800607c <_kill_r+0x1c>
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	b103      	cbz	r3, 800607c <_kill_r+0x1c>
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	bd38      	pop	{r3, r4, r5, pc}
 800607e:	bf00      	nop
 8006080:	20000314 	.word	0x20000314

08006084 <_getpid_r>:
 8006084:	f7fa bf90 	b.w	8000fa8 <_getpid>

08006088 <__sread>:
 8006088:	b510      	push	{r4, lr}
 800608a:	460c      	mov	r4, r1
 800608c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006090:	f000 f894 	bl	80061bc <_read_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	bfab      	itete	ge
 8006098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800609a:	89a3      	ldrhlt	r3, [r4, #12]
 800609c:	181b      	addge	r3, r3, r0
 800609e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060a2:	bfac      	ite	ge
 80060a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060a6:	81a3      	strhlt	r3, [r4, #12]
 80060a8:	bd10      	pop	{r4, pc}

080060aa <__swrite>:
 80060aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	461f      	mov	r7, r3
 80060b0:	898b      	ldrh	r3, [r1, #12]
 80060b2:	05db      	lsls	r3, r3, #23
 80060b4:	4605      	mov	r5, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	4616      	mov	r6, r2
 80060ba:	d505      	bpl.n	80060c8 <__swrite+0x1e>
 80060bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c0:	2302      	movs	r3, #2
 80060c2:	2200      	movs	r2, #0
 80060c4:	f000 f868 	bl	8006198 <_lseek_r>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	4628      	mov	r0, r5
 80060da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060de:	f000 b817 	b.w	8006110 <_write_r>

080060e2 <__sseek>:
 80060e2:	b510      	push	{r4, lr}
 80060e4:	460c      	mov	r4, r1
 80060e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ea:	f000 f855 	bl	8006198 <_lseek_r>
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	bf15      	itete	ne
 80060f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060fe:	81a3      	strheq	r3, [r4, #12]
 8006100:	bf18      	it	ne
 8006102:	81a3      	strhne	r3, [r4, #12]
 8006104:	bd10      	pop	{r4, pc}

08006106 <__sclose>:
 8006106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610a:	f000 b813 	b.w	8006134 <_close_r>
	...

08006110 <_write_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	; (8006130 <_write_r+0x20>)
 8006114:	4604      	mov	r4, r0
 8006116:	4608      	mov	r0, r1
 8006118:	4611      	mov	r1, r2
 800611a:	2200      	movs	r2, #0
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fa ff81 	bl	8001026 <_write>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_write_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_write_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000314 	.word	0x20000314

08006134 <_close_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d06      	ldr	r5, [pc, #24]	; (8006150 <_close_r+0x1c>)
 8006138:	2300      	movs	r3, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fa ff8d 	bl	800105e <_close>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_close_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_close_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20000314 	.word	0x20000314

08006154 <_fstat_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	; (8006174 <_fstat_r+0x20>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	f7fa ff88 	bl	8001076 <_fstat>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d102      	bne.n	8006170 <_fstat_r+0x1c>
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	b103      	cbz	r3, 8006170 <_fstat_r+0x1c>
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	20000314 	.word	0x20000314

08006178 <_isatty_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d06      	ldr	r5, [pc, #24]	; (8006194 <_isatty_r+0x1c>)
 800617c:	2300      	movs	r3, #0
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	f7fa ff87 	bl	8001096 <_isatty>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_isatty_r+0x1a>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_isatty_r+0x1a>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	20000314 	.word	0x20000314

08006198 <_lseek_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4d07      	ldr	r5, [pc, #28]	; (80061b8 <_lseek_r+0x20>)
 800619c:	4604      	mov	r4, r0
 800619e:	4608      	mov	r0, r1
 80061a0:	4611      	mov	r1, r2
 80061a2:	2200      	movs	r2, #0
 80061a4:	602a      	str	r2, [r5, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f7fa ff80 	bl	80010ac <_lseek>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_lseek_r+0x1e>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_lseek_r+0x1e>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	20000314 	.word	0x20000314

080061bc <_read_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_read_r+0x20>)
 80061c0:	4604      	mov	r4, r0
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	2200      	movs	r2, #0
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fa ff0e 	bl	8000fec <_read>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_read_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_read_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000314 	.word	0x20000314

080061e0 <round>:
 80061e0:	ec51 0b10 	vmov	r0, r1, d0
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80061ea:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80061ee:	2c13      	cmp	r4, #19
 80061f0:	ee10 2a10 	vmov	r2, s0
 80061f4:	460b      	mov	r3, r1
 80061f6:	dc19      	bgt.n	800622c <round+0x4c>
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	da09      	bge.n	8006210 <round+0x30>
 80061fc:	3401      	adds	r4, #1
 80061fe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006202:	d103      	bne.n	800620c <round+0x2c>
 8006204:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006208:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800620c:	2200      	movs	r2, #0
 800620e:	e028      	b.n	8006262 <round+0x82>
 8006210:	4d15      	ldr	r5, [pc, #84]	; (8006268 <round+0x88>)
 8006212:	4125      	asrs	r5, r4
 8006214:	ea01 0605 	and.w	r6, r1, r5
 8006218:	4332      	orrs	r2, r6
 800621a:	d00e      	beq.n	800623a <round+0x5a>
 800621c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006220:	fa42 f404 	asr.w	r4, r2, r4
 8006224:	4423      	add	r3, r4
 8006226:	ea23 0305 	bic.w	r3, r3, r5
 800622a:	e7ef      	b.n	800620c <round+0x2c>
 800622c:	2c33      	cmp	r4, #51	; 0x33
 800622e:	dd07      	ble.n	8006240 <round+0x60>
 8006230:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006234:	d101      	bne.n	800623a <round+0x5a>
 8006236:	f7fa f831 	bl	800029c <__adddf3>
 800623a:	ec41 0b10 	vmov	d0, r0, r1
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006244:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006248:	40f5      	lsrs	r5, r6
 800624a:	4228      	tst	r0, r5
 800624c:	d0f5      	beq.n	800623a <round+0x5a>
 800624e:	2101      	movs	r1, #1
 8006250:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006254:	fa01 f404 	lsl.w	r4, r1, r4
 8006258:	1912      	adds	r2, r2, r4
 800625a:	bf28      	it	cs
 800625c:	185b      	addcs	r3, r3, r1
 800625e:	ea22 0205 	bic.w	r2, r2, r5
 8006262:	4619      	mov	r1, r3
 8006264:	4610      	mov	r0, r2
 8006266:	e7e8      	b.n	800623a <round+0x5a>
 8006268:	000fffff 	.word	0x000fffff

0800626c <pow>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	ed2d 8b02 	vpush	{d8}
 8006272:	eeb0 8a40 	vmov.f32	s16, s0
 8006276:	eef0 8a60 	vmov.f32	s17, s1
 800627a:	ec55 4b11 	vmov	r4, r5, d1
 800627e:	f000 f867 	bl	8006350 <__ieee754_pow>
 8006282:	4622      	mov	r2, r4
 8006284:	462b      	mov	r3, r5
 8006286:	4620      	mov	r0, r4
 8006288:	4629      	mov	r1, r5
 800628a:	ec57 6b10 	vmov	r6, r7, d0
 800628e:	f7fa fc55 	bl	8000b3c <__aeabi_dcmpun>
 8006292:	2800      	cmp	r0, #0
 8006294:	d13b      	bne.n	800630e <pow+0xa2>
 8006296:	ec51 0b18 	vmov	r0, r1, d8
 800629a:	2200      	movs	r2, #0
 800629c:	2300      	movs	r3, #0
 800629e:	f7fa fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80062a2:	b1b8      	cbz	r0, 80062d4 <pow+0x68>
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	4620      	mov	r0, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	f7fa fc14 	bl	8000ad8 <__aeabi_dcmpeq>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d146      	bne.n	8006342 <pow+0xd6>
 80062b4:	ec45 4b10 	vmov	d0, r4, r5
 80062b8:	f000 fe63 	bl	8006f82 <finite>
 80062bc:	b338      	cbz	r0, 800630e <pow+0xa2>
 80062be:	2200      	movs	r2, #0
 80062c0:	2300      	movs	r3, #0
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	f7fa fc11 	bl	8000aec <__aeabi_dcmplt>
 80062ca:	b300      	cbz	r0, 800630e <pow+0xa2>
 80062cc:	f7fd fa3e 	bl	800374c <__errno>
 80062d0:	2322      	movs	r3, #34	; 0x22
 80062d2:	e01b      	b.n	800630c <pow+0xa0>
 80062d4:	ec47 6b10 	vmov	d0, r6, r7
 80062d8:	f000 fe53 	bl	8006f82 <finite>
 80062dc:	b9e0      	cbnz	r0, 8006318 <pow+0xac>
 80062de:	eeb0 0a48 	vmov.f32	s0, s16
 80062e2:	eef0 0a68 	vmov.f32	s1, s17
 80062e6:	f000 fe4c 	bl	8006f82 <finite>
 80062ea:	b1a8      	cbz	r0, 8006318 <pow+0xac>
 80062ec:	ec45 4b10 	vmov	d0, r4, r5
 80062f0:	f000 fe47 	bl	8006f82 <finite>
 80062f4:	b180      	cbz	r0, 8006318 <pow+0xac>
 80062f6:	4632      	mov	r2, r6
 80062f8:	463b      	mov	r3, r7
 80062fa:	4630      	mov	r0, r6
 80062fc:	4639      	mov	r1, r7
 80062fe:	f7fa fc1d 	bl	8000b3c <__aeabi_dcmpun>
 8006302:	2800      	cmp	r0, #0
 8006304:	d0e2      	beq.n	80062cc <pow+0x60>
 8006306:	f7fd fa21 	bl	800374c <__errno>
 800630a:	2321      	movs	r3, #33	; 0x21
 800630c:	6003      	str	r3, [r0, #0]
 800630e:	ecbd 8b02 	vpop	{d8}
 8006312:	ec47 6b10 	vmov	d0, r6, r7
 8006316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	4630      	mov	r0, r6
 800631e:	4639      	mov	r1, r7
 8006320:	f7fa fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006324:	2800      	cmp	r0, #0
 8006326:	d0f2      	beq.n	800630e <pow+0xa2>
 8006328:	eeb0 0a48 	vmov.f32	s0, s16
 800632c:	eef0 0a68 	vmov.f32	s1, s17
 8006330:	f000 fe27 	bl	8006f82 <finite>
 8006334:	2800      	cmp	r0, #0
 8006336:	d0ea      	beq.n	800630e <pow+0xa2>
 8006338:	ec45 4b10 	vmov	d0, r4, r5
 800633c:	f000 fe21 	bl	8006f82 <finite>
 8006340:	e7c3      	b.n	80062ca <pow+0x5e>
 8006342:	4f01      	ldr	r7, [pc, #4]	; (8006348 <pow+0xdc>)
 8006344:	2600      	movs	r6, #0
 8006346:	e7e2      	b.n	800630e <pow+0xa2>
 8006348:	3ff00000 	.word	0x3ff00000
 800634c:	00000000 	.word	0x00000000

08006350 <__ieee754_pow>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	ed2d 8b06 	vpush	{d8-d10}
 8006358:	b089      	sub	sp, #36	; 0x24
 800635a:	ed8d 1b00 	vstr	d1, [sp]
 800635e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006362:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006366:	ea58 0102 	orrs.w	r1, r8, r2
 800636a:	ec57 6b10 	vmov	r6, r7, d0
 800636e:	d115      	bne.n	800639c <__ieee754_pow+0x4c>
 8006370:	19b3      	adds	r3, r6, r6
 8006372:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006376:	4152      	adcs	r2, r2
 8006378:	4299      	cmp	r1, r3
 800637a:	4b89      	ldr	r3, [pc, #548]	; (80065a0 <__ieee754_pow+0x250>)
 800637c:	4193      	sbcs	r3, r2
 800637e:	f080 84d2 	bcs.w	8006d26 <__ieee754_pow+0x9d6>
 8006382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 ff87 	bl	800029c <__adddf3>
 800638e:	ec41 0b10 	vmov	d0, r0, r1
 8006392:	b009      	add	sp, #36	; 0x24
 8006394:	ecbd 8b06 	vpop	{d8-d10}
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	4b81      	ldr	r3, [pc, #516]	; (80065a4 <__ieee754_pow+0x254>)
 800639e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80063a2:	429c      	cmp	r4, r3
 80063a4:	ee10 aa10 	vmov	sl, s0
 80063a8:	463d      	mov	r5, r7
 80063aa:	dc06      	bgt.n	80063ba <__ieee754_pow+0x6a>
 80063ac:	d101      	bne.n	80063b2 <__ieee754_pow+0x62>
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	d1e7      	bne.n	8006382 <__ieee754_pow+0x32>
 80063b2:	4598      	cmp	r8, r3
 80063b4:	dc01      	bgt.n	80063ba <__ieee754_pow+0x6a>
 80063b6:	d10f      	bne.n	80063d8 <__ieee754_pow+0x88>
 80063b8:	b172      	cbz	r2, 80063d8 <__ieee754_pow+0x88>
 80063ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80063be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80063c2:	ea55 050a 	orrs.w	r5, r5, sl
 80063c6:	d1dc      	bne.n	8006382 <__ieee754_pow+0x32>
 80063c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80063cc:	18db      	adds	r3, r3, r3
 80063ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80063d2:	4152      	adcs	r2, r2
 80063d4:	429d      	cmp	r5, r3
 80063d6:	e7d0      	b.n	800637a <__ieee754_pow+0x2a>
 80063d8:	2d00      	cmp	r5, #0
 80063da:	da3b      	bge.n	8006454 <__ieee754_pow+0x104>
 80063dc:	4b72      	ldr	r3, [pc, #456]	; (80065a8 <__ieee754_pow+0x258>)
 80063de:	4598      	cmp	r8, r3
 80063e0:	dc51      	bgt.n	8006486 <__ieee754_pow+0x136>
 80063e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80063e6:	4598      	cmp	r8, r3
 80063e8:	f340 84ac 	ble.w	8006d44 <__ieee754_pow+0x9f4>
 80063ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80063f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063f4:	2b14      	cmp	r3, #20
 80063f6:	dd0f      	ble.n	8006418 <__ieee754_pow+0xc8>
 80063f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80063fc:	fa22 f103 	lsr.w	r1, r2, r3
 8006400:	fa01 f303 	lsl.w	r3, r1, r3
 8006404:	4293      	cmp	r3, r2
 8006406:	f040 849d 	bne.w	8006d44 <__ieee754_pow+0x9f4>
 800640a:	f001 0101 	and.w	r1, r1, #1
 800640e:	f1c1 0302 	rsb	r3, r1, #2
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	b182      	cbz	r2, 8006438 <__ieee754_pow+0xe8>
 8006416:	e05f      	b.n	80064d8 <__ieee754_pow+0x188>
 8006418:	2a00      	cmp	r2, #0
 800641a:	d15b      	bne.n	80064d4 <__ieee754_pow+0x184>
 800641c:	f1c3 0314 	rsb	r3, r3, #20
 8006420:	fa48 f103 	asr.w	r1, r8, r3
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	4543      	cmp	r3, r8
 800642a:	f040 8488 	bne.w	8006d3e <__ieee754_pow+0x9ee>
 800642e:	f001 0101 	and.w	r1, r1, #1
 8006432:	f1c1 0302 	rsb	r3, r1, #2
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	4b5c      	ldr	r3, [pc, #368]	; (80065ac <__ieee754_pow+0x25c>)
 800643a:	4598      	cmp	r8, r3
 800643c:	d132      	bne.n	80064a4 <__ieee754_pow+0x154>
 800643e:	f1b9 0f00 	cmp.w	r9, #0
 8006442:	f280 8478 	bge.w	8006d36 <__ieee754_pow+0x9e6>
 8006446:	4959      	ldr	r1, [pc, #356]	; (80065ac <__ieee754_pow+0x25c>)
 8006448:	4632      	mov	r2, r6
 800644a:	463b      	mov	r3, r7
 800644c:	2000      	movs	r0, #0
 800644e:	f7fa fa05 	bl	800085c <__aeabi_ddiv>
 8006452:	e79c      	b.n	800638e <__ieee754_pow+0x3e>
 8006454:	2300      	movs	r3, #0
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	2a00      	cmp	r2, #0
 800645a:	d13d      	bne.n	80064d8 <__ieee754_pow+0x188>
 800645c:	4b51      	ldr	r3, [pc, #324]	; (80065a4 <__ieee754_pow+0x254>)
 800645e:	4598      	cmp	r8, r3
 8006460:	d1ea      	bne.n	8006438 <__ieee754_pow+0xe8>
 8006462:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006466:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800646a:	ea53 030a 	orrs.w	r3, r3, sl
 800646e:	f000 845a 	beq.w	8006d26 <__ieee754_pow+0x9d6>
 8006472:	4b4f      	ldr	r3, [pc, #316]	; (80065b0 <__ieee754_pow+0x260>)
 8006474:	429c      	cmp	r4, r3
 8006476:	dd08      	ble.n	800648a <__ieee754_pow+0x13a>
 8006478:	f1b9 0f00 	cmp.w	r9, #0
 800647c:	f2c0 8457 	blt.w	8006d2e <__ieee754_pow+0x9de>
 8006480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006484:	e783      	b.n	800638e <__ieee754_pow+0x3e>
 8006486:	2302      	movs	r3, #2
 8006488:	e7e5      	b.n	8006456 <__ieee754_pow+0x106>
 800648a:	f1b9 0f00 	cmp.w	r9, #0
 800648e:	f04f 0000 	mov.w	r0, #0
 8006492:	f04f 0100 	mov.w	r1, #0
 8006496:	f6bf af7a 	bge.w	800638e <__ieee754_pow+0x3e>
 800649a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800649e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80064a2:	e774      	b.n	800638e <__ieee754_pow+0x3e>
 80064a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80064a8:	d106      	bne.n	80064b8 <__ieee754_pow+0x168>
 80064aa:	4632      	mov	r2, r6
 80064ac:	463b      	mov	r3, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7fa f8a9 	bl	8000608 <__aeabi_dmul>
 80064b6:	e76a      	b.n	800638e <__ieee754_pow+0x3e>
 80064b8:	4b3e      	ldr	r3, [pc, #248]	; (80065b4 <__ieee754_pow+0x264>)
 80064ba:	4599      	cmp	r9, r3
 80064bc:	d10c      	bne.n	80064d8 <__ieee754_pow+0x188>
 80064be:	2d00      	cmp	r5, #0
 80064c0:	db0a      	blt.n	80064d8 <__ieee754_pow+0x188>
 80064c2:	ec47 6b10 	vmov	d0, r6, r7
 80064c6:	b009      	add	sp, #36	; 0x24
 80064c8:	ecbd 8b06 	vpop	{d8-d10}
 80064cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d0:	f000 bc6c 	b.w	8006dac <__ieee754_sqrt>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9304      	str	r3, [sp, #16]
 80064d8:	ec47 6b10 	vmov	d0, r6, r7
 80064dc:	f000 fd48 	bl	8006f70 <fabs>
 80064e0:	ec51 0b10 	vmov	r0, r1, d0
 80064e4:	f1ba 0f00 	cmp.w	sl, #0
 80064e8:	d129      	bne.n	800653e <__ieee754_pow+0x1ee>
 80064ea:	b124      	cbz	r4, 80064f6 <__ieee754_pow+0x1a6>
 80064ec:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <__ieee754_pow+0x25c>)
 80064ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d123      	bne.n	800653e <__ieee754_pow+0x1ee>
 80064f6:	f1b9 0f00 	cmp.w	r9, #0
 80064fa:	da05      	bge.n	8006508 <__ieee754_pow+0x1b8>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	2000      	movs	r0, #0
 8006502:	492a      	ldr	r1, [pc, #168]	; (80065ac <__ieee754_pow+0x25c>)
 8006504:	f7fa f9aa 	bl	800085c <__aeabi_ddiv>
 8006508:	2d00      	cmp	r5, #0
 800650a:	f6bf af40 	bge.w	800638e <__ieee754_pow+0x3e>
 800650e:	9b04      	ldr	r3, [sp, #16]
 8006510:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006514:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006518:	4323      	orrs	r3, r4
 800651a:	d108      	bne.n	800652e <__ieee754_pow+0x1de>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	f7f9 feb8 	bl	8000298 <__aeabi_dsub>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e78f      	b.n	800644e <__ieee754_pow+0xfe>
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	2b01      	cmp	r3, #1
 8006532:	f47f af2c 	bne.w	800638e <__ieee754_pow+0x3e>
 8006536:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800653a:	4619      	mov	r1, r3
 800653c:	e727      	b.n	800638e <__ieee754_pow+0x3e>
 800653e:	0feb      	lsrs	r3, r5, #31
 8006540:	3b01      	subs	r3, #1
 8006542:	9306      	str	r3, [sp, #24]
 8006544:	9a06      	ldr	r2, [sp, #24]
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	d102      	bne.n	8006552 <__ieee754_pow+0x202>
 800654c:	4632      	mov	r2, r6
 800654e:	463b      	mov	r3, r7
 8006550:	e7e6      	b.n	8006520 <__ieee754_pow+0x1d0>
 8006552:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <__ieee754_pow+0x268>)
 8006554:	4598      	cmp	r8, r3
 8006556:	f340 80fb 	ble.w	8006750 <__ieee754_pow+0x400>
 800655a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800655e:	4598      	cmp	r8, r3
 8006560:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <__ieee754_pow+0x260>)
 8006562:	dd0c      	ble.n	800657e <__ieee754_pow+0x22e>
 8006564:	429c      	cmp	r4, r3
 8006566:	dc0f      	bgt.n	8006588 <__ieee754_pow+0x238>
 8006568:	f1b9 0f00 	cmp.w	r9, #0
 800656c:	da0f      	bge.n	800658e <__ieee754_pow+0x23e>
 800656e:	2000      	movs	r0, #0
 8006570:	b009      	add	sp, #36	; 0x24
 8006572:	ecbd 8b06 	vpop	{d8-d10}
 8006576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	f000 bcf0 	b.w	8006f5e <__math_oflow>
 800657e:	429c      	cmp	r4, r3
 8006580:	dbf2      	blt.n	8006568 <__ieee754_pow+0x218>
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <__ieee754_pow+0x25c>)
 8006584:	429c      	cmp	r4, r3
 8006586:	dd19      	ble.n	80065bc <__ieee754_pow+0x26c>
 8006588:	f1b9 0f00 	cmp.w	r9, #0
 800658c:	dcef      	bgt.n	800656e <__ieee754_pow+0x21e>
 800658e:	2000      	movs	r0, #0
 8006590:	b009      	add	sp, #36	; 0x24
 8006592:	ecbd 8b06 	vpop	{d8-d10}
 8006596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	f000 bcd7 	b.w	8006f4c <__math_uflow>
 800659e:	bf00      	nop
 80065a0:	fff00000 	.word	0xfff00000
 80065a4:	7ff00000 	.word	0x7ff00000
 80065a8:	433fffff 	.word	0x433fffff
 80065ac:	3ff00000 	.word	0x3ff00000
 80065b0:	3fefffff 	.word	0x3fefffff
 80065b4:	3fe00000 	.word	0x3fe00000
 80065b8:	41e00000 	.word	0x41e00000
 80065bc:	4b60      	ldr	r3, [pc, #384]	; (8006740 <__ieee754_pow+0x3f0>)
 80065be:	2200      	movs	r2, #0
 80065c0:	f7f9 fe6a 	bl	8000298 <__aeabi_dsub>
 80065c4:	a354      	add	r3, pc, #336	; (adr r3, 8006718 <__ieee754_pow+0x3c8>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	4604      	mov	r4, r0
 80065cc:	460d      	mov	r5, r1
 80065ce:	f7fa f81b 	bl	8000608 <__aeabi_dmul>
 80065d2:	a353      	add	r3, pc, #332	; (adr r3, 8006720 <__ieee754_pow+0x3d0>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	4606      	mov	r6, r0
 80065da:	460f      	mov	r7, r1
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7fa f812 	bl	8000608 <__aeabi_dmul>
 80065e4:	4b57      	ldr	r3, [pc, #348]	; (8006744 <__ieee754_pow+0x3f4>)
 80065e6:	4682      	mov	sl, r0
 80065e8:	468b      	mov	fp, r1
 80065ea:	2200      	movs	r2, #0
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7fa f80a 	bl	8000608 <__aeabi_dmul>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	a14b      	add	r1, pc, #300	; (adr r1, 8006728 <__ieee754_pow+0x3d8>)
 80065fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065fe:	f7f9 fe4b 	bl	8000298 <__aeabi_dsub>
 8006602:	4622      	mov	r2, r4
 8006604:	462b      	mov	r3, r5
 8006606:	f7f9 ffff 	bl	8000608 <__aeabi_dmul>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	2000      	movs	r0, #0
 8006610:	494d      	ldr	r1, [pc, #308]	; (8006748 <__ieee754_pow+0x3f8>)
 8006612:	f7f9 fe41 	bl	8000298 <__aeabi_dsub>
 8006616:	4622      	mov	r2, r4
 8006618:	4680      	mov	r8, r0
 800661a:	4689      	mov	r9, r1
 800661c:	462b      	mov	r3, r5
 800661e:	4620      	mov	r0, r4
 8006620:	4629      	mov	r1, r5
 8006622:	f7f9 fff1 	bl	8000608 <__aeabi_dmul>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4640      	mov	r0, r8
 800662c:	4649      	mov	r1, r9
 800662e:	f7f9 ffeb 	bl	8000608 <__aeabi_dmul>
 8006632:	a33f      	add	r3, pc, #252	; (adr r3, 8006730 <__ieee754_pow+0x3e0>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 ffe6 	bl	8000608 <__aeabi_dmul>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4650      	mov	r0, sl
 8006642:	4659      	mov	r1, fp
 8006644:	f7f9 fe28 	bl	8000298 <__aeabi_dsub>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4680      	mov	r8, r0
 800664e:	4689      	mov	r9, r1
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7f9 fe22 	bl	800029c <__adddf3>
 8006658:	2000      	movs	r0, #0
 800665a:	4632      	mov	r2, r6
 800665c:	463b      	mov	r3, r7
 800665e:	4604      	mov	r4, r0
 8006660:	460d      	mov	r5, r1
 8006662:	f7f9 fe19 	bl	8000298 <__aeabi_dsub>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	f7f9 fe13 	bl	8000298 <__aeabi_dsub>
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	9a06      	ldr	r2, [sp, #24]
 8006676:	3b01      	subs	r3, #1
 8006678:	4313      	orrs	r3, r2
 800667a:	4682      	mov	sl, r0
 800667c:	468b      	mov	fp, r1
 800667e:	f040 81e7 	bne.w	8006a50 <__ieee754_pow+0x700>
 8006682:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006738 <__ieee754_pow+0x3e8>
 8006686:	eeb0 8a47 	vmov.f32	s16, s14
 800668a:	eef0 8a67 	vmov.f32	s17, s15
 800668e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006692:	2600      	movs	r6, #0
 8006694:	4632      	mov	r2, r6
 8006696:	463b      	mov	r3, r7
 8006698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800669c:	f7f9 fdfc 	bl	8000298 <__aeabi_dsub>
 80066a0:	4622      	mov	r2, r4
 80066a2:	462b      	mov	r3, r5
 80066a4:	f7f9 ffb0 	bl	8000608 <__aeabi_dmul>
 80066a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ac:	4680      	mov	r8, r0
 80066ae:	4689      	mov	r9, r1
 80066b0:	4650      	mov	r0, sl
 80066b2:	4659      	mov	r1, fp
 80066b4:	f7f9 ffa8 	bl	8000608 <__aeabi_dmul>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4640      	mov	r0, r8
 80066be:	4649      	mov	r1, r9
 80066c0:	f7f9 fdec 	bl	800029c <__adddf3>
 80066c4:	4632      	mov	r2, r6
 80066c6:	463b      	mov	r3, r7
 80066c8:	4680      	mov	r8, r0
 80066ca:	4689      	mov	r9, r1
 80066cc:	4620      	mov	r0, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	f7f9 ff9a 	bl	8000608 <__aeabi_dmul>
 80066d4:	460b      	mov	r3, r1
 80066d6:	4604      	mov	r4, r0
 80066d8:	460d      	mov	r5, r1
 80066da:	4602      	mov	r2, r0
 80066dc:	4649      	mov	r1, r9
 80066de:	4640      	mov	r0, r8
 80066e0:	f7f9 fddc 	bl	800029c <__adddf3>
 80066e4:	4b19      	ldr	r3, [pc, #100]	; (800674c <__ieee754_pow+0x3fc>)
 80066e6:	4299      	cmp	r1, r3
 80066e8:	ec45 4b19 	vmov	d9, r4, r5
 80066ec:	4606      	mov	r6, r0
 80066ee:	460f      	mov	r7, r1
 80066f0:	468b      	mov	fp, r1
 80066f2:	f340 82f1 	ble.w	8006cd8 <__ieee754_pow+0x988>
 80066f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80066fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80066fe:	4303      	orrs	r3, r0
 8006700:	f000 81e4 	beq.w	8006acc <__ieee754_pow+0x77c>
 8006704:	ec51 0b18 	vmov	r0, r1, d8
 8006708:	2200      	movs	r2, #0
 800670a:	2300      	movs	r3, #0
 800670c:	f7fa f9ee 	bl	8000aec <__aeabi_dcmplt>
 8006710:	3800      	subs	r0, #0
 8006712:	bf18      	it	ne
 8006714:	2001      	movne	r0, #1
 8006716:	e72b      	b.n	8006570 <__ieee754_pow+0x220>
 8006718:	60000000 	.word	0x60000000
 800671c:	3ff71547 	.word	0x3ff71547
 8006720:	f85ddf44 	.word	0xf85ddf44
 8006724:	3e54ae0b 	.word	0x3e54ae0b
 8006728:	55555555 	.word	0x55555555
 800672c:	3fd55555 	.word	0x3fd55555
 8006730:	652b82fe 	.word	0x652b82fe
 8006734:	3ff71547 	.word	0x3ff71547
 8006738:	00000000 	.word	0x00000000
 800673c:	bff00000 	.word	0xbff00000
 8006740:	3ff00000 	.word	0x3ff00000
 8006744:	3fd00000 	.word	0x3fd00000
 8006748:	3fe00000 	.word	0x3fe00000
 800674c:	408fffff 	.word	0x408fffff
 8006750:	4bd5      	ldr	r3, [pc, #852]	; (8006aa8 <__ieee754_pow+0x758>)
 8006752:	402b      	ands	r3, r5
 8006754:	2200      	movs	r2, #0
 8006756:	b92b      	cbnz	r3, 8006764 <__ieee754_pow+0x414>
 8006758:	4bd4      	ldr	r3, [pc, #848]	; (8006aac <__ieee754_pow+0x75c>)
 800675a:	f7f9 ff55 	bl	8000608 <__aeabi_dmul>
 800675e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006762:	460c      	mov	r4, r1
 8006764:	1523      	asrs	r3, r4, #20
 8006766:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800676a:	4413      	add	r3, r2
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	4bd0      	ldr	r3, [pc, #832]	; (8006ab0 <__ieee754_pow+0x760>)
 8006770:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006774:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006778:	429c      	cmp	r4, r3
 800677a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800677e:	dd08      	ble.n	8006792 <__ieee754_pow+0x442>
 8006780:	4bcc      	ldr	r3, [pc, #816]	; (8006ab4 <__ieee754_pow+0x764>)
 8006782:	429c      	cmp	r4, r3
 8006784:	f340 8162 	ble.w	8006a4c <__ieee754_pow+0x6fc>
 8006788:	9b05      	ldr	r3, [sp, #20]
 800678a:	3301      	adds	r3, #1
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006792:	2400      	movs	r4, #0
 8006794:	00e3      	lsls	r3, r4, #3
 8006796:	9307      	str	r3, [sp, #28]
 8006798:	4bc7      	ldr	r3, [pc, #796]	; (8006ab8 <__ieee754_pow+0x768>)
 800679a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800679e:	ed93 7b00 	vldr	d7, [r3]
 80067a2:	4629      	mov	r1, r5
 80067a4:	ec53 2b17 	vmov	r2, r3, d7
 80067a8:	eeb0 9a47 	vmov.f32	s18, s14
 80067ac:	eef0 9a67 	vmov.f32	s19, s15
 80067b0:	4682      	mov	sl, r0
 80067b2:	f7f9 fd71 	bl	8000298 <__aeabi_dsub>
 80067b6:	4652      	mov	r2, sl
 80067b8:	4606      	mov	r6, r0
 80067ba:	460f      	mov	r7, r1
 80067bc:	462b      	mov	r3, r5
 80067be:	ec51 0b19 	vmov	r0, r1, d9
 80067c2:	f7f9 fd6b 	bl	800029c <__adddf3>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	2000      	movs	r0, #0
 80067cc:	49bb      	ldr	r1, [pc, #748]	; (8006abc <__ieee754_pow+0x76c>)
 80067ce:	f7fa f845 	bl	800085c <__aeabi_ddiv>
 80067d2:	ec41 0b1a 	vmov	d10, r0, r1
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7f9 ff13 	bl	8000608 <__aeabi_dmul>
 80067e2:	2300      	movs	r3, #0
 80067e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e8:	9302      	str	r3, [sp, #8]
 80067ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067ee:	46ab      	mov	fp, r5
 80067f0:	106d      	asrs	r5, r5, #1
 80067f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80067f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80067fa:	ec41 0b18 	vmov	d8, r0, r1
 80067fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006802:	2200      	movs	r2, #0
 8006804:	4640      	mov	r0, r8
 8006806:	4649      	mov	r1, r9
 8006808:	4614      	mov	r4, r2
 800680a:	461d      	mov	r5, r3
 800680c:	f7f9 fefc 	bl	8000608 <__aeabi_dmul>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7f9 fd3e 	bl	8000298 <__aeabi_dsub>
 800681c:	ec53 2b19 	vmov	r2, r3, d9
 8006820:	4606      	mov	r6, r0
 8006822:	460f      	mov	r7, r1
 8006824:	4620      	mov	r0, r4
 8006826:	4629      	mov	r1, r5
 8006828:	f7f9 fd36 	bl	8000298 <__aeabi_dsub>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	f7f9 fd30 	bl	8000298 <__aeabi_dsub>
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	f7f9 fee4 	bl	8000608 <__aeabi_dmul>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	f7f9 fd26 	bl	8000298 <__aeabi_dsub>
 800684c:	ec53 2b1a 	vmov	r2, r3, d10
 8006850:	f7f9 feda 	bl	8000608 <__aeabi_dmul>
 8006854:	ec53 2b18 	vmov	r2, r3, d8
 8006858:	ec41 0b19 	vmov	d9, r0, r1
 800685c:	ec51 0b18 	vmov	r0, r1, d8
 8006860:	f7f9 fed2 	bl	8000608 <__aeabi_dmul>
 8006864:	a37c      	add	r3, pc, #496	; (adr r3, 8006a58 <__ieee754_pow+0x708>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	4604      	mov	r4, r0
 800686c:	460d      	mov	r5, r1
 800686e:	f7f9 fecb 	bl	8000608 <__aeabi_dmul>
 8006872:	a37b      	add	r3, pc, #492	; (adr r3, 8006a60 <__ieee754_pow+0x710>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fd10 	bl	800029c <__adddf3>
 800687c:	4622      	mov	r2, r4
 800687e:	462b      	mov	r3, r5
 8006880:	f7f9 fec2 	bl	8000608 <__aeabi_dmul>
 8006884:	a378      	add	r3, pc, #480	; (adr r3, 8006a68 <__ieee754_pow+0x718>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fd07 	bl	800029c <__adddf3>
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	f7f9 feb9 	bl	8000608 <__aeabi_dmul>
 8006896:	a376      	add	r3, pc, #472	; (adr r3, 8006a70 <__ieee754_pow+0x720>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f7f9 fcfe 	bl	800029c <__adddf3>
 80068a0:	4622      	mov	r2, r4
 80068a2:	462b      	mov	r3, r5
 80068a4:	f7f9 feb0 	bl	8000608 <__aeabi_dmul>
 80068a8:	a373      	add	r3, pc, #460	; (adr r3, 8006a78 <__ieee754_pow+0x728>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fcf5 	bl	800029c <__adddf3>
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	f7f9 fea7 	bl	8000608 <__aeabi_dmul>
 80068ba:	a371      	add	r3, pc, #452	; (adr r3, 8006a80 <__ieee754_pow+0x730>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fcec 	bl	800029c <__adddf3>
 80068c4:	4622      	mov	r2, r4
 80068c6:	4606      	mov	r6, r0
 80068c8:	460f      	mov	r7, r1
 80068ca:	462b      	mov	r3, r5
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7f9 fe9a 	bl	8000608 <__aeabi_dmul>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	4642      	mov	r2, r8
 80068e2:	4604      	mov	r4, r0
 80068e4:	460d      	mov	r5, r1
 80068e6:	464b      	mov	r3, r9
 80068e8:	ec51 0b18 	vmov	r0, r1, d8
 80068ec:	f7f9 fcd6 	bl	800029c <__adddf3>
 80068f0:	ec53 2b19 	vmov	r2, r3, d9
 80068f4:	f7f9 fe88 	bl	8000608 <__aeabi_dmul>
 80068f8:	4622      	mov	r2, r4
 80068fa:	462b      	mov	r3, r5
 80068fc:	f7f9 fcce 	bl	800029c <__adddf3>
 8006900:	4642      	mov	r2, r8
 8006902:	4682      	mov	sl, r0
 8006904:	468b      	mov	fp, r1
 8006906:	464b      	mov	r3, r9
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7f9 fe7c 	bl	8000608 <__aeabi_dmul>
 8006910:	4b6b      	ldr	r3, [pc, #428]	; (8006ac0 <__ieee754_pow+0x770>)
 8006912:	2200      	movs	r2, #0
 8006914:	4606      	mov	r6, r0
 8006916:	460f      	mov	r7, r1
 8006918:	f7f9 fcc0 	bl	800029c <__adddf3>
 800691c:	4652      	mov	r2, sl
 800691e:	465b      	mov	r3, fp
 8006920:	f7f9 fcbc 	bl	800029c <__adddf3>
 8006924:	2000      	movs	r0, #0
 8006926:	4604      	mov	r4, r0
 8006928:	460d      	mov	r5, r1
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4640      	mov	r0, r8
 8006930:	4649      	mov	r1, r9
 8006932:	f7f9 fe69 	bl	8000608 <__aeabi_dmul>
 8006936:	4b62      	ldr	r3, [pc, #392]	; (8006ac0 <__ieee754_pow+0x770>)
 8006938:	4680      	mov	r8, r0
 800693a:	4689      	mov	r9, r1
 800693c:	2200      	movs	r2, #0
 800693e:	4620      	mov	r0, r4
 8006940:	4629      	mov	r1, r5
 8006942:	f7f9 fca9 	bl	8000298 <__aeabi_dsub>
 8006946:	4632      	mov	r2, r6
 8006948:	463b      	mov	r3, r7
 800694a:	f7f9 fca5 	bl	8000298 <__aeabi_dsub>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4650      	mov	r0, sl
 8006954:	4659      	mov	r1, fp
 8006956:	f7f9 fc9f 	bl	8000298 <__aeabi_dsub>
 800695a:	ec53 2b18 	vmov	r2, r3, d8
 800695e:	f7f9 fe53 	bl	8000608 <__aeabi_dmul>
 8006962:	4622      	mov	r2, r4
 8006964:	4606      	mov	r6, r0
 8006966:	460f      	mov	r7, r1
 8006968:	462b      	mov	r3, r5
 800696a:	ec51 0b19 	vmov	r0, r1, d9
 800696e:	f7f9 fe4b 	bl	8000608 <__aeabi_dmul>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7f9 fc8f 	bl	800029c <__adddf3>
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7f9 fc87 	bl	800029c <__adddf3>
 800698e:	a33e      	add	r3, pc, #248	; (adr r3, 8006a88 <__ieee754_pow+0x738>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	2000      	movs	r0, #0
 8006996:	4604      	mov	r4, r0
 8006998:	460d      	mov	r5, r1
 800699a:	f7f9 fe35 	bl	8000608 <__aeabi_dmul>
 800699e:	4642      	mov	r2, r8
 80069a0:	ec41 0b18 	vmov	d8, r0, r1
 80069a4:	464b      	mov	r3, r9
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7f9 fc75 	bl	8000298 <__aeabi_dsub>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7f9 fc6f 	bl	8000298 <__aeabi_dsub>
 80069ba:	a335      	add	r3, pc, #212	; (adr r3, 8006a90 <__ieee754_pow+0x740>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fe22 	bl	8000608 <__aeabi_dmul>
 80069c4:	a334      	add	r3, pc, #208	; (adr r3, 8006a98 <__ieee754_pow+0x748>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	4606      	mov	r6, r0
 80069cc:	460f      	mov	r7, r1
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7f9 fe19 	bl	8000608 <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7f9 fc5d 	bl	800029c <__adddf3>
 80069e2:	9a07      	ldr	r2, [sp, #28]
 80069e4:	4b37      	ldr	r3, [pc, #220]	; (8006ac4 <__ieee754_pow+0x774>)
 80069e6:	4413      	add	r3, r2
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fc56 	bl	800029c <__adddf3>
 80069f0:	4682      	mov	sl, r0
 80069f2:	9805      	ldr	r0, [sp, #20]
 80069f4:	468b      	mov	fp, r1
 80069f6:	f7f9 fd9d 	bl	8000534 <__aeabi_i2d>
 80069fa:	9a07      	ldr	r2, [sp, #28]
 80069fc:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <__ieee754_pow+0x778>)
 80069fe:	4413      	add	r3, r2
 8006a00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	4652      	mov	r2, sl
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	ec51 0b18 	vmov	r0, r1, d8
 8006a10:	f7f9 fc44 	bl	800029c <__adddf3>
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	f7f9 fc40 	bl	800029c <__adddf3>
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	463b      	mov	r3, r7
 8006a20:	f7f9 fc3c 	bl	800029c <__adddf3>
 8006a24:	2000      	movs	r0, #0
 8006a26:	4632      	mov	r2, r6
 8006a28:	463b      	mov	r3, r7
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	460d      	mov	r5, r1
 8006a2e:	f7f9 fc33 	bl	8000298 <__aeabi_dsub>
 8006a32:	4642      	mov	r2, r8
 8006a34:	464b      	mov	r3, r9
 8006a36:	f7f9 fc2f 	bl	8000298 <__aeabi_dsub>
 8006a3a:	ec53 2b18 	vmov	r2, r3, d8
 8006a3e:	f7f9 fc2b 	bl	8000298 <__aeabi_dsub>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4650      	mov	r0, sl
 8006a48:	4659      	mov	r1, fp
 8006a4a:	e610      	b.n	800666e <__ieee754_pow+0x31e>
 8006a4c:	2401      	movs	r4, #1
 8006a4e:	e6a1      	b.n	8006794 <__ieee754_pow+0x444>
 8006a50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006aa0 <__ieee754_pow+0x750>
 8006a54:	e617      	b.n	8006686 <__ieee754_pow+0x336>
 8006a56:	bf00      	nop
 8006a58:	4a454eef 	.word	0x4a454eef
 8006a5c:	3fca7e28 	.word	0x3fca7e28
 8006a60:	93c9db65 	.word	0x93c9db65
 8006a64:	3fcd864a 	.word	0x3fcd864a
 8006a68:	a91d4101 	.word	0xa91d4101
 8006a6c:	3fd17460 	.word	0x3fd17460
 8006a70:	518f264d 	.word	0x518f264d
 8006a74:	3fd55555 	.word	0x3fd55555
 8006a78:	db6fabff 	.word	0xdb6fabff
 8006a7c:	3fdb6db6 	.word	0x3fdb6db6
 8006a80:	33333303 	.word	0x33333303
 8006a84:	3fe33333 	.word	0x3fe33333
 8006a88:	e0000000 	.word	0xe0000000
 8006a8c:	3feec709 	.word	0x3feec709
 8006a90:	dc3a03fd 	.word	0xdc3a03fd
 8006a94:	3feec709 	.word	0x3feec709
 8006a98:	145b01f5 	.word	0x145b01f5
 8006a9c:	be3e2fe0 	.word	0xbe3e2fe0
 8006aa0:	00000000 	.word	0x00000000
 8006aa4:	3ff00000 	.word	0x3ff00000
 8006aa8:	7ff00000 	.word	0x7ff00000
 8006aac:	43400000 	.word	0x43400000
 8006ab0:	0003988e 	.word	0x0003988e
 8006ab4:	000bb679 	.word	0x000bb679
 8006ab8:	080074c8 	.word	0x080074c8
 8006abc:	3ff00000 	.word	0x3ff00000
 8006ac0:	40080000 	.word	0x40080000
 8006ac4:	080074e8 	.word	0x080074e8
 8006ac8:	080074d8 	.word	0x080074d8
 8006acc:	a3b5      	add	r3, pc, #724	; (adr r3, 8006da4 <__ieee754_pow+0xa54>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7f9 fbe1 	bl	800029c <__adddf3>
 8006ada:	4622      	mov	r2, r4
 8006adc:	ec41 0b1a 	vmov	d10, r0, r1
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	f7f9 fbd7 	bl	8000298 <__aeabi_dsub>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	ec51 0b1a 	vmov	r0, r1, d10
 8006af2:	f7fa f819 	bl	8000b28 <__aeabi_dcmpgt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f47f ae04 	bne.w	8006704 <__ieee754_pow+0x3b4>
 8006afc:	4aa4      	ldr	r2, [pc, #656]	; (8006d90 <__ieee754_pow+0xa40>)
 8006afe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b02:	4293      	cmp	r3, r2
 8006b04:	f340 8108 	ble.w	8006d18 <__ieee754_pow+0x9c8>
 8006b08:	151b      	asrs	r3, r3, #20
 8006b0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006b0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006b12:	fa4a f303 	asr.w	r3, sl, r3
 8006b16:	445b      	add	r3, fp
 8006b18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006b1c:	4e9d      	ldr	r6, [pc, #628]	; (8006d94 <__ieee754_pow+0xa44>)
 8006b1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006b22:	4116      	asrs	r6, r2
 8006b24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006b28:	2000      	movs	r0, #0
 8006b2a:	ea23 0106 	bic.w	r1, r3, r6
 8006b2e:	f1c2 0214 	rsb	r2, r2, #20
 8006b32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006b36:	fa4a fa02 	asr.w	sl, sl, r2
 8006b3a:	f1bb 0f00 	cmp.w	fp, #0
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4620      	mov	r0, r4
 8006b44:	4629      	mov	r1, r5
 8006b46:	bfb8      	it	lt
 8006b48:	f1ca 0a00 	rsblt	sl, sl, #0
 8006b4c:	f7f9 fba4 	bl	8000298 <__aeabi_dsub>
 8006b50:	ec41 0b19 	vmov	d9, r0, r1
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	ec51 0b19 	vmov	r0, r1, d9
 8006b5c:	f7f9 fb9e 	bl	800029c <__adddf3>
 8006b60:	a37b      	add	r3, pc, #492	; (adr r3, 8006d50 <__ieee754_pow+0xa00>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	2000      	movs	r0, #0
 8006b68:	4604      	mov	r4, r0
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	f7f9 fd4c 	bl	8000608 <__aeabi_dmul>
 8006b70:	ec53 2b19 	vmov	r2, r3, d9
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 fb8c 	bl	8000298 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4640      	mov	r0, r8
 8006b86:	4649      	mov	r1, r9
 8006b88:	f7f9 fb86 	bl	8000298 <__aeabi_dsub>
 8006b8c:	a372      	add	r3, pc, #456	; (adr r3, 8006d58 <__ieee754_pow+0xa08>)
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f7f9 fd39 	bl	8000608 <__aeabi_dmul>
 8006b96:	a372      	add	r3, pc, #456	; (adr r3, 8006d60 <__ieee754_pow+0xa10>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	4689      	mov	r9, r1
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7f9 fd30 	bl	8000608 <__aeabi_dmul>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 fb74 	bl	800029c <__adddf3>
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 fb6c 	bl	800029c <__adddf3>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4689      	mov	r9, r1
 8006bcc:	f7f9 fb64 	bl	8000298 <__aeabi_dsub>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	f7f9 fb5e 	bl	8000298 <__aeabi_dsub>
 8006bdc:	4642      	mov	r2, r8
 8006bde:	4606      	mov	r6, r0
 8006be0:	460f      	mov	r7, r1
 8006be2:	464b      	mov	r3, r9
 8006be4:	4640      	mov	r0, r8
 8006be6:	4649      	mov	r1, r9
 8006be8:	f7f9 fd0e 	bl	8000608 <__aeabi_dmul>
 8006bec:	a35e      	add	r3, pc, #376	; (adr r3, 8006d68 <__ieee754_pow+0xa18>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	f7f9 fd07 	bl	8000608 <__aeabi_dmul>
 8006bfa:	a35d      	add	r3, pc, #372	; (adr r3, 8006d70 <__ieee754_pow+0xa20>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fb4a 	bl	8000298 <__aeabi_dsub>
 8006c04:	4622      	mov	r2, r4
 8006c06:	462b      	mov	r3, r5
 8006c08:	f7f9 fcfe 	bl	8000608 <__aeabi_dmul>
 8006c0c:	a35a      	add	r3, pc, #360	; (adr r3, 8006d78 <__ieee754_pow+0xa28>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fb43 	bl	800029c <__adddf3>
 8006c16:	4622      	mov	r2, r4
 8006c18:	462b      	mov	r3, r5
 8006c1a:	f7f9 fcf5 	bl	8000608 <__aeabi_dmul>
 8006c1e:	a358      	add	r3, pc, #352	; (adr r3, 8006d80 <__ieee754_pow+0xa30>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f7f9 fb38 	bl	8000298 <__aeabi_dsub>
 8006c28:	4622      	mov	r2, r4
 8006c2a:	462b      	mov	r3, r5
 8006c2c:	f7f9 fcec 	bl	8000608 <__aeabi_dmul>
 8006c30:	a355      	add	r3, pc, #340	; (adr r3, 8006d88 <__ieee754_pow+0xa38>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 fb31 	bl	800029c <__adddf3>
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	f7f9 fce3 	bl	8000608 <__aeabi_dmul>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fb25 	bl	8000298 <__aeabi_dsub>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460d      	mov	r5, r1
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f7f9 fcd5 	bl	8000608 <__aeabi_dmul>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	ec41 0b19 	vmov	d9, r0, r1
 8006c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7f9 fb14 	bl	8000298 <__aeabi_dsub>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	ec51 0b19 	vmov	r0, r1, d9
 8006c78:	f7f9 fdf0 	bl	800085c <__aeabi_ddiv>
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	4604      	mov	r4, r0
 8006c80:	460d      	mov	r5, r1
 8006c82:	463b      	mov	r3, r7
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 fcbe 	bl	8000608 <__aeabi_dmul>
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	463b      	mov	r3, r7
 8006c90:	f7f9 fb04 	bl	800029c <__adddf3>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f7f9 fafc 	bl	8000298 <__aeabi_dsub>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	f7f9 faf8 	bl	8000298 <__aeabi_dsub>
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4602      	mov	r2, r0
 8006cac:	493a      	ldr	r1, [pc, #232]	; (8006d98 <__ieee754_pow+0xa48>)
 8006cae:	2000      	movs	r0, #0
 8006cb0:	f7f9 faf2 	bl	8000298 <__aeabi_dsub>
 8006cb4:	ec41 0b10 	vmov	d0, r0, r1
 8006cb8:	ee10 3a90 	vmov	r3, s1
 8006cbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc4:	da2b      	bge.n	8006d1e <__ieee754_pow+0x9ce>
 8006cc6:	4650      	mov	r0, sl
 8006cc8:	f000 f966 	bl	8006f98 <scalbn>
 8006ccc:	ec51 0b10 	vmov	r0, r1, d0
 8006cd0:	ec53 2b18 	vmov	r2, r3, d8
 8006cd4:	f7ff bbed 	b.w	80064b2 <__ieee754_pow+0x162>
 8006cd8:	4b30      	ldr	r3, [pc, #192]	; (8006d9c <__ieee754_pow+0xa4c>)
 8006cda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006cde:	429e      	cmp	r6, r3
 8006ce0:	f77f af0c 	ble.w	8006afc <__ieee754_pow+0x7ac>
 8006ce4:	4b2e      	ldr	r3, [pc, #184]	; (8006da0 <__ieee754_pow+0xa50>)
 8006ce6:	440b      	add	r3, r1
 8006ce8:	4303      	orrs	r3, r0
 8006cea:	d009      	beq.n	8006d00 <__ieee754_pow+0x9b0>
 8006cec:	ec51 0b18 	vmov	r0, r1, d8
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f7f9 fefa 	bl	8000aec <__aeabi_dcmplt>
 8006cf8:	3800      	subs	r0, #0
 8006cfa:	bf18      	it	ne
 8006cfc:	2001      	movne	r0, #1
 8006cfe:	e447      	b.n	8006590 <__ieee754_pow+0x240>
 8006d00:	4622      	mov	r2, r4
 8006d02:	462b      	mov	r3, r5
 8006d04:	f7f9 fac8 	bl	8000298 <__aeabi_dsub>
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	f7f9 ff02 	bl	8000b14 <__aeabi_dcmpge>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f43f aef3 	beq.w	8006afc <__ieee754_pow+0x7ac>
 8006d16:	e7e9      	b.n	8006cec <__ieee754_pow+0x99c>
 8006d18:	f04f 0a00 	mov.w	sl, #0
 8006d1c:	e71a      	b.n	8006b54 <__ieee754_pow+0x804>
 8006d1e:	ec51 0b10 	vmov	r0, r1, d0
 8006d22:	4619      	mov	r1, r3
 8006d24:	e7d4      	b.n	8006cd0 <__ieee754_pow+0x980>
 8006d26:	491c      	ldr	r1, [pc, #112]	; (8006d98 <__ieee754_pow+0xa48>)
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f7ff bb30 	b.w	800638e <__ieee754_pow+0x3e>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	2100      	movs	r1, #0
 8006d32:	f7ff bb2c 	b.w	800638e <__ieee754_pow+0x3e>
 8006d36:	4630      	mov	r0, r6
 8006d38:	4639      	mov	r1, r7
 8006d3a:	f7ff bb28 	b.w	800638e <__ieee754_pow+0x3e>
 8006d3e:	9204      	str	r2, [sp, #16]
 8006d40:	f7ff bb7a 	b.w	8006438 <__ieee754_pow+0xe8>
 8006d44:	2300      	movs	r3, #0
 8006d46:	f7ff bb64 	b.w	8006412 <__ieee754_pow+0xc2>
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w
 8006d50:	00000000 	.word	0x00000000
 8006d54:	3fe62e43 	.word	0x3fe62e43
 8006d58:	fefa39ef 	.word	0xfefa39ef
 8006d5c:	3fe62e42 	.word	0x3fe62e42
 8006d60:	0ca86c39 	.word	0x0ca86c39
 8006d64:	be205c61 	.word	0xbe205c61
 8006d68:	72bea4d0 	.word	0x72bea4d0
 8006d6c:	3e663769 	.word	0x3e663769
 8006d70:	c5d26bf1 	.word	0xc5d26bf1
 8006d74:	3ebbbd41 	.word	0x3ebbbd41
 8006d78:	af25de2c 	.word	0xaf25de2c
 8006d7c:	3f11566a 	.word	0x3f11566a
 8006d80:	16bebd93 	.word	0x16bebd93
 8006d84:	3f66c16c 	.word	0x3f66c16c
 8006d88:	5555553e 	.word	0x5555553e
 8006d8c:	3fc55555 	.word	0x3fc55555
 8006d90:	3fe00000 	.word	0x3fe00000
 8006d94:	000fffff 	.word	0x000fffff
 8006d98:	3ff00000 	.word	0x3ff00000
 8006d9c:	4090cbff 	.word	0x4090cbff
 8006da0:	3f6f3400 	.word	0x3f6f3400
 8006da4:	652b82fe 	.word	0x652b82fe
 8006da8:	3c971547 	.word	0x3c971547

08006dac <__ieee754_sqrt>:
 8006dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db0:	ec55 4b10 	vmov	r4, r5, d0
 8006db4:	4e55      	ldr	r6, [pc, #340]	; (8006f0c <__ieee754_sqrt+0x160>)
 8006db6:	43ae      	bics	r6, r5
 8006db8:	ee10 0a10 	vmov	r0, s0
 8006dbc:	ee10 3a10 	vmov	r3, s0
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	d110      	bne.n	8006de8 <__ieee754_sqrt+0x3c>
 8006dc6:	ee10 2a10 	vmov	r2, s0
 8006dca:	462b      	mov	r3, r5
 8006dcc:	f7f9 fc1c 	bl	8000608 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fa60 	bl	800029c <__adddf3>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	ec45 4b10 	vmov	d0, r4, r5
 8006de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	dc10      	bgt.n	8006e0e <__ieee754_sqrt+0x62>
 8006dec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006df0:	4330      	orrs	r0, r6
 8006df2:	d0f5      	beq.n	8006de0 <__ieee754_sqrt+0x34>
 8006df4:	b15d      	cbz	r5, 8006e0e <__ieee754_sqrt+0x62>
 8006df6:	ee10 2a10 	vmov	r2, s0
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	ee10 0a10 	vmov	r0, s0
 8006e00:	f7f9 fa4a 	bl	8000298 <__aeabi_dsub>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	f7f9 fd28 	bl	800085c <__aeabi_ddiv>
 8006e0c:	e7e6      	b.n	8006ddc <__ieee754_sqrt+0x30>
 8006e0e:	1512      	asrs	r2, r2, #20
 8006e10:	d074      	beq.n	8006efc <__ieee754_sqrt+0x150>
 8006e12:	07d4      	lsls	r4, r2, #31
 8006e14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006e18:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006e20:	bf5e      	ittt	pl
 8006e22:	0fda      	lsrpl	r2, r3, #31
 8006e24:	005b      	lslpl	r3, r3, #1
 8006e26:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	0fda      	lsrs	r2, r3, #31
 8006e2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006e32:	107f      	asrs	r7, r7, #1
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	2516      	movs	r5, #22
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e3e:	1886      	adds	r6, r0, r2
 8006e40:	428e      	cmp	r6, r1
 8006e42:	bfde      	ittt	le
 8006e44:	1b89      	suble	r1, r1, r6
 8006e46:	18b0      	addle	r0, r6, r2
 8006e48:	18a4      	addle	r4, r4, r2
 8006e4a:	0049      	lsls	r1, r1, #1
 8006e4c:	3d01      	subs	r5, #1
 8006e4e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006e52:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006e56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e5a:	d1f0      	bne.n	8006e3e <__ieee754_sqrt+0x92>
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	f04f 0e20 	mov.w	lr, #32
 8006e62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006e66:	4281      	cmp	r1, r0
 8006e68:	eb06 0c05 	add.w	ip, r6, r5
 8006e6c:	dc02      	bgt.n	8006e74 <__ieee754_sqrt+0xc8>
 8006e6e:	d113      	bne.n	8006e98 <__ieee754_sqrt+0xec>
 8006e70:	459c      	cmp	ip, r3
 8006e72:	d811      	bhi.n	8006e98 <__ieee754_sqrt+0xec>
 8006e74:	f1bc 0f00 	cmp.w	ip, #0
 8006e78:	eb0c 0506 	add.w	r5, ip, r6
 8006e7c:	da43      	bge.n	8006f06 <__ieee754_sqrt+0x15a>
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	db41      	blt.n	8006f06 <__ieee754_sqrt+0x15a>
 8006e82:	f100 0801 	add.w	r8, r0, #1
 8006e86:	1a09      	subs	r1, r1, r0
 8006e88:	459c      	cmp	ip, r3
 8006e8a:	bf88      	it	hi
 8006e8c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8006e90:	eba3 030c 	sub.w	r3, r3, ip
 8006e94:	4432      	add	r2, r6
 8006e96:	4640      	mov	r0, r8
 8006e98:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006e9c:	f1be 0e01 	subs.w	lr, lr, #1
 8006ea0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006ea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ea8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006eac:	d1db      	bne.n	8006e66 <__ieee754_sqrt+0xba>
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	d006      	beq.n	8006ec0 <__ieee754_sqrt+0x114>
 8006eb2:	1c50      	adds	r0, r2, #1
 8006eb4:	bf13      	iteet	ne
 8006eb6:	3201      	addne	r2, #1
 8006eb8:	3401      	addeq	r4, #1
 8006eba:	4672      	moveq	r2, lr
 8006ebc:	f022 0201 	bicne.w	r2, r2, #1
 8006ec0:	1063      	asrs	r3, r4, #1
 8006ec2:	0852      	lsrs	r2, r2, #1
 8006ec4:	07e1      	lsls	r1, r4, #31
 8006ec6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006eca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006ece:	bf48      	it	mi
 8006ed0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006ed4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006ed8:	4614      	mov	r4, r2
 8006eda:	e781      	b.n	8006de0 <__ieee754_sqrt+0x34>
 8006edc:	0ad9      	lsrs	r1, r3, #11
 8006ede:	3815      	subs	r0, #21
 8006ee0:	055b      	lsls	r3, r3, #21
 8006ee2:	2900      	cmp	r1, #0
 8006ee4:	d0fa      	beq.n	8006edc <__ieee754_sqrt+0x130>
 8006ee6:	02cd      	lsls	r5, r1, #11
 8006ee8:	d50a      	bpl.n	8006f00 <__ieee754_sqrt+0x154>
 8006eea:	f1c2 0420 	rsb	r4, r2, #32
 8006eee:	fa23 f404 	lsr.w	r4, r3, r4
 8006ef2:	1e55      	subs	r5, r2, #1
 8006ef4:	4093      	lsls	r3, r2
 8006ef6:	4321      	orrs	r1, r4
 8006ef8:	1b42      	subs	r2, r0, r5
 8006efa:	e78a      	b.n	8006e12 <__ieee754_sqrt+0x66>
 8006efc:	4610      	mov	r0, r2
 8006efe:	e7f0      	b.n	8006ee2 <__ieee754_sqrt+0x136>
 8006f00:	0049      	lsls	r1, r1, #1
 8006f02:	3201      	adds	r2, #1
 8006f04:	e7ef      	b.n	8006ee6 <__ieee754_sqrt+0x13a>
 8006f06:	4680      	mov	r8, r0
 8006f08:	e7bd      	b.n	8006e86 <__ieee754_sqrt+0xda>
 8006f0a:	bf00      	nop
 8006f0c:	7ff00000 	.word	0x7ff00000

08006f10 <with_errno>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	4604      	mov	r4, r0
 8006f14:	460d      	mov	r5, r1
 8006f16:	4616      	mov	r6, r2
 8006f18:	f7fc fc18 	bl	800374c <__errno>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	6006      	str	r6, [r0, #0]
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}

08006f24 <xflow>:
 8006f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f26:	4614      	mov	r4, r2
 8006f28:	461d      	mov	r5, r3
 8006f2a:	b108      	cbz	r0, 8006f30 <xflow+0xc>
 8006f2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f30:	e9cd 2300 	strd	r2, r3, [sp]
 8006f34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f7f9 fb64 	bl	8000608 <__aeabi_dmul>
 8006f40:	2222      	movs	r2, #34	; 0x22
 8006f42:	b003      	add	sp, #12
 8006f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f48:	f7ff bfe2 	b.w	8006f10 <with_errno>

08006f4c <__math_uflow>:
 8006f4c:	b508      	push	{r3, lr}
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f54:	f7ff ffe6 	bl	8006f24 <xflow>
 8006f58:	ec41 0b10 	vmov	d0, r0, r1
 8006f5c:	bd08      	pop	{r3, pc}

08006f5e <__math_oflow>:
 8006f5e:	b508      	push	{r3, lr}
 8006f60:	2200      	movs	r2, #0
 8006f62:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006f66:	f7ff ffdd 	bl	8006f24 <xflow>
 8006f6a:	ec41 0b10 	vmov	d0, r0, r1
 8006f6e:	bd08      	pop	{r3, pc}

08006f70 <fabs>:
 8006f70:	ec51 0b10 	vmov	r0, r1, d0
 8006f74:	ee10 2a10 	vmov	r2, s0
 8006f78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f7c:	ec43 2b10 	vmov	d0, r2, r3
 8006f80:	4770      	bx	lr

08006f82 <finite>:
 8006f82:	b082      	sub	sp, #8
 8006f84:	ed8d 0b00 	vstr	d0, [sp]
 8006f88:	9801      	ldr	r0, [sp, #4]
 8006f8a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006f8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006f92:	0fc0      	lsrs	r0, r0, #31
 8006f94:	b002      	add	sp, #8
 8006f96:	4770      	bx	lr

08006f98 <scalbn>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	ec55 4b10 	vmov	r4, r5, d0
 8006f9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	b99a      	cbnz	r2, 8006fd0 <scalbn+0x38>
 8006fa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006fac:	4323      	orrs	r3, r4
 8006fae:	d036      	beq.n	800701e <scalbn+0x86>
 8006fb0:	4b39      	ldr	r3, [pc, #228]	; (8007098 <scalbn+0x100>)
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	ee10 0a10 	vmov	r0, s0
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f7f9 fb25 	bl	8000608 <__aeabi_dmul>
 8006fbe:	4b37      	ldr	r3, [pc, #220]	; (800709c <scalbn+0x104>)
 8006fc0:	429e      	cmp	r6, r3
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	da10      	bge.n	8006fea <scalbn+0x52>
 8006fc8:	a32b      	add	r3, pc, #172	; (adr r3, 8007078 <scalbn+0xe0>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	e03a      	b.n	8007046 <scalbn+0xae>
 8006fd0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006fd4:	428a      	cmp	r2, r1
 8006fd6:	d10c      	bne.n	8006ff2 <scalbn+0x5a>
 8006fd8:	ee10 2a10 	vmov	r2, s0
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7f9 f95c 	bl	800029c <__adddf3>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	e019      	b.n	800701e <scalbn+0x86>
 8006fea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006fee:	460b      	mov	r3, r1
 8006ff0:	3a36      	subs	r2, #54	; 0x36
 8006ff2:	4432      	add	r2, r6
 8006ff4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ff8:	428a      	cmp	r2, r1
 8006ffa:	dd08      	ble.n	800700e <scalbn+0x76>
 8006ffc:	2d00      	cmp	r5, #0
 8006ffe:	a120      	add	r1, pc, #128	; (adr r1, 8007080 <scalbn+0xe8>)
 8007000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007004:	da1c      	bge.n	8007040 <scalbn+0xa8>
 8007006:	a120      	add	r1, pc, #128	; (adr r1, 8007088 <scalbn+0xf0>)
 8007008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800700c:	e018      	b.n	8007040 <scalbn+0xa8>
 800700e:	2a00      	cmp	r2, #0
 8007010:	dd08      	ble.n	8007024 <scalbn+0x8c>
 8007012:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007016:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800701a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800701e:	ec45 4b10 	vmov	d0, r4, r5
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007028:	da19      	bge.n	800705e <scalbn+0xc6>
 800702a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800702e:	429e      	cmp	r6, r3
 8007030:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007034:	dd0a      	ble.n	800704c <scalbn+0xb4>
 8007036:	a112      	add	r1, pc, #72	; (adr r1, 8007080 <scalbn+0xe8>)
 8007038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e2      	bne.n	8007006 <scalbn+0x6e>
 8007040:	a30f      	add	r3, pc, #60	; (adr r3, 8007080 <scalbn+0xe8>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 fadf 	bl	8000608 <__aeabi_dmul>
 800704a:	e7cb      	b.n	8006fe4 <scalbn+0x4c>
 800704c:	a10a      	add	r1, pc, #40	; (adr r1, 8007078 <scalbn+0xe0>)
 800704e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0b8      	beq.n	8006fc8 <scalbn+0x30>
 8007056:	a10e      	add	r1, pc, #56	; (adr r1, 8007090 <scalbn+0xf8>)
 8007058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800705c:	e7b4      	b.n	8006fc8 <scalbn+0x30>
 800705e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007062:	3236      	adds	r2, #54	; 0x36
 8007064:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007068:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800706c:	4620      	mov	r0, r4
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <scalbn+0x108>)
 8007070:	2200      	movs	r2, #0
 8007072:	e7e8      	b.n	8007046 <scalbn+0xae>
 8007074:	f3af 8000 	nop.w
 8007078:	c2f8f359 	.word	0xc2f8f359
 800707c:	01a56e1f 	.word	0x01a56e1f
 8007080:	8800759c 	.word	0x8800759c
 8007084:	7e37e43c 	.word	0x7e37e43c
 8007088:	8800759c 	.word	0x8800759c
 800708c:	fe37e43c 	.word	0xfe37e43c
 8007090:	c2f8f359 	.word	0xc2f8f359
 8007094:	81a56e1f 	.word	0x81a56e1f
 8007098:	43500000 	.word	0x43500000
 800709c:	ffff3cb0 	.word	0xffff3cb0
 80070a0:	3c900000 	.word	0x3c900000

080070a4 <_sbrk>:
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <_sbrk+0x14>)
 80070a6:	6811      	ldr	r1, [r2, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	b909      	cbnz	r1, 80070b0 <_sbrk+0xc>
 80070ac:	4903      	ldr	r1, [pc, #12]	; (80070bc <_sbrk+0x18>)
 80070ae:	6011      	str	r1, [r2, #0]
 80070b0:	6810      	ldr	r0, [r2, #0]
 80070b2:	4403      	add	r3, r0
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	4770      	bx	lr
 80070b8:	2000031c 	.word	0x2000031c
 80070bc:	20000320 	.word	0x20000320

080070c0 <_init>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	bf00      	nop
 80070c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c6:	bc08      	pop	{r3}
 80070c8:	469e      	mov	lr, r3
 80070ca:	4770      	bx	lr

080070cc <_fini>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	bf00      	nop
 80070d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d2:	bc08      	pop	{r3}
 80070d4:	469e      	mov	lr, r3
 80070d6:	4770      	bx	lr
