
Pulse_width_10ns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800a200  0800a200  0001a200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a798  0800a798  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a798  0800a798  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a798  0800a798  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a798  0800a798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a79c  0800a79c  0001a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200001e0  0800a980  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800a980  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062ad  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001445  00000000  00000000  000264bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00027908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  00027f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d56  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007712  00000000  00000000  0003a1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006091a  00000000  00000000  000418b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a21d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e04  00000000  00000000  000a2224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1e8 	.word	0x0800a1e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a1e8 	.word	0x0800a1e8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
//TaskHandle_t xHandleTask2 = NULL;

//extern void SEGGER_UART_init(uint32_t);

int main(void)
{
 8000cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cbc:	b08a      	sub	sp, #40	; 0x28
 8000cbe:	af08      	add	r7, sp, #32


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 8000cc0:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <main+0x230>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a88      	ldr	r2, [pc, #544]	; (8000ee8 <main+0x230>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();


	inSystem ();
 8000cd0:	f000 f9fe 	bl	80010d0 <inSystem>
//		}




		if (rxData != '\0'){
 8000cd4:	4b85      	ldr	r3, [pc, #532]	; (8000eec <main+0x234>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d036      	beq.n	8000d4a <main+0x92>
			writeChar(&handlerUSART1, rxData);
 8000cdc:	4b83      	ldr	r3, [pc, #524]	; (8000eec <main+0x234>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4883      	ldr	r0, [pc, #524]	; (8000ef0 <main+0x238>)
 8000ce4:	f004 fc16 	bl	8005514 <writeChar>
			bufferReception[counterReception] = rxData;
 8000ce8:	4b82      	ldr	r3, [pc, #520]	; (8000ef4 <main+0x23c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b7f      	ldr	r3, [pc, #508]	; (8000eec <main+0x234>)
 8000cf0:	7819      	ldrb	r1, [r3, #0]
 8000cf2:	4b81      	ldr	r3, [pc, #516]	; (8000ef8 <main+0x240>)
 8000cf4:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <main+0x23c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <main+0x23c>)
 8000d00:	701a      	strb	r2, [r3, #0]

			if (rxData == '@'){
 8000d02:	4b7a      	ldr	r3, [pc, #488]	; (8000eec <main+0x234>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b40      	cmp	r3, #64	; 0x40
 8000d08:	d10c      	bne.n	8000d24 <main+0x6c>
				doneTransaction = SET;
 8000d0a:	4b7c      	ldr	r3, [pc, #496]	; (8000efc <main+0x244>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]

				bufferReception[counterReception-1] = '\0';
 8000d10:	4b78      	ldr	r3, [pc, #480]	; (8000ef4 <main+0x23c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a78      	ldr	r2, [pc, #480]	; (8000ef8 <main+0x240>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	54d1      	strb	r1, [r2, r3]

				counterReception = 0;
 8000d1c:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <main+0x23c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e00f      	b.n	8000d44 <main+0x8c>

			}else if (rxData == 'z'){
 8000d24:	4b71      	ldr	r3, [pc, #452]	; (8000eec <main+0x234>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b7a      	cmp	r3, #122	; 0x7a
 8000d2a:	d10b      	bne.n	8000d44 <main+0x8c>

				memset(bufferReception, 0, sizeof(bufferReception));
 8000d2c:	2240      	movs	r2, #64	; 0x40
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4871      	ldr	r0, [pc, #452]	; (8000ef8 <main+0x240>)
 8000d32:	f004 ff4d 	bl	8005bd0 <memset>
				counterReception = 0;
 8000d36:	4b6f      	ldr	r3, [pc, #444]	; (8000ef4 <main+0x23c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART1, "Buffer Vaciado\n \r");
 8000d3c:	4970      	ldr	r1, [pc, #448]	; (8000f00 <main+0x248>)
 8000d3e:	486c      	ldr	r0, [pc, #432]	; (8000ef0 <main+0x238>)
 8000d40:	f004 fc00 	bl	8005544 <writeMsg>
			}

				rxData = '\0';
 8000d44:	4b69      	ldr	r3, [pc, #420]	; (8000eec <main+0x234>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]

			}

		if (doneTransaction){
 8000d4a:	4b6c      	ldr	r3, [pc, #432]	; (8000efc <main+0x244>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d005      	beq.n	8000d5e <main+0xa6>
			parseCommands(bufferReception);
 8000d52:	4869      	ldr	r0, [pc, #420]	; (8000ef8 <main+0x240>)
 8000d54:	f000 fc36 	bl	80015c4 <parseCommands>
			doneTransaction = RESET;
 8000d58:	4b68      	ldr	r3, [pc, #416]	; (8000efc <main+0x244>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		}


		if

		(enableChangePWM)
 8000d5e:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <main+0x24c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8161 	beq.w	800102a <main+0x372>

//		( ( (dist_1 < distance) && (dist_2 < distance) ) )
		{


			if (flagT2){
 8000d68:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <main+0x250>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0b1      	beq.n	8000cd4 <main+0x1c>
//
//					}



				controlM1 = handlerMotor1.configM1.counts_M1;
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <main+0x254>)
 8000d72:	8c1a      	ldrh	r2, [r3, #32]
 8000d74:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <main+0x258>)
 8000d76:	801a      	strh	r2, [r3, #0]
				controlM2 = handlerMotor2.configM2.counts_M2;
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <main+0x25c>)
 8000d7a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000d7e:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <main+0x260>)
 8000d80:	801a      	strh	r2, [r3, #0]

				diferenceM1 = abs(controlM1 - controlM1_prev);
 8000d82:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <main+0x258>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b64      	ldr	r3, [pc, #400]	; (8000f1c <main+0x264>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bfb8      	it	lt
 8000d92:	425b      	neglt	r3, r3
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <main+0x268>)
 8000d9e:	edc3 7a00 	vstr	s15, [r3]
				diferenceM2 = abs(controlM2 - controlM2_prev);
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <main+0x260>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <main+0x26c>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bfb8      	it	lt
 8000db2:	425b      	neglt	r3, r3
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <main+0x270>)
 8000dbe:	edc3 7a00 	vstr	s15, [r3]

				controlM1_prev = controlM1;
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <main+0x258>)
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <main+0x264>)
 8000dc8:	801a      	strh	r2, [r3, #0]
				controlM2_prev = controlM2;
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <main+0x260>)
 8000dcc:	881a      	ldrh	r2, [r3, #0]
 8000dce:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <main+0x26c>)
 8000dd0:	801a      	strh	r2, [r3, #0]

				uAM1 = PID(&handlerMotor1, diferenceM1, 1, setPoint);
 8000dd2:	4b53      	ldr	r3, [pc, #332]	; (8000f20 <main+0x268>)
 8000dd4:	edd3 7a00 	vldr	s15, [r3]
 8000dd8:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <main+0x274>)
 8000dda:	ed93 7a00 	vldr	s14, [r3]
 8000dde:	eef0 0a47 	vmov.f32	s1, s14
 8000de2:	2101      	movs	r1, #1
 8000de4:	eeb0 0a67 	vmov.f32	s0, s15
 8000de8:	4848      	ldr	r0, [pc, #288]	; (8000f0c <main+0x254>)
 8000dea:	f003 fa75 	bl	80042d8 <PID>
 8000dee:	ec53 2b10 	vmov	r2, r3, d0
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff ff0f 	bl	8000c18 <__aeabi_d2f>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <main+0x278>)
 8000dfe:	6013      	str	r3, [r2, #0]
				uAM2 = PID(&handlerMotor2, diferenceM2, 2, setPoint);
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <main+0x270>)
 8000e02:	edd3 7a00 	vldr	s15, [r3]
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <main+0x274>)
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	eef0 0a47 	vmov.f32	s1, s14
 8000e10:	2102      	movs	r1, #2
 8000e12:	eeb0 0a67 	vmov.f32	s0, s15
 8000e16:	483f      	ldr	r0, [pc, #252]	; (8000f14 <main+0x25c>)
 8000e18:	f003 fa5e 	bl	80042d8 <PID>
 8000e1c:	ec53 2b10 	vmov	r2, r3, d0
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fef8 	bl	8000c18 <__aeabi_d2f>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a42      	ldr	r2, [pc, #264]	; (8000f34 <main+0x27c>)
 8000e2c:	6013      	str	r3, [r2, #0]

				PM1 = map(uAM1, 0 , 600 , 0, 100);
 8000e2e:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <main+0x278>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fba0 	bl	8000578 <__aeabi_f2d>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8000ed0 <main+0x218>
 8000e40:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8000ed8 <main+0x220>
 8000e44:	ed9f 2b26 	vldr	d2, [pc, #152]	; 8000ee0 <main+0x228>
 8000e48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8000ed8 <main+0x220>
 8000e4c:	ec43 2b10 	vmov	d0, r2, r3
 8000e50:	f003 faf4 	bl	800443c <map>
 8000e54:	ec53 2b10 	vmov	r2, r3, d0
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f7ff fedc 	bl	8000c18 <__aeabi_d2f>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a35      	ldr	r2, [pc, #212]	; (8000f38 <main+0x280>)
 8000e64:	6013      	str	r3, [r2, #0]
				PM2 = map(uAM2, 0 , 600 , 0, 100);
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <main+0x27c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb84 	bl	8000578 <__aeabi_f2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8000ed0 <main+0x218>
 8000e78:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8000ed8 <main+0x220>
 8000e7c:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8000ee0 <main+0x228>
 8000e80:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8000ed8 <main+0x220>
 8000e84:	ec43 2b10 	vmov	d0, r2, r3
 8000e88:	f003 fad8 	bl	800443c <map>
 8000e8c:	ec53 2b10 	vmov	r2, r3, d0
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fec0 	bl	8000c18 <__aeabi_d2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a28      	ldr	r2, [pc, #160]	; (8000f3c <main+0x284>)
 8000e9c:	6013      	str	r3, [r2, #0]

				if (PM1 < 0 || PM2 < 0){
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <main+0x280>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	d407      	bmi.n	8000ebe <main+0x206>
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <main+0x284>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d540      	bpl.n	8000f40 <main+0x288>

					PM1 = 0;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <main+0x280>)
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
					PM2 = 0;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <main+0x284>)
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e051      	b.n	8000f74 <main+0x2bc>
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	40590000 	.word	0x40590000
	...
 8000ee4:	4082c000 	.word	0x4082c000
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	20000492 	.word	0x20000492
 8000ef0:	20000314 	.word	0x20000314
 8000ef4:	20000490 	.word	0x20000490
 8000ef8:	20000450 	.word	0x20000450
 8000efc:	20000491 	.word	0x20000491
 8000f00:	0800a200 	.word	0x0800a200
 8000f04:	20000543 	.word	0x20000543
 8000f08:	20000542 	.word	0x20000542
 8000f0c:	200003a8 	.word	0x200003a8
 8000f10:	20000560 	.word	0x20000560
 8000f14:	200003f0 	.word	0x200003f0
 8000f18:	20000562 	.word	0x20000562
 8000f1c:	20000564 	.word	0x20000564
 8000f20:	2000056c 	.word	0x2000056c
 8000f24:	20000566 	.word	0x20000566
 8000f28:	20000570 	.word	0x20000570
 8000f2c:	20000574 	.word	0x20000574
 8000f30:	20000584 	.word	0x20000584
 8000f34:	20000588 	.word	0x20000588
 8000f38:	2000057c 	.word	0x2000057c
 8000f3c:	20000580 	.word	0x20000580

				}else if (PM1 > 100 || PM2 > 100){
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <main+0x3c8>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001084 <main+0x3cc>
 8000f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	dc09      	bgt.n	8000f68 <main+0x2b0>
 8000f54:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <main+0x3d0>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001084 <main+0x3cc>
 8000f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	dd05      	ble.n	8000f74 <main+0x2bc>

					PM1 = 100;
 8000f68:	4b45      	ldr	r3, [pc, #276]	; (8001080 <main+0x3c8>)
 8000f6a:	4a48      	ldr	r2, [pc, #288]	; (800108c <main+0x3d4>)
 8000f6c:	601a      	str	r2, [r3, #0]
					PM2 = 100;
 8000f6e:	4b46      	ldr	r3, [pc, #280]	; (8001088 <main+0x3d0>)
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <main+0x3d4>)
 8000f72:	601a      	str	r2, [r3, #0]
				}

				dist_1 = distanceM1();
 8000f74:	f000 fd48 	bl	8001a08 <distanceM1>
 8000f78:	eeb0 7a40 	vmov.f32	s14, s0
 8000f7c:	eef0 7a60 	vmov.f32	s15, s1
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <main+0x3d8>)
 8000f82:	ed83 7b00 	vstr	d7, [r3]
				dist_2 = distanceM2();
 8000f86:	f000 fd6f 	bl	8001a68 <distanceM2>
 8000f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8000f8e:	eef0 7a60 	vmov.f32	s15, s1
 8000f92:	4b40      	ldr	r3, [pc, #256]	; (8001094 <main+0x3dc>)
 8000f94:	ed83 7b00 	vstr	d7, [r3]

				updateDuttyCycleAfOpt(&handlerPWM_1, PM1);
 8000f98:	4b39      	ldr	r3, [pc, #228]	; (8001080 <main+0x3c8>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	483d      	ldr	r0, [pc, #244]	; (8001098 <main+0x3e0>)
 8000fa4:	f003 fe0e 	bl	8004bc4 <updateDuttyCycleAfOpt>
				updateDuttyCycleAfOpt(&handlerPWM_2, PM2);
 8000fa8:	4b37      	ldr	r3, [pc, #220]	; (8001088 <main+0x3d0>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb2:	483a      	ldr	r0, [pc, #232]	; (800109c <main+0x3e4>)
 8000fb4:	f003 fe06 	bl	8004bc4 <updateDuttyCycleAfOpt>

				sprintf (bufferMsg, //"%u\t%u\t%.3f\t%.3f\t
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <main+0x3c8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fadb 	bl	8000578 <__aeabi_f2d>
 8000fc2:	e9c7 0100 	strd	r0, r1, [r7]
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <main+0x3d0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fad4 	bl	8000578 <__aeabi_f2d>
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <main+0x3e8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff facd 	bl	8000578 <__aeabi_f2d>
 8000fde:	4680      	mov	r8, r0
 8000fe0:	4689      	mov	r9, r1
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <main+0x3ec>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fac6 	bl	8000578 <__aeabi_f2d>
 8000fec:	4682      	mov	sl, r0
 8000fee:	468b      	mov	fp, r1
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <main+0x3f0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fabf 	bl	8000578 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001002:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001006:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800100a:	e9cd 4500 	strd	r4, r5, [sp]
 800100e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001012:	4926      	ldr	r1, [pc, #152]	; (80010ac <main+0x3f4>)
 8001014:	4826      	ldr	r0, [pc, #152]	; (80010b0 <main+0x3f8>)
 8001016:	f005 fb3d 	bl	8006694 <siprintf>
						// counter_M1, counter_M2,

//						 counterPWM1, diferenceM1, diferenceM2
						//, dist_1 ,dist_2
						);
				writeMsg(&handlerUSART1, bufferMsg);
 800101a:	4925      	ldr	r1, [pc, #148]	; (80010b0 <main+0x3f8>)
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <main+0x3fc>)
 800101e:	f004 fa91 	bl	8005544 <writeMsg>
//				counterPWM1 += 0.1;
//				counterPWM2 += 0.1;



				flagT2 = RESET;
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <main+0x400>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e654      	b.n	8000cd4 <main+0x1c>

			}

		}else if (flagGyro){
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <main+0x404>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f43f ae50 	beq.w	8000cd4 <main+0x1c>

			dps = readGyro_Z(&handler_MPUAccel_6050);
 8001034:	4822      	ldr	r0, [pc, #136]	; (80010c0 <main+0x408>)
 8001036:	f002 ff17 	bl	8003e68 <readGyro_Z>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <main+0x40c>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
			dps -= calibr;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <main+0x40c>)
 8001046:	ed93 7a00 	vldr	s14, [r3]
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <main+0x410>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <main+0x40c>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
			sprintf (bufferMsg, //"%u\t%u\t%.3f\t%.3f\t
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <main+0x40c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa8a 	bl	8000578 <__aeabi_f2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4918      	ldr	r1, [pc, #96]	; (80010cc <main+0x414>)
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <main+0x3f8>)
 800106c:	f005 fb12 	bl	8006694 <siprintf>
			// counter_M1, counter_M2,

	//					counterPWM1, diferenceM1, diferenceM2
			//, dist_1 ,dist_2
			);
			writeMsg(&handlerUSART1, bufferMsg);
 8001070:	490f      	ldr	r1, [pc, #60]	; (80010b0 <main+0x3f8>)
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <main+0x3fc>)
 8001074:	f004 fa66 	bl	8005544 <writeMsg>

			flagGyro = RESET;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <main+0x404>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 800107e:	e629      	b.n	8000cd4 <main+0x1c>
 8001080:	2000057c 	.word	0x2000057c
 8001084:	42c80000 	.word	0x42c80000
 8001088:	20000580 	.word	0x20000580
 800108c:	42c80000 	.word	0x42c80000
 8001090:	20000550 	.word	0x20000550
 8001094:	20000558 	.word	0x20000558
 8001098:	200002e4 	.word	0x200002e4
 800109c:	200002fc 	.word	0x200002fc
 80010a0:	2000056c 	.word	0x2000056c
 80010a4:	20000570 	.word	0x20000570
 80010a8:	20000574 	.word	0x20000574
 80010ac:	0800a214 	.word	0x0800a214
 80010b0:	20000500 	.word	0x20000500
 80010b4:	20000314 	.word	0x20000314
 80010b8:	20000542 	.word	0x20000542
 80010bc:	20000544 	.word	0x20000544
 80010c0:	20000440 	.word	0x20000440
 80010c4:	2000058c 	.word	0x2000058c
 80010c8:	20000594 	.word	0x20000594
 80010cc:	0800a230 	.word	0x0800a230

080010d0 <inSystem>:

	}
}


void inSystem (void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies();
 80010d4:	f003 fdc6 	bl	8004c64 <RCC_enableMaxFrequencies>
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80010d8:	4bb0      	ldr	r3, [pc, #704]	; (800139c <inSystem+0x2cc>)
 80010da:	4ab1      	ldr	r2, [pc, #708]	; (80013a0 <inSystem+0x2d0>)
 80010dc:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80010de:	4baf      	ldr	r3, [pc, #700]	; (800139c <inSystem+0x2cc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010e4:	4bad      	ldr	r3, [pc, #692]	; (800139c <inSystem+0x2cc>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80010ea:	4bac      	ldr	r3, [pc, #688]	; (800139c <inSystem+0x2cc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80010f0:	4baa      	ldr	r3, [pc, #680]	; (800139c <inSystem+0x2cc>)
 80010f2:	2205      	movs	r2, #5
 80010f4:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010f6:	4ba9      	ldr	r3, [pc, #676]	; (800139c <inSystem+0x2cc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80010fc:	4ba7      	ldr	r3, [pc, #668]	; (800139c <inSystem+0x2cc>)
 80010fe:	2202      	movs	r2, #2
 8001100:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8001102:	48a6      	ldr	r0, [pc, #664]	; (800139c <inSystem+0x2cc>)
 8001104:	f002 fa5e 	bl	80035c4 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8001108:	2101      	movs	r1, #1
 800110a:	48a4      	ldr	r0, [pc, #656]	; (800139c <inSystem+0x2cc>)
 800110c:	f002 fb84 	bl	8003818 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8001110:	4ba4      	ldr	r3, [pc, #656]	; (80013a4 <inSystem+0x2d4>)
 8001112:	4aa5      	ldr	r2, [pc, #660]	; (80013a8 <inSystem+0x2d8>)
 8001114:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001116:	4ba3      	ldr	r3, [pc, #652]	; (80013a4 <inSystem+0x2d4>)
 8001118:	2201      	movs	r2, #1
 800111a:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800111c:	4ba1      	ldr	r3, [pc, #644]	; (80013a4 <inSystem+0x2d4>)
 800111e:	2200      	movs	r2, #0
 8001120:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8001122:	4ba0      	ldr	r3, [pc, #640]	; (80013a4 <inSystem+0x2d4>)
 8001124:	f242 7210 	movw	r2, #10000	; 0x2710
 8001128:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 800112a:	4b9e      	ldr	r3, [pc, #632]	; (80013a4 <inSystem+0x2d4>)
 800112c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001130:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8001132:	489c      	ldr	r0, [pc, #624]	; (80013a4 <inSystem+0x2d4>)
 8001134:	f000 feb2 	bl	8001e9c <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8001138:	489a      	ldr	r0, [pc, #616]	; (80013a4 <inSystem+0x2d4>)
 800113a:	f001 f9d3 	bl	80024e4 <startTimer>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 800113e:	4b9b      	ldr	r3, [pc, #620]	; (80013ac <inSystem+0x2dc>)
 8001140:	4a97      	ldr	r2, [pc, #604]	; (80013a0 <inSystem+0x2d0>)
 8001142:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001144:	4b99      	ldr	r3, [pc, #612]	; (80013ac <inSystem+0x2dc>)
 8001146:	2202      	movs	r2, #2
 8001148:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800114a:	4b98      	ldr	r3, [pc, #608]	; (80013ac <inSystem+0x2dc>)
 800114c:	2202      	movs	r2, #2
 800114e:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001150:	4b96      	ldr	r3, [pc, #600]	; (80013ac <inSystem+0x2dc>)
 8001152:	2200      	movs	r2, #0
 8001154:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8001156:	4b95      	ldr	r3, [pc, #596]	; (80013ac <inSystem+0x2dc>)
 8001158:	2200      	movs	r2, #0
 800115a:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800115c:	4b93      	ldr	r3, [pc, #588]	; (80013ac <inSystem+0x2dc>)
 800115e:	2200      	movs	r2, #0
 8001160:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001162:	4b92      	ldr	r3, [pc, #584]	; (80013ac <inSystem+0x2dc>)
 8001164:	2202      	movs	r2, #2
 8001166:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001168:	4890      	ldr	r0, [pc, #576]	; (80013ac <inSystem+0x2dc>)
 800116a:	f002 fa2b 	bl	80035c4 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 800116e:	4b90      	ldr	r3, [pc, #576]	; (80013b0 <inSystem+0x2e0>)
 8001170:	4a90      	ldr	r2, [pc, #576]	; (80013b4 <inSystem+0x2e4>)
 8001172:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8001174:	4b8e      	ldr	r3, [pc, #568]	; (80013b0 <inSystem+0x2e0>)
 8001176:	2200      	movs	r2, #0
 8001178:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = 0;
 800117a:	4b8d      	ldr	r3, [pc, #564]	; (80013b0 <inSystem+0x2e0>)
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
//	counter = 50;
	handlerPWM_1.config.periodo     = 40; // se maneja 25 hz por testeo
 8001182:	4b8b      	ldr	r3, [pc, #556]	; (80013b0 <inSystem+0x2e0>)
 8001184:	2228      	movs	r2, #40	; 0x28
 8001186:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001188:	4b89      	ldr	r3, [pc, #548]	; (80013b0 <inSystem+0x2e0>)
 800118a:	2264      	movs	r2, #100	; 0x64
 800118c:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 800118e:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <inSystem+0x2e0>)
 8001190:	2201      	movs	r2, #1
 8001192:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001194:	4b86      	ldr	r3, [pc, #536]	; (80013b0 <inSystem+0x2e0>)
 8001196:	2201      	movs	r2, #1
 8001198:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 800119a:	4885      	ldr	r0, [pc, #532]	; (80013b0 <inSystem+0x2e0>)
 800119c:	f003 f99c 	bl	80044d8 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 80011a0:	4883      	ldr	r0, [pc, #524]	; (80013b0 <inSystem+0x2e0>)
 80011a2:	f003 fa7b 	bl	800469c <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 80011a6:	4b84      	ldr	r3, [pc, #528]	; (80013b8 <inSystem+0x2e8>)
 80011a8:	4a7d      	ldr	r2, [pc, #500]	; (80013a0 <inSystem+0x2d0>)
 80011aa:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80011ac:	4b82      	ldr	r3, [pc, #520]	; (80013b8 <inSystem+0x2e8>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011b2:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <inSystem+0x2e8>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011b8:	4b7f      	ldr	r3, [pc, #508]	; (80013b8 <inSystem+0x2e8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80011be:	4b7e      	ldr	r3, [pc, #504]	; (80013b8 <inSystem+0x2e8>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011c4:	4b7c      	ldr	r3, [pc, #496]	; (80013b8 <inSystem+0x2e8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011ca:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <inSystem+0x2e8>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80011d0:	4879      	ldr	r0, [pc, #484]	; (80013b8 <inSystem+0x2e8>)
 80011d2:	f002 f9f7 	bl	80035c4 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80011d6:	4b79      	ldr	r3, [pc, #484]	; (80013bc <inSystem+0x2ec>)
 80011d8:	4a76      	ldr	r2, [pc, #472]	; (80013b4 <inSystem+0x2e4>)
 80011da:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80011dc:	4b77      	ldr	r3, [pc, #476]	; (80013bc <inSystem+0x2ec>)
 80011de:	2201      	movs	r2, #1
 80011e0:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = 0;
 80011e2:	4b76      	ldr	r3, [pc, #472]	; (80013bc <inSystem+0x2ec>)
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 40;// se maneja 25 hz por testeo
 80011ea:	4b74      	ldr	r3, [pc, #464]	; (80013bc <inSystem+0x2ec>)
 80011ec:	2228      	movs	r2, #40	; 0x28
 80011ee:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80011f0:	4b72      	ldr	r3, [pc, #456]	; (80013bc <inSystem+0x2ec>)
 80011f2:	2264      	movs	r2, #100	; 0x64
 80011f4:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80011f6:	4b71      	ldr	r3, [pc, #452]	; (80013bc <inSystem+0x2ec>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80011fc:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <inSystem+0x2ec>)
 80011fe:	2201      	movs	r2, #1
 8001200:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 8001202:	486e      	ldr	r0, [pc, #440]	; (80013bc <inSystem+0x2ec>)
 8001204:	f003 f968 	bl	80044d8 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8001208:	486c      	ldr	r0, [pc, #432]	; (80013bc <inSystem+0x2ec>)
 800120a:	f003 fa47 	bl	800469c <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 800120e:	4b6c      	ldr	r3, [pc, #432]	; (80013c0 <inSystem+0x2f0>)
 8001210:	4a6c      	ldr	r2, [pc, #432]	; (80013c4 <inSystem+0x2f4>)
 8001212:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <inSystem+0x2f0>)
 8001216:	2200      	movs	r2, #0
 8001218:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800121a:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <inSystem+0x2f0>)
 800121c:	2201      	movs	r2, #1
 800121e:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <inSystem+0x2f0>)
 8001222:	220a      	movs	r2, #10
 8001224:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001226:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <inSystem+0x2f0>)
 8001228:	2200      	movs	r2, #0
 800122a:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <inSystem+0x2f0>)
 800122e:	2200      	movs	r2, #0
 8001230:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <inSystem+0x2f0>)
 8001234:	2202      	movs	r2, #2
 8001236:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001238:	4861      	ldr	r0, [pc, #388]	; (80013c0 <inSystem+0x2f0>)
 800123a:	f002 f9c3 	bl	80035c4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 800123e:	2100      	movs	r1, #0
 8001240:	485f      	ldr	r0, [pc, #380]	; (80013c0 <inSystem+0x2f0>)
 8001242:	f002 fb14 	bl	800386e <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 8001246:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <inSystem+0x2f8>)
 8001248:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <inSystem+0x2f4>)
 800124a:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800124c:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <inSystem+0x2f8>)
 800124e:	2200      	movs	r2, #0
 8001250:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001252:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <inSystem+0x2f8>)
 8001254:	2201      	movs	r2, #1
 8001256:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001258:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <inSystem+0x2f8>)
 800125a:	220b      	movs	r2, #11
 800125c:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800125e:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <inSystem+0x2f8>)
 8001260:	2200      	movs	r2, #0
 8001262:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001264:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <inSystem+0x2f8>)
 8001266:	2200      	movs	r2, #0
 8001268:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <inSystem+0x2f8>)
 800126c:	2202      	movs	r2, #2
 800126e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001270:	4855      	ldr	r0, [pc, #340]	; (80013c8 <inSystem+0x2f8>)
 8001272:	f002 f9a7 	bl	80035c4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001276:	2100      	movs	r1, #0
 8001278:	4853      	ldr	r0, [pc, #332]	; (80013c8 <inSystem+0x2f8>)
 800127a:	f002 faf8 	bl	800386e <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <inSystem+0x2fc>)
 8001280:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <inSystem+0x2f4>)
 8001282:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001284:	4b51      	ldr	r3, [pc, #324]	; (80013cc <inSystem+0x2fc>)
 8001286:	2200      	movs	r2, #0
 8001288:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <inSystem+0x2fc>)
 800128c:	2201      	movs	r2, #1
 800128e:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <inSystem+0x2fc>)
 8001292:	220c      	movs	r2, #12
 8001294:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <inSystem+0x2fc>)
 8001298:	2200      	movs	r2, #0
 800129a:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <inSystem+0x2fc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <inSystem+0x2fc>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 80012a8:	4848      	ldr	r0, [pc, #288]	; (80013cc <inSystem+0x2fc>)
 80012aa:	f002 f98b 	bl	80035c4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 80012ae:	2100      	movs	r1, #0
 80012b0:	4846      	ldr	r0, [pc, #280]	; (80013cc <inSystem+0x2fc>)
 80012b2:	f002 fadc 	bl	800386e <GPIO_WritePin_Afopt>

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <inSystem+0x300>)
 80012b8:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <inSystem+0x304>)
 80012ba:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <inSystem+0x300>)
 80012be:	2200      	movs	r2, #0
 80012c0:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <inSystem+0x300>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <inSystem+0x300>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012ce:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <inSystem+0x300>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <inSystem+0x300>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <inSystem+0x300>)
 80012dc:	2202      	movs	r2, #2
 80012de:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80012e0:	483b      	ldr	r0, [pc, #236]	; (80013d0 <inSystem+0x300>)
 80012e2:	f002 f96f 	bl	80035c4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 80012e6:	2100      	movs	r1, #0
 80012e8:	4839      	ldr	r0, [pc, #228]	; (80013d0 <inSystem+0x300>)
 80012ea:	f002 fac0 	bl	800386e <GPIO_WritePin_Afopt>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80012ee:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <inSystem+0x308>)
 80012f0:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <inSystem+0x2f4>)
 80012f2:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012f4:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <inSystem+0x308>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <inSystem+0x308>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <inSystem+0x308>)
 8001302:	2201      	movs	r2, #1
 8001304:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <inSystem+0x308>)
 8001308:	2200      	movs	r2, #0
 800130a:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <inSystem+0x308>)
 800130e:	2200      	movs	r2, #0
 8001310:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <inSystem+0x308>)
 8001314:	2202      	movs	r2, #2
 8001316:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <inSystem+0x30c>)
 800131a:	4a2f      	ldr	r2, [pc, #188]	; (80013d8 <inSystem+0x308>)
 800131c:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <inSystem+0x30c>)
 8001320:	2202      	movs	r2, #2
 8001322:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001324:	482d      	ldr	r0, [pc, #180]	; (80013dc <inSystem+0x30c>)
 8001326:	f001 f91f 	bl	8002568 <extInt_Config>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <inSystem+0x310>)
 800132c:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <inSystem+0x2f4>)
 800132e:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <inSystem+0x310>)
 8001332:	2200      	movs	r2, #0
 8001334:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <inSystem+0x310>)
 8001338:	2200      	movs	r2, #0
 800133a:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <inSystem+0x310>)
 800133e:	2203      	movs	r2, #3
 8001340:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <inSystem+0x310>)
 8001344:	2200      	movs	r2, #0
 8001346:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <inSystem+0x310>)
 800134a:	2200      	movs	r2, #0
 800134c:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <inSystem+0x310>)
 8001350:	2202      	movs	r2, #2
 8001352:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <inSystem+0x314>)
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <inSystem+0x310>)
 8001358:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <inSystem+0x314>)
 800135c:	2202      	movs	r2, #2
 800135e:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001360:	4820      	ldr	r0, [pc, #128]	; (80013e4 <inSystem+0x314>)
 8001362:	f001 f901 	bl	8002568 <extInt_Config>
	///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <inSystem+0x318>)
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <inSystem+0x2d0>)
 800136a:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <inSystem+0x318>)
 800136e:	2207      	movs	r2, #7
 8001370:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <inSystem+0x318>)
 8001374:	2202      	movs	r2, #2
 8001376:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <inSystem+0x318>)
 800137a:	2200      	movs	r2, #0
 800137c:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <inSystem+0x318>)
 8001380:	2202      	movs	r2, #2
 8001382:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <inSystem+0x318>)
 8001386:	2200      	movs	r2, #0
 8001388:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <inSystem+0x318>)
 800138c:	2203      	movs	r2, #3
 800138e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <inSystem+0x318>)
 8001392:	f002 f917 	bl	80035c4 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <inSystem+0x31c>)
 8001398:	e02a      	b.n	80013f0 <inSystem+0x320>
 800139a:	bf00      	nop
 800139c:	200001fc 	.word	0x200001fc
 80013a0:	40020000 	.word	0x40020000
 80013a4:	200002a8 	.word	0x200002a8
 80013a8:	40000400 	.word	0x40000400
 80013ac:	20000208 	.word	0x20000208
 80013b0:	200002e4 	.word	0x200002e4
 80013b4:	40000c00 	.word	0x40000c00
 80013b8:	20000214 	.word	0x20000214
 80013bc:	200002fc 	.word	0x200002fc
 80013c0:	20000244 	.word	0x20000244
 80013c4:	40020800 	.word	0x40020800
 80013c8:	20000238 	.word	0x20000238
 80013cc:	2000025c 	.word	0x2000025c
 80013d0:	20000250 	.word	0x20000250
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	20000268 	.word	0x20000268
 80013dc:	20000298 	.word	0x20000298
 80013e0:	20000274 	.word	0x20000274
 80013e4:	200002a0 	.word	0x200002a0
 80013e8:	2000022c 	.word	0x2000022c
 80013ec:	20000220 	.word	0x20000220
 80013f0:	4a63      	ldr	r2, [pc, #396]	; (8001580 <inSystem+0x4b0>)
 80013f2:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80013f4:	4b63      	ldr	r3, [pc, #396]	; (8001584 <inSystem+0x4b4>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013fa:	4b62      	ldr	r3, [pc, #392]	; (8001584 <inSystem+0x4b4>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001400:	4b60      	ldr	r3, [pc, #384]	; (8001584 <inSystem+0x4b4>)
 8001402:	2200      	movs	r2, #0
 8001404:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001406:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <inSystem+0x4b4>)
 8001408:	2203      	movs	r2, #3
 800140a:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800140c:	4b5d      	ldr	r3, [pc, #372]	; (8001584 <inSystem+0x4b4>)
 800140e:	2200      	movs	r2, #0
 8001410:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001412:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <inSystem+0x4b4>)
 8001414:	2203      	movs	r2, #3
 8001416:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001418:	485a      	ldr	r0, [pc, #360]	; (8001584 <inSystem+0x4b4>)
 800141a:	f002 f8d3 	bl	80035c4 <GPIO_Config>

	handlerUSART1.ptrUSARTx                      = USART2;
 800141e:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <inSystem+0x4b8>)
 8001420:	4a5a      	ldr	r2, [pc, #360]	; (800158c <inSystem+0x4bc>)
 8001422:	601a      	str	r2, [r3, #0]
	handlerUSART1.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <inSystem+0x4b8>)
 8001426:	4a5a      	ldr	r2, [pc, #360]	; (8001590 <inSystem+0x4c0>)
 8001428:	60da      	str	r2, [r3, #12]
	handlerUSART1.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 800142a:	4b57      	ldr	r3, [pc, #348]	; (8001588 <inSystem+0x4b8>)
 800142c:	2201      	movs	r2, #1
 800142e:	71da      	strb	r2, [r3, #7]
	handlerUSART1.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001430:	4b55      	ldr	r3, [pc, #340]	; (8001588 <inSystem+0x4b8>)
 8001432:	2201      	movs	r2, #1
 8001434:	715a      	strb	r2, [r3, #5]
	handlerUSART1.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001436:	4b54      	ldr	r3, [pc, #336]	; (8001588 <inSystem+0x4b8>)
 8001438:	2200      	movs	r2, #0
 800143a:	711a      	strb	r2, [r3, #4]
	handlerUSART1.USART_Config.USART_mode        = USART_MODE_RXTX;
 800143c:	4b52      	ldr	r3, [pc, #328]	; (8001588 <inSystem+0x4b8>)
 800143e:	2202      	movs	r2, #2
 8001440:	719a      	strb	r2, [r3, #6]
	handlerUSART1.USART_Config.USART_parity      = USART_PARITY_NONE;
 8001442:	4b51      	ldr	r3, [pc, #324]	; (8001588 <inSystem+0x4b8>)
 8001444:	2200      	movs	r2, #0
 8001446:	725a      	strb	r2, [r3, #9]
	handlerUSART1.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001448:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <inSystem+0x4b8>)
 800144a:	2200      	movs	r2, #0
 800144c:	729a      	strb	r2, [r3, #10]
	handlerUSART1.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 800144e:	4b4e      	ldr	r3, [pc, #312]	; (8001588 <inSystem+0x4b8>)
 8001450:	2200      	movs	r2, #0
 8001452:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART1);
 8001454:	484c      	ldr	r0, [pc, #304]	; (8001588 <inSystem+0x4b8>)
 8001456:	f003 fc93 	bl	8004d80 <USART_Config>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_vel.ptrTIMx                           = TIM2;
 800145a:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <inSystem+0x4c4>)
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	601a      	str	r2, [r3, #0]
	handlerTIM2_vel.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001462:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <inSystem+0x4c4>)
 8001464:	2201      	movs	r2, #1
 8001466:	741a      	strb	r2, [r3, #16]
	handlerTIM2_vel.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001468:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <inSystem+0x4c4>)
 800146a:	2200      	movs	r2, #0
 800146c:	711a      	strb	r2, [r3, #4]
	handlerTIM2_vel.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <inSystem+0x4c4>)
 8001470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001474:	609a      	str	r2, [r3, #8]
	handlerTIM2_vel.TIMx_Config.TIMx_period           = 80;
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <inSystem+0x4c4>)
 8001478:	2250      	movs	r2, #80	; 0x50
 800147a:	60da      	str	r2, [r3, #12]
	Ts = handlerTIM2_vel.TIMx_Config.TIMx_period;
 800147c:	4b45      	ldr	r3, [pc, #276]	; (8001594 <inSystem+0x4c4>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001488:	4b43      	ldr	r3, [pc, #268]	; (8001598 <inSystem+0x4c8>)
 800148a:	edc3 7a00 	vstr	s15, [r3]
	BasicTimer_Config(&handlerTIM2_vel);
 800148e:	4841      	ldr	r0, [pc, #260]	; (8001594 <inSystem+0x4c4>)
 8001490:	f000 fd04 	bl	8001e9c <BasicTimer_Config>
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Motores 1 y 2//////////////////////////////////////////////


	handlerMotor1.configM1.e_M1   = 0;
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <inSystem+0x4cc>)
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
	handlerMotor1.configM1.e_M1_1 = 0;
 800149c:	4b3f      	ldr	r3, [pc, #252]	; (800159c <inSystem+0x4cc>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
	handlerMotor1.configM1.e_M1_2 = 0;
 80014a4:	4b3d      	ldr	r3, [pc, #244]	; (800159c <inSystem+0x4cc>)
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]


	handlerMotor2.configM2.e_M2   = 0;
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <inSystem+0x4d0>)
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
	handlerMotor2.configM2.e_M2_1 = 0;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <inSystem+0x4d0>)
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c
	handlerMotor2.configM2.e_M2_2 = 0;
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <inSystem+0x4d0>)
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Configuracion PINES B8 (SCL) B9 (SDA) e I2C1 //////////////////////////////////////////////

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <inSystem+0x4d4>)
 80014c6:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <inSystem+0x4d8>)
 80014c8:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <inSystem+0x4d4>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <inSystem+0x4d4>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <inSystem+0x4d4>)
 80014d8:	2208      	movs	r2, #8
 80014da:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <inSystem+0x4d4>)
 80014de:	2201      	movs	r2, #1
 80014e0:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <inSystem+0x4d4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <inSystem+0x4d4>)
 80014ea:	2203      	movs	r2, #3
 80014ec:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <inSystem+0x4dc>)
 80014f0:	4a2d      	ldr	r2, [pc, #180]	; (80015a8 <inSystem+0x4d8>)
 80014f2:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <inSystem+0x4dc>)
 80014f6:	2204      	movs	r2, #4
 80014f8:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <inSystem+0x4dc>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <inSystem+0x4dc>)
 8001502:	2209      	movs	r2, #9
 8001504:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <inSystem+0x4dc>)
 8001508:	2201      	movs	r2, #1
 800150a:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <inSystem+0x4dc>)
 800150e:	2200      	movs	r2, #0
 8001510:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <inSystem+0x4dc>)
 8001514:	2203      	movs	r2, #3
 8001516:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <inSystem+0x4e0>)
 800151a:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <inSystem+0x4e4>)
 800151c:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <inSystem+0x4e0>)
 8001520:	2232      	movs	r2, #50	; 0x32
 8001522:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <inSystem+0x4e0>)
 8001526:	2268      	movs	r2, #104	; 0x68
 8001528:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <inSystem+0x4e0>)
 800152c:	2201      	movs	r2, #1
 800152e:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <inSystem+0x4e8>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <inSystem+0x4d4>)
 8001534:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <inSystem+0x4e8>)
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <inSystem+0x4dc>)
 800153a:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <inSystem+0x4e8>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <inSystem+0x4e0>)
 8001540:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <inSystem+0x4e8>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <inSystem+0x4e8>)
 800154a:	2200      	movs	r2, #0
 800154c:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <inSystem+0x4e8>)
 8001550:	f002 f9f0 	bl	8003934 <configMPUAccel>

	////////////////////////////////Timer 5 para contador de tiempo ////////////////////////////////////



	handlerTIM4_time.ptrTIMx                           = TIM4;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <inSystem+0x4ec>)
 8001556:	4a1a      	ldr	r2, [pc, #104]	; (80015c0 <inSystem+0x4f0>)
 8001558:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <inSystem+0x4ec>)
 800155c:	2201      	movs	r2, #1
 800155e:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <inSystem+0x4ec>)
 8001562:	2200      	movs	r2, #0
 8001564:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <inSystem+0x4ec>)
 8001568:	f242 7210 	movw	r2, #10000	; 0x2710
 800156c:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 100;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <inSystem+0x4ec>)
 8001570:	2264      	movs	r2, #100	; 0x64
 8001572:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8001574:	4811      	ldr	r0, [pc, #68]	; (80015bc <inSystem+0x4ec>)
 8001576:	f000 fc91 	bl	8001e9c <BasicTimer_Config>

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020000 	.word	0x40020000
 8001584:	20000220 	.word	0x20000220
 8001588:	20000314 	.word	0x20000314
 800158c:	40004400 	.word	0x40004400
 8001590:	02faf080 	.word	0x02faf080
 8001594:	200002bc 	.word	0x200002bc
 8001598:	2000000c 	.word	0x2000000c
 800159c:	200003a8 	.word	0x200003a8
 80015a0:	200003f0 	.word	0x200003f0
 80015a4:	20000280 	.word	0x20000280
 80015a8:	40020400 	.word	0x40020400
 80015ac:	2000028c 	.word	0x2000028c
 80015b0:	20000438 	.word	0x20000438
 80015b4:	40005400 	.word	0x40005400
 80015b8:	20000440 	.word	0x20000440
 80015bc:	200002d0 	.word	0x200002d0
 80015c0:	40000800 	.word	0x40000800

080015c4 <parseCommands>:


void parseCommands(char *stringVector){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	6078      	str	r0, [r7, #4]

	sscanf(stringVector, "%s %u %u %u %s", cmd ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 80015cc:	4bb1      	ldr	r3, [pc, #708]	; (8001894 <parseCommands+0x2d0>)
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	4bb1      	ldr	r3, [pc, #708]	; (8001898 <parseCommands+0x2d4>)
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	4bb1      	ldr	r3, [pc, #708]	; (800189c <parseCommands+0x2d8>)
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4bb1      	ldr	r3, [pc, #708]	; (80018a0 <parseCommands+0x2dc>)
 80015da:	4ab2      	ldr	r2, [pc, #712]	; (80018a4 <parseCommands+0x2e0>)
 80015dc:	49b2      	ldr	r1, [pc, #712]	; (80018a8 <parseCommands+0x2e4>)
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f005 f878 	bl	80066d4 <siscanf>




	if (strcmp(cmd, "help") == 0){
 80015e4:	49b1      	ldr	r1, [pc, #708]	; (80018ac <parseCommands+0x2e8>)
 80015e6:	48af      	ldr	r0, [pc, #700]	; (80018a4 <parseCommands+0x2e0>)
 80015e8:	f7fe fdfa 	bl	80001e0 <strcmp>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <parseCommands+0x60>

		writeMsg(&handlerUSART1, "HELP MENU CMD : \n");
 80015f2:	49af      	ldr	r1, [pc, #700]	; (80018b0 <parseCommands+0x2ec>)
 80015f4:	48af      	ldr	r0, [pc, #700]	; (80018b4 <parseCommands+0x2f0>)
 80015f6:	f003 ffa5 	bl	8005544 <writeMsg>
		writeMsg(&handlerUSART1, "1)  start #setPoint #dir --- setPoint de 0 a 9 ---  dir 0 CW 1 CCW \n");
 80015fa:	49af      	ldr	r1, [pc, #700]	; (80018b8 <parseCommands+0x2f4>)
 80015fc:	48ad      	ldr	r0, [pc, #692]	; (80018b4 <parseCommands+0x2f0>)
 80015fe:	f003 ffa1 	bl	8005544 <writeMsg>
		writeMsg(&handlerUSART1, "2)  goTo #dutty #dir #distance  -----dutty de 0 a 100 ||  dir 0 CW 1 CCW || Distancia en mm \n" );
 8001602:	49ae      	ldr	r1, [pc, #696]	; (80018bc <parseCommands+0x2f8>)
 8001604:	48ab      	ldr	r0, [pc, #684]	; (80018b4 <parseCommands+0x2f0>)
 8001606:	f003 ff9d 	bl	8005544 <writeMsg>
		writeMsg(&handlerUSART1, "3)  off \n");
 800160a:	49ad      	ldr	r1, [pc, #692]	; (80018c0 <parseCommands+0x2fc>)
 800160c:	48a9      	ldr	r0, [pc, #676]	; (80018b4 <parseCommands+0x2f0>)
 800160e:	f003 ff99 	bl	8005544 <writeMsg>
		writeMsg(&handlerUSART1, "4)  gyro \n");
 8001612:	49ac      	ldr	r1, [pc, #688]	; (80018c4 <parseCommands+0x300>)
 8001614:	48a7      	ldr	r0, [pc, #668]	; (80018b4 <parseCommands+0x2f0>)
 8001616:	f003 ff95 	bl	8005544 <writeMsg>
		writeMsg(&handlerUSART1, " \n");
 800161a:	49ab      	ldr	r1, [pc, #684]	; (80018c8 <parseCommands+0x304>)
 800161c:	48a5      	ldr	r0, [pc, #660]	; (80018b4 <parseCommands+0x2f0>)
 800161e:	f003 ff91 	bl	8005544 <writeMsg>


	}


}
 8001622:	e1cb      	b.n	80019bc <parseCommands+0x3f8>
	}else if (strcmp(cmd, "start") == 0){
 8001624:	49a9      	ldr	r1, [pc, #676]	; (80018cc <parseCommands+0x308>)
 8001626:	489f      	ldr	r0, [pc, #636]	; (80018a4 <parseCommands+0x2e0>)
 8001628:	f7fe fdda 	bl	80001e0 <strcmp>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d154      	bne.n	80016dc <parseCommands+0x118>
		dist_1 = 0;
 8001632:	49a7      	ldr	r1, [pc, #668]	; (80018d0 <parseCommands+0x30c>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9c1 2300 	strd	r2, r3, [r1]
		dist_2 = 0;
 8001640:	49a4      	ldr	r1, [pc, #656]	; (80018d4 <parseCommands+0x310>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9c1 2300 	strd	r2, r3, [r1]
		handlerMotor1.configM1.counts_M1 = 0;
 800164e:	4ba2      	ldr	r3, [pc, #648]	; (80018d8 <parseCommands+0x314>)
 8001650:	2200      	movs	r2, #0
 8001652:	841a      	strh	r2, [r3, #32]
		handlerMotor2.configM2.counts_M2 = 0;
 8001654:	4ba1      	ldr	r3, [pc, #644]	; (80018dc <parseCommands+0x318>)
 8001656:	2200      	movs	r2, #0
 8001658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		setPoint = firstParameter;
 800165c:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <parseCommands+0x2dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001668:	4b9d      	ldr	r3, [pc, #628]	; (80018e0 <parseCommands+0x31c>)
 800166a:	edc3 7a00 	vstr	s15, [r3]
		if (!flagPWM_1){
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <parseCommands+0x320>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d112      	bne.n	800169c <parseCommands+0xd8>
			GPIO_WritePin_Afopt(&handlerIn1PinC12, secondParameter);
 8001676:	4b89      	ldr	r3, [pc, #548]	; (800189c <parseCommands+0x2d8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	489a      	ldr	r0, [pc, #616]	; (80018e8 <parseCommands+0x324>)
 8001680:	f002 f8f5 	bl	800386e <GPIO_WritePin_Afopt>
			flagPWM_1 = enableOutput(&handlerPWM_1);
 8001684:	4899      	ldr	r0, [pc, #612]	; (80018ec <parseCommands+0x328>)
 8001686:	f003 f81b 	bl	80046c0 <enableOutput>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b95      	ldr	r3, [pc, #596]	; (80018e4 <parseCommands+0x320>)
 8001690:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,SET);
 8001692:	2101      	movs	r1, #1
 8001694:	4896      	ldr	r0, [pc, #600]	; (80018f0 <parseCommands+0x32c>)
 8001696:	f002 f8ea 	bl	800386e <GPIO_WritePin_Afopt>
 800169a:	e000      	b.n	800169e <parseCommands+0xda>
			__NOP();
 800169c:	bf00      	nop
		if (!flagPWM_2){
 800169e:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <parseCommands+0x330>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d112      	bne.n	80016cc <parseCommands+0x108>
			GPIO_WritePin_Afopt(&handlerIn2PinD2, secondParameter);
 80016a6:	4b7d      	ldr	r3, [pc, #500]	; (800189c <parseCommands+0x2d8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	4892      	ldr	r0, [pc, #584]	; (80018f8 <parseCommands+0x334>)
 80016b0:	f002 f8dd 	bl	800386e <GPIO_WritePin_Afopt>
			flagPWM_2 = enableOutput(&handlerPWM_2);
 80016b4:	4891      	ldr	r0, [pc, #580]	; (80018fc <parseCommands+0x338>)
 80016b6:	f003 f803 	bl	80046c0 <enableOutput>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b8d      	ldr	r3, [pc, #564]	; (80018f4 <parseCommands+0x330>)
 80016c0:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,SET);
 80016c2:	2101      	movs	r1, #1
 80016c4:	488e      	ldr	r0, [pc, #568]	; (8001900 <parseCommands+0x33c>)
 80016c6:	f002 f8d2 	bl	800386e <GPIO_WritePin_Afopt>
 80016ca:	e000      	b.n	80016ce <parseCommands+0x10a>
			__NOP();
 80016cc:	bf00      	nop
		startTimer(&handlerTIM2_vel);
 80016ce:	488d      	ldr	r0, [pc, #564]	; (8001904 <parseCommands+0x340>)
 80016d0:	f000 ff08 	bl	80024e4 <startTimer>
		enableChangePWM = SET;
 80016d4:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <parseCommands+0x344>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
}
 80016da:	e16f      	b.n	80019bc <parseCommands+0x3f8>
	}else if (strcmp(cmd, "goTo") == 0){
 80016dc:	498b      	ldr	r1, [pc, #556]	; (800190c <parseCommands+0x348>)
 80016de:	4871      	ldr	r0, [pc, #452]	; (80018a4 <parseCommands+0x2e0>)
 80016e0:	f7fe fd7e 	bl	80001e0 <strcmp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 8120 	bne.w	800192c <parseCommands+0x368>
		dist_1 = 0;
 80016ec:	4978      	ldr	r1, [pc, #480]	; (80018d0 <parseCommands+0x30c>)
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9c1 2300 	strd	r2, r3, [r1]
		dist_2 = 0;
 80016fa:	4976      	ldr	r1, [pc, #472]	; (80018d4 <parseCommands+0x310>)
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9c1 2300 	strd	r2, r3, [r1]
		handlerMotor1.configM1.counts_M1 = 0;
 8001708:	4b73      	ldr	r3, [pc, #460]	; (80018d8 <parseCommands+0x314>)
 800170a:	2200      	movs	r2, #0
 800170c:	841a      	strh	r2, [r3, #32]
		handlerMotor2.configM2.counts_M2 = 0;
 800170e:	4b73      	ldr	r3, [pc, #460]	; (80018dc <parseCommands+0x318>)
 8001710:	2200      	movs	r2, #0
 8001712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		distance = thirdParameter;
 8001716:	4b60      	ldr	r3, [pc, #384]	; (8001898 <parseCommands+0x2d4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b7c      	ldr	r3, [pc, #496]	; (8001910 <parseCommands+0x34c>)
 800171e:	801a      	strh	r2, [r3, #0]
		setPoint = thirdParameter;
 8001720:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <parseCommands+0x2d4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172c:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <parseCommands+0x31c>)
 800172e:	edc3 7a00 	vstr	s15, [r3]
		if (!flagPWM_1){
 8001732:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <parseCommands+0x320>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d14f      	bne.n	80017da <parseCommands+0x216>
			handlerMotor1.configM1.u_M1_1 = setPoint / k;
 800173a:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <parseCommands+0x31c>)
 800173c:	edd3 6a00 	vldr	s13, [r3]
 8001740:	4b74      	ldr	r3, [pc, #464]	; (8001914 <parseCommands+0x350>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <parseCommands+0x314>)
 800174c:	edc3 7a01 	vstr	s15, [r3, #4]
			setConstants(&handlerMotor1, 1, k, tau, theta, Ts);
 8001750:	4b70      	ldr	r3, [pc, #448]	; (8001914 <parseCommands+0x350>)
 8001752:	ed93 7a00 	vldr	s14, [r3]
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <parseCommands+0x354>)
 8001758:	edd3 6a00 	vldr	s13, [r3]
 800175c:	4b6f      	ldr	r3, [pc, #444]	; (800191c <parseCommands+0x358>)
 800175e:	ed93 6a00 	vldr	s12, [r3]
 8001762:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <parseCommands+0x35c>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176c:	ee17 3a90 	vmov	r3, s15
 8001770:	b29b      	uxth	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	eeb0 1a46 	vmov.f32	s2, s12
 8001778:	eef0 0a66 	vmov.f32	s1, s13
 800177c:	eeb0 0a47 	vmov.f32	s0, s14
 8001780:	2101      	movs	r1, #1
 8001782:	4855      	ldr	r0, [pc, #340]	; (80018d8 <parseCommands+0x314>)
 8001784:	f002 fbf6 	bl	8003f74 <setConstants>
			updateDuttyCycleAfOpt(&handlerPWM_1, firstParameter);
 8001788:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <parseCommands+0x2dc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	4854      	ldr	r0, [pc, #336]	; (80018ec <parseCommands+0x328>)
 800179a:	f003 fa13 	bl	8004bc4 <updateDuttyCycleAfOpt>
			counterPWM1 = showPWMBfOpt(&handlerPWM_1);
 800179e:	4853      	ldr	r0, [pc, #332]	; (80018ec <parseCommands+0x328>)
 80017a0:	f003 f9b4 	bl	8004b0c <showPWMBfOpt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <parseCommands+0x360>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
			GPIO_WritePin_Afopt(&handlerIn1PinC12, secondParameter);
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <parseCommands+0x2d8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4619      	mov	r1, r3
 80017bc:	484a      	ldr	r0, [pc, #296]	; (80018e8 <parseCommands+0x324>)
 80017be:	f002 f856 	bl	800386e <GPIO_WritePin_Afopt>
			flagPWM_1 = enableOutput(&handlerPWM_1);
 80017c2:	484a      	ldr	r0, [pc, #296]	; (80018ec <parseCommands+0x328>)
 80017c4:	f002 ff7c 	bl	80046c0 <enableOutput>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <parseCommands+0x320>)
 80017ce:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,SET);
 80017d0:	2101      	movs	r1, #1
 80017d2:	4847      	ldr	r0, [pc, #284]	; (80018f0 <parseCommands+0x32c>)
 80017d4:	f002 f84b 	bl	800386e <GPIO_WritePin_Afopt>
 80017d8:	e000      	b.n	80017dc <parseCommands+0x218>
			__NOP();
 80017da:	bf00      	nop
		if (!flagPWM_2){
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <parseCommands+0x330>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d14f      	bne.n	8001884 <parseCommands+0x2c0>
			handlerMotor2.configM2.u_M2_1 = setPoint / k;
 80017e4:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <parseCommands+0x31c>)
 80017e6:	edd3 6a00 	vldr	s13, [r3]
 80017ea:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <parseCommands+0x350>)
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <parseCommands+0x318>)
 80017f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			setConstants(&handlerMotor2, 2, k, tau, theta, Ts);
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <parseCommands+0x350>)
 80017fc:	ed93 7a00 	vldr	s14, [r3]
 8001800:	4b45      	ldr	r3, [pc, #276]	; (8001918 <parseCommands+0x354>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	4b45      	ldr	r3, [pc, #276]	; (800191c <parseCommands+0x358>)
 8001808:	ed93 6a00 	vldr	s12, [r3]
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <parseCommands+0x35c>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001816:	ee17 3a90 	vmov	r3, s15
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	eeb0 1a46 	vmov.f32	s2, s12
 8001822:	eef0 0a66 	vmov.f32	s1, s13
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	2102      	movs	r1, #2
 800182c:	482b      	ldr	r0, [pc, #172]	; (80018dc <parseCommands+0x318>)
 800182e:	f002 fba1 	bl	8003f74 <setConstants>
			updateDuttyCycleAfOpt(&handlerPWM_2, firstParameter);
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <parseCommands+0x2dc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	482e      	ldr	r0, [pc, #184]	; (80018fc <parseCommands+0x338>)
 8001844:	f003 f9be 	bl	8004bc4 <updateDuttyCycleAfOpt>
			counterPWM2 = showPWMBfOpt(&handlerPWM_2);
 8001848:	482c      	ldr	r0, [pc, #176]	; (80018fc <parseCommands+0x338>)
 800184a:	f003 f95f 	bl	8004b0c <showPWMBfOpt>
 800184e:	4603      	mov	r3, r0
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <parseCommands+0x364>)
 800185a:	edc3 7a00 	vstr	s15, [r3]
			GPIO_WritePin_Afopt(&handlerIn2PinD2, secondParameter);
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <parseCommands+0x2d8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4619      	mov	r1, r3
 8001866:	4824      	ldr	r0, [pc, #144]	; (80018f8 <parseCommands+0x334>)
 8001868:	f002 f801 	bl	800386e <GPIO_WritePin_Afopt>
			flagPWM_2 = enableOutput(&handlerPWM_2);
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <parseCommands+0x338>)
 800186e:	f002 ff27 	bl	80046c0 <enableOutput>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <parseCommands+0x330>)
 8001878:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,SET);
 800187a:	2101      	movs	r1, #1
 800187c:	4820      	ldr	r0, [pc, #128]	; (8001900 <parseCommands+0x33c>)
 800187e:	f001 fff6 	bl	800386e <GPIO_WritePin_Afopt>
 8001882:	e000      	b.n	8001886 <parseCommands+0x2c2>
			__NOP();
 8001884:	bf00      	nop
		startTimer(&handlerTIM2_vel);
 8001886:	481f      	ldr	r0, [pc, #124]	; (8001904 <parseCommands+0x340>)
 8001888:	f000 fe2c 	bl	80024e4 <startTimer>
		enableChangePWM = SET;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <parseCommands+0x344>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
}
 8001892:	e093      	b.n	80019bc <parseCommands+0x3f8>
 8001894:	200004c0 	.word	0x200004c0
 8001898:	200004bc 	.word	0x200004bc
 800189c:	200004b8 	.word	0x200004b8
 80018a0:	200004b4 	.word	0x200004b4
 80018a4:	20000494 	.word	0x20000494
 80018a8:	0800a238 	.word	0x0800a238
 80018ac:	0800a248 	.word	0x0800a248
 80018b0:	0800a250 	.word	0x0800a250
 80018b4:	20000314 	.word	0x20000314
 80018b8:	0800a264 	.word	0x0800a264
 80018bc:	0800a2ac 	.word	0x0800a2ac
 80018c0:	0800a30c 	.word	0x0800a30c
 80018c4:	0800a318 	.word	0x0800a318
 80018c8:	0800a324 	.word	0x0800a324
 80018cc:	0800a328 	.word	0x0800a328
 80018d0:	20000550 	.word	0x20000550
 80018d4:	20000558 	.word	0x20000558
 80018d8:	200003a8 	.word	0x200003a8
 80018dc:	200003f0 	.word	0x200003f0
 80018e0:	20000574 	.word	0x20000574
 80018e4:	20000540 	.word	0x20000540
 80018e8:	2000025c 	.word	0x2000025c
 80018ec:	200002e4 	.word	0x200002e4
 80018f0:	20000244 	.word	0x20000244
 80018f4:	20000541 	.word	0x20000541
 80018f8:	20000250 	.word	0x20000250
 80018fc:	200002fc 	.word	0x200002fc
 8001900:	20000238 	.word	0x20000238
 8001904:	200002bc 	.word	0x200002bc
 8001908:	20000543 	.word	0x20000543
 800190c:	0800a330 	.word	0x0800a330
 8001910:	20000578 	.word	0x20000578
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004
 800191c:	20000008 	.word	0x20000008
 8001920:	2000000c 	.word	0x2000000c
 8001924:	20000548 	.word	0x20000548
 8001928:	2000054c 	.word	0x2000054c
	}else if (strcmp(cmd, "off") == 0){
 800192c:	4925      	ldr	r1, [pc, #148]	; (80019c4 <parseCommands+0x400>)
 800192e:	4826      	ldr	r0, [pc, #152]	; (80019c8 <parseCommands+0x404>)
 8001930:	f7fe fc56 	bl	80001e0 <strcmp>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d128      	bne.n	800198c <parseCommands+0x3c8>
		if (flagPWM_1){
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <parseCommands+0x408>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <parseCommands+0x396>
			flagPWM_1 = disableOutput(&handlerPWM_1);
 8001942:	4823      	ldr	r0, [pc, #140]	; (80019d0 <parseCommands+0x40c>)
 8001944:	f003 f94e 	bl	8004be4 <disableOutput>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <parseCommands+0x408>)
 800194e:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn1PinC10,RESET);
 8001950:	2100      	movs	r1, #0
 8001952:	4820      	ldr	r0, [pc, #128]	; (80019d4 <parseCommands+0x410>)
 8001954:	f001 ff8b 	bl	800386e <GPIO_WritePin_Afopt>
 8001958:	e000      	b.n	800195c <parseCommands+0x398>
			__NOP();
 800195a:	bf00      	nop
		if (flagPWM_2){
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <parseCommands+0x414>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00b      	beq.n	800197c <parseCommands+0x3b8>
			flagPWM_2 = disableOutput(&handlerPWM_2);
 8001964:	481d      	ldr	r0, [pc, #116]	; (80019dc <parseCommands+0x418>)
 8001966:	f003 f93d 	bl	8004be4 <disableOutput>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <parseCommands+0x414>)
 8001970:	701a      	strb	r2, [r3, #0]
			GPIO_WritePin_Afopt (&handlerEn2PinC11,RESET);
 8001972:	2100      	movs	r1, #0
 8001974:	481a      	ldr	r0, [pc, #104]	; (80019e0 <parseCommands+0x41c>)
 8001976:	f001 ff7a 	bl	800386e <GPIO_WritePin_Afopt>
 800197a:	e000      	b.n	800197e <parseCommands+0x3ba>
			__NOP();
 800197c:	bf00      	nop
		stopTimer(&handlerTIM2_vel);
 800197e:	4819      	ldr	r0, [pc, #100]	; (80019e4 <parseCommands+0x420>)
 8001980:	f000 fdc2 	bl	8002508 <stopTimer>
		enableChangePWM = RESET;
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <parseCommands+0x424>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
}
 800198a:	e017      	b.n	80019bc <parseCommands+0x3f8>
	}else if (strcmp(cmd, "gyro") == 0){
 800198c:	4917      	ldr	r1, [pc, #92]	; (80019ec <parseCommands+0x428>)
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <parseCommands+0x404>)
 8001990:	f7fe fc26 	bl	80001e0 <strcmp>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <parseCommands+0x3f0>
		calibr = calibracionGyros(&handler_MPUAccel_6050, 'z');
 800199a:	217a      	movs	r1, #122	; 0x7a
 800199c:	4814      	ldr	r0, [pc, #80]	; (80019f0 <parseCommands+0x42c>)
 800199e:	f000 f8f3 	bl	8001b88 <calibracionGyros>
 80019a2:	eef0 7a40 	vmov.f32	s15, s0
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <parseCommands+0x430>)
 80019a8:	edc3 7a00 	vstr	s15, [r3]
		startTimer(&handlerTIM4_time);
 80019ac:	4812      	ldr	r0, [pc, #72]	; (80019f8 <parseCommands+0x434>)
 80019ae:	f000 fd99 	bl	80024e4 <startTimer>
}
 80019b2:	e003      	b.n	80019bc <parseCommands+0x3f8>
		writeMsg(&handlerUSART1, "Comando Incorrecto :c \n");
 80019b4:	4911      	ldr	r1, [pc, #68]	; (80019fc <parseCommands+0x438>)
 80019b6:	4812      	ldr	r0, [pc, #72]	; (8001a00 <parseCommands+0x43c>)
 80019b8:	f003 fdc4 	bl	8005544 <writeMsg>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800a338 	.word	0x0800a338
 80019c8:	20000494 	.word	0x20000494
 80019cc:	20000540 	.word	0x20000540
 80019d0:	200002e4 	.word	0x200002e4
 80019d4:	20000244 	.word	0x20000244
 80019d8:	20000541 	.word	0x20000541
 80019dc:	200002fc 	.word	0x200002fc
 80019e0:	20000238 	.word	0x20000238
 80019e4:	200002bc 	.word	0x200002bc
 80019e8:	20000543 	.word	0x20000543
 80019ec:	0800a33c 	.word	0x0800a33c
 80019f0:	20000440 	.word	0x20000440
 80019f4:	20000594 	.word	0x20000594
 80019f8:	200002d0 	.word	0x200002d0
 80019fc:	0800a344 	.word	0x0800a344
 8001a00:	20000314 	.word	0x20000314
 8001a04:	00000000 	.word	0x00000000

08001a08 <distanceM1>:



double distanceM1 (void){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

	double u_1;

	u_1 = M_PI * (51.45) * handlerMotor1.configM1.counts_M1/ (72) ;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <distanceM1+0x58>)
 8001a10:	8c1b      	ldrh	r3, [r3, #32]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd9e 	bl	8000554 <__aeabi_i2d>
 8001a18:	a30f      	add	r3, pc, #60	; (adr r3, 8001a58 <distanceM1+0x50>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fe03 	bl	8000628 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <distanceM1+0x5c>)
 8001a30:	f7fe ff24 	bl	800087c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 2300 	strd	r2, r3, [r7]

	return u_1;
 8001a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a40:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a44:	eeb0 0a47 	vmov.f32	s0, s14
 8001a48:	eef0 0a67 	vmov.f32	s1, s15
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	71f1350d 	.word	0x71f1350d
 8001a5c:	40643451 	.word	0x40643451
 8001a60:	200003a8 	.word	0x200003a8
 8001a64:	40520000 	.word	0x40520000

08001a68 <distanceM2>:

double distanceM2 (void){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

	double u_2;

	u_2 = M_PI * (51.70) * handlerMotor2.configM2.counts_M2/ (72) ;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <distanceM2+0x58>)
 8001a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd6d 	bl	8000554 <__aeabi_i2d>
 8001a7a:	a30f      	add	r3, pc, #60	; (adr r3, 8001ab8 <distanceM2+0x50>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fdd2 	bl	8000628 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <distanceM2+0x5c>)
 8001a92:	f7fe fef3 	bl	800087c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 2300 	strd	r2, r3, [r7]

	return u_2;
 8001a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aa2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aaa:	eef0 0a67 	vmov.f32	s1, s15
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	6d45793b 	.word	0x6d45793b
 8001abc:	40644d73 	.word	0x40644d73
 8001ac0:	200003f0 	.word	0x200003f0
 8001ac4:	40520000 	.word	0x40520000

08001ac8 <usart2Rx_Callback>:


// Interrupcion usart 1
void usart2Rx_Callback(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

	rxData = getRxData();
 8001acc:	f003 fd62 	bl	8005594 <getRxData>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b01      	ldr	r3, [pc, #4]	; (8001adc <usart2Rx_Callback+0x14>)
 8001ad6:	701a      	strb	r2, [r3, #0]

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000492 	.word	0x20000492

08001ae0 <BasicTimer4_Callback>:

//Interrupcion Timer 4
void BasicTimer4_Callback(void){
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

	flagGyro = SET;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <BasicTimer4_Callback+0x20>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
	tiempo += 1;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <BasicTimer4_Callback+0x24>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <BasicTimer4_Callback+0x24>)
 8001af2:	6013      	str	r3, [r2, #0]

}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000544 	.word	0x20000544
 8001b04:	20000590 	.word	0x20000590

08001b08 <BasicTimer3_Callback>:

//Interrupción Timer 3
void BasicTimer3_Callback(void){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0

	GPIOxTooglePin(&handlerPinA5);
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <BasicTimer3_Callback+0x1c>)
 8001b0e:	f001 fefa 	bl	8003906 <GPIOxTooglePin>
	counterTIM3++;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <BasicTimer3_Callback+0x20>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <BasicTimer3_Callback+0x20>)
 8001b1c:	801a      	strh	r2, [r3, #0]

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200001fc 	.word	0x200001fc
 8001b28:	20000568 	.word	0x20000568

08001b2c <BasicTimer2_Callback>:

//Interrupcion Timer 2

void BasicTimer2_Callback(void){
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

	flagT2 = SET;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <BasicTimer2_Callback+0x14>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]


}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	20000542 	.word	0x20000542

08001b44 <callback_extInt1>:


//Interrupciones de Exti
void callback_extInt1(void){
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

	handlerMotor1.configM1.counts_M1++;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <callback_extInt1+0x1c>)
 8001b4a:	8c1b      	ldrh	r3, [r3, #32]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <callback_extInt1+0x1c>)
 8001b52:	841a      	strh	r2, [r3, #32]

}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	200003a8 	.word	0x200003a8

08001b64 <callback_extInt3>:

void callback_extInt3(void){
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

	handlerMotor2.configM2.counts_M2++;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <callback_extInt3+0x20>)
 8001b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <callback_extInt3+0x20>)
 8001b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200003f0 	.word	0x200003f0

08001b88 <calibracionGyros>:
}


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 50;
 8001b94:	2332      	movs	r3, #50	; 0x32
 8001b96:	827b      	strh	r3, [r7, #18]
	float    medidas    = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
	float    suma       = 0;
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
	uint8_t  contador   = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	76fb      	strb	r3, [r7, #27]
	float    promedio   = 0;
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2b7a      	cmp	r3, #122	; 0x7a
 8001bb2:	d058      	beq.n	8001c66 <calibracionGyros+0xde>
 8001bb4:	2b7a      	cmp	r3, #122	; 0x7a
 8001bb6:	dc67      	bgt.n	8001c88 <calibracionGyros+0x100>
 8001bb8:	2b78      	cmp	r3, #120	; 0x78
 8001bba:	d012      	beq.n	8001be2 <calibracionGyros+0x5a>
 8001bbc:	2b79      	cmp	r3, #121	; 0x79
 8001bbe:	d031      	beq.n	8001c24 <calibracionGyros+0x9c>
				contador++;
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001bc0:	e062      	b.n	8001c88 <calibracionGyros+0x100>
				medidas = readGyro_X(ptrMPUAccel);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f002 f840 	bl	8003c48 <readGyro_X>
 8001bc8:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001bcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001bdc:	7efb      	ldrb	r3, [r7, #27]
 8001bde:	3301      	adds	r3, #1
 8001be0:	76fb      	strb	r3, [r7, #27]
			while (contador < numMedidas){
 8001be2:	7efb      	ldrb	r3, [r7, #27]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	8a7a      	ldrh	r2, [r7, #18]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8ea      	bhi.n	8001bc2 <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001bec:	8a7b      	ldrh	r3, [r7, #18]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfe:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001c02:	e042      	b.n	8001c8a <calibracionGyros+0x102>
				medidas = readGyro_Y(ptrMPUAccel);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f002 f8a7 	bl	8003d58 <readGyro_Y>
 8001c0a:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001c0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001c1e:	7efb      	ldrb	r3, [r7, #27]
 8001c20:	3301      	adds	r3, #1
 8001c22:	76fb      	strb	r3, [r7, #27]
			while (contador < numMedidas){
 8001c24:	7efb      	ldrb	r3, [r7, #27]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8a7a      	ldrh	r2, [r7, #18]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d8ea      	bhi.n	8001c04 <calibracionGyros+0x7c>
			promedio = suma / numMedidas;
 8001c2e:	8a7b      	ldrh	r3, [r7, #18]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c40:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001c44:	e021      	b.n	8001c8a <calibracionGyros+0x102>
				medidas = readGyro_Z(ptrMPUAccel);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f002 f90e 	bl	8003e68 <readGyro_Z>
 8001c4c:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001c50:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5c:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001c60:	7efb      	ldrb	r3, [r7, #27]
 8001c62:	3301      	adds	r3, #1
 8001c64:	76fb      	strb	r3, [r7, #27]
			while (contador < numMedidas){
 8001c66:	7efb      	ldrb	r3, [r7, #27]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	8a7a      	ldrh	r2, [r7, #18]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8ea      	bhi.n	8001c46 <calibracionGyros+0xbe>
			promedio = suma / numMedidas;
 8001c70:	8a7b      	ldrh	r3, [r7, #18]
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c82:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001c86:	e000      	b.n	8001c8a <calibracionGyros+0x102>
			break;
 8001c88:	bf00      	nop
		}
	}


	return promedio;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	ee07 3a90 	vmov	s15, r3
}
 8001c90:	eeb0 0a67 	vmov.f32	s0, s15
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <ITM_SendChar+0x48>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <ITM_SendChar+0x48>)
 8001cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <ITM_SendChar+0x4c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <ITM_SendChar+0x4c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001cbe:	bf00      	nop
 8001cc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f8      	beq.n	8001cc0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001cce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000edfc 	.word	0xe000edfc
 8001ce8:	e0000e00 	.word	0xe0000e00

08001cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
	return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_kill>:

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d06:	f003 ff31 	bl	8005b6c <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d2e:	e7fe      	b.n	8001d2e <_exit+0x12>

08001d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e00a      	b.n	8001d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d42:	f3af 8000 	nop.w
 8001d46:	4601      	mov	r1, r0
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf0      	blt.n	8001d42 <_read+0x12>
	}

return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e009      	b.n	8001d90 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff89 	bl	8001c9c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf1      	blt.n	8001d7c <_write+0x12>
	}
	return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_close>:

int _close(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dca:	605a      	str	r2, [r3, #4]
	return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_isatty>:

int _isatty(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e16:	490d      	ldr	r1, [pc, #52]	; (8001e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <LoopForever+0xe>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e2c:	4c0a      	ldr	r4, [pc, #40]	; (8001e58 <LoopForever+0x16>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e3a:	f003 fe9d 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e3e:	f7fe ff3b 	bl	8000cb8 <main>

08001e42 <LoopForever>:

LoopForever:
    b LoopForever
 8001e42:	e7fe      	b.n	8001e42 <LoopForever>
  ldr   r0, =_estack
 8001e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e50:	0800a7a0 	.word	0x0800a7a0
  ldr r2, =_sbss
 8001e54:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e58:	200005c8 	.word	0x200005c8

08001e5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC_IRQHandler>
	...

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6b      	ldr	r2, [pc, #428]	; (8002064 <BasicTimer_Config+0x1c8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d106      	bne.n	8001ec8 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001eba:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a6a      	ldr	r2, [pc, #424]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	e030      	b.n	8001f2a <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed0:	d106      	bne.n	8001ee0 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a64      	ldr	r2, [pc, #400]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	e024      	b.n	8001f2a <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a61      	ldr	r2, [pc, #388]	; (800206c <BasicTimer_Config+0x1d0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d106      	bne.n	8001ef8 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a5e      	ldr	r2, [pc, #376]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	e018      	b.n	8001f2a <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5c      	ldr	r2, [pc, #368]	; (8002070 <BasicTimer_Config+0x1d4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d106      	bne.n	8001f10 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001f02:	4b59      	ldr	r3, [pc, #356]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a58      	ldr	r2, [pc, #352]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	e00c      	b.n	8001f2a <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a57      	ldr	r2, [pc, #348]	; (8002074 <BasicTimer_Config+0x1d8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d106      	bne.n	8001f28 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a52      	ldr	r2, [pc, #328]	; (8002068 <BasicTimer_Config+0x1cc>)
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	e000      	b.n	8001f2a <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8001f28:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f38:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6892      	ldr	r2, [r2, #8]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	791b      	ldrb	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d144      	bne.n	8001fd6 <BasicTimer_Config+0x13a>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0210 	bic.w	r2, r2, #16
 8001f5a:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2ba0      	cmp	r3, #160	; 0xa0
 8001f66:	d003      	beq.n	8001f70 <BasicTimer_Config+0xd4>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f6e:	d10b      	bne.n	8001f88 <BasicTimer_Config+0xec>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2264      	movs	r2, #100	; 0x64
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	3a01      	subs	r2, #1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f86:	e021      	b.n	8001fcc <BasicTimer_Config+0x130>

		}else if ((speed == BTIMER_SPEED_16MHz_100us ) || (speed == BTIMER_SPEED_100MHz_100us)){
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001f8e:	d004      	beq.n	8001f9a <BasicTimer_Config+0xfe>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10c      	bne.n	8001fb4 <BasicTimer_Config+0x118>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fb2:	e00b      	b.n	8001fcc <BasicTimer_Config+0x130>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms )){
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001fba:	d107      	bne.n	8001fcc <BasicTimer_Config+0x130>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period    ;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	3a01      	subs	r2, #1
 8001fca:	62da      	str	r2, [r3, #44]	; 0x2c

		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8001fd4:	e013      	b.n	8001ffe <BasicTimer_Config+0x162>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0210 	orr.w	r2, r2, #16
 8001fe4:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3a01      	subs	r2, #1
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002016:	d103      	bne.n	8002020 <BasicTimer_Config+0x184>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002018:	201c      	movs	r0, #28
 800201a:	f7ff ff21 	bl	8001e60 <__NVIC_EnableIRQ>
 800201e:	e01b      	b.n	8002058 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <BasicTimer_Config+0x1d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d103      	bne.n	8002032 <BasicTimer_Config+0x196>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 800202a:	201d      	movs	r0, #29
 800202c:	f7ff ff18 	bl	8001e60 <__NVIC_EnableIRQ>
 8002030:	e012      	b.n	8002058 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <BasicTimer_Config+0x1d4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d103      	bne.n	8002044 <BasicTimer_Config+0x1a8>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800203c:	201e      	movs	r0, #30
 800203e:	f7ff ff0f 	bl	8001e60 <__NVIC_EnableIRQ>
 8002042:	e009      	b.n	8002058 <BasicTimer_Config+0x1bc>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <BasicTimer_Config+0x1d8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d103      	bne.n	8002056 <BasicTimer_Config+0x1ba>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 800204e:	2032      	movs	r0, #50	; 0x32
 8002050:	f7ff ff06 	bl	8001e60 <__NVIC_EnableIRQ>
 8002054:	e000      	b.n	8002058 <BasicTimer_Config+0x1bc>
	}
	else{
		__NOP();
 8002056:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002058:	b662      	cpsie	i
}
 800205a:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010000 	.word	0x40010000
 8002068:	40023800 	.word	0x40023800
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00

08002078 <BasicTimer5_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer5_Callback(void){
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800207c:	bf00      	nop
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800208c:	bf00      	nop
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800209c:	bf00      	nop
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80020ac:	bf00      	nop
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80020bc:	bf00      	nop
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80020cc:	bf00      	nop
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80020dc:	bf00      	nop
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80020ec:	bf00      	nop
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80020fc:	bf00      	nop
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800210c:	bf00      	nop
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800211c:	bf00      	nop
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800212c:	bf00      	nop
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800213c:	bf00      	nop
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800214c:	bf00      	nop
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800215c:	bf00      	nop
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800216c:	bf00      	nop
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 800217c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 800218a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 800219a:	f7ff fcc7 	bl	8001b2c <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 800219e:	e066      	b.n	800226e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80021a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80021ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b8:	f023 0302 	bic.w	r3, r3, #2
 80021bc:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80021be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021cc:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80021ce:	f7ff ff5b 	bl	8002088 <Capture_TIM2_Ch1_Callback>
}
 80021d2:	e04c      	b.n	800226e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80021d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80021e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80021f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002200:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8002202:	f7ff ff49 	bl	8002098 <Capture_TIM2_Ch2_Callback>
}
 8002206:	e032      	b.n	800226e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8002208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 8002216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002220:	f023 0308 	bic.w	r3, r3, #8
 8002224:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 8002226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002234:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 8002236:	f7ff ff37 	bl	80020a8 <Capture_TIM2_Ch3_Callback>
}
 800223a:	e018      	b.n	800226e <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 800223c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d011      	beq.n	800226e <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 800224a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002254:	f023 0310 	bic.w	r3, r3, #16
 8002258:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 800225a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002268:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 800226a:	f7ff ff25 	bl	80020b8 <Capture_TIM2_Ch4_Callback>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <TIM3_IRQHandler+0xcc>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8002284:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	4a2d      	ldr	r2, [pc, #180]	; (8002340 <TIM3_IRQHandler+0xcc>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8002290:	f7ff fc3a 	bl	8001b08 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8002294:	e052      	b.n	800233c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	4a26      	ldr	r2, [pc, #152]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022a8:	f023 0302 	bic.w	r3, r3, #2
 80022ac:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	4a23      	ldr	r2, [pc, #140]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022b8:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80022ba:	f7ff ff05 	bl	80020c8 <Capture_TIM3_Ch1_Callback>
}
 80022be:	e03d      	b.n	800233c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022d2:	f023 0304 	bic.w	r3, r3, #4
 80022d6:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e2:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80022e4:	f7ff fef8 	bl	80020d8 <Capture_TIM3_Ch2_Callback>
}
 80022e8:	e028      	b.n	800233c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00e      	beq.n	8002314 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	4a11      	ldr	r2, [pc, #68]	; (8002340 <TIM3_IRQHandler+0xcc>)
 80022fc:	f023 0308 	bic.w	r3, r3, #8
 8002300:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800230c:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 800230e:	f7ff feeb 	bl	80020e8 <Capture_TIM3_Ch3_Callback>
}
 8002312:	e013      	b.n	800233c <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002326:	f023 0310 	bic.w	r3, r3, #16
 800232a:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <TIM3_IRQHandler+0xcc>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4a03      	ldr	r2, [pc, #12]	; (8002340 <TIM3_IRQHandler+0xcc>)
 8002332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002336:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8002338:	f7ff fede 	bl	80020f8 <Capture_TIM3_Ch4_Callback>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40000400 	.word	0x40000400

08002344 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <TIM4_IRQHandler+0xcc>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	4a2d      	ldr	r2, [pc, #180]	; (8002410 <TIM4_IRQHandler+0xcc>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8002360:	f7ff fbbe 	bl	8001ae0 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 8002364:	e052      	b.n	800240c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	4a26      	ldr	r2, [pc, #152]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002378:	f023 0302 	bic.w	r3, r3, #2
 800237c:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	4a23      	ldr	r2, [pc, #140]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002388:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 800238a:	f7ff febd 	bl	8002108 <Capture_TIM4_Ch1_Callback>
}
 800238e:	e03d      	b.n	800240c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00e      	beq.n	80023ba <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <TIM4_IRQHandler+0xcc>)
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b2:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80023b4:	f7ff fec8 	bl	8002148 <Capture_TIM5_Ch2_Callback>
}
 80023b8:	e028      	b.n	800240c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00e      	beq.n	80023e4 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	4a11      	ldr	r2, [pc, #68]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023cc:	f023 0308 	bic.w	r3, r3, #8
 80023d0:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023dc:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80023de:	f7ff fe9b 	bl	8002118 <Capture_TIM4_Ch3_Callback>
}
 80023e2:	e013      	b.n	800240c <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023f6:	f023 0310 	bic.w	r3, r3, #16
 80023fa:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <TIM4_IRQHandler+0xcc>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	4a03      	ldr	r2, [pc, #12]	; (8002410 <TIM4_IRQHandler+0xcc>)
 8002402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002406:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8002408:	f7ff fe8e 	bl	8002128 <Capture_TIM4_Ch4_Callback>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40000800 	.word	0x40000800

08002414 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8002418:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4a2d      	ldr	r2, [pc, #180]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8002430:	f7ff fe22 	bl	8002078 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 8002434:	e052      	b.n	80024dc <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00e      	beq.n	8002460 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002448:	f023 0302 	bic.w	r3, r3, #2
 800244c:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002458:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 800245a:	f7ff fe6d 	bl	8002138 <Capture_TIM5_Ch1_Callback>
}
 800245e:	e03d      	b.n	80024dc <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002472:	f023 0304 	bic.w	r3, r3, #4
 8002476:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 800247e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002482:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8002484:	f7ff fe60 	bl	8002148 <Capture_TIM5_Ch2_Callback>
}
 8002488:	e028      	b.n	80024dc <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00e      	beq.n	80024b4 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 800249c:	f023 0308 	bic.w	r3, r3, #8
 80024a0:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 80024a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024ac:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80024ae:	f7ff fe53 	bl	8002158 <Capture_TIM5_Ch3_Callback>
}
 80024b2:	e013      	b.n	80024dc <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 80024c6:	f023 0310 	bic.w	r3, r3, #16
 80024ca:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	4a03      	ldr	r2, [pc, #12]	; (80024e0 <TIM5_IRQHandler+0xcc>)
 80024d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024d6:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80024d8:	f7ff fe46 	bl	8002168 <Capture_TIM5_Ch4_Callback>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40000c00 	.word	0x40000c00

080024e4 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <__NVIC_EnableIRQ>:
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f001 f825 	bl	80035c4 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 800257a:	4b96      	ldr	r3, [pc, #600]	; (80027d4 <extInt_Config+0x26c>)
 800257c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002580:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	f200 85cd 	bhi.w	8003128 <extInt_Config+0xbc0>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <extInt_Config+0x2c>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025d5 	.word	0x080025d5
 8002598:	0800268b 	.word	0x0800268b
 800259c:	08002741 	.word	0x08002741
 80025a0:	08002817 	.word	0x08002817
 80025a4:	080028cd 	.word	0x080028cd
 80025a8:	0800297b 	.word	0x0800297b
 80025ac:	08002a41 	.word	0x08002a41
 80025b0:	08002ae9 	.word	0x08002ae9
 80025b4:	08002b91 	.word	0x08002b91
 80025b8:	08002c39 	.word	0x08002c39
 80025bc:	08002cff 	.word	0x08002cff
 80025c0:	08002da7 	.word	0x08002da7
 80025c4:	08002e4f 	.word	0x08002e4f
 80025c8:	08002f15 	.word	0x08002f15
 80025cc:	08002fbb 	.word	0x08002fbb
 80025d0:	08003063 	.word	0x08003063
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80025d4:	4b80      	ldr	r3, [pc, #512]	; (80027d8 <extInt_Config+0x270>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a7f      	ldr	r2, [pc, #508]	; (80027d8 <extInt_Config+0x270>)
 80025da:	f023 030f 	bic.w	r3, r3, #15
 80025de:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	; (80027dc <extInt_Config+0x274>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d105      	bne.n	80025f8 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80025ec:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <extInt_Config+0x270>)
 80025ee:	4a7a      	ldr	r2, [pc, #488]	; (80027d8 <extInt_Config+0x270>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80025f4:	f000 bd9a 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a78      	ldr	r2, [pc, #480]	; (80027e0 <extInt_Config+0x278>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d107      	bne.n	8002614 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002604:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <extInt_Config+0x270>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <extInt_Config+0x270>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6093      	str	r3, [r2, #8]
					break;
 8002610:	f000 bd8c 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <extInt_Config+0x27c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d107      	bne.n	8002630 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <extInt_Config+0x270>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a6c      	ldr	r2, [pc, #432]	; (80027d8 <extInt_Config+0x270>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	6093      	str	r3, [r2, #8]
					break;
 800262c:	f000 bd7e 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6c      	ldr	r2, [pc, #432]	; (80027e8 <extInt_Config+0x280>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d107      	bne.n	800264c <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <extInt_Config+0x270>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a65      	ldr	r2, [pc, #404]	; (80027d8 <extInt_Config+0x270>)
 8002642:	f043 0303 	orr.w	r3, r3, #3
 8002646:	6093      	str	r3, [r2, #8]
					break;
 8002648:	f000 bd70 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a66      	ldr	r2, [pc, #408]	; (80027ec <extInt_Config+0x284>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d107      	bne.n	8002668 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002658:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <extInt_Config+0x270>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a5e      	ldr	r2, [pc, #376]	; (80027d8 <extInt_Config+0x270>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6093      	str	r3, [r2, #8]
					break;
 8002664:	f000 bd62 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a60      	ldr	r2, [pc, #384]	; (80027f0 <extInt_Config+0x288>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d107      	bne.n	8002684 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <extInt_Config+0x270>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <extInt_Config+0x270>)
 800267a:	f043 0307 	orr.w	r3, r3, #7
 800267e:	6093      	str	r3, [r2, #8]
					break;
 8002680:	f000 bd54 	b.w	800312c <extInt_Config+0xbc4>
						__NOP();
 8002684:	bf00      	nop
					break;
 8002686:	f000 bd51 	b.w	800312c <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 800268a:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <extInt_Config+0x270>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <extInt_Config+0x270>)
 8002690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002694:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <extInt_Config+0x274>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d105      	bne.n	80026ae <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80026a2:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <extInt_Config+0x270>)
 80026a4:	4a4c      	ldr	r2, [pc, #304]	; (80027d8 <extInt_Config+0x270>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80026aa:	f000 bd3f 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a4a      	ldr	r2, [pc, #296]	; (80027e0 <extInt_Config+0x278>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d107      	bne.n	80026ca <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <extInt_Config+0x270>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <extInt_Config+0x270>)
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	6093      	str	r3, [r2, #8]
					break;
 80026c6:	f000 bd31 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a44      	ldr	r2, [pc, #272]	; (80027e4 <extInt_Config+0x27c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d107      	bne.n	80026e6 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80026d6:	4b40      	ldr	r3, [pc, #256]	; (80027d8 <extInt_Config+0x270>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4a3f      	ldr	r2, [pc, #252]	; (80027d8 <extInt_Config+0x270>)
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	6093      	str	r3, [r2, #8]
					break;
 80026e2:	f000 bd23 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <extInt_Config+0x280>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d107      	bne.n	8002702 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <extInt_Config+0x270>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <extInt_Config+0x270>)
 80026f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80026fc:	6093      	str	r3, [r2, #8]
					break;
 80026fe:	f000 bd15 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a38      	ldr	r2, [pc, #224]	; (80027ec <extInt_Config+0x284>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d107      	bne.n	800271e <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800270e:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <extInt_Config+0x270>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4a31      	ldr	r2, [pc, #196]	; (80027d8 <extInt_Config+0x270>)
 8002714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002718:	6093      	str	r3, [r2, #8]
					break;
 800271a:	f000 bd07 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a32      	ldr	r2, [pc, #200]	; (80027f0 <extInt_Config+0x288>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d107      	bne.n	800273a <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <extInt_Config+0x270>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <extInt_Config+0x270>)
 8002730:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002734:	6093      	str	r3, [r2, #8]
					break;
 8002736:	f000 bcf9 	b.w	800312c <extInt_Config+0xbc4>
						__NOP();
 800273a:	bf00      	nop
					break;
 800273c:	f000 bcf6 	b.w	800312c <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <extInt_Config+0x270>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <extInt_Config+0x270>)
 8002746:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800274a:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a22      	ldr	r2, [pc, #136]	; (80027dc <extInt_Config+0x274>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d105      	bne.n	8002764 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <extInt_Config+0x270>)
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <extInt_Config+0x270>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002760:	f000 bce4 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <extInt_Config+0x278>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d107      	bne.n	8002780 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <extInt_Config+0x270>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <extInt_Config+0x270>)
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	6093      	str	r3, [r2, #8]
					break;
 800277c:	f000 bcd6 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <extInt_Config+0x27c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d107      	bne.n	800279c <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <extInt_Config+0x270>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a11      	ldr	r2, [pc, #68]	; (80027d8 <extInt_Config+0x270>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	6093      	str	r3, [r2, #8]
					break;
 8002798:	f000 bcc8 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <extInt_Config+0x280>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d107      	bne.n	80027b8 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <extInt_Config+0x270>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <extInt_Config+0x270>)
 80027ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80027b2:	6093      	str	r3, [r2, #8]
					break;
 80027b4:	f000 bcba 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <extInt_Config+0x284>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d117      	bne.n	80027f4 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <extInt_Config+0x270>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <extInt_Config+0x270>)
 80027ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ce:	6093      	str	r3, [r2, #8]
					break;
 80027d0:	f000 bcac 	b.w	800312c <extInt_Config+0xbc4>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a8a      	ldr	r2, [pc, #552]	; (8002a24 <extInt_Config+0x4bc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d107      	bne.n	8002810 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002800:	4b89      	ldr	r3, [pc, #548]	; (8002a28 <extInt_Config+0x4c0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a88      	ldr	r2, [pc, #544]	; (8002a28 <extInt_Config+0x4c0>)
 8002806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800280a:	6093      	str	r3, [r2, #8]
					break;
 800280c:	f000 bc8e 	b.w	800312c <extInt_Config+0xbc4>
						__NOP();
 8002810:	bf00      	nop
					break;
 8002812:	f000 bc8b 	b.w	800312c <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8002816:	4b84      	ldr	r3, [pc, #528]	; (8002a28 <extInt_Config+0x4c0>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4a83      	ldr	r2, [pc, #524]	; (8002a28 <extInt_Config+0x4c0>)
 800281c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002820:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a80      	ldr	r2, [pc, #512]	; (8002a2c <extInt_Config+0x4c4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d105      	bne.n	800283a <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800282e:	4b7e      	ldr	r3, [pc, #504]	; (8002a28 <extInt_Config+0x4c0>)
 8002830:	4a7d      	ldr	r2, [pc, #500]	; (8002a28 <extInt_Config+0x4c0>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8002836:	f000 bc79 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <extInt_Config+0x4c8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d107      	bne.n	8002856 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002846:	4b78      	ldr	r3, [pc, #480]	; (8002a28 <extInt_Config+0x4c0>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4a77      	ldr	r2, [pc, #476]	; (8002a28 <extInt_Config+0x4c0>)
 800284c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002850:	6093      	str	r3, [r2, #8]
					break;
 8002852:	f000 bc6b 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a75      	ldr	r2, [pc, #468]	; (8002a34 <extInt_Config+0x4cc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d107      	bne.n	8002872 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002862:	4b71      	ldr	r3, [pc, #452]	; (8002a28 <extInt_Config+0x4c0>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4a70      	ldr	r2, [pc, #448]	; (8002a28 <extInt_Config+0x4c0>)
 8002868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800286c:	6093      	str	r3, [r2, #8]
					break;
 800286e:	f000 bc5d 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a6f      	ldr	r2, [pc, #444]	; (8002a38 <extInt_Config+0x4d0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d107      	bne.n	800288e <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800287e:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <extInt_Config+0x4c0>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4a69      	ldr	r2, [pc, #420]	; (8002a28 <extInt_Config+0x4c0>)
 8002884:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002888:	6093      	str	r3, [r2, #8]
					break;
 800288a:	f000 bc4f 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a69      	ldr	r2, [pc, #420]	; (8002a3c <extInt_Config+0x4d4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d107      	bne.n	80028aa <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <extInt_Config+0x4c0>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4a62      	ldr	r2, [pc, #392]	; (8002a28 <extInt_Config+0x4c0>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6093      	str	r3, [r2, #8]
					break;
 80028a6:	f000 bc41 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <extInt_Config+0x4bc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d107      	bne.n	80028c6 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80028b6:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <extInt_Config+0x4c0>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4a5b      	ldr	r2, [pc, #364]	; (8002a28 <extInt_Config+0x4c0>)
 80028bc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80028c0:	6093      	str	r3, [r2, #8]
					break;
 80028c2:	f000 bc33 	b.w	800312c <extInt_Config+0xbc4>
						__NOP();
 80028c6:	bf00      	nop
					break;
 80028c8:	f000 bc30 	b.w	800312c <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80028cc:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <extInt_Config+0x4c0>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a55      	ldr	r2, [pc, #340]	; (8002a28 <extInt_Config+0x4c0>)
 80028d2:	f023 030f 	bic.w	r3, r3, #15
 80028d6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a53      	ldr	r2, [pc, #332]	; (8002a2c <extInt_Config+0x4c4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d105      	bne.n	80028f0 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <extInt_Config+0x4c0>)
 80028e6:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <extInt_Config+0x4c0>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80028ec:	f000 bc1e 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <extInt_Config+0x4c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d107      	bne.n	800290c <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80028fc:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <extInt_Config+0x4c0>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a49      	ldr	r2, [pc, #292]	; (8002a28 <extInt_Config+0x4c0>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	60d3      	str	r3, [r2, #12]
					break;
 8002908:	f000 bc10 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a48      	ldr	r2, [pc, #288]	; (8002a34 <extInt_Config+0x4cc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d107      	bne.n	8002928 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <extInt_Config+0x4c0>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a42      	ldr	r2, [pc, #264]	; (8002a28 <extInt_Config+0x4c0>)
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	60d3      	str	r3, [r2, #12]
					break;
 8002924:	f000 bc02 	b.w	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <extInt_Config+0x4d0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d106      	bne.n	8002942 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002934:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <extInt_Config+0x4c0>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a3b      	ldr	r2, [pc, #236]	; (8002a28 <extInt_Config+0x4c0>)
 800293a:	f043 0303 	orr.w	r3, r3, #3
 800293e:	60d3      	str	r3, [r2, #12]
					break;
 8002940:	e3f4      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <extInt_Config+0x4d4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d106      	bne.n	800295c <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <extInt_Config+0x4c0>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a35      	ldr	r2, [pc, #212]	; (8002a28 <extInt_Config+0x4c0>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	60d3      	str	r3, [r2, #12]
					break;
 800295a:	e3e7      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a30      	ldr	r2, [pc, #192]	; (8002a24 <extInt_Config+0x4bc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d106      	bne.n	8002976 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002968:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <extInt_Config+0x4c0>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a2e      	ldr	r2, [pc, #184]	; (8002a28 <extInt_Config+0x4c0>)
 800296e:	f043 0307 	orr.w	r3, r3, #7
 8002972:	60d3      	str	r3, [r2, #12]
					break;
 8002974:	e3da      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002976:	bf00      	nop
					break;
 8002978:	e3d8      	b.n	800312c <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <extInt_Config+0x4c0>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <extInt_Config+0x4c0>)
 8002980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002984:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <extInt_Config+0x4c4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d104      	bne.n	800299c <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002992:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <extInt_Config+0x4c0>)
 8002994:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <extInt_Config+0x4c0>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800299a:	e3c7      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <extInt_Config+0x4c8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d106      	bne.n	80029b6 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <extInt_Config+0x4c0>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <extInt_Config+0x4c0>)
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	60d3      	str	r3, [r2, #12]
					break;
 80029b4:	e3ba      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <extInt_Config+0x4cc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d106      	bne.n	80029d0 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <extInt_Config+0x4c0>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <extInt_Config+0x4c0>)
 80029c8:	f043 0320 	orr.w	r3, r3, #32
 80029cc:	60d3      	str	r3, [r2, #12]
					break;
 80029ce:	e3ad      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <extInt_Config+0x4d0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d106      	bne.n	80029ea <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <extInt_Config+0x4c0>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <extInt_Config+0x4c0>)
 80029e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80029e6:	60d3      	str	r3, [r2, #12]
					break;
 80029e8:	e3a0      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <extInt_Config+0x4d4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d106      	bne.n	8002a04 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <extInt_Config+0x4c0>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <extInt_Config+0x4c0>)
 80029fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a00:	60d3      	str	r3, [r2, #12]
					break;
 8002a02:	e393      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <extInt_Config+0x4bc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d106      	bne.n	8002a1e <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <extInt_Config+0x4c0>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <extInt_Config+0x4c0>)
 8002a16:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002a1a:	60d3      	str	r3, [r2, #12]
					break;
 8002a1c:	e386      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002a1e:	bf00      	nop
					break;
 8002a20:	e384      	b.n	800312c <extInt_Config+0xbc4>
 8002a22:	bf00      	nop
 8002a24:	40021c00 	.word	0x40021c00
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8002a40:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <extInt_Config+0x6f4>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a85      	ldr	r2, [pc, #532]	; (8002c5c <extInt_Config+0x6f4>)
 8002a46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a4a:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a83      	ldr	r2, [pc, #524]	; (8002c60 <extInt_Config+0x6f8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d104      	bne.n	8002a62 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002a58:	4b80      	ldr	r3, [pc, #512]	; (8002c5c <extInt_Config+0x6f4>)
 8002a5a:	4a80      	ldr	r2, [pc, #512]	; (8002c5c <extInt_Config+0x6f4>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002a60:	e364      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a7e      	ldr	r2, [pc, #504]	; (8002c64 <extInt_Config+0x6fc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d106      	bne.n	8002a7c <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8002a6e:	4b7b      	ldr	r3, [pc, #492]	; (8002c5c <extInt_Config+0x6f4>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a7a      	ldr	r2, [pc, #488]	; (8002c5c <extInt_Config+0x6f4>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	60d3      	str	r3, [r2, #12]
					break;
 8002a7a:	e357      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a79      	ldr	r2, [pc, #484]	; (8002c68 <extInt_Config+0x700>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d106      	bne.n	8002a96 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002a88:	4b74      	ldr	r3, [pc, #464]	; (8002c5c <extInt_Config+0x6f4>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a73      	ldr	r2, [pc, #460]	; (8002c5c <extInt_Config+0x6f4>)
 8002a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a92:	60d3      	str	r3, [r2, #12]
					break;
 8002a94:	e34a      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <extInt_Config+0x704>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d106      	bne.n	8002ab0 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002aa2:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <extInt_Config+0x6f4>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4a6d      	ldr	r2, [pc, #436]	; (8002c5c <extInt_Config+0x6f4>)
 8002aa8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002aac:	60d3      	str	r3, [r2, #12]
					break;
 8002aae:	e33d      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <extInt_Config+0x708>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d106      	bne.n	8002aca <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002abc:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <extInt_Config+0x6f4>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a66      	ldr	r2, [pc, #408]	; (8002c5c <extInt_Config+0x6f4>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac6:	60d3      	str	r3, [r2, #12]
					break;
 8002ac8:	e330      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <extInt_Config+0x70c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d106      	bne.n	8002ae4 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8002ad6:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <extInt_Config+0x6f4>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a60      	ldr	r2, [pc, #384]	; (8002c5c <extInt_Config+0x6f4>)
 8002adc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ae0:	60d3      	str	r3, [r2, #12]
					break;
 8002ae2:	e323      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002ae4:	bf00      	nop
					break;
 8002ae6:	e321      	b.n	800312c <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8002ae8:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <extInt_Config+0x6f4>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <extInt_Config+0x6f4>)
 8002aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002af2:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a59      	ldr	r2, [pc, #356]	; (8002c60 <extInt_Config+0x6f8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d104      	bne.n	8002b0a <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002b00:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <extInt_Config+0x6f4>)
 8002b02:	4a56      	ldr	r2, [pc, #344]	; (8002c5c <extInt_Config+0x6f4>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8002b08:	e310      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a54      	ldr	r2, [pc, #336]	; (8002c64 <extInt_Config+0x6fc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d106      	bne.n	8002b24 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <extInt_Config+0x6f4>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <extInt_Config+0x6f4>)
 8002b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b20:	60d3      	str	r3, [r2, #12]
					break;
 8002b22:	e303      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a4f      	ldr	r2, [pc, #316]	; (8002c68 <extInt_Config+0x700>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d106      	bne.n	8002b3e <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <extInt_Config+0x6f4>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a49      	ldr	r2, [pc, #292]	; (8002c5c <extInt_Config+0x6f4>)
 8002b36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b3a:	60d3      	str	r3, [r2, #12]
					break;
 8002b3c:	e2f6      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a49      	ldr	r2, [pc, #292]	; (8002c6c <extInt_Config+0x704>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d106      	bne.n	8002b58 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002b4a:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <extInt_Config+0x6f4>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4a43      	ldr	r2, [pc, #268]	; (8002c5c <extInt_Config+0x6f4>)
 8002b50:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002b54:	60d3      	str	r3, [r2, #12]
					break;
 8002b56:	e2e9      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a44      	ldr	r2, [pc, #272]	; (8002c70 <extInt_Config+0x708>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d106      	bne.n	8002b72 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <extInt_Config+0x6f4>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a3c      	ldr	r2, [pc, #240]	; (8002c5c <extInt_Config+0x6f4>)
 8002b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6e:	60d3      	str	r3, [r2, #12]
					break;
 8002b70:	e2dc      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <extInt_Config+0x70c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d106      	bne.n	8002b8c <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <extInt_Config+0x6f4>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4a36      	ldr	r2, [pc, #216]	; (8002c5c <extInt_Config+0x6f4>)
 8002b84:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002b88:	60d3      	str	r3, [r2, #12]
					break;
 8002b8a:	e2cf      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002b8c:	bf00      	nop
					break;
 8002b8e:	e2cd      	b.n	800312c <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8002b90:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <extInt_Config+0x6f4>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <extInt_Config+0x6f4>)
 8002b96:	f023 030f 	bic.w	r3, r3, #15
 8002b9a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <extInt_Config+0x6f8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d104      	bne.n	8002bb2 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <extInt_Config+0x6f4>)
 8002baa:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <extInt_Config+0x6f4>)
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002bb0:	e2bc      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <extInt_Config+0x6fc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d106      	bne.n	8002bcc <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <extInt_Config+0x6f4>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <extInt_Config+0x6f4>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6113      	str	r3, [r2, #16]
					break;
 8002bca:	e2af      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <extInt_Config+0x700>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d106      	bne.n	8002be6 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002bd8:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <extInt_Config+0x6f4>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <extInt_Config+0x6f4>)
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	6113      	str	r3, [r2, #16]
					break;
 8002be4:	e2a2      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <extInt_Config+0x704>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d106      	bne.n	8002c00 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <extInt_Config+0x6f4>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <extInt_Config+0x6f4>)
 8002bf8:	f043 0303 	orr.w	r3, r3, #3
 8002bfc:	6113      	str	r3, [r2, #16]
					break;
 8002bfe:	e295      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <extInt_Config+0x708>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d106      	bne.n	8002c1a <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <extInt_Config+0x6f4>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <extInt_Config+0x6f4>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6113      	str	r3, [r2, #16]
					break;
 8002c18:	e288      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <extInt_Config+0x70c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d106      	bne.n	8002c34 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <extInt_Config+0x6f4>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <extInt_Config+0x6f4>)
 8002c2c:	f043 0307 	orr.w	r3, r3, #7
 8002c30:	6113      	str	r3, [r2, #16]
					break;
 8002c32:	e27b      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002c34:	bf00      	nop
					break;
 8002c36:	e279      	b.n	800312c <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <extInt_Config+0x6f4>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <extInt_Config+0x6f4>)
 8002c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c42:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <extInt_Config+0x6f8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d113      	bne.n	8002c78 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002c50:	4b02      	ldr	r3, [pc, #8]	; (8002c5c <extInt_Config+0x6f4>)
 8002c52:	4a02      	ldr	r2, [pc, #8]	; (8002c5c <extInt_Config+0x6f4>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002c58:	e268      	b.n	800312c <extInt_Config+0xbc4>
 8002c5a:	bf00      	nop
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a83      	ldr	r2, [pc, #524]	; (8002e8c <extInt_Config+0x924>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d106      	bne.n	8002c92 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002c84:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <extInt_Config+0x928>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4a81      	ldr	r2, [pc, #516]	; (8002e90 <extInt_Config+0x928>)
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6113      	str	r3, [r2, #16]
					break;
 8002c90:	e24c      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a7e      	ldr	r2, [pc, #504]	; (8002e94 <extInt_Config+0x92c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d106      	bne.n	8002cac <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002c9e:	4b7c      	ldr	r3, [pc, #496]	; (8002e90 <extInt_Config+0x928>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	4a7b      	ldr	r2, [pc, #492]	; (8002e90 <extInt_Config+0x928>)
 8002ca4:	f043 0320 	orr.w	r3, r3, #32
 8002ca8:	6113      	str	r3, [r2, #16]
					break;
 8002caa:	e23f      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a79      	ldr	r2, [pc, #484]	; (8002e98 <extInt_Config+0x930>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d106      	bne.n	8002cc6 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002cb8:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <extInt_Config+0x928>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4a74      	ldr	r2, [pc, #464]	; (8002e90 <extInt_Config+0x928>)
 8002cbe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002cc2:	6113      	str	r3, [r2, #16]
					break;
 8002cc4:	e232      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a73      	ldr	r2, [pc, #460]	; (8002e9c <extInt_Config+0x934>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d106      	bne.n	8002ce0 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002cd2:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <extInt_Config+0x928>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	4a6e      	ldr	r2, [pc, #440]	; (8002e90 <extInt_Config+0x928>)
 8002cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cdc:	6113      	str	r3, [r2, #16]
					break;
 8002cde:	e225      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <extInt_Config+0x938>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d106      	bne.n	8002cfa <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002cec:	4b68      	ldr	r3, [pc, #416]	; (8002e90 <extInt_Config+0x928>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	4a67      	ldr	r2, [pc, #412]	; (8002e90 <extInt_Config+0x928>)
 8002cf2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002cf6:	6113      	str	r3, [r2, #16]
					break;
 8002cf8:	e218      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002cfa:	bf00      	nop
					break;
 8002cfc:	e216      	b.n	800312c <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8002cfe:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <extInt_Config+0x928>)
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <extInt_Config+0x928>)
 8002d04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d08:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a64      	ldr	r2, [pc, #400]	; (8002ea4 <extInt_Config+0x93c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d104      	bne.n	8002d20 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002d16:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <extInt_Config+0x928>)
 8002d18:	4a5d      	ldr	r2, [pc, #372]	; (8002e90 <extInt_Config+0x928>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002d1e:	e205      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a59      	ldr	r2, [pc, #356]	; (8002e8c <extInt_Config+0x924>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d106      	bne.n	8002d3a <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <extInt_Config+0x928>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <extInt_Config+0x928>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6113      	str	r3, [r2, #16]
					break;
 8002d38:	e1f8      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <extInt_Config+0x92c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d106      	bne.n	8002d54 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <extInt_Config+0x928>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <extInt_Config+0x928>)
 8002d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d50:	6113      	str	r3, [r2, #16]
					break;
 8002d52:	e1eb      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4f      	ldr	r2, [pc, #316]	; (8002e98 <extInt_Config+0x930>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d106      	bne.n	8002d6e <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002d60:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <extInt_Config+0x928>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4a4a      	ldr	r2, [pc, #296]	; (8002e90 <extInt_Config+0x928>)
 8002d66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d6a:	6113      	str	r3, [r2, #16]
					break;
 8002d6c:	e1de      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a49      	ldr	r2, [pc, #292]	; (8002e9c <extInt_Config+0x934>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d106      	bne.n	8002d88 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8002d7a:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <extInt_Config+0x928>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	4a44      	ldr	r2, [pc, #272]	; (8002e90 <extInt_Config+0x928>)
 8002d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d84:	6113      	str	r3, [r2, #16]
					break;
 8002d86:	e1d1      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a44      	ldr	r2, [pc, #272]	; (8002ea0 <extInt_Config+0x938>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d106      	bne.n	8002da2 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002d94:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <extInt_Config+0x928>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	4a3d      	ldr	r2, [pc, #244]	; (8002e90 <extInt_Config+0x928>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6113      	str	r3, [r2, #16]
					break;
 8002da0:	e1c4      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002da2:	bf00      	nop
					break;
 8002da4:	e1c2      	b.n	800312c <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <extInt_Config+0x928>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	4a39      	ldr	r2, [pc, #228]	; (8002e90 <extInt_Config+0x928>)
 8002dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db0:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3a      	ldr	r2, [pc, #232]	; (8002ea4 <extInt_Config+0x93c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d104      	bne.n	8002dc8 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <extInt_Config+0x928>)
 8002dc0:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <extInt_Config+0x928>)
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8002dc6:	e1b1      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <extInt_Config+0x924>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d106      	bne.n	8002de2 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <extInt_Config+0x928>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <extInt_Config+0x928>)
 8002dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dde:	6113      	str	r3, [r2, #16]
					break;
 8002de0:	e1a4      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <extInt_Config+0x92c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d106      	bne.n	8002dfc <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <extInt_Config+0x928>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4a27      	ldr	r2, [pc, #156]	; (8002e90 <extInt_Config+0x928>)
 8002df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002df8:	6113      	str	r3, [r2, #16]
					break;
 8002dfa:	e197      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <extInt_Config+0x930>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d106      	bne.n	8002e16 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <extInt_Config+0x928>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <extInt_Config+0x928>)
 8002e0e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002e12:	6113      	str	r3, [r2, #16]
					break;
 8002e14:	e18a      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <extInt_Config+0x934>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d106      	bne.n	8002e30 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <extInt_Config+0x928>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <extInt_Config+0x928>)
 8002e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2c:	6113      	str	r3, [r2, #16]
					break;
 8002e2e:	e17d      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <extInt_Config+0x938>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d106      	bne.n	8002e4a <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <extInt_Config+0x928>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <extInt_Config+0x928>)
 8002e42:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002e46:	6113      	str	r3, [r2, #16]
					break;
 8002e48:	e170      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002e4a:	bf00      	nop
					break;
 8002e4c:	e16e      	b.n	800312c <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <extInt_Config+0x928>)
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <extInt_Config+0x928>)
 8002e54:	f023 030f 	bic.w	r3, r3, #15
 8002e58:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <extInt_Config+0x93c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d104      	bne.n	8002e70 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <extInt_Config+0x928>)
 8002e68:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <extInt_Config+0x928>)
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002e6e:	e15d      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <extInt_Config+0x924>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d115      	bne.n	8002ea8 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <extInt_Config+0x928>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	4a03      	ldr	r2, [pc, #12]	; (8002e90 <extInt_Config+0x928>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6153      	str	r3, [r2, #20]
					break;
 8002e88:	e150      	b.n	800312c <extInt_Config+0xbc4>
 8002e8a:	bf00      	nop
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020800 	.word	0x40020800
 8002e98:	40020c00 	.word	0x40020c00
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40021c00 	.word	0x40021c00
 8002ea4:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a89      	ldr	r2, [pc, #548]	; (80030d4 <extInt_Config+0xb6c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d106      	bne.n	8002ec2 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002eb4:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <extInt_Config+0xb70>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	4a87      	ldr	r2, [pc, #540]	; (80030d8 <extInt_Config+0xb70>)
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	6153      	str	r3, [r2, #20]
					break;
 8002ec0:	e134      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a84      	ldr	r2, [pc, #528]	; (80030dc <extInt_Config+0xb74>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d106      	bne.n	8002edc <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002ece:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <extInt_Config+0xb70>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	; (80030d8 <extInt_Config+0xb70>)
 8002ed4:	f043 0303 	orr.w	r3, r3, #3
 8002ed8:	6153      	str	r3, [r2, #20]
					break;
 8002eda:	e127      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7f      	ldr	r2, [pc, #508]	; (80030e0 <extInt_Config+0xb78>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d106      	bne.n	8002ef6 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <extInt_Config+0xb70>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	4a7a      	ldr	r2, [pc, #488]	; (80030d8 <extInt_Config+0xb70>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6153      	str	r3, [r2, #20]
					break;
 8002ef4:	e11a      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a79      	ldr	r2, [pc, #484]	; (80030e4 <extInt_Config+0xb7c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d106      	bne.n	8002f10 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002f02:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <extInt_Config+0xb70>)
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4a74      	ldr	r2, [pc, #464]	; (80030d8 <extInt_Config+0xb70>)
 8002f08:	f043 0307 	orr.w	r3, r3, #7
 8002f0c:	6153      	str	r3, [r2, #20]
					break;
 8002f0e:	e10d      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 8002f10:	bf00      	nop
					break;
 8002f12:	e10b      	b.n	800312c <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8002f14:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <extInt_Config+0xb70>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4a6f      	ldr	r2, [pc, #444]	; (80030d8 <extInt_Config+0xb70>)
 8002f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1e:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a70      	ldr	r2, [pc, #448]	; (80030e8 <extInt_Config+0xb80>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d104      	bne.n	8002f36 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <extInt_Config+0xb70>)
 8002f2e:	4a6a      	ldr	r2, [pc, #424]	; (80030d8 <extInt_Config+0xb70>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	6153      	str	r3, [r2, #20]
 8002f34:	e041      	b.n	8002fba <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6b      	ldr	r2, [pc, #428]	; (80030ec <extInt_Config+0xb84>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d106      	bne.n	8002f50 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002f42:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <extInt_Config+0xb70>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4a64      	ldr	r2, [pc, #400]	; (80030d8 <extInt_Config+0xb70>)
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	6153      	str	r3, [r2, #20]
 8002f4e:	e034      	b.n	8002fba <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5f      	ldr	r2, [pc, #380]	; (80030d4 <extInt_Config+0xb6c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d106      	bne.n	8002f6a <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002f5c:	4b5e      	ldr	r3, [pc, #376]	; (80030d8 <extInt_Config+0xb70>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <extInt_Config+0xb70>)
 8002f62:	f043 0320 	orr.w	r3, r3, #32
 8002f66:	6153      	str	r3, [r2, #20]
 8002f68:	e027      	b.n	8002fba <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <extInt_Config+0xb74>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d106      	bne.n	8002f84 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002f76:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <extInt_Config+0xb70>)
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4a57      	ldr	r2, [pc, #348]	; (80030d8 <extInt_Config+0xb70>)
 8002f7c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002f80:	6153      	str	r3, [r2, #20]
 8002f82:	e01a      	b.n	8002fba <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a55      	ldr	r2, [pc, #340]	; (80030e0 <extInt_Config+0xb78>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d106      	bne.n	8002f9e <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002f90:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <extInt_Config+0xb70>)
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	4a50      	ldr	r2, [pc, #320]	; (80030d8 <extInt_Config+0xb70>)
 8002f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9a:	6153      	str	r3, [r2, #20]
 8002f9c:	e00d      	b.n	8002fba <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a4f      	ldr	r2, [pc, #316]	; (80030e4 <extInt_Config+0xb7c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d106      	bne.n	8002fb8 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002faa:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <extInt_Config+0xb70>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	4a4a      	ldr	r2, [pc, #296]	; (80030d8 <extInt_Config+0xb70>)
 8002fb0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002fb4:	6153      	str	r3, [r2, #20]
 8002fb6:	e000      	b.n	8002fba <extInt_Config+0xa52>

					} else {
						__NOP();
 8002fb8:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <extInt_Config+0xb70>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	4a46      	ldr	r2, [pc, #280]	; (80030d8 <extInt_Config+0xb70>)
 8002fc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fc4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a46      	ldr	r2, [pc, #280]	; (80030e8 <extInt_Config+0xb80>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d104      	bne.n	8002fdc <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <extInt_Config+0xb70>)
 8002fd4:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <extInt_Config+0xb70>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8002fda:	e0a7      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a42      	ldr	r2, [pc, #264]	; (80030ec <extInt_Config+0xb84>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d106      	bne.n	8002ff6 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <extInt_Config+0xb70>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	4a3a      	ldr	r2, [pc, #232]	; (80030d8 <extInt_Config+0xb70>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6153      	str	r3, [r2, #20]
					break;
 8002ff4:	e09a      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a35      	ldr	r2, [pc, #212]	; (80030d4 <extInt_Config+0xb6c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d106      	bne.n	8003010 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003002:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <extInt_Config+0xb70>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <extInt_Config+0xb70>)
 8003008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800300c:	6153      	str	r3, [r2, #20]
					break;
 800300e:	e08d      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a31      	ldr	r2, [pc, #196]	; (80030dc <extInt_Config+0xb74>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d106      	bne.n	800302a <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800301c:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <extInt_Config+0xb70>)
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <extInt_Config+0xb70>)
 8003022:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003026:	6153      	str	r3, [r2, #20]
					break;
 8003028:	e080      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <extInt_Config+0xb78>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d106      	bne.n	8003044 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <extInt_Config+0xb70>)
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <extInt_Config+0xb70>)
 800303c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003040:	6153      	str	r3, [r2, #20]
					break;
 8003042:	e073      	b.n	800312c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <extInt_Config+0xb7c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d106      	bne.n	800305e <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <extInt_Config+0xb70>)
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4a20      	ldr	r2, [pc, #128]	; (80030d8 <extInt_Config+0xb70>)
 8003056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800305a:	6153      	str	r3, [r2, #20]
					break;
 800305c:	e066      	b.n	800312c <extInt_Config+0xbc4>
						__NOP();
 800305e:	bf00      	nop
					break;
 8003060:	e064      	b.n	800312c <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <extInt_Config+0xb70>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <extInt_Config+0xb70>)
 8003068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800306c:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <extInt_Config+0xb80>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d104      	bne.n	8003084 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <extInt_Config+0xb70>)
 800307c:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <extInt_Config+0xb70>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8003082:	e053      	b.n	800312c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a18      	ldr	r2, [pc, #96]	; (80030ec <extInt_Config+0xb84>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d106      	bne.n	800309e <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <extInt_Config+0xb70>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <extInt_Config+0xb70>)
 8003096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800309a:	6153      	str	r3, [r2, #20]
						break;
 800309c:	e046      	b.n	800312c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <extInt_Config+0xb6c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d106      	bne.n	80030b8 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <extInt_Config+0xb70>)
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <extInt_Config+0xb70>)
 80030b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030b4:	6153      	str	r3, [r2, #20]
						break;
 80030b6:	e039      	b.n	800312c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <extInt_Config+0xb74>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d115      	bne.n	80030f0 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <extInt_Config+0xb70>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	4a03      	ldr	r2, [pc, #12]	; (80030d8 <extInt_Config+0xb70>)
 80030ca:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80030ce:	6153      	str	r3, [r2, #20]
						break;
 80030d0:	e02c      	b.n	800312c <extInt_Config+0xbc4>
 80030d2:	bf00      	nop
 80030d4:	40020800 	.word	0x40020800
 80030d8:	40013800 	.word	0x40013800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40021c00 	.word	0x40021c00
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6c      	ldr	r2, [pc, #432]	; (80032a8 <extInt_Config+0xd40>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d106      	bne.n	800310a <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80030fc:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <extInt_Config+0xd44>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <extInt_Config+0xd44>)
 8003102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003106:	6153      	str	r3, [r2, #20]
						break;
 8003108:	e010      	b.n	800312c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a67      	ldr	r2, [pc, #412]	; (80032b0 <extInt_Config+0xd48>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d106      	bne.n	8003124 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <extInt_Config+0xd44>)
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4a64      	ldr	r2, [pc, #400]	; (80032ac <extInt_Config+0xd44>)
 800311c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003120:	6153      	str	r3, [r2, #20]
						break;
 8003122:	e003      	b.n	800312c <extInt_Config+0xbc4>
							__NOP();
 8003124:	bf00      	nop
						break;
 8003126:	e001      	b.n	800312c <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8003128:	bf00      	nop
						break;
 800312a:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	791b      	ldrb	r3, [r3, #4]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d020      	beq.n	8003176 <extInt_Config+0xc0e>
 8003134:	2b02      	cmp	r3, #2
 8003136:	dc37      	bgt.n	80031a8 <extInt_Config+0xc40>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <extInt_Config+0xbda>
 800313c:	2b01      	cmp	r3, #1
 800313e:	d00d      	beq.n	800315c <extInt_Config+0xbf4>
 8003140:	e032      	b.n	80031a8 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003142:	4b5c      	ldr	r3, [pc, #368]	; (80032b4 <extInt_Config+0xd4c>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	7912      	ldrb	r2, [r2, #4]
 800314c:	4611      	mov	r1, r2
 800314e:	2201      	movs	r2, #1
 8003150:	408a      	lsls	r2, r1
 8003152:	4611      	mov	r1, r2
 8003154:	4a57      	ldr	r2, [pc, #348]	; (80032b4 <extInt_Config+0xd4c>)
 8003156:	430b      	orrs	r3, r1
 8003158:	60d3      	str	r3, [r2, #12]

		break;
 800315a:	e027      	b.n	80031ac <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <extInt_Config+0xd4c>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	7912      	ldrb	r2, [r2, #4]
 8003166:	4611      	mov	r1, r2
 8003168:	2201      	movs	r2, #1
 800316a:	408a      	lsls	r2, r1
 800316c:	4611      	mov	r1, r2
 800316e:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <extInt_Config+0xd4c>)
 8003170:	430b      	orrs	r3, r1
 8003172:	6093      	str	r3, [r2, #8]

		break;
 8003174:	e01a      	b.n	80031ac <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003176:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <extInt_Config+0xd4c>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	7912      	ldrb	r2, [r2, #4]
 8003180:	4611      	mov	r1, r2
 8003182:	2201      	movs	r2, #1
 8003184:	408a      	lsls	r2, r1
 8003186:	4611      	mov	r1, r2
 8003188:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <extInt_Config+0xd4c>)
 800318a:	430b      	orrs	r3, r1
 800318c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800318e:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <extInt_Config+0xd4c>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	7912      	ldrb	r2, [r2, #4]
 8003198:	4611      	mov	r1, r2
 800319a:	2201      	movs	r2, #1
 800319c:	408a      	lsls	r2, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	4a44      	ldr	r2, [pc, #272]	; (80032b4 <extInt_Config+0xd4c>)
 80031a2:	430b      	orrs	r3, r1
 80031a4:	6093      	str	r3, [r2, #8]

		break;
 80031a6:	e001      	b.n	80031ac <extInt_Config+0xc44>

	}default :{

		__NOP();
 80031a8:	bf00      	nop
		break;
 80031aa:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80031ac:	b672      	cpsid	i
}
 80031ae:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80031b0:	4b40      	ldr	r3, [pc, #256]	; (80032b4 <extInt_Config+0xd4c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	7912      	ldrb	r2, [r2, #4]
 80031ba:	4611      	mov	r1, r2
 80031bc:	2201      	movs	r2, #1
 80031be:	408a      	lsls	r2, r1
 80031c0:	4611      	mov	r1, r2
 80031c2:	4a3c      	ldr	r2, [pc, #240]	; (80032b4 <extInt_Config+0xd4c>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	791b      	ldrb	r3, [r3, #4]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	d862      	bhi.n	8003298 <extInt_Config+0xd30>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <extInt_Config+0xc70>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	08003219 	.word	0x08003219
 80031dc:	08003221 	.word	0x08003221
 80031e0:	08003229 	.word	0x08003229
 80031e4:	08003231 	.word	0x08003231
 80031e8:	08003239 	.word	0x08003239
 80031ec:	08003241 	.word	0x08003241
 80031f0:	08003249 	.word	0x08003249
 80031f4:	08003251 	.word	0x08003251
 80031f8:	08003259 	.word	0x08003259
 80031fc:	08003261 	.word	0x08003261
 8003200:	08003269 	.word	0x08003269
 8003204:	08003271 	.word	0x08003271
 8003208:	08003279 	.word	0x08003279
 800320c:	08003281 	.word	0x08003281
 8003210:	08003289 	.word	0x08003289
 8003214:	08003291 	.word	0x08003291
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8003218:	2006      	movs	r0, #6
 800321a:	f7ff f987 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800321e:	e03d      	b.n	800329c <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8003220:	2007      	movs	r0, #7
 8003222:	f7ff f983 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003226:	e039      	b.n	800329c <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8003228:	2008      	movs	r0, #8
 800322a:	f7ff f97f 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800322e:	e035      	b.n	800329c <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8003230:	2009      	movs	r0, #9
 8003232:	f7ff f97b 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003236:	e031      	b.n	800329c <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8003238:	200a      	movs	r0, #10
 800323a:	f7ff f977 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800323e:	e02d      	b.n	800329c <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003240:	2017      	movs	r0, #23
 8003242:	f7ff f973 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003246:	e029      	b.n	800329c <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003248:	2017      	movs	r0, #23
 800324a:	f7ff f96f 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800324e:	e025      	b.n	800329c <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003250:	2017      	movs	r0, #23
 8003252:	f7ff f96b 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003256:	e021      	b.n	800329c <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003258:	2017      	movs	r0, #23
 800325a:	f7ff f967 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800325e:	e01d      	b.n	800329c <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003260:	2017      	movs	r0, #23
 8003262:	f7ff f963 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003266:	e019      	b.n	800329c <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003268:	2028      	movs	r0, #40	; 0x28
 800326a:	f7ff f95f 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800326e:	e015      	b.n	800329c <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003270:	2028      	movs	r0, #40	; 0x28
 8003272:	f7ff f95b 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003276:	e011      	b.n	800329c <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003278:	2028      	movs	r0, #40	; 0x28
 800327a:	f7ff f957 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800327e:	e00d      	b.n	800329c <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003280:	2028      	movs	r0, #40	; 0x28
 8003282:	f7ff f953 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003286:	e009      	b.n	800329c <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003288:	2028      	movs	r0, #40	; 0x28
 800328a:	f7ff f94f 	bl	800252c <__NVIC_EnableIRQ>
			break;
 800328e:	e005      	b.n	800329c <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003290:	2028      	movs	r0, #40	; 0x28
 8003292:	f7ff f94b 	bl	800252c <__NVIC_EnableIRQ>
			break;
 8003296:	e001      	b.n	800329c <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8003298:	bf00      	nop
			break;
 800329a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800329c:	b662      	cpsie	i
}
 800329e:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40021c00 	.word	0x40021c00
 80032b4:	40013c00 	.word	0x40013c00

080032b8 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	__NOP();
 80032bc:	bf00      	nop
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
	__NOP();
 80032cc:	bf00      	nop
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
	__NOP();
 80032dc:	bf00      	nop
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
	__NOP();
 80032ec:	bf00      	nop
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	__NOP();
 80032fc:	bf00      	nop
}
 80032fe:	bf00      	nop
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
	__NOP();
 800330c:	bf00      	nop
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	__NOP();
 800331c:	bf00      	nop
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
	__NOP();
 800332c:	bf00      	nop
}
 800332e:	bf00      	nop
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
	__NOP();
 800333c:	bf00      	nop
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
	__NOP();
 800334c:	bf00      	nop
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
	__NOP();
 800335c:	bf00      	nop
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
	__NOP();
 800336c:	bf00      	nop
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	__NOP();
 800337c:	bf00      	nop
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
	__NOP();
 800338c:	bf00      	nop
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800339c:	4b07      	ldr	r3, [pc, #28]	; (80033bc <EXTI0_IRQHandler+0x24>)
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <EXTI0_IRQHandler+0x24>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4a03      	ldr	r2, [pc, #12]	; (80033bc <EXTI0_IRQHandler+0x24>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 80033b4:	f7ff ff80 	bl	80032b8 <callback_extInt0>
	}
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013c00 	.word	0x40013c00

080033c0 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <EXTI1_IRQHandler+0x24>)
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <EXTI1_IRQHandler+0x24>)
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <EXTI1_IRQHandler+0x24>)
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80033dc:	f7fe fbb2 	bl	8001b44 <callback_extInt1>
	}
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40013c00 	.word	0x40013c00

080033e8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <EXTI2_IRQHandler+0x24>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <EXTI2_IRQHandler+0x24>)
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	4a03      	ldr	r2, [pc, #12]	; (800340c <EXTI2_IRQHandler+0x24>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8003404:	f7ff ff60 	bl	80032c8 <callback_extInt2>
	}
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40013c00 	.word	0x40013c00

08003410 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <EXTI3_IRQHandler+0x24>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <EXTI3_IRQHandler+0x24>)
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4a03      	ldr	r2, [pc, #12]	; (8003434 <EXTI3_IRQHandler+0x24>)
 8003426:	f043 0308 	orr.w	r3, r3, #8
 800342a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800342c:	f7fe fb9a 	bl	8001b64 <callback_extInt3>
	}
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40013c00 	.word	0x40013c00

08003438 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <EXTI4_IRQHandler+0x24>)
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <EXTI4_IRQHandler+0x24>)
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	4a03      	ldr	r2, [pc, #12]	; (800345c <EXTI4_IRQHandler+0x24>)
 800344e:	f043 0310 	orr.w	r3, r3, #16
 8003452:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8003454:	f7ff ff40 	bl	80032d8 <callback_extInt4>
	}
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40013c00 	.word	0x40013c00

08003460 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8003464:	4b26      	ldr	r3, [pc, #152]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8003470:	4b23      	ldr	r3, [pc, #140]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 8003476:	f043 0320 	orr.w	r3, r3, #32
 800347a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800347c:	f7ff ff34 	bl	80032e8 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8003480:	e03c      	b.n	80034fc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 8003494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003498:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800349a:	f7ff ff2d 	bl	80032f8 <callback_extInt6>
}
 800349e:	e02d      	b.n	80034fc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4a13      	ldr	r2, [pc, #76]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b6:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 80034b8:	f7ff ff26 	bl	8003308 <callback_extInt7>
}
 80034bc:	e01e      	b.n	80034fc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80034d6:	f7ff ff1f 	bl	8003318 <callback_extInt8>
}
 80034da:	e00f      	b.n	80034fc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <EXTI9_5_IRQHandler+0xa0>)
 80034ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 80034f4:	f7ff ff18 	bl	8003328 <callback_extInt9>
}
 80034f8:	e000      	b.n	80034fc <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80034fa:	bf00      	nop
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40013c00 	.word	0x40013c00

08003504 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 800351a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8003520:	f7ff ff0a 	bl	8003338 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8003524:	e049      	b.n	80035ba <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800353c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800353e:	f7ff ff03 	bl	8003348 <callback_extInt11>
}
 8003542:	e03a      	b.n	80035ba <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003556:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800355a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800355c:	f7ff fefc 	bl	8003358 <callback_extInt12>
}
 8003560:	e02b      	b.n	80035ba <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003578:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800357a:	f7ff fef5 	bl	8003368 <callback_extInt13>
}
 800357e:	e01c      	b.n	80035ba <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 8003592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003596:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8003598:	f7ff feee 	bl	8003378 <callback_extInt14>
}
 800359c:	e00d      	b.n	80035ba <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <EXTI15_10_IRQHandler+0xbc>)
 80035b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b4:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 80035b6:	f7ff fee7 	bl	8003388 <callback_extInt15>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40013c00 	.word	0x40013c00

080035c4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a88      	ldr	r2, [pc, #544]	; (80037fc <GPIO_Config+0x238>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d106      	bne.n	80035ec <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80035de:	4b88      	ldr	r3, [pc, #544]	; (8003800 <GPIO_Config+0x23c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a87      	ldr	r2, [pc, #540]	; (8003800 <GPIO_Config+0x23c>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	e03a      	b.n	8003662 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a84      	ldr	r2, [pc, #528]	; (8003804 <GPIO_Config+0x240>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d106      	bne.n	8003604 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80035f6:	4b82      	ldr	r3, [pc, #520]	; (8003800 <GPIO_Config+0x23c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a81      	ldr	r2, [pc, #516]	; (8003800 <GPIO_Config+0x23c>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	e02e      	b.n	8003662 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7f      	ldr	r2, [pc, #508]	; (8003808 <GPIO_Config+0x244>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d106      	bne.n	800361c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800360e:	4b7c      	ldr	r3, [pc, #496]	; (8003800 <GPIO_Config+0x23c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a7b      	ldr	r2, [pc, #492]	; (8003800 <GPIO_Config+0x23c>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	e022      	b.n	8003662 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7a      	ldr	r2, [pc, #488]	; (800380c <GPIO_Config+0x248>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d106      	bne.n	8003634 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8003626:	4b76      	ldr	r3, [pc, #472]	; (8003800 <GPIO_Config+0x23c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a75      	ldr	r2, [pc, #468]	; (8003800 <GPIO_Config+0x23c>)
 800362c:	f043 0308 	orr.w	r3, r3, #8
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	e016      	b.n	8003662 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a75      	ldr	r2, [pc, #468]	; (8003810 <GPIO_Config+0x24c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d106      	bne.n	800364c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800363e:	4b70      	ldr	r3, [pc, #448]	; (8003800 <GPIO_Config+0x23c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a6f      	ldr	r2, [pc, #444]	; (8003800 <GPIO_Config+0x23c>)
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	e00a      	b.n	8003662 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a70      	ldr	r2, [pc, #448]	; (8003814 <GPIO_Config+0x250>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d105      	bne.n	8003662 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8003656:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <GPIO_Config+0x23c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a69      	ldr	r2, [pc, #420]	; (8003800 <GPIO_Config+0x23c>)
 800365c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	795b      	ldrb	r3, [r3, #5]
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	791b      	ldrb	r3, [r3, #4]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	791b      	ldrb	r3, [r3, #4]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2103      	movs	r1, #3
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	4619      	mov	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7a1b      	ldrb	r3, [r3, #8]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	791b      	ldrb	r3, [r3, #4]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	791b      	ldrb	r3, [r3, #4]
 80036bc:	4619      	mov	r1, r3
 80036be:	2301      	movs	r3, #1
 80036c0:	408b      	lsls	r3, r1
 80036c2:	43db      	mvns	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	400a      	ands	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	799b      	ldrb	r3, [r3, #6]
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	791b      	ldrb	r3, [r3, #4]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	791b      	ldrb	r3, [r3, #4]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2103      	movs	r1, #3
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	4619      	mov	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	400a      	ands	r2, r1
 800370c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	79db      	ldrb	r3, [r3, #7]
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	791b      	ldrb	r3, [r3, #4]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	791b      	ldrb	r3, [r3, #4]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2103      	movs	r1, #3
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	4619      	mov	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	400a      	ands	r2, r1
 800374c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68d9      	ldr	r1, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	430a      	orrs	r2, r1
 800375c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	795b      	ldrb	r3, [r3, #5]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d143      	bne.n	80037ee <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	791b      	ldrb	r3, [r3, #4]
 800376a:	2b07      	cmp	r3, #7
 800376c:	d81f      	bhi.n	80037ae <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	791b      	ldrb	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	210f      	movs	r1, #15
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	400a      	ands	r2, r1
 800378e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7a5b      	ldrb	r3, [r3, #9]
 800379a:	4619      	mov	r1, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 80037ac:	e01f      	b.n	80037ee <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	791b      	ldrb	r3, [r3, #4]
 80037b2:	3b08      	subs	r3, #8
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037be:	210f      	movs	r1, #15
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	4619      	mov	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	400a      	ands	r2, r1
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7a5b      	ldrb	r3, [r3, #9]
 80037dc:	4619      	mov	r1, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	4619      	mov	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40020000 	.word	0x40020000
 8003800:	40023800 	.word	0x40023800
 8003804:	40020400 	.word	0x40020400
 8003808:	40020800 	.word	0x40020800
 800380c:	40020c00 	.word	0x40020c00
 8003810:	40021000 	.word	0x40021000
 8003814:	40021c00 	.word	0x40021c00

08003818 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d10d      	bne.n	8003846 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	791b      	ldrb	r3, [r3, #4]
 8003834:	4619      	mov	r1, r3
 8003836:	2301      	movs	r3, #1
 8003838:	408b      	lsls	r3, r1
 800383a:	4619      	mov	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8003844:	e00d      	b.n	8003862 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	791b      	ldrb	r3, [r3, #4]
 8003850:	3310      	adds	r3, #16
 8003852:	2101      	movs	r1, #1
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	4619      	mov	r1, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	619a      	str	r2, [r3, #24]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	791b      	ldrb	r3, [r3, #4]
 800388a:	4619      	mov	r1, r3
 800388c:	2301      	movs	r3, #1
 800388e:	408b      	lsls	r3, r1
 8003890:	4619      	mov	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 800389a:	e00d      	b.n	80038b8 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	791b      	ldrb	r3, [r3, #4]
 80038a6:	3310      	adds	r3, #16
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	4619      	mov	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	619a      	str	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	791b      	ldrb	r3, [r3, #4]
 80038d4:	461a      	mov	r2, r3
 80038d6:	2301      	movs	r3, #1
 80038d8:	4093      	lsls	r3, r2
 80038da:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80038e4:	897b      	ldrh	r3, [r7, #10]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	791b      	ldrb	r3, [r3, #4]
 80038f0:	461a      	mov	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	40d3      	lsrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80038f8:	68fb      	ldr	r3, [r7, #12]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ffd8 	bl	80038c4 <GPIO_ReadPin>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf0c      	ite	eq
 800391e:	2301      	moveq	r3, #1
 8003920:	2300      	movne	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff76 	bl	8003818 <GPIO_WritePin>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <configMPUAccel>:
#include "MPUAccel.h"
#include "I2CDriver.h"
#include "GPIOxDriver.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fe3b 	bl	80035c4 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fe36 	bl	80035c4 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4618      	mov	r0, r3
 800395e:	f001 feb7 	bl	80056d0 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8003962:	e004      	b.n	800396e <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f94f 	bl	8003c08 <WHOIAM>
 800396a:	4603      	mov	r3, r0
 800396c:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f7      	beq.n	8003964 <configMPUAccel+0x30>
	}

	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8003974:	216b      	movs	r1, #107	; 0x6b
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8f1 	bl	8003b5e <readData>
 800397c:	4603      	mov	r3, r0
 800397e:	73bb      	strb	r3, [r7, #14]
	byte &=  ~byte;
 8003980:	2300      	movs	r3, #0
 8003982:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8003984:	7bbb      	ldrb	r3, [r7, #14]
 8003986:	461a      	mov	r2, r3
 8003988:	216b      	movs	r1, #107	; 0x6b
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f89c 	bl	8003ac8 <writeData>
	byte = readData(ptrMPUAccel, 0x6B);
 8003990:	216b      	movs	r1, #107	; 0x6b
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8e3 	bl	8003b5e <readData>
 8003998:	4603      	mov	r3, r0
 800399a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800399c:	211c      	movs	r1, #28
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8dd 	bl	8003b5e <readData>
 80039a4:	4603      	mov	r3, r0
 80039a6:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 80039a8:	7bbb      	ldrb	r3, [r7, #14]
 80039aa:	f023 0318 	bic.w	r3, r3, #24
 80039ae:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d833      	bhi.n	8003a20 <configMPUAccel+0xec>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <configMPUAccel+0x8c>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039df 	.word	0x080039df
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	08003a0b 	.word	0x08003a0b
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	461a      	mov	r2, r3
 80039d4:	211c      	movs	r1, #28
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f876 	bl	8003ac8 <writeData>

				break;
 80039dc:	e021      	b.n	8003a22 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80039de:	7bbb      	ldrb	r3, [r7, #14]
 80039e0:	f043 0308 	orr.w	r3, r3, #8
 80039e4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80039e6:	7bbb      	ldrb	r3, [r7, #14]
 80039e8:	461a      	mov	r2, r3
 80039ea:	211c      	movs	r1, #28
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f86b 	bl	8003ac8 <writeData>

				break;
 80039f2:	e016      	b.n	8003a22 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	f043 0310 	orr.w	r3, r3, #16
 80039fa:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	461a      	mov	r2, r3
 8003a00:	211c      	movs	r1, #28
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f860 	bl	8003ac8 <writeData>

				break;
 8003a08:	e00b      	b.n	8003a22 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 8003a0a:	7bbb      	ldrb	r3, [r7, #14]
 8003a0c:	f043 0318 	orr.w	r3, r3, #24
 8003a10:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	461a      	mov	r2, r3
 8003a16:	211c      	movs	r1, #28
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f855 	bl	8003ac8 <writeData>

				break;
 8003a1e:	e000      	b.n	8003a22 <configMPUAccel+0xee>
			}default:{
				break;
 8003a20:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8003a22:	211c      	movs	r1, #28
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f89a 	bl	8003b5e <readData>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8003a2e:	211b      	movs	r1, #27
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f894 	bl	8003b5e <readData>
 8003a36:	4603      	mov	r3, r0
 8003a38:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8003a3a:	7bbb      	ldrb	r3, [r7, #14]
 8003a3c:	f023 0318 	bic.w	r3, r3, #24
 8003a40:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	785b      	ldrb	r3, [r3, #1]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d832      	bhi.n	8003ab0 <configMPUAccel+0x17c>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <configMPUAccel+0x11c>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a6f 	.word	0x08003a6f
 8003a58:	08003a85 	.word	0x08003a85
 8003a5c:	08003a9b 	.word	0x08003a9b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8003a60:	7bbb      	ldrb	r3, [r7, #14]
 8003a62:	461a      	mov	r2, r3
 8003a64:	211b      	movs	r1, #27
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f82e 	bl	8003ac8 <writeData>

				break;
 8003a6c:	e021      	b.n	8003ab2 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8003a6e:	7bbb      	ldrb	r3, [r7, #14]
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003a76:	7bbb      	ldrb	r3, [r7, #14]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	211b      	movs	r1, #27
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f823 	bl	8003ac8 <writeData>

				break;
 8003a82:	e016      	b.n	8003ab2 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8003a84:	7bbb      	ldrb	r3, [r7, #14]
 8003a86:	f043 0310 	orr.w	r3, r3, #16
 8003a8a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	211b      	movs	r1, #27
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f818 	bl	8003ac8 <writeData>

				break;
 8003a98:	e00b      	b.n	8003ab2 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	f043 0318 	orr.w	r3, r3, #24
 8003aa0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	211b      	movs	r1, #27
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f80d 	bl	8003ac8 <writeData>

				break;
 8003aae:	e000      	b.n	8003ab2 <configMPUAccel+0x17e>
			}default:{
				break;
 8003ab0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 8003ab2:	211b      	movs	r1, #27
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f852 	bl	8003b5e <readData>
 8003aba:	4603      	mov	r3, r0
 8003abc:	73bb      	strb	r3, [r7, #14]


}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop

08003ac8 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 ff71 	bl	80059d8 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68d8      	ldr	r0, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	4619      	mov	r1, r3
 8003b04:	f001 ffbb 	bl	8005a7e <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 ffdc 	bl	8005ace <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003b16:	e000      	b.n	8003b1a <writeData+0x52>
		__NOP();
 8003b18:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f6      	bne.n	8003b18 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	78ba      	ldrb	r2, [r7, #2]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 ffe5 	bl	8005b02 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003b38:	e000      	b.n	8003b3c <writeData+0x74>
		__NOP();
 8003b3a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f6      	bne.n	8003b3a <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 ff2f 	bl	80059b4 <i2c_stopTransaction>



}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b80:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 ff26 	bl	80059d8 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68d8      	ldr	r0, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	791b      	ldrb	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f001 ff70 	bl	8005a7e <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 ff91 	bl	8005ace <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003bac:	e000      	b.n	8003bb0 <readData+0x52>
		__NOP();
 8003bae:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f6      	bne.n	8003bae <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 ff2c 	bl	8005a22 <i2c_reStartTransaction>

	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68d8      	ldr	r0, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	791b      	ldrb	r3, [r3, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f001 ff51 	bl	8005a7e <i2c_sendSlaveAddressRW>

	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 ff3a 	bl	8005a5a <i2c_sendNoAck>

	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fee2 	bl	80059b4 <i2c_stopTransaction>

	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 ff9e 	bl	8005b36 <i2c_readDataByte>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8003c18:	2175      	movs	r1, #117	; 0x75
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ff9f 	bl	8003b5e <readData>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003c2a:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]

}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8003c68:	2143      	movs	r1, #67	; 0x43
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff77 	bl	8003b5e <readData>
 8003c70:	4603      	mov	r3, r0
 8003c72:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8003c74:	2144      	movs	r1, #68	; 0x44
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ff71 	bl	8003b5e <readData>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8003c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	b21a      	sxth	r2, r3
 8003c88:	89bb      	ldrh	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	785b      	ldrb	r3, [r3, #1]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d846      	bhi.n	8003d24 <readGyro_X+0xdc>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <readGyro_X+0x54>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003ccb 	.word	0x08003ccb
 8003ca4:	08003ce9 	.word	0x08003ce9
 8003ca8:	08003d07 	.word	0x08003d07
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8003cac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fc4f 	bl	8000554 <__aeabi_i2d>
 8003cb6:	a325      	add	r3, pc, #148	; (adr r3, 8003d4c <readGyro_X+0x104>)
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f7fc fdde 	bl	800087c <__aeabi_ddiv>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003cc8:	e02d      	b.n	8003d26 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8003cca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fc40 	bl	8000554 <__aeabi_i2d>
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <readGyro_X+0xf8>)
 8003cda:	f7fc fdcf 	bl	800087c <__aeabi_ddiv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003ce6:	e01e      	b.n	8003d26 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8003ce8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fc31 	bl	8000554 <__aeabi_i2d>
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <readGyro_X+0xfc>)
 8003cf8:	f7fc fdc0 	bl	800087c <__aeabi_ddiv>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003d04:	e00f      	b.n	8003d26 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8003d06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc22 	bl	8000554 <__aeabi_i2d>
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <readGyro_X+0x100>)
 8003d16:	f7fc fdb1 	bl	800087c <__aeabi_ddiv>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003d22:	e000      	b.n	8003d26 <readGyro_X+0xde>
		}default:{
			break;
 8003d24:	bf00      	nop
		}

	}

	return GYROX_R;
 8003d26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d2a:	f7fc ff75 	bl	8000c18 <__aeabi_d2f>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	ee07 3a90 	vmov	s15, r3

}
 8003d34:	eeb0 0a67 	vmov.f32	s0, s15
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40508000 	.word	0x40508000
 8003d44:	40408000 	.word	0x40408000
 8003d48:	40300000 	.word	0x40300000
 8003d4c:	00000000 	.word	0x00000000
 8003d50:	40606000 	.word	0x40606000
 8003d54:	00000000 	.word	0x00000000

08003d58 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8003d78:	2145      	movs	r1, #69	; 0x45
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff feef 	bl	8003b5e <readData>
 8003d80:	4603      	mov	r3, r0
 8003d82:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8003d84:	2146      	movs	r1, #70	; 0x46
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fee9 	bl	8003b5e <readData>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8003d90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	b21a      	sxth	r2, r3
 8003d98:	89bb      	ldrh	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d846      	bhi.n	8003e34 <readGyro_Y+0xdc>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <readGyro_Y+0x54>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003e17 	.word	0x08003e17
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8003dbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc fbc7 	bl	8000554 <__aeabi_i2d>
 8003dc6:	a325      	add	r3, pc, #148	; (adr r3, 8003e5c <readGyro_Y+0x104>)
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	f7fc fd56 	bl	800087c <__aeabi_ddiv>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003dd8:	e02d      	b.n	8003e36 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8003dda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fbb8 	bl	8000554 <__aeabi_i2d>
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <readGyro_Y+0xf8>)
 8003dea:	f7fc fd47 	bl	800087c <__aeabi_ddiv>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003df6:	e01e      	b.n	8003e36 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8003df8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fba9 	bl	8000554 <__aeabi_i2d>
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <readGyro_Y+0xfc>)
 8003e08:	f7fc fd38 	bl	800087c <__aeabi_ddiv>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003e14:	e00f      	b.n	8003e36 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8003e16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fb9a 	bl	8000554 <__aeabi_i2d>
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <readGyro_Y+0x100>)
 8003e26:	f7fc fd29 	bl	800087c <__aeabi_ddiv>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003e32:	e000      	b.n	8003e36 <readGyro_Y+0xde>
		}default:{
			break;
 8003e34:	bf00      	nop
		}

	}

	return GYROY_R;
 8003e36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e3a:	f7fc feed 	bl	8000c18 <__aeabi_d2f>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	ee07 3a90 	vmov	s15, r3

}
 8003e44:	eeb0 0a67 	vmov.f32	s0, s15
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40508000 	.word	0x40508000
 8003e54:	40408000 	.word	0x40408000
 8003e58:	40300000 	.word	0x40300000
 8003e5c:	00000000 	.word	0x00000000
 8003e60:	40606000 	.word	0x40606000
 8003e64:	00000000 	.word	0x00000000

08003e68 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8003e88:	2147      	movs	r1, #71	; 0x47
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fe67 	bl	8003b5e <readData>
 8003e90:	4603      	mov	r3, r0
 8003e92:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8003e94:	2148      	movs	r1, #72	; 0x48
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fe61 	bl	8003b5e <readData>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8003ea0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	b21a      	sxth	r2, r3
 8003ea8:	89bb      	ldrh	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d846      	bhi.n	8003f44 <readGyro_Z+0xdc>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <readGyro_Z+0x54>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003eeb 	.word	0x08003eeb
 8003ec4:	08003f09 	.word	0x08003f09
 8003ec8:	08003f27 	.word	0x08003f27
		case GYRO_250 :{

			GYROZ_R =   GYROZ / (double) GYRO_250_SENS ;
 8003ecc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fb3f 	bl	8000554 <__aeabi_i2d>
 8003ed6:	a325      	add	r3, pc, #148	; (adr r3, 8003f6c <readGyro_Z+0x104>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc fcce 	bl	800087c <__aeabi_ddiv>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003ee8:	e02d      	b.n	8003f46 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8003eea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc fb30 	bl	8000554 <__aeabi_i2d>
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <readGyro_Z+0xf8>)
 8003efa:	f7fc fcbf 	bl	800087c <__aeabi_ddiv>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003f06:	e01e      	b.n	8003f46 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8003f08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fb21 	bl	8000554 <__aeabi_i2d>
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <readGyro_Z+0xfc>)
 8003f18:	f7fc fcb0 	bl	800087c <__aeabi_ddiv>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003f24:	e00f      	b.n	8003f46 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8003f26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc fb12 	bl	8000554 <__aeabi_i2d>
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <readGyro_Z+0x100>)
 8003f36:	f7fc fca1 	bl	800087c <__aeabi_ddiv>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8003f42:	e000      	b.n	8003f46 <readGyro_Z+0xde>
		}default:{
			break;
 8003f44:	bf00      	nop
		}

	}

	return GYROZ_R;
 8003f46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f4a:	f7fc fe65 	bl	8000c18 <__aeabi_d2f>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	ee07 3a90 	vmov	s15, r3

}
 8003f54:	eeb0 0a67 	vmov.f32	s0, s15
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40508000 	.word	0x40508000
 8003f64:	40408000 	.word	0x40408000
 8003f68:	40300000 	.word	0x40300000
 8003f6c:	00000000 	.word	0x00000000
 8003f70:	40606000 	.word	0x40606000

08003f74 <setConstants>:

#include "MotorsDriver.h"
#include "PwmDriver.h"


void setConstants(Motor_Handler_t *ptrMotorHandler, uint8_t motor , float k, float tau, float theta, uint16_t Ts){
 8003f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f78:	b08a      	sub	sp, #40	; 0x28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6178      	str	r0, [r7, #20]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f84:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f88:	ed87 1a01 	vstr	s2, [r7, #4]
 8003f8c:	74fb      	strb	r3, [r7, #19]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	823b      	strh	r3, [r7, #16]

	float kp   = 0;
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
	float taoi = 0;
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	623b      	str	r3, [r7, #32]
	float taod = 0;
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]

	kp   = (1.2*tau)/(k*theta);
 8003fa4:	68b8      	ldr	r0, [r7, #8]
 8003fa6:	f7fc fae7 	bl	8000578 <__aeabi_f2d>
 8003faa:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003fae:	4bc8      	ldr	r3, [pc, #800]	; (80042d0 <setConstants+0x35c>)
 8003fb0:	f7fc fb3a 	bl	8000628 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4614      	mov	r4, r2
 8003fba:	461d      	mov	r5, r3
 8003fbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc8:	ee17 0a90 	vmov	r0, s15
 8003fcc:	f7fc fad4 	bl	8000578 <__aeabi_f2d>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f7fc fc50 	bl	800087c <__aeabi_ddiv>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fe18 	bl	8000c18 <__aeabi_d2f>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
	taoi = 2*theta;
 8003fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ff0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ff4:	edc7 7a08 	vstr	s15, [r7, #32]
	taod = 0.5*theta;
 8003ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ffc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004004:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (motor) {
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d003      	beq.n	8004016 <setConstants+0xa2>
 800400e:	2b02      	cmp	r3, #2
 8004010:	f000 80ac 	beq.w	800416c <setConstants+0x1f8>
 8004014:	e155      	b.n	80042c2 <setConstants+0x34e>

		case 1:{

			ptrMotorHandler->configM1.q_M1_0 = kp*(1+Ts/(2.0*taoi)+taod/Ts);
 8004016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004018:	f7fc faae 	bl	8000578 <__aeabi_f2d>
 800401c:	4604      	mov	r4, r0
 800401e:	460d      	mov	r5, r1
 8004020:	8a3b      	ldrh	r3, [r7, #16]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fa96 	bl	8000554 <__aeabi_i2d>
 8004028:	4680      	mov	r8, r0
 800402a:	4689      	mov	r9, r1
 800402c:	6a38      	ldr	r0, [r7, #32]
 800402e:	f7fc faa3 	bl	8000578 <__aeabi_f2d>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	f7fc f941 	bl	80002bc <__adddf3>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4640      	mov	r0, r8
 8004040:	4649      	mov	r1, r9
 8004042:	f7fc fc1b 	bl	800087c <__aeabi_ddiv>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	4ba0      	ldr	r3, [pc, #640]	; (80042d4 <setConstants+0x360>)
 8004054:	f7fc f932 	bl	80002bc <__adddf3>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4690      	mov	r8, r2
 800405e:	4699      	mov	r9, r3
 8004060:	8a3b      	ldrh	r3, [r7, #16]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800406a:	ed97 7a07 	vldr	s14, [r7, #28]
 800406e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004072:	ee16 0a90 	vmov	r0, s13
 8004076:	f7fc fa7f 	bl	8000578 <__aeabi_f2d>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4640      	mov	r0, r8
 8004080:	4649      	mov	r1, r9
 8004082:	f7fc f91b 	bl	80002bc <__adddf3>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4620      	mov	r0, r4
 800408c:	4629      	mov	r1, r5
 800408e:	f7fc facb 	bl	8000628 <__aeabi_dmul>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	f7fc fdbd 	bl	8000c18 <__aeabi_d2f>
 800409e:	4602      	mov	r2, r0
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	609a      	str	r2, [r3, #8]
			ptrMotorHandler->configM1.q_M1_1 = -kp*(1-Ts/(2.0*taoi)+(2.0*taod)/Ts);
 80040a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040a8:	eef1 7a67 	vneg.f32	s15, s15
 80040ac:	ee17 3a90 	vmov	r3, s15
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc fa61 	bl	8000578 <__aeabi_f2d>
 80040b6:	4604      	mov	r4, r0
 80040b8:	460d      	mov	r5, r1
 80040ba:	8a3b      	ldrh	r3, [r7, #16]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fa49 	bl	8000554 <__aeabi_i2d>
 80040c2:	4680      	mov	r8, r0
 80040c4:	4689      	mov	r9, r1
 80040c6:	6a38      	ldr	r0, [r7, #32]
 80040c8:	f7fc fa56 	bl	8000578 <__aeabi_f2d>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	f7fc f8f4 	bl	80002bc <__adddf3>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	f7fc fbce 	bl	800087c <__aeabi_ddiv>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	497a      	ldr	r1, [pc, #488]	; (80042d4 <setConstants+0x360>)
 80040ea:	f7fc f8e5 	bl	80002b8 <__aeabi_dsub>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4690      	mov	r8, r2
 80040f4:	4699      	mov	r9, r3
 80040f6:	69f8      	ldr	r0, [r7, #28]
 80040f8:	f7fc fa3e 	bl	8000578 <__aeabi_f2d>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	f7fc f8dc 	bl	80002bc <__adddf3>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4692      	mov	sl, r2
 800410a:	469b      	mov	fp, r3
 800410c:	8a3b      	ldrh	r3, [r7, #16]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fc fa20 	bl	8000554 <__aeabi_i2d>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4650      	mov	r0, sl
 800411a:	4659      	mov	r1, fp
 800411c:	f7fc fbae 	bl	800087c <__aeabi_ddiv>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4640      	mov	r0, r8
 8004126:	4649      	mov	r1, r9
 8004128:	f7fc f8c8 	bl	80002bc <__adddf3>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	f7fc fa78 	bl	8000628 <__aeabi_dmul>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	f7fc fd6a 	bl	8000c18 <__aeabi_d2f>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	60da      	str	r2, [r3, #12]
			ptrMotorHandler->configM1.q_M1_2 = (kp*taod)/Ts;
 800414a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800414e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004152:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004156:	8a3b      	ldrh	r3, [r7, #16]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	edc3 7a04 	vstr	s15, [r3, #16]

			break;
 800416a:	e0ac      	b.n	80042c6 <setConstants+0x352>
		}case 2:{

			ptrMotorHandler->configM2.q_M2_0 = kp*(1+Ts/(2.0*taoi)+taod/Ts);
 800416c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416e:	f7fc fa03 	bl	8000578 <__aeabi_f2d>
 8004172:	4604      	mov	r4, r0
 8004174:	460d      	mov	r5, r1
 8004176:	8a3b      	ldrh	r3, [r7, #16]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc f9eb 	bl	8000554 <__aeabi_i2d>
 800417e:	4680      	mov	r8, r0
 8004180:	4689      	mov	r9, r1
 8004182:	6a38      	ldr	r0, [r7, #32]
 8004184:	f7fc f9f8 	bl	8000578 <__aeabi_f2d>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	f7fc f896 	bl	80002bc <__adddf3>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fc fb70 	bl	800087c <__aeabi_ddiv>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <setConstants+0x360>)
 80041aa:	f7fc f887 	bl	80002bc <__adddf3>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4690      	mov	r8, r2
 80041b4:	4699      	mov	r9, r3
 80041b6:	8a3b      	ldrh	r3, [r7, #16]
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80041c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041c8:	ee16 0a90 	vmov	r0, s13
 80041cc:	f7fc f9d4 	bl	8000578 <__aeabi_f2d>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4640      	mov	r0, r8
 80041d6:	4649      	mov	r1, r9
 80041d8:	f7fc f870 	bl	80002bc <__adddf3>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4620      	mov	r0, r4
 80041e2:	4629      	mov	r1, r5
 80041e4:	f7fc fa20 	bl	8000628 <__aeabi_dmul>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	f7fc fd12 	bl	8000c18 <__aeabi_d2f>
 80041f4:	4602      	mov	r2, r0
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c
			ptrMotorHandler->configM2.q_M2_1 = -kp*(1-Ts/(2.0*taoi)+(2.0*taod)/Ts);
 80041fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80041fe:	eef1 7a67 	vneg.f32	s15, s15
 8004202:	ee17 3a90 	vmov	r3, s15
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f9b6 	bl	8000578 <__aeabi_f2d>
 800420c:	4604      	mov	r4, r0
 800420e:	460d      	mov	r5, r1
 8004210:	8a3b      	ldrh	r3, [r7, #16]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f99e 	bl	8000554 <__aeabi_i2d>
 8004218:	4680      	mov	r8, r0
 800421a:	4689      	mov	r9, r1
 800421c:	6a38      	ldr	r0, [r7, #32]
 800421e:	f7fc f9ab 	bl	8000578 <__aeabi_f2d>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	f7fc f849 	bl	80002bc <__adddf3>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4640      	mov	r0, r8
 8004230:	4649      	mov	r1, r9
 8004232:	f7fc fb23 	bl	800087c <__aeabi_ddiv>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	f04f 0000 	mov.w	r0, #0
 800423e:	4925      	ldr	r1, [pc, #148]	; (80042d4 <setConstants+0x360>)
 8004240:	f7fc f83a 	bl	80002b8 <__aeabi_dsub>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4690      	mov	r8, r2
 800424a:	4699      	mov	r9, r3
 800424c:	69f8      	ldr	r0, [r7, #28]
 800424e:	f7fc f993 	bl	8000578 <__aeabi_f2d>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	f7fc f831 	bl	80002bc <__adddf3>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4692      	mov	sl, r2
 8004260:	469b      	mov	fp, r3
 8004262:	8a3b      	ldrh	r3, [r7, #16]
 8004264:	4618      	mov	r0, r3
 8004266:	f7fc f975 	bl	8000554 <__aeabi_i2d>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4650      	mov	r0, sl
 8004270:	4659      	mov	r1, fp
 8004272:	f7fc fb03 	bl	800087c <__aeabi_ddiv>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4640      	mov	r0, r8
 800427c:	4649      	mov	r1, r9
 800427e:	f7fc f81d 	bl	80002bc <__adddf3>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4620      	mov	r0, r4
 8004288:	4629      	mov	r1, r5
 800428a:	f7fc f9cd 	bl	8000628 <__aeabi_dmul>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	f7fc fcbf 	bl	8000c18 <__aeabi_d2f>
 800429a:	4602      	mov	r2, r0
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
			ptrMotorHandler->configM2.q_M2_2 = (kp*taod)/Ts;
 80042a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80042a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80042ac:	8a3b      	ldrh	r3, [r7, #16]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			break;
 80042c0:	e001      	b.n	80042c6 <setConstants+0x352>
		}default :{

			__NOP();
 80042c2:	bf00      	nop
			break;
 80042c4:	bf00      	nop
		}

	}

}
 80042c6:	bf00      	nop
 80042c8:	3728      	adds	r7, #40	; 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d0:	3ff33333 	.word	0x3ff33333
 80042d4:	3ff00000 	.word	0x3ff00000

080042d8 <PID>:

double PID(Motor_Handler_t *ptrMotorHandler, float measure , uint8_t motor, float setpoint ){
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80042e4:	460b      	mov	r3, r1
 80042e6:	edc7 0a00 	vstr	s1, [r7]
 80042ea:	71fb      	strb	r3, [r7, #7]

	float u,p_0,p_1,p_2;


	switch (motor) {
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d002      	beq.n	80042f8 <PID+0x20>
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d049      	beq.n	800438a <PID+0xb2>
 80042f6:	e091      	b.n	800441c <PID+0x144>

		case 1:{


			ptrMotorHandler->configM1.e_M1 = setpoint - measure;
 80042f8:	ed97 7a00 	vldr	s14, [r7]
 80042fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	edc3 7a05 	vstr	s15, [r3, #20]

			p_0 = ptrMotorHandler->configM1.q_M1_0 * ptrMotorHandler->configM1.e_M1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	edd3 7a05 	vldr	s15, [r3, #20]
 8004316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431a:	edc7 7a06 	vstr	s15, [r7, #24]
			p_1 = ptrMotorHandler->configM1.q_M1_1 * ptrMotorHandler->configM1.e_M1_1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	ed93 7a03 	vldr	s14, [r3, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	edd3 7a06 	vldr	s15, [r3, #24]
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a05 	vstr	s15, [r7, #20]
			p_2 = ptrMotorHandler->configM1.q_M1_2 * ptrMotorHandler->configM1.e_M1_2;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	ed93 7a04 	vldr	s14, [r3, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	edd3 7a07 	vldr	s15, [r3, #28]
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a04 	vstr	s15, [r7, #16]

			ptrMotorHandler->configM1.u_M1 = ptrMotorHandler->configM1.u_M1_1 + p_0 + p_1 + p_2;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	ed93 7a01 	vldr	s14, [r3, #4]
 800434c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004354:	edd7 7a05 	vldr	s15, [r7, #20]
 8004358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800435c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	edc3 7a00 	vstr	s15, [r3]
			u = ptrMotorHandler->configM1.u_M1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61fb      	str	r3, [r7, #28]

			// Actualizamos los datos

			ptrMotorHandler->configM1.e_M1_1 = ptrMotorHandler->configM1.e_M1;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	619a      	str	r2, [r3, #24]
			ptrMotorHandler->configM1.e_M1_1 = ptrMotorHandler->configM1.e_M1_2;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	619a      	str	r2, [r3, #24]
			ptrMotorHandler->configM1.u_M1_1 = ptrMotorHandler->configM1.u_M1;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]


			break;
 8004388:	e04a      	b.n	8004420 <PID+0x148>
		}case 2:{

			ptrMotorHandler->configM2.e_M2 = setpoint - measure;
 800438a:	ed97 7a00 	vldr	s14, [r7]
 800438e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			p_0 = ptrMotorHandler->configM2.q_M2_0 * ptrMotorHandler->configM2.e_M2;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80043a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ac:	edc7 7a06 	vstr	s15, [r7, #24]
			p_1 = ptrMotorHandler->configM2.q_M2_1 * ptrMotorHandler->configM2.e_M2_1;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c0:	edc7 7a05 	vstr	s15, [r7, #20]
			p_2 = ptrMotorHandler->configM2.q_M2_2 * ptrMotorHandler->configM2.e_M2_2;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80043d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d4:	edc7 7a04 	vstr	s15, [r7, #16]

			ptrMotorHandler->configM2.u_M2 = ptrMotorHandler->configM2.u_M2_1 + p_0 + p_1 + p_2;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80043de:	edd7 7a06 	vldr	s15, [r7, #24]
 80043e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80043f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			u = ptrMotorHandler->configM2.u_M2;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	61fb      	str	r3, [r7, #28]

			// Actualizamos los datos

			ptrMotorHandler->configM2.e_M2_1 = ptrMotorHandler->configM2.e_M2;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c
			ptrMotorHandler->configM2.e_M2_1 = ptrMotorHandler->configM2.e_M2_2;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	63da      	str	r2, [r3, #60]	; 0x3c
			ptrMotorHandler->configM2.u_M2_1 = ptrMotorHandler->configM2.u_M2;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	629a      	str	r2, [r3, #40]	; 0x28


			break;
 800441a:	e001      	b.n	8004420 <PID+0x148>
		}default :{

			__NOP();
 800441c:	bf00      	nop
			break;
 800441e:	bf00      	nop
		}

	}

	return u;
 8004420:	69f8      	ldr	r0, [r7, #28]
 8004422:	f7fc f8a9 	bl	8000578 <__aeabi_f2d>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	ec43 2b17 	vmov	d7, r2, r3

}
 800442e:	eeb0 0a47 	vmov.f32	s0, s14
 8004432:	eef0 0a67 	vmov.f32	s1, s15
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <map>:

double map(double x, double in_min, double in_max, double out_min, double out_max){
 800443c:	b580      	push	{r7, lr}
 800443e:	b092      	sub	sp, #72	; 0x48
 8004440:	af00      	add	r7, sp, #0
 8004442:	ed87 0b08 	vstr	d0, [r7, #32]
 8004446:	ed87 1b06 	vstr	d1, [r7, #24]
 800444a:	ed87 2b04 	vstr	d2, [r7, #16]
 800444e:	ed87 3b02 	vstr	d3, [r7, #8]
 8004452:	ed87 4b00 	vstr	d4, [r7]

	double primera = (x - in_min);
 8004456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800445a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800445e:	f7fb ff2b 	bl	80002b8 <__aeabi_dsub>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double segundo = (out_max - out_min);
 800446a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800446e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004472:	f7fb ff21 	bl	80002b8 <__aeabi_dsub>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double tercero = (in_max - in_min);
 800447e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004486:	f7fb ff17 	bl	80002b8 <__aeabi_dsub>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double result = (primera * segundo / tercero ) + out_min;
 8004492:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004496:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800449a:	f7fc f8c5 	bl	8000628 <__aeabi_dmul>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044aa:	f7fc f9e7 	bl	800087c <__aeabi_ddiv>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044b6:	f7fb ff01 	bl	80002bc <__adddf3>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return  result;
 80044c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80044ca:	eeb0 0a47 	vmov.f32	s0, s14
 80044ce:	eef0 0a67 	vmov.f32	s1, s15
 80044d2:	3748      	adds	r7, #72	; 0x48
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <pwm_Config>:
#include "PwmDriver.h"

uint16_t periodo = 0;

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a68      	ldr	r2, [pc, #416]	; (8004688 <pwm_Config+0x1b0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d106      	bne.n	80044f8 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80044ea:	4b68      	ldr	r3, [pc, #416]	; (800468c <pwm_Config+0x1b4>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	4a67      	ldr	r2, [pc, #412]	; (800468c <pwm_Config+0x1b4>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6453      	str	r3, [r2, #68]	; 0x44
 80044f6:	e030      	b.n	800455a <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004500:	d106      	bne.n	8004510 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004502:	4b62      	ldr	r3, [pc, #392]	; (800468c <pwm_Config+0x1b4>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	4a61      	ldr	r2, [pc, #388]	; (800468c <pwm_Config+0x1b4>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6413      	str	r3, [r2, #64]	; 0x40
 800450e:	e024      	b.n	800455a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a5e      	ldr	r2, [pc, #376]	; (8004690 <pwm_Config+0x1b8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d106      	bne.n	8004528 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800451a:	4b5c      	ldr	r3, [pc, #368]	; (800468c <pwm_Config+0x1b4>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a5b      	ldr	r2, [pc, #364]	; (800468c <pwm_Config+0x1b4>)
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	e018      	b.n	800455a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a59      	ldr	r2, [pc, #356]	; (8004694 <pwm_Config+0x1bc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d106      	bne.n	8004540 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004532:	4b56      	ldr	r3, [pc, #344]	; (800468c <pwm_Config+0x1b4>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a55      	ldr	r2, [pc, #340]	; (800468c <pwm_Config+0x1b4>)
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	e00c      	b.n	800455a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a54      	ldr	r2, [pc, #336]	; (8004698 <pwm_Config+0x1c0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d106      	bne.n	8004558 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800454a:	4b50      	ldr	r3, [pc, #320]	; (800468c <pwm_Config+0x1b4>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	4a4f      	ldr	r2, [pc, #316]	; (800468c <pwm_Config+0x1b4>)
 8004550:	f043 0308 	orr.w	r3, r3, #8
 8004554:	6413      	str	r3, [r2, #64]	; 0x40
 8004556:	e000      	b.n	800455a <pwm_Config+0x82>
	}
	else{
		__NOP();
 8004558:	bf00      	nop



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	7d5b      	ldrb	r3, [r3, #21]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <pwm_Config+0x98>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8ec 	bl	8004740 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f95b 	bl	8004824 <setDuttyCycle>
 800456e:	e005      	b.n	800457c <pwm_Config+0xa4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8e5 	bl	8004740 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa04 	bl	8004984 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0210 	bic.w	r2, r2, #16
 800458a:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2200      	movs	r2, #0
 8004592:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	791b      	ldrb	r3, [r3, #4]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d86f      	bhi.n	800467c <pwm_Config+0x1a4>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <pwm_Config+0xcc>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	08004619 	.word	0x08004619
 80045b0:	0800464b 	.word	0x0800464b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0203 	bic.w	r2, r2, #3
 80045c2:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80045d2:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	619a      	str	r2, [r3, #24]


		break;
 80045e4:	e04b      	b.n	800467e <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045f4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004604:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004614:	619a      	str	r2, [r3, #24]

		break;
 8004616:	e032      	b.n	800467e <pwm_Config+0x1a6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0203 	bic.w	r2, r2, #3
 8004626:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004636:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0208 	orr.w	r2, r2, #8
 8004646:	61da      	str	r2, [r3, #28]

		break;
 8004648:	e019      	b.n	800467e <pwm_Config+0x1a6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004658:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004668:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004678:	61da      	str	r2, [r3, #28]

		break;
 800467a:	e000      	b.n	800467e <pwm_Config+0x1a6>
	}

	default:{
		break;
 800467c:	bf00      	nop
	}// fin del switch-case




}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000
 800468c:	40023800 	.word	0x40023800
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00

0800469c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d82f      	bhi.n	8004730 <enableOutput+0x70>
 80046d0:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <enableOutput+0x18>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046fb 	.word	0x080046fb
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	0800471f 	.word	0x0800471f
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	621a      	str	r2, [r3, #32]

		break;
 80046f8:	e01b      	b.n	8004732 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0210 	orr.w	r2, r2, #16
 8004708:	621a      	str	r2, [r3, #32]

		break;
 800470a:	e012      	b.n	8004732 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a1a      	ldr	r2, [r3, #32]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471a:	621a      	str	r2, [r3, #32]

		break;
 800471c:	e009      	b.n	8004732 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800472c:	621a      	str	r2, [r3, #32]

		break;
 800472e:	e000      	b.n	8004732 <enableOutput+0x72>
	}

	default: {
		break;
 8004730:	bf00      	nop
	}
	}

	return SET;
 8004732:	2301      	movs	r3, #1
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6892      	ldr	r2, [r2, #8]
 8004754:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if  ((speed == PWM_SPEED_16MHz_1us ) || (speed == PWM_SPEED_100MHz_1us)) {
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b10      	cmp	r3, #16
 8004760:	d002      	beq.n	8004768 <setFrequency+0x28>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b64      	cmp	r3, #100	; 0x64
 8004766:	d111      	bne.n	800478c <setFrequency+0x4c>

		periodo = ptrPwmHandler->config.periodo * 1000  ;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	899b      	ldrh	r3, [r3, #12]
 800476c:	461a      	mov	r2, r3
 800476e:	0152      	lsls	r2, r2, #5
 8004770:	1ad2      	subs	r2, r2, r3
 8004772:	0092      	lsls	r2, r2, #2
 8004774:	4413      	add	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	b29a      	uxth	r2, r3
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <setFrequency+0xe0>)
 800477c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800477e:	4b28      	ldr	r3, [pc, #160]	; (8004820 <setFrequency+0xe0>)
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	1e5a      	subs	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c
 800478a:	e043      	b.n	8004814 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_10us ) || (speed == PWM_SPEED_100MHz_10us)){
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2ba0      	cmp	r3, #160	; 0xa0
 8004790:	d003      	beq.n	800479a <setFrequency+0x5a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004798:	d114      	bne.n	80047c4 <setFrequency+0x84>

		periodo = ptrPwmHandler->config.periodo * 100  ;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	899b      	ldrh	r3, [r3, #12]
 800479e:	461a      	mov	r2, r3
 80047a0:	0092      	lsls	r2, r2, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	0091      	lsls	r1, r2, #2
 80047a8:	461a      	mov	r2, r3
 80047aa:	460b      	mov	r3, r1
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <setFrequency+0xe0>)
 80047b4:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <setFrequency+0xe0>)
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	1e5a      	subs	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80047c2:	e027      	b.n	8004814 <setFrequency+0xd4>

	}else if ((speed == PWM_SPEED_16MHz_100us ) || (speed == PWM_SPEED_100MHz_100us)){
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047ca:	d004      	beq.n	80047d6 <setFrequency+0x96>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10f      	bne.n	80047f6 <setFrequency+0xb6>

		periodo = ptrPwmHandler->config.periodo * 10  ;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	899b      	ldrh	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	4413      	add	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <setFrequency+0xe0>)
 80047e6:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80047e8:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <setFrequency+0xe0>)
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80047f4:	e00e      	b.n	8004814 <setFrequency+0xd4>


	}else if ((speed == PWM_SPEED_16MHz_1ms )){
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80047fc:	d10a      	bne.n	8004814 <setFrequency+0xd4>

		periodo = ptrPwmHandler->config.periodo   ;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	899a      	ldrh	r2, [r3, #12]
 8004802:	4b07      	ldr	r3, [pc, #28]	; (8004820 <setFrequency+0xe0>)
 8004804:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <setFrequency+0xe0>)
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	1e5a      	subs	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	62da      	str	r2, [r3, #44]	; 0x2c

	}

}
 8004812:	e7ff      	b.n	8004814 <setFrequency+0xd4>
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000598 	.word	0x20000598

08004824 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b08b      	sub	sp, #44	; 0x2c
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	f200 809f 	bhi.w	8004974 <setDuttyCycle+0x150>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <setDuttyCycle+0x18>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	0800484d 	.word	0x0800484d
 8004840:	08004897 	.word	0x08004897
 8004844:	080048e1 	.word	0x080048e1
 8004848:	0800492b 	.word	0x0800492b
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	899b      	ldrh	r3, [r3, #12]
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800485e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004862:	ee17 0a90 	vmov	r0, s15
 8004866:	f7fb fe87 	bl	8000578 <__aeabi_f2d>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <setDuttyCycle+0x15c>)
 8004878:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800487c:	f7fb fffe 	bl	800087c <__aeabi_ddiv>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681c      	ldr	r4, [r3, #0]
 800488c:	f7fc f9a4 	bl	8000bd8 <__aeabi_d2uiz>
 8004890:	4603      	mov	r3, r0
 8004892:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8004894:	e06f      	b.n	8004976 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	ed93 7a04 	vldr	s14, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	899b      	ldrh	r3, [r3, #12]
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	ee17 0a90 	vmov	r0, s15
 80048b0:	f7fb fe62 	bl	8000578 <__aeabi_f2d>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <setDuttyCycle+0x15c>)
 80048c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048c6:	f7fb ffd9 	bl	800087c <__aeabi_ddiv>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681c      	ldr	r4, [r3, #0]
 80048d6:	f7fc f97f 	bl	8000bd8 <__aeabi_d2uiz>
 80048da:	4603      	mov	r3, r0
 80048dc:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80048de:	e04a      	b.n	8004976 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	899b      	ldrh	r3, [r3, #12]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f6:	ee17 0a90 	vmov	r0, s15
 80048fa:	f7fb fe3d 	bl	8000578 <__aeabi_f2d>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <setDuttyCycle+0x15c>)
 800490c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004910:	f7fb ffb4 	bl	800087c <__aeabi_ddiv>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681c      	ldr	r4, [r3, #0]
 8004920:	f7fc f95a 	bl	8000bd8 <__aeabi_d2uiz>
 8004924:	4603      	mov	r3, r0
 8004926:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8004928:	e025      	b.n	8004976 <setDuttyCycle+0x152>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	899b      	ldrh	r3, [r3, #12]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004940:	ee17 0a90 	vmov	r0, s15
 8004944:	f7fb fe18 	bl	8000578 <__aeabi_f2d>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <setDuttyCycle+0x15c>)
 8004956:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800495a:	f7fb ff8f 	bl	800087c <__aeabi_ddiv>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681c      	ldr	r4, [r3, #0]
 800496a:	f7fc f935 	bl	8000bd8 <__aeabi_d2uiz>
 800496e:	4603      	mov	r3, r0
 8004970:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8004972:	e000      	b.n	8004976 <setDuttyCycle+0x152>
	}

	default:{
		break;
 8004974:	bf00      	nop
	}

	}// fin del switch-case

}
 8004976:	bf00      	nop
 8004978:	372c      	adds	r7, #44	; 0x2c
 800497a:	46bd      	mov	sp, r7
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	bf00      	nop
 8004980:	40590000 	.word	0x40590000

08004984 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	b08b      	sub	sp, #44	; 0x2c
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	791b      	ldrb	r3, [r3, #4]
 8004990:	2b03      	cmp	r3, #3
 8004992:	f200 80af 	bhi.w	8004af4 <setDuttyCycleAfOpt+0x170>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <setDuttyCycleAfOpt+0x18>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049ff 	.word	0x080049ff
 80049a4:	08004a51 	.word	0x08004a51
 80049a8:	08004aa3 	.word	0x08004aa3
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80049b2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004b00 <setDuttyCycleAfOpt+0x17c>
 80049b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049ba:	4b52      	ldr	r3, [pc, #328]	; (8004b04 <setDuttyCycleAfOpt+0x180>)
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	ee17 0a90 	vmov	r0, s15
 80049ce:	f7fb fdd3 	bl	8000578 <__aeabi_f2d>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	4b4a      	ldr	r3, [pc, #296]	; (8004b08 <setDuttyCycleAfOpt+0x184>)
 80049e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049e4:	f7fb ff4a 	bl	800087c <__aeabi_ddiv>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681c      	ldr	r4, [r3, #0]
 80049f4:	f7fc f8f0 	bl	8000bd8 <__aeabi_d2uiz>
 80049f8:	4603      	mov	r3, r0
 80049fa:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80049fc:	e07b      	b.n	8004af6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a04:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004b00 <setDuttyCycleAfOpt+0x17c>
 8004a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <setDuttyCycleAfOpt+0x180>)
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1c:	ee17 0a90 	vmov	r0, s15
 8004a20:	f7fb fdaa 	bl	8000578 <__aeabi_f2d>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <setDuttyCycleAfOpt+0x184>)
 8004a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a36:	f7fb ff21 	bl	800087c <__aeabi_ddiv>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4619      	mov	r1, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681c      	ldr	r4, [r3, #0]
 8004a46:	f7fc f8c7 	bl	8000bd8 <__aeabi_d2uiz>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8004a4e:	e052      	b.n	8004af6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a56:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004b00 <setDuttyCycleAfOpt+0x17c>
 8004a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a5e:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <setDuttyCycleAfOpt+0x180>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6e:	ee17 0a90 	vmov	r0, s15
 8004a72:	f7fb fd81 	bl	8000578 <__aeabi_f2d>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <setDuttyCycleAfOpt+0x184>)
 8004a84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a88:	f7fb fef8 	bl	800087c <__aeabi_ddiv>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681c      	ldr	r4, [r3, #0]
 8004a98:	f7fc f89e 	bl	8000bd8 <__aeabi_d2uiz>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8004aa0:	e029      	b.n	8004af6 <setDuttyCycleAfOpt+0x172>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004aa8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004b00 <setDuttyCycleAfOpt+0x17c>
 8004aac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <setDuttyCycleAfOpt+0x180>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	ee07 3a90 	vmov	s15, r3
 8004ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac0:	ee17 0a90 	vmov	r0, s15
 8004ac4:	f7fb fd58 	bl	8000578 <__aeabi_f2d>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <setDuttyCycleAfOpt+0x184>)
 8004ad6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ada:	f7fb fecf 	bl	800087c <__aeabi_ddiv>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681c      	ldr	r4, [r3, #0]
 8004aea:	f7fc f875 	bl	8000bd8 <__aeabi_d2uiz>
 8004aee:	4603      	mov	r3, r0
 8004af0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8004af2:	e000      	b.n	8004af6 <setDuttyCycleAfOpt+0x172>
	}

	default:{
		break;
 8004af4:	bf00      	nop
	}

	}// fin del switch-case


}
 8004af6:	bf00      	nop
 8004af8:	372c      	adds	r7, #44	; 0x2c
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}
 8004afe:	bf00      	nop
 8004b00:	42c80000 	.word	0x42c80000
 8004b04:	20000598 	.word	0x20000598
 8004b08:	40590000 	.word	0x40590000

08004b0c <showPWMBfOpt>:

	return PWMdutty;

}

uint8_t showPWMBfOpt (PWM_Handler_t *ptrPwmHandler){
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

	uint8_t PWMdutty = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d847      	bhi.n	8004bb0 <showPWMBfOpt+0xa4>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <showPWMBfOpt+0x1c>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b57 	.word	0x08004b57
 8004b30:	08004b75 	.word	0x08004b75
 8004b34:	08004b93 	.word	0x08004b93
	case PWM_CHANNEL_1:{

		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR1)*100 / periodo;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	2264      	movs	r2, #100	; 0x64
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <showPWMBfOpt+0xb4>)
 8004b46:	8812      	ldrh	r2, [r2, #0]
 8004b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004b52:	73fb      	strb	r3, [r7, #15]
		break;
 8004b54:	e02d      	b.n	8004bb2 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_2:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR2)*100 / periodo;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	2264      	movs	r2, #100	; 0x64
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <showPWMBfOpt+0xb4>)
 8004b64:	8812      	ldrh	r2, [r2, #0]
 8004b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004b70:	73fb      	strb	r3, [r7, #15]
		break;
 8004b72:	e01e      	b.n	8004bb2 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_3:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR3)*100 / periodo;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2264      	movs	r2, #100	; 0x64
 8004b7c:	fb02 f303 	mul.w	r3, r2, r3
 8004b80:	4a0f      	ldr	r2, [pc, #60]	; (8004bc0 <showPWMBfOpt+0xb4>)
 8004b82:	8812      	ldrh	r2, [r2, #0]
 8004b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004b8e:	73fb      	strb	r3, [r7, #15]
		break;
 8004b90:	e00f      	b.n	8004bb2 <showPWMBfOpt+0xa6>
	}

	case PWM_CHANNEL_4:{
		PWMdutty = 100-(ptrPwmHandler->ptrTIMx->CCR4)*100 / periodo;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	2264      	movs	r2, #100	; 0x64
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <showPWMBfOpt+0xb4>)
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004bac:	73fb      	strb	r3, [r7, #15]
		break;
 8004bae:	e000      	b.n	8004bb2 <showPWMBfOpt+0xa6>
	}

	default:{
		break;
 8004bb0:	bf00      	nop
	}

	}// fin del switch-case

	return PWMdutty;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]

}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20000598 	.word	0x20000598

08004bc4 <updateDuttyCycleAfOpt>:
	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
}


void updateDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler, float newDutty){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	ed87 0a00 	vstr	s0, [r7]

	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	611a      	str	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycleAfOpt(ptrPwmHandler);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fed4 	bl	8004984 <setDuttyCycleAfOpt>

}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	791b      	ldrb	r3, [r3, #4]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d82f      	bhi.n	8004c54 <disableOutput+0x70>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <disableOutput+0x18>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c1f 	.word	0x08004c1f
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c43 	.word	0x08004c43
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a1a      	ldr	r2, [r3, #32]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	621a      	str	r2, [r3, #32]

			break;
 8004c1c:	e01b      	b.n	8004c56 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0210 	bic.w	r2, r2, #16
 8004c2c:	621a      	str	r2, [r3, #32]

			break;
 8004c2e:	e012      	b.n	8004c56 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1a      	ldr	r2, [r3, #32]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c3e:	621a      	str	r2, [r3, #32]

			break;
 8004c40:	e009      	b.n	8004c56 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c50:	621a      	str	r2, [r3, #32]

			break;
 8004c52:	e000      	b.n	8004c56 <disableOutput+0x72>
		}

		default: {
			break;
 8004c54:	bf00      	nop
		}
		}

	return RESET;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 8004c68:	4b33      	ldr	r3, [pc, #204]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a32      	ldr	r2, [pc, #200]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c72:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 8004c7c:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <RCC_enableMaxFrequencies+0xd8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2e      	ldr	r2, [pc, #184]	; (8004d3c <RCC_enableMaxFrequencies+0xd8>)
 8004c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c86:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 8004c88:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4a28      	ldr	r2, [pc, #160]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004ca4:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8004ca8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cb0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004cb4:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc0:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004cc2:	e000      	b.n	8004cc6 <RCC_enableMaxFrequencies+0x62>
		__NOP();
 8004cc4:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f8      	beq.n	8004cc4 <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cd8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004cdc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ce8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf4:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <RCC_enableMaxFrequencies+0xdc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <RCC_enableMaxFrequencies+0xdc>)
 8004cfc:	f023 030f 	bic.w	r3, r3, #15
 8004d00:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <RCC_enableMaxFrequencies+0xdc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <RCC_enableMaxFrequencies+0xdc>)
 8004d08:	f043 0303 	orr.w	r3, r3, #3
 8004d0c:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004d1a:	e000      	b.n	8004d1e <RCC_enableMaxFrequencies+0xba>
		__NOP();
 8004d1c:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <RCC_enableMaxFrequencies+0xd4>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f8      	beq.n	8004d1c <RCC_enableMaxFrequencies+0xb8>
	}



}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	40023c00 	.word	0x40023c00

08004d44 <__NVIC_EnableIRQ>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	db0b      	blt.n	8004d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	f003 021f 	and.w	r2, r3, #31
 8004d5c:	4907      	ldr	r1, [pc, #28]	; (8004d7c <__NVIC_EnableIRQ+0x38>)
 8004d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2001      	movs	r0, #1
 8004d66:	fa00 f202 	lsl.w	r2, r0, r2
 8004d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	e000e100 	.word	0xe000e100

08004d80 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d88:	b672      	cpsid	i
}
 8004d8a:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a8f      	ldr	r2, [pc, #572]	; (8004fd0 <USART_Config+0x250>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d106      	bne.n	8004da4 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8004d96:	4b8f      	ldr	r3, [pc, #572]	; (8004fd4 <USART_Config+0x254>)
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	4a8e      	ldr	r2, [pc, #568]	; (8004fd4 <USART_Config+0x254>)
 8004d9c:	f043 0310 	orr.w	r3, r3, #16
 8004da0:	6453      	str	r3, [r2, #68]	; 0x44
 8004da2:	e018      	b.n	8004dd6 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a8b      	ldr	r2, [pc, #556]	; (8004fd8 <USART_Config+0x258>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d106      	bne.n	8004dbc <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8004dae:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <USART_Config+0x254>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	4a88      	ldr	r2, [pc, #544]	; (8004fd4 <USART_Config+0x254>)
 8004db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dba:	e00c      	b.n	8004dd6 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a86      	ldr	r2, [pc, #536]	; (8004fdc <USART_Config+0x25c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d106      	bne.n	8004dd4 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8004dc6:	4b83      	ldr	r3, [pc, #524]	; (8004fd4 <USART_Config+0x254>)
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	4a82      	ldr	r2, [pc, #520]	; (8004fd4 <USART_Config+0x254>)
 8004dcc:	f043 0320 	orr.w	r3, r3, #32
 8004dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8004dd2:	e000      	b.n	8004dd6 <USART_Config+0x56>
	}
	else{
		__NOP();
 8004dd4:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	7a5b      	ldrb	r3, [r3, #9]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d025      	beq.n	8004e3a <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	7a5b      	ldrb	r3, [r3, #9]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d110      	bne.n	8004e18 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e04:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	e018      	b.n	8004e4a <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e26:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e36:	60da      	str	r2, [r3, #12]
 8004e38:	e007      	b.n	8004e4a <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e48:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7a1b      	ldrb	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d108      	bne.n	8004e64 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e007      	b.n	8004e74 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e72:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7a9b      	ldrb	r3, [r3, #10]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d82f      	bhi.n	8004edc <USART_Config+0x15c>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <USART_Config+0x104>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004ea7 	.word	0x08004ea7
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	08004ecb 	.word	0x08004ecb
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ea2:	611a      	str	r2, [r3, #16]
			break;
 8004ea4:	e023      	b.n	8004eee <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eb4:	611a      	str	r2, [r3, #16]
			break;
 8004eb6:	e01a      	b.n	8004eee <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec6:	611a      	str	r2, [r3, #16]
			break;
 8004ec8:	e011      	b.n	8004eee <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004ed8:	611a      	str	r2, [r3, #16]
			break;
 8004eda:	e008      	b.n	8004eee <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004eea:	611a      	str	r2, [r3, #16]
			break;
 8004eec:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681c      	ldr	r4, [r3, #0]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f8cd 	bl	8005098 <brrCalculus>
 8004efe:	4603      	mov	r3, r0
 8004f00:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	799b      	ldrb	r3, [r3, #6]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d82e      	bhi.n	8004f68 <USART_Config+0x1e8>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <USART_Config+0x190>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f33 	.word	0x08004f33
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f57 	.word	0x08004f57
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0208 	orr.w	r2, r2, #8
 8004f2e:	60da      	str	r2, [r3, #12]
			break;
 8004f30:	e023      	b.n	8004f7a <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0204 	orr.w	r2, r2, #4
 8004f40:	60da      	str	r2, [r3, #12]
			break;
 8004f42:	e01a      	b.n	8004f7a <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 020c 	orr.w	r2, r2, #12
 8004f52:	60da      	str	r2, [r3, #12]
			break;
 8004f54:	e011      	b.n	8004f7a <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 020c 	bic.w	r2, r2, #12
 8004f64:	60da      	str	r2, [r3, #12]
			break;
 8004f66:	e008      	b.n	8004f7a <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 020c 	bic.w	r2, r2, #12
 8004f76:	60da      	str	r2, [r3, #12]
			break;
 8004f78:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	799b      	ldrb	r3, [r3, #6]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d008      	beq.n	8004f94 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	e007      	b.n	8004fa4 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa2:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	795b      	ldrb	r3, [r3, #5]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d12d      	bne.n	8005008 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0220 	orr.w	r2, r2, #32
 8004fba:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a03      	ldr	r2, [pc, #12]	; (8004fd0 <USART_Config+0x250>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10c      	bne.n	8004fe0 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8004fc6:	2025      	movs	r0, #37	; 0x25
 8004fc8:	f7ff febc 	bl	8004d44 <__NVIC_EnableIRQ>
 8004fcc:	e024      	b.n	8005018 <USART_Config+0x298>
 8004fce:	bf00      	nop
 8004fd0:	40011000 	.word	0x40011000
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40004400 	.word	0x40004400
 8004fdc:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a28      	ldr	r2, [pc, #160]	; (8005088 <USART_Config+0x308>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d103      	bne.n	8004ff2 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8004fea:	2026      	movs	r0, #38	; 0x26
 8004fec:	f7ff feaa 	bl	8004d44 <__NVIC_EnableIRQ>
 8004ff0:	e012      	b.n	8005018 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a25      	ldr	r2, [pc, #148]	; (800508c <USART_Config+0x30c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8004ffc:	2047      	movs	r0, #71	; 0x47
 8004ffe:	f7ff fea1 	bl	8004d44 <__NVIC_EnableIRQ>
 8005002:	e009      	b.n	8005018 <USART_Config+0x298>
		}
		else{
				__NOP();
 8005004:	bf00      	nop
 8005006:	e007      	b.n	8005018 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0220 	bic.w	r2, r2, #32
 8005016:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	791b      	ldrb	r3, [r3, #4]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d124      	bne.n	800506a <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800502e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <USART_Config+0x310>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d103      	bne.n	8005042 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800503a:	2025      	movs	r0, #37	; 0x25
 800503c:	f7ff fe82 	bl	8004d44 <__NVIC_EnableIRQ>
 8005040:	e01b      	b.n	800507a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a10      	ldr	r2, [pc, #64]	; (8005088 <USART_Config+0x308>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800504c:	2026      	movs	r0, #38	; 0x26
 800504e:	f7ff fe79 	bl	8004d44 <__NVIC_EnableIRQ>
 8005052:	e012      	b.n	800507a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <USART_Config+0x30c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d103      	bne.n	8005066 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800505e:	2047      	movs	r0, #71	; 0x47
 8005060:	f7ff fe70 	bl	8004d44 <__NVIC_EnableIRQ>
 8005064:	e009      	b.n	800507a <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8005066:	bf00      	nop
 8005068:	e007      	b.n	800507a <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005078:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800507a:	b662      	cpsie	i
}
 800507c:	bf00      	nop
	}

	__enable_irq();
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	bf00      	nop
 8005088:	40004400 	.word	0x40004400
 800508c:	40011400 	.word	0x40011400
 8005090:	40011000 	.word	0x40011000
 8005094:	00000000 	.word	0x00000000

08005098 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8005098:	b5b0      	push	{r4, r5, r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	79db      	ldrb	r3, [r3, #7]
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	f200 8217 	bhi.w	80054da <brrCalculus+0x442>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <brrCalculus+0x1c>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080051bf 	.word	0x080051bf
 80050bc:	080052d9 	.word	0x080052d9
 80050c0:	080053e1 	.word	0x080053e1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 80050c4:	4980      	ldr	r1, [pc, #512]	; (80052c8 <brrCalculus+0x230>)
 80050c6:	a37c      	add	r3, pc, #496	; (adr r3, 80052b8 <brrCalculus+0x220>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	ee17 0a90 	vmov	r0, s15
 80050de:	f7fb fa4b 	bl	8000578 <__aeabi_f2d>
 80050e2:	4b79      	ldr	r3, [pc, #484]	; (80052c8 <brrCalculus+0x230>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f7fb fa9e 	bl	8000628 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4975      	ldr	r1, [pc, #468]	; (80052c8 <brrCalculus+0x230>)
 80050f2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80050f6:	4b74      	ldr	r3, [pc, #464]	; (80052c8 <brrCalculus+0x230>)
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	f7fb fd42 	bl	8000b88 <__aeabi_d2iz>
 8005104:	4603      	mov	r3, r0
 8005106:	b29a      	uxth	r2, r3
 8005108:	4b70      	ldr	r3, [pc, #448]	; (80052cc <brrCalculus+0x234>)
 800510a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800510c:	4b6e      	ldr	r3, [pc, #440]	; (80052c8 <brrCalculus+0x230>)
 800510e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005112:	4b6d      	ldr	r3, [pc, #436]	; (80052c8 <brrCalculus+0x230>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	f7fb fd34 	bl	8000b88 <__aeabi_d2iz>
 8005120:	4603      	mov	r3, r0
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb fa16 	bl	8000554 <__aeabi_i2d>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb f8c2 	bl	80002b8 <__aeabi_dsub>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	f7fb fd6c 	bl	8000c18 <__aeabi_d2f>
 8005140:	4603      	mov	r3, r0
 8005142:	4a63      	ldr	r2, [pc, #396]	; (80052d0 <brrCalculus+0x238>)
 8005144:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005146:	4b62      	ldr	r3, [pc, #392]	; (80052d0 <brrCalculus+0x238>)
 8005148:	edd3 7a00 	vldr	s15, [r3]
 800514c:	2004      	movs	r0, #4
 800514e:	eeb0 0a67 	vmov.f32	s0, s15
 8005152:	f000 fa6d 	bl	8005630 <roundToNDecimals>
 8005156:	eef0 7a40 	vmov.f32	s15, s0
 800515a:	4b5d      	ldr	r3, [pc, #372]	; (80052d0 <brrCalculus+0x238>)
 800515c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005160:	4b5b      	ldr	r3, [pc, #364]	; (80052d0 <brrCalculus+0x238>)
 8005162:	edd3 7a00 	vldr	s15, [r3]
 8005166:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800516a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800516e:	4b58      	ldr	r3, [pc, #352]	; (80052d0 <brrCalculus+0x238>)
 8005170:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005174:	4b56      	ldr	r3, [pc, #344]	; (80052d0 <brrCalculus+0x238>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb f9fd 	bl	8000578 <__aeabi_f2d>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	ec43 2b10 	vmov	d0, r2, r3
 8005186:	f004 f8c1 	bl	800930c <round>
 800518a:	ec53 2b10 	vmov	r2, r3, d0
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f7fb fd41 	bl	8000c18 <__aeabi_d2f>
 8005196:	4603      	mov	r3, r0
 8005198:	4a4d      	ldr	r2, [pc, #308]	; (80052d0 <brrCalculus+0x238>)
 800519a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800519c:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <brrCalculus+0x234>)
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	4b4a      	ldr	r3, [pc, #296]	; (80052d0 <brrCalculus+0x238>)
 80051a6:	edd3 7a00 	vldr	s15, [r3]
 80051aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ae:	ee17 3a90 	vmov	r3, s15
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	4313      	orrs	r3, r2
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <brrCalculus+0x23c>)
 80051ba:	801a      	strh	r2, [r3, #0]


		break;
 80051bc:	e18f      	b.n	80054de <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80051be:	4942      	ldr	r1, [pc, #264]	; (80052c8 <brrCalculus+0x230>)
 80051c0:	a33f      	add	r3, pc, #252	; (adr r3, 80052c0 <brrCalculus+0x228>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d4:	ee17 0a90 	vmov	r0, s15
 80051d8:	f7fb f9ce 	bl	8000578 <__aeabi_f2d>
 80051dc:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <brrCalculus+0x230>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb fa21 	bl	8000628 <__aeabi_dmul>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4937      	ldr	r1, [pc, #220]	; (80052c8 <brrCalculus+0x230>)
 80051ec:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80051f0:	4b35      	ldr	r3, [pc, #212]	; (80052c8 <brrCalculus+0x230>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	f7fb fcc5 	bl	8000b88 <__aeabi_d2iz>
 80051fe:	4603      	mov	r3, r0
 8005200:	b29a      	uxth	r2, r3
 8005202:	4b32      	ldr	r3, [pc, #200]	; (80052cc <brrCalculus+0x234>)
 8005204:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <brrCalculus+0x230>)
 8005208:	e9d3 4500 	ldrd	r4, r5, [r3]
 800520c:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <brrCalculus+0x230>)
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	f7fb fcb7 	bl	8000b88 <__aeabi_d2iz>
 800521a:	4603      	mov	r3, r0
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f999 	bl	8000554 <__aeabi_i2d>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4620      	mov	r0, r4
 8005228:	4629      	mov	r1, r5
 800522a:	f7fb f845 	bl	80002b8 <__aeabi_dsub>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	f7fb fcef 	bl	8000c18 <__aeabi_d2f>
 800523a:	4603      	mov	r3, r0
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <brrCalculus+0x238>)
 800523e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005240:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <brrCalculus+0x238>)
 8005242:	edd3 7a00 	vldr	s15, [r3]
 8005246:	2004      	movs	r0, #4
 8005248:	eeb0 0a67 	vmov.f32	s0, s15
 800524c:	f000 f9f0 	bl	8005630 <roundToNDecimals>
 8005250:	eef0 7a40 	vmov.f32	s15, s0
 8005254:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <brrCalculus+0x238>)
 8005256:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <brrCalculus+0x238>)
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <brrCalculus+0x238>)
 800526a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800526e:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <brrCalculus+0x238>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f980 	bl	8000578 <__aeabi_f2d>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	ec43 2b10 	vmov	d0, r2, r3
 8005280:	f004 f844 	bl	800930c <round>
 8005284:	ec53 2b10 	vmov	r2, r3, d0
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f7fb fcc4 	bl	8000c18 <__aeabi_d2f>
 8005290:	4603      	mov	r3, r0
 8005292:	4a0f      	ldr	r2, [pc, #60]	; (80052d0 <brrCalculus+0x238>)
 8005294:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <brrCalculus+0x234>)
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	b29a      	uxth	r2, r3
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <brrCalculus+0x238>)
 80052a0:	edd3 7a00 	vldr	s15, [r3]
 80052a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a8:	ee17 3a90 	vmov	r3, s15
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <brrCalculus+0x23c>)
 80052b4:	801a      	strh	r2, [r3, #0]


		break;
 80052b6:	e112      	b.n	80054de <brrCalculus+0x446>
 80052b8:	b4e81b4f 	.word	0xb4e81b4f
 80052bc:	3edb4e81 	.word	0x3edb4e81
 80052c0:	b4e81b4f 	.word	0xb4e81b4f
 80052c4:	3ecb4e81 	.word	0x3ecb4e81
 80052c8:	200005a8 	.word	0x200005a8
 80052cc:	2000059c 	.word	0x2000059c
 80052d0:	200005a0 	.word	0x200005a0
 80052d4:	2000059a 	.word	0x2000059a
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 80052d8:	4989      	ldr	r1, [pc, #548]	; (8005500 <brrCalculus+0x468>)
 80052da:	a385      	add	r3, pc, #532	; (adr r3, 80054f0 <brrCalculus+0x458>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	ee17 0a90 	vmov	r0, s15
 80052f2:	f7fb f941 	bl	8000578 <__aeabi_f2d>
 80052f6:	4b82      	ldr	r3, [pc, #520]	; (8005500 <brrCalculus+0x468>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fb f994 	bl	8000628 <__aeabi_dmul>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	497e      	ldr	r1, [pc, #504]	; (8005500 <brrCalculus+0x468>)
 8005306:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800530a:	4b7d      	ldr	r3, [pc, #500]	; (8005500 <brrCalculus+0x468>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	f7fb fc38 	bl	8000b88 <__aeabi_d2iz>
 8005318:	4603      	mov	r3, r0
 800531a:	b29a      	uxth	r2, r3
 800531c:	4b79      	ldr	r3, [pc, #484]	; (8005504 <brrCalculus+0x46c>)
 800531e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005320:	4b77      	ldr	r3, [pc, #476]	; (8005500 <brrCalculus+0x468>)
 8005322:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005326:	4b76      	ldr	r3, [pc, #472]	; (8005500 <brrCalculus+0x468>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f7fb fc2a 	bl	8000b88 <__aeabi_d2iz>
 8005334:	4603      	mov	r3, r0
 8005336:	4618      	mov	r0, r3
 8005338:	f7fb f90c 	bl	8000554 <__aeabi_i2d>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f7fa ffb8 	bl	80002b8 <__aeabi_dsub>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	f7fb fc62 	bl	8000c18 <__aeabi_d2f>
 8005354:	4603      	mov	r3, r0
 8005356:	4a6c      	ldr	r2, [pc, #432]	; (8005508 <brrCalculus+0x470>)
 8005358:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800535a:	4b6b      	ldr	r3, [pc, #428]	; (8005508 <brrCalculus+0x470>)
 800535c:	edd3 7a00 	vldr	s15, [r3]
 8005360:	2004      	movs	r0, #4
 8005362:	eeb0 0a67 	vmov.f32	s0, s15
 8005366:	f000 f963 	bl	8005630 <roundToNDecimals>
 800536a:	eef0 7a40 	vmov.f32	s15, s0
 800536e:	4b66      	ldr	r3, [pc, #408]	; (8005508 <brrCalculus+0x470>)
 8005370:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005374:	4b64      	ldr	r3, [pc, #400]	; (8005508 <brrCalculus+0x470>)
 8005376:	edd3 7a00 	vldr	s15, [r3]
 800537a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800537e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005382:	4b61      	ldr	r3, [pc, #388]	; (8005508 <brrCalculus+0x470>)
 8005384:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8005388:	4b5f      	ldr	r3, [pc, #380]	; (8005508 <brrCalculus+0x470>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f7fb f8f3 	bl	8000578 <__aeabi_f2d>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	ec43 2b10 	vmov	d0, r2, r3
 800539a:	f003 ffb7 	bl	800930c <round>
 800539e:	ec51 0b10 	vmov	r0, r1, d0
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	4b59      	ldr	r3, [pc, #356]	; (800550c <brrCalculus+0x474>)
 80053a8:	f7fa ff88 	bl	80002bc <__adddf3>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	f7fb fc30 	bl	8000c18 <__aeabi_d2f>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4a53      	ldr	r2, [pc, #332]	; (8005508 <brrCalculus+0x470>)
 80053bc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <brrCalculus+0x46c>)
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	4b50      	ldr	r3, [pc, #320]	; (8005508 <brrCalculus+0x470>)
 80053c8:	edd3 7a00 	vldr	s15, [r3]
 80053cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d0:	ee17 3a90 	vmov	r3, s15
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	4b4d      	ldr	r3, [pc, #308]	; (8005510 <brrCalculus+0x478>)
 80053dc:	801a      	strh	r2, [r3, #0]


		break;
 80053de:	e07e      	b.n	80054de <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 80053e0:	4947      	ldr	r1, [pc, #284]	; (8005500 <brrCalculus+0x468>)
 80053e2:	a345      	add	r3, pc, #276	; (adr r3, 80054f8 <brrCalculus+0x460>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	ee17 0a90 	vmov	r0, s15
 80053fa:	f7fb f8bd 	bl	8000578 <__aeabi_f2d>
 80053fe:	4b40      	ldr	r3, [pc, #256]	; (8005500 <brrCalculus+0x468>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f7fb f910 	bl	8000628 <__aeabi_dmul>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	493c      	ldr	r1, [pc, #240]	; (8005500 <brrCalculus+0x468>)
 800540e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005412:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <brrCalculus+0x468>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	f7fb fbb4 	bl	8000b88 <__aeabi_d2iz>
 8005420:	4603      	mov	r3, r0
 8005422:	b29a      	uxth	r2, r3
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <brrCalculus+0x46c>)
 8005426:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005428:	4b35      	ldr	r3, [pc, #212]	; (8005500 <brrCalculus+0x468>)
 800542a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800542e:	4b34      	ldr	r3, [pc, #208]	; (8005500 <brrCalculus+0x468>)
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	f7fb fba6 	bl	8000b88 <__aeabi_d2iz>
 800543c:	4603      	mov	r3, r0
 800543e:	4618      	mov	r0, r3
 8005440:	f7fb f888 	bl	8000554 <__aeabi_i2d>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4620      	mov	r0, r4
 800544a:	4629      	mov	r1, r5
 800544c:	f7fa ff34 	bl	80002b8 <__aeabi_dsub>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	f7fb fbde 	bl	8000c18 <__aeabi_d2f>
 800545c:	4603      	mov	r3, r0
 800545e:	4a2a      	ldr	r2, [pc, #168]	; (8005508 <brrCalculus+0x470>)
 8005460:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005462:	4b29      	ldr	r3, [pc, #164]	; (8005508 <brrCalculus+0x470>)
 8005464:	edd3 7a00 	vldr	s15, [r3]
 8005468:	2004      	movs	r0, #4
 800546a:	eeb0 0a67 	vmov.f32	s0, s15
 800546e:	f000 f8df 	bl	8005630 <roundToNDecimals>
 8005472:	eef0 7a40 	vmov.f32	s15, s0
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <brrCalculus+0x470>)
 8005478:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800547c:	4b22      	ldr	r3, [pc, #136]	; (8005508 <brrCalculus+0x470>)
 800547e:	edd3 7a00 	vldr	s15, [r3]
 8005482:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <brrCalculus+0x470>)
 800548c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <brrCalculus+0x470>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f7fb f86f 	bl	8000578 <__aeabi_f2d>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	ec43 2b10 	vmov	d0, r2, r3
 80054a2:	f003 ff33 	bl	800930c <round>
 80054a6:	ec53 2b10 	vmov	r2, r3, d0
 80054aa:	4610      	mov	r0, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7fb fbb3 	bl	8000c18 <__aeabi_d2f>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <brrCalculus+0x470>)
 80054b6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <brrCalculus+0x46c>)
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	b29a      	uxth	r2, r3
 80054c0:	4b11      	ldr	r3, [pc, #68]	; (8005508 <brrCalculus+0x470>)
 80054c2:	edd3 7a00 	vldr	s15, [r3]
 80054c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ca:	ee17 3a90 	vmov	r3, s15
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4313      	orrs	r3, r2
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <brrCalculus+0x478>)
 80054d6:	801a      	strh	r2, [r3, #0]


		break;
 80054d8:	e001      	b.n	80054de <brrCalculus+0x446>
	}
	default:{

		__NOP();
 80054da:	bf00      	nop
		break;
 80054dc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <brrCalculus+0x478>)
 80054e0:	881b      	ldrh	r3, [r3, #0]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bdb0      	pop	{r4, r5, r7, pc}
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w
 80054f0:	789abcdf 	.word	0x789abcdf
 80054f4:	3ec23456 	.word	0x3ec23456
 80054f8:	789abcdf 	.word	0x789abcdf
 80054fc:	3ea23456 	.word	0x3ea23456
 8005500:	200005a8 	.word	0x200005a8
 8005504:	2000059c 	.word	0x2000059c
 8005508:	200005a0 	.word	0x200005a0
 800550c:	3ff00000 	.word	0x3ff00000
 8005510:	2000059a 	.word	0x2000059a

08005514 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800551e:	e000      	b.n	8005522 <writeChar+0xe>
		__NOP();
 8005520:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f7      	beq.n	8005520 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	605a      	str	r2, [r3, #4]

}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, char* msgToSend){
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800554e:	e008      	b.n	8005562 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ffdc 	bl	8005514 <writeChar>
		msgToSend ++ ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f2      	bne.n	8005550 <writeMsg+0xc>
	}
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
	__NOP();
 8005578:	bf00      	nop
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
	__NOP();
 8005588:	bf00      	nop
}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
	return auxRxData;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <getRxData+0x14>)
 800559a:	781b      	ldrb	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	200005b0 	.word	0x200005b0

080055ac <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <USART2_IRQHandler+0x24>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <USART2_IRQHandler+0x24>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <USART2_IRQHandler+0x28>)
 80055c4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80055c6:	f7fc fa7f 	bl	8001ac8 <usart2Rx_Callback>
	}

}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40004400 	.word	0x40004400
 80055d4:	200005b0 	.word	0x200005b0

080055d8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 80055dc:	4b07      	ldr	r3, [pc, #28]	; (80055fc <USART1_IRQHandler+0x24>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d006      	beq.n	80055f6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <USART1_IRQHandler+0x24>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4b04      	ldr	r3, [pc, #16]	; (8005600 <USART1_IRQHandler+0x28>)
 80055f0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 80055f2:	f7ff ffbf 	bl	8005574 <usart1Rx_Callback>
	}
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40011000 	.word	0x40011000
 8005600:	200005b0 	.word	0x200005b0

08005604 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <USART6_IRQHandler+0x24>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d006      	beq.n	8005622 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <USART6_IRQHandler+0x24>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	4b04      	ldr	r3, [pc, #16]	; (800562c <USART6_IRQHandler+0x28>)
 800561c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800561e:	f7ff ffb1 	bl	8005584 <usart6Rx_Callback>
	}

}
 8005622:	bf00      	nop
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40011400 	.word	0x40011400
 800562c:	200005b0 	.word	0x200005b0

08005630 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	ed87 0a01 	vstr	s0, [r7, #4]
 800563a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800563c:	6838      	ldr	r0, [r7, #0]
 800563e:	f7fa ff89 	bl	8000554 <__aeabi_i2d>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	ec43 2b11 	vmov	d1, r2, r3
 800564a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80056c8 <roundToNDecimals+0x98>
 800564e:	f003 fea3 	bl	8009398 <pow>
 8005652:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fa ff8e 	bl	8000578 <__aeabi_f2d>
 800565c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005660:	f7fa ffe2 	bl	8000628 <__aeabi_dmul>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4610      	mov	r0, r2
 800566a:	4619      	mov	r1, r3
 800566c:	f7fb fad4 	bl	8000c18 <__aeabi_d2f>
 8005670:	4603      	mov	r3, r0
 8005672:	607b      	str	r3, [r7, #4]

    number = round(number);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fa ff7f 	bl	8000578 <__aeabi_f2d>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	ec43 2b10 	vmov	d0, r2, r3
 8005682:	f003 fe43 	bl	800930c <round>
 8005686:	ec53 2b10 	vmov	r2, r3, d0
 800568a:	4610      	mov	r0, r2
 800568c:	4619      	mov	r1, r3
 800568e:	f7fb fac3 	bl	8000c18 <__aeabi_d2f>
 8005692:	4603      	mov	r3, r0
 8005694:	607b      	str	r3, [r7, #4]

    number /= factor;
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fa ff6e 	bl	8000578 <__aeabi_f2d>
 800569c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a0:	f7fb f8ec 	bl	800087c <__aeabi_ddiv>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	f7fb fab4 	bl	8000c18 <__aeabi_d2f>
 80056b0:	4603      	mov	r3, r0
 80056b2:	607b      	str	r3, [r7, #4]

    return number;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	ee07 3a90 	vmov	s15, r3
}
 80056ba:	eeb0 0a67 	vmov.f32	s0, s15
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	f3af 8000 	nop.w
 80056c8:	00000000 	.word	0x00000000
 80056cc:	40240000 	.word	0x40240000

080056d0 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a89      	ldr	r2, [pc, #548]	; (8005904 <i2c_config+0x234>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d112      	bne.n	8005708 <i2c_config+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 80056e2:	4b89      	ldr	r3, [pc, #548]	; (8005908 <i2c_config+0x238>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	4a88      	ldr	r2, [pc, #544]	; (8005908 <i2c_config+0x238>)
 80056e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056ec:	6413      	str	r3, [r2, #64]	; 0x40
		RCC ->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 80056ee:	4b86      	ldr	r3, [pc, #536]	; (8005908 <i2c_config+0x238>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4a85      	ldr	r2, [pc, #532]	; (8005908 <i2c_config+0x238>)
 80056f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f8:	6213      	str	r3, [r2, #32]
		RCC ->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 80056fa:	4b83      	ldr	r3, [pc, #524]	; (8005908 <i2c_config+0x238>)
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	4a82      	ldr	r2, [pc, #520]	; (8005908 <i2c_config+0x238>)
 8005700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005704:	6213      	str	r3, [r2, #32]
 8005706:	e016      	b.n	8005736 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a7f      	ldr	r2, [pc, #508]	; (800590c <i2c_config+0x23c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d106      	bne.n	8005720 <i2c_config+0x50>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8005712:	4b7d      	ldr	r3, [pc, #500]	; (8005908 <i2c_config+0x238>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	4a7c      	ldr	r2, [pc, #496]	; (8005908 <i2c_config+0x238>)
 8005718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800571c:	6413      	str	r3, [r2, #64]	; 0x40
 800571e:	e00a      	b.n	8005736 <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a7a      	ldr	r2, [pc, #488]	; (8005910 <i2c_config+0x240>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d105      	bne.n	8005736 <i2c_config+0x66>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800572a:	4b77      	ldr	r3, [pc, #476]	; (8005908 <i2c_config+0x238>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	4a76      	ldr	r2, [pc, #472]	; (8005908 <i2c_config+0x238>)
 8005730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005734:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8005746:	e000      	b.n	800574a <i2c_config+0x7a>
		__NOP();
 8005748:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f7      	bne.n	8005748 <i2c_config+0x78>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005766:	601a      	str	r2, [r3, #0]

	//Esperamos un rato
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e003      	b.n	8005776 <i2c_config+0xa6>
		__NOP();
 800576e:	bf00      	nop
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a66      	ldr	r2, [pc, #408]	; (8005914 <i2c_config+0x244>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d3f7      	bcc.n	800576e <i2c_config+0x9e>
	}


	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800578c:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800579c:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	79db      	ldrb	r3, [r3, #7]
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d108      	bne.n	80057b8 <i2c_config+0xe8>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0210 	orr.w	r2, r2, #16
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	e00b      	b.n	80057d0 <i2c_config+0x100>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	79db      	ldrb	r3, [r3, #7]
 80057bc:	2b32      	cmp	r3, #50	; 0x32
 80057be:	d107      	bne.n	80057d0 <i2c_config+0x100>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80057ce:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */
	//Nos aseguramos de que el periferico está desactivado
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(0b1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2200      	movs	r2, #0
 80057e6:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2200      	movs	r2, #0
 80057ee:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	795b      	ldrb	r3, [r3, #5]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d15c      	bne.n	80058b2 <i2c_config+0x1e2>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69da      	ldr	r2, [r3, #28]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005806:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	79db      	ldrb	r3, [r3, #7]
 800580c:	2b32      	cmp	r3, #50	; 0x32
 800580e:	d03f      	beq.n	8005890 <i2c_config+0x1c0>
 8005810:	2b32      	cmp	r3, #50	; 0x32
 8005812:	f300 80b4 	bgt.w	800597e <i2c_config+0x2ae>
 8005816:	2b14      	cmp	r3, #20
 8005818:	d029      	beq.n	800586e <i2c_config+0x19e>
 800581a:	2b14      	cmp	r3, #20
 800581c:	f300 80af 	bgt.w	800597e <i2c_config+0x2ae>
 8005820:	2b04      	cmp	r3, #4
 8005822:	d002      	beq.n	800582a <i2c_config+0x15a>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d011      	beq.n	800584c <i2c_config+0x17c>


				break;
			}default:{

				break;
 8005828:	e0a9      	b.n	800597e <i2c_config+0x2ae>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0214 	orr.w	r2, r2, #20
 8005838:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0205 	orr.w	r2, r2, #5
 8005848:	621a      	str	r2, [r3, #32]
				break;
 800584a:	e09b      	b.n	8005984 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800585a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0211 	orr.w	r2, r2, #17
 800586a:	621a      	str	r2, [r3, #32]
				break;
 800586c:	e08a      	b.n	8005984 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_20MHz << I2C_CCR_CCR_Pos);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800587c:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_20MHz;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6a1a      	ldr	r2, [r3, #32]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0215 	orr.w	r2, r2, #21
 800588c:	621a      	str	r2, [r3, #32]
				break;
 800588e:	e079      	b.n	8005984 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69da      	ldr	r2, [r3, #28]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800589e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a1a      	ldr	r2, [r3, #32]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 80058ae:	621a      	str	r2, [r3, #32]
				break;
 80058b0:	e068      	b.n	8005984 <i2c_config+0x2b4>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c0:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	79db      	ldrb	r3, [r3, #7]
 80058c6:	2b32      	cmp	r3, #50	; 0x32
 80058c8:	d048      	beq.n	800595c <i2c_config+0x28c>
 80058ca:	2b32      	cmp	r3, #50	; 0x32
 80058cc:	dc59      	bgt.n	8005982 <i2c_config+0x2b2>
 80058ce:	2b14      	cmp	r3, #20
 80058d0:	d033      	beq.n	800593a <i2c_config+0x26a>
 80058d2:	2b14      	cmp	r3, #20
 80058d4:	dc55      	bgt.n	8005982 <i2c_config+0x2b2>
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d002      	beq.n	80058e0 <i2c_config+0x210>
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d01c      	beq.n	8005918 <i2c_config+0x248>


				break;
			}default:{

				break;
 80058de:	e050      	b.n	8005982 <i2c_config+0x2b2>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0203 	orr.w	r2, r2, #3
 80058ee:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0202 	orr.w	r2, r2, #2
 80058fe:	621a      	str	r2, [r3, #32]
				break;
 8005900:	e040      	b.n	8005984 <i2c_config+0x2b4>
 8005902:	bf00      	nop
 8005904:	40005400 	.word	0x40005400
 8005908:	40023800 	.word	0x40023800
 800590c:	40005800 	.word	0x40005800
 8005910:	40005c00 	.word	0x40005c00
 8005914:	00f42400 	.word	0x00f42400
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69da      	ldr	r2, [r3, #28]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 020d 	orr.w	r2, r2, #13
 8005926:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0206 	orr.w	r2, r2, #6
 8005936:	621a      	str	r2, [r3, #32]
				break;
 8005938:	e024      	b.n	8005984 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_20MHz << I2C_CCR_CCR_Pos);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0211 	orr.w	r2, r2, #17
 8005948:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_20MHz;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0207 	orr.w	r2, r2, #7
 8005958:	621a      	str	r2, [r3, #32]
				break;
 800595a:	e013      	b.n	8005984 <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800596a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0210 	orr.w	r2, r2, #16
 800597a:	621a      	str	r2, [r3, #32]
				break;
 800597c:	e002      	b.n	8005984 <i2c_config+0x2b4>
				break;
 800597e:	bf00      	nop
 8005980:	e002      	b.n	8005988 <i2c_config+0x2b8>
				break;
 8005982:	bf00      	nop
			}

		}

	}
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8005984:	e000      	b.n	8005988 <i2c_config+0x2b8>
		__NOP();
 8005986:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f7      	bne.n	8005986 <i2c_config+0x2b6>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop

080059b4 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ca:	601a      	str	r2, [r3, #0]
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80059e0:	e000      	b.n	80059e4 <i2c_startTransaction+0xc>
		__NOP();
 80059e2:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f7      	bne.n	80059e2 <i2c_startTransaction+0xa>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a00:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a02:	e000      	b.n	8005a06 <i2c_startTransaction+0x2e>
		__NOP();
 8005a04:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f7      	beq.n	8005a04 <i2c_startTransaction+0x2c>
	}
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a38:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a3a:	e000      	b.n	8005a3e <i2c_reStartTransaction+0x1c>
		__NOP();
 8005a3c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f7      	beq.n	8005a3c <i2c_reStartTransaction+0x1a>
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a70:	601a      	str	r2, [r3, #0]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	005a      	lsls	r2, r3, #1
 8005a96:	78bb      	ldrb	r3, [r7, #2]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005aa0:	e000      	b.n	8005aa4 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8005aa2:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f7      	beq.n	8005aa2 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	73fb      	strb	r3, [r7, #15]

}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005ae2:	e000      	b.n	8005ae6 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8005ae4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f7      	beq.n	8005ae4 <i2c_sendMemoryAddress+0x16>
	}
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8005b16:	e000      	b.n	8005b1a <i2c_sendDataByte+0x18>
		__NOP();
 8005b18:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f7      	beq.n	8005b18 <i2c_sendDataByte+0x16>
	}
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8005b3e:	e000      	b.n	8005b42 <i2c_readDataByte+0xc>
		__NOP();
 8005b40:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0f7      	beq.n	8005b40 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	799b      	ldrb	r3, [r3, #6]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <__errno>:
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <__errno+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000010 	.word	0x20000010

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	4d0d      	ldr	r5, [pc, #52]	; (8005bb0 <__libc_init_array+0x38>)
 8005b7c:	4c0d      	ldr	r4, [pc, #52]	; (8005bb4 <__libc_init_array+0x3c>)
 8005b7e:	1b64      	subs	r4, r4, r5
 8005b80:	10a4      	asrs	r4, r4, #2
 8005b82:	2600      	movs	r6, #0
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	4d0b      	ldr	r5, [pc, #44]	; (8005bb8 <__libc_init_array+0x40>)
 8005b8a:	4c0c      	ldr	r4, [pc, #48]	; (8005bbc <__libc_init_array+0x44>)
 8005b8c:	f004 fb2c 	bl	800a1e8 <_init>
 8005b90:	1b64      	subs	r4, r4, r5
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	2600      	movs	r6, #0
 8005b96:	42a6      	cmp	r6, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba0:	4798      	blx	r3
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005baa:	4798      	blx	r3
 8005bac:	3601      	adds	r6, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	0800a798 	.word	0x0800a798
 8005bb4:	0800a798 	.word	0x0800a798
 8005bb8:	0800a798 	.word	0x0800a798
 8005bbc:	0800a79c 	.word	0x0800a79c

08005bc0 <malloc>:
 8005bc0:	4b02      	ldr	r3, [pc, #8]	; (8005bcc <malloc+0xc>)
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	f000 b877 	b.w	8005cb8 <_malloc_r>
 8005bca:	bf00      	nop
 8005bcc:	20000010 	.word	0x20000010

08005bd0 <memset>:
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d100      	bne.n	8005bda <memset+0xa>
 8005bd8:	4770      	bx	lr
 8005bda:	f803 1b01 	strb.w	r1, [r3], #1
 8005bde:	e7f9      	b.n	8005bd4 <memset+0x4>

08005be0 <_free_r>:
 8005be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005be2:	2900      	cmp	r1, #0
 8005be4:	d044      	beq.n	8005c70 <_free_r+0x90>
 8005be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bea:	9001      	str	r0, [sp, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f1a1 0404 	sub.w	r4, r1, #4
 8005bf2:	bfb8      	it	lt
 8005bf4:	18e4      	addlt	r4, r4, r3
 8005bf6:	f001 fca1 	bl	800753c <__malloc_lock>
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <_free_r+0x94>)
 8005bfc:	9801      	ldr	r0, [sp, #4]
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	b933      	cbnz	r3, 8005c10 <_free_r+0x30>
 8005c02:	6063      	str	r3, [r4, #4]
 8005c04:	6014      	str	r4, [r2, #0]
 8005c06:	b003      	add	sp, #12
 8005c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c0c:	f001 bc9c 	b.w	8007548 <__malloc_unlock>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d908      	bls.n	8005c26 <_free_r+0x46>
 8005c14:	6825      	ldr	r5, [r4, #0]
 8005c16:	1961      	adds	r1, r4, r5
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	bf01      	itttt	eq
 8005c1c:	6819      	ldreq	r1, [r3, #0]
 8005c1e:	685b      	ldreq	r3, [r3, #4]
 8005c20:	1949      	addeq	r1, r1, r5
 8005c22:	6021      	streq	r1, [r4, #0]
 8005c24:	e7ed      	b.n	8005c02 <_free_r+0x22>
 8005c26:	461a      	mov	r2, r3
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	b10b      	cbz	r3, 8005c30 <_free_r+0x50>
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d9fa      	bls.n	8005c26 <_free_r+0x46>
 8005c30:	6811      	ldr	r1, [r2, #0]
 8005c32:	1855      	adds	r5, r2, r1
 8005c34:	42a5      	cmp	r5, r4
 8005c36:	d10b      	bne.n	8005c50 <_free_r+0x70>
 8005c38:	6824      	ldr	r4, [r4, #0]
 8005c3a:	4421      	add	r1, r4
 8005c3c:	1854      	adds	r4, r2, r1
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	d1e0      	bne.n	8005c06 <_free_r+0x26>
 8005c44:	681c      	ldr	r4, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	4421      	add	r1, r4
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	e7da      	b.n	8005c06 <_free_r+0x26>
 8005c50:	d902      	bls.n	8005c58 <_free_r+0x78>
 8005c52:	230c      	movs	r3, #12
 8005c54:	6003      	str	r3, [r0, #0]
 8005c56:	e7d6      	b.n	8005c06 <_free_r+0x26>
 8005c58:	6825      	ldr	r5, [r4, #0]
 8005c5a:	1961      	adds	r1, r4, r5
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	bf04      	itt	eq
 8005c60:	6819      	ldreq	r1, [r3, #0]
 8005c62:	685b      	ldreq	r3, [r3, #4]
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	bf04      	itt	eq
 8005c68:	1949      	addeq	r1, r1, r5
 8005c6a:	6021      	streq	r1, [r4, #0]
 8005c6c:	6054      	str	r4, [r2, #4]
 8005c6e:	e7ca      	b.n	8005c06 <_free_r+0x26>
 8005c70:	b003      	add	sp, #12
 8005c72:	bd30      	pop	{r4, r5, pc}
 8005c74:	200005b4 	.word	0x200005b4

08005c78 <sbrk_aligned>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	4e0e      	ldr	r6, [pc, #56]	; (8005cb4 <sbrk_aligned+0x3c>)
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	6831      	ldr	r1, [r6, #0]
 8005c80:	4605      	mov	r5, r0
 8005c82:	b911      	cbnz	r1, 8005c8a <sbrk_aligned+0x12>
 8005c84:	f000 fcf6 	bl	8006674 <_sbrk_r>
 8005c88:	6030      	str	r0, [r6, #0]
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 fcf1 	bl	8006674 <_sbrk_r>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d00a      	beq.n	8005cac <sbrk_aligned+0x34>
 8005c96:	1cc4      	adds	r4, r0, #3
 8005c98:	f024 0403 	bic.w	r4, r4, #3
 8005c9c:	42a0      	cmp	r0, r4
 8005c9e:	d007      	beq.n	8005cb0 <sbrk_aligned+0x38>
 8005ca0:	1a21      	subs	r1, r4, r0
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 fce6 	bl	8006674 <_sbrk_r>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d101      	bne.n	8005cb0 <sbrk_aligned+0x38>
 8005cac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	200005b8 	.word	0x200005b8

08005cb8 <_malloc_r>:
 8005cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbc:	1ccd      	adds	r5, r1, #3
 8005cbe:	f025 0503 	bic.w	r5, r5, #3
 8005cc2:	3508      	adds	r5, #8
 8005cc4:	2d0c      	cmp	r5, #12
 8005cc6:	bf38      	it	cc
 8005cc8:	250c      	movcc	r5, #12
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	4607      	mov	r7, r0
 8005cce:	db01      	blt.n	8005cd4 <_malloc_r+0x1c>
 8005cd0:	42a9      	cmp	r1, r5
 8005cd2:	d905      	bls.n	8005ce0 <_malloc_r+0x28>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	2600      	movs	r6, #0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce0:	4e2e      	ldr	r6, [pc, #184]	; (8005d9c <_malloc_r+0xe4>)
 8005ce2:	f001 fc2b 	bl	800753c <__malloc_lock>
 8005ce6:	6833      	ldr	r3, [r6, #0]
 8005ce8:	461c      	mov	r4, r3
 8005cea:	bb34      	cbnz	r4, 8005d3a <_malloc_r+0x82>
 8005cec:	4629      	mov	r1, r5
 8005cee:	4638      	mov	r0, r7
 8005cf0:	f7ff ffc2 	bl	8005c78 <sbrk_aligned>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	d14d      	bne.n	8005d96 <_malloc_r+0xde>
 8005cfa:	6834      	ldr	r4, [r6, #0]
 8005cfc:	4626      	mov	r6, r4
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	d140      	bne.n	8005d84 <_malloc_r+0xcc>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	4631      	mov	r1, r6
 8005d06:	4638      	mov	r0, r7
 8005d08:	eb04 0803 	add.w	r8, r4, r3
 8005d0c:	f000 fcb2 	bl	8006674 <_sbrk_r>
 8005d10:	4580      	cmp	r8, r0
 8005d12:	d13a      	bne.n	8005d8a <_malloc_r+0xd2>
 8005d14:	6821      	ldr	r1, [r4, #0]
 8005d16:	3503      	adds	r5, #3
 8005d18:	1a6d      	subs	r5, r5, r1
 8005d1a:	f025 0503 	bic.w	r5, r5, #3
 8005d1e:	3508      	adds	r5, #8
 8005d20:	2d0c      	cmp	r5, #12
 8005d22:	bf38      	it	cc
 8005d24:	250c      	movcc	r5, #12
 8005d26:	4629      	mov	r1, r5
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f7ff ffa5 	bl	8005c78 <sbrk_aligned>
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d02b      	beq.n	8005d8a <_malloc_r+0xd2>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	442b      	add	r3, r5
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	e00e      	b.n	8005d58 <_malloc_r+0xa0>
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	1b52      	subs	r2, r2, r5
 8005d3e:	d41e      	bmi.n	8005d7e <_malloc_r+0xc6>
 8005d40:	2a0b      	cmp	r2, #11
 8005d42:	d916      	bls.n	8005d72 <_malloc_r+0xba>
 8005d44:	1961      	adds	r1, r4, r5
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	6025      	str	r5, [r4, #0]
 8005d4a:	bf18      	it	ne
 8005d4c:	6059      	strne	r1, [r3, #4]
 8005d4e:	6863      	ldr	r3, [r4, #4]
 8005d50:	bf08      	it	eq
 8005d52:	6031      	streq	r1, [r6, #0]
 8005d54:	5162      	str	r2, [r4, r5]
 8005d56:	604b      	str	r3, [r1, #4]
 8005d58:	4638      	mov	r0, r7
 8005d5a:	f104 060b 	add.w	r6, r4, #11
 8005d5e:	f001 fbf3 	bl	8007548 <__malloc_unlock>
 8005d62:	f026 0607 	bic.w	r6, r6, #7
 8005d66:	1d23      	adds	r3, r4, #4
 8005d68:	1af2      	subs	r2, r6, r3
 8005d6a:	d0b6      	beq.n	8005cda <_malloc_r+0x22>
 8005d6c:	1b9b      	subs	r3, r3, r6
 8005d6e:	50a3      	str	r3, [r4, r2]
 8005d70:	e7b3      	b.n	8005cda <_malloc_r+0x22>
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	bf0c      	ite	eq
 8005d78:	6032      	streq	r2, [r6, #0]
 8005d7a:	605a      	strne	r2, [r3, #4]
 8005d7c:	e7ec      	b.n	8005d58 <_malloc_r+0xa0>
 8005d7e:	4623      	mov	r3, r4
 8005d80:	6864      	ldr	r4, [r4, #4]
 8005d82:	e7b2      	b.n	8005cea <_malloc_r+0x32>
 8005d84:	4634      	mov	r4, r6
 8005d86:	6876      	ldr	r6, [r6, #4]
 8005d88:	e7b9      	b.n	8005cfe <_malloc_r+0x46>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f001 fbda 	bl	8007548 <__malloc_unlock>
 8005d94:	e7a1      	b.n	8005cda <_malloc_r+0x22>
 8005d96:	6025      	str	r5, [r4, #0]
 8005d98:	e7de      	b.n	8005d58 <_malloc_r+0xa0>
 8005d9a:	bf00      	nop
 8005d9c:	200005b4 	.word	0x200005b4

08005da0 <__cvt>:
 8005da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da4:	ec55 4b10 	vmov	r4, r5, d0
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	460e      	mov	r6, r1
 8005dac:	4619      	mov	r1, r3
 8005dae:	462b      	mov	r3, r5
 8005db0:	bfbb      	ittet	lt
 8005db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005db6:	461d      	movlt	r5, r3
 8005db8:	2300      	movge	r3, #0
 8005dba:	232d      	movlt	r3, #45	; 0x2d
 8005dbc:	700b      	strb	r3, [r1, #0]
 8005dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005dc4:	4691      	mov	r9, r2
 8005dc6:	f023 0820 	bic.w	r8, r3, #32
 8005dca:	bfbc      	itt	lt
 8005dcc:	4622      	movlt	r2, r4
 8005dce:	4614      	movlt	r4, r2
 8005dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005dd4:	d005      	beq.n	8005de2 <__cvt+0x42>
 8005dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005dda:	d100      	bne.n	8005dde <__cvt+0x3e>
 8005ddc:	3601      	adds	r6, #1
 8005dde:	2102      	movs	r1, #2
 8005de0:	e000      	b.n	8005de4 <__cvt+0x44>
 8005de2:	2103      	movs	r1, #3
 8005de4:	ab03      	add	r3, sp, #12
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	ab02      	add	r3, sp, #8
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	ec45 4b10 	vmov	d0, r4, r5
 8005df0:	4653      	mov	r3, sl
 8005df2:	4632      	mov	r2, r6
 8005df4:	f000 fd90 	bl	8006918 <_dtoa_r>
 8005df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	d102      	bne.n	8005e06 <__cvt+0x66>
 8005e00:	f019 0f01 	tst.w	r9, #1
 8005e04:	d022      	beq.n	8005e4c <__cvt+0xac>
 8005e06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e0a:	eb07 0906 	add.w	r9, r7, r6
 8005e0e:	d110      	bne.n	8005e32 <__cvt+0x92>
 8005e10:	783b      	ldrb	r3, [r7, #0]
 8005e12:	2b30      	cmp	r3, #48	; 0x30
 8005e14:	d10a      	bne.n	8005e2c <__cvt+0x8c>
 8005e16:	2200      	movs	r2, #0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7fa fe6b 	bl	8000af8 <__aeabi_dcmpeq>
 8005e22:	b918      	cbnz	r0, 8005e2c <__cvt+0x8c>
 8005e24:	f1c6 0601 	rsb	r6, r6, #1
 8005e28:	f8ca 6000 	str.w	r6, [sl]
 8005e2c:	f8da 3000 	ldr.w	r3, [sl]
 8005e30:	4499      	add	r9, r3
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	4620      	mov	r0, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7fa fe5d 	bl	8000af8 <__aeabi_dcmpeq>
 8005e3e:	b108      	cbz	r0, 8005e44 <__cvt+0xa4>
 8005e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e44:	2230      	movs	r2, #48	; 0x30
 8005e46:	9b03      	ldr	r3, [sp, #12]
 8005e48:	454b      	cmp	r3, r9
 8005e4a:	d307      	bcc.n	8005e5c <__cvt+0xbc>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e50:	1bdb      	subs	r3, r3, r7
 8005e52:	4638      	mov	r0, r7
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	b004      	add	sp, #16
 8005e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	9103      	str	r1, [sp, #12]
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e7f0      	b.n	8005e46 <__cvt+0xa6>

08005e64 <__exponent>:
 8005e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e66:	4603      	mov	r3, r0
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	bfb8      	it	lt
 8005e6c:	4249      	neglt	r1, r1
 8005e6e:	f803 2b02 	strb.w	r2, [r3], #2
 8005e72:	bfb4      	ite	lt
 8005e74:	222d      	movlt	r2, #45	; 0x2d
 8005e76:	222b      	movge	r2, #43	; 0x2b
 8005e78:	2909      	cmp	r1, #9
 8005e7a:	7042      	strb	r2, [r0, #1]
 8005e7c:	dd2a      	ble.n	8005ed4 <__exponent+0x70>
 8005e7e:	f10d 0407 	add.w	r4, sp, #7
 8005e82:	46a4      	mov	ip, r4
 8005e84:	270a      	movs	r7, #10
 8005e86:	46a6      	mov	lr, r4
 8005e88:	460a      	mov	r2, r1
 8005e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e8e:	fb07 1516 	mls	r5, r7, r6, r1
 8005e92:	3530      	adds	r5, #48	; 0x30
 8005e94:	2a63      	cmp	r2, #99	; 0x63
 8005e96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005e9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	dcf1      	bgt.n	8005e86 <__exponent+0x22>
 8005ea2:	3130      	adds	r1, #48	; 0x30
 8005ea4:	f1ae 0502 	sub.w	r5, lr, #2
 8005ea8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005eac:	1c44      	adds	r4, r0, #1
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4561      	cmp	r1, ip
 8005eb2:	d30a      	bcc.n	8005eca <__exponent+0x66>
 8005eb4:	f10d 0209 	add.w	r2, sp, #9
 8005eb8:	eba2 020e 	sub.w	r2, r2, lr
 8005ebc:	4565      	cmp	r5, ip
 8005ebe:	bf88      	it	hi
 8005ec0:	2200      	movhi	r2, #0
 8005ec2:	4413      	add	r3, r2
 8005ec4:	1a18      	subs	r0, r3, r0
 8005ec6:	b003      	add	sp, #12
 8005ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ece:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ed2:	e7ed      	b.n	8005eb0 <__exponent+0x4c>
 8005ed4:	2330      	movs	r3, #48	; 0x30
 8005ed6:	3130      	adds	r1, #48	; 0x30
 8005ed8:	7083      	strb	r3, [r0, #2]
 8005eda:	70c1      	strb	r1, [r0, #3]
 8005edc:	1d03      	adds	r3, r0, #4
 8005ede:	e7f1      	b.n	8005ec4 <__exponent+0x60>

08005ee0 <_printf_float>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	ed2d 8b02 	vpush	{d8}
 8005ee8:	b08d      	sub	sp, #52	; 0x34
 8005eea:	460c      	mov	r4, r1
 8005eec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	461f      	mov	r7, r3
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	f001 fafd 	bl	80074f4 <_localeconv_r>
 8005efa:	f8d0 a000 	ldr.w	sl, [r0]
 8005efe:	4650      	mov	r0, sl
 8005f00:	f7fa f978 	bl	80001f4 <strlen>
 8005f04:	2300      	movs	r3, #0
 8005f06:	930a      	str	r3, [sp, #40]	; 0x28
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	9305      	str	r3, [sp, #20]
 8005f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f14:	3307      	adds	r3, #7
 8005f16:	f023 0307 	bic.w	r3, r3, #7
 8005f1a:	f103 0208 	add.w	r2, r3, #8
 8005f1e:	f8c8 2000 	str.w	r2, [r8]
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f32:	9307      	str	r3, [sp, #28]
 8005f34:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f38:	ee08 0a10 	vmov	s16, r0
 8005f3c:	4b9f      	ldr	r3, [pc, #636]	; (80061bc <_printf_float+0x2dc>)
 8005f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f46:	f7fa fe09 	bl	8000b5c <__aeabi_dcmpun>
 8005f4a:	bb88      	cbnz	r0, 8005fb0 <_printf_float+0xd0>
 8005f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f50:	4b9a      	ldr	r3, [pc, #616]	; (80061bc <_printf_float+0x2dc>)
 8005f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f56:	f7fa fde3 	bl	8000b20 <__aeabi_dcmple>
 8005f5a:	bb48      	cbnz	r0, 8005fb0 <_printf_float+0xd0>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4640      	mov	r0, r8
 8005f62:	4649      	mov	r1, r9
 8005f64:	f7fa fdd2 	bl	8000b0c <__aeabi_dcmplt>
 8005f68:	b110      	cbz	r0, 8005f70 <_printf_float+0x90>
 8005f6a:	232d      	movs	r3, #45	; 0x2d
 8005f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f70:	4b93      	ldr	r3, [pc, #588]	; (80061c0 <_printf_float+0x2e0>)
 8005f72:	4894      	ldr	r0, [pc, #592]	; (80061c4 <_printf_float+0x2e4>)
 8005f74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f78:	bf94      	ite	ls
 8005f7a:	4698      	movls	r8, r3
 8005f7c:	4680      	movhi	r8, r0
 8005f7e:	2303      	movs	r3, #3
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	9b05      	ldr	r3, [sp, #20]
 8005f84:	f023 0204 	bic.w	r2, r3, #4
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	f04f 0900 	mov.w	r9, #0
 8005f8e:	9700      	str	r7, [sp, #0]
 8005f90:	4633      	mov	r3, r6
 8005f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f94:	4621      	mov	r1, r4
 8005f96:	4628      	mov	r0, r5
 8005f98:	f000 f9d8 	bl	800634c <_printf_common>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	f040 8090 	bne.w	80060c2 <_printf_float+0x1e2>
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa6:	b00d      	add	sp, #52	; 0x34
 8005fa8:	ecbd 8b02 	vpop	{d8}
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	f7fa fdd0 	bl	8000b5c <__aeabi_dcmpun>
 8005fbc:	b140      	cbz	r0, 8005fd0 <_printf_float+0xf0>
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bfbc      	itt	lt
 8005fc4:	232d      	movlt	r3, #45	; 0x2d
 8005fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005fca:	487f      	ldr	r0, [pc, #508]	; (80061c8 <_printf_float+0x2e8>)
 8005fcc:	4b7f      	ldr	r3, [pc, #508]	; (80061cc <_printf_float+0x2ec>)
 8005fce:	e7d1      	b.n	8005f74 <_printf_float+0x94>
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005fd6:	9206      	str	r2, [sp, #24]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	d13f      	bne.n	800605c <_printf_float+0x17c>
 8005fdc:	2306      	movs	r3, #6
 8005fde:	6063      	str	r3, [r4, #4]
 8005fe0:	9b05      	ldr	r3, [sp, #20]
 8005fe2:	6861      	ldr	r1, [r4, #4]
 8005fe4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9303      	str	r3, [sp, #12]
 8005fec:	ab0a      	add	r3, sp, #40	; 0x28
 8005fee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ff2:	ab09      	add	r3, sp, #36	; 0x24
 8005ff4:	ec49 8b10 	vmov	d0, r8, r9
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6022      	str	r2, [r4, #0]
 8005ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006000:	4628      	mov	r0, r5
 8006002:	f7ff fecd 	bl	8005da0 <__cvt>
 8006006:	9b06      	ldr	r3, [sp, #24]
 8006008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800600a:	2b47      	cmp	r3, #71	; 0x47
 800600c:	4680      	mov	r8, r0
 800600e:	d108      	bne.n	8006022 <_printf_float+0x142>
 8006010:	1cc8      	adds	r0, r1, #3
 8006012:	db02      	blt.n	800601a <_printf_float+0x13a>
 8006014:	6863      	ldr	r3, [r4, #4]
 8006016:	4299      	cmp	r1, r3
 8006018:	dd41      	ble.n	800609e <_printf_float+0x1be>
 800601a:	f1ab 0b02 	sub.w	fp, fp, #2
 800601e:	fa5f fb8b 	uxtb.w	fp, fp
 8006022:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006026:	d820      	bhi.n	800606a <_printf_float+0x18a>
 8006028:	3901      	subs	r1, #1
 800602a:	465a      	mov	r2, fp
 800602c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006030:	9109      	str	r1, [sp, #36]	; 0x24
 8006032:	f7ff ff17 	bl	8005e64 <__exponent>
 8006036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006038:	1813      	adds	r3, r2, r0
 800603a:	2a01      	cmp	r2, #1
 800603c:	4681      	mov	r9, r0
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	dc02      	bgt.n	8006048 <_printf_float+0x168>
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	07d2      	lsls	r2, r2, #31
 8006046:	d501      	bpl.n	800604c <_printf_float+0x16c>
 8006048:	3301      	adds	r3, #1
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006050:	2b00      	cmp	r3, #0
 8006052:	d09c      	beq.n	8005f8e <_printf_float+0xae>
 8006054:	232d      	movs	r3, #45	; 0x2d
 8006056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605a:	e798      	b.n	8005f8e <_printf_float+0xae>
 800605c:	9a06      	ldr	r2, [sp, #24]
 800605e:	2a47      	cmp	r2, #71	; 0x47
 8006060:	d1be      	bne.n	8005fe0 <_printf_float+0x100>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1bc      	bne.n	8005fe0 <_printf_float+0x100>
 8006066:	2301      	movs	r3, #1
 8006068:	e7b9      	b.n	8005fde <_printf_float+0xfe>
 800606a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800606e:	d118      	bne.n	80060a2 <_printf_float+0x1c2>
 8006070:	2900      	cmp	r1, #0
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	dd0b      	ble.n	800608e <_printf_float+0x1ae>
 8006076:	6121      	str	r1, [r4, #16]
 8006078:	b913      	cbnz	r3, 8006080 <_printf_float+0x1a0>
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	07d0      	lsls	r0, r2, #31
 800607e:	d502      	bpl.n	8006086 <_printf_float+0x1a6>
 8006080:	3301      	adds	r3, #1
 8006082:	440b      	add	r3, r1
 8006084:	6123      	str	r3, [r4, #16]
 8006086:	65a1      	str	r1, [r4, #88]	; 0x58
 8006088:	f04f 0900 	mov.w	r9, #0
 800608c:	e7de      	b.n	800604c <_printf_float+0x16c>
 800608e:	b913      	cbnz	r3, 8006096 <_printf_float+0x1b6>
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	07d2      	lsls	r2, r2, #31
 8006094:	d501      	bpl.n	800609a <_printf_float+0x1ba>
 8006096:	3302      	adds	r3, #2
 8006098:	e7f4      	b.n	8006084 <_printf_float+0x1a4>
 800609a:	2301      	movs	r3, #1
 800609c:	e7f2      	b.n	8006084 <_printf_float+0x1a4>
 800609e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a4:	4299      	cmp	r1, r3
 80060a6:	db05      	blt.n	80060b4 <_printf_float+0x1d4>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	6121      	str	r1, [r4, #16]
 80060ac:	07d8      	lsls	r0, r3, #31
 80060ae:	d5ea      	bpl.n	8006086 <_printf_float+0x1a6>
 80060b0:	1c4b      	adds	r3, r1, #1
 80060b2:	e7e7      	b.n	8006084 <_printf_float+0x1a4>
 80060b4:	2900      	cmp	r1, #0
 80060b6:	bfd4      	ite	le
 80060b8:	f1c1 0202 	rsble	r2, r1, #2
 80060bc:	2201      	movgt	r2, #1
 80060be:	4413      	add	r3, r2
 80060c0:	e7e0      	b.n	8006084 <_printf_float+0x1a4>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	055a      	lsls	r2, r3, #21
 80060c6:	d407      	bmi.n	80060d8 <_printf_float+0x1f8>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	4642      	mov	r2, r8
 80060cc:	4631      	mov	r1, r6
 80060ce:	4628      	mov	r0, r5
 80060d0:	47b8      	blx	r7
 80060d2:	3001      	adds	r0, #1
 80060d4:	d12c      	bne.n	8006130 <_printf_float+0x250>
 80060d6:	e764      	b.n	8005fa2 <_printf_float+0xc2>
 80060d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060dc:	f240 80e0 	bls.w	80062a0 <_printf_float+0x3c0>
 80060e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060e4:	2200      	movs	r2, #0
 80060e6:	2300      	movs	r3, #0
 80060e8:	f7fa fd06 	bl	8000af8 <__aeabi_dcmpeq>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d034      	beq.n	800615a <_printf_float+0x27a>
 80060f0:	4a37      	ldr	r2, [pc, #220]	; (80061d0 <_printf_float+0x2f0>)
 80060f2:	2301      	movs	r3, #1
 80060f4:	4631      	mov	r1, r6
 80060f6:	4628      	mov	r0, r5
 80060f8:	47b8      	blx	r7
 80060fa:	3001      	adds	r0, #1
 80060fc:	f43f af51 	beq.w	8005fa2 <_printf_float+0xc2>
 8006100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006104:	429a      	cmp	r2, r3
 8006106:	db02      	blt.n	800610e <_printf_float+0x22e>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	07d8      	lsls	r0, r3, #31
 800610c:	d510      	bpl.n	8006130 <_printf_float+0x250>
 800610e:	ee18 3a10 	vmov	r3, s16
 8006112:	4652      	mov	r2, sl
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	f43f af41 	beq.w	8005fa2 <_printf_float+0xc2>
 8006120:	f04f 0800 	mov.w	r8, #0
 8006124:	f104 091a 	add.w	r9, r4, #26
 8006128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612a:	3b01      	subs	r3, #1
 800612c:	4543      	cmp	r3, r8
 800612e:	dc09      	bgt.n	8006144 <_printf_float+0x264>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	079b      	lsls	r3, r3, #30
 8006134:	f100 8105 	bmi.w	8006342 <_printf_float+0x462>
 8006138:	68e0      	ldr	r0, [r4, #12]
 800613a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613c:	4298      	cmp	r0, r3
 800613e:	bfb8      	it	lt
 8006140:	4618      	movlt	r0, r3
 8006142:	e730      	b.n	8005fa6 <_printf_float+0xc6>
 8006144:	2301      	movs	r3, #1
 8006146:	464a      	mov	r2, r9
 8006148:	4631      	mov	r1, r6
 800614a:	4628      	mov	r0, r5
 800614c:	47b8      	blx	r7
 800614e:	3001      	adds	r0, #1
 8006150:	f43f af27 	beq.w	8005fa2 <_printf_float+0xc2>
 8006154:	f108 0801 	add.w	r8, r8, #1
 8006158:	e7e6      	b.n	8006128 <_printf_float+0x248>
 800615a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	dc39      	bgt.n	80061d4 <_printf_float+0x2f4>
 8006160:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <_printf_float+0x2f0>)
 8006162:	2301      	movs	r3, #1
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f af19 	beq.w	8005fa2 <_printf_float+0xc2>
 8006170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006174:	4313      	orrs	r3, r2
 8006176:	d102      	bne.n	800617e <_printf_float+0x29e>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	d5d8      	bpl.n	8006130 <_printf_float+0x250>
 800617e:	ee18 3a10 	vmov	r3, s16
 8006182:	4652      	mov	r2, sl
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f af09 	beq.w	8005fa2 <_printf_float+0xc2>
 8006190:	f04f 0900 	mov.w	r9, #0
 8006194:	f104 0a1a 	add.w	sl, r4, #26
 8006198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619a:	425b      	negs	r3, r3
 800619c:	454b      	cmp	r3, r9
 800619e:	dc01      	bgt.n	80061a4 <_printf_float+0x2c4>
 80061a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a2:	e792      	b.n	80060ca <_printf_float+0x1ea>
 80061a4:	2301      	movs	r3, #1
 80061a6:	4652      	mov	r2, sl
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f aef7 	beq.w	8005fa2 <_printf_float+0xc2>
 80061b4:	f109 0901 	add.w	r9, r9, #1
 80061b8:	e7ee      	b.n	8006198 <_printf_float+0x2b8>
 80061ba:	bf00      	nop
 80061bc:	7fefffff 	.word	0x7fefffff
 80061c0:	0800a36c 	.word	0x0800a36c
 80061c4:	0800a370 	.word	0x0800a370
 80061c8:	0800a378 	.word	0x0800a378
 80061cc:	0800a374 	.word	0x0800a374
 80061d0:	0800a5a1 	.word	0x0800a5a1
 80061d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061d8:	429a      	cmp	r2, r3
 80061da:	bfa8      	it	ge
 80061dc:	461a      	movge	r2, r3
 80061de:	2a00      	cmp	r2, #0
 80061e0:	4691      	mov	r9, r2
 80061e2:	dc37      	bgt.n	8006254 <_printf_float+0x374>
 80061e4:	f04f 0b00 	mov.w	fp, #0
 80061e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061ec:	f104 021a 	add.w	r2, r4, #26
 80061f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	eba3 0309 	sub.w	r3, r3, r9
 80061f8:	455b      	cmp	r3, fp
 80061fa:	dc33      	bgt.n	8006264 <_printf_float+0x384>
 80061fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006200:	429a      	cmp	r2, r3
 8006202:	db3b      	blt.n	800627c <_printf_float+0x39c>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	07da      	lsls	r2, r3, #31
 8006208:	d438      	bmi.n	800627c <_printf_float+0x39c>
 800620a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620c:	9a05      	ldr	r2, [sp, #20]
 800620e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006210:	1a9a      	subs	r2, r3, r2
 8006212:	eba3 0901 	sub.w	r9, r3, r1
 8006216:	4591      	cmp	r9, r2
 8006218:	bfa8      	it	ge
 800621a:	4691      	movge	r9, r2
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	dc35      	bgt.n	800628e <_printf_float+0x3ae>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800622a:	f104 0a1a 	add.w	sl, r4, #26
 800622e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	eba3 0309 	sub.w	r3, r3, r9
 8006238:	4543      	cmp	r3, r8
 800623a:	f77f af79 	ble.w	8006130 <_printf_float+0x250>
 800623e:	2301      	movs	r3, #1
 8006240:	4652      	mov	r2, sl
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	47b8      	blx	r7
 8006248:	3001      	adds	r0, #1
 800624a:	f43f aeaa 	beq.w	8005fa2 <_printf_float+0xc2>
 800624e:	f108 0801 	add.w	r8, r8, #1
 8006252:	e7ec      	b.n	800622e <_printf_float+0x34e>
 8006254:	4613      	mov	r3, r2
 8006256:	4631      	mov	r1, r6
 8006258:	4642      	mov	r2, r8
 800625a:	4628      	mov	r0, r5
 800625c:	47b8      	blx	r7
 800625e:	3001      	adds	r0, #1
 8006260:	d1c0      	bne.n	80061e4 <_printf_float+0x304>
 8006262:	e69e      	b.n	8005fa2 <_printf_float+0xc2>
 8006264:	2301      	movs	r3, #1
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	9205      	str	r2, [sp, #20]
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f ae97 	beq.w	8005fa2 <_printf_float+0xc2>
 8006274:	9a05      	ldr	r2, [sp, #20]
 8006276:	f10b 0b01 	add.w	fp, fp, #1
 800627a:	e7b9      	b.n	80061f0 <_printf_float+0x310>
 800627c:	ee18 3a10 	vmov	r3, s16
 8006280:	4652      	mov	r2, sl
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	d1be      	bne.n	800620a <_printf_float+0x32a>
 800628c:	e689      	b.n	8005fa2 <_printf_float+0xc2>
 800628e:	9a05      	ldr	r2, [sp, #20]
 8006290:	464b      	mov	r3, r9
 8006292:	4442      	add	r2, r8
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	d1c1      	bne.n	8006222 <_printf_float+0x342>
 800629e:	e680      	b.n	8005fa2 <_printf_float+0xc2>
 80062a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a2:	2a01      	cmp	r2, #1
 80062a4:	dc01      	bgt.n	80062aa <_printf_float+0x3ca>
 80062a6:	07db      	lsls	r3, r3, #31
 80062a8:	d538      	bpl.n	800631c <_printf_float+0x43c>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4642      	mov	r2, r8
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f ae74 	beq.w	8005fa2 <_printf_float+0xc2>
 80062ba:	ee18 3a10 	vmov	r3, s16
 80062be:	4652      	mov	r2, sl
 80062c0:	4631      	mov	r1, r6
 80062c2:	4628      	mov	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	f43f ae6b 	beq.w	8005fa2 <_printf_float+0xc2>
 80062cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062d0:	2200      	movs	r2, #0
 80062d2:	2300      	movs	r3, #0
 80062d4:	f7fa fc10 	bl	8000af8 <__aeabi_dcmpeq>
 80062d8:	b9d8      	cbnz	r0, 8006312 <_printf_float+0x432>
 80062da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062dc:	f108 0201 	add.w	r2, r8, #1
 80062e0:	3b01      	subs	r3, #1
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	d10e      	bne.n	800630a <_printf_float+0x42a>
 80062ec:	e659      	b.n	8005fa2 <_printf_float+0xc2>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4652      	mov	r2, sl
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	f43f ae52 	beq.w	8005fa2 <_printf_float+0xc2>
 80062fe:	f108 0801 	add.w	r8, r8, #1
 8006302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006304:	3b01      	subs	r3, #1
 8006306:	4543      	cmp	r3, r8
 8006308:	dcf1      	bgt.n	80062ee <_printf_float+0x40e>
 800630a:	464b      	mov	r3, r9
 800630c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006310:	e6dc      	b.n	80060cc <_printf_float+0x1ec>
 8006312:	f04f 0800 	mov.w	r8, #0
 8006316:	f104 0a1a 	add.w	sl, r4, #26
 800631a:	e7f2      	b.n	8006302 <_printf_float+0x422>
 800631c:	2301      	movs	r3, #1
 800631e:	4642      	mov	r2, r8
 8006320:	e7df      	b.n	80062e2 <_printf_float+0x402>
 8006322:	2301      	movs	r3, #1
 8006324:	464a      	mov	r2, r9
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	f43f ae38 	beq.w	8005fa2 <_printf_float+0xc2>
 8006332:	f108 0801 	add.w	r8, r8, #1
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	4543      	cmp	r3, r8
 800633e:	dcf0      	bgt.n	8006322 <_printf_float+0x442>
 8006340:	e6fa      	b.n	8006138 <_printf_float+0x258>
 8006342:	f04f 0800 	mov.w	r8, #0
 8006346:	f104 0919 	add.w	r9, r4, #25
 800634a:	e7f4      	b.n	8006336 <_printf_float+0x456>

0800634c <_printf_common>:
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	4616      	mov	r6, r2
 8006352:	4699      	mov	r9, r3
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800635c:	4293      	cmp	r3, r2
 800635e:	bfb8      	it	lt
 8006360:	4613      	movlt	r3, r2
 8006362:	6033      	str	r3, [r6, #0]
 8006364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006368:	4607      	mov	r7, r0
 800636a:	460c      	mov	r4, r1
 800636c:	b10a      	cbz	r2, 8006372 <_printf_common+0x26>
 800636e:	3301      	adds	r3, #1
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	0699      	lsls	r1, r3, #26
 8006376:	bf42      	ittt	mi
 8006378:	6833      	ldrmi	r3, [r6, #0]
 800637a:	3302      	addmi	r3, #2
 800637c:	6033      	strmi	r3, [r6, #0]
 800637e:	6825      	ldr	r5, [r4, #0]
 8006380:	f015 0506 	ands.w	r5, r5, #6
 8006384:	d106      	bne.n	8006394 <_printf_common+0x48>
 8006386:	f104 0a19 	add.w	sl, r4, #25
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	6832      	ldr	r2, [r6, #0]
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	42ab      	cmp	r3, r5
 8006392:	dc26      	bgt.n	80063e2 <_printf_common+0x96>
 8006394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006398:	1e13      	subs	r3, r2, #0
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	bf18      	it	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	0692      	lsls	r2, r2, #26
 80063a2:	d42b      	bmi.n	80063fc <_printf_common+0xb0>
 80063a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063a8:	4649      	mov	r1, r9
 80063aa:	4638      	mov	r0, r7
 80063ac:	47c0      	blx	r8
 80063ae:	3001      	adds	r0, #1
 80063b0:	d01e      	beq.n	80063f0 <_printf_common+0xa4>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	68e5      	ldr	r5, [r4, #12]
 80063b6:	6832      	ldr	r2, [r6, #0]
 80063b8:	f003 0306 	and.w	r3, r3, #6
 80063bc:	2b04      	cmp	r3, #4
 80063be:	bf08      	it	eq
 80063c0:	1aad      	subeq	r5, r5, r2
 80063c2:	68a3      	ldr	r3, [r4, #8]
 80063c4:	6922      	ldr	r2, [r4, #16]
 80063c6:	bf0c      	ite	eq
 80063c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063cc:	2500      	movne	r5, #0
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bfc4      	itt	gt
 80063d2:	1a9b      	subgt	r3, r3, r2
 80063d4:	18ed      	addgt	r5, r5, r3
 80063d6:	2600      	movs	r6, #0
 80063d8:	341a      	adds	r4, #26
 80063da:	42b5      	cmp	r5, r6
 80063dc:	d11a      	bne.n	8006414 <_printf_common+0xc8>
 80063de:	2000      	movs	r0, #0
 80063e0:	e008      	b.n	80063f4 <_printf_common+0xa8>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4652      	mov	r2, sl
 80063e6:	4649      	mov	r1, r9
 80063e8:	4638      	mov	r0, r7
 80063ea:	47c0      	blx	r8
 80063ec:	3001      	adds	r0, #1
 80063ee:	d103      	bne.n	80063f8 <_printf_common+0xac>
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f8:	3501      	adds	r5, #1
 80063fa:	e7c6      	b.n	800638a <_printf_common+0x3e>
 80063fc:	18e1      	adds	r1, r4, r3
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	2030      	movs	r0, #48	; 0x30
 8006402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006406:	4422      	add	r2, r4
 8006408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800640c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006410:	3302      	adds	r3, #2
 8006412:	e7c7      	b.n	80063a4 <_printf_common+0x58>
 8006414:	2301      	movs	r3, #1
 8006416:	4622      	mov	r2, r4
 8006418:	4649      	mov	r1, r9
 800641a:	4638      	mov	r0, r7
 800641c:	47c0      	blx	r8
 800641e:	3001      	adds	r0, #1
 8006420:	d0e6      	beq.n	80063f0 <_printf_common+0xa4>
 8006422:	3601      	adds	r6, #1
 8006424:	e7d9      	b.n	80063da <_printf_common+0x8e>
	...

08006428 <_printf_i>:
 8006428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	7e0f      	ldrb	r7, [r1, #24]
 800642e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006430:	2f78      	cmp	r7, #120	; 0x78
 8006432:	4691      	mov	r9, r2
 8006434:	4680      	mov	r8, r0
 8006436:	460c      	mov	r4, r1
 8006438:	469a      	mov	sl, r3
 800643a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800643e:	d807      	bhi.n	8006450 <_printf_i+0x28>
 8006440:	2f62      	cmp	r7, #98	; 0x62
 8006442:	d80a      	bhi.n	800645a <_printf_i+0x32>
 8006444:	2f00      	cmp	r7, #0
 8006446:	f000 80d8 	beq.w	80065fa <_printf_i+0x1d2>
 800644a:	2f58      	cmp	r7, #88	; 0x58
 800644c:	f000 80a3 	beq.w	8006596 <_printf_i+0x16e>
 8006450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006458:	e03a      	b.n	80064d0 <_printf_i+0xa8>
 800645a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800645e:	2b15      	cmp	r3, #21
 8006460:	d8f6      	bhi.n	8006450 <_printf_i+0x28>
 8006462:	a101      	add	r1, pc, #4	; (adr r1, 8006468 <_printf_i+0x40>)
 8006464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006468:	080064c1 	.word	0x080064c1
 800646c:	080064d5 	.word	0x080064d5
 8006470:	08006451 	.word	0x08006451
 8006474:	08006451 	.word	0x08006451
 8006478:	08006451 	.word	0x08006451
 800647c:	08006451 	.word	0x08006451
 8006480:	080064d5 	.word	0x080064d5
 8006484:	08006451 	.word	0x08006451
 8006488:	08006451 	.word	0x08006451
 800648c:	08006451 	.word	0x08006451
 8006490:	08006451 	.word	0x08006451
 8006494:	080065e1 	.word	0x080065e1
 8006498:	08006505 	.word	0x08006505
 800649c:	080065c3 	.word	0x080065c3
 80064a0:	08006451 	.word	0x08006451
 80064a4:	08006451 	.word	0x08006451
 80064a8:	08006603 	.word	0x08006603
 80064ac:	08006451 	.word	0x08006451
 80064b0:	08006505 	.word	0x08006505
 80064b4:	08006451 	.word	0x08006451
 80064b8:	08006451 	.word	0x08006451
 80064bc:	080065cb 	.word	0x080065cb
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	602a      	str	r2, [r5, #0]
 80064c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0a3      	b.n	800661c <_printf_i+0x1f4>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	6829      	ldr	r1, [r5, #0]
 80064d8:	0606      	lsls	r6, r0, #24
 80064da:	f101 0304 	add.w	r3, r1, #4
 80064de:	d50a      	bpl.n	80064f6 <_printf_i+0xce>
 80064e0:	680e      	ldr	r6, [r1, #0]
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	2e00      	cmp	r6, #0
 80064e6:	da03      	bge.n	80064f0 <_printf_i+0xc8>
 80064e8:	232d      	movs	r3, #45	; 0x2d
 80064ea:	4276      	negs	r6, r6
 80064ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f0:	485e      	ldr	r0, [pc, #376]	; (800666c <_printf_i+0x244>)
 80064f2:	230a      	movs	r3, #10
 80064f4:	e019      	b.n	800652a <_printf_i+0x102>
 80064f6:	680e      	ldr	r6, [r1, #0]
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064fe:	bf18      	it	ne
 8006500:	b236      	sxthne	r6, r6
 8006502:	e7ef      	b.n	80064e4 <_printf_i+0xbc>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	1d19      	adds	r1, r3, #4
 800650a:	6029      	str	r1, [r5, #0]
 800650c:	0601      	lsls	r1, r0, #24
 800650e:	d501      	bpl.n	8006514 <_printf_i+0xec>
 8006510:	681e      	ldr	r6, [r3, #0]
 8006512:	e002      	b.n	800651a <_printf_i+0xf2>
 8006514:	0646      	lsls	r6, r0, #25
 8006516:	d5fb      	bpl.n	8006510 <_printf_i+0xe8>
 8006518:	881e      	ldrh	r6, [r3, #0]
 800651a:	4854      	ldr	r0, [pc, #336]	; (800666c <_printf_i+0x244>)
 800651c:	2f6f      	cmp	r7, #111	; 0x6f
 800651e:	bf0c      	ite	eq
 8006520:	2308      	moveq	r3, #8
 8006522:	230a      	movne	r3, #10
 8006524:	2100      	movs	r1, #0
 8006526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800652a:	6865      	ldr	r5, [r4, #4]
 800652c:	60a5      	str	r5, [r4, #8]
 800652e:	2d00      	cmp	r5, #0
 8006530:	bfa2      	ittt	ge
 8006532:	6821      	ldrge	r1, [r4, #0]
 8006534:	f021 0104 	bicge.w	r1, r1, #4
 8006538:	6021      	strge	r1, [r4, #0]
 800653a:	b90e      	cbnz	r6, 8006540 <_printf_i+0x118>
 800653c:	2d00      	cmp	r5, #0
 800653e:	d04d      	beq.n	80065dc <_printf_i+0x1b4>
 8006540:	4615      	mov	r5, r2
 8006542:	fbb6 f1f3 	udiv	r1, r6, r3
 8006546:	fb03 6711 	mls	r7, r3, r1, r6
 800654a:	5dc7      	ldrb	r7, [r0, r7]
 800654c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006550:	4637      	mov	r7, r6
 8006552:	42bb      	cmp	r3, r7
 8006554:	460e      	mov	r6, r1
 8006556:	d9f4      	bls.n	8006542 <_printf_i+0x11a>
 8006558:	2b08      	cmp	r3, #8
 800655a:	d10b      	bne.n	8006574 <_printf_i+0x14c>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	07de      	lsls	r6, r3, #31
 8006560:	d508      	bpl.n	8006574 <_printf_i+0x14c>
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	6861      	ldr	r1, [r4, #4]
 8006566:	4299      	cmp	r1, r3
 8006568:	bfde      	ittt	le
 800656a:	2330      	movle	r3, #48	; 0x30
 800656c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006570:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006574:	1b52      	subs	r2, r2, r5
 8006576:	6122      	str	r2, [r4, #16]
 8006578:	f8cd a000 	str.w	sl, [sp]
 800657c:	464b      	mov	r3, r9
 800657e:	aa03      	add	r2, sp, #12
 8006580:	4621      	mov	r1, r4
 8006582:	4640      	mov	r0, r8
 8006584:	f7ff fee2 	bl	800634c <_printf_common>
 8006588:	3001      	adds	r0, #1
 800658a:	d14c      	bne.n	8006626 <_printf_i+0x1fe>
 800658c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006590:	b004      	add	sp, #16
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	4835      	ldr	r0, [pc, #212]	; (800666c <_printf_i+0x244>)
 8006598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800659c:	6829      	ldr	r1, [r5, #0]
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80065a4:	6029      	str	r1, [r5, #0]
 80065a6:	061d      	lsls	r5, r3, #24
 80065a8:	d514      	bpl.n	80065d4 <_printf_i+0x1ac>
 80065aa:	07df      	lsls	r7, r3, #31
 80065ac:	bf44      	itt	mi
 80065ae:	f043 0320 	orrmi.w	r3, r3, #32
 80065b2:	6023      	strmi	r3, [r4, #0]
 80065b4:	b91e      	cbnz	r6, 80065be <_printf_i+0x196>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	f023 0320 	bic.w	r3, r3, #32
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	2310      	movs	r3, #16
 80065c0:	e7b0      	b.n	8006524 <_printf_i+0xfc>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f043 0320 	orr.w	r3, r3, #32
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	2378      	movs	r3, #120	; 0x78
 80065cc:	4828      	ldr	r0, [pc, #160]	; (8006670 <_printf_i+0x248>)
 80065ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065d2:	e7e3      	b.n	800659c <_printf_i+0x174>
 80065d4:	0659      	lsls	r1, r3, #25
 80065d6:	bf48      	it	mi
 80065d8:	b2b6      	uxthmi	r6, r6
 80065da:	e7e6      	b.n	80065aa <_printf_i+0x182>
 80065dc:	4615      	mov	r5, r2
 80065de:	e7bb      	b.n	8006558 <_printf_i+0x130>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	6826      	ldr	r6, [r4, #0]
 80065e4:	6961      	ldr	r1, [r4, #20]
 80065e6:	1d18      	adds	r0, r3, #4
 80065e8:	6028      	str	r0, [r5, #0]
 80065ea:	0635      	lsls	r5, r6, #24
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	d501      	bpl.n	80065f4 <_printf_i+0x1cc>
 80065f0:	6019      	str	r1, [r3, #0]
 80065f2:	e002      	b.n	80065fa <_printf_i+0x1d2>
 80065f4:	0670      	lsls	r0, r6, #25
 80065f6:	d5fb      	bpl.n	80065f0 <_printf_i+0x1c8>
 80065f8:	8019      	strh	r1, [r3, #0]
 80065fa:	2300      	movs	r3, #0
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	4615      	mov	r5, r2
 8006600:	e7ba      	b.n	8006578 <_printf_i+0x150>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	602a      	str	r2, [r5, #0]
 8006608:	681d      	ldr	r5, [r3, #0]
 800660a:	6862      	ldr	r2, [r4, #4]
 800660c:	2100      	movs	r1, #0
 800660e:	4628      	mov	r0, r5
 8006610:	f7f9 fdfe 	bl	8000210 <memchr>
 8006614:	b108      	cbz	r0, 800661a <_printf_i+0x1f2>
 8006616:	1b40      	subs	r0, r0, r5
 8006618:	6060      	str	r0, [r4, #4]
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	6123      	str	r3, [r4, #16]
 800661e:	2300      	movs	r3, #0
 8006620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006624:	e7a8      	b.n	8006578 <_printf_i+0x150>
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	462a      	mov	r2, r5
 800662a:	4649      	mov	r1, r9
 800662c:	4640      	mov	r0, r8
 800662e:	47d0      	blx	sl
 8006630:	3001      	adds	r0, #1
 8006632:	d0ab      	beq.n	800658c <_printf_i+0x164>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	079b      	lsls	r3, r3, #30
 8006638:	d413      	bmi.n	8006662 <_printf_i+0x23a>
 800663a:	68e0      	ldr	r0, [r4, #12]
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	4298      	cmp	r0, r3
 8006640:	bfb8      	it	lt
 8006642:	4618      	movlt	r0, r3
 8006644:	e7a4      	b.n	8006590 <_printf_i+0x168>
 8006646:	2301      	movs	r3, #1
 8006648:	4632      	mov	r2, r6
 800664a:	4649      	mov	r1, r9
 800664c:	4640      	mov	r0, r8
 800664e:	47d0      	blx	sl
 8006650:	3001      	adds	r0, #1
 8006652:	d09b      	beq.n	800658c <_printf_i+0x164>
 8006654:	3501      	adds	r5, #1
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	9903      	ldr	r1, [sp, #12]
 800665a:	1a5b      	subs	r3, r3, r1
 800665c:	42ab      	cmp	r3, r5
 800665e:	dcf2      	bgt.n	8006646 <_printf_i+0x21e>
 8006660:	e7eb      	b.n	800663a <_printf_i+0x212>
 8006662:	2500      	movs	r5, #0
 8006664:	f104 0619 	add.w	r6, r4, #25
 8006668:	e7f5      	b.n	8006656 <_printf_i+0x22e>
 800666a:	bf00      	nop
 800666c:	0800a37c 	.word	0x0800a37c
 8006670:	0800a38d 	.word	0x0800a38d

08006674 <_sbrk_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d06      	ldr	r5, [pc, #24]	; (8006690 <_sbrk_r+0x1c>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	f003 fda4 	bl	800a1cc <_sbrk>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_sbrk_r+0x1a>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_sbrk_r+0x1a>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	200005bc 	.word	0x200005bc

08006694 <siprintf>:
 8006694:	b40e      	push	{r1, r2, r3}
 8006696:	b500      	push	{lr}
 8006698:	b09c      	sub	sp, #112	; 0x70
 800669a:	ab1d      	add	r3, sp, #116	; 0x74
 800669c:	9002      	str	r0, [sp, #8]
 800669e:	9006      	str	r0, [sp, #24]
 80066a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066a4:	4809      	ldr	r0, [pc, #36]	; (80066cc <siprintf+0x38>)
 80066a6:	9107      	str	r1, [sp, #28]
 80066a8:	9104      	str	r1, [sp, #16]
 80066aa:	4909      	ldr	r1, [pc, #36]	; (80066d0 <siprintf+0x3c>)
 80066ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b0:	9105      	str	r1, [sp, #20]
 80066b2:	6800      	ldr	r0, [r0, #0]
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	a902      	add	r1, sp, #8
 80066b8:	f001 fb42 	bl	8007d40 <_svfiprintf_r>
 80066bc:	9b02      	ldr	r3, [sp, #8]
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	b01c      	add	sp, #112	; 0x70
 80066c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066c8:	b003      	add	sp, #12
 80066ca:	4770      	bx	lr
 80066cc:	20000010 	.word	0x20000010
 80066d0:	ffff0208 	.word	0xffff0208

080066d4 <siscanf>:
 80066d4:	b40e      	push	{r1, r2, r3}
 80066d6:	b510      	push	{r4, lr}
 80066d8:	b09f      	sub	sp, #124	; 0x7c
 80066da:	ac21      	add	r4, sp, #132	; 0x84
 80066dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80066e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80066e4:	9201      	str	r2, [sp, #4]
 80066e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80066ea:	9004      	str	r0, [sp, #16]
 80066ec:	9008      	str	r0, [sp, #32]
 80066ee:	f7f9 fd81 	bl	80001f4 <strlen>
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <siscanf+0x50>)
 80066f4:	9005      	str	r0, [sp, #20]
 80066f6:	9009      	str	r0, [sp, #36]	; 0x24
 80066f8:	930d      	str	r3, [sp, #52]	; 0x34
 80066fa:	480b      	ldr	r0, [pc, #44]	; (8006728 <siscanf+0x54>)
 80066fc:	9a01      	ldr	r2, [sp, #4]
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	9403      	str	r4, [sp, #12]
 8006702:	2300      	movs	r3, #0
 8006704:	9311      	str	r3, [sp, #68]	; 0x44
 8006706:	9316      	str	r3, [sp, #88]	; 0x58
 8006708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800670c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006710:	a904      	add	r1, sp, #16
 8006712:	4623      	mov	r3, r4
 8006714:	f001 fc6e 	bl	8007ff4 <__ssvfiscanf_r>
 8006718:	b01f      	add	sp, #124	; 0x7c
 800671a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800671e:	b003      	add	sp, #12
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	0800674f 	.word	0x0800674f
 8006728:	20000010 	.word	0x20000010

0800672c <__sread>:
 800672c:	b510      	push	{r4, lr}
 800672e:	460c      	mov	r4, r1
 8006730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006734:	f001 ff28 	bl	8008588 <_read_r>
 8006738:	2800      	cmp	r0, #0
 800673a:	bfab      	itete	ge
 800673c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800673e:	89a3      	ldrhlt	r3, [r4, #12]
 8006740:	181b      	addge	r3, r3, r0
 8006742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006746:	bfac      	ite	ge
 8006748:	6563      	strge	r3, [r4, #84]	; 0x54
 800674a:	81a3      	strhlt	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__seofread>:
 800674e:	2000      	movs	r0, #0
 8006750:	4770      	bx	lr

08006752 <__swrite>:
 8006752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	461f      	mov	r7, r3
 8006758:	898b      	ldrh	r3, [r1, #12]
 800675a:	05db      	lsls	r3, r3, #23
 800675c:	4605      	mov	r5, r0
 800675e:	460c      	mov	r4, r1
 8006760:	4616      	mov	r6, r2
 8006762:	d505      	bpl.n	8006770 <__swrite+0x1e>
 8006764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006768:	2302      	movs	r3, #2
 800676a:	2200      	movs	r2, #0
 800676c:	f000 fec6 	bl	80074fc <_lseek_r>
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	4632      	mov	r2, r6
 800677e:	463b      	mov	r3, r7
 8006780:	4628      	mov	r0, r5
 8006782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006786:	f000 b817 	b.w	80067b8 <_write_r>

0800678a <__sseek>:
 800678a:	b510      	push	{r4, lr}
 800678c:	460c      	mov	r4, r1
 800678e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006792:	f000 feb3 	bl	80074fc <_lseek_r>
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	bf15      	itete	ne
 800679c:	6560      	strne	r0, [r4, #84]	; 0x54
 800679e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067a6:	81a3      	strheq	r3, [r4, #12]
 80067a8:	bf18      	it	ne
 80067aa:	81a3      	strhne	r3, [r4, #12]
 80067ac:	bd10      	pop	{r4, pc}

080067ae <__sclose>:
 80067ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b2:	f000 b813 	b.w	80067dc <_close_r>
	...

080067b8 <_write_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d07      	ldr	r5, [pc, #28]	; (80067d8 <_write_r+0x20>)
 80067bc:	4604      	mov	r4, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fb facf 	bl	8001d6a <_write>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_write_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_write_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	200005bc 	.word	0x200005bc

080067dc <_close_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4d06      	ldr	r5, [pc, #24]	; (80067f8 <_close_r+0x1c>)
 80067e0:	2300      	movs	r3, #0
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	602b      	str	r3, [r5, #0]
 80067e8:	f7fb fadb 	bl	8001da2 <_close>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_close_r+0x1a>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_close_r+0x1a>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	200005bc 	.word	0x200005bc

080067fc <quorem>:
 80067fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	6903      	ldr	r3, [r0, #16]
 8006802:	690c      	ldr	r4, [r1, #16]
 8006804:	42a3      	cmp	r3, r4
 8006806:	4607      	mov	r7, r0
 8006808:	f2c0 8081 	blt.w	800690e <quorem+0x112>
 800680c:	3c01      	subs	r4, #1
 800680e:	f101 0814 	add.w	r8, r1, #20
 8006812:	f100 0514 	add.w	r5, r0, #20
 8006816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006824:	3301      	adds	r3, #1
 8006826:	429a      	cmp	r2, r3
 8006828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800682c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006830:	fbb2 f6f3 	udiv	r6, r2, r3
 8006834:	d331      	bcc.n	800689a <quorem+0x9e>
 8006836:	f04f 0e00 	mov.w	lr, #0
 800683a:	4640      	mov	r0, r8
 800683c:	46ac      	mov	ip, r5
 800683e:	46f2      	mov	sl, lr
 8006840:	f850 2b04 	ldr.w	r2, [r0], #4
 8006844:	b293      	uxth	r3, r2
 8006846:	fb06 e303 	mla	r3, r6, r3, lr
 800684a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800684e:	b29b      	uxth	r3, r3
 8006850:	ebaa 0303 	sub.w	r3, sl, r3
 8006854:	f8dc a000 	ldr.w	sl, [ip]
 8006858:	0c12      	lsrs	r2, r2, #16
 800685a:	fa13 f38a 	uxtah	r3, r3, sl
 800685e:	fb06 e202 	mla	r2, r6, r2, lr
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	9b00      	ldr	r3, [sp, #0]
 8006866:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800686a:	b292      	uxth	r2, r2
 800686c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006874:	f8bd 3000 	ldrh.w	r3, [sp]
 8006878:	4581      	cmp	r9, r0
 800687a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687e:	f84c 3b04 	str.w	r3, [ip], #4
 8006882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006886:	d2db      	bcs.n	8006840 <quorem+0x44>
 8006888:	f855 300b 	ldr.w	r3, [r5, fp]
 800688c:	b92b      	cbnz	r3, 800689a <quorem+0x9e>
 800688e:	9b01      	ldr	r3, [sp, #4]
 8006890:	3b04      	subs	r3, #4
 8006892:	429d      	cmp	r5, r3
 8006894:	461a      	mov	r2, r3
 8006896:	d32e      	bcc.n	80068f6 <quorem+0xfa>
 8006898:	613c      	str	r4, [r7, #16]
 800689a:	4638      	mov	r0, r7
 800689c:	f001 f8dc 	bl	8007a58 <__mcmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	db24      	blt.n	80068ee <quorem+0xf2>
 80068a4:	3601      	adds	r6, #1
 80068a6:	4628      	mov	r0, r5
 80068a8:	f04f 0c00 	mov.w	ip, #0
 80068ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80068b0:	f8d0 e000 	ldr.w	lr, [r0]
 80068b4:	b293      	uxth	r3, r2
 80068b6:	ebac 0303 	sub.w	r3, ip, r3
 80068ba:	0c12      	lsrs	r2, r2, #16
 80068bc:	fa13 f38e 	uxtah	r3, r3, lr
 80068c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ce:	45c1      	cmp	r9, r8
 80068d0:	f840 3b04 	str.w	r3, [r0], #4
 80068d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068d8:	d2e8      	bcs.n	80068ac <quorem+0xb0>
 80068da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068e2:	b922      	cbnz	r2, 80068ee <quorem+0xf2>
 80068e4:	3b04      	subs	r3, #4
 80068e6:	429d      	cmp	r5, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	d30a      	bcc.n	8006902 <quorem+0x106>
 80068ec:	613c      	str	r4, [r7, #16]
 80068ee:	4630      	mov	r0, r6
 80068f0:	b003      	add	sp, #12
 80068f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	3b04      	subs	r3, #4
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	d1cc      	bne.n	8006898 <quorem+0x9c>
 80068fe:	3c01      	subs	r4, #1
 8006900:	e7c7      	b.n	8006892 <quorem+0x96>
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	3b04      	subs	r3, #4
 8006906:	2a00      	cmp	r2, #0
 8006908:	d1f0      	bne.n	80068ec <quorem+0xf0>
 800690a:	3c01      	subs	r4, #1
 800690c:	e7eb      	b.n	80068e6 <quorem+0xea>
 800690e:	2000      	movs	r0, #0
 8006910:	e7ee      	b.n	80068f0 <quorem+0xf4>
 8006912:	0000      	movs	r0, r0
 8006914:	0000      	movs	r0, r0
	...

08006918 <_dtoa_r>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	ed2d 8b04 	vpush	{d8-d9}
 8006920:	ec57 6b10 	vmov	r6, r7, d0
 8006924:	b093      	sub	sp, #76	; 0x4c
 8006926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800692c:	9106      	str	r1, [sp, #24]
 800692e:	ee10 aa10 	vmov	sl, s0
 8006932:	4604      	mov	r4, r0
 8006934:	9209      	str	r2, [sp, #36]	; 0x24
 8006936:	930c      	str	r3, [sp, #48]	; 0x30
 8006938:	46bb      	mov	fp, r7
 800693a:	b975      	cbnz	r5, 800695a <_dtoa_r+0x42>
 800693c:	2010      	movs	r0, #16
 800693e:	f7ff f93f 	bl	8005bc0 <malloc>
 8006942:	4602      	mov	r2, r0
 8006944:	6260      	str	r0, [r4, #36]	; 0x24
 8006946:	b920      	cbnz	r0, 8006952 <_dtoa_r+0x3a>
 8006948:	4ba7      	ldr	r3, [pc, #668]	; (8006be8 <_dtoa_r+0x2d0>)
 800694a:	21ea      	movs	r1, #234	; 0xea
 800694c:	48a7      	ldr	r0, [pc, #668]	; (8006bec <_dtoa_r+0x2d4>)
 800694e:	f001 ff97 	bl	8008880 <__assert_func>
 8006952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006956:	6005      	str	r5, [r0, #0]
 8006958:	60c5      	str	r5, [r0, #12]
 800695a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800695c:	6819      	ldr	r1, [r3, #0]
 800695e:	b151      	cbz	r1, 8006976 <_dtoa_r+0x5e>
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	604a      	str	r2, [r1, #4]
 8006964:	2301      	movs	r3, #1
 8006966:	4093      	lsls	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fe32 	bl	80075d4 <_Bfree>
 8006970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	1e3b      	subs	r3, r7, #0
 8006978:	bfaa      	itet	ge
 800697a:	2300      	movge	r3, #0
 800697c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006980:	f8c8 3000 	strge.w	r3, [r8]
 8006984:	4b9a      	ldr	r3, [pc, #616]	; (8006bf0 <_dtoa_r+0x2d8>)
 8006986:	bfbc      	itt	lt
 8006988:	2201      	movlt	r2, #1
 800698a:	f8c8 2000 	strlt.w	r2, [r8]
 800698e:	ea33 030b 	bics.w	r3, r3, fp
 8006992:	d11b      	bne.n	80069cc <_dtoa_r+0xb4>
 8006994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006996:	f242 730f 	movw	r3, #9999	; 0x270f
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069a0:	4333      	orrs	r3, r6
 80069a2:	f000 8592 	beq.w	80074ca <_dtoa_r+0xbb2>
 80069a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069a8:	b963      	cbnz	r3, 80069c4 <_dtoa_r+0xac>
 80069aa:	4b92      	ldr	r3, [pc, #584]	; (8006bf4 <_dtoa_r+0x2dc>)
 80069ac:	e022      	b.n	80069f4 <_dtoa_r+0xdc>
 80069ae:	4b92      	ldr	r3, [pc, #584]	; (8006bf8 <_dtoa_r+0x2e0>)
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	3308      	adds	r3, #8
 80069b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	9801      	ldr	r0, [sp, #4]
 80069ba:	b013      	add	sp, #76	; 0x4c
 80069bc:	ecbd 8b04 	vpop	{d8-d9}
 80069c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	4b8b      	ldr	r3, [pc, #556]	; (8006bf4 <_dtoa_r+0x2dc>)
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	3303      	adds	r3, #3
 80069ca:	e7f3      	b.n	80069b4 <_dtoa_r+0x9c>
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	4650      	mov	r0, sl
 80069d2:	4659      	mov	r1, fp
 80069d4:	f7fa f890 	bl	8000af8 <__aeabi_dcmpeq>
 80069d8:	ec4b ab19 	vmov	d9, sl, fp
 80069dc:	4680      	mov	r8, r0
 80069de:	b158      	cbz	r0, 80069f8 <_dtoa_r+0xe0>
 80069e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e2:	2301      	movs	r3, #1
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 856b 	beq.w	80074c4 <_dtoa_r+0xbac>
 80069ee:	4883      	ldr	r0, [pc, #524]	; (8006bfc <_dtoa_r+0x2e4>)
 80069f0:	6018      	str	r0, [r3, #0]
 80069f2:	1e43      	subs	r3, r0, #1
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	e7df      	b.n	80069b8 <_dtoa_r+0xa0>
 80069f8:	ec4b ab10 	vmov	d0, sl, fp
 80069fc:	aa10      	add	r2, sp, #64	; 0x40
 80069fe:	a911      	add	r1, sp, #68	; 0x44
 8006a00:	4620      	mov	r0, r4
 8006a02:	f001 f8cf 	bl	8007ba4 <__d2b>
 8006a06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a0a:	ee08 0a10 	vmov	s16, r0
 8006a0e:	2d00      	cmp	r5, #0
 8006a10:	f000 8084 	beq.w	8006b1c <_dtoa_r+0x204>
 8006a14:	ee19 3a90 	vmov	r3, s19
 8006a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a20:	4656      	mov	r6, sl
 8006a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a2e:	4b74      	ldr	r3, [pc, #464]	; (8006c00 <_dtoa_r+0x2e8>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	4630      	mov	r0, r6
 8006a34:	4639      	mov	r1, r7
 8006a36:	f7f9 fc3f 	bl	80002b8 <__aeabi_dsub>
 8006a3a:	a365      	add	r3, pc, #404	; (adr r3, 8006bd0 <_dtoa_r+0x2b8>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fdf2 	bl	8000628 <__aeabi_dmul>
 8006a44:	a364      	add	r3, pc, #400	; (adr r3, 8006bd8 <_dtoa_r+0x2c0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fc37 	bl	80002bc <__adddf3>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	4628      	mov	r0, r5
 8006a52:	460f      	mov	r7, r1
 8006a54:	f7f9 fd7e 	bl	8000554 <__aeabi_i2d>
 8006a58:	a361      	add	r3, pc, #388	; (adr r3, 8006be0 <_dtoa_r+0x2c8>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f7f9 fde3 	bl	8000628 <__aeabi_dmul>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4630      	mov	r0, r6
 8006a68:	4639      	mov	r1, r7
 8006a6a:	f7f9 fc27 	bl	80002bc <__adddf3>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	f7fa f889 	bl	8000b88 <__aeabi_d2iz>
 8006a76:	2200      	movs	r2, #0
 8006a78:	9000      	str	r0, [sp, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7fa f844 	bl	8000b0c <__aeabi_dcmplt>
 8006a84:	b150      	cbz	r0, 8006a9c <_dtoa_r+0x184>
 8006a86:	9800      	ldr	r0, [sp, #0]
 8006a88:	f7f9 fd64 	bl	8000554 <__aeabi_i2d>
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	463b      	mov	r3, r7
 8006a90:	f7fa f832 	bl	8000af8 <__aeabi_dcmpeq>
 8006a94:	b910      	cbnz	r0, 8006a9c <_dtoa_r+0x184>
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	9b00      	ldr	r3, [sp, #0]
 8006a9e:	2b16      	cmp	r3, #22
 8006aa0:	d85a      	bhi.n	8006b58 <_dtoa_r+0x240>
 8006aa2:	9a00      	ldr	r2, [sp, #0]
 8006aa4:	4b57      	ldr	r3, [pc, #348]	; (8006c04 <_dtoa_r+0x2ec>)
 8006aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	ec51 0b19 	vmov	r0, r1, d9
 8006ab2:	f7fa f82b 	bl	8000b0c <__aeabi_dcmplt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d050      	beq.n	8006b5c <_dtoa_r+0x244>
 8006aba:	9b00      	ldr	r3, [sp, #0]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ac6:	1b5d      	subs	r5, r3, r5
 8006ac8:	1e6b      	subs	r3, r5, #1
 8006aca:	9305      	str	r3, [sp, #20]
 8006acc:	bf45      	ittet	mi
 8006ace:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ad2:	9304      	strmi	r3, [sp, #16]
 8006ad4:	2300      	movpl	r3, #0
 8006ad6:	2300      	movmi	r3, #0
 8006ad8:	bf4c      	ite	mi
 8006ada:	9305      	strmi	r3, [sp, #20]
 8006adc:	9304      	strpl	r3, [sp, #16]
 8006ade:	9b00      	ldr	r3, [sp, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db3d      	blt.n	8006b60 <_dtoa_r+0x248>
 8006ae4:	9b05      	ldr	r3, [sp, #20]
 8006ae6:	9a00      	ldr	r2, [sp, #0]
 8006ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8006aea:	4413      	add	r3, r2
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9307      	str	r3, [sp, #28]
 8006af2:	9b06      	ldr	r3, [sp, #24]
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	f200 8089 	bhi.w	8006c0c <_dtoa_r+0x2f4>
 8006afa:	2b05      	cmp	r3, #5
 8006afc:	bfc4      	itt	gt
 8006afe:	3b04      	subgt	r3, #4
 8006b00:	9306      	strgt	r3, [sp, #24]
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	f1a3 0302 	sub.w	r3, r3, #2
 8006b08:	bfcc      	ite	gt
 8006b0a:	2500      	movgt	r5, #0
 8006b0c:	2501      	movle	r5, #1
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	f200 8087 	bhi.w	8006c22 <_dtoa_r+0x30a>
 8006b14:	e8df f003 	tbb	[pc, r3]
 8006b18:	59383a2d 	.word	0x59383a2d
 8006b1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b20:	441d      	add	r5, r3
 8006b22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	bfc1      	itttt	gt
 8006b2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b32:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b3a:	bfda      	itte	le
 8006b3c:	f1c3 0320 	rsble	r3, r3, #32
 8006b40:	fa06 f003 	lslle.w	r0, r6, r3
 8006b44:	4318      	orrgt	r0, r3
 8006b46:	f7f9 fcf5 	bl	8000534 <__aeabi_ui2d>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b52:	3d01      	subs	r5, #1
 8006b54:	930e      	str	r3, [sp, #56]	; 0x38
 8006b56:	e76a      	b.n	8006a2e <_dtoa_r+0x116>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e7b2      	b.n	8006ac2 <_dtoa_r+0x1aa>
 8006b5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b5e:	e7b1      	b.n	8006ac4 <_dtoa_r+0x1ac>
 8006b60:	9b04      	ldr	r3, [sp, #16]
 8006b62:	9a00      	ldr	r2, [sp, #0]
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	4253      	negs	r3, r2
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b70:	e7bf      	b.n	8006af2 <_dtoa_r+0x1da>
 8006b72:	2300      	movs	r3, #0
 8006b74:	9308      	str	r3, [sp, #32]
 8006b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dc55      	bgt.n	8006c28 <_dtoa_r+0x310>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b82:	461a      	mov	r2, r3
 8006b84:	9209      	str	r2, [sp, #36]	; 0x24
 8006b86:	e00c      	b.n	8006ba2 <_dtoa_r+0x28a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7f3      	b.n	8006b74 <_dtoa_r+0x25c>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b90:	9308      	str	r3, [sp, #32]
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	9302      	str	r3, [sp, #8]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	bfb8      	it	lt
 8006ba0:	2301      	movlt	r3, #1
 8006ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	6042      	str	r2, [r0, #4]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	f102 0614 	add.w	r6, r2, #20
 8006bae:	429e      	cmp	r6, r3
 8006bb0:	6841      	ldr	r1, [r0, #4]
 8006bb2:	d93d      	bls.n	8006c30 <_dtoa_r+0x318>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f000 fccd 	bl	8007554 <_Balloc>
 8006bba:	9001      	str	r0, [sp, #4]
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d13b      	bne.n	8006c38 <_dtoa_r+0x320>
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <_dtoa_r+0x2f0>)
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bc8:	e6c0      	b.n	800694c <_dtoa_r+0x34>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e7df      	b.n	8006b8e <_dtoa_r+0x276>
 8006bce:	bf00      	nop
 8006bd0:	636f4361 	.word	0x636f4361
 8006bd4:	3fd287a7 	.word	0x3fd287a7
 8006bd8:	8b60c8b3 	.word	0x8b60c8b3
 8006bdc:	3fc68a28 	.word	0x3fc68a28
 8006be0:	509f79fb 	.word	0x509f79fb
 8006be4:	3fd34413 	.word	0x3fd34413
 8006be8:	0800a3ab 	.word	0x0800a3ab
 8006bec:	0800a3c2 	.word	0x0800a3c2
 8006bf0:	7ff00000 	.word	0x7ff00000
 8006bf4:	0800a3a7 	.word	0x0800a3a7
 8006bf8:	0800a39e 	.word	0x0800a39e
 8006bfc:	0800a5a2 	.word	0x0800a5a2
 8006c00:	3ff80000 	.word	0x3ff80000
 8006c04:	0800a4b8 	.word	0x0800a4b8
 8006c08:	0800a41d 	.word	0x0800a41d
 8006c0c:	2501      	movs	r5, #1
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9306      	str	r3, [sp, #24]
 8006c12:	9508      	str	r5, [sp, #32]
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2312      	movs	r3, #18
 8006c20:	e7b0      	b.n	8006b84 <_dtoa_r+0x26c>
 8006c22:	2301      	movs	r3, #1
 8006c24:	9308      	str	r3, [sp, #32]
 8006c26:	e7f5      	b.n	8006c14 <_dtoa_r+0x2fc>
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c2e:	e7b8      	b.n	8006ba2 <_dtoa_r+0x28a>
 8006c30:	3101      	adds	r1, #1
 8006c32:	6041      	str	r1, [r0, #4]
 8006c34:	0052      	lsls	r2, r2, #1
 8006c36:	e7b8      	b.n	8006baa <_dtoa_r+0x292>
 8006c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c3a:	9a01      	ldr	r2, [sp, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	2b0e      	cmp	r3, #14
 8006c42:	f200 809d 	bhi.w	8006d80 <_dtoa_r+0x468>
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	f000 809a 	beq.w	8006d80 <_dtoa_r+0x468>
 8006c4c:	9b00      	ldr	r3, [sp, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dd32      	ble.n	8006cb8 <_dtoa_r+0x3a0>
 8006c52:	4ab7      	ldr	r2, [pc, #732]	; (8006f30 <_dtoa_r+0x618>)
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c60:	9b00      	ldr	r3, [sp, #0]
 8006c62:	05d8      	lsls	r0, r3, #23
 8006c64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c68:	d516      	bpl.n	8006c98 <_dtoa_r+0x380>
 8006c6a:	4bb2      	ldr	r3, [pc, #712]	; (8006f34 <_dtoa_r+0x61c>)
 8006c6c:	ec51 0b19 	vmov	r0, r1, d9
 8006c70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c74:	f7f9 fe02 	bl	800087c <__aeabi_ddiv>
 8006c78:	f007 070f 	and.w	r7, r7, #15
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	468b      	mov	fp, r1
 8006c80:	2503      	movs	r5, #3
 8006c82:	4eac      	ldr	r6, [pc, #688]	; (8006f34 <_dtoa_r+0x61c>)
 8006c84:	b957      	cbnz	r7, 8006c9c <_dtoa_r+0x384>
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	f7f9 fdf5 	bl	800087c <__aeabi_ddiv>
 8006c92:	4682      	mov	sl, r0
 8006c94:	468b      	mov	fp, r1
 8006c96:	e028      	b.n	8006cea <_dtoa_r+0x3d2>
 8006c98:	2502      	movs	r5, #2
 8006c9a:	e7f2      	b.n	8006c82 <_dtoa_r+0x36a>
 8006c9c:	07f9      	lsls	r1, r7, #31
 8006c9e:	d508      	bpl.n	8006cb2 <_dtoa_r+0x39a>
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ca8:	f7f9 fcbe 	bl	8000628 <__aeabi_dmul>
 8006cac:	3501      	adds	r5, #1
 8006cae:	4680      	mov	r8, r0
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	107f      	asrs	r7, r7, #1
 8006cb4:	3608      	adds	r6, #8
 8006cb6:	e7e5      	b.n	8006c84 <_dtoa_r+0x36c>
 8006cb8:	f000 809b 	beq.w	8006df2 <_dtoa_r+0x4da>
 8006cbc:	9b00      	ldr	r3, [sp, #0]
 8006cbe:	4f9d      	ldr	r7, [pc, #628]	; (8006f34 <_dtoa_r+0x61c>)
 8006cc0:	425e      	negs	r6, r3
 8006cc2:	4b9b      	ldr	r3, [pc, #620]	; (8006f30 <_dtoa_r+0x618>)
 8006cc4:	f006 020f 	and.w	r2, r6, #15
 8006cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	ec51 0b19 	vmov	r0, r1, d9
 8006cd4:	f7f9 fca8 	bl	8000628 <__aeabi_dmul>
 8006cd8:	1136      	asrs	r6, r6, #4
 8006cda:	4682      	mov	sl, r0
 8006cdc:	468b      	mov	fp, r1
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2502      	movs	r5, #2
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	d17a      	bne.n	8006ddc <_dtoa_r+0x4c4>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1d3      	bne.n	8006c92 <_dtoa_r+0x37a>
 8006cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8082 	beq.w	8006df6 <_dtoa_r+0x4de>
 8006cf2:	4b91      	ldr	r3, [pc, #580]	; (8006f38 <_dtoa_r+0x620>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	f7f9 ff07 	bl	8000b0c <__aeabi_dcmplt>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d079      	beq.n	8006df6 <_dtoa_r+0x4de>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d076      	beq.n	8006df6 <_dtoa_r+0x4de>
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dd36      	ble.n	8006d7c <_dtoa_r+0x464>
 8006d0e:	9b00      	ldr	r3, [sp, #0]
 8006d10:	4650      	mov	r0, sl
 8006d12:	4659      	mov	r1, fp
 8006d14:	1e5f      	subs	r7, r3, #1
 8006d16:	2200      	movs	r2, #0
 8006d18:	4b88      	ldr	r3, [pc, #544]	; (8006f3c <_dtoa_r+0x624>)
 8006d1a:	f7f9 fc85 	bl	8000628 <__aeabi_dmul>
 8006d1e:	9e02      	ldr	r6, [sp, #8]
 8006d20:	4682      	mov	sl, r0
 8006d22:	468b      	mov	fp, r1
 8006d24:	3501      	adds	r5, #1
 8006d26:	4628      	mov	r0, r5
 8006d28:	f7f9 fc14 	bl	8000554 <__aeabi_i2d>
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	465b      	mov	r3, fp
 8006d30:	f7f9 fc7a 	bl	8000628 <__aeabi_dmul>
 8006d34:	4b82      	ldr	r3, [pc, #520]	; (8006f40 <_dtoa_r+0x628>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	f7f9 fac0 	bl	80002bc <__adddf3>
 8006d3c:	46d0      	mov	r8, sl
 8006d3e:	46d9      	mov	r9, fp
 8006d40:	4682      	mov	sl, r0
 8006d42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	d158      	bne.n	8006dfc <_dtoa_r+0x4e4>
 8006d4a:	4b7e      	ldr	r3, [pc, #504]	; (8006f44 <_dtoa_r+0x62c>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fab1 	bl	80002b8 <__aeabi_dsub>
 8006d56:	4652      	mov	r2, sl
 8006d58:	465b      	mov	r3, fp
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	4689      	mov	r9, r1
 8006d5e:	f7f9 fef3 	bl	8000b48 <__aeabi_dcmpgt>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f040 8295 	bne.w	8007292 <_dtoa_r+0x97a>
 8006d68:	4652      	mov	r2, sl
 8006d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 fecb 	bl	8000b0c <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f040 8289 	bne.w	800728e <_dtoa_r+0x976>
 8006d7c:	ec5b ab19 	vmov	sl, fp, d9
 8006d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f2c0 8148 	blt.w	8007018 <_dtoa_r+0x700>
 8006d88:	9a00      	ldr	r2, [sp, #0]
 8006d8a:	2a0e      	cmp	r2, #14
 8006d8c:	f300 8144 	bgt.w	8007018 <_dtoa_r+0x700>
 8006d90:	4b67      	ldr	r3, [pc, #412]	; (8006f30 <_dtoa_r+0x618>)
 8006d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f280 80d5 	bge.w	8006f4c <_dtoa_r+0x634>
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f300 80d1 	bgt.w	8006f4c <_dtoa_r+0x634>
 8006daa:	f040 826f 	bne.w	800728c <_dtoa_r+0x974>
 8006dae:	4b65      	ldr	r3, [pc, #404]	; (8006f44 <_dtoa_r+0x62c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fc37 	bl	8000628 <__aeabi_dmul>
 8006dba:	4652      	mov	r2, sl
 8006dbc:	465b      	mov	r3, fp
 8006dbe:	f7f9 feb9 	bl	8000b34 <__aeabi_dcmpge>
 8006dc2:	9e03      	ldr	r6, [sp, #12]
 8006dc4:	4637      	mov	r7, r6
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f040 8245 	bne.w	8007256 <_dtoa_r+0x93e>
 8006dcc:	9d01      	ldr	r5, [sp, #4]
 8006dce:	2331      	movs	r3, #49	; 0x31
 8006dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8006dd4:	9b00      	ldr	r3, [sp, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	e240      	b.n	800725e <_dtoa_r+0x946>
 8006ddc:	07f2      	lsls	r2, r6, #31
 8006dde:	d505      	bpl.n	8006dec <_dtoa_r+0x4d4>
 8006de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de4:	f7f9 fc20 	bl	8000628 <__aeabi_dmul>
 8006de8:	3501      	adds	r5, #1
 8006dea:	2301      	movs	r3, #1
 8006dec:	1076      	asrs	r6, r6, #1
 8006dee:	3708      	adds	r7, #8
 8006df0:	e777      	b.n	8006ce2 <_dtoa_r+0x3ca>
 8006df2:	2502      	movs	r5, #2
 8006df4:	e779      	b.n	8006cea <_dtoa_r+0x3d2>
 8006df6:	9f00      	ldr	r7, [sp, #0]
 8006df8:	9e03      	ldr	r6, [sp, #12]
 8006dfa:	e794      	b.n	8006d26 <_dtoa_r+0x40e>
 8006dfc:	9901      	ldr	r1, [sp, #4]
 8006dfe:	4b4c      	ldr	r3, [pc, #304]	; (8006f30 <_dtoa_r+0x618>)
 8006e00:	4431      	add	r1, r6
 8006e02:	910d      	str	r1, [sp, #52]	; 0x34
 8006e04:	9908      	ldr	r1, [sp, #32]
 8006e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e0e:	2900      	cmp	r1, #0
 8006e10:	d043      	beq.n	8006e9a <_dtoa_r+0x582>
 8006e12:	494d      	ldr	r1, [pc, #308]	; (8006f48 <_dtoa_r+0x630>)
 8006e14:	2000      	movs	r0, #0
 8006e16:	f7f9 fd31 	bl	800087c <__aeabi_ddiv>
 8006e1a:	4652      	mov	r2, sl
 8006e1c:	465b      	mov	r3, fp
 8006e1e:	f7f9 fa4b 	bl	80002b8 <__aeabi_dsub>
 8006e22:	9d01      	ldr	r5, [sp, #4]
 8006e24:	4682      	mov	sl, r0
 8006e26:	468b      	mov	fp, r1
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	f7f9 feac 	bl	8000b88 <__aeabi_d2iz>
 8006e30:	4606      	mov	r6, r0
 8006e32:	f7f9 fb8f 	bl	8000554 <__aeabi_i2d>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fa3b 	bl	80002b8 <__aeabi_dsub>
 8006e42:	3630      	adds	r6, #48	; 0x30
 8006e44:	f805 6b01 	strb.w	r6, [r5], #1
 8006e48:	4652      	mov	r2, sl
 8006e4a:	465b      	mov	r3, fp
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4689      	mov	r9, r1
 8006e50:	f7f9 fe5c 	bl	8000b0c <__aeabi_dcmplt>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d163      	bne.n	8006f20 <_dtoa_r+0x608>
 8006e58:	4642      	mov	r2, r8
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	4936      	ldr	r1, [pc, #216]	; (8006f38 <_dtoa_r+0x620>)
 8006e5e:	2000      	movs	r0, #0
 8006e60:	f7f9 fa2a 	bl	80002b8 <__aeabi_dsub>
 8006e64:	4652      	mov	r2, sl
 8006e66:	465b      	mov	r3, fp
 8006e68:	f7f9 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f040 80b5 	bne.w	8006fdc <_dtoa_r+0x6c4>
 8006e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e74:	429d      	cmp	r5, r3
 8006e76:	d081      	beq.n	8006d7c <_dtoa_r+0x464>
 8006e78:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <_dtoa_r+0x624>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4650      	mov	r0, sl
 8006e7e:	4659      	mov	r1, fp
 8006e80:	f7f9 fbd2 	bl	8000628 <__aeabi_dmul>
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <_dtoa_r+0x624>)
 8006e86:	4682      	mov	sl, r0
 8006e88:	468b      	mov	fp, r1
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f7f9 fbca 	bl	8000628 <__aeabi_dmul>
 8006e94:	4680      	mov	r8, r0
 8006e96:	4689      	mov	r9, r1
 8006e98:	e7c6      	b.n	8006e28 <_dtoa_r+0x510>
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	f7f9 fbc3 	bl	8000628 <__aeabi_dmul>
 8006ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea4:	9d01      	ldr	r5, [sp, #4]
 8006ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea8:	4682      	mov	sl, r0
 8006eaa:	468b      	mov	fp, r1
 8006eac:	4649      	mov	r1, r9
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f7f9 fe6a 	bl	8000b88 <__aeabi_d2iz>
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	f7f9 fb4d 	bl	8000554 <__aeabi_i2d>
 8006eba:	3630      	adds	r6, #48	; 0x30
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 f9f8 	bl	80002b8 <__aeabi_dsub>
 8006ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8006ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ece:	429d      	cmp	r5, r3
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4689      	mov	r9, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	d124      	bne.n	8006f24 <_dtoa_r+0x60c>
 8006eda:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <_dtoa_r+0x630>)
 8006edc:	4650      	mov	r0, sl
 8006ede:	4659      	mov	r1, fp
 8006ee0:	f7f9 f9ec 	bl	80002bc <__adddf3>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 fe2c 	bl	8000b48 <__aeabi_dcmpgt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d173      	bne.n	8006fdc <_dtoa_r+0x6c4>
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	465b      	mov	r3, fp
 8006ef8:	4913      	ldr	r1, [pc, #76]	; (8006f48 <_dtoa_r+0x630>)
 8006efa:	2000      	movs	r0, #0
 8006efc:	f7f9 f9dc 	bl	80002b8 <__aeabi_dsub>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	f7f9 fe00 	bl	8000b0c <__aeabi_dcmplt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f43f af35 	beq.w	8006d7c <_dtoa_r+0x464>
 8006f12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f14:	1e6b      	subs	r3, r5, #1
 8006f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f1c:	2b30      	cmp	r3, #48	; 0x30
 8006f1e:	d0f8      	beq.n	8006f12 <_dtoa_r+0x5fa>
 8006f20:	9700      	str	r7, [sp, #0]
 8006f22:	e049      	b.n	8006fb8 <_dtoa_r+0x6a0>
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_dtoa_r+0x624>)
 8006f26:	f7f9 fb7f 	bl	8000628 <__aeabi_dmul>
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4689      	mov	r9, r1
 8006f2e:	e7bd      	b.n	8006eac <_dtoa_r+0x594>
 8006f30:	0800a4b8 	.word	0x0800a4b8
 8006f34:	0800a490 	.word	0x0800a490
 8006f38:	3ff00000 	.word	0x3ff00000
 8006f3c:	40240000 	.word	0x40240000
 8006f40:	401c0000 	.word	0x401c0000
 8006f44:	40140000 	.word	0x40140000
 8006f48:	3fe00000 	.word	0x3fe00000
 8006f4c:	9d01      	ldr	r5, [sp, #4]
 8006f4e:	4656      	mov	r6, sl
 8006f50:	465f      	mov	r7, fp
 8006f52:	4642      	mov	r2, r8
 8006f54:	464b      	mov	r3, r9
 8006f56:	4630      	mov	r0, r6
 8006f58:	4639      	mov	r1, r7
 8006f5a:	f7f9 fc8f 	bl	800087c <__aeabi_ddiv>
 8006f5e:	f7f9 fe13 	bl	8000b88 <__aeabi_d2iz>
 8006f62:	4682      	mov	sl, r0
 8006f64:	f7f9 faf6 	bl	8000554 <__aeabi_i2d>
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f7f9 fb5c 	bl	8000628 <__aeabi_dmul>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006f7c:	f7f9 f99c 	bl	80002b8 <__aeabi_dsub>
 8006f80:	f805 6b01 	strb.w	r6, [r5], #1
 8006f84:	9e01      	ldr	r6, [sp, #4]
 8006f86:	9f03      	ldr	r7, [sp, #12]
 8006f88:	1bae      	subs	r6, r5, r6
 8006f8a:	42b7      	cmp	r7, r6
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	d135      	bne.n	8006ffe <_dtoa_r+0x6e6>
 8006f92:	f7f9 f993 	bl	80002bc <__adddf3>
 8006f96:	4642      	mov	r2, r8
 8006f98:	464b      	mov	r3, r9
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	f7f9 fdd3 	bl	8000b48 <__aeabi_dcmpgt>
 8006fa2:	b9d0      	cbnz	r0, 8006fda <_dtoa_r+0x6c2>
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	4630      	mov	r0, r6
 8006faa:	4639      	mov	r1, r7
 8006fac:	f7f9 fda4 	bl	8000af8 <__aeabi_dcmpeq>
 8006fb0:	b110      	cbz	r0, 8006fb8 <_dtoa_r+0x6a0>
 8006fb2:	f01a 0f01 	tst.w	sl, #1
 8006fb6:	d110      	bne.n	8006fda <_dtoa_r+0x6c2>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	ee18 1a10 	vmov	r1, s16
 8006fbe:	f000 fb09 	bl	80075d4 <_Bfree>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9800      	ldr	r0, [sp, #0]
 8006fc6:	702b      	strb	r3, [r5, #0]
 8006fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fca:	3001      	adds	r0, #1
 8006fcc:	6018      	str	r0, [r3, #0]
 8006fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f43f acf1 	beq.w	80069b8 <_dtoa_r+0xa0>
 8006fd6:	601d      	str	r5, [r3, #0]
 8006fd8:	e4ee      	b.n	80069b8 <_dtoa_r+0xa0>
 8006fda:	9f00      	ldr	r7, [sp, #0]
 8006fdc:	462b      	mov	r3, r5
 8006fde:	461d      	mov	r5, r3
 8006fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fe4:	2a39      	cmp	r2, #57	; 0x39
 8006fe6:	d106      	bne.n	8006ff6 <_dtoa_r+0x6de>
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d1f7      	bne.n	8006fde <_dtoa_r+0x6c6>
 8006fee:	9901      	ldr	r1, [sp, #4]
 8006ff0:	2230      	movs	r2, #48	; 0x30
 8006ff2:	3701      	adds	r7, #1
 8006ff4:	700a      	strb	r2, [r1, #0]
 8006ff6:	781a      	ldrb	r2, [r3, #0]
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e790      	b.n	8006f20 <_dtoa_r+0x608>
 8006ffe:	4ba6      	ldr	r3, [pc, #664]	; (8007298 <_dtoa_r+0x980>)
 8007000:	2200      	movs	r2, #0
 8007002:	f7f9 fb11 	bl	8000628 <__aeabi_dmul>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	f7f9 fd73 	bl	8000af8 <__aeabi_dcmpeq>
 8007012:	2800      	cmp	r0, #0
 8007014:	d09d      	beq.n	8006f52 <_dtoa_r+0x63a>
 8007016:	e7cf      	b.n	8006fb8 <_dtoa_r+0x6a0>
 8007018:	9a08      	ldr	r2, [sp, #32]
 800701a:	2a00      	cmp	r2, #0
 800701c:	f000 80d7 	beq.w	80071ce <_dtoa_r+0x8b6>
 8007020:	9a06      	ldr	r2, [sp, #24]
 8007022:	2a01      	cmp	r2, #1
 8007024:	f300 80ba 	bgt.w	800719c <_dtoa_r+0x884>
 8007028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800702a:	2a00      	cmp	r2, #0
 800702c:	f000 80b2 	beq.w	8007194 <_dtoa_r+0x87c>
 8007030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007034:	9e07      	ldr	r6, [sp, #28]
 8007036:	9d04      	ldr	r5, [sp, #16]
 8007038:	9a04      	ldr	r2, [sp, #16]
 800703a:	441a      	add	r2, r3
 800703c:	9204      	str	r2, [sp, #16]
 800703e:	9a05      	ldr	r2, [sp, #20]
 8007040:	2101      	movs	r1, #1
 8007042:	441a      	add	r2, r3
 8007044:	4620      	mov	r0, r4
 8007046:	9205      	str	r2, [sp, #20]
 8007048:	f000 fb7c 	bl	8007744 <__i2b>
 800704c:	4607      	mov	r7, r0
 800704e:	2d00      	cmp	r5, #0
 8007050:	dd0c      	ble.n	800706c <_dtoa_r+0x754>
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	dd09      	ble.n	800706c <_dtoa_r+0x754>
 8007058:	42ab      	cmp	r3, r5
 800705a:	9a04      	ldr	r2, [sp, #16]
 800705c:	bfa8      	it	ge
 800705e:	462b      	movge	r3, r5
 8007060:	1ad2      	subs	r2, r2, r3
 8007062:	9204      	str	r2, [sp, #16]
 8007064:	9a05      	ldr	r2, [sp, #20]
 8007066:	1aed      	subs	r5, r5, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	9305      	str	r3, [sp, #20]
 800706c:	9b07      	ldr	r3, [sp, #28]
 800706e:	b31b      	cbz	r3, 80070b8 <_dtoa_r+0x7a0>
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80af 	beq.w	80071d6 <_dtoa_r+0x8be>
 8007078:	2e00      	cmp	r6, #0
 800707a:	dd13      	ble.n	80070a4 <_dtoa_r+0x78c>
 800707c:	4639      	mov	r1, r7
 800707e:	4632      	mov	r2, r6
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fc1f 	bl	80078c4 <__pow5mult>
 8007086:	ee18 2a10 	vmov	r2, s16
 800708a:	4601      	mov	r1, r0
 800708c:	4607      	mov	r7, r0
 800708e:	4620      	mov	r0, r4
 8007090:	f000 fb6e 	bl	8007770 <__multiply>
 8007094:	ee18 1a10 	vmov	r1, s16
 8007098:	4680      	mov	r8, r0
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fa9a 	bl	80075d4 <_Bfree>
 80070a0:	ee08 8a10 	vmov	s16, r8
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	1b9a      	subs	r2, r3, r6
 80070a8:	d006      	beq.n	80070b8 <_dtoa_r+0x7a0>
 80070aa:	ee18 1a10 	vmov	r1, s16
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fc08 	bl	80078c4 <__pow5mult>
 80070b4:	ee08 0a10 	vmov	s16, r0
 80070b8:	2101      	movs	r1, #1
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 fb42 	bl	8007744 <__i2b>
 80070c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	4606      	mov	r6, r0
 80070c6:	f340 8088 	ble.w	80071da <_dtoa_r+0x8c2>
 80070ca:	461a      	mov	r2, r3
 80070cc:	4601      	mov	r1, r0
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 fbf8 	bl	80078c4 <__pow5mult>
 80070d4:	9b06      	ldr	r3, [sp, #24]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	4606      	mov	r6, r0
 80070da:	f340 8081 	ble.w	80071e0 <_dtoa_r+0x8c8>
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	6933      	ldr	r3, [r6, #16]
 80070e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070e8:	6918      	ldr	r0, [r3, #16]
 80070ea:	f000 fadb 	bl	80076a4 <__hi0bits>
 80070ee:	f1c0 0020 	rsb	r0, r0, #32
 80070f2:	9b05      	ldr	r3, [sp, #20]
 80070f4:	4418      	add	r0, r3
 80070f6:	f010 001f 	ands.w	r0, r0, #31
 80070fa:	f000 8092 	beq.w	8007222 <_dtoa_r+0x90a>
 80070fe:	f1c0 0320 	rsb	r3, r0, #32
 8007102:	2b04      	cmp	r3, #4
 8007104:	f340 808a 	ble.w	800721c <_dtoa_r+0x904>
 8007108:	f1c0 001c 	rsb	r0, r0, #28
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	4403      	add	r3, r0
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	9b05      	ldr	r3, [sp, #20]
 8007114:	4403      	add	r3, r0
 8007116:	4405      	add	r5, r0
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dd07      	ble.n	8007130 <_dtoa_r+0x818>
 8007120:	ee18 1a10 	vmov	r1, s16
 8007124:	461a      	mov	r2, r3
 8007126:	4620      	mov	r0, r4
 8007128:	f000 fc26 	bl	8007978 <__lshift>
 800712c:	ee08 0a10 	vmov	s16, r0
 8007130:	9b05      	ldr	r3, [sp, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dd05      	ble.n	8007142 <_dtoa_r+0x82a>
 8007136:	4631      	mov	r1, r6
 8007138:	461a      	mov	r2, r3
 800713a:	4620      	mov	r0, r4
 800713c:	f000 fc1c 	bl	8007978 <__lshift>
 8007140:	4606      	mov	r6, r0
 8007142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d06e      	beq.n	8007226 <_dtoa_r+0x90e>
 8007148:	ee18 0a10 	vmov	r0, s16
 800714c:	4631      	mov	r1, r6
 800714e:	f000 fc83 	bl	8007a58 <__mcmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	da67      	bge.n	8007226 <_dtoa_r+0x90e>
 8007156:	9b00      	ldr	r3, [sp, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	ee18 1a10 	vmov	r1, s16
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	220a      	movs	r2, #10
 8007162:	2300      	movs	r3, #0
 8007164:	4620      	mov	r0, r4
 8007166:	f000 fa57 	bl	8007618 <__multadd>
 800716a:	9b08      	ldr	r3, [sp, #32]
 800716c:	ee08 0a10 	vmov	s16, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 81b1 	beq.w	80074d8 <_dtoa_r+0xbc0>
 8007176:	2300      	movs	r3, #0
 8007178:	4639      	mov	r1, r7
 800717a:	220a      	movs	r2, #10
 800717c:	4620      	mov	r0, r4
 800717e:	f000 fa4b 	bl	8007618 <__multadd>
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	4607      	mov	r7, r0
 8007188:	f300 808e 	bgt.w	80072a8 <_dtoa_r+0x990>
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dc51      	bgt.n	8007236 <_dtoa_r+0x91e>
 8007192:	e089      	b.n	80072a8 <_dtoa_r+0x990>
 8007194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800719a:	e74b      	b.n	8007034 <_dtoa_r+0x71c>
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	1e5e      	subs	r6, r3, #1
 80071a0:	9b07      	ldr	r3, [sp, #28]
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	bfbf      	itttt	lt
 80071a6:	9b07      	ldrlt	r3, [sp, #28]
 80071a8:	9607      	strlt	r6, [sp, #28]
 80071aa:	1af2      	sublt	r2, r6, r3
 80071ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071ae:	bfb6      	itet	lt
 80071b0:	189b      	addlt	r3, r3, r2
 80071b2:	1b9e      	subge	r6, r3, r6
 80071b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	bfb8      	it	lt
 80071ba:	2600      	movlt	r6, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfb7      	itett	lt
 80071c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80071c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80071c8:	1a9d      	sublt	r5, r3, r2
 80071ca:	2300      	movlt	r3, #0
 80071cc:	e734      	b.n	8007038 <_dtoa_r+0x720>
 80071ce:	9e07      	ldr	r6, [sp, #28]
 80071d0:	9d04      	ldr	r5, [sp, #16]
 80071d2:	9f08      	ldr	r7, [sp, #32]
 80071d4:	e73b      	b.n	800704e <_dtoa_r+0x736>
 80071d6:	9a07      	ldr	r2, [sp, #28]
 80071d8:	e767      	b.n	80070aa <_dtoa_r+0x792>
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	dc18      	bgt.n	8007212 <_dtoa_r+0x8fa>
 80071e0:	f1ba 0f00 	cmp.w	sl, #0
 80071e4:	d115      	bne.n	8007212 <_dtoa_r+0x8fa>
 80071e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071ea:	b993      	cbnz	r3, 8007212 <_dtoa_r+0x8fa>
 80071ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071f0:	0d1b      	lsrs	r3, r3, #20
 80071f2:	051b      	lsls	r3, r3, #20
 80071f4:	b183      	cbz	r3, 8007218 <_dtoa_r+0x900>
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	9b05      	ldr	r3, [sp, #20]
 80071fe:	3301      	adds	r3, #1
 8007200:	9305      	str	r3, [sp, #20]
 8007202:	f04f 0801 	mov.w	r8, #1
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	2b00      	cmp	r3, #0
 800720a:	f47f af6a 	bne.w	80070e2 <_dtoa_r+0x7ca>
 800720e:	2001      	movs	r0, #1
 8007210:	e76f      	b.n	80070f2 <_dtoa_r+0x7da>
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	e7f6      	b.n	8007206 <_dtoa_r+0x8ee>
 8007218:	4698      	mov	r8, r3
 800721a:	e7f4      	b.n	8007206 <_dtoa_r+0x8ee>
 800721c:	f43f af7d 	beq.w	800711a <_dtoa_r+0x802>
 8007220:	4618      	mov	r0, r3
 8007222:	301c      	adds	r0, #28
 8007224:	e772      	b.n	800710c <_dtoa_r+0x7f4>
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	dc37      	bgt.n	800729c <_dtoa_r+0x984>
 800722c:	9b06      	ldr	r3, [sp, #24]
 800722e:	2b02      	cmp	r3, #2
 8007230:	dd34      	ble.n	800729c <_dtoa_r+0x984>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	b96b      	cbnz	r3, 8007256 <_dtoa_r+0x93e>
 800723a:	4631      	mov	r1, r6
 800723c:	2205      	movs	r2, #5
 800723e:	4620      	mov	r0, r4
 8007240:	f000 f9ea 	bl	8007618 <__multadd>
 8007244:	4601      	mov	r1, r0
 8007246:	4606      	mov	r6, r0
 8007248:	ee18 0a10 	vmov	r0, s16
 800724c:	f000 fc04 	bl	8007a58 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	f73f adbb 	bgt.w	8006dcc <_dtoa_r+0x4b4>
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	9d01      	ldr	r5, [sp, #4]
 800725a:	43db      	mvns	r3, r3
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	4631      	mov	r1, r6
 8007264:	4620      	mov	r0, r4
 8007266:	f000 f9b5 	bl	80075d4 <_Bfree>
 800726a:	2f00      	cmp	r7, #0
 800726c:	f43f aea4 	beq.w	8006fb8 <_dtoa_r+0x6a0>
 8007270:	f1b8 0f00 	cmp.w	r8, #0
 8007274:	d005      	beq.n	8007282 <_dtoa_r+0x96a>
 8007276:	45b8      	cmp	r8, r7
 8007278:	d003      	beq.n	8007282 <_dtoa_r+0x96a>
 800727a:	4641      	mov	r1, r8
 800727c:	4620      	mov	r0, r4
 800727e:	f000 f9a9 	bl	80075d4 <_Bfree>
 8007282:	4639      	mov	r1, r7
 8007284:	4620      	mov	r0, r4
 8007286:	f000 f9a5 	bl	80075d4 <_Bfree>
 800728a:	e695      	b.n	8006fb8 <_dtoa_r+0x6a0>
 800728c:	2600      	movs	r6, #0
 800728e:	4637      	mov	r7, r6
 8007290:	e7e1      	b.n	8007256 <_dtoa_r+0x93e>
 8007292:	9700      	str	r7, [sp, #0]
 8007294:	4637      	mov	r7, r6
 8007296:	e599      	b.n	8006dcc <_dtoa_r+0x4b4>
 8007298:	40240000 	.word	0x40240000
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80ca 	beq.w	8007438 <_dtoa_r+0xb20>
 80072a4:	9b03      	ldr	r3, [sp, #12]
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	dd05      	ble.n	80072b8 <_dtoa_r+0x9a0>
 80072ac:	4639      	mov	r1, r7
 80072ae:	462a      	mov	r2, r5
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fb61 	bl	8007978 <__lshift>
 80072b6:	4607      	mov	r7, r0
 80072b8:	f1b8 0f00 	cmp.w	r8, #0
 80072bc:	d05b      	beq.n	8007376 <_dtoa_r+0xa5e>
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 f947 	bl	8007554 <_Balloc>
 80072c6:	4605      	mov	r5, r0
 80072c8:	b928      	cbnz	r0, 80072d6 <_dtoa_r+0x9be>
 80072ca:	4b87      	ldr	r3, [pc, #540]	; (80074e8 <_dtoa_r+0xbd0>)
 80072cc:	4602      	mov	r2, r0
 80072ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072d2:	f7ff bb3b 	b.w	800694c <_dtoa_r+0x34>
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	3202      	adds	r2, #2
 80072da:	0092      	lsls	r2, r2, #2
 80072dc:	f107 010c 	add.w	r1, r7, #12
 80072e0:	300c      	adds	r0, #12
 80072e2:	f000 f91d 	bl	8007520 <memcpy>
 80072e6:	2201      	movs	r2, #1
 80072e8:	4629      	mov	r1, r5
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fb44 	bl	8007978 <__lshift>
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	f103 0901 	add.w	r9, r3, #1
 80072f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	9305      	str	r3, [sp, #20]
 80072fe:	f00a 0301 	and.w	r3, sl, #1
 8007302:	46b8      	mov	r8, r7
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	4607      	mov	r7, r0
 8007308:	4631      	mov	r1, r6
 800730a:	ee18 0a10 	vmov	r0, s16
 800730e:	f7ff fa75 	bl	80067fc <quorem>
 8007312:	4641      	mov	r1, r8
 8007314:	9002      	str	r0, [sp, #8]
 8007316:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800731a:	ee18 0a10 	vmov	r0, s16
 800731e:	f000 fb9b 	bl	8007a58 <__mcmp>
 8007322:	463a      	mov	r2, r7
 8007324:	9003      	str	r0, [sp, #12]
 8007326:	4631      	mov	r1, r6
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fbb1 	bl	8007a90 <__mdiff>
 800732e:	68c2      	ldr	r2, [r0, #12]
 8007330:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007334:	4605      	mov	r5, r0
 8007336:	bb02      	cbnz	r2, 800737a <_dtoa_r+0xa62>
 8007338:	4601      	mov	r1, r0
 800733a:	ee18 0a10 	vmov	r0, s16
 800733e:	f000 fb8b 	bl	8007a58 <__mcmp>
 8007342:	4602      	mov	r2, r0
 8007344:	4629      	mov	r1, r5
 8007346:	4620      	mov	r0, r4
 8007348:	9207      	str	r2, [sp, #28]
 800734a:	f000 f943 	bl	80075d4 <_Bfree>
 800734e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007352:	ea43 0102 	orr.w	r1, r3, r2
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	430b      	orrs	r3, r1
 800735a:	464d      	mov	r5, r9
 800735c:	d10f      	bne.n	800737e <_dtoa_r+0xa66>
 800735e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007362:	d02a      	beq.n	80073ba <_dtoa_r+0xaa2>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd02      	ble.n	8007370 <_dtoa_r+0xa58>
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007370:	f88b a000 	strb.w	sl, [fp]
 8007374:	e775      	b.n	8007262 <_dtoa_r+0x94a>
 8007376:	4638      	mov	r0, r7
 8007378:	e7ba      	b.n	80072f0 <_dtoa_r+0x9d8>
 800737a:	2201      	movs	r2, #1
 800737c:	e7e2      	b.n	8007344 <_dtoa_r+0xa2c>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	db04      	blt.n	800738e <_dtoa_r+0xa76>
 8007384:	9906      	ldr	r1, [sp, #24]
 8007386:	430b      	orrs	r3, r1
 8007388:	9904      	ldr	r1, [sp, #16]
 800738a:	430b      	orrs	r3, r1
 800738c:	d122      	bne.n	80073d4 <_dtoa_r+0xabc>
 800738e:	2a00      	cmp	r2, #0
 8007390:	ddee      	ble.n	8007370 <_dtoa_r+0xa58>
 8007392:	ee18 1a10 	vmov	r1, s16
 8007396:	2201      	movs	r2, #1
 8007398:	4620      	mov	r0, r4
 800739a:	f000 faed 	bl	8007978 <__lshift>
 800739e:	4631      	mov	r1, r6
 80073a0:	ee08 0a10 	vmov	s16, r0
 80073a4:	f000 fb58 	bl	8007a58 <__mcmp>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	dc03      	bgt.n	80073b4 <_dtoa_r+0xa9c>
 80073ac:	d1e0      	bne.n	8007370 <_dtoa_r+0xa58>
 80073ae:	f01a 0f01 	tst.w	sl, #1
 80073b2:	d0dd      	beq.n	8007370 <_dtoa_r+0xa58>
 80073b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073b8:	d1d7      	bne.n	800736a <_dtoa_r+0xa52>
 80073ba:	2339      	movs	r3, #57	; 0x39
 80073bc:	f88b 3000 	strb.w	r3, [fp]
 80073c0:	462b      	mov	r3, r5
 80073c2:	461d      	mov	r5, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073ca:	2a39      	cmp	r2, #57	; 0x39
 80073cc:	d071      	beq.n	80074b2 <_dtoa_r+0xb9a>
 80073ce:	3201      	adds	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e746      	b.n	8007262 <_dtoa_r+0x94a>
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	dd07      	ble.n	80073e8 <_dtoa_r+0xad0>
 80073d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073dc:	d0ed      	beq.n	80073ba <_dtoa_r+0xaa2>
 80073de:	f10a 0301 	add.w	r3, sl, #1
 80073e2:	f88b 3000 	strb.w	r3, [fp]
 80073e6:	e73c      	b.n	8007262 <_dtoa_r+0x94a>
 80073e8:	9b05      	ldr	r3, [sp, #20]
 80073ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80073ee:	4599      	cmp	r9, r3
 80073f0:	d047      	beq.n	8007482 <_dtoa_r+0xb6a>
 80073f2:	ee18 1a10 	vmov	r1, s16
 80073f6:	2300      	movs	r3, #0
 80073f8:	220a      	movs	r2, #10
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 f90c 	bl	8007618 <__multadd>
 8007400:	45b8      	cmp	r8, r7
 8007402:	ee08 0a10 	vmov	s16, r0
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	f04f 020a 	mov.w	r2, #10
 800740e:	4641      	mov	r1, r8
 8007410:	4620      	mov	r0, r4
 8007412:	d106      	bne.n	8007422 <_dtoa_r+0xb0a>
 8007414:	f000 f900 	bl	8007618 <__multadd>
 8007418:	4680      	mov	r8, r0
 800741a:	4607      	mov	r7, r0
 800741c:	f109 0901 	add.w	r9, r9, #1
 8007420:	e772      	b.n	8007308 <_dtoa_r+0x9f0>
 8007422:	f000 f8f9 	bl	8007618 <__multadd>
 8007426:	4639      	mov	r1, r7
 8007428:	4680      	mov	r8, r0
 800742a:	2300      	movs	r3, #0
 800742c:	220a      	movs	r2, #10
 800742e:	4620      	mov	r0, r4
 8007430:	f000 f8f2 	bl	8007618 <__multadd>
 8007434:	4607      	mov	r7, r0
 8007436:	e7f1      	b.n	800741c <_dtoa_r+0xb04>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	9d01      	ldr	r5, [sp, #4]
 800743e:	ee18 0a10 	vmov	r0, s16
 8007442:	4631      	mov	r1, r6
 8007444:	f7ff f9da 	bl	80067fc <quorem>
 8007448:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	f805 ab01 	strb.w	sl, [r5], #1
 8007452:	1aea      	subs	r2, r5, r3
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	4293      	cmp	r3, r2
 8007458:	dd09      	ble.n	800746e <_dtoa_r+0xb56>
 800745a:	ee18 1a10 	vmov	r1, s16
 800745e:	2300      	movs	r3, #0
 8007460:	220a      	movs	r2, #10
 8007462:	4620      	mov	r0, r4
 8007464:	f000 f8d8 	bl	8007618 <__multadd>
 8007468:	ee08 0a10 	vmov	s16, r0
 800746c:	e7e7      	b.n	800743e <_dtoa_r+0xb26>
 800746e:	9b02      	ldr	r3, [sp, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	bfc8      	it	gt
 8007474:	461d      	movgt	r5, r3
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	bfd8      	it	le
 800747a:	2501      	movle	r5, #1
 800747c:	441d      	add	r5, r3
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	ee18 1a10 	vmov	r1, s16
 8007486:	2201      	movs	r2, #1
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fa75 	bl	8007978 <__lshift>
 800748e:	4631      	mov	r1, r6
 8007490:	ee08 0a10 	vmov	s16, r0
 8007494:	f000 fae0 	bl	8007a58 <__mcmp>
 8007498:	2800      	cmp	r0, #0
 800749a:	dc91      	bgt.n	80073c0 <_dtoa_r+0xaa8>
 800749c:	d102      	bne.n	80074a4 <_dtoa_r+0xb8c>
 800749e:	f01a 0f01 	tst.w	sl, #1
 80074a2:	d18d      	bne.n	80073c0 <_dtoa_r+0xaa8>
 80074a4:	462b      	mov	r3, r5
 80074a6:	461d      	mov	r5, r3
 80074a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ac:	2a30      	cmp	r2, #48	; 0x30
 80074ae:	d0fa      	beq.n	80074a6 <_dtoa_r+0xb8e>
 80074b0:	e6d7      	b.n	8007262 <_dtoa_r+0x94a>
 80074b2:	9a01      	ldr	r2, [sp, #4]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d184      	bne.n	80073c2 <_dtoa_r+0xaaa>
 80074b8:	9b00      	ldr	r3, [sp, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	2331      	movs	r3, #49	; 0x31
 80074c0:	7013      	strb	r3, [r2, #0]
 80074c2:	e6ce      	b.n	8007262 <_dtoa_r+0x94a>
 80074c4:	4b09      	ldr	r3, [pc, #36]	; (80074ec <_dtoa_r+0xbd4>)
 80074c6:	f7ff ba95 	b.w	80069f4 <_dtoa_r+0xdc>
 80074ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f47f aa6e 	bne.w	80069ae <_dtoa_r+0x96>
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <_dtoa_r+0xbd8>)
 80074d4:	f7ff ba8e 	b.w	80069f4 <_dtoa_r+0xdc>
 80074d8:	9b02      	ldr	r3, [sp, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	dcae      	bgt.n	800743c <_dtoa_r+0xb24>
 80074de:	9b06      	ldr	r3, [sp, #24]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	f73f aea8 	bgt.w	8007236 <_dtoa_r+0x91e>
 80074e6:	e7a9      	b.n	800743c <_dtoa_r+0xb24>
 80074e8:	0800a41d 	.word	0x0800a41d
 80074ec:	0800a5a1 	.word	0x0800a5a1
 80074f0:	0800a39e 	.word	0x0800a39e

080074f4 <_localeconv_r>:
 80074f4:	4800      	ldr	r0, [pc, #0]	; (80074f8 <_localeconv_r+0x4>)
 80074f6:	4770      	bx	lr
 80074f8:	20000164 	.word	0x20000164

080074fc <_lseek_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	4d07      	ldr	r5, [pc, #28]	; (800751c <_lseek_r+0x20>)
 8007500:	4604      	mov	r4, r0
 8007502:	4608      	mov	r0, r1
 8007504:	4611      	mov	r1, r2
 8007506:	2200      	movs	r2, #0
 8007508:	602a      	str	r2, [r5, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	f7fa fc70 	bl	8001df0 <_lseek>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d102      	bne.n	800751a <_lseek_r+0x1e>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b103      	cbz	r3, 800751a <_lseek_r+0x1e>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	200005bc 	.word	0x200005bc

08007520 <memcpy>:
 8007520:	440a      	add	r2, r1
 8007522:	4291      	cmp	r1, r2
 8007524:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007528:	d100      	bne.n	800752c <memcpy+0xc>
 800752a:	4770      	bx	lr
 800752c:	b510      	push	{r4, lr}
 800752e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007536:	4291      	cmp	r1, r2
 8007538:	d1f9      	bne.n	800752e <memcpy+0xe>
 800753a:	bd10      	pop	{r4, pc}

0800753c <__malloc_lock>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__malloc_lock+0x8>)
 800753e:	f001 bb87 	b.w	8008c50 <__retarget_lock_acquire_recursive>
 8007542:	bf00      	nop
 8007544:	200005c0 	.word	0x200005c0

08007548 <__malloc_unlock>:
 8007548:	4801      	ldr	r0, [pc, #4]	; (8007550 <__malloc_unlock+0x8>)
 800754a:	f001 bb82 	b.w	8008c52 <__retarget_lock_release_recursive>
 800754e:	bf00      	nop
 8007550:	200005c0 	.word	0x200005c0

08007554 <_Balloc>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007558:	4604      	mov	r4, r0
 800755a:	460d      	mov	r5, r1
 800755c:	b976      	cbnz	r6, 800757c <_Balloc+0x28>
 800755e:	2010      	movs	r0, #16
 8007560:	f7fe fb2e 	bl	8005bc0 <malloc>
 8007564:	4602      	mov	r2, r0
 8007566:	6260      	str	r0, [r4, #36]	; 0x24
 8007568:	b920      	cbnz	r0, 8007574 <_Balloc+0x20>
 800756a:	4b18      	ldr	r3, [pc, #96]	; (80075cc <_Balloc+0x78>)
 800756c:	4818      	ldr	r0, [pc, #96]	; (80075d0 <_Balloc+0x7c>)
 800756e:	2166      	movs	r1, #102	; 0x66
 8007570:	f001 f986 	bl	8008880 <__assert_func>
 8007574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007578:	6006      	str	r6, [r0, #0]
 800757a:	60c6      	str	r6, [r0, #12]
 800757c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800757e:	68f3      	ldr	r3, [r6, #12]
 8007580:	b183      	cbz	r3, 80075a4 <_Balloc+0x50>
 8007582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800758a:	b9b8      	cbnz	r0, 80075bc <_Balloc+0x68>
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f605 	lsl.w	r6, r1, r5
 8007592:	1d72      	adds	r2, r6, #5
 8007594:	0092      	lsls	r2, r2, #2
 8007596:	4620      	mov	r0, r4
 8007598:	f000 fb60 	bl	8007c5c <_calloc_r>
 800759c:	b160      	cbz	r0, 80075b8 <_Balloc+0x64>
 800759e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075a2:	e00e      	b.n	80075c2 <_Balloc+0x6e>
 80075a4:	2221      	movs	r2, #33	; 0x21
 80075a6:	2104      	movs	r1, #4
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fb57 	bl	8007c5c <_calloc_r>
 80075ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075b0:	60f0      	str	r0, [r6, #12]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e4      	bne.n	8007582 <_Balloc+0x2e>
 80075b8:	2000      	movs	r0, #0
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	6802      	ldr	r2, [r0, #0]
 80075be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075c2:	2300      	movs	r3, #0
 80075c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075c8:	e7f7      	b.n	80075ba <_Balloc+0x66>
 80075ca:	bf00      	nop
 80075cc:	0800a3ab 	.word	0x0800a3ab
 80075d0:	0800a42e 	.word	0x0800a42e

080075d4 <_Bfree>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075d8:	4605      	mov	r5, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	b976      	cbnz	r6, 80075fc <_Bfree+0x28>
 80075de:	2010      	movs	r0, #16
 80075e0:	f7fe faee 	bl	8005bc0 <malloc>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6268      	str	r0, [r5, #36]	; 0x24
 80075e8:	b920      	cbnz	r0, 80075f4 <_Bfree+0x20>
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <_Bfree+0x3c>)
 80075ec:	4809      	ldr	r0, [pc, #36]	; (8007614 <_Bfree+0x40>)
 80075ee:	218a      	movs	r1, #138	; 0x8a
 80075f0:	f001 f946 	bl	8008880 <__assert_func>
 80075f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075f8:	6006      	str	r6, [r0, #0]
 80075fa:	60c6      	str	r6, [r0, #12]
 80075fc:	b13c      	cbz	r4, 800760e <_Bfree+0x3a>
 80075fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007600:	6862      	ldr	r2, [r4, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007608:	6021      	str	r1, [r4, #0]
 800760a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	0800a3ab 	.word	0x0800a3ab
 8007614:	0800a42e 	.word	0x0800a42e

08007618 <__multadd>:
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	690d      	ldr	r5, [r1, #16]
 800761e:	4607      	mov	r7, r0
 8007620:	460c      	mov	r4, r1
 8007622:	461e      	mov	r6, r3
 8007624:	f101 0c14 	add.w	ip, r1, #20
 8007628:	2000      	movs	r0, #0
 800762a:	f8dc 3000 	ldr.w	r3, [ip]
 800762e:	b299      	uxth	r1, r3
 8007630:	fb02 6101 	mla	r1, r2, r1, r6
 8007634:	0c1e      	lsrs	r6, r3, #16
 8007636:	0c0b      	lsrs	r3, r1, #16
 8007638:	fb02 3306 	mla	r3, r2, r6, r3
 800763c:	b289      	uxth	r1, r1
 800763e:	3001      	adds	r0, #1
 8007640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007644:	4285      	cmp	r5, r0
 8007646:	f84c 1b04 	str.w	r1, [ip], #4
 800764a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800764e:	dcec      	bgt.n	800762a <__multadd+0x12>
 8007650:	b30e      	cbz	r6, 8007696 <__multadd+0x7e>
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	42ab      	cmp	r3, r5
 8007656:	dc19      	bgt.n	800768c <__multadd+0x74>
 8007658:	6861      	ldr	r1, [r4, #4]
 800765a:	4638      	mov	r0, r7
 800765c:	3101      	adds	r1, #1
 800765e:	f7ff ff79 	bl	8007554 <_Balloc>
 8007662:	4680      	mov	r8, r0
 8007664:	b928      	cbnz	r0, 8007672 <__multadd+0x5a>
 8007666:	4602      	mov	r2, r0
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <__multadd+0x84>)
 800766a:	480d      	ldr	r0, [pc, #52]	; (80076a0 <__multadd+0x88>)
 800766c:	21b5      	movs	r1, #181	; 0xb5
 800766e:	f001 f907 	bl	8008880 <__assert_func>
 8007672:	6922      	ldr	r2, [r4, #16]
 8007674:	3202      	adds	r2, #2
 8007676:	f104 010c 	add.w	r1, r4, #12
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	300c      	adds	r0, #12
 800767e:	f7ff ff4f 	bl	8007520 <memcpy>
 8007682:	4621      	mov	r1, r4
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ffa5 	bl	80075d4 <_Bfree>
 800768a:	4644      	mov	r4, r8
 800768c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007690:	3501      	adds	r5, #1
 8007692:	615e      	str	r6, [r3, #20]
 8007694:	6125      	str	r5, [r4, #16]
 8007696:	4620      	mov	r0, r4
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	0800a41d 	.word	0x0800a41d
 80076a0:	0800a42e 	.word	0x0800a42e

080076a4 <__hi0bits>:
 80076a4:	0c03      	lsrs	r3, r0, #16
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	b9d3      	cbnz	r3, 80076e0 <__hi0bits+0x3c>
 80076aa:	0400      	lsls	r0, r0, #16
 80076ac:	2310      	movs	r3, #16
 80076ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076b2:	bf04      	itt	eq
 80076b4:	0200      	lsleq	r0, r0, #8
 80076b6:	3308      	addeq	r3, #8
 80076b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076bc:	bf04      	itt	eq
 80076be:	0100      	lsleq	r0, r0, #4
 80076c0:	3304      	addeq	r3, #4
 80076c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076c6:	bf04      	itt	eq
 80076c8:	0080      	lsleq	r0, r0, #2
 80076ca:	3302      	addeq	r3, #2
 80076cc:	2800      	cmp	r0, #0
 80076ce:	db05      	blt.n	80076dc <__hi0bits+0x38>
 80076d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076d4:	f103 0301 	add.w	r3, r3, #1
 80076d8:	bf08      	it	eq
 80076da:	2320      	moveq	r3, #32
 80076dc:	4618      	mov	r0, r3
 80076de:	4770      	bx	lr
 80076e0:	2300      	movs	r3, #0
 80076e2:	e7e4      	b.n	80076ae <__hi0bits+0xa>

080076e4 <__lo0bits>:
 80076e4:	6803      	ldr	r3, [r0, #0]
 80076e6:	f013 0207 	ands.w	r2, r3, #7
 80076ea:	4601      	mov	r1, r0
 80076ec:	d00b      	beq.n	8007706 <__lo0bits+0x22>
 80076ee:	07da      	lsls	r2, r3, #31
 80076f0:	d423      	bmi.n	800773a <__lo0bits+0x56>
 80076f2:	0798      	lsls	r0, r3, #30
 80076f4:	bf49      	itett	mi
 80076f6:	085b      	lsrmi	r3, r3, #1
 80076f8:	089b      	lsrpl	r3, r3, #2
 80076fa:	2001      	movmi	r0, #1
 80076fc:	600b      	strmi	r3, [r1, #0]
 80076fe:	bf5c      	itt	pl
 8007700:	600b      	strpl	r3, [r1, #0]
 8007702:	2002      	movpl	r0, #2
 8007704:	4770      	bx	lr
 8007706:	b298      	uxth	r0, r3
 8007708:	b9a8      	cbnz	r0, 8007736 <__lo0bits+0x52>
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	2010      	movs	r0, #16
 800770e:	b2da      	uxtb	r2, r3
 8007710:	b90a      	cbnz	r2, 8007716 <__lo0bits+0x32>
 8007712:	3008      	adds	r0, #8
 8007714:	0a1b      	lsrs	r3, r3, #8
 8007716:	071a      	lsls	r2, r3, #28
 8007718:	bf04      	itt	eq
 800771a:	091b      	lsreq	r3, r3, #4
 800771c:	3004      	addeq	r0, #4
 800771e:	079a      	lsls	r2, r3, #30
 8007720:	bf04      	itt	eq
 8007722:	089b      	lsreq	r3, r3, #2
 8007724:	3002      	addeq	r0, #2
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	d403      	bmi.n	8007732 <__lo0bits+0x4e>
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	f100 0001 	add.w	r0, r0, #1
 8007730:	d005      	beq.n	800773e <__lo0bits+0x5a>
 8007732:	600b      	str	r3, [r1, #0]
 8007734:	4770      	bx	lr
 8007736:	4610      	mov	r0, r2
 8007738:	e7e9      	b.n	800770e <__lo0bits+0x2a>
 800773a:	2000      	movs	r0, #0
 800773c:	4770      	bx	lr
 800773e:	2020      	movs	r0, #32
 8007740:	4770      	bx	lr
	...

08007744 <__i2b>:
 8007744:	b510      	push	{r4, lr}
 8007746:	460c      	mov	r4, r1
 8007748:	2101      	movs	r1, #1
 800774a:	f7ff ff03 	bl	8007554 <_Balloc>
 800774e:	4602      	mov	r2, r0
 8007750:	b928      	cbnz	r0, 800775e <__i2b+0x1a>
 8007752:	4b05      	ldr	r3, [pc, #20]	; (8007768 <__i2b+0x24>)
 8007754:	4805      	ldr	r0, [pc, #20]	; (800776c <__i2b+0x28>)
 8007756:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800775a:	f001 f891 	bl	8008880 <__assert_func>
 800775e:	2301      	movs	r3, #1
 8007760:	6144      	str	r4, [r0, #20]
 8007762:	6103      	str	r3, [r0, #16]
 8007764:	bd10      	pop	{r4, pc}
 8007766:	bf00      	nop
 8007768:	0800a41d 	.word	0x0800a41d
 800776c:	0800a42e 	.word	0x0800a42e

08007770 <__multiply>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	4691      	mov	r9, r2
 8007776:	690a      	ldr	r2, [r1, #16]
 8007778:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	bfb8      	it	lt
 8007780:	460b      	movlt	r3, r1
 8007782:	460c      	mov	r4, r1
 8007784:	bfbc      	itt	lt
 8007786:	464c      	movlt	r4, r9
 8007788:	4699      	movlt	r9, r3
 800778a:	6927      	ldr	r7, [r4, #16]
 800778c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007790:	68a3      	ldr	r3, [r4, #8]
 8007792:	6861      	ldr	r1, [r4, #4]
 8007794:	eb07 060a 	add.w	r6, r7, sl
 8007798:	42b3      	cmp	r3, r6
 800779a:	b085      	sub	sp, #20
 800779c:	bfb8      	it	lt
 800779e:	3101      	addlt	r1, #1
 80077a0:	f7ff fed8 	bl	8007554 <_Balloc>
 80077a4:	b930      	cbnz	r0, 80077b4 <__multiply+0x44>
 80077a6:	4602      	mov	r2, r0
 80077a8:	4b44      	ldr	r3, [pc, #272]	; (80078bc <__multiply+0x14c>)
 80077aa:	4845      	ldr	r0, [pc, #276]	; (80078c0 <__multiply+0x150>)
 80077ac:	f240 115d 	movw	r1, #349	; 0x15d
 80077b0:	f001 f866 	bl	8008880 <__assert_func>
 80077b4:	f100 0514 	add.w	r5, r0, #20
 80077b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077bc:	462b      	mov	r3, r5
 80077be:	2200      	movs	r2, #0
 80077c0:	4543      	cmp	r3, r8
 80077c2:	d321      	bcc.n	8007808 <__multiply+0x98>
 80077c4:	f104 0314 	add.w	r3, r4, #20
 80077c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077cc:	f109 0314 	add.w	r3, r9, #20
 80077d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077d4:	9202      	str	r2, [sp, #8]
 80077d6:	1b3a      	subs	r2, r7, r4
 80077d8:	3a15      	subs	r2, #21
 80077da:	f022 0203 	bic.w	r2, r2, #3
 80077de:	3204      	adds	r2, #4
 80077e0:	f104 0115 	add.w	r1, r4, #21
 80077e4:	428f      	cmp	r7, r1
 80077e6:	bf38      	it	cc
 80077e8:	2204      	movcc	r2, #4
 80077ea:	9201      	str	r2, [sp, #4]
 80077ec:	9a02      	ldr	r2, [sp, #8]
 80077ee:	9303      	str	r3, [sp, #12]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d80c      	bhi.n	800780e <__multiply+0x9e>
 80077f4:	2e00      	cmp	r6, #0
 80077f6:	dd03      	ble.n	8007800 <__multiply+0x90>
 80077f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d05a      	beq.n	80078b6 <__multiply+0x146>
 8007800:	6106      	str	r6, [r0, #16]
 8007802:	b005      	add	sp, #20
 8007804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007808:	f843 2b04 	str.w	r2, [r3], #4
 800780c:	e7d8      	b.n	80077c0 <__multiply+0x50>
 800780e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007812:	f1ba 0f00 	cmp.w	sl, #0
 8007816:	d024      	beq.n	8007862 <__multiply+0xf2>
 8007818:	f104 0e14 	add.w	lr, r4, #20
 800781c:	46a9      	mov	r9, r5
 800781e:	f04f 0c00 	mov.w	ip, #0
 8007822:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007826:	f8d9 1000 	ldr.w	r1, [r9]
 800782a:	fa1f fb82 	uxth.w	fp, r2
 800782e:	b289      	uxth	r1, r1
 8007830:	fb0a 110b 	mla	r1, sl, fp, r1
 8007834:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007838:	f8d9 2000 	ldr.w	r2, [r9]
 800783c:	4461      	add	r1, ip
 800783e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007842:	fb0a c20b 	mla	r2, sl, fp, ip
 8007846:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800784a:	b289      	uxth	r1, r1
 800784c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007850:	4577      	cmp	r7, lr
 8007852:	f849 1b04 	str.w	r1, [r9], #4
 8007856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800785a:	d8e2      	bhi.n	8007822 <__multiply+0xb2>
 800785c:	9a01      	ldr	r2, [sp, #4]
 800785e:	f845 c002 	str.w	ip, [r5, r2]
 8007862:	9a03      	ldr	r2, [sp, #12]
 8007864:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007868:	3304      	adds	r3, #4
 800786a:	f1b9 0f00 	cmp.w	r9, #0
 800786e:	d020      	beq.n	80078b2 <__multiply+0x142>
 8007870:	6829      	ldr	r1, [r5, #0]
 8007872:	f104 0c14 	add.w	ip, r4, #20
 8007876:	46ae      	mov	lr, r5
 8007878:	f04f 0a00 	mov.w	sl, #0
 800787c:	f8bc b000 	ldrh.w	fp, [ip]
 8007880:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007884:	fb09 220b 	mla	r2, r9, fp, r2
 8007888:	4492      	add	sl, r2
 800788a:	b289      	uxth	r1, r1
 800788c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007890:	f84e 1b04 	str.w	r1, [lr], #4
 8007894:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007898:	f8be 1000 	ldrh.w	r1, [lr]
 800789c:	0c12      	lsrs	r2, r2, #16
 800789e:	fb09 1102 	mla	r1, r9, r2, r1
 80078a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80078a6:	4567      	cmp	r7, ip
 80078a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078ac:	d8e6      	bhi.n	800787c <__multiply+0x10c>
 80078ae:	9a01      	ldr	r2, [sp, #4]
 80078b0:	50a9      	str	r1, [r5, r2]
 80078b2:	3504      	adds	r5, #4
 80078b4:	e79a      	b.n	80077ec <__multiply+0x7c>
 80078b6:	3e01      	subs	r6, #1
 80078b8:	e79c      	b.n	80077f4 <__multiply+0x84>
 80078ba:	bf00      	nop
 80078bc:	0800a41d 	.word	0x0800a41d
 80078c0:	0800a42e 	.word	0x0800a42e

080078c4 <__pow5mult>:
 80078c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c8:	4615      	mov	r5, r2
 80078ca:	f012 0203 	ands.w	r2, r2, #3
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	d007      	beq.n	80078e4 <__pow5mult+0x20>
 80078d4:	4c25      	ldr	r4, [pc, #148]	; (800796c <__pow5mult+0xa8>)
 80078d6:	3a01      	subs	r2, #1
 80078d8:	2300      	movs	r3, #0
 80078da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078de:	f7ff fe9b 	bl	8007618 <__multadd>
 80078e2:	4607      	mov	r7, r0
 80078e4:	10ad      	asrs	r5, r5, #2
 80078e6:	d03d      	beq.n	8007964 <__pow5mult+0xa0>
 80078e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078ea:	b97c      	cbnz	r4, 800790c <__pow5mult+0x48>
 80078ec:	2010      	movs	r0, #16
 80078ee:	f7fe f967 	bl	8005bc0 <malloc>
 80078f2:	4602      	mov	r2, r0
 80078f4:	6270      	str	r0, [r6, #36]	; 0x24
 80078f6:	b928      	cbnz	r0, 8007904 <__pow5mult+0x40>
 80078f8:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <__pow5mult+0xac>)
 80078fa:	481e      	ldr	r0, [pc, #120]	; (8007974 <__pow5mult+0xb0>)
 80078fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007900:	f000 ffbe 	bl	8008880 <__assert_func>
 8007904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007908:	6004      	str	r4, [r0, #0]
 800790a:	60c4      	str	r4, [r0, #12]
 800790c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007914:	b94c      	cbnz	r4, 800792a <__pow5mult+0x66>
 8007916:	f240 2171 	movw	r1, #625	; 0x271
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ff12 	bl	8007744 <__i2b>
 8007920:	2300      	movs	r3, #0
 8007922:	f8c8 0008 	str.w	r0, [r8, #8]
 8007926:	4604      	mov	r4, r0
 8007928:	6003      	str	r3, [r0, #0]
 800792a:	f04f 0900 	mov.w	r9, #0
 800792e:	07eb      	lsls	r3, r5, #31
 8007930:	d50a      	bpl.n	8007948 <__pow5mult+0x84>
 8007932:	4639      	mov	r1, r7
 8007934:	4622      	mov	r2, r4
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff ff1a 	bl	8007770 <__multiply>
 800793c:	4639      	mov	r1, r7
 800793e:	4680      	mov	r8, r0
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff fe47 	bl	80075d4 <_Bfree>
 8007946:	4647      	mov	r7, r8
 8007948:	106d      	asrs	r5, r5, #1
 800794a:	d00b      	beq.n	8007964 <__pow5mult+0xa0>
 800794c:	6820      	ldr	r0, [r4, #0]
 800794e:	b938      	cbnz	r0, 8007960 <__pow5mult+0x9c>
 8007950:	4622      	mov	r2, r4
 8007952:	4621      	mov	r1, r4
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff ff0b 	bl	8007770 <__multiply>
 800795a:	6020      	str	r0, [r4, #0]
 800795c:	f8c0 9000 	str.w	r9, [r0]
 8007960:	4604      	mov	r4, r0
 8007962:	e7e4      	b.n	800792e <__pow5mult+0x6a>
 8007964:	4638      	mov	r0, r7
 8007966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800796a:	bf00      	nop
 800796c:	0800a580 	.word	0x0800a580
 8007970:	0800a3ab 	.word	0x0800a3ab
 8007974:	0800a42e 	.word	0x0800a42e

08007978 <__lshift>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	6849      	ldr	r1, [r1, #4]
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007986:	68a3      	ldr	r3, [r4, #8]
 8007988:	4607      	mov	r7, r0
 800798a:	4691      	mov	r9, r2
 800798c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007990:	f108 0601 	add.w	r6, r8, #1
 8007994:	42b3      	cmp	r3, r6
 8007996:	db0b      	blt.n	80079b0 <__lshift+0x38>
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff fddb 	bl	8007554 <_Balloc>
 800799e:	4605      	mov	r5, r0
 80079a0:	b948      	cbnz	r0, 80079b6 <__lshift+0x3e>
 80079a2:	4602      	mov	r2, r0
 80079a4:	4b2a      	ldr	r3, [pc, #168]	; (8007a50 <__lshift+0xd8>)
 80079a6:	482b      	ldr	r0, [pc, #172]	; (8007a54 <__lshift+0xdc>)
 80079a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079ac:	f000 ff68 	bl	8008880 <__assert_func>
 80079b0:	3101      	adds	r1, #1
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	e7ee      	b.n	8007994 <__lshift+0x1c>
 80079b6:	2300      	movs	r3, #0
 80079b8:	f100 0114 	add.w	r1, r0, #20
 80079bc:	f100 0210 	add.w	r2, r0, #16
 80079c0:	4618      	mov	r0, r3
 80079c2:	4553      	cmp	r3, sl
 80079c4:	db37      	blt.n	8007a36 <__lshift+0xbe>
 80079c6:	6920      	ldr	r0, [r4, #16]
 80079c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079cc:	f104 0314 	add.w	r3, r4, #20
 80079d0:	f019 091f 	ands.w	r9, r9, #31
 80079d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079dc:	d02f      	beq.n	8007a3e <__lshift+0xc6>
 80079de:	f1c9 0e20 	rsb	lr, r9, #32
 80079e2:	468a      	mov	sl, r1
 80079e4:	f04f 0c00 	mov.w	ip, #0
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	fa02 f209 	lsl.w	r2, r2, r9
 80079ee:	ea42 020c 	orr.w	r2, r2, ip
 80079f2:	f84a 2b04 	str.w	r2, [sl], #4
 80079f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079fa:	4298      	cmp	r0, r3
 80079fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a00:	d8f2      	bhi.n	80079e8 <__lshift+0x70>
 8007a02:	1b03      	subs	r3, r0, r4
 8007a04:	3b15      	subs	r3, #21
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	f104 0215 	add.w	r2, r4, #21
 8007a10:	4290      	cmp	r0, r2
 8007a12:	bf38      	it	cc
 8007a14:	2304      	movcc	r3, #4
 8007a16:	f841 c003 	str.w	ip, [r1, r3]
 8007a1a:	f1bc 0f00 	cmp.w	ip, #0
 8007a1e:	d001      	beq.n	8007a24 <__lshift+0xac>
 8007a20:	f108 0602 	add.w	r6, r8, #2
 8007a24:	3e01      	subs	r6, #1
 8007a26:	4638      	mov	r0, r7
 8007a28:	612e      	str	r6, [r5, #16]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	f7ff fdd2 	bl	80075d4 <_Bfree>
 8007a30:	4628      	mov	r0, r5
 8007a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	e7c1      	b.n	80079c2 <__lshift+0x4a>
 8007a3e:	3904      	subs	r1, #4
 8007a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a48:	4298      	cmp	r0, r3
 8007a4a:	d8f9      	bhi.n	8007a40 <__lshift+0xc8>
 8007a4c:	e7ea      	b.n	8007a24 <__lshift+0xac>
 8007a4e:	bf00      	nop
 8007a50:	0800a41d 	.word	0x0800a41d
 8007a54:	0800a42e 	.word	0x0800a42e

08007a58 <__mcmp>:
 8007a58:	b530      	push	{r4, r5, lr}
 8007a5a:	6902      	ldr	r2, [r0, #16]
 8007a5c:	690c      	ldr	r4, [r1, #16]
 8007a5e:	1b12      	subs	r2, r2, r4
 8007a60:	d10e      	bne.n	8007a80 <__mcmp+0x28>
 8007a62:	f100 0314 	add.w	r3, r0, #20
 8007a66:	3114      	adds	r1, #20
 8007a68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a78:	42a5      	cmp	r5, r4
 8007a7a:	d003      	beq.n	8007a84 <__mcmp+0x2c>
 8007a7c:	d305      	bcc.n	8007a8a <__mcmp+0x32>
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4610      	mov	r0, r2
 8007a82:	bd30      	pop	{r4, r5, pc}
 8007a84:	4283      	cmp	r3, r0
 8007a86:	d3f3      	bcc.n	8007a70 <__mcmp+0x18>
 8007a88:	e7fa      	b.n	8007a80 <__mcmp+0x28>
 8007a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a8e:	e7f7      	b.n	8007a80 <__mcmp+0x28>

08007a90 <__mdiff>:
 8007a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	460c      	mov	r4, r1
 8007a96:	4606      	mov	r6, r0
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4690      	mov	r8, r2
 8007a9e:	f7ff ffdb 	bl	8007a58 <__mcmp>
 8007aa2:	1e05      	subs	r5, r0, #0
 8007aa4:	d110      	bne.n	8007ac8 <__mdiff+0x38>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff fd53 	bl	8007554 <_Balloc>
 8007aae:	b930      	cbnz	r0, 8007abe <__mdiff+0x2e>
 8007ab0:	4b3a      	ldr	r3, [pc, #232]	; (8007b9c <__mdiff+0x10c>)
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	f240 2132 	movw	r1, #562	; 0x232
 8007ab8:	4839      	ldr	r0, [pc, #228]	; (8007ba0 <__mdiff+0x110>)
 8007aba:	f000 fee1 	bl	8008880 <__assert_func>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	bfa4      	itt	ge
 8007aca:	4643      	movge	r3, r8
 8007acc:	46a0      	movge	r8, r4
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ad4:	bfa6      	itte	ge
 8007ad6:	461c      	movge	r4, r3
 8007ad8:	2500      	movge	r5, #0
 8007ada:	2501      	movlt	r5, #1
 8007adc:	f7ff fd3a 	bl	8007554 <_Balloc>
 8007ae0:	b920      	cbnz	r0, 8007aec <__mdiff+0x5c>
 8007ae2:	4b2e      	ldr	r3, [pc, #184]	; (8007b9c <__mdiff+0x10c>)
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007aea:	e7e5      	b.n	8007ab8 <__mdiff+0x28>
 8007aec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007af0:	6926      	ldr	r6, [r4, #16]
 8007af2:	60c5      	str	r5, [r0, #12]
 8007af4:	f104 0914 	add.w	r9, r4, #20
 8007af8:	f108 0514 	add.w	r5, r8, #20
 8007afc:	f100 0e14 	add.w	lr, r0, #20
 8007b00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b08:	f108 0210 	add.w	r2, r8, #16
 8007b0c:	46f2      	mov	sl, lr
 8007b0e:	2100      	movs	r1, #0
 8007b10:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b18:	fa1f f883 	uxth.w	r8, r3
 8007b1c:	fa11 f18b 	uxtah	r1, r1, fp
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	eba1 0808 	sub.w	r8, r1, r8
 8007b26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b2e:	fa1f f888 	uxth.w	r8, r8
 8007b32:	1419      	asrs	r1, r3, #16
 8007b34:	454e      	cmp	r6, r9
 8007b36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b3a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b3e:	d8e7      	bhi.n	8007b10 <__mdiff+0x80>
 8007b40:	1b33      	subs	r3, r6, r4
 8007b42:	3b15      	subs	r3, #21
 8007b44:	f023 0303 	bic.w	r3, r3, #3
 8007b48:	3304      	adds	r3, #4
 8007b4a:	3415      	adds	r4, #21
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	bf38      	it	cc
 8007b50:	2304      	movcc	r3, #4
 8007b52:	441d      	add	r5, r3
 8007b54:	4473      	add	r3, lr
 8007b56:	469e      	mov	lr, r3
 8007b58:	462e      	mov	r6, r5
 8007b5a:	4566      	cmp	r6, ip
 8007b5c:	d30e      	bcc.n	8007b7c <__mdiff+0xec>
 8007b5e:	f10c 0203 	add.w	r2, ip, #3
 8007b62:	1b52      	subs	r2, r2, r5
 8007b64:	f022 0203 	bic.w	r2, r2, #3
 8007b68:	3d03      	subs	r5, #3
 8007b6a:	45ac      	cmp	ip, r5
 8007b6c:	bf38      	it	cc
 8007b6e:	2200      	movcc	r2, #0
 8007b70:	441a      	add	r2, r3
 8007b72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b76:	b17b      	cbz	r3, 8007b98 <__mdiff+0x108>
 8007b78:	6107      	str	r7, [r0, #16]
 8007b7a:	e7a3      	b.n	8007ac4 <__mdiff+0x34>
 8007b7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b80:	fa11 f288 	uxtah	r2, r1, r8
 8007b84:	1414      	asrs	r4, r2, #16
 8007b86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b8a:	b292      	uxth	r2, r2
 8007b8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b90:	f84e 2b04 	str.w	r2, [lr], #4
 8007b94:	1421      	asrs	r1, r4, #16
 8007b96:	e7e0      	b.n	8007b5a <__mdiff+0xca>
 8007b98:	3f01      	subs	r7, #1
 8007b9a:	e7ea      	b.n	8007b72 <__mdiff+0xe2>
 8007b9c:	0800a41d 	.word	0x0800a41d
 8007ba0:	0800a42e 	.word	0x0800a42e

08007ba4 <__d2b>:
 8007ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ba8:	4689      	mov	r9, r1
 8007baa:	2101      	movs	r1, #1
 8007bac:	ec57 6b10 	vmov	r6, r7, d0
 8007bb0:	4690      	mov	r8, r2
 8007bb2:	f7ff fccf 	bl	8007554 <_Balloc>
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	b930      	cbnz	r0, 8007bc8 <__d2b+0x24>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <__d2b+0xb0>)
 8007bbe:	4826      	ldr	r0, [pc, #152]	; (8007c58 <__d2b+0xb4>)
 8007bc0:	f240 310a 	movw	r1, #778	; 0x30a
 8007bc4:	f000 fe5c 	bl	8008880 <__assert_func>
 8007bc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bd0:	bb35      	cbnz	r5, 8007c20 <__d2b+0x7c>
 8007bd2:	2e00      	cmp	r6, #0
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	d028      	beq.n	8007c2a <__d2b+0x86>
 8007bd8:	4668      	mov	r0, sp
 8007bda:	9600      	str	r6, [sp, #0]
 8007bdc:	f7ff fd82 	bl	80076e4 <__lo0bits>
 8007be0:	9900      	ldr	r1, [sp, #0]
 8007be2:	b300      	cbz	r0, 8007c26 <__d2b+0x82>
 8007be4:	9a01      	ldr	r2, [sp, #4]
 8007be6:	f1c0 0320 	rsb	r3, r0, #32
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	40c2      	lsrs	r2, r0
 8007bf2:	6163      	str	r3, [r4, #20]
 8007bf4:	9201      	str	r2, [sp, #4]
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	61a3      	str	r3, [r4, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf14      	ite	ne
 8007bfe:	2202      	movne	r2, #2
 8007c00:	2201      	moveq	r2, #1
 8007c02:	6122      	str	r2, [r4, #16]
 8007c04:	b1d5      	cbz	r5, 8007c3c <__d2b+0x98>
 8007c06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c0a:	4405      	add	r5, r0
 8007c0c:	f8c9 5000 	str.w	r5, [r9]
 8007c10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c14:	f8c8 0000 	str.w	r0, [r8]
 8007c18:	4620      	mov	r0, r4
 8007c1a:	b003      	add	sp, #12
 8007c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c24:	e7d5      	b.n	8007bd2 <__d2b+0x2e>
 8007c26:	6161      	str	r1, [r4, #20]
 8007c28:	e7e5      	b.n	8007bf6 <__d2b+0x52>
 8007c2a:	a801      	add	r0, sp, #4
 8007c2c:	f7ff fd5a 	bl	80076e4 <__lo0bits>
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	6163      	str	r3, [r4, #20]
 8007c34:	2201      	movs	r2, #1
 8007c36:	6122      	str	r2, [r4, #16]
 8007c38:	3020      	adds	r0, #32
 8007c3a:	e7e3      	b.n	8007c04 <__d2b+0x60>
 8007c3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c44:	f8c9 0000 	str.w	r0, [r9]
 8007c48:	6918      	ldr	r0, [r3, #16]
 8007c4a:	f7ff fd2b 	bl	80076a4 <__hi0bits>
 8007c4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c52:	e7df      	b.n	8007c14 <__d2b+0x70>
 8007c54:	0800a41d 	.word	0x0800a41d
 8007c58:	0800a42e 	.word	0x0800a42e

08007c5c <_calloc_r>:
 8007c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c5e:	fba1 2402 	umull	r2, r4, r1, r2
 8007c62:	b94c      	cbnz	r4, 8007c78 <_calloc_r+0x1c>
 8007c64:	4611      	mov	r1, r2
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	f7fe f826 	bl	8005cb8 <_malloc_r>
 8007c6c:	9a01      	ldr	r2, [sp, #4]
 8007c6e:	4605      	mov	r5, r0
 8007c70:	b930      	cbnz	r0, 8007c80 <_calloc_r+0x24>
 8007c72:	4628      	mov	r0, r5
 8007c74:	b003      	add	sp, #12
 8007c76:	bd30      	pop	{r4, r5, pc}
 8007c78:	220c      	movs	r2, #12
 8007c7a:	6002      	str	r2, [r0, #0]
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	e7f8      	b.n	8007c72 <_calloc_r+0x16>
 8007c80:	4621      	mov	r1, r4
 8007c82:	f7fd ffa5 	bl	8005bd0 <memset>
 8007c86:	e7f4      	b.n	8007c72 <_calloc_r+0x16>

08007c88 <__ssputs_r>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	688e      	ldr	r6, [r1, #8]
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	4682      	mov	sl, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	4690      	mov	r8, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	d838      	bhi.n	8007d0c <__ssputs_r+0x84>
 8007c9a:	898a      	ldrh	r2, [r1, #12]
 8007c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ca0:	d032      	beq.n	8007d08 <__ssputs_r+0x80>
 8007ca2:	6825      	ldr	r5, [r4, #0]
 8007ca4:	6909      	ldr	r1, [r1, #16]
 8007ca6:	eba5 0901 	sub.w	r9, r5, r1
 8007caa:	6965      	ldr	r5, [r4, #20]
 8007cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	444b      	add	r3, r9
 8007cb8:	106d      	asrs	r5, r5, #1
 8007cba:	429d      	cmp	r5, r3
 8007cbc:	bf38      	it	cc
 8007cbe:	461d      	movcc	r5, r3
 8007cc0:	0553      	lsls	r3, r2, #21
 8007cc2:	d531      	bpl.n	8007d28 <__ssputs_r+0xa0>
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7fd fff7 	bl	8005cb8 <_malloc_r>
 8007cca:	4606      	mov	r6, r0
 8007ccc:	b950      	cbnz	r0, 8007ce4 <__ssputs_r+0x5c>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	f8ca 3000 	str.w	r3, [sl]
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce4:	6921      	ldr	r1, [r4, #16]
 8007ce6:	464a      	mov	r2, r9
 8007ce8:	f7ff fc1a 	bl	8007520 <memcpy>
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	6126      	str	r6, [r4, #16]
 8007cfa:	6165      	str	r5, [r4, #20]
 8007cfc:	444e      	add	r6, r9
 8007cfe:	eba5 0509 	sub.w	r5, r5, r9
 8007d02:	6026      	str	r6, [r4, #0]
 8007d04:	60a5      	str	r5, [r4, #8]
 8007d06:	463e      	mov	r6, r7
 8007d08:	42be      	cmp	r6, r7
 8007d0a:	d900      	bls.n	8007d0e <__ssputs_r+0x86>
 8007d0c:	463e      	mov	r6, r7
 8007d0e:	6820      	ldr	r0, [r4, #0]
 8007d10:	4632      	mov	r2, r6
 8007d12:	4641      	mov	r1, r8
 8007d14:	f000 ffb0 	bl	8008c78 <memmove>
 8007d18:	68a3      	ldr	r3, [r4, #8]
 8007d1a:	1b9b      	subs	r3, r3, r6
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	4433      	add	r3, r6
 8007d22:	6023      	str	r3, [r4, #0]
 8007d24:	2000      	movs	r0, #0
 8007d26:	e7db      	b.n	8007ce0 <__ssputs_r+0x58>
 8007d28:	462a      	mov	r2, r5
 8007d2a:	f000 ffbf 	bl	8008cac <_realloc_r>
 8007d2e:	4606      	mov	r6, r0
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d1e1      	bne.n	8007cf8 <__ssputs_r+0x70>
 8007d34:	6921      	ldr	r1, [r4, #16]
 8007d36:	4650      	mov	r0, sl
 8007d38:	f7fd ff52 	bl	8005be0 <_free_r>
 8007d3c:	e7c7      	b.n	8007cce <__ssputs_r+0x46>
	...

08007d40 <_svfiprintf_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	4698      	mov	r8, r3
 8007d46:	898b      	ldrh	r3, [r1, #12]
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	b09d      	sub	sp, #116	; 0x74
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	460d      	mov	r5, r1
 8007d50:	4614      	mov	r4, r2
 8007d52:	d50e      	bpl.n	8007d72 <_svfiprintf_r+0x32>
 8007d54:	690b      	ldr	r3, [r1, #16]
 8007d56:	b963      	cbnz	r3, 8007d72 <_svfiprintf_r+0x32>
 8007d58:	2140      	movs	r1, #64	; 0x40
 8007d5a:	f7fd ffad 	bl	8005cb8 <_malloc_r>
 8007d5e:	6028      	str	r0, [r5, #0]
 8007d60:	6128      	str	r0, [r5, #16]
 8007d62:	b920      	cbnz	r0, 8007d6e <_svfiprintf_r+0x2e>
 8007d64:	230c      	movs	r3, #12
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d6c:	e0d1      	b.n	8007f12 <_svfiprintf_r+0x1d2>
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	616b      	str	r3, [r5, #20]
 8007d72:	2300      	movs	r3, #0
 8007d74:	9309      	str	r3, [sp, #36]	; 0x24
 8007d76:	2320      	movs	r3, #32
 8007d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d80:	2330      	movs	r3, #48	; 0x30
 8007d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f2c <_svfiprintf_r+0x1ec>
 8007d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d8a:	f04f 0901 	mov.w	r9, #1
 8007d8e:	4623      	mov	r3, r4
 8007d90:	469a      	mov	sl, r3
 8007d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d96:	b10a      	cbz	r2, 8007d9c <_svfiprintf_r+0x5c>
 8007d98:	2a25      	cmp	r2, #37	; 0x25
 8007d9a:	d1f9      	bne.n	8007d90 <_svfiprintf_r+0x50>
 8007d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007da0:	d00b      	beq.n	8007dba <_svfiprintf_r+0x7a>
 8007da2:	465b      	mov	r3, fp
 8007da4:	4622      	mov	r2, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	4638      	mov	r0, r7
 8007daa:	f7ff ff6d 	bl	8007c88 <__ssputs_r>
 8007dae:	3001      	adds	r0, #1
 8007db0:	f000 80aa 	beq.w	8007f08 <_svfiprintf_r+0x1c8>
 8007db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db6:	445a      	add	r2, fp
 8007db8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dba:	f89a 3000 	ldrb.w	r3, [sl]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80a2 	beq.w	8007f08 <_svfiprintf_r+0x1c8>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dce:	f10a 0a01 	add.w	sl, sl, #1
 8007dd2:	9304      	str	r3, [sp, #16]
 8007dd4:	9307      	str	r3, [sp, #28]
 8007dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dda:	931a      	str	r3, [sp, #104]	; 0x68
 8007ddc:	4654      	mov	r4, sl
 8007dde:	2205      	movs	r2, #5
 8007de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de4:	4851      	ldr	r0, [pc, #324]	; (8007f2c <_svfiprintf_r+0x1ec>)
 8007de6:	f7f8 fa13 	bl	8000210 <memchr>
 8007dea:	9a04      	ldr	r2, [sp, #16]
 8007dec:	b9d8      	cbnz	r0, 8007e26 <_svfiprintf_r+0xe6>
 8007dee:	06d0      	lsls	r0, r2, #27
 8007df0:	bf44      	itt	mi
 8007df2:	2320      	movmi	r3, #32
 8007df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df8:	0711      	lsls	r1, r2, #28
 8007dfa:	bf44      	itt	mi
 8007dfc:	232b      	movmi	r3, #43	; 0x2b
 8007dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e02:	f89a 3000 	ldrb.w	r3, [sl]
 8007e06:	2b2a      	cmp	r3, #42	; 0x2a
 8007e08:	d015      	beq.n	8007e36 <_svfiprintf_r+0xf6>
 8007e0a:	9a07      	ldr	r2, [sp, #28]
 8007e0c:	4654      	mov	r4, sl
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f04f 0c0a 	mov.w	ip, #10
 8007e14:	4621      	mov	r1, r4
 8007e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e1a:	3b30      	subs	r3, #48	; 0x30
 8007e1c:	2b09      	cmp	r3, #9
 8007e1e:	d94e      	bls.n	8007ebe <_svfiprintf_r+0x17e>
 8007e20:	b1b0      	cbz	r0, 8007e50 <_svfiprintf_r+0x110>
 8007e22:	9207      	str	r2, [sp, #28]
 8007e24:	e014      	b.n	8007e50 <_svfiprintf_r+0x110>
 8007e26:	eba0 0308 	sub.w	r3, r0, r8
 8007e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	46a2      	mov	sl, r4
 8007e34:	e7d2      	b.n	8007ddc <_svfiprintf_r+0x9c>
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	1d19      	adds	r1, r3, #4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	9103      	str	r1, [sp, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bfbb      	ittet	lt
 8007e42:	425b      	neglt	r3, r3
 8007e44:	f042 0202 	orrlt.w	r2, r2, #2
 8007e48:	9307      	strge	r3, [sp, #28]
 8007e4a:	9307      	strlt	r3, [sp, #28]
 8007e4c:	bfb8      	it	lt
 8007e4e:	9204      	strlt	r2, [sp, #16]
 8007e50:	7823      	ldrb	r3, [r4, #0]
 8007e52:	2b2e      	cmp	r3, #46	; 0x2e
 8007e54:	d10c      	bne.n	8007e70 <_svfiprintf_r+0x130>
 8007e56:	7863      	ldrb	r3, [r4, #1]
 8007e58:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5a:	d135      	bne.n	8007ec8 <_svfiprintf_r+0x188>
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	1d1a      	adds	r2, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	9203      	str	r2, [sp, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bfb8      	it	lt
 8007e68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e6c:	3402      	adds	r4, #2
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f3c <_svfiprintf_r+0x1fc>
 8007e74:	7821      	ldrb	r1, [r4, #0]
 8007e76:	2203      	movs	r2, #3
 8007e78:	4650      	mov	r0, sl
 8007e7a:	f7f8 f9c9 	bl	8000210 <memchr>
 8007e7e:	b140      	cbz	r0, 8007e92 <_svfiprintf_r+0x152>
 8007e80:	2340      	movs	r3, #64	; 0x40
 8007e82:	eba0 000a 	sub.w	r0, r0, sl
 8007e86:	fa03 f000 	lsl.w	r0, r3, r0
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	4303      	orrs	r3, r0
 8007e8e:	3401      	adds	r4, #1
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e96:	4826      	ldr	r0, [pc, #152]	; (8007f30 <_svfiprintf_r+0x1f0>)
 8007e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e9c:	2206      	movs	r2, #6
 8007e9e:	f7f8 f9b7 	bl	8000210 <memchr>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d038      	beq.n	8007f18 <_svfiprintf_r+0x1d8>
 8007ea6:	4b23      	ldr	r3, [pc, #140]	; (8007f34 <_svfiprintf_r+0x1f4>)
 8007ea8:	bb1b      	cbnz	r3, 8007ef2 <_svfiprintf_r+0x1b2>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	3307      	adds	r3, #7
 8007eae:	f023 0307 	bic.w	r3, r3, #7
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb8:	4433      	add	r3, r6
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebc:	e767      	b.n	8007d8e <_svfiprintf_r+0x4e>
 8007ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	e7a5      	b.n	8007e14 <_svfiprintf_r+0xd4>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	3401      	adds	r4, #1
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	f04f 0c0a 	mov.w	ip, #10
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eda:	3a30      	subs	r2, #48	; 0x30
 8007edc:	2a09      	cmp	r2, #9
 8007ede:	d903      	bls.n	8007ee8 <_svfiprintf_r+0x1a8>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0c5      	beq.n	8007e70 <_svfiprintf_r+0x130>
 8007ee4:	9105      	str	r1, [sp, #20]
 8007ee6:	e7c3      	b.n	8007e70 <_svfiprintf_r+0x130>
 8007ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eec:	4604      	mov	r4, r0
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7f0      	b.n	8007ed4 <_svfiprintf_r+0x194>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <_svfiprintf_r+0x1f8>)
 8007efa:	a904      	add	r1, sp, #16
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7fd ffef 	bl	8005ee0 <_printf_float>
 8007f02:	1c42      	adds	r2, r0, #1
 8007f04:	4606      	mov	r6, r0
 8007f06:	d1d6      	bne.n	8007eb6 <_svfiprintf_r+0x176>
 8007f08:	89ab      	ldrh	r3, [r5, #12]
 8007f0a:	065b      	lsls	r3, r3, #25
 8007f0c:	f53f af2c 	bmi.w	8007d68 <_svfiprintf_r+0x28>
 8007f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f12:	b01d      	add	sp, #116	; 0x74
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	ab03      	add	r3, sp, #12
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	462a      	mov	r2, r5
 8007f1e:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <_svfiprintf_r+0x1f8>)
 8007f20:	a904      	add	r1, sp, #16
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7fe fa80 	bl	8006428 <_printf_i>
 8007f28:	e7eb      	b.n	8007f02 <_svfiprintf_r+0x1c2>
 8007f2a:	bf00      	nop
 8007f2c:	0800a58c 	.word	0x0800a58c
 8007f30:	0800a596 	.word	0x0800a596
 8007f34:	08005ee1 	.word	0x08005ee1
 8007f38:	08007c89 	.word	0x08007c89
 8007f3c:	0800a592 	.word	0x0800a592

08007f40 <_sungetc_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	1c4b      	adds	r3, r1, #1
 8007f44:	4614      	mov	r4, r2
 8007f46:	d103      	bne.n	8007f50 <_sungetc_r+0x10>
 8007f48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	8993      	ldrh	r3, [r2, #12]
 8007f52:	f023 0320 	bic.w	r3, r3, #32
 8007f56:	8193      	strh	r3, [r2, #12]
 8007f58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f5a:	6852      	ldr	r2, [r2, #4]
 8007f5c:	b2cd      	uxtb	r5, r1
 8007f5e:	b18b      	cbz	r3, 8007f84 <_sungetc_r+0x44>
 8007f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f62:	4293      	cmp	r3, r2
 8007f64:	dd08      	ble.n	8007f78 <_sungetc_r+0x38>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	1e5a      	subs	r2, r3, #1
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007f70:	6863      	ldr	r3, [r4, #4]
 8007f72:	3301      	adds	r3, #1
 8007f74:	6063      	str	r3, [r4, #4]
 8007f76:	e7e9      	b.n	8007f4c <_sungetc_r+0xc>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f000 fc47 	bl	800880c <__submore>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d0f1      	beq.n	8007f66 <_sungetc_r+0x26>
 8007f82:	e7e1      	b.n	8007f48 <_sungetc_r+0x8>
 8007f84:	6921      	ldr	r1, [r4, #16]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	b151      	cbz	r1, 8007fa0 <_sungetc_r+0x60>
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	d208      	bcs.n	8007fa0 <_sungetc_r+0x60>
 8007f8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007f92:	42a9      	cmp	r1, r5
 8007f94:	d104      	bne.n	8007fa0 <_sungetc_r+0x60>
 8007f96:	3b01      	subs	r3, #1
 8007f98:	3201      	adds	r2, #1
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	6062      	str	r2, [r4, #4]
 8007f9e:	e7d5      	b.n	8007f4c <_sungetc_r+0xc>
 8007fa0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8007faa:	2303      	movs	r3, #3
 8007fac:	63a3      	str	r3, [r4, #56]	; 0x38
 8007fae:	4623      	mov	r3, r4
 8007fb0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e7dc      	b.n	8007f74 <_sungetc_r+0x34>

08007fba <__ssrefill_r>:
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007fc0:	b169      	cbz	r1, 8007fde <__ssrefill_r+0x24>
 8007fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	d001      	beq.n	8007fce <__ssrefill_r+0x14>
 8007fca:	f7fd fe09 	bl	8005be0 <_free_r>
 8007fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8007fd6:	b113      	cbz	r3, 8007fde <__ssrefill_r+0x24>
 8007fd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fda:	6023      	str	r3, [r4, #0]
 8007fdc:	bd10      	pop	{r4, pc}
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6063      	str	r3, [r4, #4]
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	f043 0320 	orr.w	r3, r3, #32
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff2:	e7f3      	b.n	8007fdc <__ssrefill_r+0x22>

08007ff4 <__ssvfiscanf_r>:
 8007ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007ffe:	2100      	movs	r1, #0
 8008000:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008004:	49a6      	ldr	r1, [pc, #664]	; (80082a0 <__ssvfiscanf_r+0x2ac>)
 8008006:	91a0      	str	r1, [sp, #640]	; 0x280
 8008008:	f10d 0804 	add.w	r8, sp, #4
 800800c:	49a5      	ldr	r1, [pc, #660]	; (80082a4 <__ssvfiscanf_r+0x2b0>)
 800800e:	4fa6      	ldr	r7, [pc, #664]	; (80082a8 <__ssvfiscanf_r+0x2b4>)
 8008010:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80082ac <__ssvfiscanf_r+0x2b8>
 8008014:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008018:	4606      	mov	r6, r0
 800801a:	91a1      	str	r1, [sp, #644]	; 0x284
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	7813      	ldrb	r3, [r2, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 815a 	beq.w	80082da <__ssvfiscanf_r+0x2e6>
 8008026:	5dd9      	ldrb	r1, [r3, r7]
 8008028:	f011 0108 	ands.w	r1, r1, #8
 800802c:	f102 0501 	add.w	r5, r2, #1
 8008030:	d019      	beq.n	8008066 <__ssvfiscanf_r+0x72>
 8008032:	6863      	ldr	r3, [r4, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	dd0f      	ble.n	8008058 <__ssvfiscanf_r+0x64>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	781a      	ldrb	r2, [r3, #0]
 800803c:	5cba      	ldrb	r2, [r7, r2]
 800803e:	0712      	lsls	r2, r2, #28
 8008040:	d401      	bmi.n	8008046 <__ssvfiscanf_r+0x52>
 8008042:	462a      	mov	r2, r5
 8008044:	e7eb      	b.n	800801e <__ssvfiscanf_r+0x2a>
 8008046:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008048:	3201      	adds	r2, #1
 800804a:	9245      	str	r2, [sp, #276]	; 0x114
 800804c:	6862      	ldr	r2, [r4, #4]
 800804e:	3301      	adds	r3, #1
 8008050:	3a01      	subs	r2, #1
 8008052:	6062      	str	r2, [r4, #4]
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	e7ec      	b.n	8008032 <__ssvfiscanf_r+0x3e>
 8008058:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800805a:	4621      	mov	r1, r4
 800805c:	4630      	mov	r0, r6
 800805e:	4798      	blx	r3
 8008060:	2800      	cmp	r0, #0
 8008062:	d0e9      	beq.n	8008038 <__ssvfiscanf_r+0x44>
 8008064:	e7ed      	b.n	8008042 <__ssvfiscanf_r+0x4e>
 8008066:	2b25      	cmp	r3, #37	; 0x25
 8008068:	d012      	beq.n	8008090 <__ssvfiscanf_r+0x9c>
 800806a:	469a      	mov	sl, r3
 800806c:	6863      	ldr	r3, [r4, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f340 8091 	ble.w	8008196 <__ssvfiscanf_r+0x1a2>
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	7813      	ldrb	r3, [r2, #0]
 8008078:	4553      	cmp	r3, sl
 800807a:	f040 812e 	bne.w	80082da <__ssvfiscanf_r+0x2e6>
 800807e:	6863      	ldr	r3, [r4, #4]
 8008080:	3b01      	subs	r3, #1
 8008082:	6063      	str	r3, [r4, #4]
 8008084:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008086:	3201      	adds	r2, #1
 8008088:	3301      	adds	r3, #1
 800808a:	6022      	str	r2, [r4, #0]
 800808c:	9345      	str	r3, [sp, #276]	; 0x114
 800808e:	e7d8      	b.n	8008042 <__ssvfiscanf_r+0x4e>
 8008090:	9141      	str	r1, [sp, #260]	; 0x104
 8008092:	9143      	str	r1, [sp, #268]	; 0x10c
 8008094:	7853      	ldrb	r3, [r2, #1]
 8008096:	2b2a      	cmp	r3, #42	; 0x2a
 8008098:	bf02      	ittt	eq
 800809a:	2310      	moveq	r3, #16
 800809c:	1c95      	addeq	r5, r2, #2
 800809e:	9341      	streq	r3, [sp, #260]	; 0x104
 80080a0:	220a      	movs	r2, #10
 80080a2:	46aa      	mov	sl, r5
 80080a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80080a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80080ac:	2b09      	cmp	r3, #9
 80080ae:	d91d      	bls.n	80080ec <__ssvfiscanf_r+0xf8>
 80080b0:	487e      	ldr	r0, [pc, #504]	; (80082ac <__ssvfiscanf_r+0x2b8>)
 80080b2:	2203      	movs	r2, #3
 80080b4:	f7f8 f8ac 	bl	8000210 <memchr>
 80080b8:	b140      	cbz	r0, 80080cc <__ssvfiscanf_r+0xd8>
 80080ba:	2301      	movs	r3, #1
 80080bc:	eba0 0009 	sub.w	r0, r0, r9
 80080c0:	fa03 f000 	lsl.w	r0, r3, r0
 80080c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080c6:	4318      	orrs	r0, r3
 80080c8:	9041      	str	r0, [sp, #260]	; 0x104
 80080ca:	4655      	mov	r5, sl
 80080cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080d0:	2b78      	cmp	r3, #120	; 0x78
 80080d2:	d806      	bhi.n	80080e2 <__ssvfiscanf_r+0xee>
 80080d4:	2b57      	cmp	r3, #87	; 0x57
 80080d6:	d810      	bhi.n	80080fa <__ssvfiscanf_r+0x106>
 80080d8:	2b25      	cmp	r3, #37	; 0x25
 80080da:	d0c6      	beq.n	800806a <__ssvfiscanf_r+0x76>
 80080dc:	d856      	bhi.n	800818c <__ssvfiscanf_r+0x198>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d064      	beq.n	80081ac <__ssvfiscanf_r+0x1b8>
 80080e2:	2303      	movs	r3, #3
 80080e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80080e6:	230a      	movs	r3, #10
 80080e8:	9342      	str	r3, [sp, #264]	; 0x108
 80080ea:	e071      	b.n	80081d0 <__ssvfiscanf_r+0x1dc>
 80080ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80080ee:	fb02 1103 	mla	r1, r2, r3, r1
 80080f2:	3930      	subs	r1, #48	; 0x30
 80080f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80080f6:	4655      	mov	r5, sl
 80080f8:	e7d3      	b.n	80080a2 <__ssvfiscanf_r+0xae>
 80080fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80080fe:	2a20      	cmp	r2, #32
 8008100:	d8ef      	bhi.n	80080e2 <__ssvfiscanf_r+0xee>
 8008102:	a101      	add	r1, pc, #4	; (adr r1, 8008108 <__ssvfiscanf_r+0x114>)
 8008104:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008108:	080081bb 	.word	0x080081bb
 800810c:	080080e3 	.word	0x080080e3
 8008110:	080080e3 	.word	0x080080e3
 8008114:	08008219 	.word	0x08008219
 8008118:	080080e3 	.word	0x080080e3
 800811c:	080080e3 	.word	0x080080e3
 8008120:	080080e3 	.word	0x080080e3
 8008124:	080080e3 	.word	0x080080e3
 8008128:	080080e3 	.word	0x080080e3
 800812c:	080080e3 	.word	0x080080e3
 8008130:	080080e3 	.word	0x080080e3
 8008134:	0800822f 	.word	0x0800822f
 8008138:	08008205 	.word	0x08008205
 800813c:	08008193 	.word	0x08008193
 8008140:	08008193 	.word	0x08008193
 8008144:	08008193 	.word	0x08008193
 8008148:	080080e3 	.word	0x080080e3
 800814c:	08008209 	.word	0x08008209
 8008150:	080080e3 	.word	0x080080e3
 8008154:	080080e3 	.word	0x080080e3
 8008158:	080080e3 	.word	0x080080e3
 800815c:	080080e3 	.word	0x080080e3
 8008160:	0800823f 	.word	0x0800823f
 8008164:	08008211 	.word	0x08008211
 8008168:	080081b3 	.word	0x080081b3
 800816c:	080080e3 	.word	0x080080e3
 8008170:	080080e3 	.word	0x080080e3
 8008174:	0800823b 	.word	0x0800823b
 8008178:	080080e3 	.word	0x080080e3
 800817c:	08008205 	.word	0x08008205
 8008180:	080080e3 	.word	0x080080e3
 8008184:	080080e3 	.word	0x080080e3
 8008188:	080081bb 	.word	0x080081bb
 800818c:	3b45      	subs	r3, #69	; 0x45
 800818e:	2b02      	cmp	r3, #2
 8008190:	d8a7      	bhi.n	80080e2 <__ssvfiscanf_r+0xee>
 8008192:	2305      	movs	r3, #5
 8008194:	e01b      	b.n	80081ce <__ssvfiscanf_r+0x1da>
 8008196:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008198:	4621      	mov	r1, r4
 800819a:	4630      	mov	r0, r6
 800819c:	4798      	blx	r3
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f af68 	beq.w	8008074 <__ssvfiscanf_r+0x80>
 80081a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f040 808d 	bne.w	80082c6 <__ssvfiscanf_r+0x2d2>
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081b0:	e08f      	b.n	80082d2 <__ssvfiscanf_r+0x2de>
 80081b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80081b4:	f042 0220 	orr.w	r2, r2, #32
 80081b8:	9241      	str	r2, [sp, #260]	; 0x104
 80081ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80081bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c0:	9241      	str	r2, [sp, #260]	; 0x104
 80081c2:	2210      	movs	r2, #16
 80081c4:	2b6f      	cmp	r3, #111	; 0x6f
 80081c6:	9242      	str	r2, [sp, #264]	; 0x108
 80081c8:	bf34      	ite	cc
 80081ca:	2303      	movcc	r3, #3
 80081cc:	2304      	movcs	r3, #4
 80081ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80081d0:	6863      	ldr	r3, [r4, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dd42      	ble.n	800825c <__ssvfiscanf_r+0x268>
 80081d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80081d8:	0659      	lsls	r1, r3, #25
 80081da:	d404      	bmi.n	80081e6 <__ssvfiscanf_r+0x1f2>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	5cba      	ldrb	r2, [r7, r2]
 80081e2:	0712      	lsls	r2, r2, #28
 80081e4:	d441      	bmi.n	800826a <__ssvfiscanf_r+0x276>
 80081e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	dc50      	bgt.n	800828e <__ssvfiscanf_r+0x29a>
 80081ec:	466b      	mov	r3, sp
 80081ee:	4622      	mov	r2, r4
 80081f0:	a941      	add	r1, sp, #260	; 0x104
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 f876 	bl	80082e4 <_scanf_chars>
 80081f8:	2801      	cmp	r0, #1
 80081fa:	d06e      	beq.n	80082da <__ssvfiscanf_r+0x2e6>
 80081fc:	2802      	cmp	r0, #2
 80081fe:	f47f af20 	bne.w	8008042 <__ssvfiscanf_r+0x4e>
 8008202:	e7cf      	b.n	80081a4 <__ssvfiscanf_r+0x1b0>
 8008204:	220a      	movs	r2, #10
 8008206:	e7dd      	b.n	80081c4 <__ssvfiscanf_r+0x1d0>
 8008208:	2300      	movs	r3, #0
 800820a:	9342      	str	r3, [sp, #264]	; 0x108
 800820c:	2303      	movs	r3, #3
 800820e:	e7de      	b.n	80081ce <__ssvfiscanf_r+0x1da>
 8008210:	2308      	movs	r3, #8
 8008212:	9342      	str	r3, [sp, #264]	; 0x108
 8008214:	2304      	movs	r3, #4
 8008216:	e7da      	b.n	80081ce <__ssvfiscanf_r+0x1da>
 8008218:	4629      	mov	r1, r5
 800821a:	4640      	mov	r0, r8
 800821c:	f000 f9c6 	bl	80085ac <__sccl>
 8008220:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008226:	9341      	str	r3, [sp, #260]	; 0x104
 8008228:	4605      	mov	r5, r0
 800822a:	2301      	movs	r3, #1
 800822c:	e7cf      	b.n	80081ce <__ssvfiscanf_r+0x1da>
 800822e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008234:	9341      	str	r3, [sp, #260]	; 0x104
 8008236:	2300      	movs	r3, #0
 8008238:	e7c9      	b.n	80081ce <__ssvfiscanf_r+0x1da>
 800823a:	2302      	movs	r3, #2
 800823c:	e7c7      	b.n	80081ce <__ssvfiscanf_r+0x1da>
 800823e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008240:	06c3      	lsls	r3, r0, #27
 8008242:	f53f aefe 	bmi.w	8008042 <__ssvfiscanf_r+0x4e>
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800824a:	1d19      	adds	r1, r3, #4
 800824c:	9100      	str	r1, [sp, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f010 0f01 	tst.w	r0, #1
 8008254:	bf14      	ite	ne
 8008256:	801a      	strhne	r2, [r3, #0]
 8008258:	601a      	streq	r2, [r3, #0]
 800825a:	e6f2      	b.n	8008042 <__ssvfiscanf_r+0x4e>
 800825c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800825e:	4621      	mov	r1, r4
 8008260:	4630      	mov	r0, r6
 8008262:	4798      	blx	r3
 8008264:	2800      	cmp	r0, #0
 8008266:	d0b6      	beq.n	80081d6 <__ssvfiscanf_r+0x1e2>
 8008268:	e79c      	b.n	80081a4 <__ssvfiscanf_r+0x1b0>
 800826a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800826c:	3201      	adds	r2, #1
 800826e:	9245      	str	r2, [sp, #276]	; 0x114
 8008270:	6862      	ldr	r2, [r4, #4]
 8008272:	3a01      	subs	r2, #1
 8008274:	2a00      	cmp	r2, #0
 8008276:	6062      	str	r2, [r4, #4]
 8008278:	dd02      	ble.n	8008280 <__ssvfiscanf_r+0x28c>
 800827a:	3301      	adds	r3, #1
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	e7ad      	b.n	80081dc <__ssvfiscanf_r+0x1e8>
 8008280:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008282:	4621      	mov	r1, r4
 8008284:	4630      	mov	r0, r6
 8008286:	4798      	blx	r3
 8008288:	2800      	cmp	r0, #0
 800828a:	d0a7      	beq.n	80081dc <__ssvfiscanf_r+0x1e8>
 800828c:	e78a      	b.n	80081a4 <__ssvfiscanf_r+0x1b0>
 800828e:	2b04      	cmp	r3, #4
 8008290:	dc0e      	bgt.n	80082b0 <__ssvfiscanf_r+0x2bc>
 8008292:	466b      	mov	r3, sp
 8008294:	4622      	mov	r2, r4
 8008296:	a941      	add	r1, sp, #260	; 0x104
 8008298:	4630      	mov	r0, r6
 800829a:	f000 f87d 	bl	8008398 <_scanf_i>
 800829e:	e7ab      	b.n	80081f8 <__ssvfiscanf_r+0x204>
 80082a0:	08007f41 	.word	0x08007f41
 80082a4:	08007fbb 	.word	0x08007fbb
 80082a8:	0800a5f5 	.word	0x0800a5f5
 80082ac:	0800a592 	.word	0x0800a592
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <__ssvfiscanf_r+0x2ec>)
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f43f aec5 	beq.w	8008042 <__ssvfiscanf_r+0x4e>
 80082b8:	466b      	mov	r3, sp
 80082ba:	4622      	mov	r2, r4
 80082bc:	a941      	add	r1, sp, #260	; 0x104
 80082be:	4630      	mov	r0, r6
 80082c0:	f3af 8000 	nop.w
 80082c4:	e798      	b.n	80081f8 <__ssvfiscanf_r+0x204>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80082cc:	bf18      	it	ne
 80082ce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80082d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80082dc:	e7f9      	b.n	80082d2 <__ssvfiscanf_r+0x2de>
 80082de:	bf00      	nop
 80082e0:	00000000 	.word	0x00000000

080082e4 <_scanf_chars>:
 80082e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e8:	4615      	mov	r5, r2
 80082ea:	688a      	ldr	r2, [r1, #8]
 80082ec:	4680      	mov	r8, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b932      	cbnz	r2, 8008300 <_scanf_chars+0x1c>
 80082f2:	698a      	ldr	r2, [r1, #24]
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	bf0c      	ite	eq
 80082f8:	2201      	moveq	r2, #1
 80082fa:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80082fe:	608a      	str	r2, [r1, #8]
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008394 <_scanf_chars+0xb0>
 8008306:	06d1      	lsls	r1, r2, #27
 8008308:	bf5f      	itttt	pl
 800830a:	681a      	ldrpl	r2, [r3, #0]
 800830c:	1d11      	addpl	r1, r2, #4
 800830e:	6019      	strpl	r1, [r3, #0]
 8008310:	6816      	ldrpl	r6, [r2, #0]
 8008312:	2700      	movs	r7, #0
 8008314:	69a0      	ldr	r0, [r4, #24]
 8008316:	b188      	cbz	r0, 800833c <_scanf_chars+0x58>
 8008318:	2801      	cmp	r0, #1
 800831a:	d107      	bne.n	800832c <_scanf_chars+0x48>
 800831c:	682a      	ldr	r2, [r5, #0]
 800831e:	7811      	ldrb	r1, [r2, #0]
 8008320:	6962      	ldr	r2, [r4, #20]
 8008322:	5c52      	ldrb	r2, [r2, r1]
 8008324:	b952      	cbnz	r2, 800833c <_scanf_chars+0x58>
 8008326:	2f00      	cmp	r7, #0
 8008328:	d031      	beq.n	800838e <_scanf_chars+0xaa>
 800832a:	e022      	b.n	8008372 <_scanf_chars+0x8e>
 800832c:	2802      	cmp	r0, #2
 800832e:	d120      	bne.n	8008372 <_scanf_chars+0x8e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008338:	071b      	lsls	r3, r3, #28
 800833a:	d41a      	bmi.n	8008372 <_scanf_chars+0x8e>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	06da      	lsls	r2, r3, #27
 8008340:	bf5e      	ittt	pl
 8008342:	682b      	ldrpl	r3, [r5, #0]
 8008344:	781b      	ldrbpl	r3, [r3, #0]
 8008346:	f806 3b01 	strbpl.w	r3, [r6], #1
 800834a:	682a      	ldr	r2, [r5, #0]
 800834c:	686b      	ldr	r3, [r5, #4]
 800834e:	3201      	adds	r2, #1
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	68a2      	ldr	r2, [r4, #8]
 8008354:	3b01      	subs	r3, #1
 8008356:	3a01      	subs	r2, #1
 8008358:	606b      	str	r3, [r5, #4]
 800835a:	3701      	adds	r7, #1
 800835c:	60a2      	str	r2, [r4, #8]
 800835e:	b142      	cbz	r2, 8008372 <_scanf_chars+0x8e>
 8008360:	2b00      	cmp	r3, #0
 8008362:	dcd7      	bgt.n	8008314 <_scanf_chars+0x30>
 8008364:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008368:	4629      	mov	r1, r5
 800836a:	4640      	mov	r0, r8
 800836c:	4798      	blx	r3
 800836e:	2800      	cmp	r0, #0
 8008370:	d0d0      	beq.n	8008314 <_scanf_chars+0x30>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f013 0310 	ands.w	r3, r3, #16
 8008378:	d105      	bne.n	8008386 <_scanf_chars+0xa2>
 800837a:	68e2      	ldr	r2, [r4, #12]
 800837c:	3201      	adds	r2, #1
 800837e:	60e2      	str	r2, [r4, #12]
 8008380:	69a2      	ldr	r2, [r4, #24]
 8008382:	b102      	cbz	r2, 8008386 <_scanf_chars+0xa2>
 8008384:	7033      	strb	r3, [r6, #0]
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	443b      	add	r3, r7
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	2000      	movs	r0, #0
 800838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008392:	bf00      	nop
 8008394:	0800a5f5 	.word	0x0800a5f5

08008398 <_scanf_i>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	4698      	mov	r8, r3
 800839e:	4b76      	ldr	r3, [pc, #472]	; (8008578 <_scanf_i+0x1e0>)
 80083a0:	460c      	mov	r4, r1
 80083a2:	4682      	mov	sl, r0
 80083a4:	4616      	mov	r6, r2
 80083a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083aa:	b087      	sub	sp, #28
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083b2:	4b72      	ldr	r3, [pc, #456]	; (800857c <_scanf_i+0x1e4>)
 80083b4:	69a1      	ldr	r1, [r4, #24]
 80083b6:	4a72      	ldr	r2, [pc, #456]	; (8008580 <_scanf_i+0x1e8>)
 80083b8:	2903      	cmp	r1, #3
 80083ba:	bf18      	it	ne
 80083bc:	461a      	movne	r2, r3
 80083be:	68a3      	ldr	r3, [r4, #8]
 80083c0:	9201      	str	r2, [sp, #4]
 80083c2:	1e5a      	subs	r2, r3, #1
 80083c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083c8:	bf88      	it	hi
 80083ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083ce:	4627      	mov	r7, r4
 80083d0:	bf82      	ittt	hi
 80083d2:	eb03 0905 	addhi.w	r9, r3, r5
 80083d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083da:	60a3      	strhi	r3, [r4, #8]
 80083dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80083e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80083e4:	bf98      	it	ls
 80083e6:	f04f 0900 	movls.w	r9, #0
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	463d      	mov	r5, r7
 80083ee:	f04f 0b00 	mov.w	fp, #0
 80083f2:	6831      	ldr	r1, [r6, #0]
 80083f4:	ab03      	add	r3, sp, #12
 80083f6:	7809      	ldrb	r1, [r1, #0]
 80083f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f7f7 ff07 	bl	8000210 <memchr>
 8008402:	b328      	cbz	r0, 8008450 <_scanf_i+0xb8>
 8008404:	f1bb 0f01 	cmp.w	fp, #1
 8008408:	d159      	bne.n	80084be <_scanf_i+0x126>
 800840a:	6862      	ldr	r2, [r4, #4]
 800840c:	b92a      	cbnz	r2, 800841a <_scanf_i+0x82>
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	2308      	movs	r3, #8
 8008412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	6022      	str	r2, [r4, #0]
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008420:	6022      	str	r2, [r4, #0]
 8008422:	68a2      	ldr	r2, [r4, #8]
 8008424:	1e51      	subs	r1, r2, #1
 8008426:	60a1      	str	r1, [r4, #8]
 8008428:	b192      	cbz	r2, 8008450 <_scanf_i+0xb8>
 800842a:	6832      	ldr	r2, [r6, #0]
 800842c:	1c51      	adds	r1, r2, #1
 800842e:	6031      	str	r1, [r6, #0]
 8008430:	7812      	ldrb	r2, [r2, #0]
 8008432:	f805 2b01 	strb.w	r2, [r5], #1
 8008436:	6872      	ldr	r2, [r6, #4]
 8008438:	3a01      	subs	r2, #1
 800843a:	2a00      	cmp	r2, #0
 800843c:	6072      	str	r2, [r6, #4]
 800843e:	dc07      	bgt.n	8008450 <_scanf_i+0xb8>
 8008440:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008444:	4631      	mov	r1, r6
 8008446:	4650      	mov	r0, sl
 8008448:	4790      	blx	r2
 800844a:	2800      	cmp	r0, #0
 800844c:	f040 8085 	bne.w	800855a <_scanf_i+0x1c2>
 8008450:	f10b 0b01 	add.w	fp, fp, #1
 8008454:	f1bb 0f03 	cmp.w	fp, #3
 8008458:	d1cb      	bne.n	80083f2 <_scanf_i+0x5a>
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	b90b      	cbnz	r3, 8008462 <_scanf_i+0xca>
 800845e:	230a      	movs	r3, #10
 8008460:	6063      	str	r3, [r4, #4]
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	4947      	ldr	r1, [pc, #284]	; (8008584 <_scanf_i+0x1ec>)
 8008466:	6960      	ldr	r0, [r4, #20]
 8008468:	1ac9      	subs	r1, r1, r3
 800846a:	f000 f89f 	bl	80085ac <__sccl>
 800846e:	f04f 0b00 	mov.w	fp, #0
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	6822      	ldr	r2, [r4, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d03d      	beq.n	80084f6 <_scanf_i+0x15e>
 800847a:	6831      	ldr	r1, [r6, #0]
 800847c:	6960      	ldr	r0, [r4, #20]
 800847e:	f891 c000 	ldrb.w	ip, [r1]
 8008482:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008486:	2800      	cmp	r0, #0
 8008488:	d035      	beq.n	80084f6 <_scanf_i+0x15e>
 800848a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800848e:	d124      	bne.n	80084da <_scanf_i+0x142>
 8008490:	0510      	lsls	r0, r2, #20
 8008492:	d522      	bpl.n	80084da <_scanf_i+0x142>
 8008494:	f10b 0b01 	add.w	fp, fp, #1
 8008498:	f1b9 0f00 	cmp.w	r9, #0
 800849c:	d003      	beq.n	80084a6 <_scanf_i+0x10e>
 800849e:	3301      	adds	r3, #1
 80084a0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	6873      	ldr	r3, [r6, #4]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	6073      	str	r3, [r6, #4]
 80084ae:	dd1b      	ble.n	80084e8 <_scanf_i+0x150>
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	6033      	str	r3, [r6, #0]
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	60a3      	str	r3, [r4, #8]
 80084bc:	e7d9      	b.n	8008472 <_scanf_i+0xda>
 80084be:	f1bb 0f02 	cmp.w	fp, #2
 80084c2:	d1ae      	bne.n	8008422 <_scanf_i+0x8a>
 80084c4:	6822      	ldr	r2, [r4, #0]
 80084c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80084ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80084ce:	d1bf      	bne.n	8008450 <_scanf_i+0xb8>
 80084d0:	2310      	movs	r3, #16
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d8:	e7a2      	b.n	8008420 <_scanf_i+0x88>
 80084da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80084de:	6022      	str	r2, [r4, #0]
 80084e0:	780b      	ldrb	r3, [r1, #0]
 80084e2:	f805 3b01 	strb.w	r3, [r5], #1
 80084e6:	e7de      	b.n	80084a6 <_scanf_i+0x10e>
 80084e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084ec:	4631      	mov	r1, r6
 80084ee:	4650      	mov	r0, sl
 80084f0:	4798      	blx	r3
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d0df      	beq.n	80084b6 <_scanf_i+0x11e>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	05db      	lsls	r3, r3, #23
 80084fa:	d50d      	bpl.n	8008518 <_scanf_i+0x180>
 80084fc:	42bd      	cmp	r5, r7
 80084fe:	d909      	bls.n	8008514 <_scanf_i+0x17c>
 8008500:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008504:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008508:	4632      	mov	r2, r6
 800850a:	4650      	mov	r0, sl
 800850c:	4798      	blx	r3
 800850e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008512:	464d      	mov	r5, r9
 8008514:	42bd      	cmp	r5, r7
 8008516:	d02d      	beq.n	8008574 <_scanf_i+0x1dc>
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	f012 0210 	ands.w	r2, r2, #16
 800851e:	d113      	bne.n	8008548 <_scanf_i+0x1b0>
 8008520:	702a      	strb	r2, [r5, #0]
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	9e01      	ldr	r6, [sp, #4]
 8008526:	4639      	mov	r1, r7
 8008528:	4650      	mov	r0, sl
 800852a:	47b0      	blx	r6
 800852c:	6821      	ldr	r1, [r4, #0]
 800852e:	f8d8 3000 	ldr.w	r3, [r8]
 8008532:	f011 0f20 	tst.w	r1, #32
 8008536:	d013      	beq.n	8008560 <_scanf_i+0x1c8>
 8008538:	1d1a      	adds	r2, r3, #4
 800853a:	f8c8 2000 	str.w	r2, [r8]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6018      	str	r0, [r3, #0]
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	60e3      	str	r3, [r4, #12]
 8008548:	1bed      	subs	r5, r5, r7
 800854a:	44ab      	add	fp, r5
 800854c:	6925      	ldr	r5, [r4, #16]
 800854e:	445d      	add	r5, fp
 8008550:	6125      	str	r5, [r4, #16]
 8008552:	2000      	movs	r0, #0
 8008554:	b007      	add	sp, #28
 8008556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855a:	f04f 0b00 	mov.w	fp, #0
 800855e:	e7ca      	b.n	80084f6 <_scanf_i+0x15e>
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	f8c8 2000 	str.w	r2, [r8]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f011 0f01 	tst.w	r1, #1
 800856c:	bf14      	ite	ne
 800856e:	8018      	strhne	r0, [r3, #0]
 8008570:	6018      	streq	r0, [r3, #0]
 8008572:	e7e6      	b.n	8008542 <_scanf_i+0x1aa>
 8008574:	2001      	movs	r0, #1
 8008576:	e7ed      	b.n	8008554 <_scanf_i+0x1bc>
 8008578:	0800a35c 	.word	0x0800a35c
 800857c:	08008809 	.word	0x08008809
 8008580:	08008721 	.word	0x08008721
 8008584:	0800a5b6 	.word	0x0800a5b6

08008588 <_read_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4d07      	ldr	r5, [pc, #28]	; (80085a8 <_read_r+0x20>)
 800858c:	4604      	mov	r4, r0
 800858e:	4608      	mov	r0, r1
 8008590:	4611      	mov	r1, r2
 8008592:	2200      	movs	r2, #0
 8008594:	602a      	str	r2, [r5, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f7f9 fbca 	bl	8001d30 <_read>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_read_r+0x1e>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_read_r+0x1e>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	200005bc 	.word	0x200005bc

080085ac <__sccl>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	780b      	ldrb	r3, [r1, #0]
 80085b0:	4604      	mov	r4, r0
 80085b2:	2b5e      	cmp	r3, #94	; 0x5e
 80085b4:	bf0b      	itete	eq
 80085b6:	784b      	ldrbeq	r3, [r1, #1]
 80085b8:	1c48      	addne	r0, r1, #1
 80085ba:	1c88      	addeq	r0, r1, #2
 80085bc:	2200      	movne	r2, #0
 80085be:	bf08      	it	eq
 80085c0:	2201      	moveq	r2, #1
 80085c2:	1e61      	subs	r1, r4, #1
 80085c4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80085c8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80085cc:	42a9      	cmp	r1, r5
 80085ce:	d1fb      	bne.n	80085c8 <__sccl+0x1c>
 80085d0:	b90b      	cbnz	r3, 80085d6 <__sccl+0x2a>
 80085d2:	3801      	subs	r0, #1
 80085d4:	bd70      	pop	{r4, r5, r6, pc}
 80085d6:	f082 0201 	eor.w	r2, r2, #1
 80085da:	54e2      	strb	r2, [r4, r3]
 80085dc:	4605      	mov	r5, r0
 80085de:	4628      	mov	r0, r5
 80085e0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80085e4:	292d      	cmp	r1, #45	; 0x2d
 80085e6:	d006      	beq.n	80085f6 <__sccl+0x4a>
 80085e8:	295d      	cmp	r1, #93	; 0x5d
 80085ea:	d0f3      	beq.n	80085d4 <__sccl+0x28>
 80085ec:	b909      	cbnz	r1, 80085f2 <__sccl+0x46>
 80085ee:	4628      	mov	r0, r5
 80085f0:	e7f0      	b.n	80085d4 <__sccl+0x28>
 80085f2:	460b      	mov	r3, r1
 80085f4:	e7f1      	b.n	80085da <__sccl+0x2e>
 80085f6:	786e      	ldrb	r6, [r5, #1]
 80085f8:	2e5d      	cmp	r6, #93	; 0x5d
 80085fa:	d0fa      	beq.n	80085f2 <__sccl+0x46>
 80085fc:	42b3      	cmp	r3, r6
 80085fe:	dcf8      	bgt.n	80085f2 <__sccl+0x46>
 8008600:	3502      	adds	r5, #2
 8008602:	4619      	mov	r1, r3
 8008604:	3101      	adds	r1, #1
 8008606:	428e      	cmp	r6, r1
 8008608:	5462      	strb	r2, [r4, r1]
 800860a:	dcfb      	bgt.n	8008604 <__sccl+0x58>
 800860c:	1af1      	subs	r1, r6, r3
 800860e:	3901      	subs	r1, #1
 8008610:	1c58      	adds	r0, r3, #1
 8008612:	42b3      	cmp	r3, r6
 8008614:	bfa8      	it	ge
 8008616:	2100      	movge	r1, #0
 8008618:	1843      	adds	r3, r0, r1
 800861a:	e7e0      	b.n	80085de <__sccl+0x32>

0800861c <_strtol_l.constprop.0>:
 800861c:	2b01      	cmp	r3, #1
 800861e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008622:	d001      	beq.n	8008628 <_strtol_l.constprop.0+0xc>
 8008624:	2b24      	cmp	r3, #36	; 0x24
 8008626:	d906      	bls.n	8008636 <_strtol_l.constprop.0+0x1a>
 8008628:	f7fd faa0 	bl	8005b6c <__errno>
 800862c:	2316      	movs	r3, #22
 800862e:	6003      	str	r3, [r0, #0]
 8008630:	2000      	movs	r0, #0
 8008632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008636:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800871c <_strtol_l.constprop.0+0x100>
 800863a:	460d      	mov	r5, r1
 800863c:	462e      	mov	r6, r5
 800863e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008642:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008646:	f017 0708 	ands.w	r7, r7, #8
 800864a:	d1f7      	bne.n	800863c <_strtol_l.constprop.0+0x20>
 800864c:	2c2d      	cmp	r4, #45	; 0x2d
 800864e:	d132      	bne.n	80086b6 <_strtol_l.constprop.0+0x9a>
 8008650:	782c      	ldrb	r4, [r5, #0]
 8008652:	2701      	movs	r7, #1
 8008654:	1cb5      	adds	r5, r6, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d05b      	beq.n	8008712 <_strtol_l.constprop.0+0xf6>
 800865a:	2b10      	cmp	r3, #16
 800865c:	d109      	bne.n	8008672 <_strtol_l.constprop.0+0x56>
 800865e:	2c30      	cmp	r4, #48	; 0x30
 8008660:	d107      	bne.n	8008672 <_strtol_l.constprop.0+0x56>
 8008662:	782c      	ldrb	r4, [r5, #0]
 8008664:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008668:	2c58      	cmp	r4, #88	; 0x58
 800866a:	d14d      	bne.n	8008708 <_strtol_l.constprop.0+0xec>
 800866c:	786c      	ldrb	r4, [r5, #1]
 800866e:	2310      	movs	r3, #16
 8008670:	3502      	adds	r5, #2
 8008672:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008676:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800867a:	f04f 0c00 	mov.w	ip, #0
 800867e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008682:	4666      	mov	r6, ip
 8008684:	fb03 8a19 	mls	sl, r3, r9, r8
 8008688:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800868c:	f1be 0f09 	cmp.w	lr, #9
 8008690:	d816      	bhi.n	80086c0 <_strtol_l.constprop.0+0xa4>
 8008692:	4674      	mov	r4, lr
 8008694:	42a3      	cmp	r3, r4
 8008696:	dd24      	ble.n	80086e2 <_strtol_l.constprop.0+0xc6>
 8008698:	f1bc 0f00 	cmp.w	ip, #0
 800869c:	db1e      	blt.n	80086dc <_strtol_l.constprop.0+0xc0>
 800869e:	45b1      	cmp	r9, r6
 80086a0:	d31c      	bcc.n	80086dc <_strtol_l.constprop.0+0xc0>
 80086a2:	d101      	bne.n	80086a8 <_strtol_l.constprop.0+0x8c>
 80086a4:	45a2      	cmp	sl, r4
 80086a6:	db19      	blt.n	80086dc <_strtol_l.constprop.0+0xc0>
 80086a8:	fb06 4603 	mla	r6, r6, r3, r4
 80086ac:	f04f 0c01 	mov.w	ip, #1
 80086b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086b4:	e7e8      	b.n	8008688 <_strtol_l.constprop.0+0x6c>
 80086b6:	2c2b      	cmp	r4, #43	; 0x2b
 80086b8:	bf04      	itt	eq
 80086ba:	782c      	ldrbeq	r4, [r5, #0]
 80086bc:	1cb5      	addeq	r5, r6, #2
 80086be:	e7ca      	b.n	8008656 <_strtol_l.constprop.0+0x3a>
 80086c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086c4:	f1be 0f19 	cmp.w	lr, #25
 80086c8:	d801      	bhi.n	80086ce <_strtol_l.constprop.0+0xb2>
 80086ca:	3c37      	subs	r4, #55	; 0x37
 80086cc:	e7e2      	b.n	8008694 <_strtol_l.constprop.0+0x78>
 80086ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086d2:	f1be 0f19 	cmp.w	lr, #25
 80086d6:	d804      	bhi.n	80086e2 <_strtol_l.constprop.0+0xc6>
 80086d8:	3c57      	subs	r4, #87	; 0x57
 80086da:	e7db      	b.n	8008694 <_strtol_l.constprop.0+0x78>
 80086dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80086e0:	e7e6      	b.n	80086b0 <_strtol_l.constprop.0+0x94>
 80086e2:	f1bc 0f00 	cmp.w	ip, #0
 80086e6:	da05      	bge.n	80086f4 <_strtol_l.constprop.0+0xd8>
 80086e8:	2322      	movs	r3, #34	; 0x22
 80086ea:	6003      	str	r3, [r0, #0]
 80086ec:	4646      	mov	r6, r8
 80086ee:	b942      	cbnz	r2, 8008702 <_strtol_l.constprop.0+0xe6>
 80086f0:	4630      	mov	r0, r6
 80086f2:	e79e      	b.n	8008632 <_strtol_l.constprop.0+0x16>
 80086f4:	b107      	cbz	r7, 80086f8 <_strtol_l.constprop.0+0xdc>
 80086f6:	4276      	negs	r6, r6
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	d0f9      	beq.n	80086f0 <_strtol_l.constprop.0+0xd4>
 80086fc:	f1bc 0f00 	cmp.w	ip, #0
 8008700:	d000      	beq.n	8008704 <_strtol_l.constprop.0+0xe8>
 8008702:	1e69      	subs	r1, r5, #1
 8008704:	6011      	str	r1, [r2, #0]
 8008706:	e7f3      	b.n	80086f0 <_strtol_l.constprop.0+0xd4>
 8008708:	2430      	movs	r4, #48	; 0x30
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1b1      	bne.n	8008672 <_strtol_l.constprop.0+0x56>
 800870e:	2308      	movs	r3, #8
 8008710:	e7af      	b.n	8008672 <_strtol_l.constprop.0+0x56>
 8008712:	2c30      	cmp	r4, #48	; 0x30
 8008714:	d0a5      	beq.n	8008662 <_strtol_l.constprop.0+0x46>
 8008716:	230a      	movs	r3, #10
 8008718:	e7ab      	b.n	8008672 <_strtol_l.constprop.0+0x56>
 800871a:	bf00      	nop
 800871c:	0800a5f5 	.word	0x0800a5f5

08008720 <_strtol_r>:
 8008720:	f7ff bf7c 	b.w	800861c <_strtol_l.constprop.0>

08008724 <_strtoul_l.constprop.0>:
 8008724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008728:	4f36      	ldr	r7, [pc, #216]	; (8008804 <_strtoul_l.constprop.0+0xe0>)
 800872a:	4686      	mov	lr, r0
 800872c:	460d      	mov	r5, r1
 800872e:	4628      	mov	r0, r5
 8008730:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008734:	5de6      	ldrb	r6, [r4, r7]
 8008736:	f016 0608 	ands.w	r6, r6, #8
 800873a:	d1f8      	bne.n	800872e <_strtoul_l.constprop.0+0xa>
 800873c:	2c2d      	cmp	r4, #45	; 0x2d
 800873e:	d12f      	bne.n	80087a0 <_strtoul_l.constprop.0+0x7c>
 8008740:	782c      	ldrb	r4, [r5, #0]
 8008742:	2601      	movs	r6, #1
 8008744:	1c85      	adds	r5, r0, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d057      	beq.n	80087fa <_strtoul_l.constprop.0+0xd6>
 800874a:	2b10      	cmp	r3, #16
 800874c:	d109      	bne.n	8008762 <_strtoul_l.constprop.0+0x3e>
 800874e:	2c30      	cmp	r4, #48	; 0x30
 8008750:	d107      	bne.n	8008762 <_strtoul_l.constprop.0+0x3e>
 8008752:	7828      	ldrb	r0, [r5, #0]
 8008754:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008758:	2858      	cmp	r0, #88	; 0x58
 800875a:	d149      	bne.n	80087f0 <_strtoul_l.constprop.0+0xcc>
 800875c:	786c      	ldrb	r4, [r5, #1]
 800875e:	2310      	movs	r3, #16
 8008760:	3502      	adds	r5, #2
 8008762:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008766:	2700      	movs	r7, #0
 8008768:	fbb8 f8f3 	udiv	r8, r8, r3
 800876c:	fb03 f908 	mul.w	r9, r3, r8
 8008770:	ea6f 0909 	mvn.w	r9, r9
 8008774:	4638      	mov	r0, r7
 8008776:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800877a:	f1bc 0f09 	cmp.w	ip, #9
 800877e:	d814      	bhi.n	80087aa <_strtoul_l.constprop.0+0x86>
 8008780:	4664      	mov	r4, ip
 8008782:	42a3      	cmp	r3, r4
 8008784:	dd22      	ble.n	80087cc <_strtoul_l.constprop.0+0xa8>
 8008786:	2f00      	cmp	r7, #0
 8008788:	db1d      	blt.n	80087c6 <_strtoul_l.constprop.0+0xa2>
 800878a:	4580      	cmp	r8, r0
 800878c:	d31b      	bcc.n	80087c6 <_strtoul_l.constprop.0+0xa2>
 800878e:	d101      	bne.n	8008794 <_strtoul_l.constprop.0+0x70>
 8008790:	45a1      	cmp	r9, r4
 8008792:	db18      	blt.n	80087c6 <_strtoul_l.constprop.0+0xa2>
 8008794:	fb00 4003 	mla	r0, r0, r3, r4
 8008798:	2701      	movs	r7, #1
 800879a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800879e:	e7ea      	b.n	8008776 <_strtoul_l.constprop.0+0x52>
 80087a0:	2c2b      	cmp	r4, #43	; 0x2b
 80087a2:	bf04      	itt	eq
 80087a4:	782c      	ldrbeq	r4, [r5, #0]
 80087a6:	1c85      	addeq	r5, r0, #2
 80087a8:	e7cd      	b.n	8008746 <_strtoul_l.constprop.0+0x22>
 80087aa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80087ae:	f1bc 0f19 	cmp.w	ip, #25
 80087b2:	d801      	bhi.n	80087b8 <_strtoul_l.constprop.0+0x94>
 80087b4:	3c37      	subs	r4, #55	; 0x37
 80087b6:	e7e4      	b.n	8008782 <_strtoul_l.constprop.0+0x5e>
 80087b8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80087bc:	f1bc 0f19 	cmp.w	ip, #25
 80087c0:	d804      	bhi.n	80087cc <_strtoul_l.constprop.0+0xa8>
 80087c2:	3c57      	subs	r4, #87	; 0x57
 80087c4:	e7dd      	b.n	8008782 <_strtoul_l.constprop.0+0x5e>
 80087c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80087ca:	e7e6      	b.n	800879a <_strtoul_l.constprop.0+0x76>
 80087cc:	2f00      	cmp	r7, #0
 80087ce:	da07      	bge.n	80087e0 <_strtoul_l.constprop.0+0xbc>
 80087d0:	2322      	movs	r3, #34	; 0x22
 80087d2:	f8ce 3000 	str.w	r3, [lr]
 80087d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087da:	b932      	cbnz	r2, 80087ea <_strtoul_l.constprop.0+0xc6>
 80087dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087e0:	b106      	cbz	r6, 80087e4 <_strtoul_l.constprop.0+0xc0>
 80087e2:	4240      	negs	r0, r0
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	d0f9      	beq.n	80087dc <_strtoul_l.constprop.0+0xb8>
 80087e8:	b107      	cbz	r7, 80087ec <_strtoul_l.constprop.0+0xc8>
 80087ea:	1e69      	subs	r1, r5, #1
 80087ec:	6011      	str	r1, [r2, #0]
 80087ee:	e7f5      	b.n	80087dc <_strtoul_l.constprop.0+0xb8>
 80087f0:	2430      	movs	r4, #48	; 0x30
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1b5      	bne.n	8008762 <_strtoul_l.constprop.0+0x3e>
 80087f6:	2308      	movs	r3, #8
 80087f8:	e7b3      	b.n	8008762 <_strtoul_l.constprop.0+0x3e>
 80087fa:	2c30      	cmp	r4, #48	; 0x30
 80087fc:	d0a9      	beq.n	8008752 <_strtoul_l.constprop.0+0x2e>
 80087fe:	230a      	movs	r3, #10
 8008800:	e7af      	b.n	8008762 <_strtoul_l.constprop.0+0x3e>
 8008802:	bf00      	nop
 8008804:	0800a5f5 	.word	0x0800a5f5

08008808 <_strtoul_r>:
 8008808:	f7ff bf8c 	b.w	8008724 <_strtoul_l.constprop.0>

0800880c <__submore>:
 800880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008810:	460c      	mov	r4, r1
 8008812:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008818:	4299      	cmp	r1, r3
 800881a:	d11d      	bne.n	8008858 <__submore+0x4c>
 800881c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008820:	f7fd fa4a 	bl	8005cb8 <_malloc_r>
 8008824:	b918      	cbnz	r0, 800882e <__submore+0x22>
 8008826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800882a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008832:	63a3      	str	r3, [r4, #56]	; 0x38
 8008834:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008838:	6360      	str	r0, [r4, #52]	; 0x34
 800883a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800883e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008842:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008846:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800884a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800884e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008852:	6020      	str	r0, [r4, #0]
 8008854:	2000      	movs	r0, #0
 8008856:	e7e8      	b.n	800882a <__submore+0x1e>
 8008858:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800885a:	0077      	lsls	r7, r6, #1
 800885c:	463a      	mov	r2, r7
 800885e:	f000 fa25 	bl	8008cac <_realloc_r>
 8008862:	4605      	mov	r5, r0
 8008864:	2800      	cmp	r0, #0
 8008866:	d0de      	beq.n	8008826 <__submore+0x1a>
 8008868:	eb00 0806 	add.w	r8, r0, r6
 800886c:	4601      	mov	r1, r0
 800886e:	4632      	mov	r2, r6
 8008870:	4640      	mov	r0, r8
 8008872:	f7fe fe55 	bl	8007520 <memcpy>
 8008876:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800887a:	f8c4 8000 	str.w	r8, [r4]
 800887e:	e7e9      	b.n	8008854 <__submore+0x48>

08008880 <__assert_func>:
 8008880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008882:	4614      	mov	r4, r2
 8008884:	461a      	mov	r2, r3
 8008886:	4b09      	ldr	r3, [pc, #36]	; (80088ac <__assert_func+0x2c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4605      	mov	r5, r0
 800888c:	68d8      	ldr	r0, [r3, #12]
 800888e:	b14c      	cbz	r4, 80088a4 <__assert_func+0x24>
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <__assert_func+0x30>)
 8008892:	9100      	str	r1, [sp, #0]
 8008894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008898:	4906      	ldr	r1, [pc, #24]	; (80088b4 <__assert_func+0x34>)
 800889a:	462b      	mov	r3, r5
 800889c:	f000 f9a6 	bl	8008bec <fiprintf>
 80088a0:	f000 fc5a 	bl	8009158 <abort>
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <__assert_func+0x38>)
 80088a6:	461c      	mov	r4, r3
 80088a8:	e7f3      	b.n	8008892 <__assert_func+0x12>
 80088aa:	bf00      	nop
 80088ac:	20000010 	.word	0x20000010
 80088b0:	0800a5b8 	.word	0x0800a5b8
 80088b4:	0800a5c5 	.word	0x0800a5c5
 80088b8:	0800a5f3 	.word	0x0800a5f3

080088bc <__sflush_r>:
 80088bc:	898a      	ldrh	r2, [r1, #12]
 80088be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	4605      	mov	r5, r0
 80088c4:	0710      	lsls	r0, r2, #28
 80088c6:	460c      	mov	r4, r1
 80088c8:	d458      	bmi.n	800897c <__sflush_r+0xc0>
 80088ca:	684b      	ldr	r3, [r1, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dc05      	bgt.n	80088dc <__sflush_r+0x20>
 80088d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dc02      	bgt.n	80088dc <__sflush_r+0x20>
 80088d6:	2000      	movs	r0, #0
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088de:	2e00      	cmp	r6, #0
 80088e0:	d0f9      	beq.n	80088d6 <__sflush_r+0x1a>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088e8:	682f      	ldr	r7, [r5, #0]
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	d032      	beq.n	8008954 <__sflush_r+0x98>
 80088ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	075a      	lsls	r2, r3, #29
 80088f4:	d505      	bpl.n	8008902 <__sflush_r+0x46>
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	1ac0      	subs	r0, r0, r3
 80088fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088fc:	b10b      	cbz	r3, 8008902 <__sflush_r+0x46>
 80088fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008900:	1ac0      	subs	r0, r0, r3
 8008902:	2300      	movs	r3, #0
 8008904:	4602      	mov	r2, r0
 8008906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008908:	6a21      	ldr	r1, [r4, #32]
 800890a:	4628      	mov	r0, r5
 800890c:	47b0      	blx	r6
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	d106      	bne.n	8008922 <__sflush_r+0x66>
 8008914:	6829      	ldr	r1, [r5, #0]
 8008916:	291d      	cmp	r1, #29
 8008918:	d82c      	bhi.n	8008974 <__sflush_r+0xb8>
 800891a:	4a2a      	ldr	r2, [pc, #168]	; (80089c4 <__sflush_r+0x108>)
 800891c:	40ca      	lsrs	r2, r1
 800891e:	07d6      	lsls	r6, r2, #31
 8008920:	d528      	bpl.n	8008974 <__sflush_r+0xb8>
 8008922:	2200      	movs	r2, #0
 8008924:	6062      	str	r2, [r4, #4]
 8008926:	04d9      	lsls	r1, r3, #19
 8008928:	6922      	ldr	r2, [r4, #16]
 800892a:	6022      	str	r2, [r4, #0]
 800892c:	d504      	bpl.n	8008938 <__sflush_r+0x7c>
 800892e:	1c42      	adds	r2, r0, #1
 8008930:	d101      	bne.n	8008936 <__sflush_r+0x7a>
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	b903      	cbnz	r3, 8008938 <__sflush_r+0x7c>
 8008936:	6560      	str	r0, [r4, #84]	; 0x54
 8008938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800893a:	602f      	str	r7, [r5, #0]
 800893c:	2900      	cmp	r1, #0
 800893e:	d0ca      	beq.n	80088d6 <__sflush_r+0x1a>
 8008940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008944:	4299      	cmp	r1, r3
 8008946:	d002      	beq.n	800894e <__sflush_r+0x92>
 8008948:	4628      	mov	r0, r5
 800894a:	f7fd f949 	bl	8005be0 <_free_r>
 800894e:	2000      	movs	r0, #0
 8008950:	6360      	str	r0, [r4, #52]	; 0x34
 8008952:	e7c1      	b.n	80088d8 <__sflush_r+0x1c>
 8008954:	6a21      	ldr	r1, [r4, #32]
 8008956:	2301      	movs	r3, #1
 8008958:	4628      	mov	r0, r5
 800895a:	47b0      	blx	r6
 800895c:	1c41      	adds	r1, r0, #1
 800895e:	d1c7      	bne.n	80088f0 <__sflush_r+0x34>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0c4      	beq.n	80088f0 <__sflush_r+0x34>
 8008966:	2b1d      	cmp	r3, #29
 8008968:	d001      	beq.n	800896e <__sflush_r+0xb2>
 800896a:	2b16      	cmp	r3, #22
 800896c:	d101      	bne.n	8008972 <__sflush_r+0xb6>
 800896e:	602f      	str	r7, [r5, #0]
 8008970:	e7b1      	b.n	80088d6 <__sflush_r+0x1a>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	e7ad      	b.n	80088d8 <__sflush_r+0x1c>
 800897c:	690f      	ldr	r7, [r1, #16]
 800897e:	2f00      	cmp	r7, #0
 8008980:	d0a9      	beq.n	80088d6 <__sflush_r+0x1a>
 8008982:	0793      	lsls	r3, r2, #30
 8008984:	680e      	ldr	r6, [r1, #0]
 8008986:	bf08      	it	eq
 8008988:	694b      	ldreq	r3, [r1, #20]
 800898a:	600f      	str	r7, [r1, #0]
 800898c:	bf18      	it	ne
 800898e:	2300      	movne	r3, #0
 8008990:	eba6 0807 	sub.w	r8, r6, r7
 8008994:	608b      	str	r3, [r1, #8]
 8008996:	f1b8 0f00 	cmp.w	r8, #0
 800899a:	dd9c      	ble.n	80088d6 <__sflush_r+0x1a>
 800899c:	6a21      	ldr	r1, [r4, #32]
 800899e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089a0:	4643      	mov	r3, r8
 80089a2:	463a      	mov	r2, r7
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b0      	blx	r6
 80089a8:	2800      	cmp	r0, #0
 80089aa:	dc06      	bgt.n	80089ba <__sflush_r+0xfe>
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b8:	e78e      	b.n	80088d8 <__sflush_r+0x1c>
 80089ba:	4407      	add	r7, r0
 80089bc:	eba8 0800 	sub.w	r8, r8, r0
 80089c0:	e7e9      	b.n	8008996 <__sflush_r+0xda>
 80089c2:	bf00      	nop
 80089c4:	20400001 	.word	0x20400001

080089c8 <_fflush_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	690b      	ldr	r3, [r1, #16]
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	b913      	cbnz	r3, 80089d8 <_fflush_r+0x10>
 80089d2:	2500      	movs	r5, #0
 80089d4:	4628      	mov	r0, r5
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	b118      	cbz	r0, 80089e2 <_fflush_r+0x1a>
 80089da:	6983      	ldr	r3, [r0, #24]
 80089dc:	b90b      	cbnz	r3, 80089e2 <_fflush_r+0x1a>
 80089de:	f000 f887 	bl	8008af0 <__sinit>
 80089e2:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <_fflush_r+0x6c>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	d11b      	bne.n	8008a20 <_fflush_r+0x58>
 80089e8:	686c      	ldr	r4, [r5, #4]
 80089ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0ef      	beq.n	80089d2 <_fflush_r+0xa>
 80089f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089f4:	07d0      	lsls	r0, r2, #31
 80089f6:	d404      	bmi.n	8008a02 <_fflush_r+0x3a>
 80089f8:	0599      	lsls	r1, r3, #22
 80089fa:	d402      	bmi.n	8008a02 <_fflush_r+0x3a>
 80089fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fe:	f000 f927 	bl	8008c50 <__retarget_lock_acquire_recursive>
 8008a02:	4628      	mov	r0, r5
 8008a04:	4621      	mov	r1, r4
 8008a06:	f7ff ff59 	bl	80088bc <__sflush_r>
 8008a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a0c:	07da      	lsls	r2, r3, #31
 8008a0e:	4605      	mov	r5, r0
 8008a10:	d4e0      	bmi.n	80089d4 <_fflush_r+0xc>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	059b      	lsls	r3, r3, #22
 8008a16:	d4dd      	bmi.n	80089d4 <_fflush_r+0xc>
 8008a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a1a:	f000 f91a 	bl	8008c52 <__retarget_lock_release_recursive>
 8008a1e:	e7d9      	b.n	80089d4 <_fflush_r+0xc>
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <_fflush_r+0x70>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d101      	bne.n	8008a2a <_fflush_r+0x62>
 8008a26:	68ac      	ldr	r4, [r5, #8]
 8008a28:	e7df      	b.n	80089ea <_fflush_r+0x22>
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <_fflush_r+0x74>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	bf08      	it	eq
 8008a30:	68ec      	ldreq	r4, [r5, #12]
 8008a32:	e7da      	b.n	80089ea <_fflush_r+0x22>
 8008a34:	0800a718 	.word	0x0800a718
 8008a38:	0800a738 	.word	0x0800a738
 8008a3c:	0800a6f8 	.word	0x0800a6f8

08008a40 <std>:
 8008a40:	2300      	movs	r3, #0
 8008a42:	b510      	push	{r4, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	e9c0 3300 	strd	r3, r3, [r0]
 8008a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a4e:	6083      	str	r3, [r0, #8]
 8008a50:	8181      	strh	r1, [r0, #12]
 8008a52:	6643      	str	r3, [r0, #100]	; 0x64
 8008a54:	81c2      	strh	r2, [r0, #14]
 8008a56:	6183      	str	r3, [r0, #24]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	305c      	adds	r0, #92	; 0x5c
 8008a5e:	f7fd f8b7 	bl	8005bd0 <memset>
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <std+0x38>)
 8008a64:	6263      	str	r3, [r4, #36]	; 0x24
 8008a66:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <std+0x3c>)
 8008a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a6a:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <std+0x40>)
 8008a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a6e:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <std+0x44>)
 8008a70:	6224      	str	r4, [r4, #32]
 8008a72:	6323      	str	r3, [r4, #48]	; 0x30
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	bf00      	nop
 8008a78:	0800672d 	.word	0x0800672d
 8008a7c:	08006753 	.word	0x08006753
 8008a80:	0800678b 	.word	0x0800678b
 8008a84:	080067af 	.word	0x080067af

08008a88 <_cleanup_r>:
 8008a88:	4901      	ldr	r1, [pc, #4]	; (8008a90 <_cleanup_r+0x8>)
 8008a8a:	f000 b8c1 	b.w	8008c10 <_fwalk_reent>
 8008a8e:	bf00      	nop
 8008a90:	080089c9 	.word	0x080089c9

08008a94 <__sfmoreglue>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	2268      	movs	r2, #104	; 0x68
 8008a98:	1e4d      	subs	r5, r1, #1
 8008a9a:	4355      	muls	r5, r2
 8008a9c:	460e      	mov	r6, r1
 8008a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aa2:	f7fd f909 	bl	8005cb8 <_malloc_r>
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	b140      	cbz	r0, 8008abc <__sfmoreglue+0x28>
 8008aaa:	2100      	movs	r1, #0
 8008aac:	e9c0 1600 	strd	r1, r6, [r0]
 8008ab0:	300c      	adds	r0, #12
 8008ab2:	60a0      	str	r0, [r4, #8]
 8008ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ab8:	f7fd f88a 	bl	8005bd0 <memset>
 8008abc:	4620      	mov	r0, r4
 8008abe:	bd70      	pop	{r4, r5, r6, pc}

08008ac0 <__sfp_lock_acquire>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__sfp_lock_acquire+0x8>)
 8008ac2:	f000 b8c5 	b.w	8008c50 <__retarget_lock_acquire_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	200005c1 	.word	0x200005c1

08008acc <__sfp_lock_release>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__sfp_lock_release+0x8>)
 8008ace:	f000 b8c0 	b.w	8008c52 <__retarget_lock_release_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	200005c1 	.word	0x200005c1

08008ad8 <__sinit_lock_acquire>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	; (8008ae0 <__sinit_lock_acquire+0x8>)
 8008ada:	f000 b8b9 	b.w	8008c50 <__retarget_lock_acquire_recursive>
 8008ade:	bf00      	nop
 8008ae0:	200005c2 	.word	0x200005c2

08008ae4 <__sinit_lock_release>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	; (8008aec <__sinit_lock_release+0x8>)
 8008ae6:	f000 b8b4 	b.w	8008c52 <__retarget_lock_release_recursive>
 8008aea:	bf00      	nop
 8008aec:	200005c2 	.word	0x200005c2

08008af0 <__sinit>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	4604      	mov	r4, r0
 8008af4:	f7ff fff0 	bl	8008ad8 <__sinit_lock_acquire>
 8008af8:	69a3      	ldr	r3, [r4, #24]
 8008afa:	b11b      	cbz	r3, 8008b04 <__sinit+0x14>
 8008afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b00:	f7ff bff0 	b.w	8008ae4 <__sinit_lock_release>
 8008b04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b08:	6523      	str	r3, [r4, #80]	; 0x50
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <__sinit+0x68>)
 8008b0c:	4a13      	ldr	r2, [pc, #76]	; (8008b5c <__sinit+0x6c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b12:	42a3      	cmp	r3, r4
 8008b14:	bf04      	itt	eq
 8008b16:	2301      	moveq	r3, #1
 8008b18:	61a3      	streq	r3, [r4, #24]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f820 	bl	8008b60 <__sfp>
 8008b20:	6060      	str	r0, [r4, #4]
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 f81c 	bl	8008b60 <__sfp>
 8008b28:	60a0      	str	r0, [r4, #8]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 f818 	bl	8008b60 <__sfp>
 8008b30:	2200      	movs	r2, #0
 8008b32:	60e0      	str	r0, [r4, #12]
 8008b34:	2104      	movs	r1, #4
 8008b36:	6860      	ldr	r0, [r4, #4]
 8008b38:	f7ff ff82 	bl	8008a40 <std>
 8008b3c:	68a0      	ldr	r0, [r4, #8]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	2109      	movs	r1, #9
 8008b42:	f7ff ff7d 	bl	8008a40 <std>
 8008b46:	68e0      	ldr	r0, [r4, #12]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	2112      	movs	r1, #18
 8008b4c:	f7ff ff78 	bl	8008a40 <std>
 8008b50:	2301      	movs	r3, #1
 8008b52:	61a3      	str	r3, [r4, #24]
 8008b54:	e7d2      	b.n	8008afc <__sinit+0xc>
 8008b56:	bf00      	nop
 8008b58:	0800a368 	.word	0x0800a368
 8008b5c:	08008a89 	.word	0x08008a89

08008b60 <__sfp>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	4607      	mov	r7, r0
 8008b64:	f7ff ffac 	bl	8008ac0 <__sfp_lock_acquire>
 8008b68:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <__sfp+0x84>)
 8008b6a:	681e      	ldr	r6, [r3, #0]
 8008b6c:	69b3      	ldr	r3, [r6, #24]
 8008b6e:	b913      	cbnz	r3, 8008b76 <__sfp+0x16>
 8008b70:	4630      	mov	r0, r6
 8008b72:	f7ff ffbd 	bl	8008af0 <__sinit>
 8008b76:	3648      	adds	r6, #72	; 0x48
 8008b78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	d503      	bpl.n	8008b88 <__sfp+0x28>
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	b30b      	cbz	r3, 8008bc8 <__sfp+0x68>
 8008b84:	6836      	ldr	r6, [r6, #0]
 8008b86:	e7f7      	b.n	8008b78 <__sfp+0x18>
 8008b88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b8c:	b9d5      	cbnz	r5, 8008bc4 <__sfp+0x64>
 8008b8e:	4b16      	ldr	r3, [pc, #88]	; (8008be8 <__sfp+0x88>)
 8008b90:	60e3      	str	r3, [r4, #12]
 8008b92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b96:	6665      	str	r5, [r4, #100]	; 0x64
 8008b98:	f000 f859 	bl	8008c4e <__retarget_lock_init_recursive>
 8008b9c:	f7ff ff96 	bl	8008acc <__sfp_lock_release>
 8008ba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ba8:	6025      	str	r5, [r4, #0]
 8008baa:	61a5      	str	r5, [r4, #24]
 8008bac:	2208      	movs	r2, #8
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bb4:	f7fd f80c 	bl	8005bd0 <memset>
 8008bb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc4:	3468      	adds	r4, #104	; 0x68
 8008bc6:	e7d9      	b.n	8008b7c <__sfp+0x1c>
 8008bc8:	2104      	movs	r1, #4
 8008bca:	4638      	mov	r0, r7
 8008bcc:	f7ff ff62 	bl	8008a94 <__sfmoreglue>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	6030      	str	r0, [r6, #0]
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1d5      	bne.n	8008b84 <__sfp+0x24>
 8008bd8:	f7ff ff78 	bl	8008acc <__sfp_lock_release>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	e7ee      	b.n	8008bc0 <__sfp+0x60>
 8008be2:	bf00      	nop
 8008be4:	0800a368 	.word	0x0800a368
 8008be8:	ffff0001 	.word	0xffff0001

08008bec <fiprintf>:
 8008bec:	b40e      	push	{r1, r2, r3}
 8008bee:	b503      	push	{r0, r1, lr}
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	ab03      	add	r3, sp, #12
 8008bf4:	4805      	ldr	r0, [pc, #20]	; (8008c0c <fiprintf+0x20>)
 8008bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	f000 f8ad 	bl	8008d5c <_vfiprintf_r>
 8008c02:	b002      	add	sp, #8
 8008c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c08:	b003      	add	sp, #12
 8008c0a:	4770      	bx	lr
 8008c0c:	20000010 	.word	0x20000010

08008c10 <_fwalk_reent>:
 8008c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	4606      	mov	r6, r0
 8008c16:	4688      	mov	r8, r1
 8008c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c1c:	2700      	movs	r7, #0
 8008c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c22:	f1b9 0901 	subs.w	r9, r9, #1
 8008c26:	d505      	bpl.n	8008c34 <_fwalk_reent+0x24>
 8008c28:	6824      	ldr	r4, [r4, #0]
 8008c2a:	2c00      	cmp	r4, #0
 8008c2c:	d1f7      	bne.n	8008c1e <_fwalk_reent+0xe>
 8008c2e:	4638      	mov	r0, r7
 8008c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c34:	89ab      	ldrh	r3, [r5, #12]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d907      	bls.n	8008c4a <_fwalk_reent+0x3a>
 8008c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	d003      	beq.n	8008c4a <_fwalk_reent+0x3a>
 8008c42:	4629      	mov	r1, r5
 8008c44:	4630      	mov	r0, r6
 8008c46:	47c0      	blx	r8
 8008c48:	4307      	orrs	r7, r0
 8008c4a:	3568      	adds	r5, #104	; 0x68
 8008c4c:	e7e9      	b.n	8008c22 <_fwalk_reent+0x12>

08008c4e <__retarget_lock_init_recursive>:
 8008c4e:	4770      	bx	lr

08008c50 <__retarget_lock_acquire_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <__retarget_lock_release_recursive>:
 8008c52:	4770      	bx	lr

08008c54 <__ascii_mbtowc>:
 8008c54:	b082      	sub	sp, #8
 8008c56:	b901      	cbnz	r1, 8008c5a <__ascii_mbtowc+0x6>
 8008c58:	a901      	add	r1, sp, #4
 8008c5a:	b142      	cbz	r2, 8008c6e <__ascii_mbtowc+0x1a>
 8008c5c:	b14b      	cbz	r3, 8008c72 <__ascii_mbtowc+0x1e>
 8008c5e:	7813      	ldrb	r3, [r2, #0]
 8008c60:	600b      	str	r3, [r1, #0]
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	1e10      	subs	r0, r2, #0
 8008c66:	bf18      	it	ne
 8008c68:	2001      	movne	r0, #1
 8008c6a:	b002      	add	sp, #8
 8008c6c:	4770      	bx	lr
 8008c6e:	4610      	mov	r0, r2
 8008c70:	e7fb      	b.n	8008c6a <__ascii_mbtowc+0x16>
 8008c72:	f06f 0001 	mvn.w	r0, #1
 8008c76:	e7f8      	b.n	8008c6a <__ascii_mbtowc+0x16>

08008c78 <memmove>:
 8008c78:	4288      	cmp	r0, r1
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	eb01 0402 	add.w	r4, r1, r2
 8008c80:	d902      	bls.n	8008c88 <memmove+0x10>
 8008c82:	4284      	cmp	r4, r0
 8008c84:	4623      	mov	r3, r4
 8008c86:	d807      	bhi.n	8008c98 <memmove+0x20>
 8008c88:	1e43      	subs	r3, r0, #1
 8008c8a:	42a1      	cmp	r1, r4
 8008c8c:	d008      	beq.n	8008ca0 <memmove+0x28>
 8008c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c96:	e7f8      	b.n	8008c8a <memmove+0x12>
 8008c98:	4402      	add	r2, r0
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	428a      	cmp	r2, r1
 8008c9e:	d100      	bne.n	8008ca2 <memmove+0x2a>
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008caa:	e7f7      	b.n	8008c9c <memmove+0x24>

08008cac <_realloc_r>:
 8008cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	b921      	cbnz	r1, 8008cc2 <_realloc_r+0x16>
 8008cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	f7fc bffb 	b.w	8005cb8 <_malloc_r>
 8008cc2:	b92a      	cbnz	r2, 8008cd0 <_realloc_r+0x24>
 8008cc4:	f7fc ff8c 	bl	8005be0 <_free_r>
 8008cc8:	4625      	mov	r5, r4
 8008cca:	4628      	mov	r0, r5
 8008ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd0:	f000 faae 	bl	8009230 <_malloc_usable_size_r>
 8008cd4:	4284      	cmp	r4, r0
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	d802      	bhi.n	8008ce0 <_realloc_r+0x34>
 8008cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cde:	d812      	bhi.n	8008d06 <_realloc_r+0x5a>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	f7fc ffe8 	bl	8005cb8 <_malloc_r>
 8008ce8:	4605      	mov	r5, r0
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d0ed      	beq.n	8008cca <_realloc_r+0x1e>
 8008cee:	42bc      	cmp	r4, r7
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	bf28      	it	cs
 8008cf6:	463a      	movcs	r2, r7
 8008cf8:	f7fe fc12 	bl	8007520 <memcpy>
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4640      	mov	r0, r8
 8008d00:	f7fc ff6e 	bl	8005be0 <_free_r>
 8008d04:	e7e1      	b.n	8008cca <_realloc_r+0x1e>
 8008d06:	4635      	mov	r5, r6
 8008d08:	e7df      	b.n	8008cca <_realloc_r+0x1e>

08008d0a <__sfputc_r>:
 8008d0a:	6893      	ldr	r3, [r2, #8]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	b410      	push	{r4}
 8008d12:	6093      	str	r3, [r2, #8]
 8008d14:	da08      	bge.n	8008d28 <__sfputc_r+0x1e>
 8008d16:	6994      	ldr	r4, [r2, #24]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	db01      	blt.n	8008d20 <__sfputc_r+0x16>
 8008d1c:	290a      	cmp	r1, #10
 8008d1e:	d103      	bne.n	8008d28 <__sfputc_r+0x1e>
 8008d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d24:	f000 b94a 	b.w	8008fbc <__swbuf_r>
 8008d28:	6813      	ldr	r3, [r2, #0]
 8008d2a:	1c58      	adds	r0, r3, #1
 8008d2c:	6010      	str	r0, [r2, #0]
 8008d2e:	7019      	strb	r1, [r3, #0]
 8008d30:	4608      	mov	r0, r1
 8008d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <__sfputs_r>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	460f      	mov	r7, r1
 8008d3e:	4614      	mov	r4, r2
 8008d40:	18d5      	adds	r5, r2, r3
 8008d42:	42ac      	cmp	r4, r5
 8008d44:	d101      	bne.n	8008d4a <__sfputs_r+0x12>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e007      	b.n	8008d5a <__sfputs_r+0x22>
 8008d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4e:	463a      	mov	r2, r7
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff ffda 	bl	8008d0a <__sfputc_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d1f3      	bne.n	8008d42 <__sfputs_r+0xa>
 8008d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d5c <_vfiprintf_r>:
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	460d      	mov	r5, r1
 8008d62:	b09d      	sub	sp, #116	; 0x74
 8008d64:	4614      	mov	r4, r2
 8008d66:	4698      	mov	r8, r3
 8008d68:	4606      	mov	r6, r0
 8008d6a:	b118      	cbz	r0, 8008d74 <_vfiprintf_r+0x18>
 8008d6c:	6983      	ldr	r3, [r0, #24]
 8008d6e:	b90b      	cbnz	r3, 8008d74 <_vfiprintf_r+0x18>
 8008d70:	f7ff febe 	bl	8008af0 <__sinit>
 8008d74:	4b89      	ldr	r3, [pc, #548]	; (8008f9c <_vfiprintf_r+0x240>)
 8008d76:	429d      	cmp	r5, r3
 8008d78:	d11b      	bne.n	8008db2 <_vfiprintf_r+0x56>
 8008d7a:	6875      	ldr	r5, [r6, #4]
 8008d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7e:	07d9      	lsls	r1, r3, #31
 8008d80:	d405      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	059a      	lsls	r2, r3, #22
 8008d86:	d402      	bmi.n	8008d8e <_vfiprintf_r+0x32>
 8008d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d8a:	f7ff ff61 	bl	8008c50 <__retarget_lock_acquire_recursive>
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	071b      	lsls	r3, r3, #28
 8008d92:	d501      	bpl.n	8008d98 <_vfiprintf_r+0x3c>
 8008d94:	692b      	ldr	r3, [r5, #16]
 8008d96:	b9eb      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x78>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 f96e 	bl	800907c <__swsetup_r>
 8008da0:	b1c0      	cbz	r0, 8008dd4 <_vfiprintf_r+0x78>
 8008da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da4:	07dc      	lsls	r4, r3, #31
 8008da6:	d50e      	bpl.n	8008dc6 <_vfiprintf_r+0x6a>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dac:	b01d      	add	sp, #116	; 0x74
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	4b7b      	ldr	r3, [pc, #492]	; (8008fa0 <_vfiprintf_r+0x244>)
 8008db4:	429d      	cmp	r5, r3
 8008db6:	d101      	bne.n	8008dbc <_vfiprintf_r+0x60>
 8008db8:	68b5      	ldr	r5, [r6, #8]
 8008dba:	e7df      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dbc:	4b79      	ldr	r3, [pc, #484]	; (8008fa4 <_vfiprintf_r+0x248>)
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	bf08      	it	eq
 8008dc2:	68f5      	ldreq	r5, [r6, #12]
 8008dc4:	e7da      	b.n	8008d7c <_vfiprintf_r+0x20>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	0598      	lsls	r0, r3, #22
 8008dca:	d4ed      	bmi.n	8008da8 <_vfiprintf_r+0x4c>
 8008dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dce:	f7ff ff40 	bl	8008c52 <__retarget_lock_release_recursive>
 8008dd2:	e7e9      	b.n	8008da8 <_vfiprintf_r+0x4c>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	2320      	movs	r3, #32
 8008dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de2:	2330      	movs	r3, #48	; 0x30
 8008de4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fa8 <_vfiprintf_r+0x24c>
 8008de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dec:	f04f 0901 	mov.w	r9, #1
 8008df0:	4623      	mov	r3, r4
 8008df2:	469a      	mov	sl, r3
 8008df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df8:	b10a      	cbz	r2, 8008dfe <_vfiprintf_r+0xa2>
 8008dfa:	2a25      	cmp	r2, #37	; 0x25
 8008dfc:	d1f9      	bne.n	8008df2 <_vfiprintf_r+0x96>
 8008dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8008e02:	d00b      	beq.n	8008e1c <_vfiprintf_r+0xc0>
 8008e04:	465b      	mov	r3, fp
 8008e06:	4622      	mov	r2, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ff94 	bl	8008d38 <__sfputs_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	f000 80aa 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e18:	445a      	add	r2, fp
 8008e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80a2 	beq.w	8008f6a <_vfiprintf_r+0x20e>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e30:	f10a 0a01 	add.w	sl, sl, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e3e:	4654      	mov	r4, sl
 8008e40:	2205      	movs	r2, #5
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	4858      	ldr	r0, [pc, #352]	; (8008fa8 <_vfiprintf_r+0x24c>)
 8008e48:	f7f7 f9e2 	bl	8000210 <memchr>
 8008e4c:	9a04      	ldr	r2, [sp, #16]
 8008e4e:	b9d8      	cbnz	r0, 8008e88 <_vfiprintf_r+0x12c>
 8008e50:	06d1      	lsls	r1, r2, #27
 8008e52:	bf44      	itt	mi
 8008e54:	2320      	movmi	r3, #32
 8008e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e5a:	0713      	lsls	r3, r2, #28
 8008e5c:	bf44      	itt	mi
 8008e5e:	232b      	movmi	r3, #43	; 0x2b
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e64:	f89a 3000 	ldrb.w	r3, [sl]
 8008e68:	2b2a      	cmp	r3, #42	; 0x2a
 8008e6a:	d015      	beq.n	8008e98 <_vfiprintf_r+0x13c>
 8008e6c:	9a07      	ldr	r2, [sp, #28]
 8008e6e:	4654      	mov	r4, sl
 8008e70:	2000      	movs	r0, #0
 8008e72:	f04f 0c0a 	mov.w	ip, #10
 8008e76:	4621      	mov	r1, r4
 8008e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7c:	3b30      	subs	r3, #48	; 0x30
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d94e      	bls.n	8008f20 <_vfiprintf_r+0x1c4>
 8008e82:	b1b0      	cbz	r0, 8008eb2 <_vfiprintf_r+0x156>
 8008e84:	9207      	str	r2, [sp, #28]
 8008e86:	e014      	b.n	8008eb2 <_vfiprintf_r+0x156>
 8008e88:	eba0 0308 	sub.w	r3, r0, r8
 8008e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	46a2      	mov	sl, r4
 8008e96:	e7d2      	b.n	8008e3e <_vfiprintf_r+0xe2>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	1d19      	adds	r1, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfbb      	ittet	lt
 8008ea4:	425b      	neglt	r3, r3
 8008ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eaa:	9307      	strge	r3, [sp, #28]
 8008eac:	9307      	strlt	r3, [sp, #28]
 8008eae:	bfb8      	it	lt
 8008eb0:	9204      	strlt	r2, [sp, #16]
 8008eb2:	7823      	ldrb	r3, [r4, #0]
 8008eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb6:	d10c      	bne.n	8008ed2 <_vfiprintf_r+0x176>
 8008eb8:	7863      	ldrb	r3, [r4, #1]
 8008eba:	2b2a      	cmp	r3, #42	; 0x2a
 8008ebc:	d135      	bne.n	8008f2a <_vfiprintf_r+0x1ce>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	9203      	str	r2, [sp, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfb8      	it	lt
 8008eca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ece:	3402      	adds	r4, #2
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fb8 <_vfiprintf_r+0x25c>
 8008ed6:	7821      	ldrb	r1, [r4, #0]
 8008ed8:	2203      	movs	r2, #3
 8008eda:	4650      	mov	r0, sl
 8008edc:	f7f7 f998 	bl	8000210 <memchr>
 8008ee0:	b140      	cbz	r0, 8008ef4 <_vfiprintf_r+0x198>
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	eba0 000a 	sub.w	r0, r0, sl
 8008ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4303      	orrs	r3, r0
 8008ef0:	3401      	adds	r4, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	482c      	ldr	r0, [pc, #176]	; (8008fac <_vfiprintf_r+0x250>)
 8008efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008efe:	2206      	movs	r2, #6
 8008f00:	f7f7 f986 	bl	8000210 <memchr>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d03f      	beq.n	8008f88 <_vfiprintf_r+0x22c>
 8008f08:	4b29      	ldr	r3, [pc, #164]	; (8008fb0 <_vfiprintf_r+0x254>)
 8008f0a:	bb1b      	cbnz	r3, 8008f54 <_vfiprintf_r+0x1f8>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	3307      	adds	r3, #7
 8008f10:	f023 0307 	bic.w	r3, r3, #7
 8008f14:	3308      	adds	r3, #8
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1a:	443b      	add	r3, r7
 8008f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1e:	e767      	b.n	8008df0 <_vfiprintf_r+0x94>
 8008f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f24:	460c      	mov	r4, r1
 8008f26:	2001      	movs	r0, #1
 8008f28:	e7a5      	b.n	8008e76 <_vfiprintf_r+0x11a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	9305      	str	r3, [sp, #20]
 8008f30:	4619      	mov	r1, r3
 8008f32:	f04f 0c0a 	mov.w	ip, #10
 8008f36:	4620      	mov	r0, r4
 8008f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f3c:	3a30      	subs	r2, #48	; 0x30
 8008f3e:	2a09      	cmp	r2, #9
 8008f40:	d903      	bls.n	8008f4a <_vfiprintf_r+0x1ee>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0c5      	beq.n	8008ed2 <_vfiprintf_r+0x176>
 8008f46:	9105      	str	r1, [sp, #20]
 8008f48:	e7c3      	b.n	8008ed2 <_vfiprintf_r+0x176>
 8008f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4e:	4604      	mov	r4, r0
 8008f50:	2301      	movs	r3, #1
 8008f52:	e7f0      	b.n	8008f36 <_vfiprintf_r+0x1da>
 8008f54:	ab03      	add	r3, sp, #12
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4b16      	ldr	r3, [pc, #88]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f5c:	a904      	add	r1, sp, #16
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7fc ffbe 	bl	8005ee0 <_printf_float>
 8008f64:	4607      	mov	r7, r0
 8008f66:	1c78      	adds	r0, r7, #1
 8008f68:	d1d6      	bne.n	8008f18 <_vfiprintf_r+0x1bc>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f6c:	07d9      	lsls	r1, r3, #31
 8008f6e:	d405      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f70:	89ab      	ldrh	r3, [r5, #12]
 8008f72:	059a      	lsls	r2, r3, #22
 8008f74:	d402      	bmi.n	8008f7c <_vfiprintf_r+0x220>
 8008f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f78:	f7ff fe6b 	bl	8008c52 <__retarget_lock_release_recursive>
 8008f7c:	89ab      	ldrh	r3, [r5, #12]
 8008f7e:	065b      	lsls	r3, r3, #25
 8008f80:	f53f af12 	bmi.w	8008da8 <_vfiprintf_r+0x4c>
 8008f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f86:	e711      	b.n	8008dac <_vfiprintf_r+0x50>
 8008f88:	ab03      	add	r3, sp, #12
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <_vfiprintf_r+0x258>)
 8008f90:	a904      	add	r1, sp, #16
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7fd fa48 	bl	8006428 <_printf_i>
 8008f98:	e7e4      	b.n	8008f64 <_vfiprintf_r+0x208>
 8008f9a:	bf00      	nop
 8008f9c:	0800a718 	.word	0x0800a718
 8008fa0:	0800a738 	.word	0x0800a738
 8008fa4:	0800a6f8 	.word	0x0800a6f8
 8008fa8:	0800a58c 	.word	0x0800a58c
 8008fac:	0800a596 	.word	0x0800a596
 8008fb0:	08005ee1 	.word	0x08005ee1
 8008fb4:	08008d39 	.word	0x08008d39
 8008fb8:	0800a592 	.word	0x0800a592

08008fbc <__swbuf_r>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	460e      	mov	r6, r1
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	b118      	cbz	r0, 8008fce <__swbuf_r+0x12>
 8008fc6:	6983      	ldr	r3, [r0, #24]
 8008fc8:	b90b      	cbnz	r3, 8008fce <__swbuf_r+0x12>
 8008fca:	f7ff fd91 	bl	8008af0 <__sinit>
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <__swbuf_r+0x98>)
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d12b      	bne.n	800902c <__swbuf_r+0x70>
 8008fd4:	686c      	ldr	r4, [r5, #4]
 8008fd6:	69a3      	ldr	r3, [r4, #24]
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	071a      	lsls	r2, r3, #28
 8008fde:	d52f      	bpl.n	8009040 <__swbuf_r+0x84>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	b36b      	cbz	r3, 8009040 <__swbuf_r+0x84>
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	6963      	ldr	r3, [r4, #20]
 8008fec:	b2f6      	uxtb	r6, r6
 8008fee:	4283      	cmp	r3, r0
 8008ff0:	4637      	mov	r7, r6
 8008ff2:	dc04      	bgt.n	8008ffe <__swbuf_r+0x42>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f7ff fce6 	bl	80089c8 <_fflush_r>
 8008ffc:	bb30      	cbnz	r0, 800904c <__swbuf_r+0x90>
 8008ffe:	68a3      	ldr	r3, [r4, #8]
 8009000:	3b01      	subs	r3, #1
 8009002:	60a3      	str	r3, [r4, #8]
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	6022      	str	r2, [r4, #0]
 800900a:	701e      	strb	r6, [r3, #0]
 800900c:	6963      	ldr	r3, [r4, #20]
 800900e:	3001      	adds	r0, #1
 8009010:	4283      	cmp	r3, r0
 8009012:	d004      	beq.n	800901e <__swbuf_r+0x62>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	07db      	lsls	r3, r3, #31
 8009018:	d506      	bpl.n	8009028 <__swbuf_r+0x6c>
 800901a:	2e0a      	cmp	r6, #10
 800901c:	d104      	bne.n	8009028 <__swbuf_r+0x6c>
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f7ff fcd1 	bl	80089c8 <_fflush_r>
 8009026:	b988      	cbnz	r0, 800904c <__swbuf_r+0x90>
 8009028:	4638      	mov	r0, r7
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <__swbuf_r+0x9c>)
 800902e:	429c      	cmp	r4, r3
 8009030:	d101      	bne.n	8009036 <__swbuf_r+0x7a>
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	e7cf      	b.n	8008fd6 <__swbuf_r+0x1a>
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <__swbuf_r+0xa0>)
 8009038:	429c      	cmp	r4, r3
 800903a:	bf08      	it	eq
 800903c:	68ec      	ldreq	r4, [r5, #12]
 800903e:	e7ca      	b.n	8008fd6 <__swbuf_r+0x1a>
 8009040:	4621      	mov	r1, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f81a 	bl	800907c <__swsetup_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0cb      	beq.n	8008fe4 <__swbuf_r+0x28>
 800904c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009050:	e7ea      	b.n	8009028 <__swbuf_r+0x6c>
 8009052:	bf00      	nop
 8009054:	0800a718 	.word	0x0800a718
 8009058:	0800a738 	.word	0x0800a738
 800905c:	0800a6f8 	.word	0x0800a6f8

08009060 <__ascii_wctomb>:
 8009060:	b149      	cbz	r1, 8009076 <__ascii_wctomb+0x16>
 8009062:	2aff      	cmp	r2, #255	; 0xff
 8009064:	bf85      	ittet	hi
 8009066:	238a      	movhi	r3, #138	; 0x8a
 8009068:	6003      	strhi	r3, [r0, #0]
 800906a:	700a      	strbls	r2, [r1, #0]
 800906c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009070:	bf98      	it	ls
 8009072:	2001      	movls	r0, #1
 8009074:	4770      	bx	lr
 8009076:	4608      	mov	r0, r1
 8009078:	4770      	bx	lr
	...

0800907c <__swsetup_r>:
 800907c:	4b32      	ldr	r3, [pc, #200]	; (8009148 <__swsetup_r+0xcc>)
 800907e:	b570      	push	{r4, r5, r6, lr}
 8009080:	681d      	ldr	r5, [r3, #0]
 8009082:	4606      	mov	r6, r0
 8009084:	460c      	mov	r4, r1
 8009086:	b125      	cbz	r5, 8009092 <__swsetup_r+0x16>
 8009088:	69ab      	ldr	r3, [r5, #24]
 800908a:	b913      	cbnz	r3, 8009092 <__swsetup_r+0x16>
 800908c:	4628      	mov	r0, r5
 800908e:	f7ff fd2f 	bl	8008af0 <__sinit>
 8009092:	4b2e      	ldr	r3, [pc, #184]	; (800914c <__swsetup_r+0xd0>)
 8009094:	429c      	cmp	r4, r3
 8009096:	d10f      	bne.n	80090b8 <__swsetup_r+0x3c>
 8009098:	686c      	ldr	r4, [r5, #4]
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090a0:	0719      	lsls	r1, r3, #28
 80090a2:	d42c      	bmi.n	80090fe <__swsetup_r+0x82>
 80090a4:	06dd      	lsls	r5, r3, #27
 80090a6:	d411      	bmi.n	80090cc <__swsetup_r+0x50>
 80090a8:	2309      	movs	r3, #9
 80090aa:	6033      	str	r3, [r6, #0]
 80090ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090b6:	e03e      	b.n	8009136 <__swsetup_r+0xba>
 80090b8:	4b25      	ldr	r3, [pc, #148]	; (8009150 <__swsetup_r+0xd4>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d101      	bne.n	80090c2 <__swsetup_r+0x46>
 80090be:	68ac      	ldr	r4, [r5, #8]
 80090c0:	e7eb      	b.n	800909a <__swsetup_r+0x1e>
 80090c2:	4b24      	ldr	r3, [pc, #144]	; (8009154 <__swsetup_r+0xd8>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	bf08      	it	eq
 80090c8:	68ec      	ldreq	r4, [r5, #12]
 80090ca:	e7e6      	b.n	800909a <__swsetup_r+0x1e>
 80090cc:	0758      	lsls	r0, r3, #29
 80090ce:	d512      	bpl.n	80090f6 <__swsetup_r+0x7a>
 80090d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d2:	b141      	cbz	r1, 80090e6 <__swsetup_r+0x6a>
 80090d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d8:	4299      	cmp	r1, r3
 80090da:	d002      	beq.n	80090e2 <__swsetup_r+0x66>
 80090dc:	4630      	mov	r0, r6
 80090de:	f7fc fd7f 	bl	8005be0 <_free_r>
 80090e2:	2300      	movs	r3, #0
 80090e4:	6363      	str	r3, [r4, #52]	; 0x34
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090ec:	81a3      	strh	r3, [r4, #12]
 80090ee:	2300      	movs	r3, #0
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f043 0308 	orr.w	r3, r3, #8
 80090fc:	81a3      	strh	r3, [r4, #12]
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	b94b      	cbnz	r3, 8009116 <__swsetup_r+0x9a>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800910c:	d003      	beq.n	8009116 <__swsetup_r+0x9a>
 800910e:	4621      	mov	r1, r4
 8009110:	4630      	mov	r0, r6
 8009112:	f000 f84d 	bl	80091b0 <__smakebuf_r>
 8009116:	89a0      	ldrh	r0, [r4, #12]
 8009118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800911c:	f010 0301 	ands.w	r3, r0, #1
 8009120:	d00a      	beq.n	8009138 <__swsetup_r+0xbc>
 8009122:	2300      	movs	r3, #0
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6963      	ldr	r3, [r4, #20]
 8009128:	425b      	negs	r3, r3
 800912a:	61a3      	str	r3, [r4, #24]
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	b943      	cbnz	r3, 8009142 <__swsetup_r+0xc6>
 8009130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009134:	d1ba      	bne.n	80090ac <__swsetup_r+0x30>
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	0781      	lsls	r1, r0, #30
 800913a:	bf58      	it	pl
 800913c:	6963      	ldrpl	r3, [r4, #20]
 800913e:	60a3      	str	r3, [r4, #8]
 8009140:	e7f4      	b.n	800912c <__swsetup_r+0xb0>
 8009142:	2000      	movs	r0, #0
 8009144:	e7f7      	b.n	8009136 <__swsetup_r+0xba>
 8009146:	bf00      	nop
 8009148:	20000010 	.word	0x20000010
 800914c:	0800a718 	.word	0x0800a718
 8009150:	0800a738 	.word	0x0800a738
 8009154:	0800a6f8 	.word	0x0800a6f8

08009158 <abort>:
 8009158:	b508      	push	{r3, lr}
 800915a:	2006      	movs	r0, #6
 800915c:	f000 f898 	bl	8009290 <raise>
 8009160:	2001      	movs	r0, #1
 8009162:	f7f8 fddb 	bl	8001d1c <_exit>

08009166 <__swhatbuf_r>:
 8009166:	b570      	push	{r4, r5, r6, lr}
 8009168:	460e      	mov	r6, r1
 800916a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916e:	2900      	cmp	r1, #0
 8009170:	b096      	sub	sp, #88	; 0x58
 8009172:	4614      	mov	r4, r2
 8009174:	461d      	mov	r5, r3
 8009176:	da08      	bge.n	800918a <__swhatbuf_r+0x24>
 8009178:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	602a      	str	r2, [r5, #0]
 8009180:	061a      	lsls	r2, r3, #24
 8009182:	d410      	bmi.n	80091a6 <__swhatbuf_r+0x40>
 8009184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009188:	e00e      	b.n	80091a8 <__swhatbuf_r+0x42>
 800918a:	466a      	mov	r2, sp
 800918c:	f000 f89c 	bl	80092c8 <_fstat_r>
 8009190:	2800      	cmp	r0, #0
 8009192:	dbf1      	blt.n	8009178 <__swhatbuf_r+0x12>
 8009194:	9a01      	ldr	r2, [sp, #4]
 8009196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800919a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800919e:	425a      	negs	r2, r3
 80091a0:	415a      	adcs	r2, r3
 80091a2:	602a      	str	r2, [r5, #0]
 80091a4:	e7ee      	b.n	8009184 <__swhatbuf_r+0x1e>
 80091a6:	2340      	movs	r3, #64	; 0x40
 80091a8:	2000      	movs	r0, #0
 80091aa:	6023      	str	r3, [r4, #0]
 80091ac:	b016      	add	sp, #88	; 0x58
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <__smakebuf_r>:
 80091b0:	898b      	ldrh	r3, [r1, #12]
 80091b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091b4:	079d      	lsls	r5, r3, #30
 80091b6:	4606      	mov	r6, r0
 80091b8:	460c      	mov	r4, r1
 80091ba:	d507      	bpl.n	80091cc <__smakebuf_r+0x1c>
 80091bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	2301      	movs	r3, #1
 80091c6:	6163      	str	r3, [r4, #20]
 80091c8:	b002      	add	sp, #8
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	ab01      	add	r3, sp, #4
 80091ce:	466a      	mov	r2, sp
 80091d0:	f7ff ffc9 	bl	8009166 <__swhatbuf_r>
 80091d4:	9900      	ldr	r1, [sp, #0]
 80091d6:	4605      	mov	r5, r0
 80091d8:	4630      	mov	r0, r6
 80091da:	f7fc fd6d 	bl	8005cb8 <_malloc_r>
 80091de:	b948      	cbnz	r0, 80091f4 <__smakebuf_r+0x44>
 80091e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e4:	059a      	lsls	r2, r3, #22
 80091e6:	d4ef      	bmi.n	80091c8 <__smakebuf_r+0x18>
 80091e8:	f023 0303 	bic.w	r3, r3, #3
 80091ec:	f043 0302 	orr.w	r3, r3, #2
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	e7e3      	b.n	80091bc <__smakebuf_r+0xc>
 80091f4:	4b0d      	ldr	r3, [pc, #52]	; (800922c <__smakebuf_r+0x7c>)
 80091f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	6020      	str	r0, [r4, #0]
 80091fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	9b00      	ldr	r3, [sp, #0]
 8009204:	6163      	str	r3, [r4, #20]
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	6120      	str	r0, [r4, #16]
 800920a:	b15b      	cbz	r3, 8009224 <__smakebuf_r+0x74>
 800920c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009210:	4630      	mov	r0, r6
 8009212:	f000 f86b 	bl	80092ec <_isatty_r>
 8009216:	b128      	cbz	r0, 8009224 <__smakebuf_r+0x74>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f023 0303 	bic.w	r3, r3, #3
 800921e:	f043 0301 	orr.w	r3, r3, #1
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	89a0      	ldrh	r0, [r4, #12]
 8009226:	4305      	orrs	r5, r0
 8009228:	81a5      	strh	r5, [r4, #12]
 800922a:	e7cd      	b.n	80091c8 <__smakebuf_r+0x18>
 800922c:	08008a89 	.word	0x08008a89

08009230 <_malloc_usable_size_r>:
 8009230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009234:	1f18      	subs	r0, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfbc      	itt	lt
 800923a:	580b      	ldrlt	r3, [r1, r0]
 800923c:	18c0      	addlt	r0, r0, r3
 800923e:	4770      	bx	lr

08009240 <_raise_r>:
 8009240:	291f      	cmp	r1, #31
 8009242:	b538      	push	{r3, r4, r5, lr}
 8009244:	4604      	mov	r4, r0
 8009246:	460d      	mov	r5, r1
 8009248:	d904      	bls.n	8009254 <_raise_r+0x14>
 800924a:	2316      	movs	r3, #22
 800924c:	6003      	str	r3, [r0, #0]
 800924e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009256:	b112      	cbz	r2, 800925e <_raise_r+0x1e>
 8009258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800925c:	b94b      	cbnz	r3, 8009272 <_raise_r+0x32>
 800925e:	4620      	mov	r0, r4
 8009260:	f000 f830 	bl	80092c4 <_getpid_r>
 8009264:	462a      	mov	r2, r5
 8009266:	4601      	mov	r1, r0
 8009268:	4620      	mov	r0, r4
 800926a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800926e:	f000 b817 	b.w	80092a0 <_kill_r>
 8009272:	2b01      	cmp	r3, #1
 8009274:	d00a      	beq.n	800928c <_raise_r+0x4c>
 8009276:	1c59      	adds	r1, r3, #1
 8009278:	d103      	bne.n	8009282 <_raise_r+0x42>
 800927a:	2316      	movs	r3, #22
 800927c:	6003      	str	r3, [r0, #0]
 800927e:	2001      	movs	r0, #1
 8009280:	e7e7      	b.n	8009252 <_raise_r+0x12>
 8009282:	2400      	movs	r4, #0
 8009284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009288:	4628      	mov	r0, r5
 800928a:	4798      	blx	r3
 800928c:	2000      	movs	r0, #0
 800928e:	e7e0      	b.n	8009252 <_raise_r+0x12>

08009290 <raise>:
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <raise+0xc>)
 8009292:	4601      	mov	r1, r0
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	f7ff bfd3 	b.w	8009240 <_raise_r>
 800929a:	bf00      	nop
 800929c:	20000010 	.word	0x20000010

080092a0 <_kill_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	; (80092c0 <_kill_r+0x20>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	f7f8 fd25 	bl	8001cfc <_kill>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d102      	bne.n	80092bc <_kill_r+0x1c>
 80092b6:	682b      	ldr	r3, [r5, #0]
 80092b8:	b103      	cbz	r3, 80092bc <_kill_r+0x1c>
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	bf00      	nop
 80092c0:	200005bc 	.word	0x200005bc

080092c4 <_getpid_r>:
 80092c4:	f7f8 bd12 	b.w	8001cec <_getpid>

080092c8 <_fstat_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d07      	ldr	r5, [pc, #28]	; (80092e8 <_fstat_r+0x20>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	f7f8 fd70 	bl	8001dba <_fstat>
 80092da:	1c43      	adds	r3, r0, #1
 80092dc:	d102      	bne.n	80092e4 <_fstat_r+0x1c>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	b103      	cbz	r3, 80092e4 <_fstat_r+0x1c>
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	bd38      	pop	{r3, r4, r5, pc}
 80092e6:	bf00      	nop
 80092e8:	200005bc 	.word	0x200005bc

080092ec <_isatty_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	; (8009308 <_isatty_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f8 fd6f 	bl	8001dda <_isatty>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_isatty_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_isatty_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	200005bc 	.word	0x200005bc

0800930c <round>:
 800930c:	ec51 0b10 	vmov	r0, r1, d0
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009316:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800931a:	2c13      	cmp	r4, #19
 800931c:	ee10 2a10 	vmov	r2, s0
 8009320:	460b      	mov	r3, r1
 8009322:	dc19      	bgt.n	8009358 <round+0x4c>
 8009324:	2c00      	cmp	r4, #0
 8009326:	da09      	bge.n	800933c <round+0x30>
 8009328:	3401      	adds	r4, #1
 800932a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800932e:	d103      	bne.n	8009338 <round+0x2c>
 8009330:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009334:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009338:	2200      	movs	r2, #0
 800933a:	e028      	b.n	800938e <round+0x82>
 800933c:	4d15      	ldr	r5, [pc, #84]	; (8009394 <round+0x88>)
 800933e:	4125      	asrs	r5, r4
 8009340:	ea01 0605 	and.w	r6, r1, r5
 8009344:	4332      	orrs	r2, r6
 8009346:	d00e      	beq.n	8009366 <round+0x5a>
 8009348:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800934c:	fa42 f404 	asr.w	r4, r2, r4
 8009350:	4423      	add	r3, r4
 8009352:	ea23 0305 	bic.w	r3, r3, r5
 8009356:	e7ef      	b.n	8009338 <round+0x2c>
 8009358:	2c33      	cmp	r4, #51	; 0x33
 800935a:	dd07      	ble.n	800936c <round+0x60>
 800935c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009360:	d101      	bne.n	8009366 <round+0x5a>
 8009362:	f7f6 ffab 	bl	80002bc <__adddf3>
 8009366:	ec41 0b10 	vmov	d0, r0, r1
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8009370:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009374:	40f5      	lsrs	r5, r6
 8009376:	4228      	tst	r0, r5
 8009378:	d0f5      	beq.n	8009366 <round+0x5a>
 800937a:	2101      	movs	r1, #1
 800937c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009380:	fa01 f404 	lsl.w	r4, r1, r4
 8009384:	1912      	adds	r2, r2, r4
 8009386:	bf28      	it	cs
 8009388:	185b      	addcs	r3, r3, r1
 800938a:	ea22 0205 	bic.w	r2, r2, r5
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	e7e8      	b.n	8009366 <round+0x5a>
 8009394:	000fffff 	.word	0x000fffff

08009398 <pow>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	ed2d 8b02 	vpush	{d8}
 800939e:	eeb0 8a40 	vmov.f32	s16, s0
 80093a2:	eef0 8a60 	vmov.f32	s17, s1
 80093a6:	ec55 4b11 	vmov	r4, r5, d1
 80093aa:	f000 f865 	bl	8009478 <__ieee754_pow>
 80093ae:	4622      	mov	r2, r4
 80093b0:	462b      	mov	r3, r5
 80093b2:	4620      	mov	r0, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	ec57 6b10 	vmov	r6, r7, d0
 80093ba:	f7f7 fbcf 	bl	8000b5c <__aeabi_dcmpun>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d13b      	bne.n	800943a <pow+0xa2>
 80093c2:	ec51 0b18 	vmov	r0, r1, d8
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	f7f7 fb95 	bl	8000af8 <__aeabi_dcmpeq>
 80093ce:	b1b8      	cbz	r0, 8009400 <pow+0x68>
 80093d0:	2200      	movs	r2, #0
 80093d2:	2300      	movs	r3, #0
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 fb8e 	bl	8000af8 <__aeabi_dcmpeq>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d146      	bne.n	800946e <pow+0xd6>
 80093e0:	ec45 4b10 	vmov	d0, r4, r5
 80093e4:	f000 fe61 	bl	800a0aa <finite>
 80093e8:	b338      	cbz	r0, 800943a <pow+0xa2>
 80093ea:	2200      	movs	r2, #0
 80093ec:	2300      	movs	r3, #0
 80093ee:	4620      	mov	r0, r4
 80093f0:	4629      	mov	r1, r5
 80093f2:	f7f7 fb8b 	bl	8000b0c <__aeabi_dcmplt>
 80093f6:	b300      	cbz	r0, 800943a <pow+0xa2>
 80093f8:	f7fc fbb8 	bl	8005b6c <__errno>
 80093fc:	2322      	movs	r3, #34	; 0x22
 80093fe:	e01b      	b.n	8009438 <pow+0xa0>
 8009400:	ec47 6b10 	vmov	d0, r6, r7
 8009404:	f000 fe51 	bl	800a0aa <finite>
 8009408:	b9e0      	cbnz	r0, 8009444 <pow+0xac>
 800940a:	eeb0 0a48 	vmov.f32	s0, s16
 800940e:	eef0 0a68 	vmov.f32	s1, s17
 8009412:	f000 fe4a 	bl	800a0aa <finite>
 8009416:	b1a8      	cbz	r0, 8009444 <pow+0xac>
 8009418:	ec45 4b10 	vmov	d0, r4, r5
 800941c:	f000 fe45 	bl	800a0aa <finite>
 8009420:	b180      	cbz	r0, 8009444 <pow+0xac>
 8009422:	4632      	mov	r2, r6
 8009424:	463b      	mov	r3, r7
 8009426:	4630      	mov	r0, r6
 8009428:	4639      	mov	r1, r7
 800942a:	f7f7 fb97 	bl	8000b5c <__aeabi_dcmpun>
 800942e:	2800      	cmp	r0, #0
 8009430:	d0e2      	beq.n	80093f8 <pow+0x60>
 8009432:	f7fc fb9b 	bl	8005b6c <__errno>
 8009436:	2321      	movs	r3, #33	; 0x21
 8009438:	6003      	str	r3, [r0, #0]
 800943a:	ecbd 8b02 	vpop	{d8}
 800943e:	ec47 6b10 	vmov	d0, r6, r7
 8009442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009444:	2200      	movs	r2, #0
 8009446:	2300      	movs	r3, #0
 8009448:	4630      	mov	r0, r6
 800944a:	4639      	mov	r1, r7
 800944c:	f7f7 fb54 	bl	8000af8 <__aeabi_dcmpeq>
 8009450:	2800      	cmp	r0, #0
 8009452:	d0f2      	beq.n	800943a <pow+0xa2>
 8009454:	eeb0 0a48 	vmov.f32	s0, s16
 8009458:	eef0 0a68 	vmov.f32	s1, s17
 800945c:	f000 fe25 	bl	800a0aa <finite>
 8009460:	2800      	cmp	r0, #0
 8009462:	d0ea      	beq.n	800943a <pow+0xa2>
 8009464:	ec45 4b10 	vmov	d0, r4, r5
 8009468:	f000 fe1f 	bl	800a0aa <finite>
 800946c:	e7c3      	b.n	80093f6 <pow+0x5e>
 800946e:	4f01      	ldr	r7, [pc, #4]	; (8009474 <pow+0xdc>)
 8009470:	2600      	movs	r6, #0
 8009472:	e7e2      	b.n	800943a <pow+0xa2>
 8009474:	3ff00000 	.word	0x3ff00000

08009478 <__ieee754_pow>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	ed2d 8b06 	vpush	{d8-d10}
 8009480:	b089      	sub	sp, #36	; 0x24
 8009482:	ed8d 1b00 	vstr	d1, [sp]
 8009486:	e9dd 2900 	ldrd	r2, r9, [sp]
 800948a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800948e:	ea58 0102 	orrs.w	r1, r8, r2
 8009492:	ec57 6b10 	vmov	r6, r7, d0
 8009496:	d115      	bne.n	80094c4 <__ieee754_pow+0x4c>
 8009498:	19b3      	adds	r3, r6, r6
 800949a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800949e:	4152      	adcs	r2, r2
 80094a0:	4299      	cmp	r1, r3
 80094a2:	4b89      	ldr	r3, [pc, #548]	; (80096c8 <__ieee754_pow+0x250>)
 80094a4:	4193      	sbcs	r3, r2
 80094a6:	f080 84d2 	bcs.w	8009e4e <__ieee754_pow+0x9d6>
 80094aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ae:	4630      	mov	r0, r6
 80094b0:	4639      	mov	r1, r7
 80094b2:	f7f6 ff03 	bl	80002bc <__adddf3>
 80094b6:	ec41 0b10 	vmov	d0, r0, r1
 80094ba:	b009      	add	sp, #36	; 0x24
 80094bc:	ecbd 8b06 	vpop	{d8-d10}
 80094c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c4:	4b81      	ldr	r3, [pc, #516]	; (80096cc <__ieee754_pow+0x254>)
 80094c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80094ca:	429c      	cmp	r4, r3
 80094cc:	ee10 aa10 	vmov	sl, s0
 80094d0:	463d      	mov	r5, r7
 80094d2:	dc06      	bgt.n	80094e2 <__ieee754_pow+0x6a>
 80094d4:	d101      	bne.n	80094da <__ieee754_pow+0x62>
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	d1e7      	bne.n	80094aa <__ieee754_pow+0x32>
 80094da:	4598      	cmp	r8, r3
 80094dc:	dc01      	bgt.n	80094e2 <__ieee754_pow+0x6a>
 80094de:	d10f      	bne.n	8009500 <__ieee754_pow+0x88>
 80094e0:	b172      	cbz	r2, 8009500 <__ieee754_pow+0x88>
 80094e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80094e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80094ea:	ea55 050a 	orrs.w	r5, r5, sl
 80094ee:	d1dc      	bne.n	80094aa <__ieee754_pow+0x32>
 80094f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094f4:	18db      	adds	r3, r3, r3
 80094f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80094fa:	4152      	adcs	r2, r2
 80094fc:	429d      	cmp	r5, r3
 80094fe:	e7d0      	b.n	80094a2 <__ieee754_pow+0x2a>
 8009500:	2d00      	cmp	r5, #0
 8009502:	da3b      	bge.n	800957c <__ieee754_pow+0x104>
 8009504:	4b72      	ldr	r3, [pc, #456]	; (80096d0 <__ieee754_pow+0x258>)
 8009506:	4598      	cmp	r8, r3
 8009508:	dc51      	bgt.n	80095ae <__ieee754_pow+0x136>
 800950a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800950e:	4598      	cmp	r8, r3
 8009510:	f340 84ac 	ble.w	8009e6c <__ieee754_pow+0x9f4>
 8009514:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009518:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800951c:	2b14      	cmp	r3, #20
 800951e:	dd0f      	ble.n	8009540 <__ieee754_pow+0xc8>
 8009520:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009524:	fa22 f103 	lsr.w	r1, r2, r3
 8009528:	fa01 f303 	lsl.w	r3, r1, r3
 800952c:	4293      	cmp	r3, r2
 800952e:	f040 849d 	bne.w	8009e6c <__ieee754_pow+0x9f4>
 8009532:	f001 0101 	and.w	r1, r1, #1
 8009536:	f1c1 0302 	rsb	r3, r1, #2
 800953a:	9304      	str	r3, [sp, #16]
 800953c:	b182      	cbz	r2, 8009560 <__ieee754_pow+0xe8>
 800953e:	e05f      	b.n	8009600 <__ieee754_pow+0x188>
 8009540:	2a00      	cmp	r2, #0
 8009542:	d15b      	bne.n	80095fc <__ieee754_pow+0x184>
 8009544:	f1c3 0314 	rsb	r3, r3, #20
 8009548:	fa48 f103 	asr.w	r1, r8, r3
 800954c:	fa01 f303 	lsl.w	r3, r1, r3
 8009550:	4543      	cmp	r3, r8
 8009552:	f040 8488 	bne.w	8009e66 <__ieee754_pow+0x9ee>
 8009556:	f001 0101 	and.w	r1, r1, #1
 800955a:	f1c1 0302 	rsb	r3, r1, #2
 800955e:	9304      	str	r3, [sp, #16]
 8009560:	4b5c      	ldr	r3, [pc, #368]	; (80096d4 <__ieee754_pow+0x25c>)
 8009562:	4598      	cmp	r8, r3
 8009564:	d132      	bne.n	80095cc <__ieee754_pow+0x154>
 8009566:	f1b9 0f00 	cmp.w	r9, #0
 800956a:	f280 8478 	bge.w	8009e5e <__ieee754_pow+0x9e6>
 800956e:	4959      	ldr	r1, [pc, #356]	; (80096d4 <__ieee754_pow+0x25c>)
 8009570:	4632      	mov	r2, r6
 8009572:	463b      	mov	r3, r7
 8009574:	2000      	movs	r0, #0
 8009576:	f7f7 f981 	bl	800087c <__aeabi_ddiv>
 800957a:	e79c      	b.n	80094b6 <__ieee754_pow+0x3e>
 800957c:	2300      	movs	r3, #0
 800957e:	9304      	str	r3, [sp, #16]
 8009580:	2a00      	cmp	r2, #0
 8009582:	d13d      	bne.n	8009600 <__ieee754_pow+0x188>
 8009584:	4b51      	ldr	r3, [pc, #324]	; (80096cc <__ieee754_pow+0x254>)
 8009586:	4598      	cmp	r8, r3
 8009588:	d1ea      	bne.n	8009560 <__ieee754_pow+0xe8>
 800958a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800958e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009592:	ea53 030a 	orrs.w	r3, r3, sl
 8009596:	f000 845a 	beq.w	8009e4e <__ieee754_pow+0x9d6>
 800959a:	4b4f      	ldr	r3, [pc, #316]	; (80096d8 <__ieee754_pow+0x260>)
 800959c:	429c      	cmp	r4, r3
 800959e:	dd08      	ble.n	80095b2 <__ieee754_pow+0x13a>
 80095a0:	f1b9 0f00 	cmp.w	r9, #0
 80095a4:	f2c0 8457 	blt.w	8009e56 <__ieee754_pow+0x9de>
 80095a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095ac:	e783      	b.n	80094b6 <__ieee754_pow+0x3e>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e7e5      	b.n	800957e <__ieee754_pow+0x106>
 80095b2:	f1b9 0f00 	cmp.w	r9, #0
 80095b6:	f04f 0000 	mov.w	r0, #0
 80095ba:	f04f 0100 	mov.w	r1, #0
 80095be:	f6bf af7a 	bge.w	80094b6 <__ieee754_pow+0x3e>
 80095c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80095c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80095ca:	e774      	b.n	80094b6 <__ieee754_pow+0x3e>
 80095cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80095d0:	d106      	bne.n	80095e0 <__ieee754_pow+0x168>
 80095d2:	4632      	mov	r2, r6
 80095d4:	463b      	mov	r3, r7
 80095d6:	4630      	mov	r0, r6
 80095d8:	4639      	mov	r1, r7
 80095da:	f7f7 f825 	bl	8000628 <__aeabi_dmul>
 80095de:	e76a      	b.n	80094b6 <__ieee754_pow+0x3e>
 80095e0:	4b3e      	ldr	r3, [pc, #248]	; (80096dc <__ieee754_pow+0x264>)
 80095e2:	4599      	cmp	r9, r3
 80095e4:	d10c      	bne.n	8009600 <__ieee754_pow+0x188>
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	db0a      	blt.n	8009600 <__ieee754_pow+0x188>
 80095ea:	ec47 6b10 	vmov	d0, r6, r7
 80095ee:	b009      	add	sp, #36	; 0x24
 80095f0:	ecbd 8b06 	vpop	{d8-d10}
 80095f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	f000 bc6c 	b.w	8009ed4 <__ieee754_sqrt>
 80095fc:	2300      	movs	r3, #0
 80095fe:	9304      	str	r3, [sp, #16]
 8009600:	ec47 6b10 	vmov	d0, r6, r7
 8009604:	f000 fd48 	bl	800a098 <fabs>
 8009608:	ec51 0b10 	vmov	r0, r1, d0
 800960c:	f1ba 0f00 	cmp.w	sl, #0
 8009610:	d129      	bne.n	8009666 <__ieee754_pow+0x1ee>
 8009612:	b124      	cbz	r4, 800961e <__ieee754_pow+0x1a6>
 8009614:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <__ieee754_pow+0x25c>)
 8009616:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800961a:	429a      	cmp	r2, r3
 800961c:	d123      	bne.n	8009666 <__ieee754_pow+0x1ee>
 800961e:	f1b9 0f00 	cmp.w	r9, #0
 8009622:	da05      	bge.n	8009630 <__ieee754_pow+0x1b8>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	2000      	movs	r0, #0
 800962a:	492a      	ldr	r1, [pc, #168]	; (80096d4 <__ieee754_pow+0x25c>)
 800962c:	f7f7 f926 	bl	800087c <__aeabi_ddiv>
 8009630:	2d00      	cmp	r5, #0
 8009632:	f6bf af40 	bge.w	80094b6 <__ieee754_pow+0x3e>
 8009636:	9b04      	ldr	r3, [sp, #16]
 8009638:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800963c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009640:	4323      	orrs	r3, r4
 8009642:	d108      	bne.n	8009656 <__ieee754_pow+0x1de>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4610      	mov	r0, r2
 800964a:	4619      	mov	r1, r3
 800964c:	f7f6 fe34 	bl	80002b8 <__aeabi_dsub>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	e78f      	b.n	8009576 <__ieee754_pow+0xfe>
 8009656:	9b04      	ldr	r3, [sp, #16]
 8009658:	2b01      	cmp	r3, #1
 800965a:	f47f af2c 	bne.w	80094b6 <__ieee754_pow+0x3e>
 800965e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009662:	4619      	mov	r1, r3
 8009664:	e727      	b.n	80094b6 <__ieee754_pow+0x3e>
 8009666:	0feb      	lsrs	r3, r5, #31
 8009668:	3b01      	subs	r3, #1
 800966a:	9306      	str	r3, [sp, #24]
 800966c:	9a06      	ldr	r2, [sp, #24]
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	4313      	orrs	r3, r2
 8009672:	d102      	bne.n	800967a <__ieee754_pow+0x202>
 8009674:	4632      	mov	r2, r6
 8009676:	463b      	mov	r3, r7
 8009678:	e7e6      	b.n	8009648 <__ieee754_pow+0x1d0>
 800967a:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <__ieee754_pow+0x268>)
 800967c:	4598      	cmp	r8, r3
 800967e:	f340 80fb 	ble.w	8009878 <__ieee754_pow+0x400>
 8009682:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009686:	4598      	cmp	r8, r3
 8009688:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <__ieee754_pow+0x260>)
 800968a:	dd0c      	ble.n	80096a6 <__ieee754_pow+0x22e>
 800968c:	429c      	cmp	r4, r3
 800968e:	dc0f      	bgt.n	80096b0 <__ieee754_pow+0x238>
 8009690:	f1b9 0f00 	cmp.w	r9, #0
 8009694:	da0f      	bge.n	80096b6 <__ieee754_pow+0x23e>
 8009696:	2000      	movs	r0, #0
 8009698:	b009      	add	sp, #36	; 0x24
 800969a:	ecbd 8b06 	vpop	{d8-d10}
 800969e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a2:	f000 bcf0 	b.w	800a086 <__math_oflow>
 80096a6:	429c      	cmp	r4, r3
 80096a8:	dbf2      	blt.n	8009690 <__ieee754_pow+0x218>
 80096aa:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <__ieee754_pow+0x25c>)
 80096ac:	429c      	cmp	r4, r3
 80096ae:	dd19      	ble.n	80096e4 <__ieee754_pow+0x26c>
 80096b0:	f1b9 0f00 	cmp.w	r9, #0
 80096b4:	dcef      	bgt.n	8009696 <__ieee754_pow+0x21e>
 80096b6:	2000      	movs	r0, #0
 80096b8:	b009      	add	sp, #36	; 0x24
 80096ba:	ecbd 8b06 	vpop	{d8-d10}
 80096be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c2:	f000 bcd7 	b.w	800a074 <__math_uflow>
 80096c6:	bf00      	nop
 80096c8:	fff00000 	.word	0xfff00000
 80096cc:	7ff00000 	.word	0x7ff00000
 80096d0:	433fffff 	.word	0x433fffff
 80096d4:	3ff00000 	.word	0x3ff00000
 80096d8:	3fefffff 	.word	0x3fefffff
 80096dc:	3fe00000 	.word	0x3fe00000
 80096e0:	41e00000 	.word	0x41e00000
 80096e4:	4b60      	ldr	r3, [pc, #384]	; (8009868 <__ieee754_pow+0x3f0>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	f7f6 fde6 	bl	80002b8 <__aeabi_dsub>
 80096ec:	a354      	add	r3, pc, #336	; (adr r3, 8009840 <__ieee754_pow+0x3c8>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	4604      	mov	r4, r0
 80096f4:	460d      	mov	r5, r1
 80096f6:	f7f6 ff97 	bl	8000628 <__aeabi_dmul>
 80096fa:	a353      	add	r3, pc, #332	; (adr r3, 8009848 <__ieee754_pow+0x3d0>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	4606      	mov	r6, r0
 8009702:	460f      	mov	r7, r1
 8009704:	4620      	mov	r0, r4
 8009706:	4629      	mov	r1, r5
 8009708:	f7f6 ff8e 	bl	8000628 <__aeabi_dmul>
 800970c:	4b57      	ldr	r3, [pc, #348]	; (800986c <__ieee754_pow+0x3f4>)
 800970e:	4682      	mov	sl, r0
 8009710:	468b      	mov	fp, r1
 8009712:	2200      	movs	r2, #0
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f7f6 ff86 	bl	8000628 <__aeabi_dmul>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	a14b      	add	r1, pc, #300	; (adr r1, 8009850 <__ieee754_pow+0x3d8>)
 8009722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009726:	f7f6 fdc7 	bl	80002b8 <__aeabi_dsub>
 800972a:	4622      	mov	r2, r4
 800972c:	462b      	mov	r3, r5
 800972e:	f7f6 ff7b 	bl	8000628 <__aeabi_dmul>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	2000      	movs	r0, #0
 8009738:	494d      	ldr	r1, [pc, #308]	; (8009870 <__ieee754_pow+0x3f8>)
 800973a:	f7f6 fdbd 	bl	80002b8 <__aeabi_dsub>
 800973e:	4622      	mov	r2, r4
 8009740:	4680      	mov	r8, r0
 8009742:	4689      	mov	r9, r1
 8009744:	462b      	mov	r3, r5
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	f7f6 ff6d 	bl	8000628 <__aeabi_dmul>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4640      	mov	r0, r8
 8009754:	4649      	mov	r1, r9
 8009756:	f7f6 ff67 	bl	8000628 <__aeabi_dmul>
 800975a:	a33f      	add	r3, pc, #252	; (adr r3, 8009858 <__ieee754_pow+0x3e0>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 ff62 	bl	8000628 <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4650      	mov	r0, sl
 800976a:	4659      	mov	r1, fp
 800976c:	f7f6 fda4 	bl	80002b8 <__aeabi_dsub>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	f7f6 fd9e 	bl	80002bc <__adddf3>
 8009780:	2000      	movs	r0, #0
 8009782:	4632      	mov	r2, r6
 8009784:	463b      	mov	r3, r7
 8009786:	4604      	mov	r4, r0
 8009788:	460d      	mov	r5, r1
 800978a:	f7f6 fd95 	bl	80002b8 <__aeabi_dsub>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4640      	mov	r0, r8
 8009794:	4649      	mov	r1, r9
 8009796:	f7f6 fd8f 	bl	80002b8 <__aeabi_dsub>
 800979a:	9b04      	ldr	r3, [sp, #16]
 800979c:	9a06      	ldr	r2, [sp, #24]
 800979e:	3b01      	subs	r3, #1
 80097a0:	4313      	orrs	r3, r2
 80097a2:	4682      	mov	sl, r0
 80097a4:	468b      	mov	fp, r1
 80097a6:	f040 81e7 	bne.w	8009b78 <__ieee754_pow+0x700>
 80097aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009860 <__ieee754_pow+0x3e8>
 80097ae:	eeb0 8a47 	vmov.f32	s16, s14
 80097b2:	eef0 8a67 	vmov.f32	s17, s15
 80097b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097ba:	2600      	movs	r6, #0
 80097bc:	4632      	mov	r2, r6
 80097be:	463b      	mov	r3, r7
 80097c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097c4:	f7f6 fd78 	bl	80002b8 <__aeabi_dsub>
 80097c8:	4622      	mov	r2, r4
 80097ca:	462b      	mov	r3, r5
 80097cc:	f7f6 ff2c 	bl	8000628 <__aeabi_dmul>
 80097d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d4:	4680      	mov	r8, r0
 80097d6:	4689      	mov	r9, r1
 80097d8:	4650      	mov	r0, sl
 80097da:	4659      	mov	r1, fp
 80097dc:	f7f6 ff24 	bl	8000628 <__aeabi_dmul>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4640      	mov	r0, r8
 80097e6:	4649      	mov	r1, r9
 80097e8:	f7f6 fd68 	bl	80002bc <__adddf3>
 80097ec:	4632      	mov	r2, r6
 80097ee:	463b      	mov	r3, r7
 80097f0:	4680      	mov	r8, r0
 80097f2:	4689      	mov	r9, r1
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f6 ff16 	bl	8000628 <__aeabi_dmul>
 80097fc:	460b      	mov	r3, r1
 80097fe:	4604      	mov	r4, r0
 8009800:	460d      	mov	r5, r1
 8009802:	4602      	mov	r2, r0
 8009804:	4649      	mov	r1, r9
 8009806:	4640      	mov	r0, r8
 8009808:	f7f6 fd58 	bl	80002bc <__adddf3>
 800980c:	4b19      	ldr	r3, [pc, #100]	; (8009874 <__ieee754_pow+0x3fc>)
 800980e:	4299      	cmp	r1, r3
 8009810:	ec45 4b19 	vmov	d9, r4, r5
 8009814:	4606      	mov	r6, r0
 8009816:	460f      	mov	r7, r1
 8009818:	468b      	mov	fp, r1
 800981a:	f340 82f1 	ble.w	8009e00 <__ieee754_pow+0x988>
 800981e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009822:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009826:	4303      	orrs	r3, r0
 8009828:	f000 81e4 	beq.w	8009bf4 <__ieee754_pow+0x77c>
 800982c:	ec51 0b18 	vmov	r0, r1, d8
 8009830:	2200      	movs	r2, #0
 8009832:	2300      	movs	r3, #0
 8009834:	f7f7 f96a 	bl	8000b0c <__aeabi_dcmplt>
 8009838:	3800      	subs	r0, #0
 800983a:	bf18      	it	ne
 800983c:	2001      	movne	r0, #1
 800983e:	e72b      	b.n	8009698 <__ieee754_pow+0x220>
 8009840:	60000000 	.word	0x60000000
 8009844:	3ff71547 	.word	0x3ff71547
 8009848:	f85ddf44 	.word	0xf85ddf44
 800984c:	3e54ae0b 	.word	0x3e54ae0b
 8009850:	55555555 	.word	0x55555555
 8009854:	3fd55555 	.word	0x3fd55555
 8009858:	652b82fe 	.word	0x652b82fe
 800985c:	3ff71547 	.word	0x3ff71547
 8009860:	00000000 	.word	0x00000000
 8009864:	bff00000 	.word	0xbff00000
 8009868:	3ff00000 	.word	0x3ff00000
 800986c:	3fd00000 	.word	0x3fd00000
 8009870:	3fe00000 	.word	0x3fe00000
 8009874:	408fffff 	.word	0x408fffff
 8009878:	4bd5      	ldr	r3, [pc, #852]	; (8009bd0 <__ieee754_pow+0x758>)
 800987a:	402b      	ands	r3, r5
 800987c:	2200      	movs	r2, #0
 800987e:	b92b      	cbnz	r3, 800988c <__ieee754_pow+0x414>
 8009880:	4bd4      	ldr	r3, [pc, #848]	; (8009bd4 <__ieee754_pow+0x75c>)
 8009882:	f7f6 fed1 	bl	8000628 <__aeabi_dmul>
 8009886:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800988a:	460c      	mov	r4, r1
 800988c:	1523      	asrs	r3, r4, #20
 800988e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009892:	4413      	add	r3, r2
 8009894:	9305      	str	r3, [sp, #20]
 8009896:	4bd0      	ldr	r3, [pc, #832]	; (8009bd8 <__ieee754_pow+0x760>)
 8009898:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800989c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80098a0:	429c      	cmp	r4, r3
 80098a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098a6:	dd08      	ble.n	80098ba <__ieee754_pow+0x442>
 80098a8:	4bcc      	ldr	r3, [pc, #816]	; (8009bdc <__ieee754_pow+0x764>)
 80098aa:	429c      	cmp	r4, r3
 80098ac:	f340 8162 	ble.w	8009b74 <__ieee754_pow+0x6fc>
 80098b0:	9b05      	ldr	r3, [sp, #20]
 80098b2:	3301      	adds	r3, #1
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80098ba:	2400      	movs	r4, #0
 80098bc:	00e3      	lsls	r3, r4, #3
 80098be:	9307      	str	r3, [sp, #28]
 80098c0:	4bc7      	ldr	r3, [pc, #796]	; (8009be0 <__ieee754_pow+0x768>)
 80098c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098c6:	ed93 7b00 	vldr	d7, [r3]
 80098ca:	4629      	mov	r1, r5
 80098cc:	ec53 2b17 	vmov	r2, r3, d7
 80098d0:	eeb0 9a47 	vmov.f32	s18, s14
 80098d4:	eef0 9a67 	vmov.f32	s19, s15
 80098d8:	4682      	mov	sl, r0
 80098da:	f7f6 fced 	bl	80002b8 <__aeabi_dsub>
 80098de:	4652      	mov	r2, sl
 80098e0:	4606      	mov	r6, r0
 80098e2:	460f      	mov	r7, r1
 80098e4:	462b      	mov	r3, r5
 80098e6:	ec51 0b19 	vmov	r0, r1, d9
 80098ea:	f7f6 fce7 	bl	80002bc <__adddf3>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	2000      	movs	r0, #0
 80098f4:	49bb      	ldr	r1, [pc, #748]	; (8009be4 <__ieee754_pow+0x76c>)
 80098f6:	f7f6 ffc1 	bl	800087c <__aeabi_ddiv>
 80098fa:	ec41 0b1a 	vmov	d10, r0, r1
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f6 fe8f 	bl	8000628 <__aeabi_dmul>
 800990a:	2300      	movs	r3, #0
 800990c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009910:	9302      	str	r3, [sp, #8]
 8009912:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009916:	46ab      	mov	fp, r5
 8009918:	106d      	asrs	r5, r5, #1
 800991a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800991e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009922:	ec41 0b18 	vmov	d8, r0, r1
 8009926:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800992a:	2200      	movs	r2, #0
 800992c:	4640      	mov	r0, r8
 800992e:	4649      	mov	r1, r9
 8009930:	4614      	mov	r4, r2
 8009932:	461d      	mov	r5, r3
 8009934:	f7f6 fe78 	bl	8000628 <__aeabi_dmul>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4630      	mov	r0, r6
 800993e:	4639      	mov	r1, r7
 8009940:	f7f6 fcba 	bl	80002b8 <__aeabi_dsub>
 8009944:	ec53 2b19 	vmov	r2, r3, d9
 8009948:	4606      	mov	r6, r0
 800994a:	460f      	mov	r7, r1
 800994c:	4620      	mov	r0, r4
 800994e:	4629      	mov	r1, r5
 8009950:	f7f6 fcb2 	bl	80002b8 <__aeabi_dsub>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4650      	mov	r0, sl
 800995a:	4659      	mov	r1, fp
 800995c:	f7f6 fcac 	bl	80002b8 <__aeabi_dsub>
 8009960:	4642      	mov	r2, r8
 8009962:	464b      	mov	r3, r9
 8009964:	f7f6 fe60 	bl	8000628 <__aeabi_dmul>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f6 fca2 	bl	80002b8 <__aeabi_dsub>
 8009974:	ec53 2b1a 	vmov	r2, r3, d10
 8009978:	f7f6 fe56 	bl	8000628 <__aeabi_dmul>
 800997c:	ec53 2b18 	vmov	r2, r3, d8
 8009980:	ec41 0b19 	vmov	d9, r0, r1
 8009984:	ec51 0b18 	vmov	r0, r1, d8
 8009988:	f7f6 fe4e 	bl	8000628 <__aeabi_dmul>
 800998c:	a37c      	add	r3, pc, #496	; (adr r3, 8009b80 <__ieee754_pow+0x708>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	4604      	mov	r4, r0
 8009994:	460d      	mov	r5, r1
 8009996:	f7f6 fe47 	bl	8000628 <__aeabi_dmul>
 800999a:	a37b      	add	r3, pc, #492	; (adr r3, 8009b88 <__ieee754_pow+0x710>)
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	f7f6 fc8c 	bl	80002bc <__adddf3>
 80099a4:	4622      	mov	r2, r4
 80099a6:	462b      	mov	r3, r5
 80099a8:	f7f6 fe3e 	bl	8000628 <__aeabi_dmul>
 80099ac:	a378      	add	r3, pc, #480	; (adr r3, 8009b90 <__ieee754_pow+0x718>)
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	f7f6 fc83 	bl	80002bc <__adddf3>
 80099b6:	4622      	mov	r2, r4
 80099b8:	462b      	mov	r3, r5
 80099ba:	f7f6 fe35 	bl	8000628 <__aeabi_dmul>
 80099be:	a376      	add	r3, pc, #472	; (adr r3, 8009b98 <__ieee754_pow+0x720>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fc7a 	bl	80002bc <__adddf3>
 80099c8:	4622      	mov	r2, r4
 80099ca:	462b      	mov	r3, r5
 80099cc:	f7f6 fe2c 	bl	8000628 <__aeabi_dmul>
 80099d0:	a373      	add	r3, pc, #460	; (adr r3, 8009ba0 <__ieee754_pow+0x728>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fc71 	bl	80002bc <__adddf3>
 80099da:	4622      	mov	r2, r4
 80099dc:	462b      	mov	r3, r5
 80099de:	f7f6 fe23 	bl	8000628 <__aeabi_dmul>
 80099e2:	a371      	add	r3, pc, #452	; (adr r3, 8009ba8 <__ieee754_pow+0x730>)
 80099e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e8:	f7f6 fc68 	bl	80002bc <__adddf3>
 80099ec:	4622      	mov	r2, r4
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	462b      	mov	r3, r5
 80099f4:	4620      	mov	r0, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7f6 fe16 	bl	8000628 <__aeabi_dmul>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fe10 	bl	8000628 <__aeabi_dmul>
 8009a08:	4642      	mov	r2, r8
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	464b      	mov	r3, r9
 8009a10:	ec51 0b18 	vmov	r0, r1, d8
 8009a14:	f7f6 fc52 	bl	80002bc <__adddf3>
 8009a18:	ec53 2b19 	vmov	r2, r3, d9
 8009a1c:	f7f6 fe04 	bl	8000628 <__aeabi_dmul>
 8009a20:	4622      	mov	r2, r4
 8009a22:	462b      	mov	r3, r5
 8009a24:	f7f6 fc4a 	bl	80002bc <__adddf3>
 8009a28:	4642      	mov	r2, r8
 8009a2a:	4682      	mov	sl, r0
 8009a2c:	468b      	mov	fp, r1
 8009a2e:	464b      	mov	r3, r9
 8009a30:	4640      	mov	r0, r8
 8009a32:	4649      	mov	r1, r9
 8009a34:	f7f6 fdf8 	bl	8000628 <__aeabi_dmul>
 8009a38:	4b6b      	ldr	r3, [pc, #428]	; (8009be8 <__ieee754_pow+0x770>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	f7f6 fc3c 	bl	80002bc <__adddf3>
 8009a44:	4652      	mov	r2, sl
 8009a46:	465b      	mov	r3, fp
 8009a48:	f7f6 fc38 	bl	80002bc <__adddf3>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	4604      	mov	r4, r0
 8009a50:	460d      	mov	r5, r1
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4640      	mov	r0, r8
 8009a58:	4649      	mov	r1, r9
 8009a5a:	f7f6 fde5 	bl	8000628 <__aeabi_dmul>
 8009a5e:	4b62      	ldr	r3, [pc, #392]	; (8009be8 <__ieee754_pow+0x770>)
 8009a60:	4680      	mov	r8, r0
 8009a62:	4689      	mov	r9, r1
 8009a64:	2200      	movs	r2, #0
 8009a66:	4620      	mov	r0, r4
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7f6 fc25 	bl	80002b8 <__aeabi_dsub>
 8009a6e:	4632      	mov	r2, r6
 8009a70:	463b      	mov	r3, r7
 8009a72:	f7f6 fc21 	bl	80002b8 <__aeabi_dsub>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	f7f6 fc1b 	bl	80002b8 <__aeabi_dsub>
 8009a82:	ec53 2b18 	vmov	r2, r3, d8
 8009a86:	f7f6 fdcf 	bl	8000628 <__aeabi_dmul>
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	460f      	mov	r7, r1
 8009a90:	462b      	mov	r3, r5
 8009a92:	ec51 0b19 	vmov	r0, r1, d9
 8009a96:	f7f6 fdc7 	bl	8000628 <__aeabi_dmul>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f6 fc0b 	bl	80002bc <__adddf3>
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	460f      	mov	r7, r1
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f6 fc03 	bl	80002bc <__adddf3>
 8009ab6:	a33e      	add	r3, pc, #248	; (adr r3, 8009bb0 <__ieee754_pow+0x738>)
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	2000      	movs	r0, #0
 8009abe:	4604      	mov	r4, r0
 8009ac0:	460d      	mov	r5, r1
 8009ac2:	f7f6 fdb1 	bl	8000628 <__aeabi_dmul>
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	ec41 0b18 	vmov	d8, r0, r1
 8009acc:	464b      	mov	r3, r9
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	f7f6 fbf1 	bl	80002b8 <__aeabi_dsub>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	f7f6 fbeb 	bl	80002b8 <__aeabi_dsub>
 8009ae2:	a335      	add	r3, pc, #212	; (adr r3, 8009bb8 <__ieee754_pow+0x740>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fd9e 	bl	8000628 <__aeabi_dmul>
 8009aec:	a334      	add	r3, pc, #208	; (adr r3, 8009bc0 <__ieee754_pow+0x748>)
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	4606      	mov	r6, r0
 8009af4:	460f      	mov	r7, r1
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	f7f6 fd95 	bl	8000628 <__aeabi_dmul>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4630      	mov	r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f6 fbd9 	bl	80002bc <__adddf3>
 8009b0a:	9a07      	ldr	r2, [sp, #28]
 8009b0c:	4b37      	ldr	r3, [pc, #220]	; (8009bec <__ieee754_pow+0x774>)
 8009b0e:	4413      	add	r3, r2
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fbd2 	bl	80002bc <__adddf3>
 8009b18:	4682      	mov	sl, r0
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	468b      	mov	fp, r1
 8009b1e:	f7f6 fd19 	bl	8000554 <__aeabi_i2d>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	4b32      	ldr	r3, [pc, #200]	; (8009bf0 <__ieee754_pow+0x778>)
 8009b26:	4413      	add	r3, r2
 8009b28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	460f      	mov	r7, r1
 8009b30:	4652      	mov	r2, sl
 8009b32:	465b      	mov	r3, fp
 8009b34:	ec51 0b18 	vmov	r0, r1, d8
 8009b38:	f7f6 fbc0 	bl	80002bc <__adddf3>
 8009b3c:	4642      	mov	r2, r8
 8009b3e:	464b      	mov	r3, r9
 8009b40:	f7f6 fbbc 	bl	80002bc <__adddf3>
 8009b44:	4632      	mov	r2, r6
 8009b46:	463b      	mov	r3, r7
 8009b48:	f7f6 fbb8 	bl	80002bc <__adddf3>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	4632      	mov	r2, r6
 8009b50:	463b      	mov	r3, r7
 8009b52:	4604      	mov	r4, r0
 8009b54:	460d      	mov	r5, r1
 8009b56:	f7f6 fbaf 	bl	80002b8 <__aeabi_dsub>
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	f7f6 fbab 	bl	80002b8 <__aeabi_dsub>
 8009b62:	ec53 2b18 	vmov	r2, r3, d8
 8009b66:	f7f6 fba7 	bl	80002b8 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4650      	mov	r0, sl
 8009b70:	4659      	mov	r1, fp
 8009b72:	e610      	b.n	8009796 <__ieee754_pow+0x31e>
 8009b74:	2401      	movs	r4, #1
 8009b76:	e6a1      	b.n	80098bc <__ieee754_pow+0x444>
 8009b78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009bc8 <__ieee754_pow+0x750>
 8009b7c:	e617      	b.n	80097ae <__ieee754_pow+0x336>
 8009b7e:	bf00      	nop
 8009b80:	4a454eef 	.word	0x4a454eef
 8009b84:	3fca7e28 	.word	0x3fca7e28
 8009b88:	93c9db65 	.word	0x93c9db65
 8009b8c:	3fcd864a 	.word	0x3fcd864a
 8009b90:	a91d4101 	.word	0xa91d4101
 8009b94:	3fd17460 	.word	0x3fd17460
 8009b98:	518f264d 	.word	0x518f264d
 8009b9c:	3fd55555 	.word	0x3fd55555
 8009ba0:	db6fabff 	.word	0xdb6fabff
 8009ba4:	3fdb6db6 	.word	0x3fdb6db6
 8009ba8:	33333303 	.word	0x33333303
 8009bac:	3fe33333 	.word	0x3fe33333
 8009bb0:	e0000000 	.word	0xe0000000
 8009bb4:	3feec709 	.word	0x3feec709
 8009bb8:	dc3a03fd 	.word	0xdc3a03fd
 8009bbc:	3feec709 	.word	0x3feec709
 8009bc0:	145b01f5 	.word	0x145b01f5
 8009bc4:	be3e2fe0 	.word	0xbe3e2fe0
 8009bc8:	00000000 	.word	0x00000000
 8009bcc:	3ff00000 	.word	0x3ff00000
 8009bd0:	7ff00000 	.word	0x7ff00000
 8009bd4:	43400000 	.word	0x43400000
 8009bd8:	0003988e 	.word	0x0003988e
 8009bdc:	000bb679 	.word	0x000bb679
 8009be0:	0800a768 	.word	0x0800a768
 8009be4:	3ff00000 	.word	0x3ff00000
 8009be8:	40080000 	.word	0x40080000
 8009bec:	0800a788 	.word	0x0800a788
 8009bf0:	0800a778 	.word	0x0800a778
 8009bf4:	a3b5      	add	r3, pc, #724	; (adr r3, 8009ecc <__ieee754_pow+0xa54>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	f7f6 fb5d 	bl	80002bc <__adddf3>
 8009c02:	4622      	mov	r2, r4
 8009c04:	ec41 0b1a 	vmov	d10, r0, r1
 8009c08:	462b      	mov	r3, r5
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	f7f6 fb53 	bl	80002b8 <__aeabi_dsub>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	ec51 0b1a 	vmov	r0, r1, d10
 8009c1a:	f7f6 ff95 	bl	8000b48 <__aeabi_dcmpgt>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f47f ae04 	bne.w	800982c <__ieee754_pow+0x3b4>
 8009c24:	4aa4      	ldr	r2, [pc, #656]	; (8009eb8 <__ieee754_pow+0xa40>)
 8009c26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	f340 8108 	ble.w	8009e40 <__ieee754_pow+0x9c8>
 8009c30:	151b      	asrs	r3, r3, #20
 8009c32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c3a:	fa4a f303 	asr.w	r3, sl, r3
 8009c3e:	445b      	add	r3, fp
 8009c40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c44:	4e9d      	ldr	r6, [pc, #628]	; (8009ebc <__ieee754_pow+0xa44>)
 8009c46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009c4a:	4116      	asrs	r6, r2
 8009c4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009c50:	2000      	movs	r0, #0
 8009c52:	ea23 0106 	bic.w	r1, r3, r6
 8009c56:	f1c2 0214 	rsb	r2, r2, #20
 8009c5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c5e:	fa4a fa02 	asr.w	sl, sl, r2
 8009c62:	f1bb 0f00 	cmp.w	fp, #0
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	bfb8      	it	lt
 8009c70:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c74:	f7f6 fb20 	bl	80002b8 <__aeabi_dsub>
 8009c78:	ec41 0b19 	vmov	d9, r0, r1
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	464b      	mov	r3, r9
 8009c80:	ec51 0b19 	vmov	r0, r1, d9
 8009c84:	f7f6 fb1a 	bl	80002bc <__adddf3>
 8009c88:	a37b      	add	r3, pc, #492	; (adr r3, 8009e78 <__ieee754_pow+0xa00>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	2000      	movs	r0, #0
 8009c90:	4604      	mov	r4, r0
 8009c92:	460d      	mov	r5, r1
 8009c94:	f7f6 fcc8 	bl	8000628 <__aeabi_dmul>
 8009c98:	ec53 2b19 	vmov	r2, r3, d9
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	460f      	mov	r7, r1
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f7f6 fb08 	bl	80002b8 <__aeabi_dsub>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4640      	mov	r0, r8
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 fb02 	bl	80002b8 <__aeabi_dsub>
 8009cb4:	a372      	add	r3, pc, #456	; (adr r3, 8009e80 <__ieee754_pow+0xa08>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 fcb5 	bl	8000628 <__aeabi_dmul>
 8009cbe:	a372      	add	r3, pc, #456	; (adr r3, 8009e88 <__ieee754_pow+0xa10>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4689      	mov	r9, r1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 fcac 	bl	8000628 <__aeabi_dmul>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 faf0 	bl	80002bc <__adddf3>
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	f7f6 fae8 	bl	80002bc <__adddf3>
 8009cec:	4632      	mov	r2, r6
 8009cee:	463b      	mov	r3, r7
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	4689      	mov	r9, r1
 8009cf4:	f7f6 fae0 	bl	80002b8 <__aeabi_dsub>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7f6 fada 	bl	80002b8 <__aeabi_dsub>
 8009d04:	4642      	mov	r2, r8
 8009d06:	4606      	mov	r6, r0
 8009d08:	460f      	mov	r7, r1
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	4649      	mov	r1, r9
 8009d10:	f7f6 fc8a 	bl	8000628 <__aeabi_dmul>
 8009d14:	a35e      	add	r3, pc, #376	; (adr r3, 8009e90 <__ieee754_pow+0xa18>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	f7f6 fc83 	bl	8000628 <__aeabi_dmul>
 8009d22:	a35d      	add	r3, pc, #372	; (adr r3, 8009e98 <__ieee754_pow+0xa20>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fac6 	bl	80002b8 <__aeabi_dsub>
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	462b      	mov	r3, r5
 8009d30:	f7f6 fc7a 	bl	8000628 <__aeabi_dmul>
 8009d34:	a35a      	add	r3, pc, #360	; (adr r3, 8009ea0 <__ieee754_pow+0xa28>)
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f7f6 fabf 	bl	80002bc <__adddf3>
 8009d3e:	4622      	mov	r2, r4
 8009d40:	462b      	mov	r3, r5
 8009d42:	f7f6 fc71 	bl	8000628 <__aeabi_dmul>
 8009d46:	a358      	add	r3, pc, #352	; (adr r3, 8009ea8 <__ieee754_pow+0xa30>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fab4 	bl	80002b8 <__aeabi_dsub>
 8009d50:	4622      	mov	r2, r4
 8009d52:	462b      	mov	r3, r5
 8009d54:	f7f6 fc68 	bl	8000628 <__aeabi_dmul>
 8009d58:	a355      	add	r3, pc, #340	; (adr r3, 8009eb0 <__ieee754_pow+0xa38>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 faad 	bl	80002bc <__adddf3>
 8009d62:	4622      	mov	r2, r4
 8009d64:	462b      	mov	r3, r5
 8009d66:	f7f6 fc5f 	bl	8000628 <__aeabi_dmul>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 faa1 	bl	80002b8 <__aeabi_dsub>
 8009d76:	4604      	mov	r4, r0
 8009d78:	460d      	mov	r5, r1
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4640      	mov	r0, r8
 8009d80:	4649      	mov	r1, r9
 8009d82:	f7f6 fc51 	bl	8000628 <__aeabi_dmul>
 8009d86:	2200      	movs	r2, #0
 8009d88:	ec41 0b19 	vmov	d9, r0, r1
 8009d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d90:	4620      	mov	r0, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	f7f6 fa90 	bl	80002b8 <__aeabi_dsub>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	ec51 0b19 	vmov	r0, r1, d9
 8009da0:	f7f6 fd6c 	bl	800087c <__aeabi_ddiv>
 8009da4:	4632      	mov	r2, r6
 8009da6:	4604      	mov	r4, r0
 8009da8:	460d      	mov	r5, r1
 8009daa:	463b      	mov	r3, r7
 8009dac:	4640      	mov	r0, r8
 8009dae:	4649      	mov	r1, r9
 8009db0:	f7f6 fc3a 	bl	8000628 <__aeabi_dmul>
 8009db4:	4632      	mov	r2, r6
 8009db6:	463b      	mov	r3, r7
 8009db8:	f7f6 fa80 	bl	80002bc <__adddf3>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7f6 fa78 	bl	80002b8 <__aeabi_dsub>
 8009dc8:	4642      	mov	r2, r8
 8009dca:	464b      	mov	r3, r9
 8009dcc:	f7f6 fa74 	bl	80002b8 <__aeabi_dsub>
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	493a      	ldr	r1, [pc, #232]	; (8009ec0 <__ieee754_pow+0xa48>)
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f7f6 fa6e 	bl	80002b8 <__aeabi_dsub>
 8009ddc:	ec41 0b10 	vmov	d0, r0, r1
 8009de0:	ee10 3a90 	vmov	r3, s1
 8009de4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dec:	da2b      	bge.n	8009e46 <__ieee754_pow+0x9ce>
 8009dee:	4650      	mov	r0, sl
 8009df0:	f000 f966 	bl	800a0c0 <scalbn>
 8009df4:	ec51 0b10 	vmov	r0, r1, d0
 8009df8:	ec53 2b18 	vmov	r2, r3, d8
 8009dfc:	f7ff bbed 	b.w	80095da <__ieee754_pow+0x162>
 8009e00:	4b30      	ldr	r3, [pc, #192]	; (8009ec4 <__ieee754_pow+0xa4c>)
 8009e02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e06:	429e      	cmp	r6, r3
 8009e08:	f77f af0c 	ble.w	8009c24 <__ieee754_pow+0x7ac>
 8009e0c:	4b2e      	ldr	r3, [pc, #184]	; (8009ec8 <__ieee754_pow+0xa50>)
 8009e0e:	440b      	add	r3, r1
 8009e10:	4303      	orrs	r3, r0
 8009e12:	d009      	beq.n	8009e28 <__ieee754_pow+0x9b0>
 8009e14:	ec51 0b18 	vmov	r0, r1, d8
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f7f6 fe76 	bl	8000b0c <__aeabi_dcmplt>
 8009e20:	3800      	subs	r0, #0
 8009e22:	bf18      	it	ne
 8009e24:	2001      	movne	r0, #1
 8009e26:	e447      	b.n	80096b8 <__ieee754_pow+0x240>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	f7f6 fa44 	bl	80002b8 <__aeabi_dsub>
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	f7f6 fe7e 	bl	8000b34 <__aeabi_dcmpge>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f43f aef3 	beq.w	8009c24 <__ieee754_pow+0x7ac>
 8009e3e:	e7e9      	b.n	8009e14 <__ieee754_pow+0x99c>
 8009e40:	f04f 0a00 	mov.w	sl, #0
 8009e44:	e71a      	b.n	8009c7c <__ieee754_pow+0x804>
 8009e46:	ec51 0b10 	vmov	r0, r1, d0
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	e7d4      	b.n	8009df8 <__ieee754_pow+0x980>
 8009e4e:	491c      	ldr	r1, [pc, #112]	; (8009ec0 <__ieee754_pow+0xa48>)
 8009e50:	2000      	movs	r0, #0
 8009e52:	f7ff bb30 	b.w	80094b6 <__ieee754_pow+0x3e>
 8009e56:	2000      	movs	r0, #0
 8009e58:	2100      	movs	r1, #0
 8009e5a:	f7ff bb2c 	b.w	80094b6 <__ieee754_pow+0x3e>
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	f7ff bb28 	b.w	80094b6 <__ieee754_pow+0x3e>
 8009e66:	9204      	str	r2, [sp, #16]
 8009e68:	f7ff bb7a 	b.w	8009560 <__ieee754_pow+0xe8>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f7ff bb64 	b.w	800953a <__ieee754_pow+0xc2>
 8009e72:	bf00      	nop
 8009e74:	f3af 8000 	nop.w
 8009e78:	00000000 	.word	0x00000000
 8009e7c:	3fe62e43 	.word	0x3fe62e43
 8009e80:	fefa39ef 	.word	0xfefa39ef
 8009e84:	3fe62e42 	.word	0x3fe62e42
 8009e88:	0ca86c39 	.word	0x0ca86c39
 8009e8c:	be205c61 	.word	0xbe205c61
 8009e90:	72bea4d0 	.word	0x72bea4d0
 8009e94:	3e663769 	.word	0x3e663769
 8009e98:	c5d26bf1 	.word	0xc5d26bf1
 8009e9c:	3ebbbd41 	.word	0x3ebbbd41
 8009ea0:	af25de2c 	.word	0xaf25de2c
 8009ea4:	3f11566a 	.word	0x3f11566a
 8009ea8:	16bebd93 	.word	0x16bebd93
 8009eac:	3f66c16c 	.word	0x3f66c16c
 8009eb0:	5555553e 	.word	0x5555553e
 8009eb4:	3fc55555 	.word	0x3fc55555
 8009eb8:	3fe00000 	.word	0x3fe00000
 8009ebc:	000fffff 	.word	0x000fffff
 8009ec0:	3ff00000 	.word	0x3ff00000
 8009ec4:	4090cbff 	.word	0x4090cbff
 8009ec8:	3f6f3400 	.word	0x3f6f3400
 8009ecc:	652b82fe 	.word	0x652b82fe
 8009ed0:	3c971547 	.word	0x3c971547

08009ed4 <__ieee754_sqrt>:
 8009ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed8:	ec55 4b10 	vmov	r4, r5, d0
 8009edc:	4e55      	ldr	r6, [pc, #340]	; (800a034 <__ieee754_sqrt+0x160>)
 8009ede:	43ae      	bics	r6, r5
 8009ee0:	ee10 0a10 	vmov	r0, s0
 8009ee4:	ee10 3a10 	vmov	r3, s0
 8009ee8:	462a      	mov	r2, r5
 8009eea:	4629      	mov	r1, r5
 8009eec:	d110      	bne.n	8009f10 <__ieee754_sqrt+0x3c>
 8009eee:	ee10 2a10 	vmov	r2, s0
 8009ef2:	462b      	mov	r3, r5
 8009ef4:	f7f6 fb98 	bl	8000628 <__aeabi_dmul>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 f9dc 	bl	80002bc <__adddf3>
 8009f04:	4604      	mov	r4, r0
 8009f06:	460d      	mov	r5, r1
 8009f08:	ec45 4b10 	vmov	d0, r4, r5
 8009f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f10:	2d00      	cmp	r5, #0
 8009f12:	dc10      	bgt.n	8009f36 <__ieee754_sqrt+0x62>
 8009f14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f18:	4330      	orrs	r0, r6
 8009f1a:	d0f5      	beq.n	8009f08 <__ieee754_sqrt+0x34>
 8009f1c:	b15d      	cbz	r5, 8009f36 <__ieee754_sqrt+0x62>
 8009f1e:	ee10 2a10 	vmov	r2, s0
 8009f22:	462b      	mov	r3, r5
 8009f24:	ee10 0a10 	vmov	r0, s0
 8009f28:	f7f6 f9c6 	bl	80002b8 <__aeabi_dsub>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	f7f6 fca4 	bl	800087c <__aeabi_ddiv>
 8009f34:	e7e6      	b.n	8009f04 <__ieee754_sqrt+0x30>
 8009f36:	1512      	asrs	r2, r2, #20
 8009f38:	d074      	beq.n	800a024 <__ieee754_sqrt+0x150>
 8009f3a:	07d4      	lsls	r4, r2, #31
 8009f3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009f40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009f48:	bf5e      	ittt	pl
 8009f4a:	0fda      	lsrpl	r2, r3, #31
 8009f4c:	005b      	lslpl	r3, r3, #1
 8009f4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009f52:	2400      	movs	r4, #0
 8009f54:	0fda      	lsrs	r2, r3, #31
 8009f56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009f5a:	107f      	asrs	r7, r7, #1
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	2516      	movs	r5, #22
 8009f60:	4620      	mov	r0, r4
 8009f62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009f66:	1886      	adds	r6, r0, r2
 8009f68:	428e      	cmp	r6, r1
 8009f6a:	bfde      	ittt	le
 8009f6c:	1b89      	suble	r1, r1, r6
 8009f6e:	18b0      	addle	r0, r6, r2
 8009f70:	18a4      	addle	r4, r4, r2
 8009f72:	0049      	lsls	r1, r1, #1
 8009f74:	3d01      	subs	r5, #1
 8009f76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009f7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009f7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f82:	d1f0      	bne.n	8009f66 <__ieee754_sqrt+0x92>
 8009f84:	462a      	mov	r2, r5
 8009f86:	f04f 0e20 	mov.w	lr, #32
 8009f8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f8e:	4281      	cmp	r1, r0
 8009f90:	eb06 0c05 	add.w	ip, r6, r5
 8009f94:	dc02      	bgt.n	8009f9c <__ieee754_sqrt+0xc8>
 8009f96:	d113      	bne.n	8009fc0 <__ieee754_sqrt+0xec>
 8009f98:	459c      	cmp	ip, r3
 8009f9a:	d811      	bhi.n	8009fc0 <__ieee754_sqrt+0xec>
 8009f9c:	f1bc 0f00 	cmp.w	ip, #0
 8009fa0:	eb0c 0506 	add.w	r5, ip, r6
 8009fa4:	da43      	bge.n	800a02e <__ieee754_sqrt+0x15a>
 8009fa6:	2d00      	cmp	r5, #0
 8009fa8:	db41      	blt.n	800a02e <__ieee754_sqrt+0x15a>
 8009faa:	f100 0801 	add.w	r8, r0, #1
 8009fae:	1a09      	subs	r1, r1, r0
 8009fb0:	459c      	cmp	ip, r3
 8009fb2:	bf88      	it	hi
 8009fb4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009fb8:	eba3 030c 	sub.w	r3, r3, ip
 8009fbc:	4432      	add	r2, r6
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009fc4:	f1be 0e01 	subs.w	lr, lr, #1
 8009fc8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009fcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009fd4:	d1db      	bne.n	8009f8e <__ieee754_sqrt+0xba>
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	d006      	beq.n	8009fe8 <__ieee754_sqrt+0x114>
 8009fda:	1c50      	adds	r0, r2, #1
 8009fdc:	bf13      	iteet	ne
 8009fde:	3201      	addne	r2, #1
 8009fe0:	3401      	addeq	r4, #1
 8009fe2:	4672      	moveq	r2, lr
 8009fe4:	f022 0201 	bicne.w	r2, r2, #1
 8009fe8:	1063      	asrs	r3, r4, #1
 8009fea:	0852      	lsrs	r2, r2, #1
 8009fec:	07e1      	lsls	r1, r4, #31
 8009fee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009ff2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009ff6:	bf48      	it	mi
 8009ff8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009ffc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a000:	4614      	mov	r4, r2
 800a002:	e781      	b.n	8009f08 <__ieee754_sqrt+0x34>
 800a004:	0ad9      	lsrs	r1, r3, #11
 800a006:	3815      	subs	r0, #21
 800a008:	055b      	lsls	r3, r3, #21
 800a00a:	2900      	cmp	r1, #0
 800a00c:	d0fa      	beq.n	800a004 <__ieee754_sqrt+0x130>
 800a00e:	02cd      	lsls	r5, r1, #11
 800a010:	d50a      	bpl.n	800a028 <__ieee754_sqrt+0x154>
 800a012:	f1c2 0420 	rsb	r4, r2, #32
 800a016:	fa23 f404 	lsr.w	r4, r3, r4
 800a01a:	1e55      	subs	r5, r2, #1
 800a01c:	4093      	lsls	r3, r2
 800a01e:	4321      	orrs	r1, r4
 800a020:	1b42      	subs	r2, r0, r5
 800a022:	e78a      	b.n	8009f3a <__ieee754_sqrt+0x66>
 800a024:	4610      	mov	r0, r2
 800a026:	e7f0      	b.n	800a00a <__ieee754_sqrt+0x136>
 800a028:	0049      	lsls	r1, r1, #1
 800a02a:	3201      	adds	r2, #1
 800a02c:	e7ef      	b.n	800a00e <__ieee754_sqrt+0x13a>
 800a02e:	4680      	mov	r8, r0
 800a030:	e7bd      	b.n	8009fae <__ieee754_sqrt+0xda>
 800a032:	bf00      	nop
 800a034:	7ff00000 	.word	0x7ff00000

0800a038 <with_errno>:
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	4604      	mov	r4, r0
 800a03c:	460d      	mov	r5, r1
 800a03e:	4616      	mov	r6, r2
 800a040:	f7fb fd94 	bl	8005b6c <__errno>
 800a044:	4629      	mov	r1, r5
 800a046:	6006      	str	r6, [r0, #0]
 800a048:	4620      	mov	r0, r4
 800a04a:	bd70      	pop	{r4, r5, r6, pc}

0800a04c <xflow>:
 800a04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a04e:	4614      	mov	r4, r2
 800a050:	461d      	mov	r5, r3
 800a052:	b108      	cbz	r0, 800a058 <xflow+0xc>
 800a054:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a058:	e9cd 2300 	strd	r2, r3, [sp]
 800a05c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a060:	4620      	mov	r0, r4
 800a062:	4629      	mov	r1, r5
 800a064:	f7f6 fae0 	bl	8000628 <__aeabi_dmul>
 800a068:	2222      	movs	r2, #34	; 0x22
 800a06a:	b003      	add	sp, #12
 800a06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a070:	f7ff bfe2 	b.w	800a038 <with_errno>

0800a074 <__math_uflow>:
 800a074:	b508      	push	{r3, lr}
 800a076:	2200      	movs	r2, #0
 800a078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a07c:	f7ff ffe6 	bl	800a04c <xflow>
 800a080:	ec41 0b10 	vmov	d0, r0, r1
 800a084:	bd08      	pop	{r3, pc}

0800a086 <__math_oflow>:
 800a086:	b508      	push	{r3, lr}
 800a088:	2200      	movs	r2, #0
 800a08a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a08e:	f7ff ffdd 	bl	800a04c <xflow>
 800a092:	ec41 0b10 	vmov	d0, r0, r1
 800a096:	bd08      	pop	{r3, pc}

0800a098 <fabs>:
 800a098:	ec51 0b10 	vmov	r0, r1, d0
 800a09c:	ee10 2a10 	vmov	r2, s0
 800a0a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0a4:	ec43 2b10 	vmov	d0, r2, r3
 800a0a8:	4770      	bx	lr

0800a0aa <finite>:
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	ed8d 0b00 	vstr	d0, [sp]
 800a0b0:	9801      	ldr	r0, [sp, #4]
 800a0b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a0b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a0ba:	0fc0      	lsrs	r0, r0, #31
 800a0bc:	b002      	add	sp, #8
 800a0be:	4770      	bx	lr

0800a0c0 <scalbn>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	ec55 4b10 	vmov	r4, r5, d0
 800a0c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	462b      	mov	r3, r5
 800a0ce:	b99a      	cbnz	r2, 800a0f8 <scalbn+0x38>
 800a0d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0d4:	4323      	orrs	r3, r4
 800a0d6:	d036      	beq.n	800a146 <scalbn+0x86>
 800a0d8:	4b39      	ldr	r3, [pc, #228]	; (800a1c0 <scalbn+0x100>)
 800a0da:	4629      	mov	r1, r5
 800a0dc:	ee10 0a10 	vmov	r0, s0
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f7f6 faa1 	bl	8000628 <__aeabi_dmul>
 800a0e6:	4b37      	ldr	r3, [pc, #220]	; (800a1c4 <scalbn+0x104>)
 800a0e8:	429e      	cmp	r6, r3
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	da10      	bge.n	800a112 <scalbn+0x52>
 800a0f0:	a32b      	add	r3, pc, #172	; (adr r3, 800a1a0 <scalbn+0xe0>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	e03a      	b.n	800a16e <scalbn+0xae>
 800a0f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a0fc:	428a      	cmp	r2, r1
 800a0fe:	d10c      	bne.n	800a11a <scalbn+0x5a>
 800a100:	ee10 2a10 	vmov	r2, s0
 800a104:	4620      	mov	r0, r4
 800a106:	4629      	mov	r1, r5
 800a108:	f7f6 f8d8 	bl	80002bc <__adddf3>
 800a10c:	4604      	mov	r4, r0
 800a10e:	460d      	mov	r5, r1
 800a110:	e019      	b.n	800a146 <scalbn+0x86>
 800a112:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a116:	460b      	mov	r3, r1
 800a118:	3a36      	subs	r2, #54	; 0x36
 800a11a:	4432      	add	r2, r6
 800a11c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a120:	428a      	cmp	r2, r1
 800a122:	dd08      	ble.n	800a136 <scalbn+0x76>
 800a124:	2d00      	cmp	r5, #0
 800a126:	a120      	add	r1, pc, #128	; (adr r1, 800a1a8 <scalbn+0xe8>)
 800a128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a12c:	da1c      	bge.n	800a168 <scalbn+0xa8>
 800a12e:	a120      	add	r1, pc, #128	; (adr r1, 800a1b0 <scalbn+0xf0>)
 800a130:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a134:	e018      	b.n	800a168 <scalbn+0xa8>
 800a136:	2a00      	cmp	r2, #0
 800a138:	dd08      	ble.n	800a14c <scalbn+0x8c>
 800a13a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a13e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a142:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a146:	ec45 4b10 	vmov	d0, r4, r5
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a150:	da19      	bge.n	800a186 <scalbn+0xc6>
 800a152:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a156:	429e      	cmp	r6, r3
 800a158:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a15c:	dd0a      	ble.n	800a174 <scalbn+0xb4>
 800a15e:	a112      	add	r1, pc, #72	; (adr r1, 800a1a8 <scalbn+0xe8>)
 800a160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e2      	bne.n	800a12e <scalbn+0x6e>
 800a168:	a30f      	add	r3, pc, #60	; (adr r3, 800a1a8 <scalbn+0xe8>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 fa5b 	bl	8000628 <__aeabi_dmul>
 800a172:	e7cb      	b.n	800a10c <scalbn+0x4c>
 800a174:	a10a      	add	r1, pc, #40	; (adr r1, 800a1a0 <scalbn+0xe0>)
 800a176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0b8      	beq.n	800a0f0 <scalbn+0x30>
 800a17e:	a10e      	add	r1, pc, #56	; (adr r1, 800a1b8 <scalbn+0xf8>)
 800a180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a184:	e7b4      	b.n	800a0f0 <scalbn+0x30>
 800a186:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a18a:	3236      	adds	r2, #54	; 0x36
 800a18c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a190:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a194:	4620      	mov	r0, r4
 800a196:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <scalbn+0x108>)
 800a198:	2200      	movs	r2, #0
 800a19a:	e7e8      	b.n	800a16e <scalbn+0xae>
 800a19c:	f3af 8000 	nop.w
 800a1a0:	c2f8f359 	.word	0xc2f8f359
 800a1a4:	01a56e1f 	.word	0x01a56e1f
 800a1a8:	8800759c 	.word	0x8800759c
 800a1ac:	7e37e43c 	.word	0x7e37e43c
 800a1b0:	8800759c 	.word	0x8800759c
 800a1b4:	fe37e43c 	.word	0xfe37e43c
 800a1b8:	c2f8f359 	.word	0xc2f8f359
 800a1bc:	81a56e1f 	.word	0x81a56e1f
 800a1c0:	43500000 	.word	0x43500000
 800a1c4:	ffff3cb0 	.word	0xffff3cb0
 800a1c8:	3c900000 	.word	0x3c900000

0800a1cc <_sbrk>:
 800a1cc:	4a04      	ldr	r2, [pc, #16]	; (800a1e0 <_sbrk+0x14>)
 800a1ce:	6811      	ldr	r1, [r2, #0]
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	b909      	cbnz	r1, 800a1d8 <_sbrk+0xc>
 800a1d4:	4903      	ldr	r1, [pc, #12]	; (800a1e4 <_sbrk+0x18>)
 800a1d6:	6011      	str	r1, [r2, #0]
 800a1d8:	6810      	ldr	r0, [r2, #0]
 800a1da:	4403      	add	r3, r0
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	4770      	bx	lr
 800a1e0:	200005c4 	.word	0x200005c4
 800a1e4:	200005c8 	.word	0x200005c8

0800a1e8 <_init>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	bf00      	nop
 800a1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ee:	bc08      	pop	{r3}
 800a1f0:	469e      	mov	lr, r3
 800a1f2:	4770      	bx	lr

0800a1f4 <_fini>:
 800a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f6:	bf00      	nop
 800a1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fa:	bc08      	pop	{r3}
 800a1fc:	469e      	mov	lr, r3
 800a1fe:	4770      	bx	lr
