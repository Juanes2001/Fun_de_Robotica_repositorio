
Pulse_width_10ns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006f88  08006f88  00016f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007398  08007398  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007398  08007398  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007398  08007398  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007398  08007398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080073a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001d0  08007570  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08007570  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c33  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d36  00000000  00000000  00023e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c0  00000000  00000000  00024b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000348  00000000  00000000  00024f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001060c  00000000  00000000  00025278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004663  00000000  00000000  00035884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000578a2  00000000  00000000  00039ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00091789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000917dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f70 	.word	0x08006f70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	08006f70 	.word	0x08006f70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:

//Contador
double counter = 0;

int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	//Activamos la FPU
 	SCB -> CPACR |= (0xF << 20);
 8000c9c:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <main+0x108>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a3f      	ldr	r2, [pc, #252]	; (8000da0 <main+0x108>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	inSystem ();
 8000cac:	f000 f884 	bl	8000db8 <inSystem>

    /* Loop forever */
	while(1){


			if (rxData != '\0'){
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <main+0x10c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0fb      	beq.n	8000cb0 <main+0x18>

				writeChar(&handlerUSART, rxData);
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <main+0x10c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	483a      	ldr	r0, [pc, #232]	; (8000da8 <main+0x110>)
 8000cc0:	f002 fbd8 	bl	8003474 <writeChar>

				if (rxData == '+'){
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <main+0x10c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b2b      	cmp	r3, #43	; 0x2b
 8000cca:	d12f      	bne.n	8000d2c <main+0x94>

					if (counter < 100){
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <main+0x114>)
 8000cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <main+0x118>)
 8000cd8:	f7ff ff08 	bl	8000aec <__aeabi_dcmplt>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00d      	beq.n	8000cfe <main+0x66>
					counter+= 0.2;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	; (8000dac <main+0x114>)
 8000ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce8:	a32b      	add	r3, pc, #172	; (adr r3, 8000d98 <main+0x100>)
 8000cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cee:	f7ff fad5 	bl	800029c <__adddf3>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	492d      	ldr	r1, [pc, #180]	; (8000dac <main+0x114>)
 8000cf8:	e9c1 2300 	strd	r2, r3, [r1]
 8000cfc:	e005      	b.n	8000d0a <main+0x72>
					}else{
						counter = 100;
 8000cfe:	492b      	ldr	r1, [pc, #172]	; (8000dac <main+0x114>)
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <main+0x118>)
 8000d06:	e9c1 2300 	strd	r2, r3, [r1]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <main+0x114>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff ff70 	bl	8000bf8 <__aeabi_d2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	ee00 3a10 	vmov	s0, r3
 8000d1e:	4825      	ldr	r0, [pc, #148]	; (8000db4 <main+0x11c>)
 8000d20:	f001 fc46 	bl	80025b0 <updateDuttyCycle>
					rxData = '\0';
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <main+0x10c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e7c1      	b.n	8000cb0 <main+0x18>

				}else if (rxData == '-'){
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <main+0x10c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b2d      	cmp	r3, #45	; 0x2d
 8000d32:	d1bd      	bne.n	8000cb0 <main+0x18>

					if (counter > 0){
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <main+0x114>)
 8000d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	f7ff fef1 	bl	8000b28 <__aeabi_dcmpgt>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00d      	beq.n	8000d68 <main+0xd0>
						counter-= 0.2;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <main+0x114>)
 8000d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d52:	a311      	add	r3, pc, #68	; (adr r3, 8000d98 <main+0x100>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fa9e 	bl	8000298 <__aeabi_dsub>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4912      	ldr	r1, [pc, #72]	; (8000dac <main+0x114>)
 8000d62:	e9c1 2300 	strd	r2, r3, [r1]
 8000d66:	e006      	b.n	8000d76 <main+0xde>
					}else{
						counter = 0;
 8000d68:	4910      	ldr	r1, [pc, #64]	; (8000dac <main+0x114>)
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	e9c1 2300 	strd	r2, r3, [r1]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <main+0x114>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f7ff ff3a 	bl	8000bf8 <__aeabi_d2f>
 8000d84:	4603      	mov	r3, r0
 8000d86:	ee00 3a10 	vmov	s0, r3
 8000d8a:	480a      	ldr	r0, [pc, #40]	; (8000db4 <main+0x11c>)
 8000d8c:	f001 fc10 	bl	80025b0 <updateDuttyCycle>
					rxData = '\0';
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <main+0x10c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
			if (rxData != '\0'){
 8000d96:	e78b      	b.n	8000cb0 <main+0x18>
 8000d98:	9999999a 	.word	0x9999999a
 8000d9c:	3fc99999 	.word	0x3fc99999
 8000da0:	e000ed00 	.word	0xe000ed00
 8000da4:	200002f4 	.word	0x200002f4
 8000da8:	20000260 	.word	0x20000260
 8000dac:	200002f8 	.word	0x200002f8
 8000db0:	40590000 	.word	0x40590000
 8000db4:	20000240 	.word	0x20000240

08000db8 <inSystem>:
		}
	}
}


void inSystem (void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
//	show_MaxFreq(MCO2,5); // Sale por el pin A8
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000dbc:	2008      	movs	r0, #8
 8000dbe:	f001 fc07 	bl	80025d0 <RCC_enableMaxFrequencies>

	//Config del pin A8 salida de la velocidad del micro

	handlerMCOShow.pGPIOx                             = GPIOC;
 8000dc2:	4b6d      	ldr	r3, [pc, #436]	; (8000f78 <inSystem+0x1c0>)
 8000dc4:	4a6d      	ldr	r2, [pc, #436]	; (8000f7c <inSystem+0x1c4>)
 8000dc6:	601a      	str	r2, [r3, #0]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinNumber      = PIN_9 ;
 8000dc8:	4b6b      	ldr	r3, [pc, #428]	; (8000f78 <inSystem+0x1c0>)
 8000dca:	2209      	movs	r2, #9
 8000dcc:	711a      	strb	r2, [r3, #4]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000dce:	4b6a      	ldr	r3, [pc, #424]	; (8000f78 <inSystem+0x1c0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	725a      	strb	r2, [r3, #9]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000dd4:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <inSystem+0x1c0>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerMCOShow);
 8000dda:	4867      	ldr	r0, [pc, #412]	; (8000f78 <inSystem+0x1c0>)
 8000ddc:	f000 fdde 	bl	800199c <GPIO_Config>

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000de0:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <inSystem+0x1c8>)
 8000de2:	4a68      	ldr	r2, [pc, #416]	; (8000f84 <inSystem+0x1cc>)
 8000de4:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000de6:	4b66      	ldr	r3, [pc, #408]	; (8000f80 <inSystem+0x1c8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000dec:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <inSystem+0x1c8>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000df2:	4b63      	ldr	r3, [pc, #396]	; (8000f80 <inSystem+0x1c8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000df8:	4b61      	ldr	r3, [pc, #388]	; (8000f80 <inSystem+0x1c8>)
 8000dfa:	2205      	movs	r2, #5
 8000dfc:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000dfe:	4b60      	ldr	r3, [pc, #384]	; (8000f80 <inSystem+0x1c8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000e04:	4b5e      	ldr	r3, [pc, #376]	; (8000f80 <inSystem+0x1c8>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000e0a:	485d      	ldr	r0, [pc, #372]	; (8000f80 <inSystem+0x1c8>)
 8000e0c:	f000 fdc6 	bl	800199c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000e10:	2101      	movs	r1, #1
 8000e12:	485b      	ldr	r0, [pc, #364]	; (8000f80 <inSystem+0x1c8>)
 8000e14:	f000 feec 	bl	8001bf0 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM2;
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <inSystem+0x1d0>)
 8000e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1e:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000e20:	4b59      	ldr	r3, [pc, #356]	; (8000f88 <inSystem+0x1d0>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000e26:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <inSystem+0x1d0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8000e2c:	4b56      	ldr	r3, [pc, #344]	; (8000f88 <inSystem+0x1d0>)
 8000e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e32:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <inSystem+0x1d0>)
 8000e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000e3c:	4852      	ldr	r0, [pc, #328]	; (8000f88 <inSystem+0x1d0>)
 8000e3e:	f000 f9cf 	bl	80011e0 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000e42:	4851      	ldr	r0, [pc, #324]	; (8000f88 <inSystem+0x1d0>)
 8000e44:	f000 fd98 	bl	8001978 <startTimer>

	// PWM handler del GPIO y el PWM

	handlerPinPwm_pulse_10ns.pGPIOx                             = GPIOA;
 8000e48:	4b50      	ldr	r3, [pc, #320]	; (8000f8c <inSystem+0x1d4>)
 8000e4a:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <inSystem+0x1cc>)
 8000e4c:	601a      	str	r2, [r3, #0]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinAltFunMode  = AF1;
 8000e4e:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <inSystem+0x1d4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e54:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <inSystem+0x1d4>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <inSystem+0x1d4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8000e60:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <inSystem+0x1d4>)
 8000e62:	2208      	movs	r2, #8
 8000e64:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e66:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <inSystem+0x1d4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_pulse_10ns.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <inSystem+0x1d4>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_pulse_10ns);
 8000e72:	4846      	ldr	r0, [pc, #280]	; (8000f8c <inSystem+0x1d4>)
 8000e74:	f000 fd92 	bl	800199c <GPIO_Config>

	handlerPWM_pulse_10ns.ptrTIMx            = TIM1;
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <inSystem+0x1d8>)
 8000e7a:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <inSystem+0x1dc>)
 8000e7c:	601a      	str	r2, [r3, #0]
	handlerPWM_pulse_10ns.config.channel     = PWM_CHANNEL_1;
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <inSystem+0x1d8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	721a      	strb	r2, [r3, #8]
	handlerPWM_pulse_10ns.config.duttyCicle  = 1.2;
 8000e84:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <inSystem+0x1d8>)
 8000e86:	4a44      	ldr	r2, [pc, #272]	; (8000f98 <inSystem+0x1e0>)
 8000e88:	619a      	str	r2, [r3, #24]
	counter = handlerPWM_pulse_10ns.config.duttyCicle;
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <inSystem+0x1d8>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fb62 	bl	8000558 <__aeabi_f2d>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4940      	ldr	r1, [pc, #256]	; (8000f9c <inSystem+0x1e4>)
 8000e9a:	e9c1 2300 	strd	r2, r3, [r1]
	handlerPWM_pulse_10ns.config.periodo     = 10000; // se maneja 100kHz por testeo
 8000e9e:	493c      	ldr	r1, [pc, #240]	; (8000f90 <inSystem+0x1d8>)
 8000ea0:	a333      	add	r3, pc, #204	; (adr r3, 8000f70 <inSystem+0x1b8>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_pulse_10ns.config.prescaler   = PWM_SPEED_100MHz_10ns;
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <inSystem+0x1d8>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
	handlerPWM_pulse_10ns.config.polarity    = PWM_DISABLE_POLARITY;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <inSystem+0x1d8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
	handlerPWM_pulse_10ns.config.optocoupler = PWM_DISABLE_OPTOCOUPLER;
 8000eb6:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <inSystem+0x1d8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_pulse_10ns);
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <inSystem+0x1d8>)
 8000ebe:	f000 fefb 	bl	8001cb8 <pwm_Config>
	startPwmSignal(&handlerPWM_pulse_10ns);
 8000ec2:	4833      	ldr	r0, [pc, #204]	; (8000f90 <inSystem+0x1d8>)
 8000ec4:	f000 ffe2 	bl	8001e8c <startPwmSignal>
	enableOutput(&handlerPWM_pulse_10ns);
 8000ec8:	4831      	ldr	r0, [pc, #196]	; (8000f90 <inSystem+0x1d8>)
 8000eca:	f000 fff1 	bl	8001eb0 <enableOutput>


	//Comunicacion serial


	handlerRxPin.pGPIOx                             = GPIOA;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <inSystem+0x1e8>)
 8000ed0:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <inSystem+0x1cc>)
 8000ed2:	601a      	str	r2, [r3, #0]
	handlerRxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <inSystem+0x1e8>)
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	725a      	strb	r2, [r3, #9]
	handlerRxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <inSystem+0x1e8>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	715a      	strb	r2, [r3, #5]
	handlerRxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <inSystem+0x1e8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	721a      	strb	r2, [r3, #8]
	handlerRxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <inSystem+0x1e8>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	711a      	strb	r2, [r3, #4]
	handlerRxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <inSystem+0x1e8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	71da      	strb	r2, [r3, #7]
	handlerRxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <inSystem+0x1e8>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerRxPin);
 8000ef8:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <inSystem+0x1e8>)
 8000efa:	f000 fd4f 	bl	800199c <GPIO_Config>


	handlerTxPin.pGPIOx                             = GPIOA;
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <inSystem+0x1ec>)
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <inSystem+0x1cc>)
 8000f02:	601a      	str	r2, [r3, #0]
	handlerTxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <inSystem+0x1ec>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	725a      	strb	r2, [r3, #9]
	handlerTxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <inSystem+0x1ec>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	715a      	strb	r2, [r3, #5]
	handlerTxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <inSystem+0x1ec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	721a      	strb	r2, [r3, #8]
	handlerTxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <inSystem+0x1ec>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	711a      	strb	r2, [r3, #4]
	handlerTxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <inSystem+0x1ec>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	71da      	strb	r2, [r3, #7]
	handlerTxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <inSystem+0x1ec>)
 8000f24:	2203      	movs	r2, #3
 8000f26:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerTxPin);
 8000f28:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <inSystem+0x1ec>)
 8000f2a:	f000 fd37 	bl	800199c <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <inSystem+0x1f0>)
 8000f30:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <inSystem+0x1f4>)
 8000f32:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <inSystem+0x1f0>)
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <inSystem+0x1f8>)
 8000f38:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <inSystem+0x1f0>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <inSystem+0x1f0>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <inSystem+0x1f0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <inSystem+0x1f0>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <inSystem+0x1f0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <inSystem+0x1f0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <inSystem+0x1f0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <inSystem+0x1f0>)
 8000f66:	f001 feb1 	bl	8002ccc <USART_Config>

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	00000000 	.word	0x00000000
 8000f74:	40c38800 	.word	0x40c38800
 8000f78:	20000204 	.word	0x20000204
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	200001ec 	.word	0x200001ec
 8000f84:	40020000 	.word	0x40020000
 8000f88:	20000228 	.word	0x20000228
 8000f8c:	200001f8 	.word	0x200001f8
 8000f90:	20000240 	.word	0x20000240
 8000f94:	40010000 	.word	0x40010000
 8000f98:	3f99999a 	.word	0x3f99999a
 8000f9c:	200002f8 	.word	0x200002f8
 8000fa0:	20000210 	.word	0x20000210
 8000fa4:	2000021c 	.word	0x2000021c
 8000fa8:	20000260 	.word	0x20000260
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	02faf080 	.word	0x02faf080

08000fb4 <BasicTimer2_Callback>:

void BasicTimer2_Callback(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <BasicTimer2_Callback+0x10>)
 8000fba:	f000 fe65 	bl	8001c88 <GPIOxTooglePin>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001ec 	.word	0x200001ec

08000fc8 <usart2Rx_Callback>:

void usart2Rx_Callback(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8000fcc:	f002 fa7a 	bl	80034c4 <getRxData>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <usart2Rx_Callback+0x14>)
 8000fd6:	701a      	strb	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200002f4 	.word	0x200002f4

08000fe0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <ITM_SendChar+0x48>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <ITM_SendChar+0x48>)
 8000ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <ITM_SendChar+0x4c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <ITM_SendChar+0x4c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001002:	bf00      	nop
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f8      	beq.n	8001004 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001012:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000edfc 	.word	0xe000edfc
 800102c:	e0000e00 	.word	0xe0000e00

08001030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return 1;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_kill>:

int _kill(int pid, int sig)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800104a:	f002 fad9 	bl	8003600 <__errno>
 800104e:	4603      	mov	r3, r0
 8001050:	2216      	movs	r2, #22
 8001052:	601a      	str	r2, [r3, #0]
	return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_exit>:

void _exit (int status)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffe7 	bl	8001040 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001072:	e7fe      	b.n	8001072 <_exit+0x12>

08001074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001086:	f3af 8000 	nop.w
 800108a:	4601      	mov	r1, r0
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf0      	blt.n	8001086 <_read+0x12>
	}

return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e009      	b.n	80010d4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff89 	bl	8000fe0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf1      	blt.n	80010c0 <_write+0x12>
	}
	return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_close>:

int _close(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	605a      	str	r2, [r3, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_isatty>:

int _isatty(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return 1;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800117e:	f002 fa45 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff fd89 	bl	8000c98 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001194:	080073a0 	.word	0x080073a0
  ldr r2, =_sbss
 8001198:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 800119c:	20000330 	.word	0x20000330

080011a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <BasicTimer_Config>:
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
	BasicTimer_Config(&handlerTIM4_time);

}

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a85      	ldr	r2, [pc, #532]	; (8001410 <BasicTimer_Config+0x230>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d106      	bne.n	800120c <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80011fe:	4b85      	ldr	r3, [pc, #532]	; (8001414 <BasicTimer_Config+0x234>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a84      	ldr	r2, [pc, #528]	; (8001414 <BasicTimer_Config+0x234>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	e030      	b.n	800126e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001214:	d106      	bne.n	8001224 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001216:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <BasicTimer_Config+0x234>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a7e      	ldr	r2, [pc, #504]	; (8001414 <BasicTimer_Config+0x234>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	e024      	b.n	800126e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a7b      	ldr	r2, [pc, #492]	; (8001418 <BasicTimer_Config+0x238>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d106      	bne.n	800123c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800122e:	4b79      	ldr	r3, [pc, #484]	; (8001414 <BasicTimer_Config+0x234>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a78      	ldr	r2, [pc, #480]	; (8001414 <BasicTimer_Config+0x234>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	e018      	b.n	800126e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a76      	ldr	r2, [pc, #472]	; (800141c <BasicTimer_Config+0x23c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d106      	bne.n	8001254 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <BasicTimer_Config+0x234>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a72      	ldr	r2, [pc, #456]	; (8001414 <BasicTimer_Config+0x234>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	e00c      	b.n	800126e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a71      	ldr	r2, [pc, #452]	; (8001420 <BasicTimer_Config+0x240>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d106      	bne.n	800126c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800125e:	4b6d      	ldr	r3, [pc, #436]	; (8001414 <BasicTimer_Config+0x234>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a6c      	ldr	r2, [pc, #432]	; (8001414 <BasicTimer_Config+0x234>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	e000      	b.n	800126e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800126c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800127c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6892      	ldr	r2, [r2, #8]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	791b      	ldrb	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f040 80d3 	bne.w	8001438 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0210 	bic.w	r2, r2, #16
 80012a0:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2ba0      	cmp	r3, #160	; 0xa0
 80012ac:	d022      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2bc8      	cmp	r3, #200	; 0xc8
 80012b2:	d01f      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012ba:	d01b      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80012c2:	d017      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ca:	d013      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80012d2:	d00f      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80012da:	d00b      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80012e2:	d007      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80012ea:	d003      	beq.n	80012f4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f2:	d10b      	bne.n	800130c <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2264      	movs	r2, #100	; 0x64
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	3a01      	subs	r2, #1
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
 800130a:	e07c      	b.n	8001406 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001312:	d029      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800131a:	d025      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001322:	4293      	cmp	r3, r2
 8001324:	d020      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800132c:	d01c      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f241 3288 	movw	r2, #5000	; 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d017      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f241 7270 	movw	r2, #6000	; 0x1770
 800133e:	4293      	cmp	r3, r2
 8001340:	d012      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001352:	d009      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f242 3228 	movw	r2, #9000	; 0x2328
 800135a:	4293      	cmp	r3, r2
 800135c:	d004      	beq.n	8001368 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f242 7210 	movw	r2, #10000	; 0x2710
 8001364:	4293      	cmp	r3, r2
 8001366:	d10c      	bne.n	8001382 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	3a01      	subs	r2, #1
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001380:	e041      	b.n	8001406 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001388:	d028      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001390:	4293      	cmp	r3, r2
 8001392:	d023      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f247 5230 	movw	r2, #30000	; 0x7530
 800139a:	4293      	cmp	r3, r2
 800139c:	d01e      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d019      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d014      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d00f      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4a19      	ldr	r2, [pc, #100]	; (8001424 <BasicTimer_Config+0x244>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00b      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <BasicTimer_Config+0x248>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d007      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <BasicTimer_Config+0x24c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d003      	beq.n	80013dc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <BasicTimer_Config+0x250>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d108      	bne.n	80013ee <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	3a01      	subs	r2, #1
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80013ec:	e00b      	b.n	8001406 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <BasicTimer_Config+0x254>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	3a01      	subs	r2, #1
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
 800140e:	e027      	b.n	8001460 <BasicTimer_Config+0x280>
 8001410:	40010000 	.word	0x40010000
 8001414:	40023800 	.word	0x40023800
 8001418:	40000400 	.word	0x40000400
 800141c:	40000800 	.word	0x40000800
 8001420:	40000c00 	.word	0x40000c00
 8001424:	00011170 	.word	0x00011170
 8001428:	00013880 	.word	0x00013880
 800142c:	00015f90 	.word	0x00015f90
 8001430:	000186a0 	.word	0x000186a0
 8001434:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0210 	orr.w	r2, r2, #16
 8001446:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3a01      	subs	r2, #1
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3a01      	subs	r2, #1
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7c1b      	ldrb	r3, [r3, #16]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d12d      	bne.n	80014c4 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001480:	d103      	bne.n	800148a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8001482:	201c      	movs	r0, #28
 8001484:	f7ff fe8e 	bl	80011a4 <__NVIC_EnableIRQ>
 8001488:	e024      	b.n	80014d4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <BasicTimer_Config+0x300>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d103      	bne.n	800149c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8001494:	201d      	movs	r0, #29
 8001496:	f7ff fe85 	bl	80011a4 <__NVIC_EnableIRQ>
 800149a:	e01b      	b.n	80014d4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <BasicTimer_Config+0x304>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d103      	bne.n	80014ae <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 80014a6:	201e      	movs	r0, #30
 80014a8:	f7ff fe7c 	bl	80011a4 <__NVIC_EnableIRQ>
 80014ac:	e012      	b.n	80014d4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <BasicTimer_Config+0x308>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d103      	bne.n	80014c0 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 80014b8:	2032      	movs	r0, #50	; 0x32
 80014ba:	f7ff fe73 	bl	80011a4 <__NVIC_EnableIRQ>
 80014be:	e009      	b.n	80014d4 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 80014c0:	bf00      	nop
 80014c2:	e007      	b.n	80014d4 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80014d4:	b662      	cpsie	i
}
 80014d6:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40000800 	.word	0x40000800
 80014e8:	40000c00 	.word	0x40000c00

080014ec <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014f0:	bf00      	nop
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001500:	bf00      	nop
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001510:	bf00      	nop
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001520:	bf00      	nop
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001530:	bf00      	nop
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001540:	bf00      	nop
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001550:	bf00      	nop
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001560:	bf00      	nop
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001570:	bf00      	nop
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001580:	bf00      	nop
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001590:	bf00      	nop
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80015a0:	bf00      	nop
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80015b0:	bf00      	nop
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80015c0:	bf00      	nop
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80015d0:	bf00      	nop
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80015e0:	bf00      	nop
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80015f0:	bf00      	nop
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001600:	bf00      	nop
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8001610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00a      	beq.n	8001634 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 800161e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 800162e:	f7ff fcc1 	bl	8000fb4 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8001632:	e066      	b.n	8001702 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8001634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d012      	beq.n	8001668 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8001642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8001652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800165c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001660:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8001662:	f7ff ff5b 	bl	800151c <Capture_TIM2_Ch1_Callback>
}
 8001666:	e04c      	b.n	8001702 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8001668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	d012      	beq.n	800169c <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8001676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8001686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001694:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8001696:	f7ff ff49 	bl	800152c <Capture_TIM2_Ch2_Callback>
}
 800169a:	e032      	b.n	8001702 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 800169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d012      	beq.n	80016d0 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 80016aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	f023 0308 	bic.w	r3, r3, #8
 80016b8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 80016ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016c8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 80016ca:	f7ff ff37 	bl	800153c <Capture_TIM2_Ch3_Callback>
}
 80016ce:	e018      	b.n	8001702 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 80016d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d011      	beq.n	8001702 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80016de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e8:	f023 0310 	bic.w	r3, r3, #16
 80016ec:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80016ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016fc:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80016fe:	f7ff ff25 	bl	800154c <Capture_TIM2_Ch4_Callback>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8001724:	f7ff fee2 	bl	80014ec <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8001728:	e052      	b.n	80017d0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00e      	beq.n	8001754 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800173c:	f023 0302 	bic.w	r3, r3, #2
 8001740:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800174c:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 800174e:	f7ff ff05 	bl	800155c <Capture_TIM3_Ch1_Callback>
}
 8001752:	e03d      	b.n	80017d0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00e      	beq.n	800177e <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001766:	f023 0304 	bic.w	r3, r3, #4
 800176a:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001776:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8001778:	f7ff fef8 	bl	800156c <Capture_TIM3_Ch2_Callback>
}
 800177c:	e028      	b.n	80017d0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00e      	beq.n	80017a8 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001790:	f023 0308 	bic.w	r3, r3, #8
 8001794:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 800179c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 80017a2:	f7ff feeb 	bl	800157c <Capture_TIM3_Ch3_Callback>
}
 80017a6:	e013      	b.n	80017d0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 80017ba:	f023 0310 	bic.w	r3, r3, #16
 80017be:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <TIM3_IRQHandler+0xcc>)
 80017c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017ca:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80017cc:	f7ff fede 	bl	800158c <Capture_TIM3_Ch4_Callback>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40000400 	.word	0x40000400

080017d8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a2d      	ldr	r2, [pc, #180]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80017f4:	f7ff fe82 	bl	80014fc <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80017f8:	e052      	b.n	80018a0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00e      	beq.n	8001824 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 800180c:	f023 0302 	bic.w	r3, r3, #2
 8001810:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800181c:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 800181e:	f7ff febd 	bl	800159c <Capture_TIM4_Ch1_Callback>
}
 8001822:	e03d      	b.n	80018a0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00e      	beq.n	800184e <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001846:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001848:	f7ff fec8 	bl	80015dc <Capture_TIM5_Ch2_Callback>
}
 800184c:	e028      	b.n	80018a0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00e      	beq.n	8001878 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001860:	f023 0308 	bic.w	r3, r3, #8
 8001864:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 800186c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001870:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8001872:	f7ff fe9b 	bl	80015ac <Capture_TIM4_Ch3_Callback>
}
 8001876:	e013      	b.n	80018a0 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00d      	beq.n	80018a0 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 800188a:	f023 0310 	bic.w	r3, r3, #16
 800188e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <TIM4_IRQHandler+0xcc>)
 8001896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800189a:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 800189c:	f7ff fe8e 	bl	80015bc <Capture_TIM4_Ch4_Callback>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40000800 	.word	0x40000800

080018a8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 80018c4:	f7ff fe22 	bl	800150c <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 80018c8:	e052      	b.n	8001970 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00e      	beq.n	80018f4 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80018d6:	4b27      	ldr	r3, [pc, #156]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018dc:	f023 0302 	bic.w	r3, r3, #2
 80018e0:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	4a23      	ldr	r2, [pc, #140]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018ec:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80018ee:	f7ff fe6d 	bl	80015cc <Capture_TIM5_Ch1_Callback>
}
 80018f2:	e03d      	b.n	8001970 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <TIM5_IRQHandler+0xcc>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <TIM5_IRQHandler+0xcc>)
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	4a18      	ldr	r2, [pc, #96]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001916:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001918:	f7ff fe60 	bl	80015dc <Capture_TIM5_Ch2_Callback>
}
 800191c:	e028      	b.n	8001970 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00e      	beq.n	8001948 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <TIM5_IRQHandler+0xcc>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001930:	f023 0308 	bic.w	r3, r3, #8
 8001934:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <TIM5_IRQHandler+0xcc>)
 800193c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001940:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8001942:	f7ff fe53 	bl	80015ec <Capture_TIM5_Ch3_Callback>
}
 8001946:	e013      	b.n	8001970 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <TIM5_IRQHandler+0xcc>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00d      	beq.n	8001970 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <TIM5_IRQHandler+0xcc>)
 800195a:	f023 0310 	bic.w	r3, r3, #16
 800195e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <TIM5_IRQHandler+0xcc>)
 8001966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800196a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 800196c:	f7ff fe46 	bl	80015fc <Capture_TIM5_Ch4_Callback>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40000c00 	.word	0x40000c00

08001978 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a88      	ldr	r2, [pc, #544]	; (8001bd4 <GPIO_Config+0x238>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d106      	bne.n	80019c4 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80019b6:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <GPIO_Config+0x23c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a87      	ldr	r2, [pc, #540]	; (8001bd8 <GPIO_Config+0x23c>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	e03a      	b.n	8001a3a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a84      	ldr	r2, [pc, #528]	; (8001bdc <GPIO_Config+0x240>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d106      	bne.n	80019dc <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80019ce:	4b82      	ldr	r3, [pc, #520]	; (8001bd8 <GPIO_Config+0x23c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a81      	ldr	r2, [pc, #516]	; (8001bd8 <GPIO_Config+0x23c>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	e02e      	b.n	8001a3a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a7f      	ldr	r2, [pc, #508]	; (8001be0 <GPIO_Config+0x244>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d106      	bne.n	80019f4 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80019e6:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <GPIO_Config+0x23c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a7b      	ldr	r2, [pc, #492]	; (8001bd8 <GPIO_Config+0x23c>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	e022      	b.n	8001a3a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a7a      	ldr	r2, [pc, #488]	; (8001be4 <GPIO_Config+0x248>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d106      	bne.n	8001a0c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80019fe:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <GPIO_Config+0x23c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a75      	ldr	r2, [pc, #468]	; (8001bd8 <GPIO_Config+0x23c>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	e016      	b.n	8001a3a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a75      	ldr	r2, [pc, #468]	; (8001be8 <GPIO_Config+0x24c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d106      	bne.n	8001a24 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001a16:	4b70      	ldr	r3, [pc, #448]	; (8001bd8 <GPIO_Config+0x23c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a6f      	ldr	r2, [pc, #444]	; (8001bd8 <GPIO_Config+0x23c>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	e00a      	b.n	8001a3a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a70      	ldr	r2, [pc, #448]	; (8001bec <GPIO_Config+0x250>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d105      	bne.n	8001a3a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <GPIO_Config+0x23c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <GPIO_Config+0x23c>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	795b      	ldrb	r3, [r3, #5]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d143      	bne.n	8001aca <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	791b      	ldrb	r3, [r3, #4]
 8001a46:	2b07      	cmp	r3, #7
 8001a48:	d81f      	bhi.n	8001a8a <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	210f      	movs	r1, #15
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	400a      	ands	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a1a      	ldr	r2, [r3, #32]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
 8001a76:	4619      	mov	r1, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]
 8001a88:	e01f      	b.n	8001aca <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	3b08      	subs	r3, #8
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7a5b      	ldrb	r3, [r3, #9]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	795b      	ldrb	r3, [r3, #5]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2103      	movs	r1, #3
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7a1b      	ldrb	r3, [r3, #8]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	791b      	ldrb	r3, [r3, #4]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	4619      	mov	r1, r3
 8001b26:	2301      	movs	r3, #1
 8001b28:	408b      	lsls	r3, r1
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	400a      	ands	r2, r1
 8001b34:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	799b      	ldrb	r3, [r3, #6]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	791b      	ldrb	r3, [r3, #4]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	791b      	ldrb	r3, [r3, #4]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2103      	movs	r1, #3
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	400a      	ands	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	79db      	ldrb	r3, [r3, #7]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	791b      	ldrb	r3, [r3, #4]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	791b      	ldrb	r3, [r3, #4]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40021c00 	.word	0x40021c00

08001bf0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10d      	bne.n	8001c1e <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	2301      	movs	r3, #1
 8001c10:	408b      	lsls	r3, r1
 8001c12:	4619      	mov	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8001c1c:	e00d      	b.n	8001c3a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	791b      	ldrb	r3, [r3, #4]
 8001c28:	3310      	adds	r3, #16
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4619      	mov	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	791b      	ldrb	r3, [r3, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	791b      	ldrb	r3, [r3, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	40d3      	lsrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffd8 	bl	8001c46 <GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffa1 	bl	8001bf0 <GPIO_WritePin>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6c      	ldr	r2, [pc, #432]	; (8001e78 <pwm_Config+0x1c0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d106      	bne.n	8001cd8 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001cca:	4b6c      	ldr	r3, [pc, #432]	; (8001e7c <pwm_Config+0x1c4>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a6b      	ldr	r2, [pc, #428]	; (8001e7c <pwm_Config+0x1c4>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	e030      	b.n	8001d3a <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d106      	bne.n	8001cf0 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <pwm_Config+0x1c4>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <pwm_Config+0x1c4>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	e024      	b.n	8001d3a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a62      	ldr	r2, [pc, #392]	; (8001e80 <pwm_Config+0x1c8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d106      	bne.n	8001d08 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001cfa:	4b60      	ldr	r3, [pc, #384]	; (8001e7c <pwm_Config+0x1c4>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a5f      	ldr	r2, [pc, #380]	; (8001e7c <pwm_Config+0x1c4>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	e018      	b.n	8001d3a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <pwm_Config+0x1cc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d106      	bne.n	8001d20 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001d12:	4b5a      	ldr	r3, [pc, #360]	; (8001e7c <pwm_Config+0x1c4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a59      	ldr	r2, [pc, #356]	; (8001e7c <pwm_Config+0x1c4>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	e00c      	b.n	8001d3a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <pwm_Config+0x1d0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d106      	bne.n	8001d38 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <pwm_Config+0x1c4>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <pwm_Config+0x1c4>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	e000      	b.n	8001d3a <pwm_Config+0x82>
	}
	else{
		__NOP();
 8001d38:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d48:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7f5b      	ldrb	r3, [r3, #29]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f930 	bl	8001fb8 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fa67 	bl	800222c <setDuttyCycle>
 8001d5e:	e005      	b.n	8001d6c <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f929 	bl	8001fb8 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fb38 	bl	80023dc <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0210 	bic.w	r2, r2, #16
 8001d7a:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7a1b      	ldrb	r3, [r3, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d86f      	bhi.n	8001e6c <pwm_Config+0x1b4>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <pwm_Config+0xdc>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001dd7 	.word	0x08001dd7
 8001d9c:	08001e09 	.word	0x08001e09
 8001da0:	08001e3b 	.word	0x08001e3b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0203 	bic.w	r2, r2, #3
 8001db2:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001dc2:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0208 	orr.w	r2, r2, #8
 8001dd2:	619a      	str	r2, [r3, #24]


		break;
 8001dd4:	e04b      	b.n	8001e6e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001de4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001df4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e04:	619a      	str	r2, [r3, #24]

		break;
 8001e06:	e032      	b.n	8001e6e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0203 	bic.w	r2, r2, #3
 8001e16:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001e26:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	61da      	str	r2, [r3, #28]

		break;
 8001e38:	e019      	b.n	8001e6e <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e48:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001e58:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e68:	61da      	str	r2, [r3, #28]

		break;
 8001e6a:	e000      	b.n	8001e6e <pwm_Config+0x1b6>
	}

	default:{
		break;
 8001e6c:	bf00      	nop
	}// fin del switch-case




}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40000c00 	.word	0x40000c00

08001e8c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <enableOutput+0x104>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d13a      	bne.n	8001f38 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7a1b      	ldrb	r3, [r3, #8]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d862      	bhi.n	8001fa0 <enableOutput+0xf0>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <enableOutput+0x30>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001f03 	.word	0x08001f03
 8001ee8:	08001f15 	.word	0x08001f15
 8001eec:	08001f27 	.word	0x08001f27
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	621a      	str	r2, [r3, #32]

				break;
 8001f00:	e051      	b.n	8001fa6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0210 	orr.w	r2, r2, #16
 8001f10:	621a      	str	r2, [r3, #32]

				break;
 8001f12:	e048      	b.n	8001fa6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f22:	621a      	str	r2, [r3, #32]

				break;
 8001f24:	e03f      	b.n	8001fa6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f34:	621a      	str	r2, [r3, #32]

				break;
 8001f36:	e036      	b.n	8001fa6 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7a1b      	ldrb	r3, [r3, #8]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d831      	bhi.n	8001fa4 <enableOutput+0xf4>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <enableOutput+0x98>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f59 	.word	0x08001f59
 8001f4c:	08001f6b 	.word	0x08001f6b
 8001f50:	08001f7d 	.word	0x08001f7d
 8001f54:	08001f8f 	.word	0x08001f8f
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	621a      	str	r2, [r3, #32]

				break;
 8001f68:	e01d      	b.n	8001fa6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0210 	orr.w	r2, r2, #16
 8001f78:	621a      	str	r2, [r3, #32]

				break;
 8001f7a:	e014      	b.n	8001fa6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6a1a      	ldr	r2, [r3, #32]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f8a:	621a      	str	r2, [r3, #32]

				break;
 8001f8c:	e00b      	b.n	8001fa6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f9c:	621a      	str	r2, [r3, #32]

				break;
 8001f9e:	e002      	b.n	8001fa6 <enableOutput+0xf6>
				break;
 8001fa0:	bf00      	nop
 8001fa2:	e000      	b.n	8001fa6 <enableOutput+0xf6>
			}

			default: {
				break;
 8001fa4:	bf00      	nop
			}

		}
	}
	return SET;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68d2      	ldr	r2, [r2, #12]
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d01a      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b14      	cmp	r3, #20
 8001fde:	d017      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b1e      	cmp	r3, #30
 8001fe4:	d014      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b28      	cmp	r3, #40	; 0x28
 8001fea:	d011      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b32      	cmp	r3, #50	; 0x32
 8001ff0:	d00e      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b3c      	cmp	r3, #60	; 0x3c
 8001ff6:	d00b      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b46      	cmp	r3, #70	; 0x46
 8001ffc:	d008      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b50      	cmp	r3, #80	; 0x50
 8002002:	d005      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b5a      	cmp	r3, #90	; 0x5a
 8002008:	d002      	beq.n	8002010 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b64      	cmp	r3, #100	; 0x64
 800200e:	d118      	bne.n	8002042 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <setFrequency+0x250>)
 800201c:	f7fe faf4 	bl	8000608 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fdc6 	bl	8000bb8 <__aeabi_d2uiz>
 800202c:	4603      	mov	r3, r0
 800202e:	b29a      	uxth	r2, r3
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <setFrequency+0x254>)
 8002032:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8002034:	4b75      	ldr	r3, [pc, #468]	; (800220c <setFrequency+0x254>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002040:	e0dd      	b.n	80021fe <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2ba0      	cmp	r3, #160	; 0xa0
 8002046:	d022      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2bc8      	cmp	r3, #200	; 0xc8
 800204c:	d01f      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002054:	d01b      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800205c:	d017      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002064:	d013      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800206c:	d00f      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002074:	d00b      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800207c:	d007      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002084:	d003      	beq.n	800208e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800208c:	d118      	bne.n	80020c0 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <setFrequency+0x258>)
 800209a:	f7fe fab5 	bl	8000608 <__aeabi_dmul>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fd87 	bl	8000bb8 <__aeabi_d2uiz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b57      	ldr	r3, [pc, #348]	; (800220c <setFrequency+0x254>)
 80020b0:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80020b2:	4b56      	ldr	r3, [pc, #344]	; (800220c <setFrequency+0x254>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	1e5a      	subs	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80020be:	e09e      	b.n	80021fe <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80020c6:	d029      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020ce:	d025      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d020      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80020e0:	d01c      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d017      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f241 7270 	movw	r2, #6000	; 0x1770
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d012      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f641 3258 	movw	r2, #7000	; 0x1b58
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002106:	d009      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f242 3228 	movw	r2, #9000	; 0x2328
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f242 7210 	movw	r2, #10000	; 0x2710
 8002118:	4293      	cmp	r3, r2
 800211a:	d118      	bne.n	800214e <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <setFrequency+0x25c>)
 8002128:	f7fe fa6e 	bl	8000608 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fd40 	bl	8000bb8 <__aeabi_d2uiz>
 8002138:	4603      	mov	r3, r0
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b33      	ldr	r3, [pc, #204]	; (800220c <setFrequency+0x254>)
 800213e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <setFrequency+0x254>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
 800214c:	e057      	b.n	80021fe <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002154:	d028      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f644 6220 	movw	r2, #20000	; 0x4e20
 800215c:	4293      	cmp	r3, r2
 800215e:	d023      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f247 5230 	movw	r2, #30000	; 0x7530
 8002166:	4293      	cmp	r3, r2
 8002168:	d01e      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002170:	4293      	cmp	r3, r2
 8002172:	d019      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f24c 3250 	movw	r2, #50000	; 0xc350
 800217a:	4293      	cmp	r3, r2
 800217c:	d014      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002184:	4293      	cmp	r3, r2
 8002186:	d00f      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <setFrequency+0x260>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00b      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a22      	ldr	r2, [pc, #136]	; (800221c <setFrequency+0x264>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <setFrequency+0x268>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <setFrequency+0x26c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d111      	bne.n	80021cc <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fd01 	bl	8000bb8 <__aeabi_d2uiz>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <setFrequency+0x254>)
 80021bc:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <setFrequency+0x254>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	1e5a      	subs	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ca:	e018      	b.n	80021fe <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <setFrequency+0x270>)
 80021d8:	f7fe fb40 	bl	800085c <__aeabi_ddiv>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fce8 	bl	8000bb8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <setFrequency+0x254>)
 80021ee:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <setFrequency+0x254>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	408f4000 	.word	0x408f4000
 800220c:	20000300 	.word	0x20000300
 8002210:	40590000 	.word	0x40590000
 8002214:	40240000 	.word	0x40240000
 8002218:	00011170 	.word	0x00011170
 800221c:	00013880 	.word	0x00013880
 8002220:	00015f90 	.word	0x00015f90
 8002224:	000186a0 	.word	0x000186a0
 8002228:	40340000 	.word	0x40340000

0800222c <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b08b      	sub	sp, #44	; 0x2c
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7a1b      	ldrb	r3, [r3, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	f200 80c3 	bhi.w	80023c4 <setDuttyCycle+0x198>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <setDuttyCycle+0x18>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	080022b1 	.word	0x080022b1
 800224c:	0800230d 	.word	0x0800230d
 8002250:	08002369 	.word	0x08002369
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	ed93 7a06 	vldr	s14, [r3, #24]
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <setDuttyCycle+0x1a4>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f973 	bl	8000558 <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <setDuttyCycle+0x1a8>)
 8002280:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002284:	f7fe faea 	bl	800085c <__aeabi_ddiv>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <setDuttyCycle+0x1ac>)
 8002296:	f7fd ffff 	bl	8000298 <__aeabi_dsub>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681c      	ldr	r4, [r3, #0]
 80022a6:	f7fe fc87 	bl	8000bb8 <__aeabi_d2uiz>
 80022aa:	4603      	mov	r3, r0
 80022ac:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80022ae:	e08a      	b.n	80023c6 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	ed93 7a06 	vldr	s14, [r3, #24]
 80022b6:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <setDuttyCycle+0x1a4>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	ee17 0a90 	vmov	r0, s15
 80022ca:	f7fe f945 	bl	8000558 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <setDuttyCycle+0x1a8>)
 80022dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e0:	f7fe fabc 	bl	800085c <__aeabi_ddiv>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <setDuttyCycle+0x1ac>)
 80022f2:	f7fd ffd1 	bl	8000298 <__aeabi_dsub>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681c      	ldr	r4, [r3, #0]
 8002302:	f7fe fc59 	bl	8000bb8 <__aeabi_d2uiz>
 8002306:	4603      	mov	r3, r0
 8002308:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800230a:	e05c      	b.n	80023c6 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <setDuttyCycle+0x1a4>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	ee17 0a90 	vmov	r0, s15
 8002326:	f7fe f917 	bl	8000558 <__aeabi_f2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <setDuttyCycle+0x1a8>)
 8002338:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800233c:	f7fe fa8e 	bl	800085c <__aeabi_ddiv>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <setDuttyCycle+0x1ac>)
 800234e:	f7fd ffa3 	bl	8000298 <__aeabi_dsub>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681c      	ldr	r4, [r3, #0]
 800235e:	f7fe fc2b 	bl	8000bb8 <__aeabi_d2uiz>
 8002362:	4603      	mov	r3, r0
 8002364:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8002366:	e02e      	b.n	80023c6 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	ed93 7a06 	vldr	s14, [r3, #24]
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <setDuttyCycle+0x1a4>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	ee17 0a90 	vmov	r0, s15
 8002382:	f7fe f8e9 	bl	8000558 <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <setDuttyCycle+0x1a8>)
 8002394:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002398:	f7fe fa60 	bl	800085c <__aeabi_ddiv>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <setDuttyCycle+0x1ac>)
 80023aa:	f7fd ff75 	bl	8000298 <__aeabi_dsub>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681c      	ldr	r4, [r3, #0]
 80023ba:	f7fe fbfd 	bl	8000bb8 <__aeabi_d2uiz>
 80023be:	4603      	mov	r3, r0
 80023c0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80023c2:	e000      	b.n	80023c6 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 80023c4:	bf00      	nop
	}

	}// fin del switch-case

}
 80023c6:	bf00      	nop
 80023c8:	372c      	adds	r7, #44	; 0x2c
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000300 	.word	0x20000300
 80023d4:	40590000 	.word	0x40590000
 80023d8:	3ff00000 	.word	0x3ff00000

080023dc <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b08b      	sub	sp, #44	; 0x2c
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7a1b      	ldrb	r3, [r3, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	f200 80d3 	bhi.w	8002594 <setDuttyCycleAfOpt+0x1b8>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <setDuttyCycleAfOpt+0x18>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002469 	.word	0x08002469
 80023fc:	080024cd 	.word	0x080024cd
 8002400:	08002531 	.word	0x08002531
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edd3 7a06 	vldr	s15, [r3, #24]
 800240a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80025a0 <setDuttyCycleAfOpt+0x1c4>
 800240e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002412:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <setDuttyCycleAfOpt+0x1c8>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	ee17 0a90 	vmov	r0, s15
 8002426:	f7fe f897 	bl	8000558 <__aeabi_f2d>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <setDuttyCycleAfOpt+0x1cc>)
 8002438:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800243c:	f7fe fa0e 	bl	800085c <__aeabi_ddiv>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b57      	ldr	r3, [pc, #348]	; (80025ac <setDuttyCycleAfOpt+0x1d0>)
 800244e:	f7fd ff23 	bl	8000298 <__aeabi_dsub>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681c      	ldr	r4, [r3, #0]
 800245e:	f7fe fbab 	bl	8000bb8 <__aeabi_d2uiz>
 8002462:	4603      	mov	r3, r0
 8002464:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8002466:	e096      	b.n	8002596 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	edd3 7a06 	vldr	s15, [r3, #24]
 800246e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80025a0 <setDuttyCycleAfOpt+0x1c4>
 8002472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002476:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <setDuttyCycleAfOpt+0x1c8>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002486:	ee17 0a90 	vmov	r0, s15
 800248a:	f7fe f865 	bl	8000558 <__aeabi_f2d>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <setDuttyCycleAfOpt+0x1cc>)
 800249c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024a0:	f7fe f9dc 	bl	800085c <__aeabi_ddiv>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <setDuttyCycleAfOpt+0x1d0>)
 80024b2:	f7fd fef1 	bl	8000298 <__aeabi_dsub>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681c      	ldr	r4, [r3, #0]
 80024c2:	f7fe fb79 	bl	8000bb8 <__aeabi_d2uiz>
 80024c6:	4603      	mov	r3, r0
 80024c8:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80024ca:	e064      	b.n	8002596 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80024d2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80025a0 <setDuttyCycleAfOpt+0x1c4>
 80024d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <setDuttyCycleAfOpt+0x1c8>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	ee17 0a90 	vmov	r0, s15
 80024ee:	f7fe f833 	bl	8000558 <__aeabi_f2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <setDuttyCycleAfOpt+0x1cc>)
 8002500:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002504:	f7fe f9aa 	bl	800085c <__aeabi_ddiv>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <setDuttyCycleAfOpt+0x1d0>)
 8002516:	f7fd febf 	bl	8000298 <__aeabi_dsub>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681c      	ldr	r4, [r3, #0]
 8002526:	f7fe fb47 	bl	8000bb8 <__aeabi_d2uiz>
 800252a:	4603      	mov	r3, r0
 800252c:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800252e:	e032      	b.n	8002596 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	edd3 7a06 	vldr	s15, [r3, #24]
 8002536:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025a0 <setDuttyCycleAfOpt+0x1c4>
 800253a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <setDuttyCycleAfOpt+0x1c8>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	ee17 0a90 	vmov	r0, s15
 8002552:	f7fe f801 	bl	8000558 <__aeabi_f2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <setDuttyCycleAfOpt+0x1cc>)
 8002564:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002568:	f7fe f978 	bl	800085c <__aeabi_ddiv>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <setDuttyCycleAfOpt+0x1d0>)
 800257a:	f7fd fe8d 	bl	8000298 <__aeabi_dsub>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681c      	ldr	r4, [r3, #0]
 800258a:	f7fe fb15 	bl	8000bb8 <__aeabi_d2uiz>
 800258e:	4603      	mov	r3, r0
 8002590:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8002592:	e000      	b.n	8002596 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8002594:	bf00      	nop
	}

	}// fin del switch-case


}
 8002596:	bf00      	nop
 8002598:	372c      	adds	r7, #44	; 0x2c
 800259a:	46bd      	mov	sp, r7
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	bf00      	nop
 80025a0:	42c80000 	.word	0x42c80000
 80025a4:	20000300 	.word	0x20000300
 80025a8:	40590000 	.word	0x40590000
 80025ac:	3ff00000 	.word	0x3ff00000

080025b0 <updateDuttyCycle>:

}


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, float newDutty){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	ed87 0a00 	vstr	s0, [r7]
	// Actualizamos el registro que manipula el dutty
    ptrPwmHandler->config.duttyCicle = newDutty;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	619a      	str	r2, [r3, #24]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fe32 	bl	800222c <setDuttyCycle>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 80025da:	4b92      	ldr	r3, [pc, #584]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a91      	ldr	r2, [pc, #580]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80025e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e4:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80025e6:	4b8f      	ldr	r3, [pc, #572]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80025e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 80025ee:	4b8e      	ldr	r3, [pc, #568]	; (8002828 <RCC_enableMaxFrequencies+0x258>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a8d      	ldr	r2, [pc, #564]	; (8002828 <RCC_enableMaxFrequencies+0x258>)
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f8:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 80025fa:	4b8a      	ldr	r3, [pc, #552]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a89      	ldr	r2, [pc, #548]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002600:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002604:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2b08      	cmp	r3, #8
 800260a:	f200 82fc 	bhi.w	8002c06 <RCC_enableMaxFrequencies+0x636>
 800260e:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <RCC_enableMaxFrequencies+0x44>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002639 	.word	0x08002639
 8002618:	080026db 	.word	0x080026db
 800261c:	0800277d 	.word	0x0800277d
 8002620:	08002831 	.word	0x08002831
 8002624:	080028d3 	.word	0x080028d3
 8002628:	08002975 	.word	0x08002975
 800262c:	08002a21 	.word	0x08002a21
 8002630:	08002ac3 	.word	0x08002ac3
 8002634:	08002b65 	.word	0x08002b65
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002638:	4b7a      	ldr	r3, [pc, #488]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a79      	ldr	r2, [pc, #484]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800263e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002642:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002644:	4b77      	ldr	r3, [pc, #476]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a76      	ldr	r2, [pc, #472]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800264a:	f043 0310 	orr.w	r3, r3, #16
 800264e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002650:	4b74      	ldr	r3, [pc, #464]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a73      	ldr	r2, [pc, #460]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002656:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800265a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800265e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8002660:	4b70      	ldr	r3, [pc, #448]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a6f      	ldr	r2, [pc, #444]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002666:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800266a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800266c:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002672:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002676:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8002678:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a69      	ldr	r2, [pc, #420]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800267e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002682:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002684:	4b67      	ldr	r3, [pc, #412]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a66      	ldr	r2, [pc, #408]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800268a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002690:	4b64      	ldr	r3, [pc, #400]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a63      	ldr	r2, [pc, #396]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002696:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800269a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800269c:	4b61      	ldr	r3, [pc, #388]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a60      	ldr	r2, [pc, #384]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026a6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80026a8:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5d      	ldr	r2, [pc, #372]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80026b4:	e000      	b.n	80026b8 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80026b6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80026b8:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f8      	beq.n	80026b6 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 80026ca:	f023 030f 	bic.w	r3, r3, #15
 80026ce:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80026d0:	4b56      	ldr	r3, [pc, #344]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 80026d2:	4a56      	ldr	r2, [pc, #344]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6013      	str	r3, [r2, #0]

			break;
 80026d8:	e296      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80026da:	4b52      	ldr	r3, [pc, #328]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a51      	ldr	r2, [pc, #324]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026e4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80026e6:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a4e      	ldr	r2, [pc, #312]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026ec:	f043 0310 	orr.w	r3, r3, #16
 80026f0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a4b      	ldr	r2, [pc, #300]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80026f8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8002702:	4b48      	ldr	r3, [pc, #288]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a47      	ldr	r2, [pc, #284]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002708:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800270c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800270e:	4b45      	ldr	r3, [pc, #276]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a44      	ldr	r2, [pc, #272]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002714:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002718:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800271a:	4b42      	ldr	r3, [pc, #264]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a41      	ldr	r2, [pc, #260]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4a3e      	ldr	r2, [pc, #248]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800272c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002730:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4a3b      	ldr	r2, [pc, #236]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800273c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800273e:	4b39      	ldr	r3, [pc, #228]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4a38      	ldr	r2, [pc, #224]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002748:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a35      	ldr	r2, [pc, #212]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002754:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002756:	e000      	b.n	800275a <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8002758:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800275a:	4b32      	ldr	r3, [pc, #200]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f8      	beq.n	8002758 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002766:	4b31      	ldr	r3, [pc, #196]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 800276c:	f023 030f 	bic.w	r3, r3, #15
 8002770:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8002772:	4b2e      	ldr	r3, [pc, #184]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 8002774:	4a2d      	ldr	r2, [pc, #180]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6013      	str	r3, [r2, #0]

			break;
 800277a:	e245      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a28      	ldr	r2, [pc, #160]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002786:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a22      	ldr	r2, [pc, #136]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 800279a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800279e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027aa:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80027ae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027de:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027ea:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80027f8:	e000      	b.n	80027fc <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 80027fa:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <RCC_enableMaxFrequencies+0x254>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f8      	beq.n	80027fa <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 800280e:	f023 030f 	bic.w	r3, r3, #15
 8002812:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <RCC_enableMaxFrequencies+0x25c>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6013      	str	r3, [r2, #0]


			break;
 8002820:	e1f2      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000
 800282c:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002830:	4b79      	ldr	r3, [pc, #484]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a78      	ldr	r2, [pc, #480]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800283a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800283c:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a75      	ldr	r2, [pc, #468]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002848:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a72      	ldr	r2, [pc, #456]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800284e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002856:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8002858:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800285e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8002862:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002864:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a6b      	ldr	r2, [pc, #428]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800286a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800286e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002872:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002878:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a66      	ldr	r2, [pc, #408]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800287e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002882:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a63      	ldr	r2, [pc, #396]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800288a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800288e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8002890:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a60      	ldr	r2, [pc, #384]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800289a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800289c:	4b5e      	ldr	r3, [pc, #376]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80028a8:	e000      	b.n	80028ac <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 80028aa:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80028ac:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f8      	beq.n	80028aa <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 80028be:	f023 030f 	bic.w	r3, r3, #15
 80028c2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80028c4:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6013      	str	r3, [r2, #0]

			break;
 80028d0:	e19a      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4a50      	ldr	r2, [pc, #320]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028dc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a4d      	ldr	r2, [pc, #308]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80028ea:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028f8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002900:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8002904:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a43      	ldr	r2, [pc, #268]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800290c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002910:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002914:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002924:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002926:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a3b      	ldr	r2, [pc, #236]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800292c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002930:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800293c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a35      	ldr	r2, [pc, #212]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002948:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800294a:	e000      	b.n	800294e <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 800294c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800294e:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f8      	beq.n	800294c <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 8002960:	f023 030f 	bic.w	r3, r3, #15
 8002964:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8002966:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6013      	str	r3, [r2, #0]

			break;
 8002972:	e149      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800297a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800297e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 8002992:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029a2:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80029a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029b2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029d2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029de:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80029ec:	e000      	b.n	80029f0 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 80029ee:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <RCC_enableMaxFrequencies+0x448>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f8      	beq.n	80029ee <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 8002a02:	f023 030f 	bic.w	r3, r3, #15
 8002a06:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <RCC_enableMaxFrequencies+0x44c>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	6013      	str	r3, [r2, #0]

			break;
 8002a14:	e0f8      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002a20:	4b84      	ldr	r3, [pc, #528]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a83      	ldr	r2, [pc, #524]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002a2c:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a80      	ldr	r2, [pc, #512]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002a38:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a7d      	ldr	r2, [pc, #500]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a46:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8002a48:	4b7a      	ldr	r3, [pc, #488]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a79      	ldr	r2, [pc, #484]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a4e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002a52:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002a54:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a76      	ldr	r2, [pc, #472]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a5e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002a60:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a62:	4a74      	ldr	r2, [pc, #464]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002a68:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a72:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002a74:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a6e      	ldr	r2, [pc, #440]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a7e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002a80:	4b6c      	ldr	r3, [pc, #432]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a6b      	ldr	r2, [pc, #428]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a8a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002a8c:	4b69      	ldr	r3, [pc, #420]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a68      	ldr	r2, [pc, #416]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002a98:	e000      	b.n	8002a9c <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8002a9a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002a9c:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f8      	beq.n	8002a9a <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002aa8:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a62      	ldr	r2, [pc, #392]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002aae:	f023 030f 	bic.w	r3, r3, #15
 8002ab2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8002ab4:	4b60      	ldr	r3, [pc, #384]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5f      	ldr	r2, [pc, #380]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	6013      	str	r3, [r2, #0]

			break;
 8002ac0:	e0a2      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002ac2:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a5b      	ldr	r2, [pc, #364]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002ac8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002acc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002ace:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002ad4:	f043 0310 	orr.w	r3, r3, #16
 8002ad8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002ada:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002ae0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8002aea:	4b52      	ldr	r3, [pc, #328]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a51      	ldr	r2, [pc, #324]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002af0:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8002af4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002af6:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a4e      	ldr	r2, [pc, #312]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002afc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b00:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b04:	4a4b      	ldr	r2, [pc, #300]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a49      	ldr	r2, [pc, #292]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b14:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	4a46      	ldr	r2, [pc, #280]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b20:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002b22:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4a43      	ldr	r2, [pc, #268]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b2c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b38:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002b3a:	e000      	b.n	8002b3e <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8002b3c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f8      	beq.n	8002b3c <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a3a      	ldr	r2, [pc, #232]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002b50:	f023 030f 	bic.w	r3, r3, #15
 8002b54:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6013      	str	r3, [r2, #0]

			break;
 8002b62:	e051      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8002b8c:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b92:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8002b96:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002b98:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002b9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ba2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002ba6:	4a23      	ldr	r2, [pc, #140]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bc2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bce:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002bdc:	e000      	b.n	8002be0 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8002bde:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f8      	beq.n	8002bde <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a11      	ldr	r2, [pc, #68]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002bf2:	f023 030f 	bic.w	r3, r3, #15
 8002bf6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <RCC_enableMaxFrequencies+0x668>)
 8002bfe:	f043 0303 	orr.w	r3, r3, #3
 8002c02:	6013      	str	r3, [r2, #0]

			break;
 8002c04:	e000      	b.n	8002c08 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8002c06:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8002c14:	e000      	b.n	8002c18 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8002c16:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <RCC_enableMaxFrequencies+0x664>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f8      	beq.n	8002c16 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40023c00 	.word	0x40023c00

08002c3c <__NVIC_EnableIRQ>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	; (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	; (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd4:	b672      	cpsid	i
}
 8002cd6:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a91      	ldr	r2, [pc, #580]	; (8002f24 <USART_Config+0x258>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d106      	bne.n	8002cf0 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002ce2:	4b91      	ldr	r3, [pc, #580]	; (8002f28 <USART_Config+0x25c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a90      	ldr	r2, [pc, #576]	; (8002f28 <USART_Config+0x25c>)
 8002ce8:	f043 0310 	orr.w	r3, r3, #16
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	e018      	b.n	8002d22 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a8d      	ldr	r2, [pc, #564]	; (8002f2c <USART_Config+0x260>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d106      	bne.n	8002d08 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002cfa:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <USART_Config+0x25c>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a8a      	ldr	r2, [pc, #552]	; (8002f28 <USART_Config+0x25c>)
 8002d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	e00c      	b.n	8002d22 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a88      	ldr	r2, [pc, #544]	; (8002f30 <USART_Config+0x264>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d106      	bne.n	8002d20 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002d12:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <USART_Config+0x25c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a84      	ldr	r2, [pc, #528]	; (8002f28 <USART_Config+0x25c>)
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	e000      	b.n	8002d22 <USART_Config+0x56>
	}
	else{
		__NOP();
 8002d20:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7a5b      	ldrb	r3, [r3, #9]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d025      	beq.n	8002d86 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7a5b      	ldrb	r3, [r3, #9]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d110      	bne.n	8002d64 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d50:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	e018      	b.n	8002d96 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	e007      	b.n	8002d96 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7a1b      	ldrb	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	e007      	b.n	8002dc0 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dbe:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7a9b      	ldrb	r3, [r3, #10]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d82f      	bhi.n	8002e28 <USART_Config+0x15c>
 8002dc8:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <USART_Config+0x104>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002df3 	.word	0x08002df3
 8002dd8:	08002e05 	.word	0x08002e05
 8002ddc:	08002e17 	.word	0x08002e17
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002dee:	611a      	str	r2, [r3, #16]
			break;
 8002df0:	e023      	b.n	8002e3a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e00:	611a      	str	r2, [r3, #16]
			break;
 8002e02:	e01a      	b.n	8002e3a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e12:	611a      	str	r2, [r3, #16]
			break;
 8002e14:	e011      	b.n	8002e3a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002e24:	611a      	str	r2, [r3, #16]
			break;
 8002e26:	e008      	b.n	8002e3a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e36:	611a      	str	r2, [r3, #16]
			break;
 8002e38:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681c      	ldr	r4, [r3, #0]
 8002e42:	4611      	mov	r1, r2
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8d7 	bl	8002ff8 <brrCalculus>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	799b      	ldrb	r3, [r3, #6]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d82e      	bhi.n	8002eb4 <USART_Config+0x1e8>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <USART_Config+0x190>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e7f 	.word	0x08002e7f
 8002e64:	08002e91 	.word	0x08002e91
 8002e68:	08002ea3 	.word	0x08002ea3
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0208 	orr.w	r2, r2, #8
 8002e7a:	60da      	str	r2, [r3, #12]
			break;
 8002e7c:	e023      	b.n	8002ec6 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0204 	orr.w	r2, r2, #4
 8002e8c:	60da      	str	r2, [r3, #12]
			break;
 8002e8e:	e01a      	b.n	8002ec6 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 020c 	orr.w	r2, r2, #12
 8002e9e:	60da      	str	r2, [r3, #12]
			break;
 8002ea0:	e011      	b.n	8002ec6 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 020c 	bic.w	r2, r2, #12
 8002eb0:	60da      	str	r2, [r3, #12]
			break;
 8002eb2:	e008      	b.n	8002ec6 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020c 	bic.w	r2, r2, #12
 8002ec2:	60da      	str	r2, [r3, #12]
			break;
 8002ec4:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	799b      	ldrb	r3, [r3, #6]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d008      	beq.n	8002ee0 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	e007      	b.n	8002ef0 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eee:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	795b      	ldrb	r3, [r3, #5]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d139      	bne.n	8002f6c <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0220 	orr.w	r2, r2, #32
 8002f06:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <USART_Config+0x258>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d110      	bne.n	8002f34 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8002f12:	2025      	movs	r0, #37	; 0x25
 8002f14:	f7ff fe92 	bl	8002c3c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8002f18:	2101      	movs	r1, #1
 8002f1a:	2025      	movs	r0, #37	; 0x25
 8002f1c:	f7ff feac 	bl	8002c78 <__NVIC_SetPriority>
 8002f20:	e02c      	b.n	8002f7c <USART_Config+0x2b0>
 8002f22:	bf00      	nop
 8002f24:	40011000 	.word	0x40011000
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40004400 	.word	0x40004400
 8002f30:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <USART_Config+0x320>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d107      	bne.n	8002f4e <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8002f3e:	2026      	movs	r0, #38	; 0x26
 8002f40:	f7ff fe7c 	bl	8002c3c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8002f44:	2101      	movs	r1, #1
 8002f46:	2026      	movs	r0, #38	; 0x26
 8002f48:	f7ff fe96 	bl	8002c78 <__NVIC_SetPriority>
 8002f4c:	e016      	b.n	8002f7c <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <USART_Config+0x324>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d107      	bne.n	8002f68 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8002f58:	2047      	movs	r0, #71	; 0x47
 8002f5a:	f7ff fe6f 	bl	8002c3c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2047      	movs	r0, #71	; 0x47
 8002f62:	f7ff fe89 	bl	8002c78 <__NVIC_SetPriority>
 8002f66:	e009      	b.n	8002f7c <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8002f68:	bf00      	nop
 8002f6a:	e007      	b.n	8002f7c <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0220 	bic.w	r2, r2, #32
 8002f7a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d124      	bne.n	8002fce <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f92:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <USART_Config+0x328>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d103      	bne.n	8002fa6 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8002f9e:	2025      	movs	r0, #37	; 0x25
 8002fa0:	f7ff fe4c 	bl	8002c3c <__NVIC_EnableIRQ>
 8002fa4:	e01b      	b.n	8002fde <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <USART_Config+0x320>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8002fb0:	2026      	movs	r0, #38	; 0x26
 8002fb2:	f7ff fe43 	bl	8002c3c <__NVIC_EnableIRQ>
 8002fb6:	e012      	b.n	8002fde <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <USART_Config+0x324>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d103      	bne.n	8002fca <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8002fc2:	2047      	movs	r0, #71	; 0x47
 8002fc4:	f7ff fe3a 	bl	8002c3c <__NVIC_EnableIRQ>
 8002fc8:	e009      	b.n	8002fde <USART_Config+0x312>
		}
		else{
				__NOP();
 8002fca:	bf00      	nop
 8002fcc:	e007      	b.n	8002fde <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fdc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fde:	b662      	cpsie	i
}
 8002fe0:	bf00      	nop
	}

	__enable_irq();
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	40011000 	.word	0x40011000

08002ff8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	79db      	ldrb	r3, [r3, #7]
 8003006:	2b03      	cmp	r3, #3
 8003008:	f200 8217 	bhi.w	800343a <brrCalculus+0x442>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <brrCalculus+0x1c>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	0800311f 	.word	0x0800311f
 800301c:	08003239 	.word	0x08003239
 8003020:	08003341 	.word	0x08003341

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8003024:	4980      	ldr	r1, [pc, #512]	; (8003228 <brrCalculus+0x230>)
 8003026:	a37c      	add	r3, pc, #496	; (adr r3, 8003218 <brrCalculus+0x220>)
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303a:	ee17 0a90 	vmov	r0, s15
 800303e:	f7fd fa8b 	bl	8000558 <__aeabi_f2d>
 8003042:	4b79      	ldr	r3, [pc, #484]	; (8003228 <brrCalculus+0x230>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd fade 	bl	8000608 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4975      	ldr	r1, [pc, #468]	; (8003228 <brrCalculus+0x230>)
 8003052:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8003056:	4b74      	ldr	r3, [pc, #464]	; (8003228 <brrCalculus+0x230>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fd82 	bl	8000b68 <__aeabi_d2iz>
 8003064:	4603      	mov	r3, r0
 8003066:	b29a      	uxth	r2, r3
 8003068:	4b70      	ldr	r3, [pc, #448]	; (800322c <brrCalculus+0x234>)
 800306a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800306c:	4b6e      	ldr	r3, [pc, #440]	; (8003228 <brrCalculus+0x230>)
 800306e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003072:	4b6d      	ldr	r3, [pc, #436]	; (8003228 <brrCalculus+0x230>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f7fd fd74 	bl	8000b68 <__aeabi_d2iz>
 8003080:	4603      	mov	r3, r0
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fa56 	bl	8000534 <__aeabi_i2d>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4620      	mov	r0, r4
 800308e:	4629      	mov	r1, r5
 8003090:	f7fd f902 	bl	8000298 <__aeabi_dsub>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f7fd fdac 	bl	8000bf8 <__aeabi_d2f>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4a63      	ldr	r2, [pc, #396]	; (8003230 <brrCalculus+0x238>)
 80030a4:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80030a6:	4b62      	ldr	r3, [pc, #392]	; (8003230 <brrCalculus+0x238>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	2004      	movs	r0, #4
 80030ae:	eeb0 0a67 	vmov.f32	s0, s15
 80030b2:	f000 fa55 	bl	8003560 <roundToNDecimals>
 80030b6:	eef0 7a40 	vmov.f32	s15, s0
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <brrCalculus+0x238>)
 80030bc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80030c0:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <brrCalculus+0x238>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ce:	4b58      	ldr	r3, [pc, #352]	; (8003230 <brrCalculus+0x238>)
 80030d0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80030d4:	4b56      	ldr	r3, [pc, #344]	; (8003230 <brrCalculus+0x238>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fa3d 	bl	8000558 <__aeabi_f2d>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	ec43 2b10 	vmov	d0, r2, r3
 80030e6:	f002 ffd3 	bl	8006090 <round>
 80030ea:	ec53 2b10 	vmov	r2, r3, d0
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7fd fd81 	bl	8000bf8 <__aeabi_d2f>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a4d      	ldr	r2, [pc, #308]	; (8003230 <brrCalculus+0x238>)
 80030fa:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <brrCalculus+0x234>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	b29a      	uxth	r2, r3
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <brrCalculus+0x238>)
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800310e:	ee17 3a90 	vmov	r3, s15
 8003112:	b29b      	uxth	r3, r3
 8003114:	4313      	orrs	r3, r2
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <brrCalculus+0x23c>)
 800311a:	801a      	strh	r2, [r3, #0]


		break;
 800311c:	e18f      	b.n	800343e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800311e:	4942      	ldr	r1, [pc, #264]	; (8003228 <brrCalculus+0x230>)
 8003120:	a33f      	add	r3, pc, #252	; (adr r3, 8003220 <brrCalculus+0x228>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003134:	ee17 0a90 	vmov	r0, s15
 8003138:	f7fd fa0e 	bl	8000558 <__aeabi_f2d>
 800313c:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <brrCalculus+0x230>)
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f7fd fa61 	bl	8000608 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4937      	ldr	r1, [pc, #220]	; (8003228 <brrCalculus+0x230>)
 800314c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8003150:	4b35      	ldr	r3, [pc, #212]	; (8003228 <brrCalculus+0x230>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fd05 	bl	8000b68 <__aeabi_d2iz>
 800315e:	4603      	mov	r3, r0
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b32      	ldr	r3, [pc, #200]	; (800322c <brrCalculus+0x234>)
 8003164:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8003166:	4b30      	ldr	r3, [pc, #192]	; (8003228 <brrCalculus+0x230>)
 8003168:	e9d3 4500 	ldrd	r4, r5, [r3]
 800316c:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <brrCalculus+0x230>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f7fd fcf7 	bl	8000b68 <__aeabi_d2iz>
 800317a:	4603      	mov	r3, r0
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9d9 	bl	8000534 <__aeabi_i2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd f885 	bl	8000298 <__aeabi_dsub>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f7fd fd2f 	bl	8000bf8 <__aeabi_d2f>
 800319a:	4603      	mov	r3, r0
 800319c:	4a24      	ldr	r2, [pc, #144]	; (8003230 <brrCalculus+0x238>)
 800319e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80031a0:	4b23      	ldr	r3, [pc, #140]	; (8003230 <brrCalculus+0x238>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	2004      	movs	r0, #4
 80031a8:	eeb0 0a67 	vmov.f32	s0, s15
 80031ac:	f000 f9d8 	bl	8003560 <roundToNDecimals>
 80031b0:	eef0 7a40 	vmov.f32	s15, s0
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <brrCalculus+0x238>)
 80031b6:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <brrCalculus+0x238>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <brrCalculus+0x238>)
 80031ca:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <brrCalculus+0x238>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9c0 	bl	8000558 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	ec43 2b10 	vmov	d0, r2, r3
 80031e0:	f002 ff56 	bl	8006090 <round>
 80031e4:	ec53 2b10 	vmov	r2, r3, d0
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fd04 	bl	8000bf8 <__aeabi_d2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <brrCalculus+0x238>)
 80031f4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <brrCalculus+0x234>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <brrCalculus+0x238>)
 8003200:	edd3 7a00 	vldr	s15, [r3]
 8003204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003208:	ee17 3a90 	vmov	r3, s15
 800320c:	b29b      	uxth	r3, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	b29a      	uxth	r2, r3
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <brrCalculus+0x23c>)
 8003214:	801a      	strh	r2, [r3, #0]


		break;
 8003216:	e112      	b.n	800343e <brrCalculus+0x446>
 8003218:	b4e81b4f 	.word	0xb4e81b4f
 800321c:	3edb4e81 	.word	0x3edb4e81
 8003220:	b4e81b4f 	.word	0xb4e81b4f
 8003224:	3ecb4e81 	.word	0x3ecb4e81
 8003228:	20000310 	.word	0x20000310
 800322c:	20000304 	.word	0x20000304
 8003230:	20000308 	.word	0x20000308
 8003234:	20000302 	.word	0x20000302
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8003238:	4989      	ldr	r1, [pc, #548]	; (8003460 <brrCalculus+0x468>)
 800323a:	a385      	add	r3, pc, #532	; (adr r3, 8003450 <brrCalculus+0x458>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	ee17 0a90 	vmov	r0, s15
 8003252:	f7fd f981 	bl	8000558 <__aeabi_f2d>
 8003256:	4b82      	ldr	r3, [pc, #520]	; (8003460 <brrCalculus+0x468>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f7fd f9d4 	bl	8000608 <__aeabi_dmul>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	497e      	ldr	r1, [pc, #504]	; (8003460 <brrCalculus+0x468>)
 8003266:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800326a:	4b7d      	ldr	r3, [pc, #500]	; (8003460 <brrCalculus+0x468>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	f7fd fc78 	bl	8000b68 <__aeabi_d2iz>
 8003278:	4603      	mov	r3, r0
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b79      	ldr	r3, [pc, #484]	; (8003464 <brrCalculus+0x46c>)
 800327e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8003280:	4b77      	ldr	r3, [pc, #476]	; (8003460 <brrCalculus+0x468>)
 8003282:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <brrCalculus+0x468>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f7fd fc6a 	bl	8000b68 <__aeabi_d2iz>
 8003294:	4603      	mov	r3, r0
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd f94c 	bl	8000534 <__aeabi_i2d>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4620      	mov	r0, r4
 80032a2:	4629      	mov	r1, r5
 80032a4:	f7fc fff8 	bl	8000298 <__aeabi_dsub>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	f7fd fca2 	bl	8000bf8 <__aeabi_d2f>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4a6c      	ldr	r2, [pc, #432]	; (8003468 <brrCalculus+0x470>)
 80032b8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80032ba:	4b6b      	ldr	r3, [pc, #428]	; (8003468 <brrCalculus+0x470>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	2004      	movs	r0, #4
 80032c2:	eeb0 0a67 	vmov.f32	s0, s15
 80032c6:	f000 f94b 	bl	8003560 <roundToNDecimals>
 80032ca:	eef0 7a40 	vmov.f32	s15, s0
 80032ce:	4b66      	ldr	r3, [pc, #408]	; (8003468 <brrCalculus+0x470>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80032d4:	4b64      	ldr	r3, [pc, #400]	; (8003468 <brrCalculus+0x470>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80032de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e2:	4b61      	ldr	r3, [pc, #388]	; (8003468 <brrCalculus+0x470>)
 80032e4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 80032e8:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <brrCalculus+0x470>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f933 	bl	8000558 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ec43 2b10 	vmov	d0, r2, r3
 80032fa:	f002 fec9 	bl	8006090 <round>
 80032fe:	ec51 0b10 	vmov	r0, r1, d0
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	4b59      	ldr	r3, [pc, #356]	; (800346c <brrCalculus+0x474>)
 8003308:	f7fc ffc8 	bl	800029c <__adddf3>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f7fd fc70 	bl	8000bf8 <__aeabi_d2f>
 8003318:	4603      	mov	r3, r0
 800331a:	4a53      	ldr	r2, [pc, #332]	; (8003468 <brrCalculus+0x470>)
 800331c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <brrCalculus+0x46c>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	b29a      	uxth	r2, r3
 8003326:	4b50      	ldr	r3, [pc, #320]	; (8003468 <brrCalculus+0x470>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003330:	ee17 3a90 	vmov	r3, s15
 8003334:	b29b      	uxth	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b29a      	uxth	r2, r3
 800333a:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <brrCalculus+0x478>)
 800333c:	801a      	strh	r2, [r3, #0]


		break;
 800333e:	e07e      	b.n	800343e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8003340:	4947      	ldr	r1, [pc, #284]	; (8003460 <brrCalculus+0x468>)
 8003342:	a345      	add	r3, pc, #276	; (adr r3, 8003458 <brrCalculus+0x460>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003356:	ee17 0a90 	vmov	r0, s15
 800335a:	f7fd f8fd 	bl	8000558 <__aeabi_f2d>
 800335e:	4b40      	ldr	r3, [pc, #256]	; (8003460 <brrCalculus+0x468>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f950 	bl	8000608 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	493c      	ldr	r1, [pc, #240]	; (8003460 <brrCalculus+0x468>)
 800336e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <brrCalculus+0x468>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fbf4 	bl	8000b68 <__aeabi_d2iz>
 8003380:	4603      	mov	r3, r0
 8003382:	b29a      	uxth	r2, r3
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <brrCalculus+0x46c>)
 8003386:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8003388:	4b35      	ldr	r3, [pc, #212]	; (8003460 <brrCalculus+0x468>)
 800338a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <brrCalculus+0x468>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	f7fd fbe6 	bl	8000b68 <__aeabi_d2iz>
 800339c:	4603      	mov	r3, r0
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8c8 	bl	8000534 <__aeabi_i2d>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4620      	mov	r0, r4
 80033aa:	4629      	mov	r1, r5
 80033ac:	f7fc ff74 	bl	8000298 <__aeabi_dsub>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7fd fc1e 	bl	8000bf8 <__aeabi_d2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <brrCalculus+0x470>)
 80033c0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <brrCalculus+0x470>)
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	2004      	movs	r0, #4
 80033ca:	eeb0 0a67 	vmov.f32	s0, s15
 80033ce:	f000 f8c7 	bl	8003560 <roundToNDecimals>
 80033d2:	eef0 7a40 	vmov.f32	s15, s0
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <brrCalculus+0x470>)
 80033d8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <brrCalculus+0x470>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80033e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <brrCalculus+0x470>)
 80033ec:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <brrCalculus+0x470>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd f8af 	bl	8000558 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	ec43 2b10 	vmov	d0, r2, r3
 8003402:	f002 fe45 	bl	8006090 <round>
 8003406:	ec53 2b10 	vmov	r2, r3, d0
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f7fd fbf3 	bl	8000bf8 <__aeabi_d2f>
 8003412:	4603      	mov	r3, r0
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <brrCalculus+0x470>)
 8003416:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <brrCalculus+0x46c>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	b29a      	uxth	r2, r3
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <brrCalculus+0x470>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342a:	ee17 3a90 	vmov	r3, s15
 800342e:	b29b      	uxth	r3, r3
 8003430:	4313      	orrs	r3, r2
 8003432:	b29a      	uxth	r2, r3
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <brrCalculus+0x478>)
 8003436:	801a      	strh	r2, [r3, #0]


		break;
 8003438:	e001      	b.n	800343e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800343a:	bf00      	nop
		break;
 800343c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <brrCalculus+0x478>)
 8003440:	881b      	ldrh	r3, [r3, #0]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bdb0      	pop	{r4, r5, r7, pc}
 800344a:	bf00      	nop
 800344c:	f3af 8000 	nop.w
 8003450:	789abcdf 	.word	0x789abcdf
 8003454:	3ec23456 	.word	0x3ec23456
 8003458:	789abcdf 	.word	0x789abcdf
 800345c:	3ea23456 	.word	0x3ea23456
 8003460:	20000310 	.word	0x20000310
 8003464:	20000304 	.word	0x20000304
 8003468:	20000308 	.word	0x20000308
 800346c:	3ff00000 	.word	0x3ff00000
 8003470:	20000302 	.word	0x20000302

08003474 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800347e:	e000      	b.n	8003482 <writeChar+0xe>
		__NOP();
 8003480:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f7      	beq.n	8003480 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]

}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <usart1Rx_Callback>:
}

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
	__NOP();
 80034a8:	bf00      	nop
}
 80034aa:	bf00      	nop
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
	__NOP();
 80034b8:	bf00      	nop
}
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	return auxRxData;
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <getRxData+0x14>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000318 	.word	0x20000318

080034dc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <USART2_IRQHandler+0x24>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <USART2_IRQHandler+0x24>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <USART2_IRQHandler+0x28>)
 80034f4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80034f6:	f7fd fd67 	bl	8000fc8 <usart2Rx_Callback>
	}

}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40004400 	.word	0x40004400
 8003504:	20000318 	.word	0x20000318

08003508 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <USART1_IRQHandler+0x24>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <USART1_IRQHandler+0x24>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <USART1_IRQHandler+0x28>)
 8003520:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8003522:	f7ff ffbf 	bl	80034a4 <usart1Rx_Callback>
	}
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40011000 	.word	0x40011000
 8003530:	20000318 	.word	0x20000318

08003534 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <USART6_IRQHandler+0x24>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <USART6_IRQHandler+0x24>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <USART6_IRQHandler+0x28>)
 800354c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800354e:	f7ff ffb1 	bl	80034b4 <usart6Rx_Callback>
	}

}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40011400 	.word	0x40011400
 800355c:	20000318 	.word	0x20000318

08003560 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	ed87 0a01 	vstr	s0, [r7, #4]
 800356a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	f7fc ffe1 	bl	8000534 <__aeabi_i2d>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	ec43 2b11 	vmov	d1, r2, r3
 800357a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80035f8 <roundToNDecimals+0x98>
 800357e:	f002 fdcd 	bl	800611c <pow>
 8003582:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fc ffe6 	bl	8000558 <__aeabi_f2d>
 800358c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003590:	f7fd f83a 	bl	8000608 <__aeabi_dmul>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	f7fd fb2c 	bl	8000bf8 <__aeabi_d2f>
 80035a0:	4603      	mov	r3, r0
 80035a2:	607b      	str	r3, [r7, #4]

    number = round(number);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fc ffd7 	bl	8000558 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	ec43 2b10 	vmov	d0, r2, r3
 80035b2:	f002 fd6d 	bl	8006090 <round>
 80035b6:	ec53 2b10 	vmov	r2, r3, d0
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f7fd fb1b 	bl	8000bf8 <__aeabi_d2f>
 80035c2:	4603      	mov	r3, r0
 80035c4:	607b      	str	r3, [r7, #4]

    number /= factor;
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fc ffc6 	bl	8000558 <__aeabi_f2d>
 80035cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d0:	f7fd f944 	bl	800085c <__aeabi_ddiv>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f7fd fb0c 	bl	8000bf8 <__aeabi_d2f>
 80035e0:	4603      	mov	r3, r0
 80035e2:	607b      	str	r3, [r7, #4]

    return number;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	ee07 3a90 	vmov	s15, r3
}
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	f3af 8000 	nop.w
 80035f8:	00000000 	.word	0x00000000
 80035fc:	40240000 	.word	0x40240000

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	; (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000000 	.word	0x20000000

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4d0d      	ldr	r5, [pc, #52]	; (8003644 <__libc_init_array+0x38>)
 8003610:	4c0d      	ldr	r4, [pc, #52]	; (8003648 <__libc_init_array+0x3c>)
 8003612:	1b64      	subs	r4, r4, r5
 8003614:	10a4      	asrs	r4, r4, #2
 8003616:	2600      	movs	r6, #0
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	4d0b      	ldr	r5, [pc, #44]	; (800364c <__libc_init_array+0x40>)
 800361e:	4c0c      	ldr	r4, [pc, #48]	; (8003650 <__libc_init_array+0x44>)
 8003620:	f003 fca6 	bl	8006f70 <_init>
 8003624:	1b64      	subs	r4, r4, r5
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	2600      	movs	r6, #0
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08007398 	.word	0x08007398
 8003648:	08007398 	.word	0x08007398
 800364c:	08007398 	.word	0x08007398
 8003650:	0800739c 	.word	0x0800739c

08003654 <memset>:
 8003654:	4402      	add	r2, r0
 8003656:	4603      	mov	r3, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	f803 1b01 	strb.w	r1, [r3], #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <__cvt>:
 8003664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003668:	ec55 4b10 	vmov	r4, r5, d0
 800366c:	2d00      	cmp	r5, #0
 800366e:	460e      	mov	r6, r1
 8003670:	4619      	mov	r1, r3
 8003672:	462b      	mov	r3, r5
 8003674:	bfbb      	ittet	lt
 8003676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800367a:	461d      	movlt	r5, r3
 800367c:	2300      	movge	r3, #0
 800367e:	232d      	movlt	r3, #45	; 0x2d
 8003680:	700b      	strb	r3, [r1, #0]
 8003682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003688:	4691      	mov	r9, r2
 800368a:	f023 0820 	bic.w	r8, r3, #32
 800368e:	bfbc      	itt	lt
 8003690:	4622      	movlt	r2, r4
 8003692:	4614      	movlt	r4, r2
 8003694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003698:	d005      	beq.n	80036a6 <__cvt+0x42>
 800369a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800369e:	d100      	bne.n	80036a2 <__cvt+0x3e>
 80036a0:	3601      	adds	r6, #1
 80036a2:	2102      	movs	r1, #2
 80036a4:	e000      	b.n	80036a8 <__cvt+0x44>
 80036a6:	2103      	movs	r1, #3
 80036a8:	ab03      	add	r3, sp, #12
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	ab02      	add	r3, sp, #8
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	ec45 4b10 	vmov	d0, r4, r5
 80036b4:	4653      	mov	r3, sl
 80036b6:	4632      	mov	r2, r6
 80036b8:	f000 fcca 	bl	8004050 <_dtoa_r>
 80036bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036c0:	4607      	mov	r7, r0
 80036c2:	d102      	bne.n	80036ca <__cvt+0x66>
 80036c4:	f019 0f01 	tst.w	r9, #1
 80036c8:	d022      	beq.n	8003710 <__cvt+0xac>
 80036ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036ce:	eb07 0906 	add.w	r9, r7, r6
 80036d2:	d110      	bne.n	80036f6 <__cvt+0x92>
 80036d4:	783b      	ldrb	r3, [r7, #0]
 80036d6:	2b30      	cmp	r3, #48	; 0x30
 80036d8:	d10a      	bne.n	80036f0 <__cvt+0x8c>
 80036da:	2200      	movs	r2, #0
 80036dc:	2300      	movs	r3, #0
 80036de:	4620      	mov	r0, r4
 80036e0:	4629      	mov	r1, r5
 80036e2:	f7fd f9f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80036e6:	b918      	cbnz	r0, 80036f0 <__cvt+0x8c>
 80036e8:	f1c6 0601 	rsb	r6, r6, #1
 80036ec:	f8ca 6000 	str.w	r6, [sl]
 80036f0:	f8da 3000 	ldr.w	r3, [sl]
 80036f4:	4499      	add	r9, r3
 80036f6:	2200      	movs	r2, #0
 80036f8:	2300      	movs	r3, #0
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7fd f9eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003702:	b108      	cbz	r0, 8003708 <__cvt+0xa4>
 8003704:	f8cd 900c 	str.w	r9, [sp, #12]
 8003708:	2230      	movs	r2, #48	; 0x30
 800370a:	9b03      	ldr	r3, [sp, #12]
 800370c:	454b      	cmp	r3, r9
 800370e:	d307      	bcc.n	8003720 <__cvt+0xbc>
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003714:	1bdb      	subs	r3, r3, r7
 8003716:	4638      	mov	r0, r7
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	b004      	add	sp, #16
 800371c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	9103      	str	r1, [sp, #12]
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e7f0      	b.n	800370a <__cvt+0xa6>

08003728 <__exponent>:
 8003728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372a:	4603      	mov	r3, r0
 800372c:	2900      	cmp	r1, #0
 800372e:	bfb8      	it	lt
 8003730:	4249      	neglt	r1, r1
 8003732:	f803 2b02 	strb.w	r2, [r3], #2
 8003736:	bfb4      	ite	lt
 8003738:	222d      	movlt	r2, #45	; 0x2d
 800373a:	222b      	movge	r2, #43	; 0x2b
 800373c:	2909      	cmp	r1, #9
 800373e:	7042      	strb	r2, [r0, #1]
 8003740:	dd2a      	ble.n	8003798 <__exponent+0x70>
 8003742:	f10d 0407 	add.w	r4, sp, #7
 8003746:	46a4      	mov	ip, r4
 8003748:	270a      	movs	r7, #10
 800374a:	46a6      	mov	lr, r4
 800374c:	460a      	mov	r2, r1
 800374e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003752:	fb07 1516 	mls	r5, r7, r6, r1
 8003756:	3530      	adds	r5, #48	; 0x30
 8003758:	2a63      	cmp	r2, #99	; 0x63
 800375a:	f104 34ff 	add.w	r4, r4, #4294967295
 800375e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003762:	4631      	mov	r1, r6
 8003764:	dcf1      	bgt.n	800374a <__exponent+0x22>
 8003766:	3130      	adds	r1, #48	; 0x30
 8003768:	f1ae 0502 	sub.w	r5, lr, #2
 800376c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003770:	1c44      	adds	r4, r0, #1
 8003772:	4629      	mov	r1, r5
 8003774:	4561      	cmp	r1, ip
 8003776:	d30a      	bcc.n	800378e <__exponent+0x66>
 8003778:	f10d 0209 	add.w	r2, sp, #9
 800377c:	eba2 020e 	sub.w	r2, r2, lr
 8003780:	4565      	cmp	r5, ip
 8003782:	bf88      	it	hi
 8003784:	2200      	movhi	r2, #0
 8003786:	4413      	add	r3, r2
 8003788:	1a18      	subs	r0, r3, r0
 800378a:	b003      	add	sp, #12
 800378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003792:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003796:	e7ed      	b.n	8003774 <__exponent+0x4c>
 8003798:	2330      	movs	r3, #48	; 0x30
 800379a:	3130      	adds	r1, #48	; 0x30
 800379c:	7083      	strb	r3, [r0, #2]
 800379e:	70c1      	strb	r1, [r0, #3]
 80037a0:	1d03      	adds	r3, r0, #4
 80037a2:	e7f1      	b.n	8003788 <__exponent+0x60>

080037a4 <_printf_float>:
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	ed2d 8b02 	vpush	{d8}
 80037ac:	b08d      	sub	sp, #52	; 0x34
 80037ae:	460c      	mov	r4, r1
 80037b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80037b4:	4616      	mov	r6, r2
 80037b6:	461f      	mov	r7, r3
 80037b8:	4605      	mov	r5, r0
 80037ba:	f001 fa37 	bl	8004c2c <_localeconv_r>
 80037be:	f8d0 a000 	ldr.w	sl, [r0]
 80037c2:	4650      	mov	r0, sl
 80037c4:	f7fc fd0c 	bl	80001e0 <strlen>
 80037c8:	2300      	movs	r3, #0
 80037ca:	930a      	str	r3, [sp, #40]	; 0x28
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	9305      	str	r3, [sp, #20]
 80037d0:	f8d8 3000 	ldr.w	r3, [r8]
 80037d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80037d8:	3307      	adds	r3, #7
 80037da:	f023 0307 	bic.w	r3, r3, #7
 80037de:	f103 0208 	add.w	r2, r3, #8
 80037e2:	f8c8 2000 	str.w	r2, [r8]
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80037ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80037f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80037fc:	ee08 0a10 	vmov	s16, r0
 8003800:	4b9f      	ldr	r3, [pc, #636]	; (8003a80 <_printf_float+0x2dc>)
 8003802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003806:	f04f 32ff 	mov.w	r2, #4294967295
 800380a:	f7fd f997 	bl	8000b3c <__aeabi_dcmpun>
 800380e:	bb88      	cbnz	r0, 8003874 <_printf_float+0xd0>
 8003810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003814:	4b9a      	ldr	r3, [pc, #616]	; (8003a80 <_printf_float+0x2dc>)
 8003816:	f04f 32ff 	mov.w	r2, #4294967295
 800381a:	f7fd f971 	bl	8000b00 <__aeabi_dcmple>
 800381e:	bb48      	cbnz	r0, 8003874 <_printf_float+0xd0>
 8003820:	2200      	movs	r2, #0
 8003822:	2300      	movs	r3, #0
 8003824:	4640      	mov	r0, r8
 8003826:	4649      	mov	r1, r9
 8003828:	f7fd f960 	bl	8000aec <__aeabi_dcmplt>
 800382c:	b110      	cbz	r0, 8003834 <_printf_float+0x90>
 800382e:	232d      	movs	r3, #45	; 0x2d
 8003830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003834:	4b93      	ldr	r3, [pc, #588]	; (8003a84 <_printf_float+0x2e0>)
 8003836:	4894      	ldr	r0, [pc, #592]	; (8003a88 <_printf_float+0x2e4>)
 8003838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800383c:	bf94      	ite	ls
 800383e:	4698      	movls	r8, r3
 8003840:	4680      	movhi	r8, r0
 8003842:	2303      	movs	r3, #3
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	9b05      	ldr	r3, [sp, #20]
 8003848:	f023 0204 	bic.w	r2, r3, #4
 800384c:	6022      	str	r2, [r4, #0]
 800384e:	f04f 0900 	mov.w	r9, #0
 8003852:	9700      	str	r7, [sp, #0]
 8003854:	4633      	mov	r3, r6
 8003856:	aa0b      	add	r2, sp, #44	; 0x2c
 8003858:	4621      	mov	r1, r4
 800385a:	4628      	mov	r0, r5
 800385c:	f000 f9d8 	bl	8003c10 <_printf_common>
 8003860:	3001      	adds	r0, #1
 8003862:	f040 8090 	bne.w	8003986 <_printf_float+0x1e2>
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	b00d      	add	sp, #52	; 0x34
 800386c:	ecbd 8b02 	vpop	{d8}
 8003870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	4640      	mov	r0, r8
 800387a:	4649      	mov	r1, r9
 800387c:	f7fd f95e 	bl	8000b3c <__aeabi_dcmpun>
 8003880:	b140      	cbz	r0, 8003894 <_printf_float+0xf0>
 8003882:	464b      	mov	r3, r9
 8003884:	2b00      	cmp	r3, #0
 8003886:	bfbc      	itt	lt
 8003888:	232d      	movlt	r3, #45	; 0x2d
 800388a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800388e:	487f      	ldr	r0, [pc, #508]	; (8003a8c <_printf_float+0x2e8>)
 8003890:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <_printf_float+0x2ec>)
 8003892:	e7d1      	b.n	8003838 <_printf_float+0x94>
 8003894:	6863      	ldr	r3, [r4, #4]
 8003896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800389a:	9206      	str	r2, [sp, #24]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	d13f      	bne.n	8003920 <_printf_float+0x17c>
 80038a0:	2306      	movs	r3, #6
 80038a2:	6063      	str	r3, [r4, #4]
 80038a4:	9b05      	ldr	r3, [sp, #20]
 80038a6:	6861      	ldr	r1, [r4, #4]
 80038a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038ac:	2300      	movs	r3, #0
 80038ae:	9303      	str	r3, [sp, #12]
 80038b0:	ab0a      	add	r3, sp, #40	; 0x28
 80038b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80038b6:	ab09      	add	r3, sp, #36	; 0x24
 80038b8:	ec49 8b10 	vmov	d0, r8, r9
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	6022      	str	r2, [r4, #0]
 80038c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80038c4:	4628      	mov	r0, r5
 80038c6:	f7ff fecd 	bl	8003664 <__cvt>
 80038ca:	9b06      	ldr	r3, [sp, #24]
 80038cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038ce:	2b47      	cmp	r3, #71	; 0x47
 80038d0:	4680      	mov	r8, r0
 80038d2:	d108      	bne.n	80038e6 <_printf_float+0x142>
 80038d4:	1cc8      	adds	r0, r1, #3
 80038d6:	db02      	blt.n	80038de <_printf_float+0x13a>
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	4299      	cmp	r1, r3
 80038dc:	dd41      	ble.n	8003962 <_printf_float+0x1be>
 80038de:	f1ab 0b02 	sub.w	fp, fp, #2
 80038e2:	fa5f fb8b 	uxtb.w	fp, fp
 80038e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80038ea:	d820      	bhi.n	800392e <_printf_float+0x18a>
 80038ec:	3901      	subs	r1, #1
 80038ee:	465a      	mov	r2, fp
 80038f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038f4:	9109      	str	r1, [sp, #36]	; 0x24
 80038f6:	f7ff ff17 	bl	8003728 <__exponent>
 80038fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038fc:	1813      	adds	r3, r2, r0
 80038fe:	2a01      	cmp	r2, #1
 8003900:	4681      	mov	r9, r0
 8003902:	6123      	str	r3, [r4, #16]
 8003904:	dc02      	bgt.n	800390c <_printf_float+0x168>
 8003906:	6822      	ldr	r2, [r4, #0]
 8003908:	07d2      	lsls	r2, r2, #31
 800390a:	d501      	bpl.n	8003910 <_printf_float+0x16c>
 800390c:	3301      	adds	r3, #1
 800390e:	6123      	str	r3, [r4, #16]
 8003910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003914:	2b00      	cmp	r3, #0
 8003916:	d09c      	beq.n	8003852 <_printf_float+0xae>
 8003918:	232d      	movs	r3, #45	; 0x2d
 800391a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800391e:	e798      	b.n	8003852 <_printf_float+0xae>
 8003920:	9a06      	ldr	r2, [sp, #24]
 8003922:	2a47      	cmp	r2, #71	; 0x47
 8003924:	d1be      	bne.n	80038a4 <_printf_float+0x100>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1bc      	bne.n	80038a4 <_printf_float+0x100>
 800392a:	2301      	movs	r3, #1
 800392c:	e7b9      	b.n	80038a2 <_printf_float+0xfe>
 800392e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003932:	d118      	bne.n	8003966 <_printf_float+0x1c2>
 8003934:	2900      	cmp	r1, #0
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	dd0b      	ble.n	8003952 <_printf_float+0x1ae>
 800393a:	6121      	str	r1, [r4, #16]
 800393c:	b913      	cbnz	r3, 8003944 <_printf_float+0x1a0>
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	07d0      	lsls	r0, r2, #31
 8003942:	d502      	bpl.n	800394a <_printf_float+0x1a6>
 8003944:	3301      	adds	r3, #1
 8003946:	440b      	add	r3, r1
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	65a1      	str	r1, [r4, #88]	; 0x58
 800394c:	f04f 0900 	mov.w	r9, #0
 8003950:	e7de      	b.n	8003910 <_printf_float+0x16c>
 8003952:	b913      	cbnz	r3, 800395a <_printf_float+0x1b6>
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	07d2      	lsls	r2, r2, #31
 8003958:	d501      	bpl.n	800395e <_printf_float+0x1ba>
 800395a:	3302      	adds	r3, #2
 800395c:	e7f4      	b.n	8003948 <_printf_float+0x1a4>
 800395e:	2301      	movs	r3, #1
 8003960:	e7f2      	b.n	8003948 <_printf_float+0x1a4>
 8003962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003968:	4299      	cmp	r1, r3
 800396a:	db05      	blt.n	8003978 <_printf_float+0x1d4>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	6121      	str	r1, [r4, #16]
 8003970:	07d8      	lsls	r0, r3, #31
 8003972:	d5ea      	bpl.n	800394a <_printf_float+0x1a6>
 8003974:	1c4b      	adds	r3, r1, #1
 8003976:	e7e7      	b.n	8003948 <_printf_float+0x1a4>
 8003978:	2900      	cmp	r1, #0
 800397a:	bfd4      	ite	le
 800397c:	f1c1 0202 	rsble	r2, r1, #2
 8003980:	2201      	movgt	r2, #1
 8003982:	4413      	add	r3, r2
 8003984:	e7e0      	b.n	8003948 <_printf_float+0x1a4>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	055a      	lsls	r2, r3, #21
 800398a:	d407      	bmi.n	800399c <_printf_float+0x1f8>
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	4642      	mov	r2, r8
 8003990:	4631      	mov	r1, r6
 8003992:	4628      	mov	r0, r5
 8003994:	47b8      	blx	r7
 8003996:	3001      	adds	r0, #1
 8003998:	d12c      	bne.n	80039f4 <_printf_float+0x250>
 800399a:	e764      	b.n	8003866 <_printf_float+0xc2>
 800399c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80039a0:	f240 80e0 	bls.w	8003b64 <_printf_float+0x3c0>
 80039a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039a8:	2200      	movs	r2, #0
 80039aa:	2300      	movs	r3, #0
 80039ac:	f7fd f894 	bl	8000ad8 <__aeabi_dcmpeq>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d034      	beq.n	8003a1e <_printf_float+0x27a>
 80039b4:	4a37      	ldr	r2, [pc, #220]	; (8003a94 <_printf_float+0x2f0>)
 80039b6:	2301      	movs	r3, #1
 80039b8:	4631      	mov	r1, r6
 80039ba:	4628      	mov	r0, r5
 80039bc:	47b8      	blx	r7
 80039be:	3001      	adds	r0, #1
 80039c0:	f43f af51 	beq.w	8003866 <_printf_float+0xc2>
 80039c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039c8:	429a      	cmp	r2, r3
 80039ca:	db02      	blt.n	80039d2 <_printf_float+0x22e>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	07d8      	lsls	r0, r3, #31
 80039d0:	d510      	bpl.n	80039f4 <_printf_float+0x250>
 80039d2:	ee18 3a10 	vmov	r3, s16
 80039d6:	4652      	mov	r2, sl
 80039d8:	4631      	mov	r1, r6
 80039da:	4628      	mov	r0, r5
 80039dc:	47b8      	blx	r7
 80039de:	3001      	adds	r0, #1
 80039e0:	f43f af41 	beq.w	8003866 <_printf_float+0xc2>
 80039e4:	f04f 0800 	mov.w	r8, #0
 80039e8:	f104 091a 	add.w	r9, r4, #26
 80039ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	4543      	cmp	r3, r8
 80039f2:	dc09      	bgt.n	8003a08 <_printf_float+0x264>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	079b      	lsls	r3, r3, #30
 80039f8:	f100 8105 	bmi.w	8003c06 <_printf_float+0x462>
 80039fc:	68e0      	ldr	r0, [r4, #12]
 80039fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a00:	4298      	cmp	r0, r3
 8003a02:	bfb8      	it	lt
 8003a04:	4618      	movlt	r0, r3
 8003a06:	e730      	b.n	800386a <_printf_float+0xc6>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	464a      	mov	r2, r9
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	4628      	mov	r0, r5
 8003a10:	47b8      	blx	r7
 8003a12:	3001      	adds	r0, #1
 8003a14:	f43f af27 	beq.w	8003866 <_printf_float+0xc2>
 8003a18:	f108 0801 	add.w	r8, r8, #1
 8003a1c:	e7e6      	b.n	80039ec <_printf_float+0x248>
 8003a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dc39      	bgt.n	8003a98 <_printf_float+0x2f4>
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <_printf_float+0x2f0>)
 8003a26:	2301      	movs	r3, #1
 8003a28:	4631      	mov	r1, r6
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	47b8      	blx	r7
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f43f af19 	beq.w	8003866 <_printf_float+0xc2>
 8003a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d102      	bne.n	8003a42 <_printf_float+0x29e>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	07d9      	lsls	r1, r3, #31
 8003a40:	d5d8      	bpl.n	80039f4 <_printf_float+0x250>
 8003a42:	ee18 3a10 	vmov	r3, s16
 8003a46:	4652      	mov	r2, sl
 8003a48:	4631      	mov	r1, r6
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	47b8      	blx	r7
 8003a4e:	3001      	adds	r0, #1
 8003a50:	f43f af09 	beq.w	8003866 <_printf_float+0xc2>
 8003a54:	f04f 0900 	mov.w	r9, #0
 8003a58:	f104 0a1a 	add.w	sl, r4, #26
 8003a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a5e:	425b      	negs	r3, r3
 8003a60:	454b      	cmp	r3, r9
 8003a62:	dc01      	bgt.n	8003a68 <_printf_float+0x2c4>
 8003a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a66:	e792      	b.n	800398e <_printf_float+0x1ea>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4652      	mov	r2, sl
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	4628      	mov	r0, r5
 8003a70:	47b8      	blx	r7
 8003a72:	3001      	adds	r0, #1
 8003a74:	f43f aef7 	beq.w	8003866 <_printf_float+0xc2>
 8003a78:	f109 0901 	add.w	r9, r9, #1
 8003a7c:	e7ee      	b.n	8003a5c <_printf_float+0x2b8>
 8003a7e:	bf00      	nop
 8003a80:	7fefffff 	.word	0x7fefffff
 8003a84:	08006f8c 	.word	0x08006f8c
 8003a88:	08006f90 	.word	0x08006f90
 8003a8c:	08006f98 	.word	0x08006f98
 8003a90:	08006f94 	.word	0x08006f94
 8003a94:	08006f9c 	.word	0x08006f9c
 8003a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	bfa8      	it	ge
 8003aa0:	461a      	movge	r2, r3
 8003aa2:	2a00      	cmp	r2, #0
 8003aa4:	4691      	mov	r9, r2
 8003aa6:	dc37      	bgt.n	8003b18 <_printf_float+0x374>
 8003aa8:	f04f 0b00 	mov.w	fp, #0
 8003aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ab0:	f104 021a 	add.w	r2, r4, #26
 8003ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ab6:	9305      	str	r3, [sp, #20]
 8003ab8:	eba3 0309 	sub.w	r3, r3, r9
 8003abc:	455b      	cmp	r3, fp
 8003abe:	dc33      	bgt.n	8003b28 <_printf_float+0x384>
 8003ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	db3b      	blt.n	8003b40 <_printf_float+0x39c>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	07da      	lsls	r2, r3, #31
 8003acc:	d438      	bmi.n	8003b40 <_printf_float+0x39c>
 8003ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ad0:	9a05      	ldr	r2, [sp, #20]
 8003ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ad4:	1a9a      	subs	r2, r3, r2
 8003ad6:	eba3 0901 	sub.w	r9, r3, r1
 8003ada:	4591      	cmp	r9, r2
 8003adc:	bfa8      	it	ge
 8003ade:	4691      	movge	r9, r2
 8003ae0:	f1b9 0f00 	cmp.w	r9, #0
 8003ae4:	dc35      	bgt.n	8003b52 <_printf_float+0x3ae>
 8003ae6:	f04f 0800 	mov.w	r8, #0
 8003aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003aee:	f104 0a1a 	add.w	sl, r4, #26
 8003af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	eba3 0309 	sub.w	r3, r3, r9
 8003afc:	4543      	cmp	r3, r8
 8003afe:	f77f af79 	ble.w	80039f4 <_printf_float+0x250>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4652      	mov	r2, sl
 8003b06:	4631      	mov	r1, r6
 8003b08:	4628      	mov	r0, r5
 8003b0a:	47b8      	blx	r7
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	f43f aeaa 	beq.w	8003866 <_printf_float+0xc2>
 8003b12:	f108 0801 	add.w	r8, r8, #1
 8003b16:	e7ec      	b.n	8003af2 <_printf_float+0x34e>
 8003b18:	4613      	mov	r3, r2
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	4628      	mov	r0, r5
 8003b20:	47b8      	blx	r7
 8003b22:	3001      	adds	r0, #1
 8003b24:	d1c0      	bne.n	8003aa8 <_printf_float+0x304>
 8003b26:	e69e      	b.n	8003866 <_printf_float+0xc2>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	9205      	str	r2, [sp, #20]
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	f43f ae97 	beq.w	8003866 <_printf_float+0xc2>
 8003b38:	9a05      	ldr	r2, [sp, #20]
 8003b3a:	f10b 0b01 	add.w	fp, fp, #1
 8003b3e:	e7b9      	b.n	8003ab4 <_printf_float+0x310>
 8003b40:	ee18 3a10 	vmov	r3, s16
 8003b44:	4652      	mov	r2, sl
 8003b46:	4631      	mov	r1, r6
 8003b48:	4628      	mov	r0, r5
 8003b4a:	47b8      	blx	r7
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d1be      	bne.n	8003ace <_printf_float+0x32a>
 8003b50:	e689      	b.n	8003866 <_printf_float+0xc2>
 8003b52:	9a05      	ldr	r2, [sp, #20]
 8003b54:	464b      	mov	r3, r9
 8003b56:	4442      	add	r2, r8
 8003b58:	4631      	mov	r1, r6
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	47b8      	blx	r7
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d1c1      	bne.n	8003ae6 <_printf_float+0x342>
 8003b62:	e680      	b.n	8003866 <_printf_float+0xc2>
 8003b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b66:	2a01      	cmp	r2, #1
 8003b68:	dc01      	bgt.n	8003b6e <_printf_float+0x3ca>
 8003b6a:	07db      	lsls	r3, r3, #31
 8003b6c:	d538      	bpl.n	8003be0 <_printf_float+0x43c>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4642      	mov	r2, r8
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	f43f ae74 	beq.w	8003866 <_printf_float+0xc2>
 8003b7e:	ee18 3a10 	vmov	r3, s16
 8003b82:	4652      	mov	r2, sl
 8003b84:	4631      	mov	r1, r6
 8003b86:	4628      	mov	r0, r5
 8003b88:	47b8      	blx	r7
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	f43f ae6b 	beq.w	8003866 <_printf_float+0xc2>
 8003b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b94:	2200      	movs	r2, #0
 8003b96:	2300      	movs	r3, #0
 8003b98:	f7fc ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b9c:	b9d8      	cbnz	r0, 8003bd6 <_printf_float+0x432>
 8003b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ba0:	f108 0201 	add.w	r2, r8, #1
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	4628      	mov	r0, r5
 8003baa:	47b8      	blx	r7
 8003bac:	3001      	adds	r0, #1
 8003bae:	d10e      	bne.n	8003bce <_printf_float+0x42a>
 8003bb0:	e659      	b.n	8003866 <_printf_float+0xc2>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4652      	mov	r2, sl
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4628      	mov	r0, r5
 8003bba:	47b8      	blx	r7
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	f43f ae52 	beq.w	8003866 <_printf_float+0xc2>
 8003bc2:	f108 0801 	add.w	r8, r8, #1
 8003bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	4543      	cmp	r3, r8
 8003bcc:	dcf1      	bgt.n	8003bb2 <_printf_float+0x40e>
 8003bce:	464b      	mov	r3, r9
 8003bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003bd4:	e6dc      	b.n	8003990 <_printf_float+0x1ec>
 8003bd6:	f04f 0800 	mov.w	r8, #0
 8003bda:	f104 0a1a 	add.w	sl, r4, #26
 8003bde:	e7f2      	b.n	8003bc6 <_printf_float+0x422>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4642      	mov	r2, r8
 8003be4:	e7df      	b.n	8003ba6 <_printf_float+0x402>
 8003be6:	2301      	movs	r3, #1
 8003be8:	464a      	mov	r2, r9
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	f43f ae38 	beq.w	8003866 <_printf_float+0xc2>
 8003bf6:	f108 0801 	add.w	r8, r8, #1
 8003bfa:	68e3      	ldr	r3, [r4, #12]
 8003bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bfe:	1a5b      	subs	r3, r3, r1
 8003c00:	4543      	cmp	r3, r8
 8003c02:	dcf0      	bgt.n	8003be6 <_printf_float+0x442>
 8003c04:	e6fa      	b.n	80039fc <_printf_float+0x258>
 8003c06:	f04f 0800 	mov.w	r8, #0
 8003c0a:	f104 0919 	add.w	r9, r4, #25
 8003c0e:	e7f4      	b.n	8003bfa <_printf_float+0x456>

08003c10 <_printf_common>:
 8003c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	4616      	mov	r6, r2
 8003c16:	4699      	mov	r9, r3
 8003c18:	688a      	ldr	r2, [r1, #8]
 8003c1a:	690b      	ldr	r3, [r1, #16]
 8003c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bfb8      	it	lt
 8003c24:	4613      	movlt	r3, r2
 8003c26:	6033      	str	r3, [r6, #0]
 8003c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c2c:	4607      	mov	r7, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	b10a      	cbz	r2, 8003c36 <_printf_common+0x26>
 8003c32:	3301      	adds	r3, #1
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	0699      	lsls	r1, r3, #26
 8003c3a:	bf42      	ittt	mi
 8003c3c:	6833      	ldrmi	r3, [r6, #0]
 8003c3e:	3302      	addmi	r3, #2
 8003c40:	6033      	strmi	r3, [r6, #0]
 8003c42:	6825      	ldr	r5, [r4, #0]
 8003c44:	f015 0506 	ands.w	r5, r5, #6
 8003c48:	d106      	bne.n	8003c58 <_printf_common+0x48>
 8003c4a:	f104 0a19 	add.w	sl, r4, #25
 8003c4e:	68e3      	ldr	r3, [r4, #12]
 8003c50:	6832      	ldr	r2, [r6, #0]
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	42ab      	cmp	r3, r5
 8003c56:	dc26      	bgt.n	8003ca6 <_printf_common+0x96>
 8003c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c5c:	1e13      	subs	r3, r2, #0
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	bf18      	it	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	0692      	lsls	r2, r2, #26
 8003c66:	d42b      	bmi.n	8003cc0 <_printf_common+0xb0>
 8003c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	4638      	mov	r0, r7
 8003c70:	47c0      	blx	r8
 8003c72:	3001      	adds	r0, #1
 8003c74:	d01e      	beq.n	8003cb4 <_printf_common+0xa4>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	68e5      	ldr	r5, [r4, #12]
 8003c7a:	6832      	ldr	r2, [r6, #0]
 8003c7c:	f003 0306 	and.w	r3, r3, #6
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	bf08      	it	eq
 8003c84:	1aad      	subeq	r5, r5, r2
 8003c86:	68a3      	ldr	r3, [r4, #8]
 8003c88:	6922      	ldr	r2, [r4, #16]
 8003c8a:	bf0c      	ite	eq
 8003c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c90:	2500      	movne	r5, #0
 8003c92:	4293      	cmp	r3, r2
 8003c94:	bfc4      	itt	gt
 8003c96:	1a9b      	subgt	r3, r3, r2
 8003c98:	18ed      	addgt	r5, r5, r3
 8003c9a:	2600      	movs	r6, #0
 8003c9c:	341a      	adds	r4, #26
 8003c9e:	42b5      	cmp	r5, r6
 8003ca0:	d11a      	bne.n	8003cd8 <_printf_common+0xc8>
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	e008      	b.n	8003cb8 <_printf_common+0xa8>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4652      	mov	r2, sl
 8003caa:	4649      	mov	r1, r9
 8003cac:	4638      	mov	r0, r7
 8003cae:	47c0      	blx	r8
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d103      	bne.n	8003cbc <_printf_common+0xac>
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cbc:	3501      	adds	r5, #1
 8003cbe:	e7c6      	b.n	8003c4e <_printf_common+0x3e>
 8003cc0:	18e1      	adds	r1, r4, r3
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	2030      	movs	r0, #48	; 0x30
 8003cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cca:	4422      	add	r2, r4
 8003ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	e7c7      	b.n	8003c68 <_printf_common+0x58>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4622      	mov	r2, r4
 8003cdc:	4649      	mov	r1, r9
 8003cde:	4638      	mov	r0, r7
 8003ce0:	47c0      	blx	r8
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d0e6      	beq.n	8003cb4 <_printf_common+0xa4>
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7d9      	b.n	8003c9e <_printf_common+0x8e>
	...

08003cec <_printf_i>:
 8003cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	7e0f      	ldrb	r7, [r1, #24]
 8003cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cf4:	2f78      	cmp	r7, #120	; 0x78
 8003cf6:	4691      	mov	r9, r2
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	469a      	mov	sl, r3
 8003cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d02:	d807      	bhi.n	8003d14 <_printf_i+0x28>
 8003d04:	2f62      	cmp	r7, #98	; 0x62
 8003d06:	d80a      	bhi.n	8003d1e <_printf_i+0x32>
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	f000 80d8 	beq.w	8003ebe <_printf_i+0x1d2>
 8003d0e:	2f58      	cmp	r7, #88	; 0x58
 8003d10:	f000 80a3 	beq.w	8003e5a <_printf_i+0x16e>
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d1c:	e03a      	b.n	8003d94 <_printf_i+0xa8>
 8003d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d22:	2b15      	cmp	r3, #21
 8003d24:	d8f6      	bhi.n	8003d14 <_printf_i+0x28>
 8003d26:	a101      	add	r1, pc, #4	; (adr r1, 8003d2c <_printf_i+0x40>)
 8003d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	08003d99 	.word	0x08003d99
 8003d34:	08003d15 	.word	0x08003d15
 8003d38:	08003d15 	.word	0x08003d15
 8003d3c:	08003d15 	.word	0x08003d15
 8003d40:	08003d15 	.word	0x08003d15
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003d15 	.word	0x08003d15
 8003d4c:	08003d15 	.word	0x08003d15
 8003d50:	08003d15 	.word	0x08003d15
 8003d54:	08003d15 	.word	0x08003d15
 8003d58:	08003ea5 	.word	0x08003ea5
 8003d5c:	08003dc9 	.word	0x08003dc9
 8003d60:	08003e87 	.word	0x08003e87
 8003d64:	08003d15 	.word	0x08003d15
 8003d68:	08003d15 	.word	0x08003d15
 8003d6c:	08003ec7 	.word	0x08003ec7
 8003d70:	08003d15 	.word	0x08003d15
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003d15 	.word	0x08003d15
 8003d7c:	08003d15 	.word	0x08003d15
 8003d80:	08003e8f 	.word	0x08003e8f
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	1d1a      	adds	r2, r3, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	602a      	str	r2, [r5, #0]
 8003d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0a3      	b.n	8003ee0 <_printf_i+0x1f4>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	6829      	ldr	r1, [r5, #0]
 8003d9c:	0606      	lsls	r6, r0, #24
 8003d9e:	f101 0304 	add.w	r3, r1, #4
 8003da2:	d50a      	bpl.n	8003dba <_printf_i+0xce>
 8003da4:	680e      	ldr	r6, [r1, #0]
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	da03      	bge.n	8003db4 <_printf_i+0xc8>
 8003dac:	232d      	movs	r3, #45	; 0x2d
 8003dae:	4276      	negs	r6, r6
 8003db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db4:	485e      	ldr	r0, [pc, #376]	; (8003f30 <_printf_i+0x244>)
 8003db6:	230a      	movs	r3, #10
 8003db8:	e019      	b.n	8003dee <_printf_i+0x102>
 8003dba:	680e      	ldr	r6, [r1, #0]
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dc2:	bf18      	it	ne
 8003dc4:	b236      	sxthne	r6, r6
 8003dc6:	e7ef      	b.n	8003da8 <_printf_i+0xbc>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	6820      	ldr	r0, [r4, #0]
 8003dcc:	1d19      	adds	r1, r3, #4
 8003dce:	6029      	str	r1, [r5, #0]
 8003dd0:	0601      	lsls	r1, r0, #24
 8003dd2:	d501      	bpl.n	8003dd8 <_printf_i+0xec>
 8003dd4:	681e      	ldr	r6, [r3, #0]
 8003dd6:	e002      	b.n	8003dde <_printf_i+0xf2>
 8003dd8:	0646      	lsls	r6, r0, #25
 8003dda:	d5fb      	bpl.n	8003dd4 <_printf_i+0xe8>
 8003ddc:	881e      	ldrh	r6, [r3, #0]
 8003dde:	4854      	ldr	r0, [pc, #336]	; (8003f30 <_printf_i+0x244>)
 8003de0:	2f6f      	cmp	r7, #111	; 0x6f
 8003de2:	bf0c      	ite	eq
 8003de4:	2308      	moveq	r3, #8
 8003de6:	230a      	movne	r3, #10
 8003de8:	2100      	movs	r1, #0
 8003dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dee:	6865      	ldr	r5, [r4, #4]
 8003df0:	60a5      	str	r5, [r4, #8]
 8003df2:	2d00      	cmp	r5, #0
 8003df4:	bfa2      	ittt	ge
 8003df6:	6821      	ldrge	r1, [r4, #0]
 8003df8:	f021 0104 	bicge.w	r1, r1, #4
 8003dfc:	6021      	strge	r1, [r4, #0]
 8003dfe:	b90e      	cbnz	r6, 8003e04 <_printf_i+0x118>
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	d04d      	beq.n	8003ea0 <_printf_i+0x1b4>
 8003e04:	4615      	mov	r5, r2
 8003e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e0e:	5dc7      	ldrb	r7, [r0, r7]
 8003e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e14:	4637      	mov	r7, r6
 8003e16:	42bb      	cmp	r3, r7
 8003e18:	460e      	mov	r6, r1
 8003e1a:	d9f4      	bls.n	8003e06 <_printf_i+0x11a>
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d10b      	bne.n	8003e38 <_printf_i+0x14c>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	07de      	lsls	r6, r3, #31
 8003e24:	d508      	bpl.n	8003e38 <_printf_i+0x14c>
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	6861      	ldr	r1, [r4, #4]
 8003e2a:	4299      	cmp	r1, r3
 8003e2c:	bfde      	ittt	le
 8003e2e:	2330      	movle	r3, #48	; 0x30
 8003e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e38:	1b52      	subs	r2, r2, r5
 8003e3a:	6122      	str	r2, [r4, #16]
 8003e3c:	f8cd a000 	str.w	sl, [sp]
 8003e40:	464b      	mov	r3, r9
 8003e42:	aa03      	add	r2, sp, #12
 8003e44:	4621      	mov	r1, r4
 8003e46:	4640      	mov	r0, r8
 8003e48:	f7ff fee2 	bl	8003c10 <_printf_common>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d14c      	bne.n	8003eea <_printf_i+0x1fe>
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	b004      	add	sp, #16
 8003e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5a:	4835      	ldr	r0, [pc, #212]	; (8003f30 <_printf_i+0x244>)
 8003e5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e60:	6829      	ldr	r1, [r5, #0]
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e68:	6029      	str	r1, [r5, #0]
 8003e6a:	061d      	lsls	r5, r3, #24
 8003e6c:	d514      	bpl.n	8003e98 <_printf_i+0x1ac>
 8003e6e:	07df      	lsls	r7, r3, #31
 8003e70:	bf44      	itt	mi
 8003e72:	f043 0320 	orrmi.w	r3, r3, #32
 8003e76:	6023      	strmi	r3, [r4, #0]
 8003e78:	b91e      	cbnz	r6, 8003e82 <_printf_i+0x196>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	f023 0320 	bic.w	r3, r3, #32
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	2310      	movs	r3, #16
 8003e84:	e7b0      	b.n	8003de8 <_printf_i+0xfc>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	2378      	movs	r3, #120	; 0x78
 8003e90:	4828      	ldr	r0, [pc, #160]	; (8003f34 <_printf_i+0x248>)
 8003e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e96:	e7e3      	b.n	8003e60 <_printf_i+0x174>
 8003e98:	0659      	lsls	r1, r3, #25
 8003e9a:	bf48      	it	mi
 8003e9c:	b2b6      	uxthmi	r6, r6
 8003e9e:	e7e6      	b.n	8003e6e <_printf_i+0x182>
 8003ea0:	4615      	mov	r5, r2
 8003ea2:	e7bb      	b.n	8003e1c <_printf_i+0x130>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	6826      	ldr	r6, [r4, #0]
 8003ea8:	6961      	ldr	r1, [r4, #20]
 8003eaa:	1d18      	adds	r0, r3, #4
 8003eac:	6028      	str	r0, [r5, #0]
 8003eae:	0635      	lsls	r5, r6, #24
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	d501      	bpl.n	8003eb8 <_printf_i+0x1cc>
 8003eb4:	6019      	str	r1, [r3, #0]
 8003eb6:	e002      	b.n	8003ebe <_printf_i+0x1d2>
 8003eb8:	0670      	lsls	r0, r6, #25
 8003eba:	d5fb      	bpl.n	8003eb4 <_printf_i+0x1c8>
 8003ebc:	8019      	strh	r1, [r3, #0]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	6123      	str	r3, [r4, #16]
 8003ec2:	4615      	mov	r5, r2
 8003ec4:	e7ba      	b.n	8003e3c <_printf_i+0x150>
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	602a      	str	r2, [r5, #0]
 8003ecc:	681d      	ldr	r5, [r3, #0]
 8003ece:	6862      	ldr	r2, [r4, #4]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f7fc f98c 	bl	80001f0 <memchr>
 8003ed8:	b108      	cbz	r0, 8003ede <_printf_i+0x1f2>
 8003eda:	1b40      	subs	r0, r0, r5
 8003edc:	6060      	str	r0, [r4, #4]
 8003ede:	6863      	ldr	r3, [r4, #4]
 8003ee0:	6123      	str	r3, [r4, #16]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee8:	e7a8      	b.n	8003e3c <_printf_i+0x150>
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	462a      	mov	r2, r5
 8003eee:	4649      	mov	r1, r9
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	47d0      	blx	sl
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d0ab      	beq.n	8003e50 <_printf_i+0x164>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	079b      	lsls	r3, r3, #30
 8003efc:	d413      	bmi.n	8003f26 <_printf_i+0x23a>
 8003efe:	68e0      	ldr	r0, [r4, #12]
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	4298      	cmp	r0, r3
 8003f04:	bfb8      	it	lt
 8003f06:	4618      	movlt	r0, r3
 8003f08:	e7a4      	b.n	8003e54 <_printf_i+0x168>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4632      	mov	r2, r6
 8003f0e:	4649      	mov	r1, r9
 8003f10:	4640      	mov	r0, r8
 8003f12:	47d0      	blx	sl
 8003f14:	3001      	adds	r0, #1
 8003f16:	d09b      	beq.n	8003e50 <_printf_i+0x164>
 8003f18:	3501      	adds	r5, #1
 8003f1a:	68e3      	ldr	r3, [r4, #12]
 8003f1c:	9903      	ldr	r1, [sp, #12]
 8003f1e:	1a5b      	subs	r3, r3, r1
 8003f20:	42ab      	cmp	r3, r5
 8003f22:	dcf2      	bgt.n	8003f0a <_printf_i+0x21e>
 8003f24:	e7eb      	b.n	8003efe <_printf_i+0x212>
 8003f26:	2500      	movs	r5, #0
 8003f28:	f104 0619 	add.w	r6, r4, #25
 8003f2c:	e7f5      	b.n	8003f1a <_printf_i+0x22e>
 8003f2e:	bf00      	nop
 8003f30:	08006f9e 	.word	0x08006f9e
 8003f34:	08006faf 	.word	0x08006faf

08003f38 <quorem>:
 8003f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	6903      	ldr	r3, [r0, #16]
 8003f3e:	690c      	ldr	r4, [r1, #16]
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	4607      	mov	r7, r0
 8003f44:	f2c0 8081 	blt.w	800404a <quorem+0x112>
 8003f48:	3c01      	subs	r4, #1
 8003f4a:	f101 0814 	add.w	r8, r1, #20
 8003f4e:	f100 0514 	add.w	r5, r0, #20
 8003f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f60:	3301      	adds	r3, #1
 8003f62:	429a      	cmp	r2, r3
 8003f64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f70:	d331      	bcc.n	8003fd6 <quorem+0x9e>
 8003f72:	f04f 0e00 	mov.w	lr, #0
 8003f76:	4640      	mov	r0, r8
 8003f78:	46ac      	mov	ip, r5
 8003f7a:	46f2      	mov	sl, lr
 8003f7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f80:	b293      	uxth	r3, r2
 8003f82:	fb06 e303 	mla	r3, r6, r3, lr
 8003f86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	ebaa 0303 	sub.w	r3, sl, r3
 8003f90:	f8dc a000 	ldr.w	sl, [ip]
 8003f94:	0c12      	lsrs	r2, r2, #16
 8003f96:	fa13 f38a 	uxtah	r3, r3, sl
 8003f9a:	fb06 e202 	mla	r2, r6, r2, lr
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	9b00      	ldr	r3, [sp, #0]
 8003fa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003fac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8003fb4:	4581      	cmp	r9, r0
 8003fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fba:	f84c 3b04 	str.w	r3, [ip], #4
 8003fbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003fc2:	d2db      	bcs.n	8003f7c <quorem+0x44>
 8003fc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8003fc8:	b92b      	cbnz	r3, 8003fd6 <quorem+0x9e>
 8003fca:	9b01      	ldr	r3, [sp, #4]
 8003fcc:	3b04      	subs	r3, #4
 8003fce:	429d      	cmp	r5, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	d32e      	bcc.n	8004032 <quorem+0xfa>
 8003fd4:	613c      	str	r4, [r7, #16]
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f001 f8c4 	bl	8005164 <__mcmp>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	db24      	blt.n	800402a <quorem+0xf2>
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f04f 0c00 	mov.w	ip, #0
 8003fe8:	f858 2b04 	ldr.w	r2, [r8], #4
 8003fec:	f8d0 e000 	ldr.w	lr, [r0]
 8003ff0:	b293      	uxth	r3, r2
 8003ff2:	ebac 0303 	sub.w	r3, ip, r3
 8003ff6:	0c12      	lsrs	r2, r2, #16
 8003ff8:	fa13 f38e 	uxtah	r3, r3, lr
 8003ffc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004004:	b29b      	uxth	r3, r3
 8004006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800400a:	45c1      	cmp	r9, r8
 800400c:	f840 3b04 	str.w	r3, [r0], #4
 8004010:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004014:	d2e8      	bcs.n	8003fe8 <quorem+0xb0>
 8004016:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800401a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800401e:	b922      	cbnz	r2, 800402a <quorem+0xf2>
 8004020:	3b04      	subs	r3, #4
 8004022:	429d      	cmp	r5, r3
 8004024:	461a      	mov	r2, r3
 8004026:	d30a      	bcc.n	800403e <quorem+0x106>
 8004028:	613c      	str	r4, [r7, #16]
 800402a:	4630      	mov	r0, r6
 800402c:	b003      	add	sp, #12
 800402e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	3b04      	subs	r3, #4
 8004036:	2a00      	cmp	r2, #0
 8004038:	d1cc      	bne.n	8003fd4 <quorem+0x9c>
 800403a:	3c01      	subs	r4, #1
 800403c:	e7c7      	b.n	8003fce <quorem+0x96>
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	3b04      	subs	r3, #4
 8004042:	2a00      	cmp	r2, #0
 8004044:	d1f0      	bne.n	8004028 <quorem+0xf0>
 8004046:	3c01      	subs	r4, #1
 8004048:	e7eb      	b.n	8004022 <quorem+0xea>
 800404a:	2000      	movs	r0, #0
 800404c:	e7ee      	b.n	800402c <quorem+0xf4>
	...

08004050 <_dtoa_r>:
 8004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004054:	ed2d 8b04 	vpush	{d8-d9}
 8004058:	ec57 6b10 	vmov	r6, r7, d0
 800405c:	b093      	sub	sp, #76	; 0x4c
 800405e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004060:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004064:	9106      	str	r1, [sp, #24]
 8004066:	ee10 aa10 	vmov	sl, s0
 800406a:	4604      	mov	r4, r0
 800406c:	9209      	str	r2, [sp, #36]	; 0x24
 800406e:	930c      	str	r3, [sp, #48]	; 0x30
 8004070:	46bb      	mov	fp, r7
 8004072:	b975      	cbnz	r5, 8004092 <_dtoa_r+0x42>
 8004074:	2010      	movs	r0, #16
 8004076:	f000 fddd 	bl	8004c34 <malloc>
 800407a:	4602      	mov	r2, r0
 800407c:	6260      	str	r0, [r4, #36]	; 0x24
 800407e:	b920      	cbnz	r0, 800408a <_dtoa_r+0x3a>
 8004080:	4ba7      	ldr	r3, [pc, #668]	; (8004320 <_dtoa_r+0x2d0>)
 8004082:	21ea      	movs	r1, #234	; 0xea
 8004084:	48a7      	ldr	r0, [pc, #668]	; (8004324 <_dtoa_r+0x2d4>)
 8004086:	f001 fa75 	bl	8005574 <__assert_func>
 800408a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800408e:	6005      	str	r5, [r0, #0]
 8004090:	60c5      	str	r5, [r0, #12]
 8004092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	b151      	cbz	r1, 80040ae <_dtoa_r+0x5e>
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	604a      	str	r2, [r1, #4]
 800409c:	2301      	movs	r3, #1
 800409e:	4093      	lsls	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
 80040a2:	4620      	mov	r0, r4
 80040a4:	f000 fe1c 	bl	8004ce0 <_Bfree>
 80040a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	1e3b      	subs	r3, r7, #0
 80040b0:	bfaa      	itet	ge
 80040b2:	2300      	movge	r3, #0
 80040b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80040b8:	f8c8 3000 	strge.w	r3, [r8]
 80040bc:	4b9a      	ldr	r3, [pc, #616]	; (8004328 <_dtoa_r+0x2d8>)
 80040be:	bfbc      	itt	lt
 80040c0:	2201      	movlt	r2, #1
 80040c2:	f8c8 2000 	strlt.w	r2, [r8]
 80040c6:	ea33 030b 	bics.w	r3, r3, fp
 80040ca:	d11b      	bne.n	8004104 <_dtoa_r+0xb4>
 80040cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040d8:	4333      	orrs	r3, r6
 80040da:	f000 8592 	beq.w	8004c02 <_dtoa_r+0xbb2>
 80040de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040e0:	b963      	cbnz	r3, 80040fc <_dtoa_r+0xac>
 80040e2:	4b92      	ldr	r3, [pc, #584]	; (800432c <_dtoa_r+0x2dc>)
 80040e4:	e022      	b.n	800412c <_dtoa_r+0xdc>
 80040e6:	4b92      	ldr	r3, [pc, #584]	; (8004330 <_dtoa_r+0x2e0>)
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	3308      	adds	r3, #8
 80040ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	9801      	ldr	r0, [sp, #4]
 80040f2:	b013      	add	sp, #76	; 0x4c
 80040f4:	ecbd 8b04 	vpop	{d8-d9}
 80040f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fc:	4b8b      	ldr	r3, [pc, #556]	; (800432c <_dtoa_r+0x2dc>)
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	3303      	adds	r3, #3
 8004102:	e7f3      	b.n	80040ec <_dtoa_r+0x9c>
 8004104:	2200      	movs	r2, #0
 8004106:	2300      	movs	r3, #0
 8004108:	4650      	mov	r0, sl
 800410a:	4659      	mov	r1, fp
 800410c:	f7fc fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004110:	ec4b ab19 	vmov	d9, sl, fp
 8004114:	4680      	mov	r8, r0
 8004116:	b158      	cbz	r0, 8004130 <_dtoa_r+0xe0>
 8004118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800411a:	2301      	movs	r3, #1
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 856b 	beq.w	8004bfc <_dtoa_r+0xbac>
 8004126:	4883      	ldr	r0, [pc, #524]	; (8004334 <_dtoa_r+0x2e4>)
 8004128:	6018      	str	r0, [r3, #0]
 800412a:	1e43      	subs	r3, r0, #1
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	e7df      	b.n	80040f0 <_dtoa_r+0xa0>
 8004130:	ec4b ab10 	vmov	d0, sl, fp
 8004134:	aa10      	add	r2, sp, #64	; 0x40
 8004136:	a911      	add	r1, sp, #68	; 0x44
 8004138:	4620      	mov	r0, r4
 800413a:	f001 f8b9 	bl	80052b0 <__d2b>
 800413e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004142:	ee08 0a10 	vmov	s16, r0
 8004146:	2d00      	cmp	r5, #0
 8004148:	f000 8084 	beq.w	8004254 <_dtoa_r+0x204>
 800414c:	ee19 3a90 	vmov	r3, s19
 8004150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004154:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004158:	4656      	mov	r6, sl
 800415a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800415e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004162:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004166:	4b74      	ldr	r3, [pc, #464]	; (8004338 <_dtoa_r+0x2e8>)
 8004168:	2200      	movs	r2, #0
 800416a:	4630      	mov	r0, r6
 800416c:	4639      	mov	r1, r7
 800416e:	f7fc f893 	bl	8000298 <__aeabi_dsub>
 8004172:	a365      	add	r3, pc, #404	; (adr r3, 8004308 <_dtoa_r+0x2b8>)
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f7fc fa46 	bl	8000608 <__aeabi_dmul>
 800417c:	a364      	add	r3, pc, #400	; (adr r3, 8004310 <_dtoa_r+0x2c0>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f7fc f88b 	bl	800029c <__adddf3>
 8004186:	4606      	mov	r6, r0
 8004188:	4628      	mov	r0, r5
 800418a:	460f      	mov	r7, r1
 800418c:	f7fc f9d2 	bl	8000534 <__aeabi_i2d>
 8004190:	a361      	add	r3, pc, #388	; (adr r3, 8004318 <_dtoa_r+0x2c8>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fc fa37 	bl	8000608 <__aeabi_dmul>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4630      	mov	r0, r6
 80041a0:	4639      	mov	r1, r7
 80041a2:	f7fc f87b 	bl	800029c <__adddf3>
 80041a6:	4606      	mov	r6, r0
 80041a8:	460f      	mov	r7, r1
 80041aa:	f7fc fcdd 	bl	8000b68 <__aeabi_d2iz>
 80041ae:	2200      	movs	r2, #0
 80041b0:	9000      	str	r0, [sp, #0]
 80041b2:	2300      	movs	r3, #0
 80041b4:	4630      	mov	r0, r6
 80041b6:	4639      	mov	r1, r7
 80041b8:	f7fc fc98 	bl	8000aec <__aeabi_dcmplt>
 80041bc:	b150      	cbz	r0, 80041d4 <_dtoa_r+0x184>
 80041be:	9800      	ldr	r0, [sp, #0]
 80041c0:	f7fc f9b8 	bl	8000534 <__aeabi_i2d>
 80041c4:	4632      	mov	r2, r6
 80041c6:	463b      	mov	r3, r7
 80041c8:	f7fc fc86 	bl	8000ad8 <__aeabi_dcmpeq>
 80041cc:	b910      	cbnz	r0, 80041d4 <_dtoa_r+0x184>
 80041ce:	9b00      	ldr	r3, [sp, #0]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	9b00      	ldr	r3, [sp, #0]
 80041d6:	2b16      	cmp	r3, #22
 80041d8:	d85a      	bhi.n	8004290 <_dtoa_r+0x240>
 80041da:	9a00      	ldr	r2, [sp, #0]
 80041dc:	4b57      	ldr	r3, [pc, #348]	; (800433c <_dtoa_r+0x2ec>)
 80041de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	ec51 0b19 	vmov	r0, r1, d9
 80041ea:	f7fc fc7f 	bl	8000aec <__aeabi_dcmplt>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d050      	beq.n	8004294 <_dtoa_r+0x244>
 80041f2:	9b00      	ldr	r3, [sp, #0]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80041fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041fe:	1b5d      	subs	r5, r3, r5
 8004200:	1e6b      	subs	r3, r5, #1
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	bf45      	ittet	mi
 8004206:	f1c5 0301 	rsbmi	r3, r5, #1
 800420a:	9304      	strmi	r3, [sp, #16]
 800420c:	2300      	movpl	r3, #0
 800420e:	2300      	movmi	r3, #0
 8004210:	bf4c      	ite	mi
 8004212:	9305      	strmi	r3, [sp, #20]
 8004214:	9304      	strpl	r3, [sp, #16]
 8004216:	9b00      	ldr	r3, [sp, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db3d      	blt.n	8004298 <_dtoa_r+0x248>
 800421c:	9b05      	ldr	r3, [sp, #20]
 800421e:	9a00      	ldr	r2, [sp, #0]
 8004220:	920a      	str	r2, [sp, #40]	; 0x28
 8004222:	4413      	add	r3, r2
 8004224:	9305      	str	r3, [sp, #20]
 8004226:	2300      	movs	r3, #0
 8004228:	9307      	str	r3, [sp, #28]
 800422a:	9b06      	ldr	r3, [sp, #24]
 800422c:	2b09      	cmp	r3, #9
 800422e:	f200 8089 	bhi.w	8004344 <_dtoa_r+0x2f4>
 8004232:	2b05      	cmp	r3, #5
 8004234:	bfc4      	itt	gt
 8004236:	3b04      	subgt	r3, #4
 8004238:	9306      	strgt	r3, [sp, #24]
 800423a:	9b06      	ldr	r3, [sp, #24]
 800423c:	f1a3 0302 	sub.w	r3, r3, #2
 8004240:	bfcc      	ite	gt
 8004242:	2500      	movgt	r5, #0
 8004244:	2501      	movle	r5, #1
 8004246:	2b03      	cmp	r3, #3
 8004248:	f200 8087 	bhi.w	800435a <_dtoa_r+0x30a>
 800424c:	e8df f003 	tbb	[pc, r3]
 8004250:	59383a2d 	.word	0x59383a2d
 8004254:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004258:	441d      	add	r5, r3
 800425a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800425e:	2b20      	cmp	r3, #32
 8004260:	bfc1      	itttt	gt
 8004262:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004266:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800426a:	fa0b f303 	lslgt.w	r3, fp, r3
 800426e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004272:	bfda      	itte	le
 8004274:	f1c3 0320 	rsble	r3, r3, #32
 8004278:	fa06 f003 	lslle.w	r0, r6, r3
 800427c:	4318      	orrgt	r0, r3
 800427e:	f7fc f949 	bl	8000514 <__aeabi_ui2d>
 8004282:	2301      	movs	r3, #1
 8004284:	4606      	mov	r6, r0
 8004286:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800428a:	3d01      	subs	r5, #1
 800428c:	930e      	str	r3, [sp, #56]	; 0x38
 800428e:	e76a      	b.n	8004166 <_dtoa_r+0x116>
 8004290:	2301      	movs	r3, #1
 8004292:	e7b2      	b.n	80041fa <_dtoa_r+0x1aa>
 8004294:	900b      	str	r0, [sp, #44]	; 0x2c
 8004296:	e7b1      	b.n	80041fc <_dtoa_r+0x1ac>
 8004298:	9b04      	ldr	r3, [sp, #16]
 800429a:	9a00      	ldr	r2, [sp, #0]
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	9304      	str	r3, [sp, #16]
 80042a0:	4253      	negs	r3, r2
 80042a2:	9307      	str	r3, [sp, #28]
 80042a4:	2300      	movs	r3, #0
 80042a6:	930a      	str	r3, [sp, #40]	; 0x28
 80042a8:	e7bf      	b.n	800422a <_dtoa_r+0x1da>
 80042aa:	2300      	movs	r3, #0
 80042ac:	9308      	str	r3, [sp, #32]
 80042ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dc55      	bgt.n	8004360 <_dtoa_r+0x310>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80042ba:	461a      	mov	r2, r3
 80042bc:	9209      	str	r2, [sp, #36]	; 0x24
 80042be:	e00c      	b.n	80042da <_dtoa_r+0x28a>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e7f3      	b.n	80042ac <_dtoa_r+0x25c>
 80042c4:	2300      	movs	r3, #0
 80042c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c8:	9308      	str	r3, [sp, #32]
 80042ca:	9b00      	ldr	r3, [sp, #0]
 80042cc:	4413      	add	r3, r2
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	9303      	str	r3, [sp, #12]
 80042d6:	bfb8      	it	lt
 80042d8:	2301      	movlt	r3, #1
 80042da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80042dc:	2200      	movs	r2, #0
 80042de:	6042      	str	r2, [r0, #4]
 80042e0:	2204      	movs	r2, #4
 80042e2:	f102 0614 	add.w	r6, r2, #20
 80042e6:	429e      	cmp	r6, r3
 80042e8:	6841      	ldr	r1, [r0, #4]
 80042ea:	d93d      	bls.n	8004368 <_dtoa_r+0x318>
 80042ec:	4620      	mov	r0, r4
 80042ee:	f000 fcb7 	bl	8004c60 <_Balloc>
 80042f2:	9001      	str	r0, [sp, #4]
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d13b      	bne.n	8004370 <_dtoa_r+0x320>
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <_dtoa_r+0x2f0>)
 80042fa:	4602      	mov	r2, r0
 80042fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004300:	e6c0      	b.n	8004084 <_dtoa_r+0x34>
 8004302:	2301      	movs	r3, #1
 8004304:	e7df      	b.n	80042c6 <_dtoa_r+0x276>
 8004306:	bf00      	nop
 8004308:	636f4361 	.word	0x636f4361
 800430c:	3fd287a7 	.word	0x3fd287a7
 8004310:	8b60c8b3 	.word	0x8b60c8b3
 8004314:	3fc68a28 	.word	0x3fc68a28
 8004318:	509f79fb 	.word	0x509f79fb
 800431c:	3fd34413 	.word	0x3fd34413
 8004320:	08006fcd 	.word	0x08006fcd
 8004324:	08006fe4 	.word	0x08006fe4
 8004328:	7ff00000 	.word	0x7ff00000
 800432c:	08006fc9 	.word	0x08006fc9
 8004330:	08006fc0 	.word	0x08006fc0
 8004334:	08006f9d 	.word	0x08006f9d
 8004338:	3ff80000 	.word	0x3ff80000
 800433c:	080070d8 	.word	0x080070d8
 8004340:	0800703f 	.word	0x0800703f
 8004344:	2501      	movs	r5, #1
 8004346:	2300      	movs	r3, #0
 8004348:	9306      	str	r3, [sp, #24]
 800434a:	9508      	str	r5, [sp, #32]
 800434c:	f04f 33ff 	mov.w	r3, #4294967295
 8004350:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004354:	2200      	movs	r2, #0
 8004356:	2312      	movs	r3, #18
 8004358:	e7b0      	b.n	80042bc <_dtoa_r+0x26c>
 800435a:	2301      	movs	r3, #1
 800435c:	9308      	str	r3, [sp, #32]
 800435e:	e7f5      	b.n	800434c <_dtoa_r+0x2fc>
 8004360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004362:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004366:	e7b8      	b.n	80042da <_dtoa_r+0x28a>
 8004368:	3101      	adds	r1, #1
 800436a:	6041      	str	r1, [r0, #4]
 800436c:	0052      	lsls	r2, r2, #1
 800436e:	e7b8      	b.n	80042e2 <_dtoa_r+0x292>
 8004370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004372:	9a01      	ldr	r2, [sp, #4]
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	9b03      	ldr	r3, [sp, #12]
 8004378:	2b0e      	cmp	r3, #14
 800437a:	f200 809d 	bhi.w	80044b8 <_dtoa_r+0x468>
 800437e:	2d00      	cmp	r5, #0
 8004380:	f000 809a 	beq.w	80044b8 <_dtoa_r+0x468>
 8004384:	9b00      	ldr	r3, [sp, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	dd32      	ble.n	80043f0 <_dtoa_r+0x3a0>
 800438a:	4ab7      	ldr	r2, [pc, #732]	; (8004668 <_dtoa_r+0x618>)
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004394:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004398:	9b00      	ldr	r3, [sp, #0]
 800439a:	05d8      	lsls	r0, r3, #23
 800439c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80043a0:	d516      	bpl.n	80043d0 <_dtoa_r+0x380>
 80043a2:	4bb2      	ldr	r3, [pc, #712]	; (800466c <_dtoa_r+0x61c>)
 80043a4:	ec51 0b19 	vmov	r0, r1, d9
 80043a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043ac:	f7fc fa56 	bl	800085c <__aeabi_ddiv>
 80043b0:	f007 070f 	and.w	r7, r7, #15
 80043b4:	4682      	mov	sl, r0
 80043b6:	468b      	mov	fp, r1
 80043b8:	2503      	movs	r5, #3
 80043ba:	4eac      	ldr	r6, [pc, #688]	; (800466c <_dtoa_r+0x61c>)
 80043bc:	b957      	cbnz	r7, 80043d4 <_dtoa_r+0x384>
 80043be:	4642      	mov	r2, r8
 80043c0:	464b      	mov	r3, r9
 80043c2:	4650      	mov	r0, sl
 80043c4:	4659      	mov	r1, fp
 80043c6:	f7fc fa49 	bl	800085c <__aeabi_ddiv>
 80043ca:	4682      	mov	sl, r0
 80043cc:	468b      	mov	fp, r1
 80043ce:	e028      	b.n	8004422 <_dtoa_r+0x3d2>
 80043d0:	2502      	movs	r5, #2
 80043d2:	e7f2      	b.n	80043ba <_dtoa_r+0x36a>
 80043d4:	07f9      	lsls	r1, r7, #31
 80043d6:	d508      	bpl.n	80043ea <_dtoa_r+0x39a>
 80043d8:	4640      	mov	r0, r8
 80043da:	4649      	mov	r1, r9
 80043dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80043e0:	f7fc f912 	bl	8000608 <__aeabi_dmul>
 80043e4:	3501      	adds	r5, #1
 80043e6:	4680      	mov	r8, r0
 80043e8:	4689      	mov	r9, r1
 80043ea:	107f      	asrs	r7, r7, #1
 80043ec:	3608      	adds	r6, #8
 80043ee:	e7e5      	b.n	80043bc <_dtoa_r+0x36c>
 80043f0:	f000 809b 	beq.w	800452a <_dtoa_r+0x4da>
 80043f4:	9b00      	ldr	r3, [sp, #0]
 80043f6:	4f9d      	ldr	r7, [pc, #628]	; (800466c <_dtoa_r+0x61c>)
 80043f8:	425e      	negs	r6, r3
 80043fa:	4b9b      	ldr	r3, [pc, #620]	; (8004668 <_dtoa_r+0x618>)
 80043fc:	f006 020f 	and.w	r2, r6, #15
 8004400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	ec51 0b19 	vmov	r0, r1, d9
 800440c:	f7fc f8fc 	bl	8000608 <__aeabi_dmul>
 8004410:	1136      	asrs	r6, r6, #4
 8004412:	4682      	mov	sl, r0
 8004414:	468b      	mov	fp, r1
 8004416:	2300      	movs	r3, #0
 8004418:	2502      	movs	r5, #2
 800441a:	2e00      	cmp	r6, #0
 800441c:	d17a      	bne.n	8004514 <_dtoa_r+0x4c4>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1d3      	bne.n	80043ca <_dtoa_r+0x37a>
 8004422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8082 	beq.w	800452e <_dtoa_r+0x4de>
 800442a:	4b91      	ldr	r3, [pc, #580]	; (8004670 <_dtoa_r+0x620>)
 800442c:	2200      	movs	r2, #0
 800442e:	4650      	mov	r0, sl
 8004430:	4659      	mov	r1, fp
 8004432:	f7fc fb5b 	bl	8000aec <__aeabi_dcmplt>
 8004436:	2800      	cmp	r0, #0
 8004438:	d079      	beq.n	800452e <_dtoa_r+0x4de>
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d076      	beq.n	800452e <_dtoa_r+0x4de>
 8004440:	9b02      	ldr	r3, [sp, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	dd36      	ble.n	80044b4 <_dtoa_r+0x464>
 8004446:	9b00      	ldr	r3, [sp, #0]
 8004448:	4650      	mov	r0, sl
 800444a:	4659      	mov	r1, fp
 800444c:	1e5f      	subs	r7, r3, #1
 800444e:	2200      	movs	r2, #0
 8004450:	4b88      	ldr	r3, [pc, #544]	; (8004674 <_dtoa_r+0x624>)
 8004452:	f7fc f8d9 	bl	8000608 <__aeabi_dmul>
 8004456:	9e02      	ldr	r6, [sp, #8]
 8004458:	4682      	mov	sl, r0
 800445a:	468b      	mov	fp, r1
 800445c:	3501      	adds	r5, #1
 800445e:	4628      	mov	r0, r5
 8004460:	f7fc f868 	bl	8000534 <__aeabi_i2d>
 8004464:	4652      	mov	r2, sl
 8004466:	465b      	mov	r3, fp
 8004468:	f7fc f8ce 	bl	8000608 <__aeabi_dmul>
 800446c:	4b82      	ldr	r3, [pc, #520]	; (8004678 <_dtoa_r+0x628>)
 800446e:	2200      	movs	r2, #0
 8004470:	f7fb ff14 	bl	800029c <__adddf3>
 8004474:	46d0      	mov	r8, sl
 8004476:	46d9      	mov	r9, fp
 8004478:	4682      	mov	sl, r0
 800447a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800447e:	2e00      	cmp	r6, #0
 8004480:	d158      	bne.n	8004534 <_dtoa_r+0x4e4>
 8004482:	4b7e      	ldr	r3, [pc, #504]	; (800467c <_dtoa_r+0x62c>)
 8004484:	2200      	movs	r2, #0
 8004486:	4640      	mov	r0, r8
 8004488:	4649      	mov	r1, r9
 800448a:	f7fb ff05 	bl	8000298 <__aeabi_dsub>
 800448e:	4652      	mov	r2, sl
 8004490:	465b      	mov	r3, fp
 8004492:	4680      	mov	r8, r0
 8004494:	4689      	mov	r9, r1
 8004496:	f7fc fb47 	bl	8000b28 <__aeabi_dcmpgt>
 800449a:	2800      	cmp	r0, #0
 800449c:	f040 8295 	bne.w	80049ca <_dtoa_r+0x97a>
 80044a0:	4652      	mov	r2, sl
 80044a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80044a6:	4640      	mov	r0, r8
 80044a8:	4649      	mov	r1, r9
 80044aa:	f7fc fb1f 	bl	8000aec <__aeabi_dcmplt>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	f040 8289 	bne.w	80049c6 <_dtoa_r+0x976>
 80044b4:	ec5b ab19 	vmov	sl, fp, d9
 80044b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f2c0 8148 	blt.w	8004750 <_dtoa_r+0x700>
 80044c0:	9a00      	ldr	r2, [sp, #0]
 80044c2:	2a0e      	cmp	r2, #14
 80044c4:	f300 8144 	bgt.w	8004750 <_dtoa_r+0x700>
 80044c8:	4b67      	ldr	r3, [pc, #412]	; (8004668 <_dtoa_r+0x618>)
 80044ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f280 80d5 	bge.w	8004684 <_dtoa_r+0x634>
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f300 80d1 	bgt.w	8004684 <_dtoa_r+0x634>
 80044e2:	f040 826f 	bne.w	80049c4 <_dtoa_r+0x974>
 80044e6:	4b65      	ldr	r3, [pc, #404]	; (800467c <_dtoa_r+0x62c>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	4640      	mov	r0, r8
 80044ec:	4649      	mov	r1, r9
 80044ee:	f7fc f88b 	bl	8000608 <__aeabi_dmul>
 80044f2:	4652      	mov	r2, sl
 80044f4:	465b      	mov	r3, fp
 80044f6:	f7fc fb0d 	bl	8000b14 <__aeabi_dcmpge>
 80044fa:	9e03      	ldr	r6, [sp, #12]
 80044fc:	4637      	mov	r7, r6
 80044fe:	2800      	cmp	r0, #0
 8004500:	f040 8245 	bne.w	800498e <_dtoa_r+0x93e>
 8004504:	9d01      	ldr	r5, [sp, #4]
 8004506:	2331      	movs	r3, #49	; 0x31
 8004508:	f805 3b01 	strb.w	r3, [r5], #1
 800450c:	9b00      	ldr	r3, [sp, #0]
 800450e:	3301      	adds	r3, #1
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	e240      	b.n	8004996 <_dtoa_r+0x946>
 8004514:	07f2      	lsls	r2, r6, #31
 8004516:	d505      	bpl.n	8004524 <_dtoa_r+0x4d4>
 8004518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800451c:	f7fc f874 	bl	8000608 <__aeabi_dmul>
 8004520:	3501      	adds	r5, #1
 8004522:	2301      	movs	r3, #1
 8004524:	1076      	asrs	r6, r6, #1
 8004526:	3708      	adds	r7, #8
 8004528:	e777      	b.n	800441a <_dtoa_r+0x3ca>
 800452a:	2502      	movs	r5, #2
 800452c:	e779      	b.n	8004422 <_dtoa_r+0x3d2>
 800452e:	9f00      	ldr	r7, [sp, #0]
 8004530:	9e03      	ldr	r6, [sp, #12]
 8004532:	e794      	b.n	800445e <_dtoa_r+0x40e>
 8004534:	9901      	ldr	r1, [sp, #4]
 8004536:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <_dtoa_r+0x618>)
 8004538:	4431      	add	r1, r6
 800453a:	910d      	str	r1, [sp, #52]	; 0x34
 800453c:	9908      	ldr	r1, [sp, #32]
 800453e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004542:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004546:	2900      	cmp	r1, #0
 8004548:	d043      	beq.n	80045d2 <_dtoa_r+0x582>
 800454a:	494d      	ldr	r1, [pc, #308]	; (8004680 <_dtoa_r+0x630>)
 800454c:	2000      	movs	r0, #0
 800454e:	f7fc f985 	bl	800085c <__aeabi_ddiv>
 8004552:	4652      	mov	r2, sl
 8004554:	465b      	mov	r3, fp
 8004556:	f7fb fe9f 	bl	8000298 <__aeabi_dsub>
 800455a:	9d01      	ldr	r5, [sp, #4]
 800455c:	4682      	mov	sl, r0
 800455e:	468b      	mov	fp, r1
 8004560:	4649      	mov	r1, r9
 8004562:	4640      	mov	r0, r8
 8004564:	f7fc fb00 	bl	8000b68 <__aeabi_d2iz>
 8004568:	4606      	mov	r6, r0
 800456a:	f7fb ffe3 	bl	8000534 <__aeabi_i2d>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4640      	mov	r0, r8
 8004574:	4649      	mov	r1, r9
 8004576:	f7fb fe8f 	bl	8000298 <__aeabi_dsub>
 800457a:	3630      	adds	r6, #48	; 0x30
 800457c:	f805 6b01 	strb.w	r6, [r5], #1
 8004580:	4652      	mov	r2, sl
 8004582:	465b      	mov	r3, fp
 8004584:	4680      	mov	r8, r0
 8004586:	4689      	mov	r9, r1
 8004588:	f7fc fab0 	bl	8000aec <__aeabi_dcmplt>
 800458c:	2800      	cmp	r0, #0
 800458e:	d163      	bne.n	8004658 <_dtoa_r+0x608>
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	4936      	ldr	r1, [pc, #216]	; (8004670 <_dtoa_r+0x620>)
 8004596:	2000      	movs	r0, #0
 8004598:	f7fb fe7e 	bl	8000298 <__aeabi_dsub>
 800459c:	4652      	mov	r2, sl
 800459e:	465b      	mov	r3, fp
 80045a0:	f7fc faa4 	bl	8000aec <__aeabi_dcmplt>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	f040 80b5 	bne.w	8004714 <_dtoa_r+0x6c4>
 80045aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ac:	429d      	cmp	r5, r3
 80045ae:	d081      	beq.n	80044b4 <_dtoa_r+0x464>
 80045b0:	4b30      	ldr	r3, [pc, #192]	; (8004674 <_dtoa_r+0x624>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	4650      	mov	r0, sl
 80045b6:	4659      	mov	r1, fp
 80045b8:	f7fc f826 	bl	8000608 <__aeabi_dmul>
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <_dtoa_r+0x624>)
 80045be:	4682      	mov	sl, r0
 80045c0:	468b      	mov	fp, r1
 80045c2:	4640      	mov	r0, r8
 80045c4:	4649      	mov	r1, r9
 80045c6:	2200      	movs	r2, #0
 80045c8:	f7fc f81e 	bl	8000608 <__aeabi_dmul>
 80045cc:	4680      	mov	r8, r0
 80045ce:	4689      	mov	r9, r1
 80045d0:	e7c6      	b.n	8004560 <_dtoa_r+0x510>
 80045d2:	4650      	mov	r0, sl
 80045d4:	4659      	mov	r1, fp
 80045d6:	f7fc f817 	bl	8000608 <__aeabi_dmul>
 80045da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045dc:	9d01      	ldr	r5, [sp, #4]
 80045de:	930f      	str	r3, [sp, #60]	; 0x3c
 80045e0:	4682      	mov	sl, r0
 80045e2:	468b      	mov	fp, r1
 80045e4:	4649      	mov	r1, r9
 80045e6:	4640      	mov	r0, r8
 80045e8:	f7fc fabe 	bl	8000b68 <__aeabi_d2iz>
 80045ec:	4606      	mov	r6, r0
 80045ee:	f7fb ffa1 	bl	8000534 <__aeabi_i2d>
 80045f2:	3630      	adds	r6, #48	; 0x30
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4640      	mov	r0, r8
 80045fa:	4649      	mov	r1, r9
 80045fc:	f7fb fe4c 	bl	8000298 <__aeabi_dsub>
 8004600:	f805 6b01 	strb.w	r6, [r5], #1
 8004604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004606:	429d      	cmp	r5, r3
 8004608:	4680      	mov	r8, r0
 800460a:	4689      	mov	r9, r1
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	d124      	bne.n	800465c <_dtoa_r+0x60c>
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <_dtoa_r+0x630>)
 8004614:	4650      	mov	r0, sl
 8004616:	4659      	mov	r1, fp
 8004618:	f7fb fe40 	bl	800029c <__adddf3>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4640      	mov	r0, r8
 8004622:	4649      	mov	r1, r9
 8004624:	f7fc fa80 	bl	8000b28 <__aeabi_dcmpgt>
 8004628:	2800      	cmp	r0, #0
 800462a:	d173      	bne.n	8004714 <_dtoa_r+0x6c4>
 800462c:	4652      	mov	r2, sl
 800462e:	465b      	mov	r3, fp
 8004630:	4913      	ldr	r1, [pc, #76]	; (8004680 <_dtoa_r+0x630>)
 8004632:	2000      	movs	r0, #0
 8004634:	f7fb fe30 	bl	8000298 <__aeabi_dsub>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4640      	mov	r0, r8
 800463e:	4649      	mov	r1, r9
 8004640:	f7fc fa54 	bl	8000aec <__aeabi_dcmplt>
 8004644:	2800      	cmp	r0, #0
 8004646:	f43f af35 	beq.w	80044b4 <_dtoa_r+0x464>
 800464a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800464c:	1e6b      	subs	r3, r5, #1
 800464e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004650:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004654:	2b30      	cmp	r3, #48	; 0x30
 8004656:	d0f8      	beq.n	800464a <_dtoa_r+0x5fa>
 8004658:	9700      	str	r7, [sp, #0]
 800465a:	e049      	b.n	80046f0 <_dtoa_r+0x6a0>
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <_dtoa_r+0x624>)
 800465e:	f7fb ffd3 	bl	8000608 <__aeabi_dmul>
 8004662:	4680      	mov	r8, r0
 8004664:	4689      	mov	r9, r1
 8004666:	e7bd      	b.n	80045e4 <_dtoa_r+0x594>
 8004668:	080070d8 	.word	0x080070d8
 800466c:	080070b0 	.word	0x080070b0
 8004670:	3ff00000 	.word	0x3ff00000
 8004674:	40240000 	.word	0x40240000
 8004678:	401c0000 	.word	0x401c0000
 800467c:	40140000 	.word	0x40140000
 8004680:	3fe00000 	.word	0x3fe00000
 8004684:	9d01      	ldr	r5, [sp, #4]
 8004686:	4656      	mov	r6, sl
 8004688:	465f      	mov	r7, fp
 800468a:	4642      	mov	r2, r8
 800468c:	464b      	mov	r3, r9
 800468e:	4630      	mov	r0, r6
 8004690:	4639      	mov	r1, r7
 8004692:	f7fc f8e3 	bl	800085c <__aeabi_ddiv>
 8004696:	f7fc fa67 	bl	8000b68 <__aeabi_d2iz>
 800469a:	4682      	mov	sl, r0
 800469c:	f7fb ff4a 	bl	8000534 <__aeabi_i2d>
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	f7fb ffb0 	bl	8000608 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4630      	mov	r0, r6
 80046ae:	4639      	mov	r1, r7
 80046b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80046b4:	f7fb fdf0 	bl	8000298 <__aeabi_dsub>
 80046b8:	f805 6b01 	strb.w	r6, [r5], #1
 80046bc:	9e01      	ldr	r6, [sp, #4]
 80046be:	9f03      	ldr	r7, [sp, #12]
 80046c0:	1bae      	subs	r6, r5, r6
 80046c2:	42b7      	cmp	r7, r6
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	d135      	bne.n	8004736 <_dtoa_r+0x6e6>
 80046ca:	f7fb fde7 	bl	800029c <__adddf3>
 80046ce:	4642      	mov	r2, r8
 80046d0:	464b      	mov	r3, r9
 80046d2:	4606      	mov	r6, r0
 80046d4:	460f      	mov	r7, r1
 80046d6:	f7fc fa27 	bl	8000b28 <__aeabi_dcmpgt>
 80046da:	b9d0      	cbnz	r0, 8004712 <_dtoa_r+0x6c2>
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	4630      	mov	r0, r6
 80046e2:	4639      	mov	r1, r7
 80046e4:	f7fc f9f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80046e8:	b110      	cbz	r0, 80046f0 <_dtoa_r+0x6a0>
 80046ea:	f01a 0f01 	tst.w	sl, #1
 80046ee:	d110      	bne.n	8004712 <_dtoa_r+0x6c2>
 80046f0:	4620      	mov	r0, r4
 80046f2:	ee18 1a10 	vmov	r1, s16
 80046f6:	f000 faf3 	bl	8004ce0 <_Bfree>
 80046fa:	2300      	movs	r3, #0
 80046fc:	9800      	ldr	r0, [sp, #0]
 80046fe:	702b      	strb	r3, [r5, #0]
 8004700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004702:	3001      	adds	r0, #1
 8004704:	6018      	str	r0, [r3, #0]
 8004706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004708:	2b00      	cmp	r3, #0
 800470a:	f43f acf1 	beq.w	80040f0 <_dtoa_r+0xa0>
 800470e:	601d      	str	r5, [r3, #0]
 8004710:	e4ee      	b.n	80040f0 <_dtoa_r+0xa0>
 8004712:	9f00      	ldr	r7, [sp, #0]
 8004714:	462b      	mov	r3, r5
 8004716:	461d      	mov	r5, r3
 8004718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800471c:	2a39      	cmp	r2, #57	; 0x39
 800471e:	d106      	bne.n	800472e <_dtoa_r+0x6de>
 8004720:	9a01      	ldr	r2, [sp, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	d1f7      	bne.n	8004716 <_dtoa_r+0x6c6>
 8004726:	9901      	ldr	r1, [sp, #4]
 8004728:	2230      	movs	r2, #48	; 0x30
 800472a:	3701      	adds	r7, #1
 800472c:	700a      	strb	r2, [r1, #0]
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	3201      	adds	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e790      	b.n	8004658 <_dtoa_r+0x608>
 8004736:	4ba6      	ldr	r3, [pc, #664]	; (80049d0 <_dtoa_r+0x980>)
 8004738:	2200      	movs	r2, #0
 800473a:	f7fb ff65 	bl	8000608 <__aeabi_dmul>
 800473e:	2200      	movs	r2, #0
 8004740:	2300      	movs	r3, #0
 8004742:	4606      	mov	r6, r0
 8004744:	460f      	mov	r7, r1
 8004746:	f7fc f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800474a:	2800      	cmp	r0, #0
 800474c:	d09d      	beq.n	800468a <_dtoa_r+0x63a>
 800474e:	e7cf      	b.n	80046f0 <_dtoa_r+0x6a0>
 8004750:	9a08      	ldr	r2, [sp, #32]
 8004752:	2a00      	cmp	r2, #0
 8004754:	f000 80d7 	beq.w	8004906 <_dtoa_r+0x8b6>
 8004758:	9a06      	ldr	r2, [sp, #24]
 800475a:	2a01      	cmp	r2, #1
 800475c:	f300 80ba 	bgt.w	80048d4 <_dtoa_r+0x884>
 8004760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004762:	2a00      	cmp	r2, #0
 8004764:	f000 80b2 	beq.w	80048cc <_dtoa_r+0x87c>
 8004768:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800476c:	9e07      	ldr	r6, [sp, #28]
 800476e:	9d04      	ldr	r5, [sp, #16]
 8004770:	9a04      	ldr	r2, [sp, #16]
 8004772:	441a      	add	r2, r3
 8004774:	9204      	str	r2, [sp, #16]
 8004776:	9a05      	ldr	r2, [sp, #20]
 8004778:	2101      	movs	r1, #1
 800477a:	441a      	add	r2, r3
 800477c:	4620      	mov	r0, r4
 800477e:	9205      	str	r2, [sp, #20]
 8004780:	f000 fb66 	bl	8004e50 <__i2b>
 8004784:	4607      	mov	r7, r0
 8004786:	2d00      	cmp	r5, #0
 8004788:	dd0c      	ble.n	80047a4 <_dtoa_r+0x754>
 800478a:	9b05      	ldr	r3, [sp, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	dd09      	ble.n	80047a4 <_dtoa_r+0x754>
 8004790:	42ab      	cmp	r3, r5
 8004792:	9a04      	ldr	r2, [sp, #16]
 8004794:	bfa8      	it	ge
 8004796:	462b      	movge	r3, r5
 8004798:	1ad2      	subs	r2, r2, r3
 800479a:	9204      	str	r2, [sp, #16]
 800479c:	9a05      	ldr	r2, [sp, #20]
 800479e:	1aed      	subs	r5, r5, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	9305      	str	r3, [sp, #20]
 80047a4:	9b07      	ldr	r3, [sp, #28]
 80047a6:	b31b      	cbz	r3, 80047f0 <_dtoa_r+0x7a0>
 80047a8:	9b08      	ldr	r3, [sp, #32]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80af 	beq.w	800490e <_dtoa_r+0x8be>
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	dd13      	ble.n	80047dc <_dtoa_r+0x78c>
 80047b4:	4639      	mov	r1, r7
 80047b6:	4632      	mov	r2, r6
 80047b8:	4620      	mov	r0, r4
 80047ba:	f000 fc09 	bl	8004fd0 <__pow5mult>
 80047be:	ee18 2a10 	vmov	r2, s16
 80047c2:	4601      	mov	r1, r0
 80047c4:	4607      	mov	r7, r0
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 fb58 	bl	8004e7c <__multiply>
 80047cc:	ee18 1a10 	vmov	r1, s16
 80047d0:	4680      	mov	r8, r0
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 fa84 	bl	8004ce0 <_Bfree>
 80047d8:	ee08 8a10 	vmov	s16, r8
 80047dc:	9b07      	ldr	r3, [sp, #28]
 80047de:	1b9a      	subs	r2, r3, r6
 80047e0:	d006      	beq.n	80047f0 <_dtoa_r+0x7a0>
 80047e2:	ee18 1a10 	vmov	r1, s16
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 fbf2 	bl	8004fd0 <__pow5mult>
 80047ec:	ee08 0a10 	vmov	s16, r0
 80047f0:	2101      	movs	r1, #1
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 fb2c 	bl	8004e50 <__i2b>
 80047f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	4606      	mov	r6, r0
 80047fe:	f340 8088 	ble.w	8004912 <_dtoa_r+0x8c2>
 8004802:	461a      	mov	r2, r3
 8004804:	4601      	mov	r1, r0
 8004806:	4620      	mov	r0, r4
 8004808:	f000 fbe2 	bl	8004fd0 <__pow5mult>
 800480c:	9b06      	ldr	r3, [sp, #24]
 800480e:	2b01      	cmp	r3, #1
 8004810:	4606      	mov	r6, r0
 8004812:	f340 8081 	ble.w	8004918 <_dtoa_r+0x8c8>
 8004816:	f04f 0800 	mov.w	r8, #0
 800481a:	6933      	ldr	r3, [r6, #16]
 800481c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004820:	6918      	ldr	r0, [r3, #16]
 8004822:	f000 fac5 	bl	8004db0 <__hi0bits>
 8004826:	f1c0 0020 	rsb	r0, r0, #32
 800482a:	9b05      	ldr	r3, [sp, #20]
 800482c:	4418      	add	r0, r3
 800482e:	f010 001f 	ands.w	r0, r0, #31
 8004832:	f000 8092 	beq.w	800495a <_dtoa_r+0x90a>
 8004836:	f1c0 0320 	rsb	r3, r0, #32
 800483a:	2b04      	cmp	r3, #4
 800483c:	f340 808a 	ble.w	8004954 <_dtoa_r+0x904>
 8004840:	f1c0 001c 	rsb	r0, r0, #28
 8004844:	9b04      	ldr	r3, [sp, #16]
 8004846:	4403      	add	r3, r0
 8004848:	9304      	str	r3, [sp, #16]
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	4403      	add	r3, r0
 800484e:	4405      	add	r5, r0
 8004850:	9305      	str	r3, [sp, #20]
 8004852:	9b04      	ldr	r3, [sp, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	dd07      	ble.n	8004868 <_dtoa_r+0x818>
 8004858:	ee18 1a10 	vmov	r1, s16
 800485c:	461a      	mov	r2, r3
 800485e:	4620      	mov	r0, r4
 8004860:	f000 fc10 	bl	8005084 <__lshift>
 8004864:	ee08 0a10 	vmov	s16, r0
 8004868:	9b05      	ldr	r3, [sp, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	dd05      	ble.n	800487a <_dtoa_r+0x82a>
 800486e:	4631      	mov	r1, r6
 8004870:	461a      	mov	r2, r3
 8004872:	4620      	mov	r0, r4
 8004874:	f000 fc06 	bl	8005084 <__lshift>
 8004878:	4606      	mov	r6, r0
 800487a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d06e      	beq.n	800495e <_dtoa_r+0x90e>
 8004880:	ee18 0a10 	vmov	r0, s16
 8004884:	4631      	mov	r1, r6
 8004886:	f000 fc6d 	bl	8005164 <__mcmp>
 800488a:	2800      	cmp	r0, #0
 800488c:	da67      	bge.n	800495e <_dtoa_r+0x90e>
 800488e:	9b00      	ldr	r3, [sp, #0]
 8004890:	3b01      	subs	r3, #1
 8004892:	ee18 1a10 	vmov	r1, s16
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	220a      	movs	r2, #10
 800489a:	2300      	movs	r3, #0
 800489c:	4620      	mov	r0, r4
 800489e:	f000 fa41 	bl	8004d24 <__multadd>
 80048a2:	9b08      	ldr	r3, [sp, #32]
 80048a4:	ee08 0a10 	vmov	s16, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 81b1 	beq.w	8004c10 <_dtoa_r+0xbc0>
 80048ae:	2300      	movs	r3, #0
 80048b0:	4639      	mov	r1, r7
 80048b2:	220a      	movs	r2, #10
 80048b4:	4620      	mov	r0, r4
 80048b6:	f000 fa35 	bl	8004d24 <__multadd>
 80048ba:	9b02      	ldr	r3, [sp, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	4607      	mov	r7, r0
 80048c0:	f300 808e 	bgt.w	80049e0 <_dtoa_r+0x990>
 80048c4:	9b06      	ldr	r3, [sp, #24]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	dc51      	bgt.n	800496e <_dtoa_r+0x91e>
 80048ca:	e089      	b.n	80049e0 <_dtoa_r+0x990>
 80048cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048d2:	e74b      	b.n	800476c <_dtoa_r+0x71c>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	1e5e      	subs	r6, r3, #1
 80048d8:	9b07      	ldr	r3, [sp, #28]
 80048da:	42b3      	cmp	r3, r6
 80048dc:	bfbf      	itttt	lt
 80048de:	9b07      	ldrlt	r3, [sp, #28]
 80048e0:	9607      	strlt	r6, [sp, #28]
 80048e2:	1af2      	sublt	r2, r6, r3
 80048e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80048e6:	bfb6      	itet	lt
 80048e8:	189b      	addlt	r3, r3, r2
 80048ea:	1b9e      	subge	r6, r3, r6
 80048ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	bfb8      	it	lt
 80048f2:	2600      	movlt	r6, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bfb7      	itett	lt
 80048f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80048fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004900:	1a9d      	sublt	r5, r3, r2
 8004902:	2300      	movlt	r3, #0
 8004904:	e734      	b.n	8004770 <_dtoa_r+0x720>
 8004906:	9e07      	ldr	r6, [sp, #28]
 8004908:	9d04      	ldr	r5, [sp, #16]
 800490a:	9f08      	ldr	r7, [sp, #32]
 800490c:	e73b      	b.n	8004786 <_dtoa_r+0x736>
 800490e:	9a07      	ldr	r2, [sp, #28]
 8004910:	e767      	b.n	80047e2 <_dtoa_r+0x792>
 8004912:	9b06      	ldr	r3, [sp, #24]
 8004914:	2b01      	cmp	r3, #1
 8004916:	dc18      	bgt.n	800494a <_dtoa_r+0x8fa>
 8004918:	f1ba 0f00 	cmp.w	sl, #0
 800491c:	d115      	bne.n	800494a <_dtoa_r+0x8fa>
 800491e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004922:	b993      	cbnz	r3, 800494a <_dtoa_r+0x8fa>
 8004924:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004928:	0d1b      	lsrs	r3, r3, #20
 800492a:	051b      	lsls	r3, r3, #20
 800492c:	b183      	cbz	r3, 8004950 <_dtoa_r+0x900>
 800492e:	9b04      	ldr	r3, [sp, #16]
 8004930:	3301      	adds	r3, #1
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	9b05      	ldr	r3, [sp, #20]
 8004936:	3301      	adds	r3, #1
 8004938:	9305      	str	r3, [sp, #20]
 800493a:	f04f 0801 	mov.w	r8, #1
 800493e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f af6a 	bne.w	800481a <_dtoa_r+0x7ca>
 8004946:	2001      	movs	r0, #1
 8004948:	e76f      	b.n	800482a <_dtoa_r+0x7da>
 800494a:	f04f 0800 	mov.w	r8, #0
 800494e:	e7f6      	b.n	800493e <_dtoa_r+0x8ee>
 8004950:	4698      	mov	r8, r3
 8004952:	e7f4      	b.n	800493e <_dtoa_r+0x8ee>
 8004954:	f43f af7d 	beq.w	8004852 <_dtoa_r+0x802>
 8004958:	4618      	mov	r0, r3
 800495a:	301c      	adds	r0, #28
 800495c:	e772      	b.n	8004844 <_dtoa_r+0x7f4>
 800495e:	9b03      	ldr	r3, [sp, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dc37      	bgt.n	80049d4 <_dtoa_r+0x984>
 8004964:	9b06      	ldr	r3, [sp, #24]
 8004966:	2b02      	cmp	r3, #2
 8004968:	dd34      	ble.n	80049d4 <_dtoa_r+0x984>
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	9302      	str	r3, [sp, #8]
 800496e:	9b02      	ldr	r3, [sp, #8]
 8004970:	b96b      	cbnz	r3, 800498e <_dtoa_r+0x93e>
 8004972:	4631      	mov	r1, r6
 8004974:	2205      	movs	r2, #5
 8004976:	4620      	mov	r0, r4
 8004978:	f000 f9d4 	bl	8004d24 <__multadd>
 800497c:	4601      	mov	r1, r0
 800497e:	4606      	mov	r6, r0
 8004980:	ee18 0a10 	vmov	r0, s16
 8004984:	f000 fbee 	bl	8005164 <__mcmp>
 8004988:	2800      	cmp	r0, #0
 800498a:	f73f adbb 	bgt.w	8004504 <_dtoa_r+0x4b4>
 800498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004990:	9d01      	ldr	r5, [sp, #4]
 8004992:	43db      	mvns	r3, r3
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	f04f 0800 	mov.w	r8, #0
 800499a:	4631      	mov	r1, r6
 800499c:	4620      	mov	r0, r4
 800499e:	f000 f99f 	bl	8004ce0 <_Bfree>
 80049a2:	2f00      	cmp	r7, #0
 80049a4:	f43f aea4 	beq.w	80046f0 <_dtoa_r+0x6a0>
 80049a8:	f1b8 0f00 	cmp.w	r8, #0
 80049ac:	d005      	beq.n	80049ba <_dtoa_r+0x96a>
 80049ae:	45b8      	cmp	r8, r7
 80049b0:	d003      	beq.n	80049ba <_dtoa_r+0x96a>
 80049b2:	4641      	mov	r1, r8
 80049b4:	4620      	mov	r0, r4
 80049b6:	f000 f993 	bl	8004ce0 <_Bfree>
 80049ba:	4639      	mov	r1, r7
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 f98f 	bl	8004ce0 <_Bfree>
 80049c2:	e695      	b.n	80046f0 <_dtoa_r+0x6a0>
 80049c4:	2600      	movs	r6, #0
 80049c6:	4637      	mov	r7, r6
 80049c8:	e7e1      	b.n	800498e <_dtoa_r+0x93e>
 80049ca:	9700      	str	r7, [sp, #0]
 80049cc:	4637      	mov	r7, r6
 80049ce:	e599      	b.n	8004504 <_dtoa_r+0x4b4>
 80049d0:	40240000 	.word	0x40240000
 80049d4:	9b08      	ldr	r3, [sp, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80ca 	beq.w	8004b70 <_dtoa_r+0xb20>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	dd05      	ble.n	80049f0 <_dtoa_r+0x9a0>
 80049e4:	4639      	mov	r1, r7
 80049e6:	462a      	mov	r2, r5
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 fb4b 	bl	8005084 <__lshift>
 80049ee:	4607      	mov	r7, r0
 80049f0:	f1b8 0f00 	cmp.w	r8, #0
 80049f4:	d05b      	beq.n	8004aae <_dtoa_r+0xa5e>
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 f931 	bl	8004c60 <_Balloc>
 80049fe:	4605      	mov	r5, r0
 8004a00:	b928      	cbnz	r0, 8004a0e <_dtoa_r+0x9be>
 8004a02:	4b87      	ldr	r3, [pc, #540]	; (8004c20 <_dtoa_r+0xbd0>)
 8004a04:	4602      	mov	r2, r0
 8004a06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004a0a:	f7ff bb3b 	b.w	8004084 <_dtoa_r+0x34>
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	3202      	adds	r2, #2
 8004a12:	0092      	lsls	r2, r2, #2
 8004a14:	f107 010c 	add.w	r1, r7, #12
 8004a18:	300c      	adds	r0, #12
 8004a1a:	f000 f913 	bl	8004c44 <memcpy>
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4629      	mov	r1, r5
 8004a22:	4620      	mov	r0, r4
 8004a24:	f000 fb2e 	bl	8005084 <__lshift>
 8004a28:	9b01      	ldr	r3, [sp, #4]
 8004a2a:	f103 0901 	add.w	r9, r3, #1
 8004a2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	9305      	str	r3, [sp, #20]
 8004a36:	f00a 0301 	and.w	r3, sl, #1
 8004a3a:	46b8      	mov	r8, r7
 8004a3c:	9304      	str	r3, [sp, #16]
 8004a3e:	4607      	mov	r7, r0
 8004a40:	4631      	mov	r1, r6
 8004a42:	ee18 0a10 	vmov	r0, s16
 8004a46:	f7ff fa77 	bl	8003f38 <quorem>
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	9002      	str	r0, [sp, #8]
 8004a4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004a52:	ee18 0a10 	vmov	r0, s16
 8004a56:	f000 fb85 	bl	8005164 <__mcmp>
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	9003      	str	r0, [sp, #12]
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 fb9b 	bl	800519c <__mdiff>
 8004a66:	68c2      	ldr	r2, [r0, #12]
 8004a68:	f109 3bff 	add.w	fp, r9, #4294967295
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	bb02      	cbnz	r2, 8004ab2 <_dtoa_r+0xa62>
 8004a70:	4601      	mov	r1, r0
 8004a72:	ee18 0a10 	vmov	r0, s16
 8004a76:	f000 fb75 	bl	8005164 <__mcmp>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	4620      	mov	r0, r4
 8004a80:	9207      	str	r2, [sp, #28]
 8004a82:	f000 f92d 	bl	8004ce0 <_Bfree>
 8004a86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004a8a:	ea43 0102 	orr.w	r1, r3, r2
 8004a8e:	9b04      	ldr	r3, [sp, #16]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	464d      	mov	r5, r9
 8004a94:	d10f      	bne.n	8004ab6 <_dtoa_r+0xa66>
 8004a96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004a9a:	d02a      	beq.n	8004af2 <_dtoa_r+0xaa2>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	dd02      	ble.n	8004aa8 <_dtoa_r+0xa58>
 8004aa2:	9b02      	ldr	r3, [sp, #8]
 8004aa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004aa8:	f88b a000 	strb.w	sl, [fp]
 8004aac:	e775      	b.n	800499a <_dtoa_r+0x94a>
 8004aae:	4638      	mov	r0, r7
 8004ab0:	e7ba      	b.n	8004a28 <_dtoa_r+0x9d8>
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	e7e2      	b.n	8004a7c <_dtoa_r+0xa2c>
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	db04      	blt.n	8004ac6 <_dtoa_r+0xa76>
 8004abc:	9906      	ldr	r1, [sp, #24]
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	9904      	ldr	r1, [sp, #16]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	d122      	bne.n	8004b0c <_dtoa_r+0xabc>
 8004ac6:	2a00      	cmp	r2, #0
 8004ac8:	ddee      	ble.n	8004aa8 <_dtoa_r+0xa58>
 8004aca:	ee18 1a10 	vmov	r1, s16
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 fad7 	bl	8005084 <__lshift>
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	ee08 0a10 	vmov	s16, r0
 8004adc:	f000 fb42 	bl	8005164 <__mcmp>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	dc03      	bgt.n	8004aec <_dtoa_r+0xa9c>
 8004ae4:	d1e0      	bne.n	8004aa8 <_dtoa_r+0xa58>
 8004ae6:	f01a 0f01 	tst.w	sl, #1
 8004aea:	d0dd      	beq.n	8004aa8 <_dtoa_r+0xa58>
 8004aec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004af0:	d1d7      	bne.n	8004aa2 <_dtoa_r+0xa52>
 8004af2:	2339      	movs	r3, #57	; 0x39
 8004af4:	f88b 3000 	strb.w	r3, [fp]
 8004af8:	462b      	mov	r3, r5
 8004afa:	461d      	mov	r5, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004b02:	2a39      	cmp	r2, #57	; 0x39
 8004b04:	d071      	beq.n	8004bea <_dtoa_r+0xb9a>
 8004b06:	3201      	adds	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e746      	b.n	800499a <_dtoa_r+0x94a>
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	dd07      	ble.n	8004b20 <_dtoa_r+0xad0>
 8004b10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b14:	d0ed      	beq.n	8004af2 <_dtoa_r+0xaa2>
 8004b16:	f10a 0301 	add.w	r3, sl, #1
 8004b1a:	f88b 3000 	strb.w	r3, [fp]
 8004b1e:	e73c      	b.n	800499a <_dtoa_r+0x94a>
 8004b20:	9b05      	ldr	r3, [sp, #20]
 8004b22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004b26:	4599      	cmp	r9, r3
 8004b28:	d047      	beq.n	8004bba <_dtoa_r+0xb6a>
 8004b2a:	ee18 1a10 	vmov	r1, s16
 8004b2e:	2300      	movs	r3, #0
 8004b30:	220a      	movs	r2, #10
 8004b32:	4620      	mov	r0, r4
 8004b34:	f000 f8f6 	bl	8004d24 <__multadd>
 8004b38:	45b8      	cmp	r8, r7
 8004b3a:	ee08 0a10 	vmov	s16, r0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	f04f 020a 	mov.w	r2, #10
 8004b46:	4641      	mov	r1, r8
 8004b48:	4620      	mov	r0, r4
 8004b4a:	d106      	bne.n	8004b5a <_dtoa_r+0xb0a>
 8004b4c:	f000 f8ea 	bl	8004d24 <__multadd>
 8004b50:	4680      	mov	r8, r0
 8004b52:	4607      	mov	r7, r0
 8004b54:	f109 0901 	add.w	r9, r9, #1
 8004b58:	e772      	b.n	8004a40 <_dtoa_r+0x9f0>
 8004b5a:	f000 f8e3 	bl	8004d24 <__multadd>
 8004b5e:	4639      	mov	r1, r7
 8004b60:	4680      	mov	r8, r0
 8004b62:	2300      	movs	r3, #0
 8004b64:	220a      	movs	r2, #10
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 f8dc 	bl	8004d24 <__multadd>
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	e7f1      	b.n	8004b54 <_dtoa_r+0xb04>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	9302      	str	r3, [sp, #8]
 8004b74:	9d01      	ldr	r5, [sp, #4]
 8004b76:	ee18 0a10 	vmov	r0, s16
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	f7ff f9dc 	bl	8003f38 <quorem>
 8004b80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004b84:	9b01      	ldr	r3, [sp, #4]
 8004b86:	f805 ab01 	strb.w	sl, [r5], #1
 8004b8a:	1aea      	subs	r2, r5, r3
 8004b8c:	9b02      	ldr	r3, [sp, #8]
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	dd09      	ble.n	8004ba6 <_dtoa_r+0xb56>
 8004b92:	ee18 1a10 	vmov	r1, s16
 8004b96:	2300      	movs	r3, #0
 8004b98:	220a      	movs	r2, #10
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 f8c2 	bl	8004d24 <__multadd>
 8004ba0:	ee08 0a10 	vmov	s16, r0
 8004ba4:	e7e7      	b.n	8004b76 <_dtoa_r+0xb26>
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bfc8      	it	gt
 8004bac:	461d      	movgt	r5, r3
 8004bae:	9b01      	ldr	r3, [sp, #4]
 8004bb0:	bfd8      	it	le
 8004bb2:	2501      	movle	r5, #1
 8004bb4:	441d      	add	r5, r3
 8004bb6:	f04f 0800 	mov.w	r8, #0
 8004bba:	ee18 1a10 	vmov	r1, s16
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f000 fa5f 	bl	8005084 <__lshift>
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	ee08 0a10 	vmov	s16, r0
 8004bcc:	f000 faca 	bl	8005164 <__mcmp>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	dc91      	bgt.n	8004af8 <_dtoa_r+0xaa8>
 8004bd4:	d102      	bne.n	8004bdc <_dtoa_r+0xb8c>
 8004bd6:	f01a 0f01 	tst.w	sl, #1
 8004bda:	d18d      	bne.n	8004af8 <_dtoa_r+0xaa8>
 8004bdc:	462b      	mov	r3, r5
 8004bde:	461d      	mov	r5, r3
 8004be0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004be4:	2a30      	cmp	r2, #48	; 0x30
 8004be6:	d0fa      	beq.n	8004bde <_dtoa_r+0xb8e>
 8004be8:	e6d7      	b.n	800499a <_dtoa_r+0x94a>
 8004bea:	9a01      	ldr	r2, [sp, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d184      	bne.n	8004afa <_dtoa_r+0xaaa>
 8004bf0:	9b00      	ldr	r3, [sp, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	2331      	movs	r3, #49	; 0x31
 8004bf8:	7013      	strb	r3, [r2, #0]
 8004bfa:	e6ce      	b.n	800499a <_dtoa_r+0x94a>
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <_dtoa_r+0xbd4>)
 8004bfe:	f7ff ba95 	b.w	800412c <_dtoa_r+0xdc>
 8004c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f47f aa6e 	bne.w	80040e6 <_dtoa_r+0x96>
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <_dtoa_r+0xbd8>)
 8004c0c:	f7ff ba8e 	b.w	800412c <_dtoa_r+0xdc>
 8004c10:	9b02      	ldr	r3, [sp, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dcae      	bgt.n	8004b74 <_dtoa_r+0xb24>
 8004c16:	9b06      	ldr	r3, [sp, #24]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	f73f aea8 	bgt.w	800496e <_dtoa_r+0x91e>
 8004c1e:	e7a9      	b.n	8004b74 <_dtoa_r+0xb24>
 8004c20:	0800703f 	.word	0x0800703f
 8004c24:	08006f9c 	.word	0x08006f9c
 8004c28:	08006fc0 	.word	0x08006fc0

08004c2c <_localeconv_r>:
 8004c2c:	4800      	ldr	r0, [pc, #0]	; (8004c30 <_localeconv_r+0x4>)
 8004c2e:	4770      	bx	lr
 8004c30:	20000154 	.word	0x20000154

08004c34 <malloc>:
 8004c34:	4b02      	ldr	r3, [pc, #8]	; (8004c40 <malloc+0xc>)
 8004c36:	4601      	mov	r1, r0
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	f000 bc17 	b.w	800546c <_malloc_r>
 8004c3e:	bf00      	nop
 8004c40:	20000000 	.word	0x20000000

08004c44 <memcpy>:
 8004c44:	440a      	add	r2, r1
 8004c46:	4291      	cmp	r1, r2
 8004c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c4c:	d100      	bne.n	8004c50 <memcpy+0xc>
 8004c4e:	4770      	bx	lr
 8004c50:	b510      	push	{r4, lr}
 8004c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	d1f9      	bne.n	8004c52 <memcpy+0xe>
 8004c5e:	bd10      	pop	{r4, pc}

08004c60 <_Balloc>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c64:	4604      	mov	r4, r0
 8004c66:	460d      	mov	r5, r1
 8004c68:	b976      	cbnz	r6, 8004c88 <_Balloc+0x28>
 8004c6a:	2010      	movs	r0, #16
 8004c6c:	f7ff ffe2 	bl	8004c34 <malloc>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6260      	str	r0, [r4, #36]	; 0x24
 8004c74:	b920      	cbnz	r0, 8004c80 <_Balloc+0x20>
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <_Balloc+0x78>)
 8004c78:	4818      	ldr	r0, [pc, #96]	; (8004cdc <_Balloc+0x7c>)
 8004c7a:	2166      	movs	r1, #102	; 0x66
 8004c7c:	f000 fc7a 	bl	8005574 <__assert_func>
 8004c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c84:	6006      	str	r6, [r0, #0]
 8004c86:	60c6      	str	r6, [r0, #12]
 8004c88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c8a:	68f3      	ldr	r3, [r6, #12]
 8004c8c:	b183      	cbz	r3, 8004cb0 <_Balloc+0x50>
 8004c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c96:	b9b8      	cbnz	r0, 8004cc8 <_Balloc+0x68>
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8004c9e:	1d72      	adds	r2, r6, #5
 8004ca0:	0092      	lsls	r2, r2, #2
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 fb60 	bl	8005368 <_calloc_r>
 8004ca8:	b160      	cbz	r0, 8004cc4 <_Balloc+0x64>
 8004caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cae:	e00e      	b.n	8004cce <_Balloc+0x6e>
 8004cb0:	2221      	movs	r2, #33	; 0x21
 8004cb2:	2104      	movs	r1, #4
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 fb57 	bl	8005368 <_calloc_r>
 8004cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cbc:	60f0      	str	r0, [r6, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e4      	bne.n	8004c8e <_Balloc+0x2e>
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	6802      	ldr	r2, [r0, #0]
 8004cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cd4:	e7f7      	b.n	8004cc6 <_Balloc+0x66>
 8004cd6:	bf00      	nop
 8004cd8:	08006fcd 	.word	0x08006fcd
 8004cdc:	08007050 	.word	0x08007050

08004ce0 <_Bfree>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	b976      	cbnz	r6, 8004d08 <_Bfree+0x28>
 8004cea:	2010      	movs	r0, #16
 8004cec:	f7ff ffa2 	bl	8004c34 <malloc>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6268      	str	r0, [r5, #36]	; 0x24
 8004cf4:	b920      	cbnz	r0, 8004d00 <_Bfree+0x20>
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <_Bfree+0x3c>)
 8004cf8:	4809      	ldr	r0, [pc, #36]	; (8004d20 <_Bfree+0x40>)
 8004cfa:	218a      	movs	r1, #138	; 0x8a
 8004cfc:	f000 fc3a 	bl	8005574 <__assert_func>
 8004d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d04:	6006      	str	r6, [r0, #0]
 8004d06:	60c6      	str	r6, [r0, #12]
 8004d08:	b13c      	cbz	r4, 8004d1a <_Bfree+0x3a>
 8004d0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d0c:	6862      	ldr	r2, [r4, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d14:	6021      	str	r1, [r4, #0]
 8004d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	08006fcd 	.word	0x08006fcd
 8004d20:	08007050 	.word	0x08007050

08004d24 <__multadd>:
 8004d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d28:	690d      	ldr	r5, [r1, #16]
 8004d2a:	4607      	mov	r7, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	461e      	mov	r6, r3
 8004d30:	f101 0c14 	add.w	ip, r1, #20
 8004d34:	2000      	movs	r0, #0
 8004d36:	f8dc 3000 	ldr.w	r3, [ip]
 8004d3a:	b299      	uxth	r1, r3
 8004d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8004d40:	0c1e      	lsrs	r6, r3, #16
 8004d42:	0c0b      	lsrs	r3, r1, #16
 8004d44:	fb02 3306 	mla	r3, r2, r6, r3
 8004d48:	b289      	uxth	r1, r1
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d50:	4285      	cmp	r5, r0
 8004d52:	f84c 1b04 	str.w	r1, [ip], #4
 8004d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d5a:	dcec      	bgt.n	8004d36 <__multadd+0x12>
 8004d5c:	b30e      	cbz	r6, 8004da2 <__multadd+0x7e>
 8004d5e:	68a3      	ldr	r3, [r4, #8]
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dc19      	bgt.n	8004d98 <__multadd+0x74>
 8004d64:	6861      	ldr	r1, [r4, #4]
 8004d66:	4638      	mov	r0, r7
 8004d68:	3101      	adds	r1, #1
 8004d6a:	f7ff ff79 	bl	8004c60 <_Balloc>
 8004d6e:	4680      	mov	r8, r0
 8004d70:	b928      	cbnz	r0, 8004d7e <__multadd+0x5a>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <__multadd+0x84>)
 8004d76:	480d      	ldr	r0, [pc, #52]	; (8004dac <__multadd+0x88>)
 8004d78:	21b5      	movs	r1, #181	; 0xb5
 8004d7a:	f000 fbfb 	bl	8005574 <__assert_func>
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	3202      	adds	r2, #2
 8004d82:	f104 010c 	add.w	r1, r4, #12
 8004d86:	0092      	lsls	r2, r2, #2
 8004d88:	300c      	adds	r0, #12
 8004d8a:	f7ff ff5b 	bl	8004c44 <memcpy>
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4638      	mov	r0, r7
 8004d92:	f7ff ffa5 	bl	8004ce0 <_Bfree>
 8004d96:	4644      	mov	r4, r8
 8004d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	615e      	str	r6, [r3, #20]
 8004da0:	6125      	str	r5, [r4, #16]
 8004da2:	4620      	mov	r0, r4
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da8:	0800703f 	.word	0x0800703f
 8004dac:	08007050 	.word	0x08007050

08004db0 <__hi0bits>:
 8004db0:	0c03      	lsrs	r3, r0, #16
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	b9d3      	cbnz	r3, 8004dec <__hi0bits+0x3c>
 8004db6:	0400      	lsls	r0, r0, #16
 8004db8:	2310      	movs	r3, #16
 8004dba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004dbe:	bf04      	itt	eq
 8004dc0:	0200      	lsleq	r0, r0, #8
 8004dc2:	3308      	addeq	r3, #8
 8004dc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004dc8:	bf04      	itt	eq
 8004dca:	0100      	lsleq	r0, r0, #4
 8004dcc:	3304      	addeq	r3, #4
 8004dce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004dd2:	bf04      	itt	eq
 8004dd4:	0080      	lsleq	r0, r0, #2
 8004dd6:	3302      	addeq	r3, #2
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	db05      	blt.n	8004de8 <__hi0bits+0x38>
 8004ddc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004de0:	f103 0301 	add.w	r3, r3, #1
 8004de4:	bf08      	it	eq
 8004de6:	2320      	moveq	r3, #32
 8004de8:	4618      	mov	r0, r3
 8004dea:	4770      	bx	lr
 8004dec:	2300      	movs	r3, #0
 8004dee:	e7e4      	b.n	8004dba <__hi0bits+0xa>

08004df0 <__lo0bits>:
 8004df0:	6803      	ldr	r3, [r0, #0]
 8004df2:	f013 0207 	ands.w	r2, r3, #7
 8004df6:	4601      	mov	r1, r0
 8004df8:	d00b      	beq.n	8004e12 <__lo0bits+0x22>
 8004dfa:	07da      	lsls	r2, r3, #31
 8004dfc:	d423      	bmi.n	8004e46 <__lo0bits+0x56>
 8004dfe:	0798      	lsls	r0, r3, #30
 8004e00:	bf49      	itett	mi
 8004e02:	085b      	lsrmi	r3, r3, #1
 8004e04:	089b      	lsrpl	r3, r3, #2
 8004e06:	2001      	movmi	r0, #1
 8004e08:	600b      	strmi	r3, [r1, #0]
 8004e0a:	bf5c      	itt	pl
 8004e0c:	600b      	strpl	r3, [r1, #0]
 8004e0e:	2002      	movpl	r0, #2
 8004e10:	4770      	bx	lr
 8004e12:	b298      	uxth	r0, r3
 8004e14:	b9a8      	cbnz	r0, 8004e42 <__lo0bits+0x52>
 8004e16:	0c1b      	lsrs	r3, r3, #16
 8004e18:	2010      	movs	r0, #16
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	b90a      	cbnz	r2, 8004e22 <__lo0bits+0x32>
 8004e1e:	3008      	adds	r0, #8
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	071a      	lsls	r2, r3, #28
 8004e24:	bf04      	itt	eq
 8004e26:	091b      	lsreq	r3, r3, #4
 8004e28:	3004      	addeq	r0, #4
 8004e2a:	079a      	lsls	r2, r3, #30
 8004e2c:	bf04      	itt	eq
 8004e2e:	089b      	lsreq	r3, r3, #2
 8004e30:	3002      	addeq	r0, #2
 8004e32:	07da      	lsls	r2, r3, #31
 8004e34:	d403      	bmi.n	8004e3e <__lo0bits+0x4e>
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	f100 0001 	add.w	r0, r0, #1
 8004e3c:	d005      	beq.n	8004e4a <__lo0bits+0x5a>
 8004e3e:	600b      	str	r3, [r1, #0]
 8004e40:	4770      	bx	lr
 8004e42:	4610      	mov	r0, r2
 8004e44:	e7e9      	b.n	8004e1a <__lo0bits+0x2a>
 8004e46:	2000      	movs	r0, #0
 8004e48:	4770      	bx	lr
 8004e4a:	2020      	movs	r0, #32
 8004e4c:	4770      	bx	lr
	...

08004e50 <__i2b>:
 8004e50:	b510      	push	{r4, lr}
 8004e52:	460c      	mov	r4, r1
 8004e54:	2101      	movs	r1, #1
 8004e56:	f7ff ff03 	bl	8004c60 <_Balloc>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	b928      	cbnz	r0, 8004e6a <__i2b+0x1a>
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <__i2b+0x24>)
 8004e60:	4805      	ldr	r0, [pc, #20]	; (8004e78 <__i2b+0x28>)
 8004e62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e66:	f000 fb85 	bl	8005574 <__assert_func>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	6144      	str	r4, [r0, #20]
 8004e6e:	6103      	str	r3, [r0, #16]
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	bf00      	nop
 8004e74:	0800703f 	.word	0x0800703f
 8004e78:	08007050 	.word	0x08007050

08004e7c <__multiply>:
 8004e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	4691      	mov	r9, r2
 8004e82:	690a      	ldr	r2, [r1, #16]
 8004e84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bfb8      	it	lt
 8004e8c:	460b      	movlt	r3, r1
 8004e8e:	460c      	mov	r4, r1
 8004e90:	bfbc      	itt	lt
 8004e92:	464c      	movlt	r4, r9
 8004e94:	4699      	movlt	r9, r3
 8004e96:	6927      	ldr	r7, [r4, #16]
 8004e98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004e9c:	68a3      	ldr	r3, [r4, #8]
 8004e9e:	6861      	ldr	r1, [r4, #4]
 8004ea0:	eb07 060a 	add.w	r6, r7, sl
 8004ea4:	42b3      	cmp	r3, r6
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	bfb8      	it	lt
 8004eaa:	3101      	addlt	r1, #1
 8004eac:	f7ff fed8 	bl	8004c60 <_Balloc>
 8004eb0:	b930      	cbnz	r0, 8004ec0 <__multiply+0x44>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b44      	ldr	r3, [pc, #272]	; (8004fc8 <__multiply+0x14c>)
 8004eb6:	4845      	ldr	r0, [pc, #276]	; (8004fcc <__multiply+0x150>)
 8004eb8:	f240 115d 	movw	r1, #349	; 0x15d
 8004ebc:	f000 fb5a 	bl	8005574 <__assert_func>
 8004ec0:	f100 0514 	add.w	r5, r0, #20
 8004ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ec8:	462b      	mov	r3, r5
 8004eca:	2200      	movs	r2, #0
 8004ecc:	4543      	cmp	r3, r8
 8004ece:	d321      	bcc.n	8004f14 <__multiply+0x98>
 8004ed0:	f104 0314 	add.w	r3, r4, #20
 8004ed4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ed8:	f109 0314 	add.w	r3, r9, #20
 8004edc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004ee0:	9202      	str	r2, [sp, #8]
 8004ee2:	1b3a      	subs	r2, r7, r4
 8004ee4:	3a15      	subs	r2, #21
 8004ee6:	f022 0203 	bic.w	r2, r2, #3
 8004eea:	3204      	adds	r2, #4
 8004eec:	f104 0115 	add.w	r1, r4, #21
 8004ef0:	428f      	cmp	r7, r1
 8004ef2:	bf38      	it	cc
 8004ef4:	2204      	movcc	r2, #4
 8004ef6:	9201      	str	r2, [sp, #4]
 8004ef8:	9a02      	ldr	r2, [sp, #8]
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d80c      	bhi.n	8004f1a <__multiply+0x9e>
 8004f00:	2e00      	cmp	r6, #0
 8004f02:	dd03      	ble.n	8004f0c <__multiply+0x90>
 8004f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d05a      	beq.n	8004fc2 <__multiply+0x146>
 8004f0c:	6106      	str	r6, [r0, #16]
 8004f0e:	b005      	add	sp, #20
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	f843 2b04 	str.w	r2, [r3], #4
 8004f18:	e7d8      	b.n	8004ecc <__multiply+0x50>
 8004f1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8004f1e:	f1ba 0f00 	cmp.w	sl, #0
 8004f22:	d024      	beq.n	8004f6e <__multiply+0xf2>
 8004f24:	f104 0e14 	add.w	lr, r4, #20
 8004f28:	46a9      	mov	r9, r5
 8004f2a:	f04f 0c00 	mov.w	ip, #0
 8004f2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004f32:	f8d9 1000 	ldr.w	r1, [r9]
 8004f36:	fa1f fb82 	uxth.w	fp, r2
 8004f3a:	b289      	uxth	r1, r1
 8004f3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004f40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004f44:	f8d9 2000 	ldr.w	r2, [r9]
 8004f48:	4461      	add	r1, ip
 8004f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004f52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004f56:	b289      	uxth	r1, r1
 8004f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004f5c:	4577      	cmp	r7, lr
 8004f5e:	f849 1b04 	str.w	r1, [r9], #4
 8004f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f66:	d8e2      	bhi.n	8004f2e <__multiply+0xb2>
 8004f68:	9a01      	ldr	r2, [sp, #4]
 8004f6a:	f845 c002 	str.w	ip, [r5, r2]
 8004f6e:	9a03      	ldr	r2, [sp, #12]
 8004f70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f74:	3304      	adds	r3, #4
 8004f76:	f1b9 0f00 	cmp.w	r9, #0
 8004f7a:	d020      	beq.n	8004fbe <__multiply+0x142>
 8004f7c:	6829      	ldr	r1, [r5, #0]
 8004f7e:	f104 0c14 	add.w	ip, r4, #20
 8004f82:	46ae      	mov	lr, r5
 8004f84:	f04f 0a00 	mov.w	sl, #0
 8004f88:	f8bc b000 	ldrh.w	fp, [ip]
 8004f8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004f90:	fb09 220b 	mla	r2, r9, fp, r2
 8004f94:	4492      	add	sl, r2
 8004f96:	b289      	uxth	r1, r1
 8004f98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004f9c:	f84e 1b04 	str.w	r1, [lr], #4
 8004fa0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004fa4:	f8be 1000 	ldrh.w	r1, [lr]
 8004fa8:	0c12      	lsrs	r2, r2, #16
 8004faa:	fb09 1102 	mla	r1, r9, r2, r1
 8004fae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004fb2:	4567      	cmp	r7, ip
 8004fb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004fb8:	d8e6      	bhi.n	8004f88 <__multiply+0x10c>
 8004fba:	9a01      	ldr	r2, [sp, #4]
 8004fbc:	50a9      	str	r1, [r5, r2]
 8004fbe:	3504      	adds	r5, #4
 8004fc0:	e79a      	b.n	8004ef8 <__multiply+0x7c>
 8004fc2:	3e01      	subs	r6, #1
 8004fc4:	e79c      	b.n	8004f00 <__multiply+0x84>
 8004fc6:	bf00      	nop
 8004fc8:	0800703f 	.word	0x0800703f
 8004fcc:	08007050 	.word	0x08007050

08004fd0 <__pow5mult>:
 8004fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	4615      	mov	r5, r2
 8004fd6:	f012 0203 	ands.w	r2, r2, #3
 8004fda:	4606      	mov	r6, r0
 8004fdc:	460f      	mov	r7, r1
 8004fde:	d007      	beq.n	8004ff0 <__pow5mult+0x20>
 8004fe0:	4c25      	ldr	r4, [pc, #148]	; (8005078 <__pow5mult+0xa8>)
 8004fe2:	3a01      	subs	r2, #1
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fea:	f7ff fe9b 	bl	8004d24 <__multadd>
 8004fee:	4607      	mov	r7, r0
 8004ff0:	10ad      	asrs	r5, r5, #2
 8004ff2:	d03d      	beq.n	8005070 <__pow5mult+0xa0>
 8004ff4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ff6:	b97c      	cbnz	r4, 8005018 <__pow5mult+0x48>
 8004ff8:	2010      	movs	r0, #16
 8004ffa:	f7ff fe1b 	bl	8004c34 <malloc>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6270      	str	r0, [r6, #36]	; 0x24
 8005002:	b928      	cbnz	r0, 8005010 <__pow5mult+0x40>
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <__pow5mult+0xac>)
 8005006:	481e      	ldr	r0, [pc, #120]	; (8005080 <__pow5mult+0xb0>)
 8005008:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800500c:	f000 fab2 	bl	8005574 <__assert_func>
 8005010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005014:	6004      	str	r4, [r0, #0]
 8005016:	60c4      	str	r4, [r0, #12]
 8005018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800501c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005020:	b94c      	cbnz	r4, 8005036 <__pow5mult+0x66>
 8005022:	f240 2171 	movw	r1, #625	; 0x271
 8005026:	4630      	mov	r0, r6
 8005028:	f7ff ff12 	bl	8004e50 <__i2b>
 800502c:	2300      	movs	r3, #0
 800502e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005032:	4604      	mov	r4, r0
 8005034:	6003      	str	r3, [r0, #0]
 8005036:	f04f 0900 	mov.w	r9, #0
 800503a:	07eb      	lsls	r3, r5, #31
 800503c:	d50a      	bpl.n	8005054 <__pow5mult+0x84>
 800503e:	4639      	mov	r1, r7
 8005040:	4622      	mov	r2, r4
 8005042:	4630      	mov	r0, r6
 8005044:	f7ff ff1a 	bl	8004e7c <__multiply>
 8005048:	4639      	mov	r1, r7
 800504a:	4680      	mov	r8, r0
 800504c:	4630      	mov	r0, r6
 800504e:	f7ff fe47 	bl	8004ce0 <_Bfree>
 8005052:	4647      	mov	r7, r8
 8005054:	106d      	asrs	r5, r5, #1
 8005056:	d00b      	beq.n	8005070 <__pow5mult+0xa0>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	b938      	cbnz	r0, 800506c <__pow5mult+0x9c>
 800505c:	4622      	mov	r2, r4
 800505e:	4621      	mov	r1, r4
 8005060:	4630      	mov	r0, r6
 8005062:	f7ff ff0b 	bl	8004e7c <__multiply>
 8005066:	6020      	str	r0, [r4, #0]
 8005068:	f8c0 9000 	str.w	r9, [r0]
 800506c:	4604      	mov	r4, r0
 800506e:	e7e4      	b.n	800503a <__pow5mult+0x6a>
 8005070:	4638      	mov	r0, r7
 8005072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005076:	bf00      	nop
 8005078:	080071a0 	.word	0x080071a0
 800507c:	08006fcd 	.word	0x08006fcd
 8005080:	08007050 	.word	0x08007050

08005084 <__lshift>:
 8005084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	460c      	mov	r4, r1
 800508a:	6849      	ldr	r1, [r1, #4]
 800508c:	6923      	ldr	r3, [r4, #16]
 800508e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005092:	68a3      	ldr	r3, [r4, #8]
 8005094:	4607      	mov	r7, r0
 8005096:	4691      	mov	r9, r2
 8005098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800509c:	f108 0601 	add.w	r6, r8, #1
 80050a0:	42b3      	cmp	r3, r6
 80050a2:	db0b      	blt.n	80050bc <__lshift+0x38>
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff fddb 	bl	8004c60 <_Balloc>
 80050aa:	4605      	mov	r5, r0
 80050ac:	b948      	cbnz	r0, 80050c2 <__lshift+0x3e>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <__lshift+0xd8>)
 80050b2:	482b      	ldr	r0, [pc, #172]	; (8005160 <__lshift+0xdc>)
 80050b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80050b8:	f000 fa5c 	bl	8005574 <__assert_func>
 80050bc:	3101      	adds	r1, #1
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	e7ee      	b.n	80050a0 <__lshift+0x1c>
 80050c2:	2300      	movs	r3, #0
 80050c4:	f100 0114 	add.w	r1, r0, #20
 80050c8:	f100 0210 	add.w	r2, r0, #16
 80050cc:	4618      	mov	r0, r3
 80050ce:	4553      	cmp	r3, sl
 80050d0:	db37      	blt.n	8005142 <__lshift+0xbe>
 80050d2:	6920      	ldr	r0, [r4, #16]
 80050d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050d8:	f104 0314 	add.w	r3, r4, #20
 80050dc:	f019 091f 	ands.w	r9, r9, #31
 80050e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80050e8:	d02f      	beq.n	800514a <__lshift+0xc6>
 80050ea:	f1c9 0e20 	rsb	lr, r9, #32
 80050ee:	468a      	mov	sl, r1
 80050f0:	f04f 0c00 	mov.w	ip, #0
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	fa02 f209 	lsl.w	r2, r2, r9
 80050fa:	ea42 020c 	orr.w	r2, r2, ip
 80050fe:	f84a 2b04 	str.w	r2, [sl], #4
 8005102:	f853 2b04 	ldr.w	r2, [r3], #4
 8005106:	4298      	cmp	r0, r3
 8005108:	fa22 fc0e 	lsr.w	ip, r2, lr
 800510c:	d8f2      	bhi.n	80050f4 <__lshift+0x70>
 800510e:	1b03      	subs	r3, r0, r4
 8005110:	3b15      	subs	r3, #21
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	3304      	adds	r3, #4
 8005118:	f104 0215 	add.w	r2, r4, #21
 800511c:	4290      	cmp	r0, r2
 800511e:	bf38      	it	cc
 8005120:	2304      	movcc	r3, #4
 8005122:	f841 c003 	str.w	ip, [r1, r3]
 8005126:	f1bc 0f00 	cmp.w	ip, #0
 800512a:	d001      	beq.n	8005130 <__lshift+0xac>
 800512c:	f108 0602 	add.w	r6, r8, #2
 8005130:	3e01      	subs	r6, #1
 8005132:	4638      	mov	r0, r7
 8005134:	612e      	str	r6, [r5, #16]
 8005136:	4621      	mov	r1, r4
 8005138:	f7ff fdd2 	bl	8004ce0 <_Bfree>
 800513c:	4628      	mov	r0, r5
 800513e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005142:	f842 0f04 	str.w	r0, [r2, #4]!
 8005146:	3301      	adds	r3, #1
 8005148:	e7c1      	b.n	80050ce <__lshift+0x4a>
 800514a:	3904      	subs	r1, #4
 800514c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005150:	f841 2f04 	str.w	r2, [r1, #4]!
 8005154:	4298      	cmp	r0, r3
 8005156:	d8f9      	bhi.n	800514c <__lshift+0xc8>
 8005158:	e7ea      	b.n	8005130 <__lshift+0xac>
 800515a:	bf00      	nop
 800515c:	0800703f 	.word	0x0800703f
 8005160:	08007050 	.word	0x08007050

08005164 <__mcmp>:
 8005164:	b530      	push	{r4, r5, lr}
 8005166:	6902      	ldr	r2, [r0, #16]
 8005168:	690c      	ldr	r4, [r1, #16]
 800516a:	1b12      	subs	r2, r2, r4
 800516c:	d10e      	bne.n	800518c <__mcmp+0x28>
 800516e:	f100 0314 	add.w	r3, r0, #20
 8005172:	3114      	adds	r1, #20
 8005174:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005178:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800517c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005180:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005184:	42a5      	cmp	r5, r4
 8005186:	d003      	beq.n	8005190 <__mcmp+0x2c>
 8005188:	d305      	bcc.n	8005196 <__mcmp+0x32>
 800518a:	2201      	movs	r2, #1
 800518c:	4610      	mov	r0, r2
 800518e:	bd30      	pop	{r4, r5, pc}
 8005190:	4283      	cmp	r3, r0
 8005192:	d3f3      	bcc.n	800517c <__mcmp+0x18>
 8005194:	e7fa      	b.n	800518c <__mcmp+0x28>
 8005196:	f04f 32ff 	mov.w	r2, #4294967295
 800519a:	e7f7      	b.n	800518c <__mcmp+0x28>

0800519c <__mdiff>:
 800519c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	460c      	mov	r4, r1
 80051a2:	4606      	mov	r6, r0
 80051a4:	4611      	mov	r1, r2
 80051a6:	4620      	mov	r0, r4
 80051a8:	4690      	mov	r8, r2
 80051aa:	f7ff ffdb 	bl	8005164 <__mcmp>
 80051ae:	1e05      	subs	r5, r0, #0
 80051b0:	d110      	bne.n	80051d4 <__mdiff+0x38>
 80051b2:	4629      	mov	r1, r5
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff fd53 	bl	8004c60 <_Balloc>
 80051ba:	b930      	cbnz	r0, 80051ca <__mdiff+0x2e>
 80051bc:	4b3a      	ldr	r3, [pc, #232]	; (80052a8 <__mdiff+0x10c>)
 80051be:	4602      	mov	r2, r0
 80051c0:	f240 2132 	movw	r1, #562	; 0x232
 80051c4:	4839      	ldr	r0, [pc, #228]	; (80052ac <__mdiff+0x110>)
 80051c6:	f000 f9d5 	bl	8005574 <__assert_func>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	bfa4      	itt	ge
 80051d6:	4643      	movge	r3, r8
 80051d8:	46a0      	movge	r8, r4
 80051da:	4630      	mov	r0, r6
 80051dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80051e0:	bfa6      	itte	ge
 80051e2:	461c      	movge	r4, r3
 80051e4:	2500      	movge	r5, #0
 80051e6:	2501      	movlt	r5, #1
 80051e8:	f7ff fd3a 	bl	8004c60 <_Balloc>
 80051ec:	b920      	cbnz	r0, 80051f8 <__mdiff+0x5c>
 80051ee:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <__mdiff+0x10c>)
 80051f0:	4602      	mov	r2, r0
 80051f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80051f6:	e7e5      	b.n	80051c4 <__mdiff+0x28>
 80051f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80051fc:	6926      	ldr	r6, [r4, #16]
 80051fe:	60c5      	str	r5, [r0, #12]
 8005200:	f104 0914 	add.w	r9, r4, #20
 8005204:	f108 0514 	add.w	r5, r8, #20
 8005208:	f100 0e14 	add.w	lr, r0, #20
 800520c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005210:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005214:	f108 0210 	add.w	r2, r8, #16
 8005218:	46f2      	mov	sl, lr
 800521a:	2100      	movs	r1, #0
 800521c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005220:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005224:	fa1f f883 	uxth.w	r8, r3
 8005228:	fa11 f18b 	uxtah	r1, r1, fp
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	eba1 0808 	sub.w	r8, r1, r8
 8005232:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005236:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800523a:	fa1f f888 	uxth.w	r8, r8
 800523e:	1419      	asrs	r1, r3, #16
 8005240:	454e      	cmp	r6, r9
 8005242:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005246:	f84a 3b04 	str.w	r3, [sl], #4
 800524a:	d8e7      	bhi.n	800521c <__mdiff+0x80>
 800524c:	1b33      	subs	r3, r6, r4
 800524e:	3b15      	subs	r3, #21
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	3304      	adds	r3, #4
 8005256:	3415      	adds	r4, #21
 8005258:	42a6      	cmp	r6, r4
 800525a:	bf38      	it	cc
 800525c:	2304      	movcc	r3, #4
 800525e:	441d      	add	r5, r3
 8005260:	4473      	add	r3, lr
 8005262:	469e      	mov	lr, r3
 8005264:	462e      	mov	r6, r5
 8005266:	4566      	cmp	r6, ip
 8005268:	d30e      	bcc.n	8005288 <__mdiff+0xec>
 800526a:	f10c 0203 	add.w	r2, ip, #3
 800526e:	1b52      	subs	r2, r2, r5
 8005270:	f022 0203 	bic.w	r2, r2, #3
 8005274:	3d03      	subs	r5, #3
 8005276:	45ac      	cmp	ip, r5
 8005278:	bf38      	it	cc
 800527a:	2200      	movcc	r2, #0
 800527c:	441a      	add	r2, r3
 800527e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005282:	b17b      	cbz	r3, 80052a4 <__mdiff+0x108>
 8005284:	6107      	str	r7, [r0, #16]
 8005286:	e7a3      	b.n	80051d0 <__mdiff+0x34>
 8005288:	f856 8b04 	ldr.w	r8, [r6], #4
 800528c:	fa11 f288 	uxtah	r2, r1, r8
 8005290:	1414      	asrs	r4, r2, #16
 8005292:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005296:	b292      	uxth	r2, r2
 8005298:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800529c:	f84e 2b04 	str.w	r2, [lr], #4
 80052a0:	1421      	asrs	r1, r4, #16
 80052a2:	e7e0      	b.n	8005266 <__mdiff+0xca>
 80052a4:	3f01      	subs	r7, #1
 80052a6:	e7ea      	b.n	800527e <__mdiff+0xe2>
 80052a8:	0800703f 	.word	0x0800703f
 80052ac:	08007050 	.word	0x08007050

080052b0 <__d2b>:
 80052b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052b4:	4689      	mov	r9, r1
 80052b6:	2101      	movs	r1, #1
 80052b8:	ec57 6b10 	vmov	r6, r7, d0
 80052bc:	4690      	mov	r8, r2
 80052be:	f7ff fccf 	bl	8004c60 <_Balloc>
 80052c2:	4604      	mov	r4, r0
 80052c4:	b930      	cbnz	r0, 80052d4 <__d2b+0x24>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4b25      	ldr	r3, [pc, #148]	; (8005360 <__d2b+0xb0>)
 80052ca:	4826      	ldr	r0, [pc, #152]	; (8005364 <__d2b+0xb4>)
 80052cc:	f240 310a 	movw	r1, #778	; 0x30a
 80052d0:	f000 f950 	bl	8005574 <__assert_func>
 80052d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80052d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052dc:	bb35      	cbnz	r5, 800532c <__d2b+0x7c>
 80052de:	2e00      	cmp	r6, #0
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	d028      	beq.n	8005336 <__d2b+0x86>
 80052e4:	4668      	mov	r0, sp
 80052e6:	9600      	str	r6, [sp, #0]
 80052e8:	f7ff fd82 	bl	8004df0 <__lo0bits>
 80052ec:	9900      	ldr	r1, [sp, #0]
 80052ee:	b300      	cbz	r0, 8005332 <__d2b+0x82>
 80052f0:	9a01      	ldr	r2, [sp, #4]
 80052f2:	f1c0 0320 	rsb	r3, r0, #32
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	430b      	orrs	r3, r1
 80052fc:	40c2      	lsrs	r2, r0
 80052fe:	6163      	str	r3, [r4, #20]
 8005300:	9201      	str	r2, [sp, #4]
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	61a3      	str	r3, [r4, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf14      	ite	ne
 800530a:	2202      	movne	r2, #2
 800530c:	2201      	moveq	r2, #1
 800530e:	6122      	str	r2, [r4, #16]
 8005310:	b1d5      	cbz	r5, 8005348 <__d2b+0x98>
 8005312:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005316:	4405      	add	r5, r0
 8005318:	f8c9 5000 	str.w	r5, [r9]
 800531c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005320:	f8c8 0000 	str.w	r0, [r8]
 8005324:	4620      	mov	r0, r4
 8005326:	b003      	add	sp, #12
 8005328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800532c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005330:	e7d5      	b.n	80052de <__d2b+0x2e>
 8005332:	6161      	str	r1, [r4, #20]
 8005334:	e7e5      	b.n	8005302 <__d2b+0x52>
 8005336:	a801      	add	r0, sp, #4
 8005338:	f7ff fd5a 	bl	8004df0 <__lo0bits>
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	6163      	str	r3, [r4, #20]
 8005340:	2201      	movs	r2, #1
 8005342:	6122      	str	r2, [r4, #16]
 8005344:	3020      	adds	r0, #32
 8005346:	e7e3      	b.n	8005310 <__d2b+0x60>
 8005348:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800534c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005350:	f8c9 0000 	str.w	r0, [r9]
 8005354:	6918      	ldr	r0, [r3, #16]
 8005356:	f7ff fd2b 	bl	8004db0 <__hi0bits>
 800535a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800535e:	e7df      	b.n	8005320 <__d2b+0x70>
 8005360:	0800703f 	.word	0x0800703f
 8005364:	08007050 	.word	0x08007050

08005368 <_calloc_r>:
 8005368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800536a:	fba1 2402 	umull	r2, r4, r1, r2
 800536e:	b94c      	cbnz	r4, 8005384 <_calloc_r+0x1c>
 8005370:	4611      	mov	r1, r2
 8005372:	9201      	str	r2, [sp, #4]
 8005374:	f000 f87a 	bl	800546c <_malloc_r>
 8005378:	9a01      	ldr	r2, [sp, #4]
 800537a:	4605      	mov	r5, r0
 800537c:	b930      	cbnz	r0, 800538c <_calloc_r+0x24>
 800537e:	4628      	mov	r0, r5
 8005380:	b003      	add	sp, #12
 8005382:	bd30      	pop	{r4, r5, pc}
 8005384:	220c      	movs	r2, #12
 8005386:	6002      	str	r2, [r0, #0]
 8005388:	2500      	movs	r5, #0
 800538a:	e7f8      	b.n	800537e <_calloc_r+0x16>
 800538c:	4621      	mov	r1, r4
 800538e:	f7fe f961 	bl	8003654 <memset>
 8005392:	e7f4      	b.n	800537e <_calloc_r+0x16>

08005394 <_free_r>:
 8005394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005396:	2900      	cmp	r1, #0
 8005398:	d044      	beq.n	8005424 <_free_r+0x90>
 800539a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539e:	9001      	str	r0, [sp, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f1a1 0404 	sub.w	r4, r1, #4
 80053a6:	bfb8      	it	lt
 80053a8:	18e4      	addlt	r4, r4, r3
 80053aa:	f000 f925 	bl	80055f8 <__malloc_lock>
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <_free_r+0x94>)
 80053b0:	9801      	ldr	r0, [sp, #4]
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	b933      	cbnz	r3, 80053c4 <_free_r+0x30>
 80053b6:	6063      	str	r3, [r4, #4]
 80053b8:	6014      	str	r4, [r2, #0]
 80053ba:	b003      	add	sp, #12
 80053bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053c0:	f000 b920 	b.w	8005604 <__malloc_unlock>
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d908      	bls.n	80053da <_free_r+0x46>
 80053c8:	6825      	ldr	r5, [r4, #0]
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf01      	itttt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	1949      	addeq	r1, r1, r5
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	e7ed      	b.n	80053b6 <_free_r+0x22>
 80053da:	461a      	mov	r2, r3
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b10b      	cbz	r3, 80053e4 <_free_r+0x50>
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d9fa      	bls.n	80053da <_free_r+0x46>
 80053e4:	6811      	ldr	r1, [r2, #0]
 80053e6:	1855      	adds	r5, r2, r1
 80053e8:	42a5      	cmp	r5, r4
 80053ea:	d10b      	bne.n	8005404 <_free_r+0x70>
 80053ec:	6824      	ldr	r4, [r4, #0]
 80053ee:	4421      	add	r1, r4
 80053f0:	1854      	adds	r4, r2, r1
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	d1e0      	bne.n	80053ba <_free_r+0x26>
 80053f8:	681c      	ldr	r4, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	6053      	str	r3, [r2, #4]
 80053fe:	4421      	add	r1, r4
 8005400:	6011      	str	r1, [r2, #0]
 8005402:	e7da      	b.n	80053ba <_free_r+0x26>
 8005404:	d902      	bls.n	800540c <_free_r+0x78>
 8005406:	230c      	movs	r3, #12
 8005408:	6003      	str	r3, [r0, #0]
 800540a:	e7d6      	b.n	80053ba <_free_r+0x26>
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	1961      	adds	r1, r4, r5
 8005410:	428b      	cmp	r3, r1
 8005412:	bf04      	itt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	bf04      	itt	eq
 800541c:	1949      	addeq	r1, r1, r5
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	6054      	str	r4, [r2, #4]
 8005422:	e7ca      	b.n	80053ba <_free_r+0x26>
 8005424:	b003      	add	sp, #12
 8005426:	bd30      	pop	{r4, r5, pc}
 8005428:	2000031c 	.word	0x2000031c

0800542c <sbrk_aligned>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4e0e      	ldr	r6, [pc, #56]	; (8005468 <sbrk_aligned+0x3c>)
 8005430:	460c      	mov	r4, r1
 8005432:	6831      	ldr	r1, [r6, #0]
 8005434:	4605      	mov	r5, r0
 8005436:	b911      	cbnz	r1, 800543e <sbrk_aligned+0x12>
 8005438:	f000 f88c 	bl	8005554 <_sbrk_r>
 800543c:	6030      	str	r0, [r6, #0]
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	f000 f887 	bl	8005554 <_sbrk_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d00a      	beq.n	8005460 <sbrk_aligned+0x34>
 800544a:	1cc4      	adds	r4, r0, #3
 800544c:	f024 0403 	bic.w	r4, r4, #3
 8005450:	42a0      	cmp	r0, r4
 8005452:	d007      	beq.n	8005464 <sbrk_aligned+0x38>
 8005454:	1a21      	subs	r1, r4, r0
 8005456:	4628      	mov	r0, r5
 8005458:	f000 f87c 	bl	8005554 <_sbrk_r>
 800545c:	3001      	adds	r0, #1
 800545e:	d101      	bne.n	8005464 <sbrk_aligned+0x38>
 8005460:	f04f 34ff 	mov.w	r4, #4294967295
 8005464:	4620      	mov	r0, r4
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	20000320 	.word	0x20000320

0800546c <_malloc_r>:
 800546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005470:	1ccd      	adds	r5, r1, #3
 8005472:	f025 0503 	bic.w	r5, r5, #3
 8005476:	3508      	adds	r5, #8
 8005478:	2d0c      	cmp	r5, #12
 800547a:	bf38      	it	cc
 800547c:	250c      	movcc	r5, #12
 800547e:	2d00      	cmp	r5, #0
 8005480:	4607      	mov	r7, r0
 8005482:	db01      	blt.n	8005488 <_malloc_r+0x1c>
 8005484:	42a9      	cmp	r1, r5
 8005486:	d905      	bls.n	8005494 <_malloc_r+0x28>
 8005488:	230c      	movs	r3, #12
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	2600      	movs	r6, #0
 800548e:	4630      	mov	r0, r6
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005494:	4e2e      	ldr	r6, [pc, #184]	; (8005550 <_malloc_r+0xe4>)
 8005496:	f000 f8af 	bl	80055f8 <__malloc_lock>
 800549a:	6833      	ldr	r3, [r6, #0]
 800549c:	461c      	mov	r4, r3
 800549e:	bb34      	cbnz	r4, 80054ee <_malloc_r+0x82>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4638      	mov	r0, r7
 80054a4:	f7ff ffc2 	bl	800542c <sbrk_aligned>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	4604      	mov	r4, r0
 80054ac:	d14d      	bne.n	800554a <_malloc_r+0xde>
 80054ae:	6834      	ldr	r4, [r6, #0]
 80054b0:	4626      	mov	r6, r4
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	d140      	bne.n	8005538 <_malloc_r+0xcc>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	4631      	mov	r1, r6
 80054ba:	4638      	mov	r0, r7
 80054bc:	eb04 0803 	add.w	r8, r4, r3
 80054c0:	f000 f848 	bl	8005554 <_sbrk_r>
 80054c4:	4580      	cmp	r8, r0
 80054c6:	d13a      	bne.n	800553e <_malloc_r+0xd2>
 80054c8:	6821      	ldr	r1, [r4, #0]
 80054ca:	3503      	adds	r5, #3
 80054cc:	1a6d      	subs	r5, r5, r1
 80054ce:	f025 0503 	bic.w	r5, r5, #3
 80054d2:	3508      	adds	r5, #8
 80054d4:	2d0c      	cmp	r5, #12
 80054d6:	bf38      	it	cc
 80054d8:	250c      	movcc	r5, #12
 80054da:	4629      	mov	r1, r5
 80054dc:	4638      	mov	r0, r7
 80054de:	f7ff ffa5 	bl	800542c <sbrk_aligned>
 80054e2:	3001      	adds	r0, #1
 80054e4:	d02b      	beq.n	800553e <_malloc_r+0xd2>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	442b      	add	r3, r5
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	e00e      	b.n	800550c <_malloc_r+0xa0>
 80054ee:	6822      	ldr	r2, [r4, #0]
 80054f0:	1b52      	subs	r2, r2, r5
 80054f2:	d41e      	bmi.n	8005532 <_malloc_r+0xc6>
 80054f4:	2a0b      	cmp	r2, #11
 80054f6:	d916      	bls.n	8005526 <_malloc_r+0xba>
 80054f8:	1961      	adds	r1, r4, r5
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	6025      	str	r5, [r4, #0]
 80054fe:	bf18      	it	ne
 8005500:	6059      	strne	r1, [r3, #4]
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	bf08      	it	eq
 8005506:	6031      	streq	r1, [r6, #0]
 8005508:	5162      	str	r2, [r4, r5]
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	4638      	mov	r0, r7
 800550e:	f104 060b 	add.w	r6, r4, #11
 8005512:	f000 f877 	bl	8005604 <__malloc_unlock>
 8005516:	f026 0607 	bic.w	r6, r6, #7
 800551a:	1d23      	adds	r3, r4, #4
 800551c:	1af2      	subs	r2, r6, r3
 800551e:	d0b6      	beq.n	800548e <_malloc_r+0x22>
 8005520:	1b9b      	subs	r3, r3, r6
 8005522:	50a3      	str	r3, [r4, r2]
 8005524:	e7b3      	b.n	800548e <_malloc_r+0x22>
 8005526:	6862      	ldr	r2, [r4, #4]
 8005528:	42a3      	cmp	r3, r4
 800552a:	bf0c      	ite	eq
 800552c:	6032      	streq	r2, [r6, #0]
 800552e:	605a      	strne	r2, [r3, #4]
 8005530:	e7ec      	b.n	800550c <_malloc_r+0xa0>
 8005532:	4623      	mov	r3, r4
 8005534:	6864      	ldr	r4, [r4, #4]
 8005536:	e7b2      	b.n	800549e <_malloc_r+0x32>
 8005538:	4634      	mov	r4, r6
 800553a:	6876      	ldr	r6, [r6, #4]
 800553c:	e7b9      	b.n	80054b2 <_malloc_r+0x46>
 800553e:	230c      	movs	r3, #12
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4638      	mov	r0, r7
 8005544:	f000 f85e 	bl	8005604 <__malloc_unlock>
 8005548:	e7a1      	b.n	800548e <_malloc_r+0x22>
 800554a:	6025      	str	r5, [r4, #0]
 800554c:	e7de      	b.n	800550c <_malloc_r+0xa0>
 800554e:	bf00      	nop
 8005550:	2000031c 	.word	0x2000031c

08005554 <_sbrk_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d06      	ldr	r5, [pc, #24]	; (8005570 <_sbrk_r+0x1c>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f001 fcf8 	bl	8006f54 <_sbrk>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_sbrk_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_sbrk_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000324 	.word	0x20000324

08005574 <__assert_func>:
 8005574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005576:	4614      	mov	r4, r2
 8005578:	461a      	mov	r2, r3
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <__assert_func+0x2c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4605      	mov	r5, r0
 8005580:	68d8      	ldr	r0, [r3, #12]
 8005582:	b14c      	cbz	r4, 8005598 <__assert_func+0x24>
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <__assert_func+0x30>)
 8005586:	9100      	str	r1, [sp, #0]
 8005588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800558c:	4906      	ldr	r1, [pc, #24]	; (80055a8 <__assert_func+0x34>)
 800558e:	462b      	mov	r3, r5
 8005590:	f000 f80e 	bl	80055b0 <fiprintf>
 8005594:	f000 fa64 	bl	8005a60 <abort>
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <__assert_func+0x38>)
 800559a:	461c      	mov	r4, r3
 800559c:	e7f3      	b.n	8005586 <__assert_func+0x12>
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000
 80055a4:	080071ac 	.word	0x080071ac
 80055a8:	080071b9 	.word	0x080071b9
 80055ac:	080071e7 	.word	0x080071e7

080055b0 <fiprintf>:
 80055b0:	b40e      	push	{r1, r2, r3}
 80055b2:	b503      	push	{r0, r1, lr}
 80055b4:	4601      	mov	r1, r0
 80055b6:	ab03      	add	r3, sp, #12
 80055b8:	4805      	ldr	r0, [pc, #20]	; (80055d0 <fiprintf+0x20>)
 80055ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	f000 f84f 	bl	8005664 <_vfiprintf_r>
 80055c6:	b002      	add	sp, #8
 80055c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055cc:	b003      	add	sp, #12
 80055ce:	4770      	bx	lr
 80055d0:	20000000 	.word	0x20000000

080055d4 <__ascii_mbtowc>:
 80055d4:	b082      	sub	sp, #8
 80055d6:	b901      	cbnz	r1, 80055da <__ascii_mbtowc+0x6>
 80055d8:	a901      	add	r1, sp, #4
 80055da:	b142      	cbz	r2, 80055ee <__ascii_mbtowc+0x1a>
 80055dc:	b14b      	cbz	r3, 80055f2 <__ascii_mbtowc+0x1e>
 80055de:	7813      	ldrb	r3, [r2, #0]
 80055e0:	600b      	str	r3, [r1, #0]
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	1e10      	subs	r0, r2, #0
 80055e6:	bf18      	it	ne
 80055e8:	2001      	movne	r0, #1
 80055ea:	b002      	add	sp, #8
 80055ec:	4770      	bx	lr
 80055ee:	4610      	mov	r0, r2
 80055f0:	e7fb      	b.n	80055ea <__ascii_mbtowc+0x16>
 80055f2:	f06f 0001 	mvn.w	r0, #1
 80055f6:	e7f8      	b.n	80055ea <__ascii_mbtowc+0x16>

080055f8 <__malloc_lock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <__malloc_lock+0x8>)
 80055fa:	f000 bbf1 	b.w	8005de0 <__retarget_lock_acquire_recursive>
 80055fe:	bf00      	nop
 8005600:	20000328 	.word	0x20000328

08005604 <__malloc_unlock>:
 8005604:	4801      	ldr	r0, [pc, #4]	; (800560c <__malloc_unlock+0x8>)
 8005606:	f000 bbec 	b.w	8005de2 <__retarget_lock_release_recursive>
 800560a:	bf00      	nop
 800560c:	20000328 	.word	0x20000328

08005610 <__sfputc_r>:
 8005610:	6893      	ldr	r3, [r2, #8]
 8005612:	3b01      	subs	r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	b410      	push	{r4}
 8005618:	6093      	str	r3, [r2, #8]
 800561a:	da08      	bge.n	800562e <__sfputc_r+0x1e>
 800561c:	6994      	ldr	r4, [r2, #24]
 800561e:	42a3      	cmp	r3, r4
 8005620:	db01      	blt.n	8005626 <__sfputc_r+0x16>
 8005622:	290a      	cmp	r1, #10
 8005624:	d103      	bne.n	800562e <__sfputc_r+0x1e>
 8005626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800562a:	f000 b94b 	b.w	80058c4 <__swbuf_r>
 800562e:	6813      	ldr	r3, [r2, #0]
 8005630:	1c58      	adds	r0, r3, #1
 8005632:	6010      	str	r0, [r2, #0]
 8005634:	7019      	strb	r1, [r3, #0]
 8005636:	4608      	mov	r0, r1
 8005638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800563c:	4770      	bx	lr

0800563e <__sfputs_r>:
 800563e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005640:	4606      	mov	r6, r0
 8005642:	460f      	mov	r7, r1
 8005644:	4614      	mov	r4, r2
 8005646:	18d5      	adds	r5, r2, r3
 8005648:	42ac      	cmp	r4, r5
 800564a:	d101      	bne.n	8005650 <__sfputs_r+0x12>
 800564c:	2000      	movs	r0, #0
 800564e:	e007      	b.n	8005660 <__sfputs_r+0x22>
 8005650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005654:	463a      	mov	r2, r7
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff ffda 	bl	8005610 <__sfputc_r>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d1f3      	bne.n	8005648 <__sfputs_r+0xa>
 8005660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005664 <_vfiprintf_r>:
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	460d      	mov	r5, r1
 800566a:	b09d      	sub	sp, #116	; 0x74
 800566c:	4614      	mov	r4, r2
 800566e:	4698      	mov	r8, r3
 8005670:	4606      	mov	r6, r0
 8005672:	b118      	cbz	r0, 800567c <_vfiprintf_r+0x18>
 8005674:	6983      	ldr	r3, [r0, #24]
 8005676:	b90b      	cbnz	r3, 800567c <_vfiprintf_r+0x18>
 8005678:	f000 fb14 	bl	8005ca4 <__sinit>
 800567c:	4b89      	ldr	r3, [pc, #548]	; (80058a4 <_vfiprintf_r+0x240>)
 800567e:	429d      	cmp	r5, r3
 8005680:	d11b      	bne.n	80056ba <_vfiprintf_r+0x56>
 8005682:	6875      	ldr	r5, [r6, #4]
 8005684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005686:	07d9      	lsls	r1, r3, #31
 8005688:	d405      	bmi.n	8005696 <_vfiprintf_r+0x32>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	059a      	lsls	r2, r3, #22
 800568e:	d402      	bmi.n	8005696 <_vfiprintf_r+0x32>
 8005690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005692:	f000 fba5 	bl	8005de0 <__retarget_lock_acquire_recursive>
 8005696:	89ab      	ldrh	r3, [r5, #12]
 8005698:	071b      	lsls	r3, r3, #28
 800569a:	d501      	bpl.n	80056a0 <_vfiprintf_r+0x3c>
 800569c:	692b      	ldr	r3, [r5, #16]
 800569e:	b9eb      	cbnz	r3, 80056dc <_vfiprintf_r+0x78>
 80056a0:	4629      	mov	r1, r5
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f96e 	bl	8005984 <__swsetup_r>
 80056a8:	b1c0      	cbz	r0, 80056dc <_vfiprintf_r+0x78>
 80056aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ac:	07dc      	lsls	r4, r3, #31
 80056ae:	d50e      	bpl.n	80056ce <_vfiprintf_r+0x6a>
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	b01d      	add	sp, #116	; 0x74
 80056b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ba:	4b7b      	ldr	r3, [pc, #492]	; (80058a8 <_vfiprintf_r+0x244>)
 80056bc:	429d      	cmp	r5, r3
 80056be:	d101      	bne.n	80056c4 <_vfiprintf_r+0x60>
 80056c0:	68b5      	ldr	r5, [r6, #8]
 80056c2:	e7df      	b.n	8005684 <_vfiprintf_r+0x20>
 80056c4:	4b79      	ldr	r3, [pc, #484]	; (80058ac <_vfiprintf_r+0x248>)
 80056c6:	429d      	cmp	r5, r3
 80056c8:	bf08      	it	eq
 80056ca:	68f5      	ldreq	r5, [r6, #12]
 80056cc:	e7da      	b.n	8005684 <_vfiprintf_r+0x20>
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	0598      	lsls	r0, r3, #22
 80056d2:	d4ed      	bmi.n	80056b0 <_vfiprintf_r+0x4c>
 80056d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d6:	f000 fb84 	bl	8005de2 <__retarget_lock_release_recursive>
 80056da:	e7e9      	b.n	80056b0 <_vfiprintf_r+0x4c>
 80056dc:	2300      	movs	r3, #0
 80056de:	9309      	str	r3, [sp, #36]	; 0x24
 80056e0:	2320      	movs	r3, #32
 80056e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ea:	2330      	movs	r3, #48	; 0x30
 80056ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058b0 <_vfiprintf_r+0x24c>
 80056f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056f4:	f04f 0901 	mov.w	r9, #1
 80056f8:	4623      	mov	r3, r4
 80056fa:	469a      	mov	sl, r3
 80056fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005700:	b10a      	cbz	r2, 8005706 <_vfiprintf_r+0xa2>
 8005702:	2a25      	cmp	r2, #37	; 0x25
 8005704:	d1f9      	bne.n	80056fa <_vfiprintf_r+0x96>
 8005706:	ebba 0b04 	subs.w	fp, sl, r4
 800570a:	d00b      	beq.n	8005724 <_vfiprintf_r+0xc0>
 800570c:	465b      	mov	r3, fp
 800570e:	4622      	mov	r2, r4
 8005710:	4629      	mov	r1, r5
 8005712:	4630      	mov	r0, r6
 8005714:	f7ff ff93 	bl	800563e <__sfputs_r>
 8005718:	3001      	adds	r0, #1
 800571a:	f000 80aa 	beq.w	8005872 <_vfiprintf_r+0x20e>
 800571e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005720:	445a      	add	r2, fp
 8005722:	9209      	str	r2, [sp, #36]	; 0x24
 8005724:	f89a 3000 	ldrb.w	r3, [sl]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80a2 	beq.w	8005872 <_vfiprintf_r+0x20e>
 800572e:	2300      	movs	r3, #0
 8005730:	f04f 32ff 	mov.w	r2, #4294967295
 8005734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005738:	f10a 0a01 	add.w	sl, sl, #1
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005744:	931a      	str	r3, [sp, #104]	; 0x68
 8005746:	4654      	mov	r4, sl
 8005748:	2205      	movs	r2, #5
 800574a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574e:	4858      	ldr	r0, [pc, #352]	; (80058b0 <_vfiprintf_r+0x24c>)
 8005750:	f7fa fd4e 	bl	80001f0 <memchr>
 8005754:	9a04      	ldr	r2, [sp, #16]
 8005756:	b9d8      	cbnz	r0, 8005790 <_vfiprintf_r+0x12c>
 8005758:	06d1      	lsls	r1, r2, #27
 800575a:	bf44      	itt	mi
 800575c:	2320      	movmi	r3, #32
 800575e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005762:	0713      	lsls	r3, r2, #28
 8005764:	bf44      	itt	mi
 8005766:	232b      	movmi	r3, #43	; 0x2b
 8005768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576c:	f89a 3000 	ldrb.w	r3, [sl]
 8005770:	2b2a      	cmp	r3, #42	; 0x2a
 8005772:	d015      	beq.n	80057a0 <_vfiprintf_r+0x13c>
 8005774:	9a07      	ldr	r2, [sp, #28]
 8005776:	4654      	mov	r4, sl
 8005778:	2000      	movs	r0, #0
 800577a:	f04f 0c0a 	mov.w	ip, #10
 800577e:	4621      	mov	r1, r4
 8005780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005784:	3b30      	subs	r3, #48	; 0x30
 8005786:	2b09      	cmp	r3, #9
 8005788:	d94e      	bls.n	8005828 <_vfiprintf_r+0x1c4>
 800578a:	b1b0      	cbz	r0, 80057ba <_vfiprintf_r+0x156>
 800578c:	9207      	str	r2, [sp, #28]
 800578e:	e014      	b.n	80057ba <_vfiprintf_r+0x156>
 8005790:	eba0 0308 	sub.w	r3, r0, r8
 8005794:	fa09 f303 	lsl.w	r3, r9, r3
 8005798:	4313      	orrs	r3, r2
 800579a:	9304      	str	r3, [sp, #16]
 800579c:	46a2      	mov	sl, r4
 800579e:	e7d2      	b.n	8005746 <_vfiprintf_r+0xe2>
 80057a0:	9b03      	ldr	r3, [sp, #12]
 80057a2:	1d19      	adds	r1, r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	9103      	str	r1, [sp, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bfbb      	ittet	lt
 80057ac:	425b      	neglt	r3, r3
 80057ae:	f042 0202 	orrlt.w	r2, r2, #2
 80057b2:	9307      	strge	r3, [sp, #28]
 80057b4:	9307      	strlt	r3, [sp, #28]
 80057b6:	bfb8      	it	lt
 80057b8:	9204      	strlt	r2, [sp, #16]
 80057ba:	7823      	ldrb	r3, [r4, #0]
 80057bc:	2b2e      	cmp	r3, #46	; 0x2e
 80057be:	d10c      	bne.n	80057da <_vfiprintf_r+0x176>
 80057c0:	7863      	ldrb	r3, [r4, #1]
 80057c2:	2b2a      	cmp	r3, #42	; 0x2a
 80057c4:	d135      	bne.n	8005832 <_vfiprintf_r+0x1ce>
 80057c6:	9b03      	ldr	r3, [sp, #12]
 80057c8:	1d1a      	adds	r2, r3, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	9203      	str	r2, [sp, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bfb8      	it	lt
 80057d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80057d6:	3402      	adds	r4, #2
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058c0 <_vfiprintf_r+0x25c>
 80057de:	7821      	ldrb	r1, [r4, #0]
 80057e0:	2203      	movs	r2, #3
 80057e2:	4650      	mov	r0, sl
 80057e4:	f7fa fd04 	bl	80001f0 <memchr>
 80057e8:	b140      	cbz	r0, 80057fc <_vfiprintf_r+0x198>
 80057ea:	2340      	movs	r3, #64	; 0x40
 80057ec:	eba0 000a 	sub.w	r0, r0, sl
 80057f0:	fa03 f000 	lsl.w	r0, r3, r0
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	4303      	orrs	r3, r0
 80057f8:	3401      	adds	r4, #1
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005800:	482c      	ldr	r0, [pc, #176]	; (80058b4 <_vfiprintf_r+0x250>)
 8005802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005806:	2206      	movs	r2, #6
 8005808:	f7fa fcf2 	bl	80001f0 <memchr>
 800580c:	2800      	cmp	r0, #0
 800580e:	d03f      	beq.n	8005890 <_vfiprintf_r+0x22c>
 8005810:	4b29      	ldr	r3, [pc, #164]	; (80058b8 <_vfiprintf_r+0x254>)
 8005812:	bb1b      	cbnz	r3, 800585c <_vfiprintf_r+0x1f8>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	3307      	adds	r3, #7
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	3308      	adds	r3, #8
 800581e:	9303      	str	r3, [sp, #12]
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	443b      	add	r3, r7
 8005824:	9309      	str	r3, [sp, #36]	; 0x24
 8005826:	e767      	b.n	80056f8 <_vfiprintf_r+0x94>
 8005828:	fb0c 3202 	mla	r2, ip, r2, r3
 800582c:	460c      	mov	r4, r1
 800582e:	2001      	movs	r0, #1
 8005830:	e7a5      	b.n	800577e <_vfiprintf_r+0x11a>
 8005832:	2300      	movs	r3, #0
 8005834:	3401      	adds	r4, #1
 8005836:	9305      	str	r3, [sp, #20]
 8005838:	4619      	mov	r1, r3
 800583a:	f04f 0c0a 	mov.w	ip, #10
 800583e:	4620      	mov	r0, r4
 8005840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005844:	3a30      	subs	r2, #48	; 0x30
 8005846:	2a09      	cmp	r2, #9
 8005848:	d903      	bls.n	8005852 <_vfiprintf_r+0x1ee>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0c5      	beq.n	80057da <_vfiprintf_r+0x176>
 800584e:	9105      	str	r1, [sp, #20]
 8005850:	e7c3      	b.n	80057da <_vfiprintf_r+0x176>
 8005852:	fb0c 2101 	mla	r1, ip, r1, r2
 8005856:	4604      	mov	r4, r0
 8005858:	2301      	movs	r3, #1
 800585a:	e7f0      	b.n	800583e <_vfiprintf_r+0x1da>
 800585c:	ab03      	add	r3, sp, #12
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	462a      	mov	r2, r5
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <_vfiprintf_r+0x258>)
 8005864:	a904      	add	r1, sp, #16
 8005866:	4630      	mov	r0, r6
 8005868:	f7fd ff9c 	bl	80037a4 <_printf_float>
 800586c:	4607      	mov	r7, r0
 800586e:	1c78      	adds	r0, r7, #1
 8005870:	d1d6      	bne.n	8005820 <_vfiprintf_r+0x1bc>
 8005872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005874:	07d9      	lsls	r1, r3, #31
 8005876:	d405      	bmi.n	8005884 <_vfiprintf_r+0x220>
 8005878:	89ab      	ldrh	r3, [r5, #12]
 800587a:	059a      	lsls	r2, r3, #22
 800587c:	d402      	bmi.n	8005884 <_vfiprintf_r+0x220>
 800587e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005880:	f000 faaf 	bl	8005de2 <__retarget_lock_release_recursive>
 8005884:	89ab      	ldrh	r3, [r5, #12]
 8005886:	065b      	lsls	r3, r3, #25
 8005888:	f53f af12 	bmi.w	80056b0 <_vfiprintf_r+0x4c>
 800588c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800588e:	e711      	b.n	80056b4 <_vfiprintf_r+0x50>
 8005890:	ab03      	add	r3, sp, #12
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	462a      	mov	r2, r5
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <_vfiprintf_r+0x258>)
 8005898:	a904      	add	r1, sp, #16
 800589a:	4630      	mov	r0, r6
 800589c:	f7fe fa26 	bl	8003cec <_printf_i>
 80058a0:	e7e4      	b.n	800586c <_vfiprintf_r+0x208>
 80058a2:	bf00      	nop
 80058a4:	08007324 	.word	0x08007324
 80058a8:	08007344 	.word	0x08007344
 80058ac:	08007304 	.word	0x08007304
 80058b0:	080071f2 	.word	0x080071f2
 80058b4:	080071fc 	.word	0x080071fc
 80058b8:	080037a5 	.word	0x080037a5
 80058bc:	0800563f 	.word	0x0800563f
 80058c0:	080071f8 	.word	0x080071f8

080058c4 <__swbuf_r>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	460e      	mov	r6, r1
 80058c8:	4614      	mov	r4, r2
 80058ca:	4605      	mov	r5, r0
 80058cc:	b118      	cbz	r0, 80058d6 <__swbuf_r+0x12>
 80058ce:	6983      	ldr	r3, [r0, #24]
 80058d0:	b90b      	cbnz	r3, 80058d6 <__swbuf_r+0x12>
 80058d2:	f000 f9e7 	bl	8005ca4 <__sinit>
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <__swbuf_r+0x98>)
 80058d8:	429c      	cmp	r4, r3
 80058da:	d12b      	bne.n	8005934 <__swbuf_r+0x70>
 80058dc:	686c      	ldr	r4, [r5, #4]
 80058de:	69a3      	ldr	r3, [r4, #24]
 80058e0:	60a3      	str	r3, [r4, #8]
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	071a      	lsls	r2, r3, #28
 80058e6:	d52f      	bpl.n	8005948 <__swbuf_r+0x84>
 80058e8:	6923      	ldr	r3, [r4, #16]
 80058ea:	b36b      	cbz	r3, 8005948 <__swbuf_r+0x84>
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	6820      	ldr	r0, [r4, #0]
 80058f0:	1ac0      	subs	r0, r0, r3
 80058f2:	6963      	ldr	r3, [r4, #20]
 80058f4:	b2f6      	uxtb	r6, r6
 80058f6:	4283      	cmp	r3, r0
 80058f8:	4637      	mov	r7, r6
 80058fa:	dc04      	bgt.n	8005906 <__swbuf_r+0x42>
 80058fc:	4621      	mov	r1, r4
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 f93c 	bl	8005b7c <_fflush_r>
 8005904:	bb30      	cbnz	r0, 8005954 <__swbuf_r+0x90>
 8005906:	68a3      	ldr	r3, [r4, #8]
 8005908:	3b01      	subs	r3, #1
 800590a:	60a3      	str	r3, [r4, #8]
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	6022      	str	r2, [r4, #0]
 8005912:	701e      	strb	r6, [r3, #0]
 8005914:	6963      	ldr	r3, [r4, #20]
 8005916:	3001      	adds	r0, #1
 8005918:	4283      	cmp	r3, r0
 800591a:	d004      	beq.n	8005926 <__swbuf_r+0x62>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	07db      	lsls	r3, r3, #31
 8005920:	d506      	bpl.n	8005930 <__swbuf_r+0x6c>
 8005922:	2e0a      	cmp	r6, #10
 8005924:	d104      	bne.n	8005930 <__swbuf_r+0x6c>
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f000 f927 	bl	8005b7c <_fflush_r>
 800592e:	b988      	cbnz	r0, 8005954 <__swbuf_r+0x90>
 8005930:	4638      	mov	r0, r7
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <__swbuf_r+0x9c>)
 8005936:	429c      	cmp	r4, r3
 8005938:	d101      	bne.n	800593e <__swbuf_r+0x7a>
 800593a:	68ac      	ldr	r4, [r5, #8]
 800593c:	e7cf      	b.n	80058de <__swbuf_r+0x1a>
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <__swbuf_r+0xa0>)
 8005940:	429c      	cmp	r4, r3
 8005942:	bf08      	it	eq
 8005944:	68ec      	ldreq	r4, [r5, #12]
 8005946:	e7ca      	b.n	80058de <__swbuf_r+0x1a>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f81a 	bl	8005984 <__swsetup_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	d0cb      	beq.n	80058ec <__swbuf_r+0x28>
 8005954:	f04f 37ff 	mov.w	r7, #4294967295
 8005958:	e7ea      	b.n	8005930 <__swbuf_r+0x6c>
 800595a:	bf00      	nop
 800595c:	08007324 	.word	0x08007324
 8005960:	08007344 	.word	0x08007344
 8005964:	08007304 	.word	0x08007304

08005968 <__ascii_wctomb>:
 8005968:	b149      	cbz	r1, 800597e <__ascii_wctomb+0x16>
 800596a:	2aff      	cmp	r2, #255	; 0xff
 800596c:	bf85      	ittet	hi
 800596e:	238a      	movhi	r3, #138	; 0x8a
 8005970:	6003      	strhi	r3, [r0, #0]
 8005972:	700a      	strbls	r2, [r1, #0]
 8005974:	f04f 30ff 	movhi.w	r0, #4294967295
 8005978:	bf98      	it	ls
 800597a:	2001      	movls	r0, #1
 800597c:	4770      	bx	lr
 800597e:	4608      	mov	r0, r1
 8005980:	4770      	bx	lr
	...

08005984 <__swsetup_r>:
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <__swsetup_r+0xcc>)
 8005986:	b570      	push	{r4, r5, r6, lr}
 8005988:	681d      	ldr	r5, [r3, #0]
 800598a:	4606      	mov	r6, r0
 800598c:	460c      	mov	r4, r1
 800598e:	b125      	cbz	r5, 800599a <__swsetup_r+0x16>
 8005990:	69ab      	ldr	r3, [r5, #24]
 8005992:	b913      	cbnz	r3, 800599a <__swsetup_r+0x16>
 8005994:	4628      	mov	r0, r5
 8005996:	f000 f985 	bl	8005ca4 <__sinit>
 800599a:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <__swsetup_r+0xd0>)
 800599c:	429c      	cmp	r4, r3
 800599e:	d10f      	bne.n	80059c0 <__swsetup_r+0x3c>
 80059a0:	686c      	ldr	r4, [r5, #4]
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059a8:	0719      	lsls	r1, r3, #28
 80059aa:	d42c      	bmi.n	8005a06 <__swsetup_r+0x82>
 80059ac:	06dd      	lsls	r5, r3, #27
 80059ae:	d411      	bmi.n	80059d4 <__swsetup_r+0x50>
 80059b0:	2309      	movs	r3, #9
 80059b2:	6033      	str	r3, [r6, #0]
 80059b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295
 80059be:	e03e      	b.n	8005a3e <__swsetup_r+0xba>
 80059c0:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <__swsetup_r+0xd4>)
 80059c2:	429c      	cmp	r4, r3
 80059c4:	d101      	bne.n	80059ca <__swsetup_r+0x46>
 80059c6:	68ac      	ldr	r4, [r5, #8]
 80059c8:	e7eb      	b.n	80059a2 <__swsetup_r+0x1e>
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <__swsetup_r+0xd8>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	bf08      	it	eq
 80059d0:	68ec      	ldreq	r4, [r5, #12]
 80059d2:	e7e6      	b.n	80059a2 <__swsetup_r+0x1e>
 80059d4:	0758      	lsls	r0, r3, #29
 80059d6:	d512      	bpl.n	80059fe <__swsetup_r+0x7a>
 80059d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059da:	b141      	cbz	r1, 80059ee <__swsetup_r+0x6a>
 80059dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e0:	4299      	cmp	r1, r3
 80059e2:	d002      	beq.n	80059ea <__swsetup_r+0x66>
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff fcd5 	bl	8005394 <_free_r>
 80059ea:	2300      	movs	r3, #0
 80059ec:	6363      	str	r3, [r4, #52]	; 0x34
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	2300      	movs	r3, #0
 80059f8:	6063      	str	r3, [r4, #4]
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f043 0308 	orr.w	r3, r3, #8
 8005a04:	81a3      	strh	r3, [r4, #12]
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	b94b      	cbnz	r3, 8005a1e <__swsetup_r+0x9a>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a14:	d003      	beq.n	8005a1e <__swsetup_r+0x9a>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 fa09 	bl	8005e30 <__smakebuf_r>
 8005a1e:	89a0      	ldrh	r0, [r4, #12]
 8005a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a24:	f010 0301 	ands.w	r3, r0, #1
 8005a28:	d00a      	beq.n	8005a40 <__swsetup_r+0xbc>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60a3      	str	r3, [r4, #8]
 8005a2e:	6963      	ldr	r3, [r4, #20]
 8005a30:	425b      	negs	r3, r3
 8005a32:	61a3      	str	r3, [r4, #24]
 8005a34:	6923      	ldr	r3, [r4, #16]
 8005a36:	b943      	cbnz	r3, 8005a4a <__swsetup_r+0xc6>
 8005a38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a3c:	d1ba      	bne.n	80059b4 <__swsetup_r+0x30>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	0781      	lsls	r1, r0, #30
 8005a42:	bf58      	it	pl
 8005a44:	6963      	ldrpl	r3, [r4, #20]
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	e7f4      	b.n	8005a34 <__swsetup_r+0xb0>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	e7f7      	b.n	8005a3e <__swsetup_r+0xba>
 8005a4e:	bf00      	nop
 8005a50:	20000000 	.word	0x20000000
 8005a54:	08007324 	.word	0x08007324
 8005a58:	08007344 	.word	0x08007344
 8005a5c:	08007304 	.word	0x08007304

08005a60 <abort>:
 8005a60:	b508      	push	{r3, lr}
 8005a62:	2006      	movs	r0, #6
 8005a64:	f000 fa4c 	bl	8005f00 <raise>
 8005a68:	2001      	movs	r0, #1
 8005a6a:	f7fb faf9 	bl	8001060 <_exit>
	...

08005a70 <__sflush_r>:
 8005a70:	898a      	ldrh	r2, [r1, #12]
 8005a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a76:	4605      	mov	r5, r0
 8005a78:	0710      	lsls	r0, r2, #28
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	d458      	bmi.n	8005b30 <__sflush_r+0xc0>
 8005a7e:	684b      	ldr	r3, [r1, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dc05      	bgt.n	8005a90 <__sflush_r+0x20>
 8005a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	dc02      	bgt.n	8005a90 <__sflush_r+0x20>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a92:	2e00      	cmp	r6, #0
 8005a94:	d0f9      	beq.n	8005a8a <__sflush_r+0x1a>
 8005a96:	2300      	movs	r3, #0
 8005a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a9c:	682f      	ldr	r7, [r5, #0]
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	d032      	beq.n	8005b08 <__sflush_r+0x98>
 8005aa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	075a      	lsls	r2, r3, #29
 8005aa8:	d505      	bpl.n	8005ab6 <__sflush_r+0x46>
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	1ac0      	subs	r0, r0, r3
 8005aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ab0:	b10b      	cbz	r3, 8005ab6 <__sflush_r+0x46>
 8005ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ab4:	1ac0      	subs	r0, r0, r3
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005abc:	6a21      	ldr	r1, [r4, #32]
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b0      	blx	r6
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	d106      	bne.n	8005ad6 <__sflush_r+0x66>
 8005ac8:	6829      	ldr	r1, [r5, #0]
 8005aca:	291d      	cmp	r1, #29
 8005acc:	d82c      	bhi.n	8005b28 <__sflush_r+0xb8>
 8005ace:	4a2a      	ldr	r2, [pc, #168]	; (8005b78 <__sflush_r+0x108>)
 8005ad0:	40ca      	lsrs	r2, r1
 8005ad2:	07d6      	lsls	r6, r2, #31
 8005ad4:	d528      	bpl.n	8005b28 <__sflush_r+0xb8>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	6062      	str	r2, [r4, #4]
 8005ada:	04d9      	lsls	r1, r3, #19
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	d504      	bpl.n	8005aec <__sflush_r+0x7c>
 8005ae2:	1c42      	adds	r2, r0, #1
 8005ae4:	d101      	bne.n	8005aea <__sflush_r+0x7a>
 8005ae6:	682b      	ldr	r3, [r5, #0]
 8005ae8:	b903      	cbnz	r3, 8005aec <__sflush_r+0x7c>
 8005aea:	6560      	str	r0, [r4, #84]	; 0x54
 8005aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aee:	602f      	str	r7, [r5, #0]
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d0ca      	beq.n	8005a8a <__sflush_r+0x1a>
 8005af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d002      	beq.n	8005b02 <__sflush_r+0x92>
 8005afc:	4628      	mov	r0, r5
 8005afe:	f7ff fc49 	bl	8005394 <_free_r>
 8005b02:	2000      	movs	r0, #0
 8005b04:	6360      	str	r0, [r4, #52]	; 0x34
 8005b06:	e7c1      	b.n	8005a8c <__sflush_r+0x1c>
 8005b08:	6a21      	ldr	r1, [r4, #32]
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b0      	blx	r6
 8005b10:	1c41      	adds	r1, r0, #1
 8005b12:	d1c7      	bne.n	8005aa4 <__sflush_r+0x34>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0c4      	beq.n	8005aa4 <__sflush_r+0x34>
 8005b1a:	2b1d      	cmp	r3, #29
 8005b1c:	d001      	beq.n	8005b22 <__sflush_r+0xb2>
 8005b1e:	2b16      	cmp	r3, #22
 8005b20:	d101      	bne.n	8005b26 <__sflush_r+0xb6>
 8005b22:	602f      	str	r7, [r5, #0]
 8005b24:	e7b1      	b.n	8005a8a <__sflush_r+0x1a>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	e7ad      	b.n	8005a8c <__sflush_r+0x1c>
 8005b30:	690f      	ldr	r7, [r1, #16]
 8005b32:	2f00      	cmp	r7, #0
 8005b34:	d0a9      	beq.n	8005a8a <__sflush_r+0x1a>
 8005b36:	0793      	lsls	r3, r2, #30
 8005b38:	680e      	ldr	r6, [r1, #0]
 8005b3a:	bf08      	it	eq
 8005b3c:	694b      	ldreq	r3, [r1, #20]
 8005b3e:	600f      	str	r7, [r1, #0]
 8005b40:	bf18      	it	ne
 8005b42:	2300      	movne	r3, #0
 8005b44:	eba6 0807 	sub.w	r8, r6, r7
 8005b48:	608b      	str	r3, [r1, #8]
 8005b4a:	f1b8 0f00 	cmp.w	r8, #0
 8005b4e:	dd9c      	ble.n	8005a8a <__sflush_r+0x1a>
 8005b50:	6a21      	ldr	r1, [r4, #32]
 8005b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b54:	4643      	mov	r3, r8
 8005b56:	463a      	mov	r2, r7
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	dc06      	bgt.n	8005b6e <__sflush_r+0xfe>
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	e78e      	b.n	8005a8c <__sflush_r+0x1c>
 8005b6e:	4407      	add	r7, r0
 8005b70:	eba8 0800 	sub.w	r8, r8, r0
 8005b74:	e7e9      	b.n	8005b4a <__sflush_r+0xda>
 8005b76:	bf00      	nop
 8005b78:	20400001 	.word	0x20400001

08005b7c <_fflush_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	690b      	ldr	r3, [r1, #16]
 8005b80:	4605      	mov	r5, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b913      	cbnz	r3, 8005b8c <_fflush_r+0x10>
 8005b86:	2500      	movs	r5, #0
 8005b88:	4628      	mov	r0, r5
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	b118      	cbz	r0, 8005b96 <_fflush_r+0x1a>
 8005b8e:	6983      	ldr	r3, [r0, #24]
 8005b90:	b90b      	cbnz	r3, 8005b96 <_fflush_r+0x1a>
 8005b92:	f000 f887 	bl	8005ca4 <__sinit>
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <_fflush_r+0x6c>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	d11b      	bne.n	8005bd4 <_fflush_r+0x58>
 8005b9c:	686c      	ldr	r4, [r5, #4]
 8005b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ef      	beq.n	8005b86 <_fflush_r+0xa>
 8005ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ba8:	07d0      	lsls	r0, r2, #31
 8005baa:	d404      	bmi.n	8005bb6 <_fflush_r+0x3a>
 8005bac:	0599      	lsls	r1, r3, #22
 8005bae:	d402      	bmi.n	8005bb6 <_fflush_r+0x3a>
 8005bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bb2:	f000 f915 	bl	8005de0 <__retarget_lock_acquire_recursive>
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	4621      	mov	r1, r4
 8005bba:	f7ff ff59 	bl	8005a70 <__sflush_r>
 8005bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bc0:	07da      	lsls	r2, r3, #31
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	d4e0      	bmi.n	8005b88 <_fflush_r+0xc>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	059b      	lsls	r3, r3, #22
 8005bca:	d4dd      	bmi.n	8005b88 <_fflush_r+0xc>
 8005bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bce:	f000 f908 	bl	8005de2 <__retarget_lock_release_recursive>
 8005bd2:	e7d9      	b.n	8005b88 <_fflush_r+0xc>
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <_fflush_r+0x70>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d101      	bne.n	8005bde <_fflush_r+0x62>
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	e7df      	b.n	8005b9e <_fflush_r+0x22>
 8005bde:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <_fflush_r+0x74>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf08      	it	eq
 8005be4:	68ec      	ldreq	r4, [r5, #12]
 8005be6:	e7da      	b.n	8005b9e <_fflush_r+0x22>
 8005be8:	08007324 	.word	0x08007324
 8005bec:	08007344 	.word	0x08007344
 8005bf0:	08007304 	.word	0x08007304

08005bf4 <std>:
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	b510      	push	{r4, lr}
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8005bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c02:	6083      	str	r3, [r0, #8]
 8005c04:	8181      	strh	r1, [r0, #12]
 8005c06:	6643      	str	r3, [r0, #100]	; 0x64
 8005c08:	81c2      	strh	r2, [r0, #14]
 8005c0a:	6183      	str	r3, [r0, #24]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	2208      	movs	r2, #8
 8005c10:	305c      	adds	r0, #92	; 0x5c
 8005c12:	f7fd fd1f 	bl	8003654 <memset>
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <std+0x38>)
 8005c18:	6263      	str	r3, [r4, #36]	; 0x24
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <std+0x3c>)
 8005c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <std+0x40>)
 8005c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <std+0x44>)
 8005c24:	6224      	str	r4, [r4, #32]
 8005c26:	6323      	str	r3, [r4, #48]	; 0x30
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08005f39 	.word	0x08005f39
 8005c30:	08005f5b 	.word	0x08005f5b
 8005c34:	08005f93 	.word	0x08005f93
 8005c38:	08005fb7 	.word	0x08005fb7

08005c3c <_cleanup_r>:
 8005c3c:	4901      	ldr	r1, [pc, #4]	; (8005c44 <_cleanup_r+0x8>)
 8005c3e:	f000 b8af 	b.w	8005da0 <_fwalk_reent>
 8005c42:	bf00      	nop
 8005c44:	08005b7d 	.word	0x08005b7d

08005c48 <__sfmoreglue>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	2268      	movs	r2, #104	; 0x68
 8005c4c:	1e4d      	subs	r5, r1, #1
 8005c4e:	4355      	muls	r5, r2
 8005c50:	460e      	mov	r6, r1
 8005c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c56:	f7ff fc09 	bl	800546c <_malloc_r>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	b140      	cbz	r0, 8005c70 <__sfmoreglue+0x28>
 8005c5e:	2100      	movs	r1, #0
 8005c60:	e9c0 1600 	strd	r1, r6, [r0]
 8005c64:	300c      	adds	r0, #12
 8005c66:	60a0      	str	r0, [r4, #8]
 8005c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c6c:	f7fd fcf2 	bl	8003654 <memset>
 8005c70:	4620      	mov	r0, r4
 8005c72:	bd70      	pop	{r4, r5, r6, pc}

08005c74 <__sfp_lock_acquire>:
 8005c74:	4801      	ldr	r0, [pc, #4]	; (8005c7c <__sfp_lock_acquire+0x8>)
 8005c76:	f000 b8b3 	b.w	8005de0 <__retarget_lock_acquire_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	20000329 	.word	0x20000329

08005c80 <__sfp_lock_release>:
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <__sfp_lock_release+0x8>)
 8005c82:	f000 b8ae 	b.w	8005de2 <__retarget_lock_release_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000329 	.word	0x20000329

08005c8c <__sinit_lock_acquire>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <__sinit_lock_acquire+0x8>)
 8005c8e:	f000 b8a7 	b.w	8005de0 <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	2000032a 	.word	0x2000032a

08005c98 <__sinit_lock_release>:
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <__sinit_lock_release+0x8>)
 8005c9a:	f000 b8a2 	b.w	8005de2 <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	2000032a 	.word	0x2000032a

08005ca4 <__sinit>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	f7ff fff0 	bl	8005c8c <__sinit_lock_acquire>
 8005cac:	69a3      	ldr	r3, [r4, #24]
 8005cae:	b11b      	cbz	r3, 8005cb8 <__sinit+0x14>
 8005cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb4:	f7ff bff0 	b.w	8005c98 <__sinit_lock_release>
 8005cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <__sinit+0x68>)
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <__sinit+0x6c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cc6:	42a3      	cmp	r3, r4
 8005cc8:	bf04      	itt	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	61a3      	streq	r3, [r4, #24]
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 f820 	bl	8005d14 <__sfp>
 8005cd4:	6060      	str	r0, [r4, #4]
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 f81c 	bl	8005d14 <__sfp>
 8005cdc:	60a0      	str	r0, [r4, #8]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 f818 	bl	8005d14 <__sfp>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	60e0      	str	r0, [r4, #12]
 8005ce8:	2104      	movs	r1, #4
 8005cea:	6860      	ldr	r0, [r4, #4]
 8005cec:	f7ff ff82 	bl	8005bf4 <std>
 8005cf0:	68a0      	ldr	r0, [r4, #8]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	2109      	movs	r1, #9
 8005cf6:	f7ff ff7d 	bl	8005bf4 <std>
 8005cfa:	68e0      	ldr	r0, [r4, #12]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	2112      	movs	r1, #18
 8005d00:	f7ff ff78 	bl	8005bf4 <std>
 8005d04:	2301      	movs	r3, #1
 8005d06:	61a3      	str	r3, [r4, #24]
 8005d08:	e7d2      	b.n	8005cb0 <__sinit+0xc>
 8005d0a:	bf00      	nop
 8005d0c:	08006f88 	.word	0x08006f88
 8005d10:	08005c3d 	.word	0x08005c3d

08005d14 <__sfp>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	4607      	mov	r7, r0
 8005d18:	f7ff ffac 	bl	8005c74 <__sfp_lock_acquire>
 8005d1c:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <__sfp+0x84>)
 8005d1e:	681e      	ldr	r6, [r3, #0]
 8005d20:	69b3      	ldr	r3, [r6, #24]
 8005d22:	b913      	cbnz	r3, 8005d2a <__sfp+0x16>
 8005d24:	4630      	mov	r0, r6
 8005d26:	f7ff ffbd 	bl	8005ca4 <__sinit>
 8005d2a:	3648      	adds	r6, #72	; 0x48
 8005d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	d503      	bpl.n	8005d3c <__sfp+0x28>
 8005d34:	6833      	ldr	r3, [r6, #0]
 8005d36:	b30b      	cbz	r3, 8005d7c <__sfp+0x68>
 8005d38:	6836      	ldr	r6, [r6, #0]
 8005d3a:	e7f7      	b.n	8005d2c <__sfp+0x18>
 8005d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d40:	b9d5      	cbnz	r5, 8005d78 <__sfp+0x64>
 8005d42:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <__sfp+0x88>)
 8005d44:	60e3      	str	r3, [r4, #12]
 8005d46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8005d4c:	f000 f847 	bl	8005dde <__retarget_lock_init_recursive>
 8005d50:	f7ff ff96 	bl	8005c80 <__sfp_lock_release>
 8005d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d5c:	6025      	str	r5, [r4, #0]
 8005d5e:	61a5      	str	r5, [r4, #24]
 8005d60:	2208      	movs	r2, #8
 8005d62:	4629      	mov	r1, r5
 8005d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d68:	f7fd fc74 	bl	8003654 <memset>
 8005d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d74:	4620      	mov	r0, r4
 8005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d78:	3468      	adds	r4, #104	; 0x68
 8005d7a:	e7d9      	b.n	8005d30 <__sfp+0x1c>
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f7ff ff62 	bl	8005c48 <__sfmoreglue>
 8005d84:	4604      	mov	r4, r0
 8005d86:	6030      	str	r0, [r6, #0]
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d1d5      	bne.n	8005d38 <__sfp+0x24>
 8005d8c:	f7ff ff78 	bl	8005c80 <__sfp_lock_release>
 8005d90:	230c      	movs	r3, #12
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	e7ee      	b.n	8005d74 <__sfp+0x60>
 8005d96:	bf00      	nop
 8005d98:	08006f88 	.word	0x08006f88
 8005d9c:	ffff0001 	.word	0xffff0001

08005da0 <_fwalk_reent>:
 8005da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da4:	4606      	mov	r6, r0
 8005da6:	4688      	mov	r8, r1
 8005da8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dac:	2700      	movs	r7, #0
 8005dae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005db2:	f1b9 0901 	subs.w	r9, r9, #1
 8005db6:	d505      	bpl.n	8005dc4 <_fwalk_reent+0x24>
 8005db8:	6824      	ldr	r4, [r4, #0]
 8005dba:	2c00      	cmp	r4, #0
 8005dbc:	d1f7      	bne.n	8005dae <_fwalk_reent+0xe>
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc4:	89ab      	ldrh	r3, [r5, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d907      	bls.n	8005dda <_fwalk_reent+0x3a>
 8005dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	d003      	beq.n	8005dda <_fwalk_reent+0x3a>
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	47c0      	blx	r8
 8005dd8:	4307      	orrs	r7, r0
 8005dda:	3568      	adds	r5, #104	; 0x68
 8005ddc:	e7e9      	b.n	8005db2 <_fwalk_reent+0x12>

08005dde <__retarget_lock_init_recursive>:
 8005dde:	4770      	bx	lr

08005de0 <__retarget_lock_acquire_recursive>:
 8005de0:	4770      	bx	lr

08005de2 <__retarget_lock_release_recursive>:
 8005de2:	4770      	bx	lr

08005de4 <__swhatbuf_r>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	460e      	mov	r6, r1
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	2900      	cmp	r1, #0
 8005dee:	b096      	sub	sp, #88	; 0x58
 8005df0:	4614      	mov	r4, r2
 8005df2:	461d      	mov	r5, r3
 8005df4:	da08      	bge.n	8005e08 <__swhatbuf_r+0x24>
 8005df6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	061a      	lsls	r2, r3, #24
 8005e00:	d410      	bmi.n	8005e24 <__swhatbuf_r+0x40>
 8005e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e06:	e00e      	b.n	8005e26 <__swhatbuf_r+0x42>
 8005e08:	466a      	mov	r2, sp
 8005e0a:	f000 f8fb 	bl	8006004 <_fstat_r>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	dbf1      	blt.n	8005df6 <__swhatbuf_r+0x12>
 8005e12:	9a01      	ldr	r2, [sp, #4]
 8005e14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e1c:	425a      	negs	r2, r3
 8005e1e:	415a      	adcs	r2, r3
 8005e20:	602a      	str	r2, [r5, #0]
 8005e22:	e7ee      	b.n	8005e02 <__swhatbuf_r+0x1e>
 8005e24:	2340      	movs	r3, #64	; 0x40
 8005e26:	2000      	movs	r0, #0
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	b016      	add	sp, #88	; 0x58
 8005e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e30 <__smakebuf_r>:
 8005e30:	898b      	ldrh	r3, [r1, #12]
 8005e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e34:	079d      	lsls	r5, r3, #30
 8005e36:	4606      	mov	r6, r0
 8005e38:	460c      	mov	r4, r1
 8005e3a:	d507      	bpl.n	8005e4c <__smakebuf_r+0x1c>
 8005e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	6123      	str	r3, [r4, #16]
 8005e44:	2301      	movs	r3, #1
 8005e46:	6163      	str	r3, [r4, #20]
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	ab01      	add	r3, sp, #4
 8005e4e:	466a      	mov	r2, sp
 8005e50:	f7ff ffc8 	bl	8005de4 <__swhatbuf_r>
 8005e54:	9900      	ldr	r1, [sp, #0]
 8005e56:	4605      	mov	r5, r0
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f7ff fb07 	bl	800546c <_malloc_r>
 8005e5e:	b948      	cbnz	r0, 8005e74 <__smakebuf_r+0x44>
 8005e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e64:	059a      	lsls	r2, r3, #22
 8005e66:	d4ef      	bmi.n	8005e48 <__smakebuf_r+0x18>
 8005e68:	f023 0303 	bic.w	r3, r3, #3
 8005e6c:	f043 0302 	orr.w	r3, r3, #2
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	e7e3      	b.n	8005e3c <__smakebuf_r+0xc>
 8005e74:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <__smakebuf_r+0x7c>)
 8005e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	6020      	str	r0, [r4, #0]
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	9b00      	ldr	r3, [sp, #0]
 8005e84:	6163      	str	r3, [r4, #20]
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	6120      	str	r0, [r4, #16]
 8005e8a:	b15b      	cbz	r3, 8005ea4 <__smakebuf_r+0x74>
 8005e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e90:	4630      	mov	r0, r6
 8005e92:	f000 f8c9 	bl	8006028 <_isatty_r>
 8005e96:	b128      	cbz	r0, 8005ea4 <__smakebuf_r+0x74>
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	f023 0303 	bic.w	r3, r3, #3
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	89a0      	ldrh	r0, [r4, #12]
 8005ea6:	4305      	orrs	r5, r0
 8005ea8:	81a5      	strh	r5, [r4, #12]
 8005eaa:	e7cd      	b.n	8005e48 <__smakebuf_r+0x18>
 8005eac:	08005c3d 	.word	0x08005c3d

08005eb0 <_raise_r>:
 8005eb0:	291f      	cmp	r1, #31
 8005eb2:	b538      	push	{r3, r4, r5, lr}
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	d904      	bls.n	8005ec4 <_raise_r+0x14>
 8005eba:	2316      	movs	r3, #22
 8005ebc:	6003      	str	r3, [r0, #0]
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ec6:	b112      	cbz	r2, 8005ece <_raise_r+0x1e>
 8005ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ecc:	b94b      	cbnz	r3, 8005ee2 <_raise_r+0x32>
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f830 	bl	8005f34 <_getpid_r>
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	4620      	mov	r0, r4
 8005eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ede:	f000 b817 	b.w	8005f10 <_kill_r>
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d00a      	beq.n	8005efc <_raise_r+0x4c>
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	d103      	bne.n	8005ef2 <_raise_r+0x42>
 8005eea:	2316      	movs	r3, #22
 8005eec:	6003      	str	r3, [r0, #0]
 8005eee:	2001      	movs	r0, #1
 8005ef0:	e7e7      	b.n	8005ec2 <_raise_r+0x12>
 8005ef2:	2400      	movs	r4, #0
 8005ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ef8:	4628      	mov	r0, r5
 8005efa:	4798      	blx	r3
 8005efc:	2000      	movs	r0, #0
 8005efe:	e7e0      	b.n	8005ec2 <_raise_r+0x12>

08005f00 <raise>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <raise+0xc>)
 8005f02:	4601      	mov	r1, r0
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f7ff bfd3 	b.w	8005eb0 <_raise_r>
 8005f0a:	bf00      	nop
 8005f0c:	20000000 	.word	0x20000000

08005f10 <_kill_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d07      	ldr	r5, [pc, #28]	; (8005f30 <_kill_r+0x20>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	f7fb f88f 	bl	8001040 <_kill>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d102      	bne.n	8005f2c <_kill_r+0x1c>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	b103      	cbz	r3, 8005f2c <_kill_r+0x1c>
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000324 	.word	0x20000324

08005f34 <_getpid_r>:
 8005f34:	f7fb b87c 	b.w	8001030 <_getpid>

08005f38 <__sread>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	f000 f894 	bl	800606c <_read_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	bfab      	itete	ge
 8005f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f4c:	181b      	addge	r3, r3, r0
 8005f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f52:	bfac      	ite	ge
 8005f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f56:	81a3      	strhlt	r3, [r4, #12]
 8005f58:	bd10      	pop	{r4, pc}

08005f5a <__swrite>:
 8005f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	461f      	mov	r7, r3
 8005f60:	898b      	ldrh	r3, [r1, #12]
 8005f62:	05db      	lsls	r3, r3, #23
 8005f64:	4605      	mov	r5, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4616      	mov	r6, r2
 8005f6a:	d505      	bpl.n	8005f78 <__swrite+0x1e>
 8005f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f70:	2302      	movs	r3, #2
 8005f72:	2200      	movs	r2, #0
 8005f74:	f000 f868 	bl	8006048 <_lseek_r>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	4632      	mov	r2, r6
 8005f86:	463b      	mov	r3, r7
 8005f88:	4628      	mov	r0, r5
 8005f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8e:	f000 b817 	b.w	8005fc0 <_write_r>

08005f92 <__sseek>:
 8005f92:	b510      	push	{r4, lr}
 8005f94:	460c      	mov	r4, r1
 8005f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9a:	f000 f855 	bl	8006048 <_lseek_r>
 8005f9e:	1c43      	adds	r3, r0, #1
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	bf15      	itete	ne
 8005fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fae:	81a3      	strheq	r3, [r4, #12]
 8005fb0:	bf18      	it	ne
 8005fb2:	81a3      	strhne	r3, [r4, #12]
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <__sclose>:
 8005fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fba:	f000 b813 	b.w	8005fe4 <_close_r>
	...

08005fc0 <_write_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d07      	ldr	r5, [pc, #28]	; (8005fe0 <_write_r+0x20>)
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	4611      	mov	r1, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7fb f86d 	bl	80010ae <_write>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_write_r+0x1e>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_write_r+0x1e>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20000324 	.word	0x20000324

08005fe4 <_close_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d06      	ldr	r5, [pc, #24]	; (8006000 <_close_r+0x1c>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	f7fb f879 	bl	80010e6 <_close>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_close_r+0x1a>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_close_r+0x1a>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000324 	.word	0x20000324

08006004 <_fstat_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d07      	ldr	r5, [pc, #28]	; (8006024 <_fstat_r+0x20>)
 8006008:	2300      	movs	r3, #0
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	4611      	mov	r1, r2
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	f7fb f874 	bl	80010fe <_fstat>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	d102      	bne.n	8006020 <_fstat_r+0x1c>
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	b103      	cbz	r3, 8006020 <_fstat_r+0x1c>
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	bd38      	pop	{r3, r4, r5, pc}
 8006022:	bf00      	nop
 8006024:	20000324 	.word	0x20000324

08006028 <_isatty_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d06      	ldr	r5, [pc, #24]	; (8006044 <_isatty_r+0x1c>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	f7fb f873 	bl	800111e <_isatty>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_isatty_r+0x1a>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_isatty_r+0x1a>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20000324 	.word	0x20000324

08006048 <_lseek_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d07      	ldr	r5, [pc, #28]	; (8006068 <_lseek_r+0x20>)
 800604c:	4604      	mov	r4, r0
 800604e:	4608      	mov	r0, r1
 8006050:	4611      	mov	r1, r2
 8006052:	2200      	movs	r2, #0
 8006054:	602a      	str	r2, [r5, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f7fb f86c 	bl	8001134 <_lseek>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_lseek_r+0x1e>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_lseek_r+0x1e>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20000324 	.word	0x20000324

0800606c <_read_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d07      	ldr	r5, [pc, #28]	; (800608c <_read_r+0x20>)
 8006070:	4604      	mov	r4, r0
 8006072:	4608      	mov	r0, r1
 8006074:	4611      	mov	r1, r2
 8006076:	2200      	movs	r2, #0
 8006078:	602a      	str	r2, [r5, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7fa fffa 	bl	8001074 <_read>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_read_r+0x1e>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_read_r+0x1e>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20000324 	.word	0x20000324

08006090 <round>:
 8006090:	ec51 0b10 	vmov	r0, r1, d0
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800609a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800609e:	2c13      	cmp	r4, #19
 80060a0:	ee10 2a10 	vmov	r2, s0
 80060a4:	460b      	mov	r3, r1
 80060a6:	dc19      	bgt.n	80060dc <round+0x4c>
 80060a8:	2c00      	cmp	r4, #0
 80060aa:	da09      	bge.n	80060c0 <round+0x30>
 80060ac:	3401      	adds	r4, #1
 80060ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80060b2:	d103      	bne.n	80060bc <round+0x2c>
 80060b4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060bc:	2200      	movs	r2, #0
 80060be:	e028      	b.n	8006112 <round+0x82>
 80060c0:	4d15      	ldr	r5, [pc, #84]	; (8006118 <round+0x88>)
 80060c2:	4125      	asrs	r5, r4
 80060c4:	ea01 0605 	and.w	r6, r1, r5
 80060c8:	4332      	orrs	r2, r6
 80060ca:	d00e      	beq.n	80060ea <round+0x5a>
 80060cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80060d0:	fa42 f404 	asr.w	r4, r2, r4
 80060d4:	4423      	add	r3, r4
 80060d6:	ea23 0305 	bic.w	r3, r3, r5
 80060da:	e7ef      	b.n	80060bc <round+0x2c>
 80060dc:	2c33      	cmp	r4, #51	; 0x33
 80060de:	dd07      	ble.n	80060f0 <round+0x60>
 80060e0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80060e4:	d101      	bne.n	80060ea <round+0x5a>
 80060e6:	f7fa f8d9 	bl	800029c <__adddf3>
 80060ea:	ec41 0b10 	vmov	d0, r0, r1
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80060f4:	f04f 35ff 	mov.w	r5, #4294967295
 80060f8:	40f5      	lsrs	r5, r6
 80060fa:	4228      	tst	r0, r5
 80060fc:	d0f5      	beq.n	80060ea <round+0x5a>
 80060fe:	2101      	movs	r1, #1
 8006100:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006104:	fa01 f404 	lsl.w	r4, r1, r4
 8006108:	1912      	adds	r2, r2, r4
 800610a:	bf28      	it	cs
 800610c:	185b      	addcs	r3, r3, r1
 800610e:	ea22 0205 	bic.w	r2, r2, r5
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	e7e8      	b.n	80060ea <round+0x5a>
 8006118:	000fffff 	.word	0x000fffff

0800611c <pow>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	ed2d 8b02 	vpush	{d8}
 8006122:	eeb0 8a40 	vmov.f32	s16, s0
 8006126:	eef0 8a60 	vmov.f32	s17, s1
 800612a:	ec55 4b11 	vmov	r4, r5, d1
 800612e:	f000 f867 	bl	8006200 <__ieee754_pow>
 8006132:	4622      	mov	r2, r4
 8006134:	462b      	mov	r3, r5
 8006136:	4620      	mov	r0, r4
 8006138:	4629      	mov	r1, r5
 800613a:	ec57 6b10 	vmov	r6, r7, d0
 800613e:	f7fa fcfd 	bl	8000b3c <__aeabi_dcmpun>
 8006142:	2800      	cmp	r0, #0
 8006144:	d13b      	bne.n	80061be <pow+0xa2>
 8006146:	ec51 0b18 	vmov	r0, r1, d8
 800614a:	2200      	movs	r2, #0
 800614c:	2300      	movs	r3, #0
 800614e:	f7fa fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006152:	b1b8      	cbz	r0, 8006184 <pow+0x68>
 8006154:	2200      	movs	r2, #0
 8006156:	2300      	movs	r3, #0
 8006158:	4620      	mov	r0, r4
 800615a:	4629      	mov	r1, r5
 800615c:	f7fa fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006160:	2800      	cmp	r0, #0
 8006162:	d146      	bne.n	80061f2 <pow+0xd6>
 8006164:	ec45 4b10 	vmov	d0, r4, r5
 8006168:	f000 fe63 	bl	8006e32 <finite>
 800616c:	b338      	cbz	r0, 80061be <pow+0xa2>
 800616e:	2200      	movs	r2, #0
 8006170:	2300      	movs	r3, #0
 8006172:	4620      	mov	r0, r4
 8006174:	4629      	mov	r1, r5
 8006176:	f7fa fcb9 	bl	8000aec <__aeabi_dcmplt>
 800617a:	b300      	cbz	r0, 80061be <pow+0xa2>
 800617c:	f7fd fa40 	bl	8003600 <__errno>
 8006180:	2322      	movs	r3, #34	; 0x22
 8006182:	e01b      	b.n	80061bc <pow+0xa0>
 8006184:	ec47 6b10 	vmov	d0, r6, r7
 8006188:	f000 fe53 	bl	8006e32 <finite>
 800618c:	b9e0      	cbnz	r0, 80061c8 <pow+0xac>
 800618e:	eeb0 0a48 	vmov.f32	s0, s16
 8006192:	eef0 0a68 	vmov.f32	s1, s17
 8006196:	f000 fe4c 	bl	8006e32 <finite>
 800619a:	b1a8      	cbz	r0, 80061c8 <pow+0xac>
 800619c:	ec45 4b10 	vmov	d0, r4, r5
 80061a0:	f000 fe47 	bl	8006e32 <finite>
 80061a4:	b180      	cbz	r0, 80061c8 <pow+0xac>
 80061a6:	4632      	mov	r2, r6
 80061a8:	463b      	mov	r3, r7
 80061aa:	4630      	mov	r0, r6
 80061ac:	4639      	mov	r1, r7
 80061ae:	f7fa fcc5 	bl	8000b3c <__aeabi_dcmpun>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d0e2      	beq.n	800617c <pow+0x60>
 80061b6:	f7fd fa23 	bl	8003600 <__errno>
 80061ba:	2321      	movs	r3, #33	; 0x21
 80061bc:	6003      	str	r3, [r0, #0]
 80061be:	ecbd 8b02 	vpop	{d8}
 80061c2:	ec47 6b10 	vmov	d0, r6, r7
 80061c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c8:	2200      	movs	r2, #0
 80061ca:	2300      	movs	r3, #0
 80061cc:	4630      	mov	r0, r6
 80061ce:	4639      	mov	r1, r7
 80061d0:	f7fa fc82 	bl	8000ad8 <__aeabi_dcmpeq>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d0f2      	beq.n	80061be <pow+0xa2>
 80061d8:	eeb0 0a48 	vmov.f32	s0, s16
 80061dc:	eef0 0a68 	vmov.f32	s1, s17
 80061e0:	f000 fe27 	bl	8006e32 <finite>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d0ea      	beq.n	80061be <pow+0xa2>
 80061e8:	ec45 4b10 	vmov	d0, r4, r5
 80061ec:	f000 fe21 	bl	8006e32 <finite>
 80061f0:	e7c3      	b.n	800617a <pow+0x5e>
 80061f2:	4f01      	ldr	r7, [pc, #4]	; (80061f8 <pow+0xdc>)
 80061f4:	2600      	movs	r6, #0
 80061f6:	e7e2      	b.n	80061be <pow+0xa2>
 80061f8:	3ff00000 	.word	0x3ff00000
 80061fc:	00000000 	.word	0x00000000

08006200 <__ieee754_pow>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	ed2d 8b06 	vpush	{d8-d10}
 8006208:	b089      	sub	sp, #36	; 0x24
 800620a:	ed8d 1b00 	vstr	d1, [sp]
 800620e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006212:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006216:	ea58 0102 	orrs.w	r1, r8, r2
 800621a:	ec57 6b10 	vmov	r6, r7, d0
 800621e:	d115      	bne.n	800624c <__ieee754_pow+0x4c>
 8006220:	19b3      	adds	r3, r6, r6
 8006222:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006226:	4152      	adcs	r2, r2
 8006228:	4299      	cmp	r1, r3
 800622a:	4b89      	ldr	r3, [pc, #548]	; (8006450 <__ieee754_pow+0x250>)
 800622c:	4193      	sbcs	r3, r2
 800622e:	f080 84d2 	bcs.w	8006bd6 <__ieee754_pow+0x9d6>
 8006232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa f82f 	bl	800029c <__adddf3>
 800623e:	ec41 0b10 	vmov	d0, r0, r1
 8006242:	b009      	add	sp, #36	; 0x24
 8006244:	ecbd 8b06 	vpop	{d8-d10}
 8006248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624c:	4b81      	ldr	r3, [pc, #516]	; (8006454 <__ieee754_pow+0x254>)
 800624e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006252:	429c      	cmp	r4, r3
 8006254:	ee10 aa10 	vmov	sl, s0
 8006258:	463d      	mov	r5, r7
 800625a:	dc06      	bgt.n	800626a <__ieee754_pow+0x6a>
 800625c:	d101      	bne.n	8006262 <__ieee754_pow+0x62>
 800625e:	2e00      	cmp	r6, #0
 8006260:	d1e7      	bne.n	8006232 <__ieee754_pow+0x32>
 8006262:	4598      	cmp	r8, r3
 8006264:	dc01      	bgt.n	800626a <__ieee754_pow+0x6a>
 8006266:	d10f      	bne.n	8006288 <__ieee754_pow+0x88>
 8006268:	b172      	cbz	r2, 8006288 <__ieee754_pow+0x88>
 800626a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800626e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006272:	ea55 050a 	orrs.w	r5, r5, sl
 8006276:	d1dc      	bne.n	8006232 <__ieee754_pow+0x32>
 8006278:	e9dd 3200 	ldrd	r3, r2, [sp]
 800627c:	18db      	adds	r3, r3, r3
 800627e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006282:	4152      	adcs	r2, r2
 8006284:	429d      	cmp	r5, r3
 8006286:	e7d0      	b.n	800622a <__ieee754_pow+0x2a>
 8006288:	2d00      	cmp	r5, #0
 800628a:	da3b      	bge.n	8006304 <__ieee754_pow+0x104>
 800628c:	4b72      	ldr	r3, [pc, #456]	; (8006458 <__ieee754_pow+0x258>)
 800628e:	4598      	cmp	r8, r3
 8006290:	dc51      	bgt.n	8006336 <__ieee754_pow+0x136>
 8006292:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006296:	4598      	cmp	r8, r3
 8006298:	f340 84ac 	ble.w	8006bf4 <__ieee754_pow+0x9f4>
 800629c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80062a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062a4:	2b14      	cmp	r3, #20
 80062a6:	dd0f      	ble.n	80062c8 <__ieee754_pow+0xc8>
 80062a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80062ac:	fa22 f103 	lsr.w	r1, r2, r3
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	4293      	cmp	r3, r2
 80062b6:	f040 849d 	bne.w	8006bf4 <__ieee754_pow+0x9f4>
 80062ba:	f001 0101 	and.w	r1, r1, #1
 80062be:	f1c1 0302 	rsb	r3, r1, #2
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	b182      	cbz	r2, 80062e8 <__ieee754_pow+0xe8>
 80062c6:	e05f      	b.n	8006388 <__ieee754_pow+0x188>
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	d15b      	bne.n	8006384 <__ieee754_pow+0x184>
 80062cc:	f1c3 0314 	rsb	r3, r3, #20
 80062d0:	fa48 f103 	asr.w	r1, r8, r3
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	4543      	cmp	r3, r8
 80062da:	f040 8488 	bne.w	8006bee <__ieee754_pow+0x9ee>
 80062de:	f001 0101 	and.w	r1, r1, #1
 80062e2:	f1c1 0302 	rsb	r3, r1, #2
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	4b5c      	ldr	r3, [pc, #368]	; (800645c <__ieee754_pow+0x25c>)
 80062ea:	4598      	cmp	r8, r3
 80062ec:	d132      	bne.n	8006354 <__ieee754_pow+0x154>
 80062ee:	f1b9 0f00 	cmp.w	r9, #0
 80062f2:	f280 8478 	bge.w	8006be6 <__ieee754_pow+0x9e6>
 80062f6:	4959      	ldr	r1, [pc, #356]	; (800645c <__ieee754_pow+0x25c>)
 80062f8:	4632      	mov	r2, r6
 80062fa:	463b      	mov	r3, r7
 80062fc:	2000      	movs	r0, #0
 80062fe:	f7fa faad 	bl	800085c <__aeabi_ddiv>
 8006302:	e79c      	b.n	800623e <__ieee754_pow+0x3e>
 8006304:	2300      	movs	r3, #0
 8006306:	9304      	str	r3, [sp, #16]
 8006308:	2a00      	cmp	r2, #0
 800630a:	d13d      	bne.n	8006388 <__ieee754_pow+0x188>
 800630c:	4b51      	ldr	r3, [pc, #324]	; (8006454 <__ieee754_pow+0x254>)
 800630e:	4598      	cmp	r8, r3
 8006310:	d1ea      	bne.n	80062e8 <__ieee754_pow+0xe8>
 8006312:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006316:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800631a:	ea53 030a 	orrs.w	r3, r3, sl
 800631e:	f000 845a 	beq.w	8006bd6 <__ieee754_pow+0x9d6>
 8006322:	4b4f      	ldr	r3, [pc, #316]	; (8006460 <__ieee754_pow+0x260>)
 8006324:	429c      	cmp	r4, r3
 8006326:	dd08      	ble.n	800633a <__ieee754_pow+0x13a>
 8006328:	f1b9 0f00 	cmp.w	r9, #0
 800632c:	f2c0 8457 	blt.w	8006bde <__ieee754_pow+0x9de>
 8006330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006334:	e783      	b.n	800623e <__ieee754_pow+0x3e>
 8006336:	2302      	movs	r3, #2
 8006338:	e7e5      	b.n	8006306 <__ieee754_pow+0x106>
 800633a:	f1b9 0f00 	cmp.w	r9, #0
 800633e:	f04f 0000 	mov.w	r0, #0
 8006342:	f04f 0100 	mov.w	r1, #0
 8006346:	f6bf af7a 	bge.w	800623e <__ieee754_pow+0x3e>
 800634a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800634e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006352:	e774      	b.n	800623e <__ieee754_pow+0x3e>
 8006354:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006358:	d106      	bne.n	8006368 <__ieee754_pow+0x168>
 800635a:	4632      	mov	r2, r6
 800635c:	463b      	mov	r3, r7
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa f951 	bl	8000608 <__aeabi_dmul>
 8006366:	e76a      	b.n	800623e <__ieee754_pow+0x3e>
 8006368:	4b3e      	ldr	r3, [pc, #248]	; (8006464 <__ieee754_pow+0x264>)
 800636a:	4599      	cmp	r9, r3
 800636c:	d10c      	bne.n	8006388 <__ieee754_pow+0x188>
 800636e:	2d00      	cmp	r5, #0
 8006370:	db0a      	blt.n	8006388 <__ieee754_pow+0x188>
 8006372:	ec47 6b10 	vmov	d0, r6, r7
 8006376:	b009      	add	sp, #36	; 0x24
 8006378:	ecbd 8b06 	vpop	{d8-d10}
 800637c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	f000 bc6c 	b.w	8006c5c <__ieee754_sqrt>
 8006384:	2300      	movs	r3, #0
 8006386:	9304      	str	r3, [sp, #16]
 8006388:	ec47 6b10 	vmov	d0, r6, r7
 800638c:	f000 fd48 	bl	8006e20 <fabs>
 8006390:	ec51 0b10 	vmov	r0, r1, d0
 8006394:	f1ba 0f00 	cmp.w	sl, #0
 8006398:	d129      	bne.n	80063ee <__ieee754_pow+0x1ee>
 800639a:	b124      	cbz	r4, 80063a6 <__ieee754_pow+0x1a6>
 800639c:	4b2f      	ldr	r3, [pc, #188]	; (800645c <__ieee754_pow+0x25c>)
 800639e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d123      	bne.n	80063ee <__ieee754_pow+0x1ee>
 80063a6:	f1b9 0f00 	cmp.w	r9, #0
 80063aa:	da05      	bge.n	80063b8 <__ieee754_pow+0x1b8>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	2000      	movs	r0, #0
 80063b2:	492a      	ldr	r1, [pc, #168]	; (800645c <__ieee754_pow+0x25c>)
 80063b4:	f7fa fa52 	bl	800085c <__aeabi_ddiv>
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	f6bf af40 	bge.w	800623e <__ieee754_pow+0x3e>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80063c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80063c8:	4323      	orrs	r3, r4
 80063ca:	d108      	bne.n	80063de <__ieee754_pow+0x1de>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4610      	mov	r0, r2
 80063d2:	4619      	mov	r1, r3
 80063d4:	f7f9 ff60 	bl	8000298 <__aeabi_dsub>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	e78f      	b.n	80062fe <__ieee754_pow+0xfe>
 80063de:	9b04      	ldr	r3, [sp, #16]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f47f af2c 	bne.w	800623e <__ieee754_pow+0x3e>
 80063e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063ea:	4619      	mov	r1, r3
 80063ec:	e727      	b.n	800623e <__ieee754_pow+0x3e>
 80063ee:	0feb      	lsrs	r3, r5, #31
 80063f0:	3b01      	subs	r3, #1
 80063f2:	9306      	str	r3, [sp, #24]
 80063f4:	9a06      	ldr	r2, [sp, #24]
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d102      	bne.n	8006402 <__ieee754_pow+0x202>
 80063fc:	4632      	mov	r2, r6
 80063fe:	463b      	mov	r3, r7
 8006400:	e7e6      	b.n	80063d0 <__ieee754_pow+0x1d0>
 8006402:	4b19      	ldr	r3, [pc, #100]	; (8006468 <__ieee754_pow+0x268>)
 8006404:	4598      	cmp	r8, r3
 8006406:	f340 80fb 	ble.w	8006600 <__ieee754_pow+0x400>
 800640a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800640e:	4598      	cmp	r8, r3
 8006410:	4b13      	ldr	r3, [pc, #76]	; (8006460 <__ieee754_pow+0x260>)
 8006412:	dd0c      	ble.n	800642e <__ieee754_pow+0x22e>
 8006414:	429c      	cmp	r4, r3
 8006416:	dc0f      	bgt.n	8006438 <__ieee754_pow+0x238>
 8006418:	f1b9 0f00 	cmp.w	r9, #0
 800641c:	da0f      	bge.n	800643e <__ieee754_pow+0x23e>
 800641e:	2000      	movs	r0, #0
 8006420:	b009      	add	sp, #36	; 0x24
 8006422:	ecbd 8b06 	vpop	{d8-d10}
 8006426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f000 bcf0 	b.w	8006e0e <__math_oflow>
 800642e:	429c      	cmp	r4, r3
 8006430:	dbf2      	blt.n	8006418 <__ieee754_pow+0x218>
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <__ieee754_pow+0x25c>)
 8006434:	429c      	cmp	r4, r3
 8006436:	dd19      	ble.n	800646c <__ieee754_pow+0x26c>
 8006438:	f1b9 0f00 	cmp.w	r9, #0
 800643c:	dcef      	bgt.n	800641e <__ieee754_pow+0x21e>
 800643e:	2000      	movs	r0, #0
 8006440:	b009      	add	sp, #36	; 0x24
 8006442:	ecbd 8b06 	vpop	{d8-d10}
 8006446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644a:	f000 bcd7 	b.w	8006dfc <__math_uflow>
 800644e:	bf00      	nop
 8006450:	fff00000 	.word	0xfff00000
 8006454:	7ff00000 	.word	0x7ff00000
 8006458:	433fffff 	.word	0x433fffff
 800645c:	3ff00000 	.word	0x3ff00000
 8006460:	3fefffff 	.word	0x3fefffff
 8006464:	3fe00000 	.word	0x3fe00000
 8006468:	41e00000 	.word	0x41e00000
 800646c:	4b60      	ldr	r3, [pc, #384]	; (80065f0 <__ieee754_pow+0x3f0>)
 800646e:	2200      	movs	r2, #0
 8006470:	f7f9 ff12 	bl	8000298 <__aeabi_dsub>
 8006474:	a354      	add	r3, pc, #336	; (adr r3, 80065c8 <__ieee754_pow+0x3c8>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	f7fa f8c3 	bl	8000608 <__aeabi_dmul>
 8006482:	a353      	add	r3, pc, #332	; (adr r3, 80065d0 <__ieee754_pow+0x3d0>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	4606      	mov	r6, r0
 800648a:	460f      	mov	r7, r1
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7fa f8ba 	bl	8000608 <__aeabi_dmul>
 8006494:	4b57      	ldr	r3, [pc, #348]	; (80065f4 <__ieee754_pow+0x3f4>)
 8006496:	4682      	mov	sl, r0
 8006498:	468b      	mov	fp, r1
 800649a:	2200      	movs	r2, #0
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	f7fa f8b2 	bl	8000608 <__aeabi_dmul>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	a14b      	add	r1, pc, #300	; (adr r1, 80065d8 <__ieee754_pow+0x3d8>)
 80064aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ae:	f7f9 fef3 	bl	8000298 <__aeabi_dsub>
 80064b2:	4622      	mov	r2, r4
 80064b4:	462b      	mov	r3, r5
 80064b6:	f7fa f8a7 	bl	8000608 <__aeabi_dmul>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	2000      	movs	r0, #0
 80064c0:	494d      	ldr	r1, [pc, #308]	; (80065f8 <__ieee754_pow+0x3f8>)
 80064c2:	f7f9 fee9 	bl	8000298 <__aeabi_dsub>
 80064c6:	4622      	mov	r2, r4
 80064c8:	4680      	mov	r8, r0
 80064ca:	4689      	mov	r9, r1
 80064cc:	462b      	mov	r3, r5
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa f899 	bl	8000608 <__aeabi_dmul>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7fa f893 	bl	8000608 <__aeabi_dmul>
 80064e2:	a33f      	add	r3, pc, #252	; (adr r3, 80065e0 <__ieee754_pow+0x3e0>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7fa f88e 	bl	8000608 <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	f7f9 fed0 	bl	8000298 <__aeabi_dsub>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4680      	mov	r8, r0
 80064fe:	4689      	mov	r9, r1
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	f7f9 feca 	bl	800029c <__adddf3>
 8006508:	2000      	movs	r0, #0
 800650a:	4632      	mov	r2, r6
 800650c:	463b      	mov	r3, r7
 800650e:	4604      	mov	r4, r0
 8006510:	460d      	mov	r5, r1
 8006512:	f7f9 fec1 	bl	8000298 <__aeabi_dsub>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	f7f9 febb 	bl	8000298 <__aeabi_dsub>
 8006522:	9b04      	ldr	r3, [sp, #16]
 8006524:	9a06      	ldr	r2, [sp, #24]
 8006526:	3b01      	subs	r3, #1
 8006528:	4313      	orrs	r3, r2
 800652a:	4682      	mov	sl, r0
 800652c:	468b      	mov	fp, r1
 800652e:	f040 81e7 	bne.w	8006900 <__ieee754_pow+0x700>
 8006532:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80065e8 <__ieee754_pow+0x3e8>
 8006536:	eeb0 8a47 	vmov.f32	s16, s14
 800653a:	eef0 8a67 	vmov.f32	s17, s15
 800653e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006542:	2600      	movs	r6, #0
 8006544:	4632      	mov	r2, r6
 8006546:	463b      	mov	r3, r7
 8006548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800654c:	f7f9 fea4 	bl	8000298 <__aeabi_dsub>
 8006550:	4622      	mov	r2, r4
 8006552:	462b      	mov	r3, r5
 8006554:	f7fa f858 	bl	8000608 <__aeabi_dmul>
 8006558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	4650      	mov	r0, sl
 8006562:	4659      	mov	r1, fp
 8006564:	f7fa f850 	bl	8000608 <__aeabi_dmul>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4640      	mov	r0, r8
 800656e:	4649      	mov	r1, r9
 8006570:	f7f9 fe94 	bl	800029c <__adddf3>
 8006574:	4632      	mov	r2, r6
 8006576:	463b      	mov	r3, r7
 8006578:	4680      	mov	r8, r0
 800657a:	4689      	mov	r9, r1
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7fa f842 	bl	8000608 <__aeabi_dmul>
 8006584:	460b      	mov	r3, r1
 8006586:	4604      	mov	r4, r0
 8006588:	460d      	mov	r5, r1
 800658a:	4602      	mov	r2, r0
 800658c:	4649      	mov	r1, r9
 800658e:	4640      	mov	r0, r8
 8006590:	f7f9 fe84 	bl	800029c <__adddf3>
 8006594:	4b19      	ldr	r3, [pc, #100]	; (80065fc <__ieee754_pow+0x3fc>)
 8006596:	4299      	cmp	r1, r3
 8006598:	ec45 4b19 	vmov	d9, r4, r5
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	468b      	mov	fp, r1
 80065a2:	f340 82f1 	ble.w	8006b88 <__ieee754_pow+0x988>
 80065a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80065aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80065ae:	4303      	orrs	r3, r0
 80065b0:	f000 81e4 	beq.w	800697c <__ieee754_pow+0x77c>
 80065b4:	ec51 0b18 	vmov	r0, r1, d8
 80065b8:	2200      	movs	r2, #0
 80065ba:	2300      	movs	r3, #0
 80065bc:	f7fa fa96 	bl	8000aec <__aeabi_dcmplt>
 80065c0:	3800      	subs	r0, #0
 80065c2:	bf18      	it	ne
 80065c4:	2001      	movne	r0, #1
 80065c6:	e72b      	b.n	8006420 <__ieee754_pow+0x220>
 80065c8:	60000000 	.word	0x60000000
 80065cc:	3ff71547 	.word	0x3ff71547
 80065d0:	f85ddf44 	.word	0xf85ddf44
 80065d4:	3e54ae0b 	.word	0x3e54ae0b
 80065d8:	55555555 	.word	0x55555555
 80065dc:	3fd55555 	.word	0x3fd55555
 80065e0:	652b82fe 	.word	0x652b82fe
 80065e4:	3ff71547 	.word	0x3ff71547
 80065e8:	00000000 	.word	0x00000000
 80065ec:	bff00000 	.word	0xbff00000
 80065f0:	3ff00000 	.word	0x3ff00000
 80065f4:	3fd00000 	.word	0x3fd00000
 80065f8:	3fe00000 	.word	0x3fe00000
 80065fc:	408fffff 	.word	0x408fffff
 8006600:	4bd5      	ldr	r3, [pc, #852]	; (8006958 <__ieee754_pow+0x758>)
 8006602:	402b      	ands	r3, r5
 8006604:	2200      	movs	r2, #0
 8006606:	b92b      	cbnz	r3, 8006614 <__ieee754_pow+0x414>
 8006608:	4bd4      	ldr	r3, [pc, #848]	; (800695c <__ieee754_pow+0x75c>)
 800660a:	f7f9 fffd 	bl	8000608 <__aeabi_dmul>
 800660e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006612:	460c      	mov	r4, r1
 8006614:	1523      	asrs	r3, r4, #20
 8006616:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800661a:	4413      	add	r3, r2
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	4bd0      	ldr	r3, [pc, #832]	; (8006960 <__ieee754_pow+0x760>)
 8006620:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006624:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006628:	429c      	cmp	r4, r3
 800662a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800662e:	dd08      	ble.n	8006642 <__ieee754_pow+0x442>
 8006630:	4bcc      	ldr	r3, [pc, #816]	; (8006964 <__ieee754_pow+0x764>)
 8006632:	429c      	cmp	r4, r3
 8006634:	f340 8162 	ble.w	80068fc <__ieee754_pow+0x6fc>
 8006638:	9b05      	ldr	r3, [sp, #20]
 800663a:	3301      	adds	r3, #1
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006642:	2400      	movs	r4, #0
 8006644:	00e3      	lsls	r3, r4, #3
 8006646:	9307      	str	r3, [sp, #28]
 8006648:	4bc7      	ldr	r3, [pc, #796]	; (8006968 <__ieee754_pow+0x768>)
 800664a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800664e:	ed93 7b00 	vldr	d7, [r3]
 8006652:	4629      	mov	r1, r5
 8006654:	ec53 2b17 	vmov	r2, r3, d7
 8006658:	eeb0 9a47 	vmov.f32	s18, s14
 800665c:	eef0 9a67 	vmov.f32	s19, s15
 8006660:	4682      	mov	sl, r0
 8006662:	f7f9 fe19 	bl	8000298 <__aeabi_dsub>
 8006666:	4652      	mov	r2, sl
 8006668:	4606      	mov	r6, r0
 800666a:	460f      	mov	r7, r1
 800666c:	462b      	mov	r3, r5
 800666e:	ec51 0b19 	vmov	r0, r1, d9
 8006672:	f7f9 fe13 	bl	800029c <__adddf3>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	2000      	movs	r0, #0
 800667c:	49bb      	ldr	r1, [pc, #748]	; (800696c <__ieee754_pow+0x76c>)
 800667e:	f7fa f8ed 	bl	800085c <__aeabi_ddiv>
 8006682:	ec41 0b1a 	vmov	d10, r0, r1
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4630      	mov	r0, r6
 800668c:	4639      	mov	r1, r7
 800668e:	f7f9 ffbb 	bl	8000608 <__aeabi_dmul>
 8006692:	2300      	movs	r3, #0
 8006694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006698:	9302      	str	r3, [sp, #8]
 800669a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800669e:	46ab      	mov	fp, r5
 80066a0:	106d      	asrs	r5, r5, #1
 80066a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80066a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80066aa:	ec41 0b18 	vmov	d8, r0, r1
 80066ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80066b2:	2200      	movs	r2, #0
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	4614      	mov	r4, r2
 80066ba:	461d      	mov	r5, r3
 80066bc:	f7f9 ffa4 	bl	8000608 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7f9 fde6 	bl	8000298 <__aeabi_dsub>
 80066cc:	ec53 2b19 	vmov	r2, r3, d9
 80066d0:	4606      	mov	r6, r0
 80066d2:	460f      	mov	r7, r1
 80066d4:	4620      	mov	r0, r4
 80066d6:	4629      	mov	r1, r5
 80066d8:	f7f9 fdde 	bl	8000298 <__aeabi_dsub>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4650      	mov	r0, sl
 80066e2:	4659      	mov	r1, fp
 80066e4:	f7f9 fdd8 	bl	8000298 <__aeabi_dsub>
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	f7f9 ff8c 	bl	8000608 <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4630      	mov	r0, r6
 80066f6:	4639      	mov	r1, r7
 80066f8:	f7f9 fdce 	bl	8000298 <__aeabi_dsub>
 80066fc:	ec53 2b1a 	vmov	r2, r3, d10
 8006700:	f7f9 ff82 	bl	8000608 <__aeabi_dmul>
 8006704:	ec53 2b18 	vmov	r2, r3, d8
 8006708:	ec41 0b19 	vmov	d9, r0, r1
 800670c:	ec51 0b18 	vmov	r0, r1, d8
 8006710:	f7f9 ff7a 	bl	8000608 <__aeabi_dmul>
 8006714:	a37c      	add	r3, pc, #496	; (adr r3, 8006908 <__ieee754_pow+0x708>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	4604      	mov	r4, r0
 800671c:	460d      	mov	r5, r1
 800671e:	f7f9 ff73 	bl	8000608 <__aeabi_dmul>
 8006722:	a37b      	add	r3, pc, #492	; (adr r3, 8006910 <__ieee754_pow+0x710>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 fdb8 	bl	800029c <__adddf3>
 800672c:	4622      	mov	r2, r4
 800672e:	462b      	mov	r3, r5
 8006730:	f7f9 ff6a 	bl	8000608 <__aeabi_dmul>
 8006734:	a378      	add	r3, pc, #480	; (adr r3, 8006918 <__ieee754_pow+0x718>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fdaf 	bl	800029c <__adddf3>
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f7f9 ff61 	bl	8000608 <__aeabi_dmul>
 8006746:	a376      	add	r3, pc, #472	; (adr r3, 8006920 <__ieee754_pow+0x720>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fda6 	bl	800029c <__adddf3>
 8006750:	4622      	mov	r2, r4
 8006752:	462b      	mov	r3, r5
 8006754:	f7f9 ff58 	bl	8000608 <__aeabi_dmul>
 8006758:	a373      	add	r3, pc, #460	; (adr r3, 8006928 <__ieee754_pow+0x728>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fd9d 	bl	800029c <__adddf3>
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	f7f9 ff4f 	bl	8000608 <__aeabi_dmul>
 800676a:	a371      	add	r3, pc, #452	; (adr r3, 8006930 <__ieee754_pow+0x730>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fd94 	bl	800029c <__adddf3>
 8006774:	4622      	mov	r2, r4
 8006776:	4606      	mov	r6, r0
 8006778:	460f      	mov	r7, r1
 800677a:	462b      	mov	r3, r5
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7f9 ff42 	bl	8000608 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7f9 ff3c 	bl	8000608 <__aeabi_dmul>
 8006790:	4642      	mov	r2, r8
 8006792:	4604      	mov	r4, r0
 8006794:	460d      	mov	r5, r1
 8006796:	464b      	mov	r3, r9
 8006798:	ec51 0b18 	vmov	r0, r1, d8
 800679c:	f7f9 fd7e 	bl	800029c <__adddf3>
 80067a0:	ec53 2b19 	vmov	r2, r3, d9
 80067a4:	f7f9 ff30 	bl	8000608 <__aeabi_dmul>
 80067a8:	4622      	mov	r2, r4
 80067aa:	462b      	mov	r3, r5
 80067ac:	f7f9 fd76 	bl	800029c <__adddf3>
 80067b0:	4642      	mov	r2, r8
 80067b2:	4682      	mov	sl, r0
 80067b4:	468b      	mov	fp, r1
 80067b6:	464b      	mov	r3, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7f9 ff24 	bl	8000608 <__aeabi_dmul>
 80067c0:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <__ieee754_pow+0x770>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	4606      	mov	r6, r0
 80067c6:	460f      	mov	r7, r1
 80067c8:	f7f9 fd68 	bl	800029c <__adddf3>
 80067cc:	4652      	mov	r2, sl
 80067ce:	465b      	mov	r3, fp
 80067d0:	f7f9 fd64 	bl	800029c <__adddf3>
 80067d4:	2000      	movs	r0, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	f7f9 ff11 	bl	8000608 <__aeabi_dmul>
 80067e6:	4b62      	ldr	r3, [pc, #392]	; (8006970 <__ieee754_pow+0x770>)
 80067e8:	4680      	mov	r8, r0
 80067ea:	4689      	mov	r9, r1
 80067ec:	2200      	movs	r2, #0
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7f9 fd51 	bl	8000298 <__aeabi_dsub>
 80067f6:	4632      	mov	r2, r6
 80067f8:	463b      	mov	r3, r7
 80067fa:	f7f9 fd4d 	bl	8000298 <__aeabi_dsub>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4650      	mov	r0, sl
 8006804:	4659      	mov	r1, fp
 8006806:	f7f9 fd47 	bl	8000298 <__aeabi_dsub>
 800680a:	ec53 2b18 	vmov	r2, r3, d8
 800680e:	f7f9 fefb 	bl	8000608 <__aeabi_dmul>
 8006812:	4622      	mov	r2, r4
 8006814:	4606      	mov	r6, r0
 8006816:	460f      	mov	r7, r1
 8006818:	462b      	mov	r3, r5
 800681a:	ec51 0b19 	vmov	r0, r1, d9
 800681e:	f7f9 fef3 	bl	8000608 <__aeabi_dmul>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7f9 fd37 	bl	800029c <__adddf3>
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4640      	mov	r0, r8
 8006838:	4649      	mov	r1, r9
 800683a:	f7f9 fd2f 	bl	800029c <__adddf3>
 800683e:	a33e      	add	r3, pc, #248	; (adr r3, 8006938 <__ieee754_pow+0x738>)
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	2000      	movs	r0, #0
 8006846:	4604      	mov	r4, r0
 8006848:	460d      	mov	r5, r1
 800684a:	f7f9 fedd 	bl	8000608 <__aeabi_dmul>
 800684e:	4642      	mov	r2, r8
 8006850:	ec41 0b18 	vmov	d8, r0, r1
 8006854:	464b      	mov	r3, r9
 8006856:	4620      	mov	r0, r4
 8006858:	4629      	mov	r1, r5
 800685a:	f7f9 fd1d 	bl	8000298 <__aeabi_dsub>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7f9 fd17 	bl	8000298 <__aeabi_dsub>
 800686a:	a335      	add	r3, pc, #212	; (adr r3, 8006940 <__ieee754_pow+0x740>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 feca 	bl	8000608 <__aeabi_dmul>
 8006874:	a334      	add	r3, pc, #208	; (adr r3, 8006948 <__ieee754_pow+0x748>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	4620      	mov	r0, r4
 8006880:	4629      	mov	r1, r5
 8006882:	f7f9 fec1 	bl	8000608 <__aeabi_dmul>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4630      	mov	r0, r6
 800688c:	4639      	mov	r1, r7
 800688e:	f7f9 fd05 	bl	800029c <__adddf3>
 8006892:	9a07      	ldr	r2, [sp, #28]
 8006894:	4b37      	ldr	r3, [pc, #220]	; (8006974 <__ieee754_pow+0x774>)
 8006896:	4413      	add	r3, r2
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f7f9 fcfe 	bl	800029c <__adddf3>
 80068a0:	4682      	mov	sl, r0
 80068a2:	9805      	ldr	r0, [sp, #20]
 80068a4:	468b      	mov	fp, r1
 80068a6:	f7f9 fe45 	bl	8000534 <__aeabi_i2d>
 80068aa:	9a07      	ldr	r2, [sp, #28]
 80068ac:	4b32      	ldr	r3, [pc, #200]	; (8006978 <__ieee754_pow+0x778>)
 80068ae:	4413      	add	r3, r2
 80068b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068b4:	4606      	mov	r6, r0
 80068b6:	460f      	mov	r7, r1
 80068b8:	4652      	mov	r2, sl
 80068ba:	465b      	mov	r3, fp
 80068bc:	ec51 0b18 	vmov	r0, r1, d8
 80068c0:	f7f9 fcec 	bl	800029c <__adddf3>
 80068c4:	4642      	mov	r2, r8
 80068c6:	464b      	mov	r3, r9
 80068c8:	f7f9 fce8 	bl	800029c <__adddf3>
 80068cc:	4632      	mov	r2, r6
 80068ce:	463b      	mov	r3, r7
 80068d0:	f7f9 fce4 	bl	800029c <__adddf3>
 80068d4:	2000      	movs	r0, #0
 80068d6:	4632      	mov	r2, r6
 80068d8:	463b      	mov	r3, r7
 80068da:	4604      	mov	r4, r0
 80068dc:	460d      	mov	r5, r1
 80068de:	f7f9 fcdb 	bl	8000298 <__aeabi_dsub>
 80068e2:	4642      	mov	r2, r8
 80068e4:	464b      	mov	r3, r9
 80068e6:	f7f9 fcd7 	bl	8000298 <__aeabi_dsub>
 80068ea:	ec53 2b18 	vmov	r2, r3, d8
 80068ee:	f7f9 fcd3 	bl	8000298 <__aeabi_dsub>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4650      	mov	r0, sl
 80068f8:	4659      	mov	r1, fp
 80068fa:	e610      	b.n	800651e <__ieee754_pow+0x31e>
 80068fc:	2401      	movs	r4, #1
 80068fe:	e6a1      	b.n	8006644 <__ieee754_pow+0x444>
 8006900:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006950 <__ieee754_pow+0x750>
 8006904:	e617      	b.n	8006536 <__ieee754_pow+0x336>
 8006906:	bf00      	nop
 8006908:	4a454eef 	.word	0x4a454eef
 800690c:	3fca7e28 	.word	0x3fca7e28
 8006910:	93c9db65 	.word	0x93c9db65
 8006914:	3fcd864a 	.word	0x3fcd864a
 8006918:	a91d4101 	.word	0xa91d4101
 800691c:	3fd17460 	.word	0x3fd17460
 8006920:	518f264d 	.word	0x518f264d
 8006924:	3fd55555 	.word	0x3fd55555
 8006928:	db6fabff 	.word	0xdb6fabff
 800692c:	3fdb6db6 	.word	0x3fdb6db6
 8006930:	33333303 	.word	0x33333303
 8006934:	3fe33333 	.word	0x3fe33333
 8006938:	e0000000 	.word	0xe0000000
 800693c:	3feec709 	.word	0x3feec709
 8006940:	dc3a03fd 	.word	0xdc3a03fd
 8006944:	3feec709 	.word	0x3feec709
 8006948:	145b01f5 	.word	0x145b01f5
 800694c:	be3e2fe0 	.word	0xbe3e2fe0
 8006950:	00000000 	.word	0x00000000
 8006954:	3ff00000 	.word	0x3ff00000
 8006958:	7ff00000 	.word	0x7ff00000
 800695c:	43400000 	.word	0x43400000
 8006960:	0003988e 	.word	0x0003988e
 8006964:	000bb679 	.word	0x000bb679
 8006968:	08007368 	.word	0x08007368
 800696c:	3ff00000 	.word	0x3ff00000
 8006970:	40080000 	.word	0x40080000
 8006974:	08007388 	.word	0x08007388
 8006978:	08007378 	.word	0x08007378
 800697c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006c54 <__ieee754_pow+0xa54>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	4640      	mov	r0, r8
 8006984:	4649      	mov	r1, r9
 8006986:	f7f9 fc89 	bl	800029c <__adddf3>
 800698a:	4622      	mov	r2, r4
 800698c:	ec41 0b1a 	vmov	d10, r0, r1
 8006990:	462b      	mov	r3, r5
 8006992:	4630      	mov	r0, r6
 8006994:	4639      	mov	r1, r7
 8006996:	f7f9 fc7f 	bl	8000298 <__aeabi_dsub>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	ec51 0b1a 	vmov	r0, r1, d10
 80069a2:	f7fa f8c1 	bl	8000b28 <__aeabi_dcmpgt>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	f47f ae04 	bne.w	80065b4 <__ieee754_pow+0x3b4>
 80069ac:	4aa4      	ldr	r2, [pc, #656]	; (8006c40 <__ieee754_pow+0xa40>)
 80069ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069b2:	4293      	cmp	r3, r2
 80069b4:	f340 8108 	ble.w	8006bc8 <__ieee754_pow+0x9c8>
 80069b8:	151b      	asrs	r3, r3, #20
 80069ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80069be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80069c2:	fa4a f303 	asr.w	r3, sl, r3
 80069c6:	445b      	add	r3, fp
 80069c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80069cc:	4e9d      	ldr	r6, [pc, #628]	; (8006c44 <__ieee754_pow+0xa44>)
 80069ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80069d2:	4116      	asrs	r6, r2
 80069d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80069d8:	2000      	movs	r0, #0
 80069da:	ea23 0106 	bic.w	r1, r3, r6
 80069de:	f1c2 0214 	rsb	r2, r2, #20
 80069e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80069e6:	fa4a fa02 	asr.w	sl, sl, r2
 80069ea:	f1bb 0f00 	cmp.w	fp, #0
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4620      	mov	r0, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	bfb8      	it	lt
 80069f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80069fc:	f7f9 fc4c 	bl	8000298 <__aeabi_dsub>
 8006a00:	ec41 0b19 	vmov	d9, r0, r1
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	ec51 0b19 	vmov	r0, r1, d9
 8006a0c:	f7f9 fc46 	bl	800029c <__adddf3>
 8006a10:	a37b      	add	r3, pc, #492	; (adr r3, 8006c00 <__ieee754_pow+0xa00>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	2000      	movs	r0, #0
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	f7f9 fdf4 	bl	8000608 <__aeabi_dmul>
 8006a20:	ec53 2b19 	vmov	r2, r3, d9
 8006a24:	4606      	mov	r6, r0
 8006a26:	460f      	mov	r7, r1
 8006a28:	4620      	mov	r0, r4
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	f7f9 fc34 	bl	8000298 <__aeabi_dsub>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4640      	mov	r0, r8
 8006a36:	4649      	mov	r1, r9
 8006a38:	f7f9 fc2e 	bl	8000298 <__aeabi_dsub>
 8006a3c:	a372      	add	r3, pc, #456	; (adr r3, 8006c08 <__ieee754_pow+0xa08>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fde1 	bl	8000608 <__aeabi_dmul>
 8006a46:	a372      	add	r3, pc, #456	; (adr r3, 8006c10 <__ieee754_pow+0xa10>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	4620      	mov	r0, r4
 8006a52:	4629      	mov	r1, r5
 8006a54:	f7f9 fdd8 	bl	8000608 <__aeabi_dmul>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7f9 fc1c 	bl	800029c <__adddf3>
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fc14 	bl	800029c <__adddf3>
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	4680      	mov	r8, r0
 8006a7a:	4689      	mov	r9, r1
 8006a7c:	f7f9 fc0c 	bl	8000298 <__aeabi_dsub>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7f9 fc06 	bl	8000298 <__aeabi_dsub>
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	4606      	mov	r6, r0
 8006a90:	460f      	mov	r7, r1
 8006a92:	464b      	mov	r3, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7f9 fdb6 	bl	8000608 <__aeabi_dmul>
 8006a9c:	a35e      	add	r3, pc, #376	; (adr r3, 8006c18 <__ieee754_pow+0xa18>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	f7f9 fdaf 	bl	8000608 <__aeabi_dmul>
 8006aaa:	a35d      	add	r3, pc, #372	; (adr r3, 8006c20 <__ieee754_pow+0xa20>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f7f9 fbf2 	bl	8000298 <__aeabi_dsub>
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f7f9 fda6 	bl	8000608 <__aeabi_dmul>
 8006abc:	a35a      	add	r3, pc, #360	; (adr r3, 8006c28 <__ieee754_pow+0xa28>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fbeb 	bl	800029c <__adddf3>
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	462b      	mov	r3, r5
 8006aca:	f7f9 fd9d 	bl	8000608 <__aeabi_dmul>
 8006ace:	a358      	add	r3, pc, #352	; (adr r3, 8006c30 <__ieee754_pow+0xa30>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7f9 fbe0 	bl	8000298 <__aeabi_dsub>
 8006ad8:	4622      	mov	r2, r4
 8006ada:	462b      	mov	r3, r5
 8006adc:	f7f9 fd94 	bl	8000608 <__aeabi_dmul>
 8006ae0:	a355      	add	r3, pc, #340	; (adr r3, 8006c38 <__ieee754_pow+0xa38>)
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f7f9 fbd9 	bl	800029c <__adddf3>
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	f7f9 fd8b 	bl	8000608 <__aeabi_dmul>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f7f9 fbcd 	bl	8000298 <__aeabi_dsub>
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7f9 fd7d 	bl	8000608 <__aeabi_dmul>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	ec41 0b19 	vmov	d9, r0, r1
 8006b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7f9 fbbc 	bl	8000298 <__aeabi_dsub>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	ec51 0b19 	vmov	r0, r1, d9
 8006b28:	f7f9 fe98 	bl	800085c <__aeabi_ddiv>
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	463b      	mov	r3, r7
 8006b34:	4640      	mov	r0, r8
 8006b36:	4649      	mov	r1, r9
 8006b38:	f7f9 fd66 	bl	8000608 <__aeabi_dmul>
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	463b      	mov	r3, r7
 8006b40:	f7f9 fbac 	bl	800029c <__adddf3>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	f7f9 fba4 	bl	8000298 <__aeabi_dsub>
 8006b50:	4642      	mov	r2, r8
 8006b52:	464b      	mov	r3, r9
 8006b54:	f7f9 fba0 	bl	8000298 <__aeabi_dsub>
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	493a      	ldr	r1, [pc, #232]	; (8006c48 <__ieee754_pow+0xa48>)
 8006b5e:	2000      	movs	r0, #0
 8006b60:	f7f9 fb9a 	bl	8000298 <__aeabi_dsub>
 8006b64:	ec41 0b10 	vmov	d0, r0, r1
 8006b68:	ee10 3a90 	vmov	r3, s1
 8006b6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b74:	da2b      	bge.n	8006bce <__ieee754_pow+0x9ce>
 8006b76:	4650      	mov	r0, sl
 8006b78:	f000 f966 	bl	8006e48 <scalbn>
 8006b7c:	ec51 0b10 	vmov	r0, r1, d0
 8006b80:	ec53 2b18 	vmov	r2, r3, d8
 8006b84:	f7ff bbed 	b.w	8006362 <__ieee754_pow+0x162>
 8006b88:	4b30      	ldr	r3, [pc, #192]	; (8006c4c <__ieee754_pow+0xa4c>)
 8006b8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006b8e:	429e      	cmp	r6, r3
 8006b90:	f77f af0c 	ble.w	80069ac <__ieee754_pow+0x7ac>
 8006b94:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <__ieee754_pow+0xa50>)
 8006b96:	440b      	add	r3, r1
 8006b98:	4303      	orrs	r3, r0
 8006b9a:	d009      	beq.n	8006bb0 <__ieee754_pow+0x9b0>
 8006b9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f7f9 ffa2 	bl	8000aec <__aeabi_dcmplt>
 8006ba8:	3800      	subs	r0, #0
 8006baa:	bf18      	it	ne
 8006bac:	2001      	movne	r0, #1
 8006bae:	e447      	b.n	8006440 <__ieee754_pow+0x240>
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	462b      	mov	r3, r5
 8006bb4:	f7f9 fb70 	bl	8000298 <__aeabi_dsub>
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	f7f9 ffaa 	bl	8000b14 <__aeabi_dcmpge>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f43f aef3 	beq.w	80069ac <__ieee754_pow+0x7ac>
 8006bc6:	e7e9      	b.n	8006b9c <__ieee754_pow+0x99c>
 8006bc8:	f04f 0a00 	mov.w	sl, #0
 8006bcc:	e71a      	b.n	8006a04 <__ieee754_pow+0x804>
 8006bce:	ec51 0b10 	vmov	r0, r1, d0
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	e7d4      	b.n	8006b80 <__ieee754_pow+0x980>
 8006bd6:	491c      	ldr	r1, [pc, #112]	; (8006c48 <__ieee754_pow+0xa48>)
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f7ff bb30 	b.w	800623e <__ieee754_pow+0x3e>
 8006bde:	2000      	movs	r0, #0
 8006be0:	2100      	movs	r1, #0
 8006be2:	f7ff bb2c 	b.w	800623e <__ieee754_pow+0x3e>
 8006be6:	4630      	mov	r0, r6
 8006be8:	4639      	mov	r1, r7
 8006bea:	f7ff bb28 	b.w	800623e <__ieee754_pow+0x3e>
 8006bee:	9204      	str	r2, [sp, #16]
 8006bf0:	f7ff bb7a 	b.w	80062e8 <__ieee754_pow+0xe8>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f7ff bb64 	b.w	80062c2 <__ieee754_pow+0xc2>
 8006bfa:	bf00      	nop
 8006bfc:	f3af 8000 	nop.w
 8006c00:	00000000 	.word	0x00000000
 8006c04:	3fe62e43 	.word	0x3fe62e43
 8006c08:	fefa39ef 	.word	0xfefa39ef
 8006c0c:	3fe62e42 	.word	0x3fe62e42
 8006c10:	0ca86c39 	.word	0x0ca86c39
 8006c14:	be205c61 	.word	0xbe205c61
 8006c18:	72bea4d0 	.word	0x72bea4d0
 8006c1c:	3e663769 	.word	0x3e663769
 8006c20:	c5d26bf1 	.word	0xc5d26bf1
 8006c24:	3ebbbd41 	.word	0x3ebbbd41
 8006c28:	af25de2c 	.word	0xaf25de2c
 8006c2c:	3f11566a 	.word	0x3f11566a
 8006c30:	16bebd93 	.word	0x16bebd93
 8006c34:	3f66c16c 	.word	0x3f66c16c
 8006c38:	5555553e 	.word	0x5555553e
 8006c3c:	3fc55555 	.word	0x3fc55555
 8006c40:	3fe00000 	.word	0x3fe00000
 8006c44:	000fffff 	.word	0x000fffff
 8006c48:	3ff00000 	.word	0x3ff00000
 8006c4c:	4090cbff 	.word	0x4090cbff
 8006c50:	3f6f3400 	.word	0x3f6f3400
 8006c54:	652b82fe 	.word	0x652b82fe
 8006c58:	3c971547 	.word	0x3c971547

08006c5c <__ieee754_sqrt>:
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	ec55 4b10 	vmov	r4, r5, d0
 8006c64:	4e55      	ldr	r6, [pc, #340]	; (8006dbc <__ieee754_sqrt+0x160>)
 8006c66:	43ae      	bics	r6, r5
 8006c68:	ee10 0a10 	vmov	r0, s0
 8006c6c:	ee10 3a10 	vmov	r3, s0
 8006c70:	462a      	mov	r2, r5
 8006c72:	4629      	mov	r1, r5
 8006c74:	d110      	bne.n	8006c98 <__ieee754_sqrt+0x3c>
 8006c76:	ee10 2a10 	vmov	r2, s0
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	f7f9 fcc4 	bl	8000608 <__aeabi_dmul>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4620      	mov	r0, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	f7f9 fb08 	bl	800029c <__adddf3>
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	ec45 4b10 	vmov	d0, r4, r5
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	dc10      	bgt.n	8006cbe <__ieee754_sqrt+0x62>
 8006c9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ca0:	4330      	orrs	r0, r6
 8006ca2:	d0f5      	beq.n	8006c90 <__ieee754_sqrt+0x34>
 8006ca4:	b15d      	cbz	r5, 8006cbe <__ieee754_sqrt+0x62>
 8006ca6:	ee10 2a10 	vmov	r2, s0
 8006caa:	462b      	mov	r3, r5
 8006cac:	ee10 0a10 	vmov	r0, s0
 8006cb0:	f7f9 faf2 	bl	8000298 <__aeabi_dsub>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	f7f9 fdd0 	bl	800085c <__aeabi_ddiv>
 8006cbc:	e7e6      	b.n	8006c8c <__ieee754_sqrt+0x30>
 8006cbe:	1512      	asrs	r2, r2, #20
 8006cc0:	d074      	beq.n	8006dac <__ieee754_sqrt+0x150>
 8006cc2:	07d4      	lsls	r4, r2, #31
 8006cc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006cc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006ccc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cd0:	bf5e      	ittt	pl
 8006cd2:	0fda      	lsrpl	r2, r3, #31
 8006cd4:	005b      	lslpl	r3, r3, #1
 8006cd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006cda:	2400      	movs	r4, #0
 8006cdc:	0fda      	lsrs	r2, r3, #31
 8006cde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006ce2:	107f      	asrs	r7, r7, #1
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	2516      	movs	r5, #22
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006cee:	1886      	adds	r6, r0, r2
 8006cf0:	428e      	cmp	r6, r1
 8006cf2:	bfde      	ittt	le
 8006cf4:	1b89      	suble	r1, r1, r6
 8006cf6:	18b0      	addle	r0, r6, r2
 8006cf8:	18a4      	addle	r4, r4, r2
 8006cfa:	0049      	lsls	r1, r1, #1
 8006cfc:	3d01      	subs	r5, #1
 8006cfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006d02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006d06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d0a:	d1f0      	bne.n	8006cee <__ieee754_sqrt+0x92>
 8006d0c:	462a      	mov	r2, r5
 8006d0e:	f04f 0e20 	mov.w	lr, #32
 8006d12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d16:	4281      	cmp	r1, r0
 8006d18:	eb06 0c05 	add.w	ip, r6, r5
 8006d1c:	dc02      	bgt.n	8006d24 <__ieee754_sqrt+0xc8>
 8006d1e:	d113      	bne.n	8006d48 <__ieee754_sqrt+0xec>
 8006d20:	459c      	cmp	ip, r3
 8006d22:	d811      	bhi.n	8006d48 <__ieee754_sqrt+0xec>
 8006d24:	f1bc 0f00 	cmp.w	ip, #0
 8006d28:	eb0c 0506 	add.w	r5, ip, r6
 8006d2c:	da43      	bge.n	8006db6 <__ieee754_sqrt+0x15a>
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	db41      	blt.n	8006db6 <__ieee754_sqrt+0x15a>
 8006d32:	f100 0801 	add.w	r8, r0, #1
 8006d36:	1a09      	subs	r1, r1, r0
 8006d38:	459c      	cmp	ip, r3
 8006d3a:	bf88      	it	hi
 8006d3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006d40:	eba3 030c 	sub.w	r3, r3, ip
 8006d44:	4432      	add	r2, r6
 8006d46:	4640      	mov	r0, r8
 8006d48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006d4c:	f1be 0e01 	subs.w	lr, lr, #1
 8006d50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d5c:	d1db      	bne.n	8006d16 <__ieee754_sqrt+0xba>
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	d006      	beq.n	8006d70 <__ieee754_sqrt+0x114>
 8006d62:	1c50      	adds	r0, r2, #1
 8006d64:	bf13      	iteet	ne
 8006d66:	3201      	addne	r2, #1
 8006d68:	3401      	addeq	r4, #1
 8006d6a:	4672      	moveq	r2, lr
 8006d6c:	f022 0201 	bicne.w	r2, r2, #1
 8006d70:	1063      	asrs	r3, r4, #1
 8006d72:	0852      	lsrs	r2, r2, #1
 8006d74:	07e1      	lsls	r1, r4, #31
 8006d76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006d7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006d7e:	bf48      	it	mi
 8006d80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006d84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006d88:	4614      	mov	r4, r2
 8006d8a:	e781      	b.n	8006c90 <__ieee754_sqrt+0x34>
 8006d8c:	0ad9      	lsrs	r1, r3, #11
 8006d8e:	3815      	subs	r0, #21
 8006d90:	055b      	lsls	r3, r3, #21
 8006d92:	2900      	cmp	r1, #0
 8006d94:	d0fa      	beq.n	8006d8c <__ieee754_sqrt+0x130>
 8006d96:	02cd      	lsls	r5, r1, #11
 8006d98:	d50a      	bpl.n	8006db0 <__ieee754_sqrt+0x154>
 8006d9a:	f1c2 0420 	rsb	r4, r2, #32
 8006d9e:	fa23 f404 	lsr.w	r4, r3, r4
 8006da2:	1e55      	subs	r5, r2, #1
 8006da4:	4093      	lsls	r3, r2
 8006da6:	4321      	orrs	r1, r4
 8006da8:	1b42      	subs	r2, r0, r5
 8006daa:	e78a      	b.n	8006cc2 <__ieee754_sqrt+0x66>
 8006dac:	4610      	mov	r0, r2
 8006dae:	e7f0      	b.n	8006d92 <__ieee754_sqrt+0x136>
 8006db0:	0049      	lsls	r1, r1, #1
 8006db2:	3201      	adds	r2, #1
 8006db4:	e7ef      	b.n	8006d96 <__ieee754_sqrt+0x13a>
 8006db6:	4680      	mov	r8, r0
 8006db8:	e7bd      	b.n	8006d36 <__ieee754_sqrt+0xda>
 8006dba:	bf00      	nop
 8006dbc:	7ff00000 	.word	0x7ff00000

08006dc0 <with_errno>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	4616      	mov	r6, r2
 8006dc8:	f7fc fc1a 	bl	8003600 <__errno>
 8006dcc:	4629      	mov	r1, r5
 8006dce:	6006      	str	r6, [r0, #0]
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}

08006dd4 <xflow>:
 8006dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	461d      	mov	r5, r3
 8006dda:	b108      	cbz	r0, 8006de0 <xflow+0xc>
 8006ddc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006de0:	e9cd 2300 	strd	r2, r3, [sp]
 8006de4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006de8:	4620      	mov	r0, r4
 8006dea:	4629      	mov	r1, r5
 8006dec:	f7f9 fc0c 	bl	8000608 <__aeabi_dmul>
 8006df0:	2222      	movs	r2, #34	; 0x22
 8006df2:	b003      	add	sp, #12
 8006df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006df8:	f7ff bfe2 	b.w	8006dc0 <with_errno>

08006dfc <__math_uflow>:
 8006dfc:	b508      	push	{r3, lr}
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e04:	f7ff ffe6 	bl	8006dd4 <xflow>
 8006e08:	ec41 0b10 	vmov	d0, r0, r1
 8006e0c:	bd08      	pop	{r3, pc}

08006e0e <__math_oflow>:
 8006e0e:	b508      	push	{r3, lr}
 8006e10:	2200      	movs	r2, #0
 8006e12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006e16:	f7ff ffdd 	bl	8006dd4 <xflow>
 8006e1a:	ec41 0b10 	vmov	d0, r0, r1
 8006e1e:	bd08      	pop	{r3, pc}

08006e20 <fabs>:
 8006e20:	ec51 0b10 	vmov	r0, r1, d0
 8006e24:	ee10 2a10 	vmov	r2, s0
 8006e28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e2c:	ec43 2b10 	vmov	d0, r2, r3
 8006e30:	4770      	bx	lr

08006e32 <finite>:
 8006e32:	b082      	sub	sp, #8
 8006e34:	ed8d 0b00 	vstr	d0, [sp]
 8006e38:	9801      	ldr	r0, [sp, #4]
 8006e3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006e3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006e42:	0fc0      	lsrs	r0, r0, #31
 8006e44:	b002      	add	sp, #8
 8006e46:	4770      	bx	lr

08006e48 <scalbn>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	ec55 4b10 	vmov	r4, r5, d0
 8006e4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006e52:	4606      	mov	r6, r0
 8006e54:	462b      	mov	r3, r5
 8006e56:	b99a      	cbnz	r2, 8006e80 <scalbn+0x38>
 8006e58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e5c:	4323      	orrs	r3, r4
 8006e5e:	d036      	beq.n	8006ece <scalbn+0x86>
 8006e60:	4b39      	ldr	r3, [pc, #228]	; (8006f48 <scalbn+0x100>)
 8006e62:	4629      	mov	r1, r5
 8006e64:	ee10 0a10 	vmov	r0, s0
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f7f9 fbcd 	bl	8000608 <__aeabi_dmul>
 8006e6e:	4b37      	ldr	r3, [pc, #220]	; (8006f4c <scalbn+0x104>)
 8006e70:	429e      	cmp	r6, r3
 8006e72:	4604      	mov	r4, r0
 8006e74:	460d      	mov	r5, r1
 8006e76:	da10      	bge.n	8006e9a <scalbn+0x52>
 8006e78:	a32b      	add	r3, pc, #172	; (adr r3, 8006f28 <scalbn+0xe0>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	e03a      	b.n	8006ef6 <scalbn+0xae>
 8006e80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006e84:	428a      	cmp	r2, r1
 8006e86:	d10c      	bne.n	8006ea2 <scalbn+0x5a>
 8006e88:	ee10 2a10 	vmov	r2, s0
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fa04 	bl	800029c <__adddf3>
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
 8006e98:	e019      	b.n	8006ece <scalbn+0x86>
 8006e9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	3a36      	subs	r2, #54	; 0x36
 8006ea2:	4432      	add	r2, r6
 8006ea4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ea8:	428a      	cmp	r2, r1
 8006eaa:	dd08      	ble.n	8006ebe <scalbn+0x76>
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	a120      	add	r1, pc, #128	; (adr r1, 8006f30 <scalbn+0xe8>)
 8006eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb4:	da1c      	bge.n	8006ef0 <scalbn+0xa8>
 8006eb6:	a120      	add	r1, pc, #128	; (adr r1, 8006f38 <scalbn+0xf0>)
 8006eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ebc:	e018      	b.n	8006ef0 <scalbn+0xa8>
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	dd08      	ble.n	8006ed4 <scalbn+0x8c>
 8006ec2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ec6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006eca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ece:	ec45 4b10 	vmov	d0, r4, r5
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ed8:	da19      	bge.n	8006f0e <scalbn+0xc6>
 8006eda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ede:	429e      	cmp	r6, r3
 8006ee0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006ee4:	dd0a      	ble.n	8006efc <scalbn+0xb4>
 8006ee6:	a112      	add	r1, pc, #72	; (adr r1, 8006f30 <scalbn+0xe8>)
 8006ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e2      	bne.n	8006eb6 <scalbn+0x6e>
 8006ef0:	a30f      	add	r3, pc, #60	; (adr r3, 8006f30 <scalbn+0xe8>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 fb87 	bl	8000608 <__aeabi_dmul>
 8006efa:	e7cb      	b.n	8006e94 <scalbn+0x4c>
 8006efc:	a10a      	add	r1, pc, #40	; (adr r1, 8006f28 <scalbn+0xe0>)
 8006efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0b8      	beq.n	8006e78 <scalbn+0x30>
 8006f06:	a10e      	add	r1, pc, #56	; (adr r1, 8006f40 <scalbn+0xf8>)
 8006f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f0c:	e7b4      	b.n	8006e78 <scalbn+0x30>
 8006f0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f12:	3236      	adds	r2, #54	; 0x36
 8006f14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <scalbn+0x108>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	e7e8      	b.n	8006ef6 <scalbn+0xae>
 8006f24:	f3af 8000 	nop.w
 8006f28:	c2f8f359 	.word	0xc2f8f359
 8006f2c:	01a56e1f 	.word	0x01a56e1f
 8006f30:	8800759c 	.word	0x8800759c
 8006f34:	7e37e43c 	.word	0x7e37e43c
 8006f38:	8800759c 	.word	0x8800759c
 8006f3c:	fe37e43c 	.word	0xfe37e43c
 8006f40:	c2f8f359 	.word	0xc2f8f359
 8006f44:	81a56e1f 	.word	0x81a56e1f
 8006f48:	43500000 	.word	0x43500000
 8006f4c:	ffff3cb0 	.word	0xffff3cb0
 8006f50:	3c900000 	.word	0x3c900000

08006f54 <_sbrk>:
 8006f54:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <_sbrk+0x14>)
 8006f56:	6811      	ldr	r1, [r2, #0]
 8006f58:	4603      	mov	r3, r0
 8006f5a:	b909      	cbnz	r1, 8006f60 <_sbrk+0xc>
 8006f5c:	4903      	ldr	r1, [pc, #12]	; (8006f6c <_sbrk+0x18>)
 8006f5e:	6011      	str	r1, [r2, #0]
 8006f60:	6810      	ldr	r0, [r2, #0]
 8006f62:	4403      	add	r3, r0
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4770      	bx	lr
 8006f68:	2000032c 	.word	0x2000032c
 8006f6c:	20000330 	.word	0x20000330

08006f70 <_init>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	bf00      	nop
 8006f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f76:	bc08      	pop	{r3}
 8006f78:	469e      	mov	lr, r3
 8006f7a:	4770      	bx	lr

08006f7c <_fini>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	bf00      	nop
 8006f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f82:	bc08      	pop	{r3}
 8006f84:	469e      	mov	lr, r3
 8006f86:	4770      	bx	lr
