
Pulse_width_10ns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08006850  08006850  00016850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c70  08006c70  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006c70  08006c70  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c70  08006c70  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001d8  08006e50  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08006e50  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eb0  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e01  00000000  00000000  000240b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00024ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000340  00000000  00000000  00025288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106e6  00000000  00000000  000255c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049f0  00000000  00000000  00035cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057912  00000000  00000000  0003a69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00091fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  00092000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006838 	.word	0x08006838

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08006838 	.word	0x08006838

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:

//Contador
uint8_t counter = 50;

int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	//Activamos la FPU
	SCB -> CPACR |= (0xF << 20);
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <main+0xa0>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <main+0xa0>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	inSystem ();
 8000cac:	f000 f84e 	bl	8000d4c <inSystem>

    /* Loop forever */
	while(1){


			if (rxData != '\0'){
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <main+0xa4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0fb      	beq.n	8000cb0 <main+0x18>

				writeChar(&handlerUSART, rxData);
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <main+0xa4>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4820      	ldr	r0, [pc, #128]	; (8000d40 <main+0xa8>)
 8000cc0:	f001 ffa8 	bl	8002c14 <writeChar>

				if (rxData == '+'){
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <main+0xa4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b2b      	cmp	r3, #43	; 0x2b
 8000cca:	d118      	bne.n	8000cfe <main+0x66>

					if (counter < 100){
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <main+0xac>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b63      	cmp	r3, #99	; 0x63
 8000cd2:	d805      	bhi.n	8000ce0 <main+0x48>
					counter+= 1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <main+0xac>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <main+0xac>)
 8000cde:	701a      	strb	r2, [r3, #0]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <main+0xac>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cec:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf0:	4815      	ldr	r0, [pc, #84]	; (8000d48 <main+0xb0>)
 8000cf2:	f001 f829 	bl	8001d48 <updateDuttyCycle>
					rxData = '\0';
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <main+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e7d8      	b.n	8000cb0 <main+0x18>

				}else if (rxData == '-'){
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <main+0xa4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b2d      	cmp	r3, #45	; 0x2d
 8000d04:	d1d4      	bne.n	8000cb0 <main+0x18>

					if (counter > 0){
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <main+0xac>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <main+0x82>
						counter-= 1;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <main+0xac>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <main+0xac>)
 8000d18:	701a      	strb	r2, [r3, #0]
					}
					updateDuttyCycle(&handlerPWM_pulse_10ns, counter);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <main+0xac>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <main+0xb0>)
 8000d2c:	f001 f80c 	bl	8001d48 <updateDuttyCycle>
					rxData = '\0';
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <main+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			if (rxData != '\0'){
 8000d36:	e7bb      	b.n	8000cb0 <main+0x18>
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	200002e4 	.word	0x200002e4
 8000d40:	20000250 	.word	0x20000250
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000238 	.word	0x20000238

08000d4c <inSystem>:
		}
	}
}


void inSystem (void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0


	// Activamos la maxima velocidad del microcontrolador
	show_MaxFreq(MCO1,1);
 8000d50:	2101      	movs	r1, #1
 8000d52:	2000      	movs	r0, #0
 8000d54:	f001 fabc 	bl	80022d0 <show_MaxFreq>
	RCC_enableMaxFrequencies(RCC_20MHz);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f001 f805 	bl	8001d68 <RCC_enableMaxFrequencies>

	//Config del pin A8 salida de la velocidad del micro

	handlerMCOShow.pGPIOx                             = GPIOA;
 8000d5e:	4b49      	ldr	r3, [pc, #292]	; (8000e84 <inSystem+0x138>)
 8000d60:	4a49      	ldr	r2, [pc, #292]	; (8000e88 <inSystem+0x13c>)
 8000d62:	601a      	str	r2, [r3, #0]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinNumber      = PIN_8 ;
 8000d64:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <inSystem+0x138>)
 8000d66:	2208      	movs	r2, #8
 8000d68:	711a      	strb	r2, [r3, #4]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000d6a:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <inSystem+0x138>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	725a      	strb	r2, [r3, #9]
	handlerMCOShow.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000d70:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <inSystem+0x138>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerMCOShow);
 8000d76:	4843      	ldr	r0, [pc, #268]	; (8000e84 <inSystem+0x138>)
 8000d78:	f000 fd80 	bl	800187c <GPIO_Config>

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <inSystem+0x140>)
 8000d7e:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <inSystem+0x13c>)
 8000d80:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000d82:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <inSystem+0x140>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d88:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <inSystem+0x140>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <inSystem+0x140>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <inSystem+0x140>)
 8000d96:	2205      	movs	r2, #5
 8000d98:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <inSystem+0x140>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <inSystem+0x140>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000da6:	4839      	ldr	r0, [pc, #228]	; (8000e8c <inSystem+0x140>)
 8000da8:	f000 fd68 	bl	800187c <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000dac:	2101      	movs	r1, #1
 8000dae:	4837      	ldr	r0, [pc, #220]	; (8000e8c <inSystem+0x140>)
 8000db0:	f000 fe8e 	bl	8001ad0 <GPIO_WritePin>

	handlerTimerBlinky.ptrTIMx                           = TIM3;
 8000db4:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <inSystem+0x144>)
 8000db6:	4a37      	ldr	r2, [pc, #220]	; (8000e94 <inSystem+0x148>)
 8000db8:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <inSystem+0x144>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	741a      	strb	r2, [r3, #16]
	handlerTimerBlinky.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8000dc0:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <inSystem+0x144>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed            = BTIMER_SPEED_16MHz_1ms;
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <inSystem+0x144>)
 8000dc8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000dcc:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period           = 1000;
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <inSystem+0x144>)
 8000dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd4:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTimerBlinky);
 8000dd6:	482e      	ldr	r0, [pc, #184]	; (8000e90 <inSystem+0x144>)
 8000dd8:	f000 f97e 	bl	80010d8 <BasicTimer_Config>
	startTimer(&handlerTimerBlinky);
 8000ddc:	482c      	ldr	r0, [pc, #176]	; (8000e90 <inSystem+0x144>)
 8000dde:	f000 fd3b 	bl	8001858 <startTimer>


	//Comunicacion serial


	handlerRxPin.pGPIOx                             = GPIOA;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <inSystem+0x14c>)
 8000de4:	4a28      	ldr	r2, [pc, #160]	; (8000e88 <inSystem+0x13c>)
 8000de6:	601a      	str	r2, [r3, #0]
	handlerRxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <inSystem+0x14c>)
 8000dea:	2207      	movs	r2, #7
 8000dec:	725a      	strb	r2, [r3, #9]
	handlerRxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <inSystem+0x14c>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	715a      	strb	r2, [r3, #5]
	handlerRxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <inSystem+0x14c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	721a      	strb	r2, [r3, #8]
	handlerRxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <inSystem+0x14c>)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	711a      	strb	r2, [r3, #4]
	handlerRxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e00:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <inSystem+0x14c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	71da      	strb	r2, [r3, #7]
	handlerRxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <inSystem+0x14c>)
 8000e08:	2203      	movs	r2, #3
 8000e0a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerRxPin);
 8000e0c:	4822      	ldr	r0, [pc, #136]	; (8000e98 <inSystem+0x14c>)
 8000e0e:	f000 fd35 	bl	800187c <GPIO_Config>


	handlerTxPin.pGPIOx                             = GPIOA;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <inSystem+0x150>)
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <inSystem+0x13c>)
 8000e16:	601a      	str	r2, [r3, #0]
	handlerTxPin.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <inSystem+0x150>)
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	725a      	strb	r2, [r3, #9]
	handlerTxPin.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <inSystem+0x150>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	715a      	strb	r2, [r3, #5]
	handlerTxPin.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <inSystem+0x150>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	721a      	strb	r2, [r3, #8]
	handlerTxPin.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <inSystem+0x150>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	711a      	strb	r2, [r3, #4]
	handlerTxPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <inSystem+0x150>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	71da      	strb	r2, [r3, #7]
	handlerTxPin.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <inSystem+0x150>)
 8000e38:	2203      	movs	r2, #3
 8000e3a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerTxPin);
 8000e3c:	4817      	ldr	r0, [pc, #92]	; (8000e9c <inSystem+0x150>)
 8000e3e:	f000 fd1d 	bl	800187c <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <inSystem+0x154>)
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <inSystem+0x158>)
 8000e46:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <inSystem+0x154>)
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <inSystem+0x15c>)
 8000e4c:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <inSystem+0x154>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <inSystem+0x154>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <inSystem+0x154>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <inSystem+0x154>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <inSystem+0x154>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <inSystem+0x154>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <inSystem+0x154>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <inSystem+0x154>)
 8000e7a:	f001 fb01 	bl	8002480 <USART_Config>

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000200 	.word	0x20000200
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	200001f4 	.word	0x200001f4
 8000e90:	20000224 	.word	0x20000224
 8000e94:	40000400 	.word	0x40000400
 8000e98:	2000020c 	.word	0x2000020c
 8000e9c:	20000218 	.word	0x20000218
 8000ea0:	20000250 	.word	0x20000250
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	02faf080 	.word	0x02faf080

08000eac <BasicTimer3_Callback>:

void BasicTimer3_Callback(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerPinA5);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <BasicTimer3_Callback+0x10>)
 8000eb2:	f000 fe59 	bl	8001b68 <GPIOxTooglePin>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001f4 	.word	0x200001f4

08000ec0 <usart2Rx_Callback>:

void usart2Rx_Callback(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8000ec4:	f001 fece 	bl	8002c64 <getRxData>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <usart2Rx_Callback+0x14>)
 8000ece:	701a      	strb	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200002e4 	.word	0x200002e4

08000ed8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <ITM_SendChar+0x48>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <ITM_SendChar+0x48>)
 8000ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <ITM_SendChar+0x4c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <ITM_SendChar+0x4c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000efa:	bf00      	nop
 8000efc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f8      	beq.n	8000efc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000f0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000edfc 	.word	0xe000edfc
 8000f24:	e0000e00 	.word	0xe0000e00

08000f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	return 1;
 8000f2c:	2301      	movs	r3, #1
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_kill>:

int _kill(int pid, int sig)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f42:	f001 ffbf 	bl	8002ec4 <__errno>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2216      	movs	r2, #22
 8000f4a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_exit>:

void _exit (int status)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ffe7 	bl	8000f38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f6a:	e7fe      	b.n	8000f6a <_exit+0x12>

08000f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e00a      	b.n	8000f94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f7e:	f3af 8000 	nop.w
 8000f82:	4601      	mov	r1, r0
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	60ba      	str	r2, [r7, #8]
 8000f8a:	b2ca      	uxtb	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbf0      	blt.n	8000f7e <_read+0x12>
	}

return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e009      	b.n	8000fcc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff89 	bl	8000ed8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf1      	blt.n	8000fb8 <_write+0x12>
	}
	return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_close>:

int _close(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001006:	605a      	str	r2, [r3, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_isatty>:

int _isatty(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return 1;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
	return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800104c:	f001 fea8 	bl	8002da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001076:	f001 ff2b 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff fe0d 	bl	8000c98 <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   r0, =_estack
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800108c:	08006c78 	.word	0x08006c78
  ldr r2, =_sbss
 8001090:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001094:	20000310 	.word	0x20000310

08001098 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a85      	ldr	r2, [pc, #532]	; (8001308 <BasicTimer_Config+0x230>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d106      	bne.n	8001104 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <BasicTimer_Config+0x234>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a84      	ldr	r2, [pc, #528]	; (800130c <BasicTimer_Config+0x234>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	e030      	b.n	8001166 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d106      	bne.n	800111c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800110e:	4b7f      	ldr	r3, [pc, #508]	; (800130c <BasicTimer_Config+0x234>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <BasicTimer_Config+0x234>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	e024      	b.n	8001166 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a7b      	ldr	r2, [pc, #492]	; (8001310 <BasicTimer_Config+0x238>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d106      	bne.n	8001134 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001126:	4b79      	ldr	r3, [pc, #484]	; (800130c <BasicTimer_Config+0x234>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a78      	ldr	r2, [pc, #480]	; (800130c <BasicTimer_Config+0x234>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	e018      	b.n	8001166 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a76      	ldr	r2, [pc, #472]	; (8001314 <BasicTimer_Config+0x23c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d106      	bne.n	800114c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800113e:	4b73      	ldr	r3, [pc, #460]	; (800130c <BasicTimer_Config+0x234>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a72      	ldr	r2, [pc, #456]	; (800130c <BasicTimer_Config+0x234>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	e00c      	b.n	8001166 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a71      	ldr	r2, [pc, #452]	; (8001318 <BasicTimer_Config+0x240>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d106      	bne.n	8001164 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001156:	4b6d      	ldr	r3, [pc, #436]	; (800130c <BasicTimer_Config+0x234>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a6c      	ldr	r2, [pc, #432]	; (800130c <BasicTimer_Config+0x234>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	e000      	b.n	8001166 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8001164:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001174:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6892      	ldr	r2, [r2, #8]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 80d3 	bne.w	8001330 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0210 	bic.w	r2, r2, #16
 8001198:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2ba0      	cmp	r3, #160	; 0xa0
 80011a4:	d022      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2bc8      	cmp	r3, #200	; 0xc8
 80011aa:	d01f      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011b2:	d01b      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011ba:	d017      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c2:	d013      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011ca:	d00f      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80011d2:	d00b      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80011da:	d007      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80011e2:	d003      	beq.n	80011ec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ea:	d10b      	bne.n	8001204 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2264      	movs	r2, #100	; 0x64
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	3a01      	subs	r2, #1
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
 8001202:	e07c      	b.n	80012fe <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800120a:	d029      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001212:	d025      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800121a:	4293      	cmp	r3, r2
 800121c:	d020      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001224:	d01c      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d017      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f241 7270 	movw	r2, #6000	; 0x1770
 8001236:	4293      	cmp	r3, r2
 8001238:	d012      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800124a:	d009      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f242 3228 	movw	r2, #9000	; 0x2328
 8001252:	4293      	cmp	r3, r2
 8001254:	d004      	beq.n	8001260 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f242 7210 	movw	r2, #10000	; 0x2710
 800125c:	4293      	cmp	r3, r2
 800125e:	d10c      	bne.n	800127a <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	3a01      	subs	r2, #1
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
 8001278:	e041      	b.n	80012fe <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001280:	d028      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001288:	4293      	cmp	r3, r2
 800128a:	d023      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001292:	4293      	cmp	r3, r2
 8001294:	d01e      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f649 4240 	movw	r2, #40000	; 0x9c40
 800129c:	4293      	cmp	r3, r2
 800129e:	d019      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d014      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f64e 2260 	movw	r2, #60000	; 0xea60
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d00f      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <BasicTimer_Config+0x244>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d00b      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <BasicTimer_Config+0x248>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d007      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <BasicTimer_Config+0x24c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d003      	beq.n	80012d4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4a16      	ldr	r2, [pc, #88]	; (8001328 <BasicTimer_Config+0x250>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d108      	bne.n	80012e6 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	3a01      	subs	r2, #1
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e4:	e00b      	b.n	80012fe <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <BasicTimer_Config+0x254>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	3a01      	subs	r2, #1
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
 8001306:	e027      	b.n	8001358 <BasicTimer_Config+0x280>
 8001308:	40010000 	.word	0x40010000
 800130c:	40023800 	.word	0x40023800
 8001310:	40000400 	.word	0x40000400
 8001314:	40000800 	.word	0x40000800
 8001318:	40000c00 	.word	0x40000c00
 800131c:	00011170 	.word	0x00011170
 8001320:	00013880 	.word	0x00013880
 8001324:	00015f90 	.word	0x00015f90
 8001328:	000186a0 	.word	0x000186a0
 800132c:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0210 	orr.w	r2, r2, #16
 800133e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3a01      	subs	r2, #1
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3a01      	subs	r2, #1
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001370:	d103      	bne.n	800137a <BasicTimer_Config+0x2a2>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001372:	201c      	movs	r0, #28
 8001374:	f7ff fe92 	bl	800109c <__NVIC_EnableIRQ>
 8001378:	e01b      	b.n	80013b2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <BasicTimer_Config+0x2e8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d103      	bne.n	800138c <BasicTimer_Config+0x2b4>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001384:	201d      	movs	r0, #29
 8001386:	f7ff fe89 	bl	800109c <__NVIC_EnableIRQ>
 800138a:	e012      	b.n	80013b2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <BasicTimer_Config+0x2ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d103      	bne.n	800139e <BasicTimer_Config+0x2c6>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001396:	201e      	movs	r0, #30
 8001398:	f7ff fe80 	bl	800109c <__NVIC_EnableIRQ>
 800139c:	e009      	b.n	80013b2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <BasicTimer_Config+0x2f0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d103      	bne.n	80013b0 <BasicTimer_Config+0x2d8>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80013a8:	2032      	movs	r0, #50	; 0x32
 80013aa:	f7ff fe77 	bl	800109c <__NVIC_EnableIRQ>
 80013ae:	e000      	b.n	80013b2 <BasicTimer_Config+0x2da>
	}
	else{
		__NOP();
 80013b0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80013b2:	b662      	cpsie	i
}
 80013b4:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40000400 	.word	0x40000400
 80013c4:	40000800 	.word	0x40000800
 80013c8:	40000c00 	.word	0x40000c00

080013cc <BasicTimer2_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer2_Callback(void){
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80013d0:	bf00      	nop
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <BasicTimer4_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer4_Callback(void){
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80013e0:	bf00      	nop
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80013f0:	bf00      	nop
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001400:	bf00      	nop
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001410:	bf00      	nop
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001420:	bf00      	nop
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001430:	bf00      	nop
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001440:	bf00      	nop
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001450:	bf00      	nop
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001460:	bf00      	nop
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001470:	bf00      	nop
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001480:	bf00      	nop
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001490:	bf00      	nop
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014a0:	bf00      	nop
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014b0:	bf00      	nop
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014c0:	bf00      	nop
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014d0:	bf00      	nop
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80014e0:	bf00      	nop
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80014f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80014fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 800150e:	f7ff ff5d 	bl	80013cc <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8001512:	e066      	b.n	80015e2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8001514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8001522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	f023 0302 	bic.w	r3, r3, #2
 8001530:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8001532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001540:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8001542:	f7ff ff5b 	bl	80013fc <Capture_TIM2_Ch1_Callback>
}
 8001546:	e04c      	b.n	80015e2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 8001548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d012      	beq.n	800157c <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 8001556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 8001566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001574:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 8001576:	f7ff ff49 	bl	800140c <Capture_TIM2_Ch2_Callback>
}
 800157a:	e032      	b.n	80015e2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 800157c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d012      	beq.n	80015b0 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800158a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001594:	f023 0308 	bic.w	r3, r3, #8
 8001598:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800159a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015a8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 80015aa:	f7ff ff37 	bl	800141c <Capture_TIM2_Ch3_Callback>
}
 80015ae:	e018      	b.n	80015e2 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 80015b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d011      	beq.n	80015e2 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80015be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c8:	f023 0310 	bic.w	r3, r3, #16
 80015cc:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80015ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015dc:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80015de:	f7ff ff25 	bl	800142c <Capture_TIM2_Ch4_Callback>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8001604:	f7ff fc52 	bl	8000eac <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 8001608:	e052      	b.n	80016b0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00e      	beq.n	8001634 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 800161c:	f023 0302 	bic.w	r3, r3, #2
 8001620:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800162c:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 800162e:	f7ff ff05 	bl	800143c <Capture_TIM3_Ch1_Callback>
}
 8001632:	e03d      	b.n	80016b0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001656:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 8001658:	f7ff fef8 	bl	800144c <Capture_TIM3_Ch2_Callback>
}
 800165c:	e028      	b.n	80016b0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00e      	beq.n	8001688 <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001670:	f023 0308 	bic.w	r3, r3, #8
 8001674:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 800167c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001680:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8001682:	f7ff feeb 	bl	800145c <Capture_TIM3_Ch3_Callback>
}
 8001686:	e013      	b.n	80016b0 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00d      	beq.n	80016b0 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 800169a:	f023 0310 	bic.w	r3, r3, #16
 800169e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <TIM3_IRQHandler+0xcc>)
 80016a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016aa:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80016ac:	f7ff fede 	bl	800146c <Capture_TIM3_Ch4_Callback>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40000400 	.word	0x40000400

080016b8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80016c8:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80016d4:	f7ff fe82 	bl	80013dc <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80016d8:	e052      	b.n	8001780 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00e      	beq.n	8001704 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	4a26      	ldr	r2, [pc, #152]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016ec:	f023 0302 	bic.w	r3, r3, #2
 80016f0:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	4a23      	ldr	r2, [pc, #140]	; (8001784 <TIM4_IRQHandler+0xcc>)
 80016f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016fc:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80016fe:	f7ff febd 	bl	800147c <Capture_TIM4_Ch1_Callback>
}
 8001702:	e03d      	b.n	8001780 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00e      	beq.n	800172e <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <TIM4_IRQHandler+0xcc>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4a18      	ldr	r2, [pc, #96]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001726:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 8001728:	f7ff fec8 	bl	80014bc <Capture_TIM5_Ch2_Callback>
}
 800172c:	e028      	b.n	8001780 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00e      	beq.n	8001758 <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <TIM4_IRQHandler+0xcc>)
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001740:	f023 0308 	bic.w	r3, r3, #8
 8001744:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <TIM4_IRQHandler+0xcc>)
 800174c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001750:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8001752:	f7ff fe9b 	bl	800148c <Capture_TIM4_Ch3_Callback>
}
 8001756:	e013      	b.n	8001780 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <TIM4_IRQHandler+0xcc>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00d      	beq.n	8001780 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <TIM4_IRQHandler+0xcc>)
 800176a:	f023 0310 	bic.w	r3, r3, #16
 800176e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <TIM4_IRQHandler+0xcc>)
 8001776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800177a:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 800177c:	f7ff fe8e 	bl	800149c <Capture_TIM4_Ch4_Callback>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40000800 	.word	0x40000800

08001788 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <TIM5_IRQHandler+0xcc>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <TIM5_IRQHandler+0xcc>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <TIM5_IRQHandler+0xcc>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 80017a4:	f7ff fe22 	bl	80013ec <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 80017a8:	e052      	b.n	8001850 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00e      	beq.n	80017d4 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017bc:	f023 0302 	bic.w	r3, r3, #2
 80017c0:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	4a23      	ldr	r2, [pc, #140]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017cc:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80017ce:	f7ff fe6d 	bl	80014ac <Capture_TIM5_Ch1_Callback>
}
 80017d2:	e03d      	b.n	8001850 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00e      	beq.n	80017fe <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a18      	ldr	r2, [pc, #96]	; (8001854 <TIM5_IRQHandler+0xcc>)
 80017f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f6:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80017f8:	f7ff fe60 	bl	80014bc <Capture_TIM5_Ch2_Callback>
}
 80017fc:	e028      	b.n	8001850 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <TIM5_IRQHandler+0xcc>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00e      	beq.n	8001828 <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <TIM5_IRQHandler+0xcc>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	4a11      	ldr	r2, [pc, #68]	; (8001854 <TIM5_IRQHandler+0xcc>)
 8001810:	f023 0308 	bic.w	r3, r3, #8
 8001814:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <TIM5_IRQHandler+0xcc>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <TIM5_IRQHandler+0xcc>)
 800181c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001820:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8001822:	f7ff fe53 	bl	80014cc <Capture_TIM5_Ch3_Callback>
}
 8001826:	e013      	b.n	8001850 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <TIM5_IRQHandler+0xcc>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <TIM5_IRQHandler+0xcc>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <TIM5_IRQHandler+0xcc>)
 800183a:	f023 0310 	bic.w	r3, r3, #16
 800183e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <TIM5_IRQHandler+0xcc>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <TIM5_IRQHandler+0xcc>)
 8001846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800184a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 800184c:	f7ff fe46 	bl	80014dc <Capture_TIM5_Ch4_Callback>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40000c00 	.word	0x40000c00

08001858 <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a88      	ldr	r2, [pc, #544]	; (8001ab4 <GPIO_Config+0x238>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d106      	bne.n	80018a4 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <GPIO_Config+0x23c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a87      	ldr	r2, [pc, #540]	; (8001ab8 <GPIO_Config+0x23c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	e03a      	b.n	800191a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a84      	ldr	r2, [pc, #528]	; (8001abc <GPIO_Config+0x240>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d106      	bne.n	80018bc <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80018ae:	4b82      	ldr	r3, [pc, #520]	; (8001ab8 <GPIO_Config+0x23c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a81      	ldr	r2, [pc, #516]	; (8001ab8 <GPIO_Config+0x23c>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	e02e      	b.n	800191a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <GPIO_Config+0x244>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d106      	bne.n	80018d4 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80018c6:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <GPIO_Config+0x23c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a7b      	ldr	r2, [pc, #492]	; (8001ab8 <GPIO_Config+0x23c>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	e022      	b.n	800191a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <GPIO_Config+0x248>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d106      	bne.n	80018ec <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <GPIO_Config+0x23c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <GPIO_Config+0x23c>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	e016      	b.n	800191a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a75      	ldr	r2, [pc, #468]	; (8001ac8 <GPIO_Config+0x24c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d106      	bne.n	8001904 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80018f6:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <GPIO_Config+0x23c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a6f      	ldr	r2, [pc, #444]	; (8001ab8 <GPIO_Config+0x23c>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	e00a      	b.n	800191a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a70      	ldr	r2, [pc, #448]	; (8001acc <GPIO_Config+0x250>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d105      	bne.n	800191a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800190e:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <GPIO_Config+0x23c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a69      	ldr	r2, [pc, #420]	; (8001ab8 <GPIO_Config+0x23c>)
 8001914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	795b      	ldrb	r3, [r3, #5]
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2103      	movs	r1, #3
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	400a      	ands	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7a1b      	ldrb	r3, [r3, #8]
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	791b      	ldrb	r3, [r3, #4]
 8001974:	4619      	mov	r1, r3
 8001976:	2301      	movs	r3, #1
 8001978:	408b      	lsls	r3, r1
 800197a:	43db      	mvns	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	400a      	ands	r2, r1
 8001984:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	799b      	ldrb	r3, [r3, #6]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	791b      	ldrb	r3, [r3, #4]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	791b      	ldrb	r3, [r3, #4]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2103      	movs	r1, #3
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	79db      	ldrb	r3, [r3, #7]
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	791b      	ldrb	r3, [r3, #4]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2103      	movs	r1, #3
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	400a      	ands	r2, r1
 8001a04:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68d9      	ldr	r1, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	795b      	ldrb	r3, [r3, #5]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d143      	bne.n	8001aa6 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	791b      	ldrb	r3, [r3, #4]
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	d81f      	bhi.n	8001a66 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	210f      	movs	r1, #15
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	400a      	ands	r2, r1
 8001a46:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7a5b      	ldrb	r3, [r3, #9]
 8001a52:	4619      	mov	r1, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8001a64:	e01f      	b.n	8001aa6 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	791b      	ldrb	r3, [r3, #4]
 8001a6a:	3b08      	subs	r3, #8
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a76:	210f      	movs	r1, #15
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4619      	mov	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7a5b      	ldrb	r3, [r3, #9]
 8001a94:	4619      	mov	r1, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021c00 	.word	0x40021c00

08001ad0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d10d      	bne.n	8001afe <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	4619      	mov	r1, r3
 8001aee:	2301      	movs	r3, #1
 8001af0:	408b      	lsls	r3, r1
 8001af2:	4619      	mov	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8001afc:	e00d      	b.n	8001b1a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	3310      	adds	r3, #16
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	619a      	str	r2, [r3, #24]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	791b      	ldrb	r3, [r3, #4]
 8001b36:	461a      	mov	r2, r3
 8001b38:	2301      	movs	r3, #1
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8001b46:	897b      	ldrh	r3, [r7, #10]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	40d3      	lsrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffd8 	bl	8001b26 <GPIO_ReadPin>
 8001b76:	4603      	mov	r3, r0
 8001b78:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffa1 	bl	8001ad0 <GPIO_WritePin>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b08b      	sub	sp, #44	; 0x2c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	f200 80c3 	bhi.w	8001d30 <setDuttyCycle+0x198>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <setDuttyCycle+0x18>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001c1d 	.word	0x08001c1d
 8001bb8:	08001c79 	.word	0x08001c79
 8001bbc:	08001cd5 	.word	0x08001cd5
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <setDuttyCycle+0x1a4>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	ee17 0a90 	vmov	r0, s15
 8001bda:	f7fe fcbd 	bl	8000558 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <setDuttyCycle+0x1a8>)
 8001bec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf0:	f7fe fe34 	bl	800085c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <setDuttyCycle+0x1ac>)
 8001c02:	f7fe fb49 	bl	8000298 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681c      	ldr	r4, [r3, #0]
 8001c12:	f7fe ffd1 	bl	8000bb8 <__aeabi_d2uiz>
 8001c16:	4603      	mov	r3, r0
 8001c18:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8001c1a:	e08a      	b.n	8001d32 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <setDuttyCycle+0x1a4>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c32:	ee17 0a90 	vmov	r0, s15
 8001c36:	f7fe fc8f 	bl	8000558 <__aeabi_f2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <setDuttyCycle+0x1a8>)
 8001c48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c4c:	f7fe fe06 	bl	800085c <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <setDuttyCycle+0x1ac>)
 8001c5e:	f7fe fb1b 	bl	8000298 <__aeabi_dsub>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681c      	ldr	r4, [r3, #0]
 8001c6e:	f7fe ffa3 	bl	8000bb8 <__aeabi_d2uiz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8001c76:	e05c      	b.n	8001d32 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <setDuttyCycle+0x1a4>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	ee17 0a90 	vmov	r0, s15
 8001c92:	f7fe fc61 	bl	8000558 <__aeabi_f2d>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <setDuttyCycle+0x1a8>)
 8001ca4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca8:	f7fe fdd8 	bl	800085c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <setDuttyCycle+0x1ac>)
 8001cba:	f7fe faed 	bl	8000298 <__aeabi_dsub>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681c      	ldr	r4, [r3, #0]
 8001cca:	f7fe ff75 	bl	8000bb8 <__aeabi_d2uiz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8001cd2:	e02e      	b.n	8001d32 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <setDuttyCycle+0x1a4>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	ee17 0a90 	vmov	r0, s15
 8001cee:	f7fe fc33 	bl	8000558 <__aeabi_f2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <setDuttyCycle+0x1a8>)
 8001d00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d04:	f7fe fdaa 	bl	800085c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <setDuttyCycle+0x1ac>)
 8001d16:	f7fe fabf 	bl	8000298 <__aeabi_dsub>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681c      	ldr	r4, [r3, #0]
 8001d26:	f7fe ff47 	bl	8000bb8 <__aeabi_d2uiz>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001d2e:	e000      	b.n	8001d32 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8001d30:	bf00      	nop
	}

	}// fin del switch-case

}
 8001d32:	bf00      	nop
 8001d34:	372c      	adds	r7, #44	; 0x2c
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200002e6 	.word	0x200002e6
 8001d40:	40590000 	.word	0x40590000
 8001d44:	3ff00000 	.word	0x3ff00000

08001d48 <updateDuttyCycle>:

}


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, float newDutty){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	ed87 0a00 	vstr	s0, [r7]
	// Actualizamos el registro que manipula el dutty
    ptrPwmHandler->config.duttyCicle = newDutty;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	611a      	str	r2, [r3, #16]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ff1c 	bl	8001b98 <setDuttyCycle>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8001d72:	4b94      	ldr	r3, [pc, #592]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a93      	ldr	r2, [pc, #588]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8001d86:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <RCC_enableMaxFrequencies+0x260>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a8f      	ldr	r2, [pc, #572]	; (8001fc8 <RCC_enableMaxFrequencies+0x260>)
 8001d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d90:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8001d92:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a8b      	ldr	r2, [pc, #556]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001d98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d9c:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	f200 827c 	bhi.w	800229e <RCC_enableMaxFrequencies+0x536>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <RCC_enableMaxFrequencies+0x44>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001dd1 	.word	0x08001dd1
 8001db0:	08001e57 	.word	0x08001e57
 8001db4:	08001edd 	.word	0x08001edd
 8001db8:	08001f67 	.word	0x08001f67
 8001dbc:	08001ff9 	.word	0x08001ff9
 8001dc0:	0800207f 	.word	0x0800207f
 8001dc4:	08002105 	.word	0x08002105
 8001dc8:	0800218b 	.word	0x0800218b
 8001dcc:	08002219 	.word	0x08002219
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8001dd0:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a7b      	ldr	r2, [pc, #492]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8001ddc:	4b79      	ldr	r3, [pc, #484]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a78      	ldr	r2, [pc, #480]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001de2:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8001de6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8001de8:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001dee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001df2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8001df4:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfe:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8001e00:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a6f      	ldr	r2, [pc, #444]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e0a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8001e0c:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e16:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e22:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8001e24:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001e30:	e000      	b.n	8001e34 <RCC_enableMaxFrequencies+0xcc>
				__NOP();
 8001e32:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001e34:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f8      	beq.n	8001e32 <RCC_enableMaxFrequencies+0xca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8001e40:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001e46:	f023 030f 	bic.w	r3, r3, #15
 8001e4a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8001e4c:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001e4e:	4a5f      	ldr	r2, [pc, #380]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6013      	str	r3, [r2, #0]

			break;
 8001e54:	e224      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e5c:	f043 0310 	orr.w	r3, r3, #16
 8001e60:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8001e62:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e68:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8001e6c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8001e6e:	4b55      	ldr	r3, [pc, #340]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e78:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8001e7a:	4b52      	ldr	r3, [pc, #328]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a51      	ldr	r2, [pc, #324]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8001e86:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a4e      	ldr	r2, [pc, #312]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e90:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8001e92:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001e98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e9c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8001e9e:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4a48      	ldr	r2, [pc, #288]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ea8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001eb6:	e000      	b.n	8001eba <RCC_enableMaxFrequencies+0x152>
				__NOP();
 8001eb8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001eba:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f8      	beq.n	8001eb8 <RCC_enableMaxFrequencies+0x150>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a40      	ldr	r2, [pc, #256]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001ecc:	f023 030f 	bic.w	r3, r3, #15
 8001ed0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001ed4:	4a3d      	ldr	r2, [pc, #244]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6013      	str	r3, [r2, #0]

			break;
 8001eda:	e1e1      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a38      	ldr	r2, [pc, #224]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001eee:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8001ef2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8001ef4:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001efa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001efe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f16:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a29      	ldr	r2, [pc, #164]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f22:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001f3c:	e000      	b.n	8001f40 <RCC_enableMaxFrequencies+0x1d8>
				__NOP();
 8001f3e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f8      	beq.n	8001f3e <RCC_enableMaxFrequencies+0x1d6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <RCC_enableMaxFrequencies+0x264>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]


			break;
 8001f64:	e19c      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f78:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8001f7c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f84:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f88:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f9c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001fa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fa8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fb4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8001fb6:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a02      	ldr	r2, [pc, #8]	; (8001fc4 <RCC_enableMaxFrequencies+0x25c>)
 8001fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001fc2:	e006      	b.n	8001fd2 <RCC_enableMaxFrequencies+0x26a>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	40023c00 	.word	0x40023c00
				__NOP();
 8001fd0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8001fd2:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f8      	beq.n	8001fd0 <RCC_enableMaxFrequencies+0x268>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8001fde:	4b8d      	ldr	r3, [pc, #564]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a8c      	ldr	r2, [pc, #560]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8001fe4:	f023 030f 	bic.w	r3, r3, #15
 8001fe8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8001fea:	4b8a      	ldr	r3, [pc, #552]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a89      	ldr	r2, [pc, #548]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6013      	str	r3, [r2, #0]

			break;
 8001ff6:	e153      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8001ff8:	4b85      	ldr	r3, [pc, #532]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a84      	ldr	r2, [pc, #528]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8002004:	4b82      	ldr	r3, [pc, #520]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a81      	ldr	r2, [pc, #516]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800200a:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800200e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002010:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a7e      	ldr	r2, [pc, #504]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002016:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800201a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800201c:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800201e:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a79      	ldr	r2, [pc, #484]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800202a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800202e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002030:	4b77      	ldr	r3, [pc, #476]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a76      	ldr	r2, [pc, #472]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002036:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800203a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800203c:	4b74      	ldr	r3, [pc, #464]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a73      	ldr	r2, [pc, #460]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002042:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002046:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002048:	4b71      	ldr	r3, [pc, #452]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a70      	ldr	r2, [pc, #448]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002054:	e000      	b.n	8002058 <RCC_enableMaxFrequencies+0x2f0>
				__NOP();
 8002056:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002058:	4b6d      	ldr	r3, [pc, #436]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f8      	beq.n	8002056 <RCC_enableMaxFrequencies+0x2ee>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002064:	4b6b      	ldr	r3, [pc, #428]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6a      	ldr	r2, [pc, #424]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 800206a:	f023 030f 	bic.w	r3, r3, #15
 800206e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a67      	ldr	r2, [pc, #412]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

			break;
 800207c:	e110      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800207e:	4b64      	ldr	r3, [pc, #400]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a63      	ldr	r2, [pc, #396]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a60      	ldr	r2, [pc, #384]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002090:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8002094:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002096:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800209c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020a0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80020a2:	4b5b      	ldr	r3, [pc, #364]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020a4:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4a58      	ldr	r2, [pc, #352]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020b4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80020b6:	4b56      	ldr	r3, [pc, #344]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4a55      	ldr	r2, [pc, #340]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020c0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80020c2:	4b53      	ldr	r3, [pc, #332]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4a52      	ldr	r2, [pc, #328]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020cc:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a4f      	ldr	r2, [pc, #316]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80020da:	e000      	b.n	80020de <RCC_enableMaxFrequencies+0x376>
				__NOP();
 80020dc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f8      	beq.n	80020dc <RCC_enableMaxFrequencies+0x374>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a49      	ldr	r2, [pc, #292]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 80020f0:	f023 030f 	bic.w	r3, r3, #15
 80020f4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a46      	ldr	r2, [pc, #280]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6013      	str	r3, [r2, #0]

			break;
 8002102:	e0cd      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8002104:	4b42      	ldr	r3, [pc, #264]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a41      	ldr	r2, [pc, #260]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8002110:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a3e      	ldr	r2, [pc, #248]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002116:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800211a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800211c:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a3b      	ldr	r2, [pc, #236]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002122:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002126:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800212a:	4a39      	ldr	r2, [pc, #228]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002130:	4b37      	ldr	r3, [pc, #220]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a36      	ldr	r2, [pc, #216]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800213a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800213c:	4b34      	ldr	r3, [pc, #208]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a33      	ldr	r2, [pc, #204]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002146:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800214e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002152:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002160:	e000      	b.n	8002164 <RCC_enableMaxFrequencies+0x3fc>
				__NOP();
 8002162:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f8      	beq.n	8002162 <RCC_enableMaxFrequencies+0x3fa>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a27      	ldr	r2, [pc, #156]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002176:	f023 030f 	bic.w	r3, r3, #15
 800217a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a24      	ldr	r2, [pc, #144]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	6013      	str	r3, [r2, #0]

			break;
 8002188:	e08a      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 800219c:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 80021a0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021ac:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021c0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021cc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80021e6:	e000      	b.n	80021ea <RCC_enableMaxFrequencies+0x482>
				__NOP();
 80021e8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <RCC_enableMaxFrequencies+0x4a8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f8      	beq.n	80021e8 <RCC_enableMaxFrequencies+0x480>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a06      	ldr	r2, [pc, #24]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 80021fc:	f023 030f 	bic.w	r3, r3, #15
 8002200:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a03      	ldr	r2, [pc, #12]	; (8002214 <RCC_enableMaxFrequencies+0x4ac>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6013      	str	r3, [r2, #0]

			break;
 800220e:	e047      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
 8002210:	40023800 	.word	0x40023800
 8002214:	40023c00 	.word	0x40023c00
		}case RCC_100MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800222a:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800222e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002236:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800223a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800224a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002256:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800225a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 8002262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002266:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002274:	e000      	b.n	8002278 <RCC_enableMaxFrequencies+0x510>
				__NOP();
 8002276:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f8      	beq.n	8002276 <RCC_enableMaxFrequencies+0x50e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <RCC_enableMaxFrequencies+0x564>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a10      	ldr	r2, [pc, #64]	; (80022cc <RCC_enableMaxFrequencies+0x564>)
 800228a:	f023 030f 	bic.w	r3, r3, #15
 800228e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <RCC_enableMaxFrequencies+0x564>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <RCC_enableMaxFrequencies+0x564>)
 8002296:	f043 0303 	orr.w	r3, r3, #3
 800229a:	6013      	str	r3, [r2, #0]

			break;
 800229c:	e000      	b.n	80022a0 <RCC_enableMaxFrequencies+0x538>
		}
		default:{
			break;
 800229e:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80022ac:	e000      	b.n	80022b0 <RCC_enableMaxFrequencies+0x548>
		__NOP();
 80022ae:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <RCC_enableMaxFrequencies+0x560>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f8      	beq.n	80022ae <RCC_enableMaxFrequencies+0x546>
	}

	SystemCoreClockUpdate();
 80022bc:	f000 fd82 	bl	8002dc4 <SystemCoreClockUpdate>

}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <show_MaxFreq>:


void show_MaxFreq (uint8_t outputType ,uint8_t div){
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	460a      	mov	r2, r1
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	4613      	mov	r3, r2
 80022de:	71bb      	strb	r3, [r7, #6]

	// Vemos si se quiere sacar el valor por el MCO1 o el MCO2

	if (outputType  == MCO1){
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d153      	bne.n	800238e <show_MaxFreq+0xbe>

		//Configuramos la salida MCO2 para verificar el estado real del MCU y su velocidad
		switch (div) {
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d847      	bhi.n	800237e <show_MaxFreq+0xae>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <show_MaxFreq+0x24>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002309 	.word	0x08002309
 80022f8:	08002317 	.word	0x08002317
 80022fc:	08002331 	.word	0x08002331
 8002300:	0800234b 	.word	0x0800234b
 8002304:	08002365 	.word	0x08002365
			case 1:{
				// No dividimos el clock
				RCC->CFGR &= ~(0b100 << 24);
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <show_MaxFreq+0x170>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <show_MaxFreq+0x170>)
 800230e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002312:	6093      	str	r3, [r2, #8]
				break;
 8002314:	e034      	b.n	8002380 <show_MaxFreq+0xb0>
			}case 2:{
				// dividimos el clock a la mitad
				RCC->CFGR &= ~(0b111  << 24);
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <show_MaxFreq+0x170>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4a49      	ldr	r2, [pc, #292]	; (8002440 <show_MaxFreq+0x170>)
 800231c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002320:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b100  << 24);
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <show_MaxFreq+0x170>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4a46      	ldr	r2, [pc, #280]	; (8002440 <show_MaxFreq+0x170>)
 8002328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800232c:	6093      	str	r3, [r2, #8]

				break;
 800232e:	e027      	b.n	8002380 <show_MaxFreq+0xb0>
			}case 3:{
				// dividimos el clock 3 veces
				RCC->CFGR &= ~(0b111  << 24);
 8002330:	4b43      	ldr	r3, [pc, #268]	; (8002440 <show_MaxFreq+0x170>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a42      	ldr	r2, [pc, #264]	; (8002440 <show_MaxFreq+0x170>)
 8002336:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800233a:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b101  << 24);
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <show_MaxFreq+0x170>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a3f      	ldr	r2, [pc, #252]	; (8002440 <show_MaxFreq+0x170>)
 8002342:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002346:	6093      	str	r3, [r2, #8]
				break;
 8002348:	e01a      	b.n	8002380 <show_MaxFreq+0xb0>
			}case 4:{
				// Dividimos el Clock 4 veces
				RCC->CFGR &= ~(0b111  << 24);
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <show_MaxFreq+0x170>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4a3c      	ldr	r2, [pc, #240]	; (8002440 <show_MaxFreq+0x170>)
 8002350:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002354:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b110  << 24);
 8002356:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <show_MaxFreq+0x170>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	4a39      	ldr	r2, [pc, #228]	; (8002440 <show_MaxFreq+0x170>)
 800235c:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8002360:	6093      	str	r3, [r2, #8]
				break;
 8002362:	e00d      	b.n	8002380 <show_MaxFreq+0xb0>
			}case 5:{
				// Divimos el clock 5 veces
				RCC->CFGR &= ~(0b111  << 24);
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <show_MaxFreq+0x170>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a35      	ldr	r2, [pc, #212]	; (8002440 <show_MaxFreq+0x170>)
 800236a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800236e:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b111  << 24);
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <show_MaxFreq+0x170>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a32      	ldr	r2, [pc, #200]	; (8002440 <show_MaxFreq+0x170>)
 8002376:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800237a:	6093      	str	r3, [r2, #8]
				break;
 800237c:	e000      	b.n	8002380 <show_MaxFreq+0xb0>
			}
			default:{
				break;
 800237e:	bf00      	nop
			}
		}
		// habilitamos la salida del MCO2 para el PLL clock
		RCC->CFGR &= ~(0b11 << 30);
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <show_MaxFreq+0x170>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <show_MaxFreq+0x170>)
 8002386:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800238a:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(0b11 << 21);
	//	RCC->CFGR |= RCC_CFGR_MCO2;

	}

}
 800238c:	e052      	b.n	8002434 <show_MaxFreq+0x164>
		switch (div) {
 800238e:	79bb      	ldrb	r3, [r7, #6]
 8002390:	3b01      	subs	r3, #1
 8002392:	2b04      	cmp	r3, #4
 8002394:	d847      	bhi.n	8002426 <show_MaxFreq+0x156>
 8002396:	a201      	add	r2, pc, #4	; (adr r2, 800239c <show_MaxFreq+0xcc>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023b1 	.word	0x080023b1
 80023a0:	080023bf 	.word	0x080023bf
 80023a4:	080023d9 	.word	0x080023d9
 80023a8:	080023f3 	.word	0x080023f3
 80023ac:	0800240d 	.word	0x0800240d
				RCC->CFGR &= ~(0b100 << 27);
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <show_MaxFreq+0x170>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <show_MaxFreq+0x170>)
 80023b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80023ba:	6093      	str	r3, [r2, #8]
				break;
 80023bc:	e034      	b.n	8002428 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <show_MaxFreq+0x170>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <show_MaxFreq+0x170>)
 80023c4:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80023c8:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b100  << 27);
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <show_MaxFreq+0x170>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <show_MaxFreq+0x170>)
 80023d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023d4:	6093      	str	r3, [r2, #8]
				break;
 80023d6:	e027      	b.n	8002428 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <show_MaxFreq+0x170>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4a18      	ldr	r2, [pc, #96]	; (8002440 <show_MaxFreq+0x170>)
 80023de:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80023e2:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b101  << 27);
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <show_MaxFreq+0x170>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a15      	ldr	r2, [pc, #84]	; (8002440 <show_MaxFreq+0x170>)
 80023ea:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 80023ee:	6093      	str	r3, [r2, #8]
				break;
 80023f0:	e01a      	b.n	8002428 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <show_MaxFreq+0x170>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <show_MaxFreq+0x170>)
 80023f8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80023fc:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b110  << 27);
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <show_MaxFreq+0x170>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <show_MaxFreq+0x170>)
 8002404:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8002408:	6093      	str	r3, [r2, #8]
				break;
 800240a:	e00d      	b.n	8002428 <show_MaxFreq+0x158>
				RCC->CFGR &= ~(0b111 << 27);
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <show_MaxFreq+0x170>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <show_MaxFreq+0x170>)
 8002412:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8002416:	6093      	str	r3, [r2, #8]
				RCC->CFGR |=  (0b111  << 27);
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <show_MaxFreq+0x170>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a08      	ldr	r2, [pc, #32]	; (8002440 <show_MaxFreq+0x170>)
 800241e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002422:	6093      	str	r3, [r2, #8]
				break;
 8002424:	e000      	b.n	8002428 <show_MaxFreq+0x158>
				break;
 8002426:	bf00      	nop
		RCC->CFGR &= ~(0b11 << 21);
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <show_MaxFreq+0x170>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <show_MaxFreq+0x170>)
 800242e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002432:	6093      	str	r3, [r2, #8]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40023800 	.word	0x40023800

08002444 <__NVIC_EnableIRQ>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <__NVIC_EnableIRQ+0x38>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100

08002480 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
}
 800248a:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a8f      	ldr	r2, [pc, #572]	; (80026d0 <USART_Config+0x250>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d106      	bne.n	80024a4 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002496:	4b8f      	ldr	r3, [pc, #572]	; (80026d4 <USART_Config+0x254>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a8e      	ldr	r2, [pc, #568]	; (80026d4 <USART_Config+0x254>)
 800249c:	f043 0310 	orr.w	r3, r3, #16
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	e018      	b.n	80024d6 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a8b      	ldr	r2, [pc, #556]	; (80026d8 <USART_Config+0x258>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d106      	bne.n	80024bc <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80024ae:	4b89      	ldr	r3, [pc, #548]	; (80026d4 <USART_Config+0x254>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a88      	ldr	r2, [pc, #544]	; (80026d4 <USART_Config+0x254>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	e00c      	b.n	80024d6 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a86      	ldr	r2, [pc, #536]	; (80026dc <USART_Config+0x25c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d106      	bne.n	80024d4 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80024c6:	4b83      	ldr	r3, [pc, #524]	; (80026d4 <USART_Config+0x254>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a82      	ldr	r2, [pc, #520]	; (80026d4 <USART_Config+0x254>)
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	e000      	b.n	80024d6 <USART_Config+0x56>
	}
	else{
		__NOP();
 80024d4:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7a5b      	ldrb	r3, [r3, #9]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d025      	beq.n	800253a <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7a5b      	ldrb	r3, [r3, #9]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d110      	bne.n	8002518 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002504:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	e018      	b.n	800254a <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	e007      	b.n	800254a <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002548:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7a1b      	ldrb	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	e007      	b.n	8002574 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002572:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7a9b      	ldrb	r3, [r3, #10]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d82f      	bhi.n	80025dc <USART_Config+0x15c>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <USART_Config+0x104>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	08002595 	.word	0x08002595
 8002588:	080025a7 	.word	0x080025a7
 800258c:	080025b9 	.word	0x080025b9
 8002590:	080025cb 	.word	0x080025cb
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025a2:	611a      	str	r2, [r3, #16]
			break;
 80025a4:	e023      	b.n	80025ee <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025b4:	611a      	str	r2, [r3, #16]
			break;
 80025b6:	e01a      	b.n	80025ee <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c6:	611a      	str	r2, [r3, #16]
			break;
 80025c8:	e011      	b.n	80025ee <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80025d8:	611a      	str	r2, [r3, #16]
			break;
 80025da:	e008      	b.n	80025ee <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025ea:	611a      	str	r2, [r3, #16]
			break;
 80025ec:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681c      	ldr	r4, [r3, #0]
 80025f6:	4611      	mov	r1, r2
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8cd 	bl	8002798 <brrCalculus>
 80025fe:	4603      	mov	r3, r0
 8002600:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	799b      	ldrb	r3, [r3, #6]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d82e      	bhi.n	8002668 <USART_Config+0x1e8>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <USART_Config+0x190>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	08002633 	.word	0x08002633
 8002618:	08002645 	.word	0x08002645
 800261c:	08002657 	.word	0x08002657
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	60da      	str	r2, [r3, #12]
			break;
 8002630:	e023      	b.n	800267a <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0204 	orr.w	r2, r2, #4
 8002640:	60da      	str	r2, [r3, #12]
			break;
 8002642:	e01a      	b.n	800267a <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 020c 	orr.w	r2, r2, #12
 8002652:	60da      	str	r2, [r3, #12]
			break;
 8002654:	e011      	b.n	800267a <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 020c 	bic.w	r2, r2, #12
 8002664:	60da      	str	r2, [r3, #12]
			break;
 8002666:	e008      	b.n	800267a <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 020c 	bic.w	r2, r2, #12
 8002676:	60da      	str	r2, [r3, #12]
			break;
 8002678:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	799b      	ldrb	r3, [r3, #6]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d008      	beq.n	8002694 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	e007      	b.n	80026a4 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a2:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	795b      	ldrb	r3, [r3, #5]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d12d      	bne.n	8002708 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0220 	orr.w	r2, r2, #32
 80026ba:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <USART_Config+0x250>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10c      	bne.n	80026e0 <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80026c6:	2025      	movs	r0, #37	; 0x25
 80026c8:	f7ff febc 	bl	8002444 <__NVIC_EnableIRQ>
 80026cc:	e024      	b.n	8002718 <USART_Config+0x298>
 80026ce:	bf00      	nop
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40004400 	.word	0x40004400
 80026dc:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a28      	ldr	r2, [pc, #160]	; (8002788 <USART_Config+0x308>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d103      	bne.n	80026f2 <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80026ea:	2026      	movs	r0, #38	; 0x26
 80026ec:	f7ff feaa 	bl	8002444 <__NVIC_EnableIRQ>
 80026f0:	e012      	b.n	8002718 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a25      	ldr	r2, [pc, #148]	; (800278c <USART_Config+0x30c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d103      	bne.n	8002704 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80026fc:	2047      	movs	r0, #71	; 0x47
 80026fe:	f7ff fea1 	bl	8002444 <__NVIC_EnableIRQ>
 8002702:	e009      	b.n	8002718 <USART_Config+0x298>
		}
		else{
				__NOP();
 8002704:	bf00      	nop
 8002706:	e007      	b.n	8002718 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0220 	bic.w	r2, r2, #32
 8002716:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d124      	bne.n	800276a <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800272e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <USART_Config+0x310>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d103      	bne.n	8002742 <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800273a:	2025      	movs	r0, #37	; 0x25
 800273c:	f7ff fe82 	bl	8002444 <__NVIC_EnableIRQ>
 8002740:	e01b      	b.n	800277a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <USART_Config+0x308>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d103      	bne.n	8002754 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800274c:	2026      	movs	r0, #38	; 0x26
 800274e:	f7ff fe79 	bl	8002444 <__NVIC_EnableIRQ>
 8002752:	e012      	b.n	800277a <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <USART_Config+0x30c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d103      	bne.n	8002766 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800275e:	2047      	movs	r0, #71	; 0x47
 8002760:	f7ff fe70 	bl	8002444 <__NVIC_EnableIRQ>
 8002764:	e009      	b.n	800277a <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8002766:	bf00      	nop
 8002768:	e007      	b.n	800277a <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002778:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800277a:	b662      	cpsie	i
}
 800277c:	bf00      	nop
	}

	__enable_irq();
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
 8002786:	bf00      	nop
 8002788:	40004400 	.word	0x40004400
 800278c:	40011400 	.word	0x40011400
 8002790:	40011000 	.word	0x40011000
 8002794:	00000000 	.word	0x00000000

08002798 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	79db      	ldrb	r3, [r3, #7]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	f200 8217 	bhi.w	8002bda <brrCalculus+0x442>
 80027ac:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <brrCalculus+0x1c>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027c5 	.word	0x080027c5
 80027b8:	080028bf 	.word	0x080028bf
 80027bc:	080029d9 	.word	0x080029d9
 80027c0:	08002ae1 	.word	0x08002ae1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 80027c4:	4980      	ldr	r1, [pc, #512]	; (80029c8 <brrCalculus+0x230>)
 80027c6:	a37c      	add	r3, pc, #496	; (adr r3, 80029b8 <brrCalculus+0x220>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	ee17 0a90 	vmov	r0, s15
 80027de:	f7fd febb 	bl	8000558 <__aeabi_f2d>
 80027e2:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <brrCalculus+0x230>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fd ff0e 	bl	8000608 <__aeabi_dmul>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4975      	ldr	r1, [pc, #468]	; (80029c8 <brrCalculus+0x230>)
 80027f2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80027f6:	4b74      	ldr	r3, [pc, #464]	; (80029c8 <brrCalculus+0x230>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f9b2 	bl	8000b68 <__aeabi_d2iz>
 8002804:	4603      	mov	r3, r0
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b70      	ldr	r3, [pc, #448]	; (80029cc <brrCalculus+0x234>)
 800280a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800280c:	4b6e      	ldr	r3, [pc, #440]	; (80029c8 <brrCalculus+0x230>)
 800280e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002812:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <brrCalculus+0x230>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe f9a4 	bl	8000b68 <__aeabi_d2iz>
 8002820:	4603      	mov	r3, r0
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe86 	bl	8000534 <__aeabi_i2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4620      	mov	r0, r4
 800282e:	4629      	mov	r1, r5
 8002830:	f7fd fd32 	bl	8000298 <__aeabi_dsub>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f7fe f9dc 	bl	8000bf8 <__aeabi_d2f>
 8002840:	4603      	mov	r3, r0
 8002842:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <brrCalculus+0x238>)
 8002844:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8002846:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <brrCalculus+0x238>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	2004      	movs	r0, #4
 800284e:	eeb0 0a67 	vmov.f32	s0, s15
 8002852:	f000 fa55 	bl	8002d00 <roundToNDecimals>
 8002856:	eef0 7a40 	vmov.f32	s15, s0
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <brrCalculus+0x238>)
 800285c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8002860:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <brrCalculus+0x238>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <brrCalculus+0x238>)
 8002870:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8002874:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <brrCalculus+0x238>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe6d 	bl	8000558 <__aeabi_f2d>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	ec43 2b10 	vmov	d0, r2, r3
 8002886:	f003 f867 	bl	8005958 <round>
 800288a:	ec53 2b10 	vmov	r2, r3, d0
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f9b1 	bl	8000bf8 <__aeabi_d2f>
 8002896:	4603      	mov	r3, r0
 8002898:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <brrCalculus+0x238>)
 800289a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <brrCalculus+0x234>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <brrCalculus+0x238>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ae:	ee17 3a90 	vmov	r3, s15
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <brrCalculus+0x23c>)
 80028ba:	801a      	strh	r2, [r3, #0]


		break;
 80028bc:	e18f      	b.n	8002bde <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80028be:	4942      	ldr	r1, [pc, #264]	; (80029c8 <brrCalculus+0x230>)
 80028c0:	a33f      	add	r3, pc, #252	; (adr r3, 80029c0 <brrCalculus+0x228>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d4:	ee17 0a90 	vmov	r0, s15
 80028d8:	f7fd fe3e 	bl	8000558 <__aeabi_f2d>
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <brrCalculus+0x230>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd fe91 	bl	8000608 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4937      	ldr	r1, [pc, #220]	; (80029c8 <brrCalculus+0x230>)
 80028ec:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <brrCalculus+0x230>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f935 	bl	8000b68 <__aeabi_d2iz>
 80028fe:	4603      	mov	r3, r0
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b32      	ldr	r3, [pc, #200]	; (80029cc <brrCalculus+0x234>)
 8002904:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <brrCalculus+0x230>)
 8002908:	e9d3 4500 	ldrd	r4, r5, [r3]
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <brrCalculus+0x230>)
 800290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f927 	bl	8000b68 <__aeabi_d2iz>
 800291a:	4603      	mov	r3, r0
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe09 	bl	8000534 <__aeabi_i2d>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4620      	mov	r0, r4
 8002928:	4629      	mov	r1, r5
 800292a:	f7fd fcb5 	bl	8000298 <__aeabi_dsub>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f7fe f95f 	bl	8000bf8 <__aeabi_d2f>
 800293a:	4603      	mov	r3, r0
 800293c:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <brrCalculus+0x238>)
 800293e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <brrCalculus+0x238>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	2004      	movs	r0, #4
 8002948:	eeb0 0a67 	vmov.f32	s0, s15
 800294c:	f000 f9d8 	bl	8002d00 <roundToNDecimals>
 8002950:	eef0 7a40 	vmov.f32	s15, s0
 8002954:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <brrCalculus+0x238>)
 8002956:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <brrCalculus+0x238>)
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <brrCalculus+0x238>)
 800296a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <brrCalculus+0x238>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fdf0 	bl	8000558 <__aeabi_f2d>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	ec43 2b10 	vmov	d0, r2, r3
 8002980:	f002 ffea 	bl	8005958 <round>
 8002984:	ec53 2b10 	vmov	r2, r3, d0
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f934 	bl	8000bf8 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <brrCalculus+0x238>)
 8002994:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <brrCalculus+0x234>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	b29a      	uxth	r2, r3
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <brrCalculus+0x238>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a8:	ee17 3a90 	vmov	r3, s15
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <brrCalculus+0x23c>)
 80029b4:	801a      	strh	r2, [r3, #0]


		break;
 80029b6:	e112      	b.n	8002bde <brrCalculus+0x446>
 80029b8:	b4e81b4f 	.word	0xb4e81b4f
 80029bc:	3edb4e81 	.word	0x3edb4e81
 80029c0:	b4e81b4f 	.word	0xb4e81b4f
 80029c4:	3ecb4e81 	.word	0x3ecb4e81
 80029c8:	200002f0 	.word	0x200002f0
 80029cc:	200002ea 	.word	0x200002ea
 80029d0:	200002ec 	.word	0x200002ec
 80029d4:	200002e8 	.word	0x200002e8
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 80029d8:	4989      	ldr	r1, [pc, #548]	; (8002c00 <brrCalculus+0x468>)
 80029da:	a385      	add	r3, pc, #532	; (adr r3, 8002bf0 <brrCalculus+0x458>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ee:	ee17 0a90 	vmov	r0, s15
 80029f2:	f7fd fdb1 	bl	8000558 <__aeabi_f2d>
 80029f6:	4b82      	ldr	r3, [pc, #520]	; (8002c00 <brrCalculus+0x468>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fe04 	bl	8000608 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	497e      	ldr	r1, [pc, #504]	; (8002c00 <brrCalculus+0x468>)
 8002a06:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8002a0a:	4b7d      	ldr	r3, [pc, #500]	; (8002c00 <brrCalculus+0x468>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f8a8 	bl	8000b68 <__aeabi_d2iz>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <brrCalculus+0x46c>)
 8002a1e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8002a20:	4b77      	ldr	r3, [pc, #476]	; (8002c00 <brrCalculus+0x468>)
 8002a22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a26:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <brrCalculus+0x468>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7fe f89a 	bl	8000b68 <__aeabi_d2iz>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fd7c 	bl	8000534 <__aeabi_i2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4620      	mov	r0, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	f7fd fc28 	bl	8000298 <__aeabi_dsub>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fe f8d2 	bl	8000bf8 <__aeabi_d2f>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a6c      	ldr	r2, [pc, #432]	; (8002c08 <brrCalculus+0x470>)
 8002a58:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8002a5a:	4b6b      	ldr	r3, [pc, #428]	; (8002c08 <brrCalculus+0x470>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	2004      	movs	r0, #4
 8002a62:	eeb0 0a67 	vmov.f32	s0, s15
 8002a66:	f000 f94b 	bl	8002d00 <roundToNDecimals>
 8002a6a:	eef0 7a40 	vmov.f32	s15, s0
 8002a6e:	4b66      	ldr	r3, [pc, #408]	; (8002c08 <brrCalculus+0x470>)
 8002a70:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8002a74:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <brrCalculus+0x470>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a82:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <brrCalculus+0x470>)
 8002a84:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8002a88:	4b5f      	ldr	r3, [pc, #380]	; (8002c08 <brrCalculus+0x470>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd63 	bl	8000558 <__aeabi_f2d>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	ec43 2b10 	vmov	d0, r2, r3
 8002a9a:	f002 ff5d 	bl	8005958 <round>
 8002a9e:	ec51 0b10 	vmov	r0, r1, d0
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <brrCalculus+0x474>)
 8002aa8:	f7fd fbf8 	bl	800029c <__adddf3>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f8a0 	bl	8000bf8 <__aeabi_d2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a53      	ldr	r2, [pc, #332]	; (8002c08 <brrCalculus+0x470>)
 8002abc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8002abe:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <brrCalculus+0x46c>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <brrCalculus+0x470>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad0:	ee17 3a90 	vmov	r3, s15
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <brrCalculus+0x478>)
 8002adc:	801a      	strh	r2, [r3, #0]


		break;
 8002ade:	e07e      	b.n	8002bde <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8002ae0:	4947      	ldr	r1, [pc, #284]	; (8002c00 <brrCalculus+0x468>)
 8002ae2:	a345      	add	r3, pc, #276	; (adr r3, 8002bf8 <brrCalculus+0x460>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	ee17 0a90 	vmov	r0, s15
 8002afa:	f7fd fd2d 	bl	8000558 <__aeabi_f2d>
 8002afe:	4b40      	ldr	r3, [pc, #256]	; (8002c00 <brrCalculus+0x468>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd fd80 	bl	8000608 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	493c      	ldr	r1, [pc, #240]	; (8002c00 <brrCalculus+0x468>)
 8002b0e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <brrCalculus+0x468>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fe f824 	bl	8000b68 <__aeabi_d2iz>
 8002b20:	4603      	mov	r3, r0
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <brrCalculus+0x46c>)
 8002b26:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8002b28:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <brrCalculus+0x468>)
 8002b2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b2e:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <brrCalculus+0x468>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7fe f816 	bl	8000b68 <__aeabi_d2iz>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fcf8 	bl	8000534 <__aeabi_i2d>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f7fd fba4 	bl	8000298 <__aeabi_dsub>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7fe f84e 	bl	8000bf8 <__aeabi_d2f>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4a2a      	ldr	r2, [pc, #168]	; (8002c08 <brrCalculus+0x470>)
 8002b60:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <brrCalculus+0x470>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	2004      	movs	r0, #4
 8002b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6e:	f000 f8c7 	bl	8002d00 <roundToNDecimals>
 8002b72:	eef0 7a40 	vmov.f32	s15, s0
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <brrCalculus+0x470>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <brrCalculus+0x470>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <brrCalculus+0x470>)
 8002b8c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <brrCalculus+0x470>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcdf 	bl	8000558 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	ec43 2b10 	vmov	d0, r2, r3
 8002ba2:	f002 fed9 	bl	8005958 <round>
 8002ba6:	ec53 2b10 	vmov	r2, r3, d0
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fe f823 	bl	8000bf8 <__aeabi_d2f>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <brrCalculus+0x470>)
 8002bb6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <brrCalculus+0x46c>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <brrCalculus+0x470>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bca:	ee17 3a90 	vmov	r3, s15
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <brrCalculus+0x478>)
 8002bd6:	801a      	strh	r2, [r3, #0]


		break;
 8002bd8:	e001      	b.n	8002bde <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8002bda:	bf00      	nop
		break;
 8002bdc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <brrCalculus+0x478>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bea:	bf00      	nop
 8002bec:	f3af 8000 	nop.w
 8002bf0:	789abcdf 	.word	0x789abcdf
 8002bf4:	3ec23456 	.word	0x3ec23456
 8002bf8:	789abcdf 	.word	0x789abcdf
 8002bfc:	3ea23456 	.word	0x3ea23456
 8002c00:	200002f0 	.word	0x200002f0
 8002c04:	200002ea 	.word	0x200002ea
 8002c08:	200002ec 	.word	0x200002ec
 8002c0c:	3ff00000 	.word	0x3ff00000
 8002c10:	200002e8 	.word	0x200002e8

08002c14 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002c1e:	e000      	b.n	8002c22 <writeChar+0xe>
		__NOP();
 8002c20:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f7      	beq.n	8002c20 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	605a      	str	r2, [r3, #4]

}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <usart1Rx_Callback>:
}

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
	__NOP();
 8002c48:	bf00      	nop
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
	__NOP();
 8002c58:	bf00      	nop
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
	return auxRxData;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <getRxData+0x14>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	200002f8 	.word	0x200002f8

08002c7c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <USART2_IRQHandler+0x24>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <USART2_IRQHandler+0x24>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <USART2_IRQHandler+0x28>)
 8002c94:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8002c96:	f7fe f913 	bl	8000ec0 <usart2Rx_Callback>
	}

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	200002f8 	.word	0x200002f8

08002ca8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <USART1_IRQHandler+0x24>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d006      	beq.n	8002cc6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <USART1_IRQHandler+0x24>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <USART1_IRQHandler+0x28>)
 8002cc0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8002cc2:	f7ff ffbf 	bl	8002c44 <usart1Rx_Callback>
	}
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40011000 	.word	0x40011000
 8002cd0:	200002f8 	.word	0x200002f8

08002cd4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <USART6_IRQHandler+0x24>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <USART6_IRQHandler+0x24>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <USART6_IRQHandler+0x28>)
 8002cec:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8002cee:	f7ff ffb1 	bl	8002c54 <usart6Rx_Callback>
	}

}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	200002f8 	.word	0x200002f8

08002d00 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d0a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8002d0c:	6838      	ldr	r0, [r7, #0]
 8002d0e:	f7fd fc11 	bl	8000534 <__aeabi_i2d>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	ec43 2b11 	vmov	d1, r2, r3
 8002d1a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8002d98 <roundToNDecimals+0x98>
 8002d1e:	f002 fe61 	bl	80059e4 <pow>
 8002d22:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fc16 	bl	8000558 <__aeabi_f2d>
 8002d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d30:	f7fd fc6a 	bl	8000608 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd ff5c 	bl	8000bf8 <__aeabi_d2f>
 8002d40:	4603      	mov	r3, r0
 8002d42:	607b      	str	r3, [r7, #4]

    number = round(number);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fd fc07 	bl	8000558 <__aeabi_f2d>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	ec43 2b10 	vmov	d0, r2, r3
 8002d52:	f002 fe01 	bl	8005958 <round>
 8002d56:	ec53 2b10 	vmov	r2, r3, d0
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7fd ff4b 	bl	8000bf8 <__aeabi_d2f>
 8002d62:	4603      	mov	r3, r0
 8002d64:	607b      	str	r3, [r7, #4]

    number /= factor;
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fbf6 	bl	8000558 <__aeabi_f2d>
 8002d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d70:	f7fd fd74 	bl	800085c <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd ff3c 	bl	8000bf8 <__aeabi_d2f>
 8002d80:	4603      	mov	r3, r0
 8002d82:	607b      	str	r3, [r7, #4]

    return number;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	ee07 3a90 	vmov	s15, r3
}
 8002d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	f3af 8000 	nop.w
 8002d98:	00000000 	.word	0x00000000
 8002d9c:	40240000 	.word	0x40240000

08002da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <SystemInit+0x20>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <SystemInit+0x20>)
 8002dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	2302      	movs	r3, #2
 8002ddc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002dde:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d011      	beq.n	8002e12 <SystemCoreClockUpdate+0x4e>
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d844      	bhi.n	8002e7e <SystemCoreClockUpdate+0xba>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <SystemCoreClockUpdate+0x3e>
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d004      	beq.n	8002e0a <SystemCoreClockUpdate+0x46>
 8002e00:	e03d      	b.n	8002e7e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e04:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <SystemCoreClockUpdate+0xf4>)
 8002e06:	601a      	str	r2, [r3, #0]
      break;
 8002e08:	e03d      	b.n	8002e86 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <SystemCoreClockUpdate+0xf8>)
 8002e0e:	601a      	str	r2, [r3, #0]
      break;
 8002e10:	e039      	b.n	8002e86 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0d9b      	lsrs	r3, r3, #22
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e26:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e2e:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <SystemCoreClockUpdate+0xf8>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	0992      	lsrs	r2, r2, #6
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e00b      	b.n	8002e60 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <SystemCoreClockUpdate+0xf4>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e52:	6852      	ldr	r2, [r2, #4]
 8002e54:	0992      	lsrs	r2, r2, #6
 8002e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e7a:	6013      	str	r3, [r2, #0]
      break;
 8002e7c:	e003      	b.n	8002e86 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <SystemCoreClockUpdate+0xf4>)
 8002e82:	601a      	str	r2, [r3, #0]
      break;
 8002e84:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <SystemCoreClockUpdate+0xec>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <SystemCoreClockUpdate+0xfc>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <SystemCoreClockUpdate+0xf0>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	20000004 	.word	0x20000004
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	017d7840 	.word	0x017d7840
 8002ec0:	08006850 	.word	0x08006850

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000008 	.word	0x20000008

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4d0d      	ldr	r5, [pc, #52]	; (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2600      	movs	r6, #0
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4d0b      	ldr	r5, [pc, #44]	; (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	; (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f003 fca8 	bl	8006838 <_init>
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2600      	movs	r6, #0
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08006c70 	.word	0x08006c70
 8002f0c:	08006c70 	.word	0x08006c70
 8002f10:	08006c70 	.word	0x08006c70
 8002f14:	08006c74 	.word	0x08006c74

08002f18 <memset>:
 8002f18:	4402      	add	r2, r0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <__cvt>:
 8002f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f2c:	ec55 4b10 	vmov	r4, r5, d0
 8002f30:	2d00      	cmp	r5, #0
 8002f32:	460e      	mov	r6, r1
 8002f34:	4619      	mov	r1, r3
 8002f36:	462b      	mov	r3, r5
 8002f38:	bfbb      	ittet	lt
 8002f3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002f3e:	461d      	movlt	r5, r3
 8002f40:	2300      	movge	r3, #0
 8002f42:	232d      	movlt	r3, #45	; 0x2d
 8002f44:	700b      	strb	r3, [r1, #0]
 8002f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002f4c:	4691      	mov	r9, r2
 8002f4e:	f023 0820 	bic.w	r8, r3, #32
 8002f52:	bfbc      	itt	lt
 8002f54:	4622      	movlt	r2, r4
 8002f56:	4614      	movlt	r4, r2
 8002f58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f5c:	d005      	beq.n	8002f6a <__cvt+0x42>
 8002f5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002f62:	d100      	bne.n	8002f66 <__cvt+0x3e>
 8002f64:	3601      	adds	r6, #1
 8002f66:	2102      	movs	r1, #2
 8002f68:	e000      	b.n	8002f6c <__cvt+0x44>
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	ab03      	add	r3, sp, #12
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	ab02      	add	r3, sp, #8
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	ec45 4b10 	vmov	d0, r4, r5
 8002f78:	4653      	mov	r3, sl
 8002f7a:	4632      	mov	r2, r6
 8002f7c:	f000 fccc 	bl	8003918 <_dtoa_r>
 8002f80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f84:	4607      	mov	r7, r0
 8002f86:	d102      	bne.n	8002f8e <__cvt+0x66>
 8002f88:	f019 0f01 	tst.w	r9, #1
 8002f8c:	d022      	beq.n	8002fd4 <__cvt+0xac>
 8002f8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f92:	eb07 0906 	add.w	r9, r7, r6
 8002f96:	d110      	bne.n	8002fba <__cvt+0x92>
 8002f98:	783b      	ldrb	r3, [r7, #0]
 8002f9a:	2b30      	cmp	r3, #48	; 0x30
 8002f9c:	d10a      	bne.n	8002fb4 <__cvt+0x8c>
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	f7fd fd97 	bl	8000ad8 <__aeabi_dcmpeq>
 8002faa:	b918      	cbnz	r0, 8002fb4 <__cvt+0x8c>
 8002fac:	f1c6 0601 	rsb	r6, r6, #1
 8002fb0:	f8ca 6000 	str.w	r6, [sl]
 8002fb4:	f8da 3000 	ldr.w	r3, [sl]
 8002fb8:	4499      	add	r9, r3
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7fd fd89 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fc6:	b108      	cbz	r0, 8002fcc <__cvt+0xa4>
 8002fc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8002fcc:	2230      	movs	r2, #48	; 0x30
 8002fce:	9b03      	ldr	r3, [sp, #12]
 8002fd0:	454b      	cmp	r3, r9
 8002fd2:	d307      	bcc.n	8002fe4 <__cvt+0xbc>
 8002fd4:	9b03      	ldr	r3, [sp, #12]
 8002fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fd8:	1bdb      	subs	r3, r3, r7
 8002fda:	4638      	mov	r0, r7
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	b004      	add	sp, #16
 8002fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe4:	1c59      	adds	r1, r3, #1
 8002fe6:	9103      	str	r1, [sp, #12]
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e7f0      	b.n	8002fce <__cvt+0xa6>

08002fec <__exponent>:
 8002fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	bfb8      	it	lt
 8002ff4:	4249      	neglt	r1, r1
 8002ff6:	f803 2b02 	strb.w	r2, [r3], #2
 8002ffa:	bfb4      	ite	lt
 8002ffc:	222d      	movlt	r2, #45	; 0x2d
 8002ffe:	222b      	movge	r2, #43	; 0x2b
 8003000:	2909      	cmp	r1, #9
 8003002:	7042      	strb	r2, [r0, #1]
 8003004:	dd2a      	ble.n	800305c <__exponent+0x70>
 8003006:	f10d 0407 	add.w	r4, sp, #7
 800300a:	46a4      	mov	ip, r4
 800300c:	270a      	movs	r7, #10
 800300e:	46a6      	mov	lr, r4
 8003010:	460a      	mov	r2, r1
 8003012:	fb91 f6f7 	sdiv	r6, r1, r7
 8003016:	fb07 1516 	mls	r5, r7, r6, r1
 800301a:	3530      	adds	r5, #48	; 0x30
 800301c:	2a63      	cmp	r2, #99	; 0x63
 800301e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003022:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003026:	4631      	mov	r1, r6
 8003028:	dcf1      	bgt.n	800300e <__exponent+0x22>
 800302a:	3130      	adds	r1, #48	; 0x30
 800302c:	f1ae 0502 	sub.w	r5, lr, #2
 8003030:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003034:	1c44      	adds	r4, r0, #1
 8003036:	4629      	mov	r1, r5
 8003038:	4561      	cmp	r1, ip
 800303a:	d30a      	bcc.n	8003052 <__exponent+0x66>
 800303c:	f10d 0209 	add.w	r2, sp, #9
 8003040:	eba2 020e 	sub.w	r2, r2, lr
 8003044:	4565      	cmp	r5, ip
 8003046:	bf88      	it	hi
 8003048:	2200      	movhi	r2, #0
 800304a:	4413      	add	r3, r2
 800304c:	1a18      	subs	r0, r3, r0
 800304e:	b003      	add	sp, #12
 8003050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003056:	f804 2f01 	strb.w	r2, [r4, #1]!
 800305a:	e7ed      	b.n	8003038 <__exponent+0x4c>
 800305c:	2330      	movs	r3, #48	; 0x30
 800305e:	3130      	adds	r1, #48	; 0x30
 8003060:	7083      	strb	r3, [r0, #2]
 8003062:	70c1      	strb	r1, [r0, #3]
 8003064:	1d03      	adds	r3, r0, #4
 8003066:	e7f1      	b.n	800304c <__exponent+0x60>

08003068 <_printf_float>:
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306c:	ed2d 8b02 	vpush	{d8}
 8003070:	b08d      	sub	sp, #52	; 0x34
 8003072:	460c      	mov	r4, r1
 8003074:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003078:	4616      	mov	r6, r2
 800307a:	461f      	mov	r7, r3
 800307c:	4605      	mov	r5, r0
 800307e:	f001 fa39 	bl	80044f4 <_localeconv_r>
 8003082:	f8d0 a000 	ldr.w	sl, [r0]
 8003086:	4650      	mov	r0, sl
 8003088:	f7fd f8aa 	bl	80001e0 <strlen>
 800308c:	2300      	movs	r3, #0
 800308e:	930a      	str	r3, [sp, #40]	; 0x28
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	9305      	str	r3, [sp, #20]
 8003094:	f8d8 3000 	ldr.w	r3, [r8]
 8003098:	f894 b018 	ldrb.w	fp, [r4, #24]
 800309c:	3307      	adds	r3, #7
 800309e:	f023 0307 	bic.w	r3, r3, #7
 80030a2:	f103 0208 	add.w	r2, r3, #8
 80030a6:	f8c8 2000 	str.w	r2, [r8]
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80030b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80030b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80030ba:	9307      	str	r3, [sp, #28]
 80030bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80030c0:	ee08 0a10 	vmov	s16, r0
 80030c4:	4b9f      	ldr	r3, [pc, #636]	; (8003344 <_printf_float+0x2dc>)
 80030c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ce:	f7fd fd35 	bl	8000b3c <__aeabi_dcmpun>
 80030d2:	bb88      	cbnz	r0, 8003138 <_printf_float+0xd0>
 80030d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030d8:	4b9a      	ldr	r3, [pc, #616]	; (8003344 <_printf_float+0x2dc>)
 80030da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030de:	f7fd fd0f 	bl	8000b00 <__aeabi_dcmple>
 80030e2:	bb48      	cbnz	r0, 8003138 <_printf_float+0xd0>
 80030e4:	2200      	movs	r2, #0
 80030e6:	2300      	movs	r3, #0
 80030e8:	4640      	mov	r0, r8
 80030ea:	4649      	mov	r1, r9
 80030ec:	f7fd fcfe 	bl	8000aec <__aeabi_dcmplt>
 80030f0:	b110      	cbz	r0, 80030f8 <_printf_float+0x90>
 80030f2:	232d      	movs	r3, #45	; 0x2d
 80030f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f8:	4b93      	ldr	r3, [pc, #588]	; (8003348 <_printf_float+0x2e0>)
 80030fa:	4894      	ldr	r0, [pc, #592]	; (800334c <_printf_float+0x2e4>)
 80030fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003100:	bf94      	ite	ls
 8003102:	4698      	movls	r8, r3
 8003104:	4680      	movhi	r8, r0
 8003106:	2303      	movs	r3, #3
 8003108:	6123      	str	r3, [r4, #16]
 800310a:	9b05      	ldr	r3, [sp, #20]
 800310c:	f023 0204 	bic.w	r2, r3, #4
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	f04f 0900 	mov.w	r9, #0
 8003116:	9700      	str	r7, [sp, #0]
 8003118:	4633      	mov	r3, r6
 800311a:	aa0b      	add	r2, sp, #44	; 0x2c
 800311c:	4621      	mov	r1, r4
 800311e:	4628      	mov	r0, r5
 8003120:	f000 f9d8 	bl	80034d4 <_printf_common>
 8003124:	3001      	adds	r0, #1
 8003126:	f040 8090 	bne.w	800324a <_printf_float+0x1e2>
 800312a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800312e:	b00d      	add	sp, #52	; 0x34
 8003130:	ecbd 8b02 	vpop	{d8}
 8003134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003138:	4642      	mov	r2, r8
 800313a:	464b      	mov	r3, r9
 800313c:	4640      	mov	r0, r8
 800313e:	4649      	mov	r1, r9
 8003140:	f7fd fcfc 	bl	8000b3c <__aeabi_dcmpun>
 8003144:	b140      	cbz	r0, 8003158 <_printf_float+0xf0>
 8003146:	464b      	mov	r3, r9
 8003148:	2b00      	cmp	r3, #0
 800314a:	bfbc      	itt	lt
 800314c:	232d      	movlt	r3, #45	; 0x2d
 800314e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003152:	487f      	ldr	r0, [pc, #508]	; (8003350 <_printf_float+0x2e8>)
 8003154:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <_printf_float+0x2ec>)
 8003156:	e7d1      	b.n	80030fc <_printf_float+0x94>
 8003158:	6863      	ldr	r3, [r4, #4]
 800315a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800315e:	9206      	str	r2, [sp, #24]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	d13f      	bne.n	80031e4 <_printf_float+0x17c>
 8003164:	2306      	movs	r3, #6
 8003166:	6063      	str	r3, [r4, #4]
 8003168:	9b05      	ldr	r3, [sp, #20]
 800316a:	6861      	ldr	r1, [r4, #4]
 800316c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003170:	2300      	movs	r3, #0
 8003172:	9303      	str	r3, [sp, #12]
 8003174:	ab0a      	add	r3, sp, #40	; 0x28
 8003176:	e9cd b301 	strd	fp, r3, [sp, #4]
 800317a:	ab09      	add	r3, sp, #36	; 0x24
 800317c:	ec49 8b10 	vmov	d0, r8, r9
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6022      	str	r2, [r4, #0]
 8003184:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003188:	4628      	mov	r0, r5
 800318a:	f7ff fecd 	bl	8002f28 <__cvt>
 800318e:	9b06      	ldr	r3, [sp, #24]
 8003190:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003192:	2b47      	cmp	r3, #71	; 0x47
 8003194:	4680      	mov	r8, r0
 8003196:	d108      	bne.n	80031aa <_printf_float+0x142>
 8003198:	1cc8      	adds	r0, r1, #3
 800319a:	db02      	blt.n	80031a2 <_printf_float+0x13a>
 800319c:	6863      	ldr	r3, [r4, #4]
 800319e:	4299      	cmp	r1, r3
 80031a0:	dd41      	ble.n	8003226 <_printf_float+0x1be>
 80031a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80031a6:	fa5f fb8b 	uxtb.w	fp, fp
 80031aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80031ae:	d820      	bhi.n	80031f2 <_printf_float+0x18a>
 80031b0:	3901      	subs	r1, #1
 80031b2:	465a      	mov	r2, fp
 80031b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80031b8:	9109      	str	r1, [sp, #36]	; 0x24
 80031ba:	f7ff ff17 	bl	8002fec <__exponent>
 80031be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031c0:	1813      	adds	r3, r2, r0
 80031c2:	2a01      	cmp	r2, #1
 80031c4:	4681      	mov	r9, r0
 80031c6:	6123      	str	r3, [r4, #16]
 80031c8:	dc02      	bgt.n	80031d0 <_printf_float+0x168>
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	07d2      	lsls	r2, r2, #31
 80031ce:	d501      	bpl.n	80031d4 <_printf_float+0x16c>
 80031d0:	3301      	adds	r3, #1
 80031d2:	6123      	str	r3, [r4, #16]
 80031d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d09c      	beq.n	8003116 <_printf_float+0xae>
 80031dc:	232d      	movs	r3, #45	; 0x2d
 80031de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e2:	e798      	b.n	8003116 <_printf_float+0xae>
 80031e4:	9a06      	ldr	r2, [sp, #24]
 80031e6:	2a47      	cmp	r2, #71	; 0x47
 80031e8:	d1be      	bne.n	8003168 <_printf_float+0x100>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1bc      	bne.n	8003168 <_printf_float+0x100>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e7b9      	b.n	8003166 <_printf_float+0xfe>
 80031f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80031f6:	d118      	bne.n	800322a <_printf_float+0x1c2>
 80031f8:	2900      	cmp	r1, #0
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	dd0b      	ble.n	8003216 <_printf_float+0x1ae>
 80031fe:	6121      	str	r1, [r4, #16]
 8003200:	b913      	cbnz	r3, 8003208 <_printf_float+0x1a0>
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	07d0      	lsls	r0, r2, #31
 8003206:	d502      	bpl.n	800320e <_printf_float+0x1a6>
 8003208:	3301      	adds	r3, #1
 800320a:	440b      	add	r3, r1
 800320c:	6123      	str	r3, [r4, #16]
 800320e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003210:	f04f 0900 	mov.w	r9, #0
 8003214:	e7de      	b.n	80031d4 <_printf_float+0x16c>
 8003216:	b913      	cbnz	r3, 800321e <_printf_float+0x1b6>
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	07d2      	lsls	r2, r2, #31
 800321c:	d501      	bpl.n	8003222 <_printf_float+0x1ba>
 800321e:	3302      	adds	r3, #2
 8003220:	e7f4      	b.n	800320c <_printf_float+0x1a4>
 8003222:	2301      	movs	r3, #1
 8003224:	e7f2      	b.n	800320c <_printf_float+0x1a4>
 8003226:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800322a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800322c:	4299      	cmp	r1, r3
 800322e:	db05      	blt.n	800323c <_printf_float+0x1d4>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	6121      	str	r1, [r4, #16]
 8003234:	07d8      	lsls	r0, r3, #31
 8003236:	d5ea      	bpl.n	800320e <_printf_float+0x1a6>
 8003238:	1c4b      	adds	r3, r1, #1
 800323a:	e7e7      	b.n	800320c <_printf_float+0x1a4>
 800323c:	2900      	cmp	r1, #0
 800323e:	bfd4      	ite	le
 8003240:	f1c1 0202 	rsble	r2, r1, #2
 8003244:	2201      	movgt	r2, #1
 8003246:	4413      	add	r3, r2
 8003248:	e7e0      	b.n	800320c <_printf_float+0x1a4>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	055a      	lsls	r2, r3, #21
 800324e:	d407      	bmi.n	8003260 <_printf_float+0x1f8>
 8003250:	6923      	ldr	r3, [r4, #16]
 8003252:	4642      	mov	r2, r8
 8003254:	4631      	mov	r1, r6
 8003256:	4628      	mov	r0, r5
 8003258:	47b8      	blx	r7
 800325a:	3001      	adds	r0, #1
 800325c:	d12c      	bne.n	80032b8 <_printf_float+0x250>
 800325e:	e764      	b.n	800312a <_printf_float+0xc2>
 8003260:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003264:	f240 80e0 	bls.w	8003428 <_printf_float+0x3c0>
 8003268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800326c:	2200      	movs	r2, #0
 800326e:	2300      	movs	r3, #0
 8003270:	f7fd fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8003274:	2800      	cmp	r0, #0
 8003276:	d034      	beq.n	80032e2 <_printf_float+0x27a>
 8003278:	4a37      	ldr	r2, [pc, #220]	; (8003358 <_printf_float+0x2f0>)
 800327a:	2301      	movs	r3, #1
 800327c:	4631      	mov	r1, r6
 800327e:	4628      	mov	r0, r5
 8003280:	47b8      	blx	r7
 8003282:	3001      	adds	r0, #1
 8003284:	f43f af51 	beq.w	800312a <_printf_float+0xc2>
 8003288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800328c:	429a      	cmp	r2, r3
 800328e:	db02      	blt.n	8003296 <_printf_float+0x22e>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	07d8      	lsls	r0, r3, #31
 8003294:	d510      	bpl.n	80032b8 <_printf_float+0x250>
 8003296:	ee18 3a10 	vmov	r3, s16
 800329a:	4652      	mov	r2, sl
 800329c:	4631      	mov	r1, r6
 800329e:	4628      	mov	r0, r5
 80032a0:	47b8      	blx	r7
 80032a2:	3001      	adds	r0, #1
 80032a4:	f43f af41 	beq.w	800312a <_printf_float+0xc2>
 80032a8:	f04f 0800 	mov.w	r8, #0
 80032ac:	f104 091a 	add.w	r9, r4, #26
 80032b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032b2:	3b01      	subs	r3, #1
 80032b4:	4543      	cmp	r3, r8
 80032b6:	dc09      	bgt.n	80032cc <_printf_float+0x264>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	079b      	lsls	r3, r3, #30
 80032bc:	f100 8105 	bmi.w	80034ca <_printf_float+0x462>
 80032c0:	68e0      	ldr	r0, [r4, #12]
 80032c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032c4:	4298      	cmp	r0, r3
 80032c6:	bfb8      	it	lt
 80032c8:	4618      	movlt	r0, r3
 80032ca:	e730      	b.n	800312e <_printf_float+0xc6>
 80032cc:	2301      	movs	r3, #1
 80032ce:	464a      	mov	r2, r9
 80032d0:	4631      	mov	r1, r6
 80032d2:	4628      	mov	r0, r5
 80032d4:	47b8      	blx	r7
 80032d6:	3001      	adds	r0, #1
 80032d8:	f43f af27 	beq.w	800312a <_printf_float+0xc2>
 80032dc:	f108 0801 	add.w	r8, r8, #1
 80032e0:	e7e6      	b.n	80032b0 <_printf_float+0x248>
 80032e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	dc39      	bgt.n	800335c <_printf_float+0x2f4>
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <_printf_float+0x2f0>)
 80032ea:	2301      	movs	r3, #1
 80032ec:	4631      	mov	r1, r6
 80032ee:	4628      	mov	r0, r5
 80032f0:	47b8      	blx	r7
 80032f2:	3001      	adds	r0, #1
 80032f4:	f43f af19 	beq.w	800312a <_printf_float+0xc2>
 80032f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d102      	bne.n	8003306 <_printf_float+0x29e>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	07d9      	lsls	r1, r3, #31
 8003304:	d5d8      	bpl.n	80032b8 <_printf_float+0x250>
 8003306:	ee18 3a10 	vmov	r3, s16
 800330a:	4652      	mov	r2, sl
 800330c:	4631      	mov	r1, r6
 800330e:	4628      	mov	r0, r5
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	f43f af09 	beq.w	800312a <_printf_float+0xc2>
 8003318:	f04f 0900 	mov.w	r9, #0
 800331c:	f104 0a1a 	add.w	sl, r4, #26
 8003320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003322:	425b      	negs	r3, r3
 8003324:	454b      	cmp	r3, r9
 8003326:	dc01      	bgt.n	800332c <_printf_float+0x2c4>
 8003328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800332a:	e792      	b.n	8003252 <_printf_float+0x1ea>
 800332c:	2301      	movs	r3, #1
 800332e:	4652      	mov	r2, sl
 8003330:	4631      	mov	r1, r6
 8003332:	4628      	mov	r0, r5
 8003334:	47b8      	blx	r7
 8003336:	3001      	adds	r0, #1
 8003338:	f43f aef7 	beq.w	800312a <_printf_float+0xc2>
 800333c:	f109 0901 	add.w	r9, r9, #1
 8003340:	e7ee      	b.n	8003320 <_printf_float+0x2b8>
 8003342:	bf00      	nop
 8003344:	7fefffff 	.word	0x7fefffff
 8003348:	08006864 	.word	0x08006864
 800334c:	08006868 	.word	0x08006868
 8003350:	08006870 	.word	0x08006870
 8003354:	0800686c 	.word	0x0800686c
 8003358:	08006874 	.word	0x08006874
 800335c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800335e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003360:	429a      	cmp	r2, r3
 8003362:	bfa8      	it	ge
 8003364:	461a      	movge	r2, r3
 8003366:	2a00      	cmp	r2, #0
 8003368:	4691      	mov	r9, r2
 800336a:	dc37      	bgt.n	80033dc <_printf_float+0x374>
 800336c:	f04f 0b00 	mov.w	fp, #0
 8003370:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003374:	f104 021a 	add.w	r2, r4, #26
 8003378:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800337a:	9305      	str	r3, [sp, #20]
 800337c:	eba3 0309 	sub.w	r3, r3, r9
 8003380:	455b      	cmp	r3, fp
 8003382:	dc33      	bgt.n	80033ec <_printf_float+0x384>
 8003384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003388:	429a      	cmp	r2, r3
 800338a:	db3b      	blt.n	8003404 <_printf_float+0x39c>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	07da      	lsls	r2, r3, #31
 8003390:	d438      	bmi.n	8003404 <_printf_float+0x39c>
 8003392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003394:	9a05      	ldr	r2, [sp, #20]
 8003396:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003398:	1a9a      	subs	r2, r3, r2
 800339a:	eba3 0901 	sub.w	r9, r3, r1
 800339e:	4591      	cmp	r9, r2
 80033a0:	bfa8      	it	ge
 80033a2:	4691      	movge	r9, r2
 80033a4:	f1b9 0f00 	cmp.w	r9, #0
 80033a8:	dc35      	bgt.n	8003416 <_printf_float+0x3ae>
 80033aa:	f04f 0800 	mov.w	r8, #0
 80033ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033b2:	f104 0a1a 	add.w	sl, r4, #26
 80033b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	eba3 0309 	sub.w	r3, r3, r9
 80033c0:	4543      	cmp	r3, r8
 80033c2:	f77f af79 	ble.w	80032b8 <_printf_float+0x250>
 80033c6:	2301      	movs	r3, #1
 80033c8:	4652      	mov	r2, sl
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b8      	blx	r7
 80033d0:	3001      	adds	r0, #1
 80033d2:	f43f aeaa 	beq.w	800312a <_printf_float+0xc2>
 80033d6:	f108 0801 	add.w	r8, r8, #1
 80033da:	e7ec      	b.n	80033b6 <_printf_float+0x34e>
 80033dc:	4613      	mov	r3, r2
 80033de:	4631      	mov	r1, r6
 80033e0:	4642      	mov	r2, r8
 80033e2:	4628      	mov	r0, r5
 80033e4:	47b8      	blx	r7
 80033e6:	3001      	adds	r0, #1
 80033e8:	d1c0      	bne.n	800336c <_printf_float+0x304>
 80033ea:	e69e      	b.n	800312a <_printf_float+0xc2>
 80033ec:	2301      	movs	r3, #1
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	9205      	str	r2, [sp, #20]
 80033f4:	47b8      	blx	r7
 80033f6:	3001      	adds	r0, #1
 80033f8:	f43f ae97 	beq.w	800312a <_printf_float+0xc2>
 80033fc:	9a05      	ldr	r2, [sp, #20]
 80033fe:	f10b 0b01 	add.w	fp, fp, #1
 8003402:	e7b9      	b.n	8003378 <_printf_float+0x310>
 8003404:	ee18 3a10 	vmov	r3, s16
 8003408:	4652      	mov	r2, sl
 800340a:	4631      	mov	r1, r6
 800340c:	4628      	mov	r0, r5
 800340e:	47b8      	blx	r7
 8003410:	3001      	adds	r0, #1
 8003412:	d1be      	bne.n	8003392 <_printf_float+0x32a>
 8003414:	e689      	b.n	800312a <_printf_float+0xc2>
 8003416:	9a05      	ldr	r2, [sp, #20]
 8003418:	464b      	mov	r3, r9
 800341a:	4442      	add	r2, r8
 800341c:	4631      	mov	r1, r6
 800341e:	4628      	mov	r0, r5
 8003420:	47b8      	blx	r7
 8003422:	3001      	adds	r0, #1
 8003424:	d1c1      	bne.n	80033aa <_printf_float+0x342>
 8003426:	e680      	b.n	800312a <_printf_float+0xc2>
 8003428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800342a:	2a01      	cmp	r2, #1
 800342c:	dc01      	bgt.n	8003432 <_printf_float+0x3ca>
 800342e:	07db      	lsls	r3, r3, #31
 8003430:	d538      	bpl.n	80034a4 <_printf_float+0x43c>
 8003432:	2301      	movs	r3, #1
 8003434:	4642      	mov	r2, r8
 8003436:	4631      	mov	r1, r6
 8003438:	4628      	mov	r0, r5
 800343a:	47b8      	blx	r7
 800343c:	3001      	adds	r0, #1
 800343e:	f43f ae74 	beq.w	800312a <_printf_float+0xc2>
 8003442:	ee18 3a10 	vmov	r3, s16
 8003446:	4652      	mov	r2, sl
 8003448:	4631      	mov	r1, r6
 800344a:	4628      	mov	r0, r5
 800344c:	47b8      	blx	r7
 800344e:	3001      	adds	r0, #1
 8003450:	f43f ae6b 	beq.w	800312a <_printf_float+0xc2>
 8003454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003458:	2200      	movs	r2, #0
 800345a:	2300      	movs	r3, #0
 800345c:	f7fd fb3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003460:	b9d8      	cbnz	r0, 800349a <_printf_float+0x432>
 8003462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003464:	f108 0201 	add.w	r2, r8, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	d10e      	bne.n	8003492 <_printf_float+0x42a>
 8003474:	e659      	b.n	800312a <_printf_float+0xc2>
 8003476:	2301      	movs	r3, #1
 8003478:	4652      	mov	r2, sl
 800347a:	4631      	mov	r1, r6
 800347c:	4628      	mov	r0, r5
 800347e:	47b8      	blx	r7
 8003480:	3001      	adds	r0, #1
 8003482:	f43f ae52 	beq.w	800312a <_printf_float+0xc2>
 8003486:	f108 0801 	add.w	r8, r8, #1
 800348a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	4543      	cmp	r3, r8
 8003490:	dcf1      	bgt.n	8003476 <_printf_float+0x40e>
 8003492:	464b      	mov	r3, r9
 8003494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003498:	e6dc      	b.n	8003254 <_printf_float+0x1ec>
 800349a:	f04f 0800 	mov.w	r8, #0
 800349e:	f104 0a1a 	add.w	sl, r4, #26
 80034a2:	e7f2      	b.n	800348a <_printf_float+0x422>
 80034a4:	2301      	movs	r3, #1
 80034a6:	4642      	mov	r2, r8
 80034a8:	e7df      	b.n	800346a <_printf_float+0x402>
 80034aa:	2301      	movs	r3, #1
 80034ac:	464a      	mov	r2, r9
 80034ae:	4631      	mov	r1, r6
 80034b0:	4628      	mov	r0, r5
 80034b2:	47b8      	blx	r7
 80034b4:	3001      	adds	r0, #1
 80034b6:	f43f ae38 	beq.w	800312a <_printf_float+0xc2>
 80034ba:	f108 0801 	add.w	r8, r8, #1
 80034be:	68e3      	ldr	r3, [r4, #12]
 80034c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034c2:	1a5b      	subs	r3, r3, r1
 80034c4:	4543      	cmp	r3, r8
 80034c6:	dcf0      	bgt.n	80034aa <_printf_float+0x442>
 80034c8:	e6fa      	b.n	80032c0 <_printf_float+0x258>
 80034ca:	f04f 0800 	mov.w	r8, #0
 80034ce:	f104 0919 	add.w	r9, r4, #25
 80034d2:	e7f4      	b.n	80034be <_printf_float+0x456>

080034d4 <_printf_common>:
 80034d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d8:	4616      	mov	r6, r2
 80034da:	4699      	mov	r9, r3
 80034dc:	688a      	ldr	r2, [r1, #8]
 80034de:	690b      	ldr	r3, [r1, #16]
 80034e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bfb8      	it	lt
 80034e8:	4613      	movlt	r3, r2
 80034ea:	6033      	str	r3, [r6, #0]
 80034ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034f0:	4607      	mov	r7, r0
 80034f2:	460c      	mov	r4, r1
 80034f4:	b10a      	cbz	r2, 80034fa <_printf_common+0x26>
 80034f6:	3301      	adds	r3, #1
 80034f8:	6033      	str	r3, [r6, #0]
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	0699      	lsls	r1, r3, #26
 80034fe:	bf42      	ittt	mi
 8003500:	6833      	ldrmi	r3, [r6, #0]
 8003502:	3302      	addmi	r3, #2
 8003504:	6033      	strmi	r3, [r6, #0]
 8003506:	6825      	ldr	r5, [r4, #0]
 8003508:	f015 0506 	ands.w	r5, r5, #6
 800350c:	d106      	bne.n	800351c <_printf_common+0x48>
 800350e:	f104 0a19 	add.w	sl, r4, #25
 8003512:	68e3      	ldr	r3, [r4, #12]
 8003514:	6832      	ldr	r2, [r6, #0]
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	42ab      	cmp	r3, r5
 800351a:	dc26      	bgt.n	800356a <_printf_common+0x96>
 800351c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003520:	1e13      	subs	r3, r2, #0
 8003522:	6822      	ldr	r2, [r4, #0]
 8003524:	bf18      	it	ne
 8003526:	2301      	movne	r3, #1
 8003528:	0692      	lsls	r2, r2, #26
 800352a:	d42b      	bmi.n	8003584 <_printf_common+0xb0>
 800352c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003530:	4649      	mov	r1, r9
 8003532:	4638      	mov	r0, r7
 8003534:	47c0      	blx	r8
 8003536:	3001      	adds	r0, #1
 8003538:	d01e      	beq.n	8003578 <_printf_common+0xa4>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	68e5      	ldr	r5, [r4, #12]
 800353e:	6832      	ldr	r2, [r6, #0]
 8003540:	f003 0306 	and.w	r3, r3, #6
 8003544:	2b04      	cmp	r3, #4
 8003546:	bf08      	it	eq
 8003548:	1aad      	subeq	r5, r5, r2
 800354a:	68a3      	ldr	r3, [r4, #8]
 800354c:	6922      	ldr	r2, [r4, #16]
 800354e:	bf0c      	ite	eq
 8003550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003554:	2500      	movne	r5, #0
 8003556:	4293      	cmp	r3, r2
 8003558:	bfc4      	itt	gt
 800355a:	1a9b      	subgt	r3, r3, r2
 800355c:	18ed      	addgt	r5, r5, r3
 800355e:	2600      	movs	r6, #0
 8003560:	341a      	adds	r4, #26
 8003562:	42b5      	cmp	r5, r6
 8003564:	d11a      	bne.n	800359c <_printf_common+0xc8>
 8003566:	2000      	movs	r0, #0
 8003568:	e008      	b.n	800357c <_printf_common+0xa8>
 800356a:	2301      	movs	r3, #1
 800356c:	4652      	mov	r2, sl
 800356e:	4649      	mov	r1, r9
 8003570:	4638      	mov	r0, r7
 8003572:	47c0      	blx	r8
 8003574:	3001      	adds	r0, #1
 8003576:	d103      	bne.n	8003580 <_printf_common+0xac>
 8003578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003580:	3501      	adds	r5, #1
 8003582:	e7c6      	b.n	8003512 <_printf_common+0x3e>
 8003584:	18e1      	adds	r1, r4, r3
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	2030      	movs	r0, #48	; 0x30
 800358a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800358e:	4422      	add	r2, r4
 8003590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003598:	3302      	adds	r3, #2
 800359a:	e7c7      	b.n	800352c <_printf_common+0x58>
 800359c:	2301      	movs	r3, #1
 800359e:	4622      	mov	r2, r4
 80035a0:	4649      	mov	r1, r9
 80035a2:	4638      	mov	r0, r7
 80035a4:	47c0      	blx	r8
 80035a6:	3001      	adds	r0, #1
 80035a8:	d0e6      	beq.n	8003578 <_printf_common+0xa4>
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7d9      	b.n	8003562 <_printf_common+0x8e>
	...

080035b0 <_printf_i>:
 80035b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b4:	7e0f      	ldrb	r7, [r1, #24]
 80035b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035b8:	2f78      	cmp	r7, #120	; 0x78
 80035ba:	4691      	mov	r9, r2
 80035bc:	4680      	mov	r8, r0
 80035be:	460c      	mov	r4, r1
 80035c0:	469a      	mov	sl, r3
 80035c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035c6:	d807      	bhi.n	80035d8 <_printf_i+0x28>
 80035c8:	2f62      	cmp	r7, #98	; 0x62
 80035ca:	d80a      	bhi.n	80035e2 <_printf_i+0x32>
 80035cc:	2f00      	cmp	r7, #0
 80035ce:	f000 80d8 	beq.w	8003782 <_printf_i+0x1d2>
 80035d2:	2f58      	cmp	r7, #88	; 0x58
 80035d4:	f000 80a3 	beq.w	800371e <_printf_i+0x16e>
 80035d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035e0:	e03a      	b.n	8003658 <_printf_i+0xa8>
 80035e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035e6:	2b15      	cmp	r3, #21
 80035e8:	d8f6      	bhi.n	80035d8 <_printf_i+0x28>
 80035ea:	a101      	add	r1, pc, #4	; (adr r1, 80035f0 <_printf_i+0x40>)
 80035ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035f0:	08003649 	.word	0x08003649
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	080035d9 	.word	0x080035d9
 80035fc:	080035d9 	.word	0x080035d9
 8003600:	080035d9 	.word	0x080035d9
 8003604:	080035d9 	.word	0x080035d9
 8003608:	0800365d 	.word	0x0800365d
 800360c:	080035d9 	.word	0x080035d9
 8003610:	080035d9 	.word	0x080035d9
 8003614:	080035d9 	.word	0x080035d9
 8003618:	080035d9 	.word	0x080035d9
 800361c:	08003769 	.word	0x08003769
 8003620:	0800368d 	.word	0x0800368d
 8003624:	0800374b 	.word	0x0800374b
 8003628:	080035d9 	.word	0x080035d9
 800362c:	080035d9 	.word	0x080035d9
 8003630:	0800378b 	.word	0x0800378b
 8003634:	080035d9 	.word	0x080035d9
 8003638:	0800368d 	.word	0x0800368d
 800363c:	080035d9 	.word	0x080035d9
 8003640:	080035d9 	.word	0x080035d9
 8003644:	08003753 	.word	0x08003753
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	602a      	str	r2, [r5, #0]
 8003650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003658:	2301      	movs	r3, #1
 800365a:	e0a3      	b.n	80037a4 <_printf_i+0x1f4>
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	6829      	ldr	r1, [r5, #0]
 8003660:	0606      	lsls	r6, r0, #24
 8003662:	f101 0304 	add.w	r3, r1, #4
 8003666:	d50a      	bpl.n	800367e <_printf_i+0xce>
 8003668:	680e      	ldr	r6, [r1, #0]
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	2e00      	cmp	r6, #0
 800366e:	da03      	bge.n	8003678 <_printf_i+0xc8>
 8003670:	232d      	movs	r3, #45	; 0x2d
 8003672:	4276      	negs	r6, r6
 8003674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003678:	485e      	ldr	r0, [pc, #376]	; (80037f4 <_printf_i+0x244>)
 800367a:	230a      	movs	r3, #10
 800367c:	e019      	b.n	80036b2 <_printf_i+0x102>
 800367e:	680e      	ldr	r6, [r1, #0]
 8003680:	602b      	str	r3, [r5, #0]
 8003682:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003686:	bf18      	it	ne
 8003688:	b236      	sxthne	r6, r6
 800368a:	e7ef      	b.n	800366c <_printf_i+0xbc>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	6820      	ldr	r0, [r4, #0]
 8003690:	1d19      	adds	r1, r3, #4
 8003692:	6029      	str	r1, [r5, #0]
 8003694:	0601      	lsls	r1, r0, #24
 8003696:	d501      	bpl.n	800369c <_printf_i+0xec>
 8003698:	681e      	ldr	r6, [r3, #0]
 800369a:	e002      	b.n	80036a2 <_printf_i+0xf2>
 800369c:	0646      	lsls	r6, r0, #25
 800369e:	d5fb      	bpl.n	8003698 <_printf_i+0xe8>
 80036a0:	881e      	ldrh	r6, [r3, #0]
 80036a2:	4854      	ldr	r0, [pc, #336]	; (80037f4 <_printf_i+0x244>)
 80036a4:	2f6f      	cmp	r7, #111	; 0x6f
 80036a6:	bf0c      	ite	eq
 80036a8:	2308      	moveq	r3, #8
 80036aa:	230a      	movne	r3, #10
 80036ac:	2100      	movs	r1, #0
 80036ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036b2:	6865      	ldr	r5, [r4, #4]
 80036b4:	60a5      	str	r5, [r4, #8]
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	bfa2      	ittt	ge
 80036ba:	6821      	ldrge	r1, [r4, #0]
 80036bc:	f021 0104 	bicge.w	r1, r1, #4
 80036c0:	6021      	strge	r1, [r4, #0]
 80036c2:	b90e      	cbnz	r6, 80036c8 <_printf_i+0x118>
 80036c4:	2d00      	cmp	r5, #0
 80036c6:	d04d      	beq.n	8003764 <_printf_i+0x1b4>
 80036c8:	4615      	mov	r5, r2
 80036ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80036ce:	fb03 6711 	mls	r7, r3, r1, r6
 80036d2:	5dc7      	ldrb	r7, [r0, r7]
 80036d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036d8:	4637      	mov	r7, r6
 80036da:	42bb      	cmp	r3, r7
 80036dc:	460e      	mov	r6, r1
 80036de:	d9f4      	bls.n	80036ca <_printf_i+0x11a>
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d10b      	bne.n	80036fc <_printf_i+0x14c>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	07de      	lsls	r6, r3, #31
 80036e8:	d508      	bpl.n	80036fc <_printf_i+0x14c>
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	6861      	ldr	r1, [r4, #4]
 80036ee:	4299      	cmp	r1, r3
 80036f0:	bfde      	ittt	le
 80036f2:	2330      	movle	r3, #48	; 0x30
 80036f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036fc:	1b52      	subs	r2, r2, r5
 80036fe:	6122      	str	r2, [r4, #16]
 8003700:	f8cd a000 	str.w	sl, [sp]
 8003704:	464b      	mov	r3, r9
 8003706:	aa03      	add	r2, sp, #12
 8003708:	4621      	mov	r1, r4
 800370a:	4640      	mov	r0, r8
 800370c:	f7ff fee2 	bl	80034d4 <_printf_common>
 8003710:	3001      	adds	r0, #1
 8003712:	d14c      	bne.n	80037ae <_printf_i+0x1fe>
 8003714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003718:	b004      	add	sp, #16
 800371a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371e:	4835      	ldr	r0, [pc, #212]	; (80037f4 <_printf_i+0x244>)
 8003720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003724:	6829      	ldr	r1, [r5, #0]
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	f851 6b04 	ldr.w	r6, [r1], #4
 800372c:	6029      	str	r1, [r5, #0]
 800372e:	061d      	lsls	r5, r3, #24
 8003730:	d514      	bpl.n	800375c <_printf_i+0x1ac>
 8003732:	07df      	lsls	r7, r3, #31
 8003734:	bf44      	itt	mi
 8003736:	f043 0320 	orrmi.w	r3, r3, #32
 800373a:	6023      	strmi	r3, [r4, #0]
 800373c:	b91e      	cbnz	r6, 8003746 <_printf_i+0x196>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	f023 0320 	bic.w	r3, r3, #32
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	2310      	movs	r3, #16
 8003748:	e7b0      	b.n	80036ac <_printf_i+0xfc>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	f043 0320 	orr.w	r3, r3, #32
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	2378      	movs	r3, #120	; 0x78
 8003754:	4828      	ldr	r0, [pc, #160]	; (80037f8 <_printf_i+0x248>)
 8003756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800375a:	e7e3      	b.n	8003724 <_printf_i+0x174>
 800375c:	0659      	lsls	r1, r3, #25
 800375e:	bf48      	it	mi
 8003760:	b2b6      	uxthmi	r6, r6
 8003762:	e7e6      	b.n	8003732 <_printf_i+0x182>
 8003764:	4615      	mov	r5, r2
 8003766:	e7bb      	b.n	80036e0 <_printf_i+0x130>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	6826      	ldr	r6, [r4, #0]
 800376c:	6961      	ldr	r1, [r4, #20]
 800376e:	1d18      	adds	r0, r3, #4
 8003770:	6028      	str	r0, [r5, #0]
 8003772:	0635      	lsls	r5, r6, #24
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	d501      	bpl.n	800377c <_printf_i+0x1cc>
 8003778:	6019      	str	r1, [r3, #0]
 800377a:	e002      	b.n	8003782 <_printf_i+0x1d2>
 800377c:	0670      	lsls	r0, r6, #25
 800377e:	d5fb      	bpl.n	8003778 <_printf_i+0x1c8>
 8003780:	8019      	strh	r1, [r3, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	6123      	str	r3, [r4, #16]
 8003786:	4615      	mov	r5, r2
 8003788:	e7ba      	b.n	8003700 <_printf_i+0x150>
 800378a:	682b      	ldr	r3, [r5, #0]
 800378c:	1d1a      	adds	r2, r3, #4
 800378e:	602a      	str	r2, [r5, #0]
 8003790:	681d      	ldr	r5, [r3, #0]
 8003792:	6862      	ldr	r2, [r4, #4]
 8003794:	2100      	movs	r1, #0
 8003796:	4628      	mov	r0, r5
 8003798:	f7fc fd2a 	bl	80001f0 <memchr>
 800379c:	b108      	cbz	r0, 80037a2 <_printf_i+0x1f2>
 800379e:	1b40      	subs	r0, r0, r5
 80037a0:	6060      	str	r0, [r4, #4]
 80037a2:	6863      	ldr	r3, [r4, #4]
 80037a4:	6123      	str	r3, [r4, #16]
 80037a6:	2300      	movs	r3, #0
 80037a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ac:	e7a8      	b.n	8003700 <_printf_i+0x150>
 80037ae:	6923      	ldr	r3, [r4, #16]
 80037b0:	462a      	mov	r2, r5
 80037b2:	4649      	mov	r1, r9
 80037b4:	4640      	mov	r0, r8
 80037b6:	47d0      	blx	sl
 80037b8:	3001      	adds	r0, #1
 80037ba:	d0ab      	beq.n	8003714 <_printf_i+0x164>
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	079b      	lsls	r3, r3, #30
 80037c0:	d413      	bmi.n	80037ea <_printf_i+0x23a>
 80037c2:	68e0      	ldr	r0, [r4, #12]
 80037c4:	9b03      	ldr	r3, [sp, #12]
 80037c6:	4298      	cmp	r0, r3
 80037c8:	bfb8      	it	lt
 80037ca:	4618      	movlt	r0, r3
 80037cc:	e7a4      	b.n	8003718 <_printf_i+0x168>
 80037ce:	2301      	movs	r3, #1
 80037d0:	4632      	mov	r2, r6
 80037d2:	4649      	mov	r1, r9
 80037d4:	4640      	mov	r0, r8
 80037d6:	47d0      	blx	sl
 80037d8:	3001      	adds	r0, #1
 80037da:	d09b      	beq.n	8003714 <_printf_i+0x164>
 80037dc:	3501      	adds	r5, #1
 80037de:	68e3      	ldr	r3, [r4, #12]
 80037e0:	9903      	ldr	r1, [sp, #12]
 80037e2:	1a5b      	subs	r3, r3, r1
 80037e4:	42ab      	cmp	r3, r5
 80037e6:	dcf2      	bgt.n	80037ce <_printf_i+0x21e>
 80037e8:	e7eb      	b.n	80037c2 <_printf_i+0x212>
 80037ea:	2500      	movs	r5, #0
 80037ec:	f104 0619 	add.w	r6, r4, #25
 80037f0:	e7f5      	b.n	80037de <_printf_i+0x22e>
 80037f2:	bf00      	nop
 80037f4:	08006876 	.word	0x08006876
 80037f8:	08006887 	.word	0x08006887

080037fc <quorem>:
 80037fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003800:	6903      	ldr	r3, [r0, #16]
 8003802:	690c      	ldr	r4, [r1, #16]
 8003804:	42a3      	cmp	r3, r4
 8003806:	4607      	mov	r7, r0
 8003808:	f2c0 8081 	blt.w	800390e <quorem+0x112>
 800380c:	3c01      	subs	r4, #1
 800380e:	f101 0814 	add.w	r8, r1, #20
 8003812:	f100 0514 	add.w	r5, r0, #20
 8003816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003824:	3301      	adds	r3, #1
 8003826:	429a      	cmp	r2, r3
 8003828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800382c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003830:	fbb2 f6f3 	udiv	r6, r2, r3
 8003834:	d331      	bcc.n	800389a <quorem+0x9e>
 8003836:	f04f 0e00 	mov.w	lr, #0
 800383a:	4640      	mov	r0, r8
 800383c:	46ac      	mov	ip, r5
 800383e:	46f2      	mov	sl, lr
 8003840:	f850 2b04 	ldr.w	r2, [r0], #4
 8003844:	b293      	uxth	r3, r2
 8003846:	fb06 e303 	mla	r3, r6, r3, lr
 800384a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800384e:	b29b      	uxth	r3, r3
 8003850:	ebaa 0303 	sub.w	r3, sl, r3
 8003854:	f8dc a000 	ldr.w	sl, [ip]
 8003858:	0c12      	lsrs	r2, r2, #16
 800385a:	fa13 f38a 	uxtah	r3, r3, sl
 800385e:	fb06 e202 	mla	r2, r6, r2, lr
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	9b00      	ldr	r3, [sp, #0]
 8003866:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800386a:	b292      	uxth	r2, r2
 800386c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003874:	f8bd 3000 	ldrh.w	r3, [sp]
 8003878:	4581      	cmp	r9, r0
 800387a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800387e:	f84c 3b04 	str.w	r3, [ip], #4
 8003882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003886:	d2db      	bcs.n	8003840 <quorem+0x44>
 8003888:	f855 300b 	ldr.w	r3, [r5, fp]
 800388c:	b92b      	cbnz	r3, 800389a <quorem+0x9e>
 800388e:	9b01      	ldr	r3, [sp, #4]
 8003890:	3b04      	subs	r3, #4
 8003892:	429d      	cmp	r5, r3
 8003894:	461a      	mov	r2, r3
 8003896:	d32e      	bcc.n	80038f6 <quorem+0xfa>
 8003898:	613c      	str	r4, [r7, #16]
 800389a:	4638      	mov	r0, r7
 800389c:	f001 f8c6 	bl	8004a2c <__mcmp>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	db24      	blt.n	80038ee <quorem+0xf2>
 80038a4:	3601      	adds	r6, #1
 80038a6:	4628      	mov	r0, r5
 80038a8:	f04f 0c00 	mov.w	ip, #0
 80038ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80038b0:	f8d0 e000 	ldr.w	lr, [r0]
 80038b4:	b293      	uxth	r3, r2
 80038b6:	ebac 0303 	sub.w	r3, ip, r3
 80038ba:	0c12      	lsrs	r2, r2, #16
 80038bc:	fa13 f38e 	uxtah	r3, r3, lr
 80038c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80038c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038ce:	45c1      	cmp	r9, r8
 80038d0:	f840 3b04 	str.w	r3, [r0], #4
 80038d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80038d8:	d2e8      	bcs.n	80038ac <quorem+0xb0>
 80038da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038e2:	b922      	cbnz	r2, 80038ee <quorem+0xf2>
 80038e4:	3b04      	subs	r3, #4
 80038e6:	429d      	cmp	r5, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	d30a      	bcc.n	8003902 <quorem+0x106>
 80038ec:	613c      	str	r4, [r7, #16]
 80038ee:	4630      	mov	r0, r6
 80038f0:	b003      	add	sp, #12
 80038f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	3b04      	subs	r3, #4
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	d1cc      	bne.n	8003898 <quorem+0x9c>
 80038fe:	3c01      	subs	r4, #1
 8003900:	e7c7      	b.n	8003892 <quorem+0x96>
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	3b04      	subs	r3, #4
 8003906:	2a00      	cmp	r2, #0
 8003908:	d1f0      	bne.n	80038ec <quorem+0xf0>
 800390a:	3c01      	subs	r4, #1
 800390c:	e7eb      	b.n	80038e6 <quorem+0xea>
 800390e:	2000      	movs	r0, #0
 8003910:	e7ee      	b.n	80038f0 <quorem+0xf4>
 8003912:	0000      	movs	r0, r0
 8003914:	0000      	movs	r0, r0
	...

08003918 <_dtoa_r>:
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	ed2d 8b04 	vpush	{d8-d9}
 8003920:	ec57 6b10 	vmov	r6, r7, d0
 8003924:	b093      	sub	sp, #76	; 0x4c
 8003926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800392c:	9106      	str	r1, [sp, #24]
 800392e:	ee10 aa10 	vmov	sl, s0
 8003932:	4604      	mov	r4, r0
 8003934:	9209      	str	r2, [sp, #36]	; 0x24
 8003936:	930c      	str	r3, [sp, #48]	; 0x30
 8003938:	46bb      	mov	fp, r7
 800393a:	b975      	cbnz	r5, 800395a <_dtoa_r+0x42>
 800393c:	2010      	movs	r0, #16
 800393e:	f000 fddd 	bl	80044fc <malloc>
 8003942:	4602      	mov	r2, r0
 8003944:	6260      	str	r0, [r4, #36]	; 0x24
 8003946:	b920      	cbnz	r0, 8003952 <_dtoa_r+0x3a>
 8003948:	4ba7      	ldr	r3, [pc, #668]	; (8003be8 <_dtoa_r+0x2d0>)
 800394a:	21ea      	movs	r1, #234	; 0xea
 800394c:	48a7      	ldr	r0, [pc, #668]	; (8003bec <_dtoa_r+0x2d4>)
 800394e:	f001 fa75 	bl	8004e3c <__assert_func>
 8003952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003956:	6005      	str	r5, [r0, #0]
 8003958:	60c5      	str	r5, [r0, #12]
 800395a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	b151      	cbz	r1, 8003976 <_dtoa_r+0x5e>
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	604a      	str	r2, [r1, #4]
 8003964:	2301      	movs	r3, #1
 8003966:	4093      	lsls	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
 800396a:	4620      	mov	r0, r4
 800396c:	f000 fe1c 	bl	80045a8 <_Bfree>
 8003970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	1e3b      	subs	r3, r7, #0
 8003978:	bfaa      	itet	ge
 800397a:	2300      	movge	r3, #0
 800397c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003980:	f8c8 3000 	strge.w	r3, [r8]
 8003984:	4b9a      	ldr	r3, [pc, #616]	; (8003bf0 <_dtoa_r+0x2d8>)
 8003986:	bfbc      	itt	lt
 8003988:	2201      	movlt	r2, #1
 800398a:	f8c8 2000 	strlt.w	r2, [r8]
 800398e:	ea33 030b 	bics.w	r3, r3, fp
 8003992:	d11b      	bne.n	80039cc <_dtoa_r+0xb4>
 8003994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003996:	f242 730f 	movw	r3, #9999	; 0x270f
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80039a0:	4333      	orrs	r3, r6
 80039a2:	f000 8592 	beq.w	80044ca <_dtoa_r+0xbb2>
 80039a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039a8:	b963      	cbnz	r3, 80039c4 <_dtoa_r+0xac>
 80039aa:	4b92      	ldr	r3, [pc, #584]	; (8003bf4 <_dtoa_r+0x2dc>)
 80039ac:	e022      	b.n	80039f4 <_dtoa_r+0xdc>
 80039ae:	4b92      	ldr	r3, [pc, #584]	; (8003bf8 <_dtoa_r+0x2e0>)
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	3308      	adds	r3, #8
 80039b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	9801      	ldr	r0, [sp, #4]
 80039ba:	b013      	add	sp, #76	; 0x4c
 80039bc:	ecbd 8b04 	vpop	{d8-d9}
 80039c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c4:	4b8b      	ldr	r3, [pc, #556]	; (8003bf4 <_dtoa_r+0x2dc>)
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	3303      	adds	r3, #3
 80039ca:	e7f3      	b.n	80039b4 <_dtoa_r+0x9c>
 80039cc:	2200      	movs	r2, #0
 80039ce:	2300      	movs	r3, #0
 80039d0:	4650      	mov	r0, sl
 80039d2:	4659      	mov	r1, fp
 80039d4:	f7fd f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80039d8:	ec4b ab19 	vmov	d9, sl, fp
 80039dc:	4680      	mov	r8, r0
 80039de:	b158      	cbz	r0, 80039f8 <_dtoa_r+0xe0>
 80039e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039e2:	2301      	movs	r3, #1
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 856b 	beq.w	80044c4 <_dtoa_r+0xbac>
 80039ee:	4883      	ldr	r0, [pc, #524]	; (8003bfc <_dtoa_r+0x2e4>)
 80039f0:	6018      	str	r0, [r3, #0]
 80039f2:	1e43      	subs	r3, r0, #1
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	e7df      	b.n	80039b8 <_dtoa_r+0xa0>
 80039f8:	ec4b ab10 	vmov	d0, sl, fp
 80039fc:	aa10      	add	r2, sp, #64	; 0x40
 80039fe:	a911      	add	r1, sp, #68	; 0x44
 8003a00:	4620      	mov	r0, r4
 8003a02:	f001 f8b9 	bl	8004b78 <__d2b>
 8003a06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003a0a:	ee08 0a10 	vmov	s16, r0
 8003a0e:	2d00      	cmp	r5, #0
 8003a10:	f000 8084 	beq.w	8003b1c <_dtoa_r+0x204>
 8003a14:	ee19 3a90 	vmov	r3, s19
 8003a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003a20:	4656      	mov	r6, sl
 8003a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003a2e:	4b74      	ldr	r3, [pc, #464]	; (8003c00 <_dtoa_r+0x2e8>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	4630      	mov	r0, r6
 8003a34:	4639      	mov	r1, r7
 8003a36:	f7fc fc2f 	bl	8000298 <__aeabi_dsub>
 8003a3a:	a365      	add	r3, pc, #404	; (adr r3, 8003bd0 <_dtoa_r+0x2b8>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fc fde2 	bl	8000608 <__aeabi_dmul>
 8003a44:	a364      	add	r3, pc, #400	; (adr r3, 8003bd8 <_dtoa_r+0x2c0>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f7fc fc27 	bl	800029c <__adddf3>
 8003a4e:	4606      	mov	r6, r0
 8003a50:	4628      	mov	r0, r5
 8003a52:	460f      	mov	r7, r1
 8003a54:	f7fc fd6e 	bl	8000534 <__aeabi_i2d>
 8003a58:	a361      	add	r3, pc, #388	; (adr r3, 8003be0 <_dtoa_r+0x2c8>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fdd3 	bl	8000608 <__aeabi_dmul>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4630      	mov	r0, r6
 8003a68:	4639      	mov	r1, r7
 8003a6a:	f7fc fc17 	bl	800029c <__adddf3>
 8003a6e:	4606      	mov	r6, r0
 8003a70:	460f      	mov	r7, r1
 8003a72:	f7fd f879 	bl	8000b68 <__aeabi_d2iz>
 8003a76:	2200      	movs	r2, #0
 8003a78:	9000      	str	r0, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	4639      	mov	r1, r7
 8003a80:	f7fd f834 	bl	8000aec <__aeabi_dcmplt>
 8003a84:	b150      	cbz	r0, 8003a9c <_dtoa_r+0x184>
 8003a86:	9800      	ldr	r0, [sp, #0]
 8003a88:	f7fc fd54 	bl	8000534 <__aeabi_i2d>
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	463b      	mov	r3, r7
 8003a90:	f7fd f822 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a94:	b910      	cbnz	r0, 8003a9c <_dtoa_r+0x184>
 8003a96:	9b00      	ldr	r3, [sp, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	9b00      	ldr	r3, [sp, #0]
 8003a9e:	2b16      	cmp	r3, #22
 8003aa0:	d85a      	bhi.n	8003b58 <_dtoa_r+0x240>
 8003aa2:	9a00      	ldr	r2, [sp, #0]
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <_dtoa_r+0x2ec>)
 8003aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	ec51 0b19 	vmov	r0, r1, d9
 8003ab2:	f7fd f81b 	bl	8000aec <__aeabi_dcmplt>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d050      	beq.n	8003b5c <_dtoa_r+0x244>
 8003aba:	9b00      	ldr	r3, [sp, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ac6:	1b5d      	subs	r5, r3, r5
 8003ac8:	1e6b      	subs	r3, r5, #1
 8003aca:	9305      	str	r3, [sp, #20]
 8003acc:	bf45      	ittet	mi
 8003ace:	f1c5 0301 	rsbmi	r3, r5, #1
 8003ad2:	9304      	strmi	r3, [sp, #16]
 8003ad4:	2300      	movpl	r3, #0
 8003ad6:	2300      	movmi	r3, #0
 8003ad8:	bf4c      	ite	mi
 8003ada:	9305      	strmi	r3, [sp, #20]
 8003adc:	9304      	strpl	r3, [sp, #16]
 8003ade:	9b00      	ldr	r3, [sp, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db3d      	blt.n	8003b60 <_dtoa_r+0x248>
 8003ae4:	9b05      	ldr	r3, [sp, #20]
 8003ae6:	9a00      	ldr	r2, [sp, #0]
 8003ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8003aea:	4413      	add	r3, r2
 8003aec:	9305      	str	r3, [sp, #20]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9307      	str	r3, [sp, #28]
 8003af2:	9b06      	ldr	r3, [sp, #24]
 8003af4:	2b09      	cmp	r3, #9
 8003af6:	f200 8089 	bhi.w	8003c0c <_dtoa_r+0x2f4>
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	bfc4      	itt	gt
 8003afe:	3b04      	subgt	r3, #4
 8003b00:	9306      	strgt	r3, [sp, #24]
 8003b02:	9b06      	ldr	r3, [sp, #24]
 8003b04:	f1a3 0302 	sub.w	r3, r3, #2
 8003b08:	bfcc      	ite	gt
 8003b0a:	2500      	movgt	r5, #0
 8003b0c:	2501      	movle	r5, #1
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	f200 8087 	bhi.w	8003c22 <_dtoa_r+0x30a>
 8003b14:	e8df f003 	tbb	[pc, r3]
 8003b18:	59383a2d 	.word	0x59383a2d
 8003b1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003b20:	441d      	add	r5, r3
 8003b22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	bfc1      	itttt	gt
 8003b2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003b32:	fa0b f303 	lslgt.w	r3, fp, r3
 8003b36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003b3a:	bfda      	itte	le
 8003b3c:	f1c3 0320 	rsble	r3, r3, #32
 8003b40:	fa06 f003 	lslle.w	r0, r6, r3
 8003b44:	4318      	orrgt	r0, r3
 8003b46:	f7fc fce5 	bl	8000514 <__aeabi_ui2d>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003b52:	3d01      	subs	r5, #1
 8003b54:	930e      	str	r3, [sp, #56]	; 0x38
 8003b56:	e76a      	b.n	8003a2e <_dtoa_r+0x116>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e7b2      	b.n	8003ac2 <_dtoa_r+0x1aa>
 8003b5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8003b5e:	e7b1      	b.n	8003ac4 <_dtoa_r+0x1ac>
 8003b60:	9b04      	ldr	r3, [sp, #16]
 8003b62:	9a00      	ldr	r2, [sp, #0]
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	9304      	str	r3, [sp, #16]
 8003b68:	4253      	negs	r3, r2
 8003b6a:	9307      	str	r3, [sp, #28]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8003b70:	e7bf      	b.n	8003af2 <_dtoa_r+0x1da>
 8003b72:	2300      	movs	r3, #0
 8003b74:	9308      	str	r3, [sp, #32]
 8003b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	dc55      	bgt.n	8003c28 <_dtoa_r+0x310>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003b82:	461a      	mov	r2, r3
 8003b84:	9209      	str	r2, [sp, #36]	; 0x24
 8003b86:	e00c      	b.n	8003ba2 <_dtoa_r+0x28a>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e7f3      	b.n	8003b74 <_dtoa_r+0x25c>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b90:	9308      	str	r3, [sp, #32]
 8003b92:	9b00      	ldr	r3, [sp, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	9302      	str	r3, [sp, #8]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	9303      	str	r3, [sp, #12]
 8003b9e:	bfb8      	it	lt
 8003ba0:	2301      	movlt	r3, #1
 8003ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	6042      	str	r2, [r0, #4]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	f102 0614 	add.w	r6, r2, #20
 8003bae:	429e      	cmp	r6, r3
 8003bb0:	6841      	ldr	r1, [r0, #4]
 8003bb2:	d93d      	bls.n	8003c30 <_dtoa_r+0x318>
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f000 fcb7 	bl	8004528 <_Balloc>
 8003bba:	9001      	str	r0, [sp, #4]
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d13b      	bne.n	8003c38 <_dtoa_r+0x320>
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <_dtoa_r+0x2f0>)
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003bc8:	e6c0      	b.n	800394c <_dtoa_r+0x34>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e7df      	b.n	8003b8e <_dtoa_r+0x276>
 8003bce:	bf00      	nop
 8003bd0:	636f4361 	.word	0x636f4361
 8003bd4:	3fd287a7 	.word	0x3fd287a7
 8003bd8:	8b60c8b3 	.word	0x8b60c8b3
 8003bdc:	3fc68a28 	.word	0x3fc68a28
 8003be0:	509f79fb 	.word	0x509f79fb
 8003be4:	3fd34413 	.word	0x3fd34413
 8003be8:	080068a5 	.word	0x080068a5
 8003bec:	080068bc 	.word	0x080068bc
 8003bf0:	7ff00000 	.word	0x7ff00000
 8003bf4:	080068a1 	.word	0x080068a1
 8003bf8:	08006898 	.word	0x08006898
 8003bfc:	08006875 	.word	0x08006875
 8003c00:	3ff80000 	.word	0x3ff80000
 8003c04:	080069b0 	.word	0x080069b0
 8003c08:	08006917 	.word	0x08006917
 8003c0c:	2501      	movs	r5, #1
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9306      	str	r3, [sp, #24]
 8003c12:	9508      	str	r5, [sp, #32]
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2312      	movs	r3, #18
 8003c20:	e7b0      	b.n	8003b84 <_dtoa_r+0x26c>
 8003c22:	2301      	movs	r3, #1
 8003c24:	9308      	str	r3, [sp, #32]
 8003c26:	e7f5      	b.n	8003c14 <_dtoa_r+0x2fc>
 8003c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c2e:	e7b8      	b.n	8003ba2 <_dtoa_r+0x28a>
 8003c30:	3101      	adds	r1, #1
 8003c32:	6041      	str	r1, [r0, #4]
 8003c34:	0052      	lsls	r2, r2, #1
 8003c36:	e7b8      	b.n	8003baa <_dtoa_r+0x292>
 8003c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c3a:	9a01      	ldr	r2, [sp, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	9b03      	ldr	r3, [sp, #12]
 8003c40:	2b0e      	cmp	r3, #14
 8003c42:	f200 809d 	bhi.w	8003d80 <_dtoa_r+0x468>
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	f000 809a 	beq.w	8003d80 <_dtoa_r+0x468>
 8003c4c:	9b00      	ldr	r3, [sp, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	dd32      	ble.n	8003cb8 <_dtoa_r+0x3a0>
 8003c52:	4ab7      	ldr	r2, [pc, #732]	; (8003f30 <_dtoa_r+0x618>)
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c60:	9b00      	ldr	r3, [sp, #0]
 8003c62:	05d8      	lsls	r0, r3, #23
 8003c64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003c68:	d516      	bpl.n	8003c98 <_dtoa_r+0x380>
 8003c6a:	4bb2      	ldr	r3, [pc, #712]	; (8003f34 <_dtoa_r+0x61c>)
 8003c6c:	ec51 0b19 	vmov	r0, r1, d9
 8003c70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c74:	f7fc fdf2 	bl	800085c <__aeabi_ddiv>
 8003c78:	f007 070f 	and.w	r7, r7, #15
 8003c7c:	4682      	mov	sl, r0
 8003c7e:	468b      	mov	fp, r1
 8003c80:	2503      	movs	r5, #3
 8003c82:	4eac      	ldr	r6, [pc, #688]	; (8003f34 <_dtoa_r+0x61c>)
 8003c84:	b957      	cbnz	r7, 8003c9c <_dtoa_r+0x384>
 8003c86:	4642      	mov	r2, r8
 8003c88:	464b      	mov	r3, r9
 8003c8a:	4650      	mov	r0, sl
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	f7fc fde5 	bl	800085c <__aeabi_ddiv>
 8003c92:	4682      	mov	sl, r0
 8003c94:	468b      	mov	fp, r1
 8003c96:	e028      	b.n	8003cea <_dtoa_r+0x3d2>
 8003c98:	2502      	movs	r5, #2
 8003c9a:	e7f2      	b.n	8003c82 <_dtoa_r+0x36a>
 8003c9c:	07f9      	lsls	r1, r7, #31
 8003c9e:	d508      	bpl.n	8003cb2 <_dtoa_r+0x39a>
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ca8:	f7fc fcae 	bl	8000608 <__aeabi_dmul>
 8003cac:	3501      	adds	r5, #1
 8003cae:	4680      	mov	r8, r0
 8003cb0:	4689      	mov	r9, r1
 8003cb2:	107f      	asrs	r7, r7, #1
 8003cb4:	3608      	adds	r6, #8
 8003cb6:	e7e5      	b.n	8003c84 <_dtoa_r+0x36c>
 8003cb8:	f000 809b 	beq.w	8003df2 <_dtoa_r+0x4da>
 8003cbc:	9b00      	ldr	r3, [sp, #0]
 8003cbe:	4f9d      	ldr	r7, [pc, #628]	; (8003f34 <_dtoa_r+0x61c>)
 8003cc0:	425e      	negs	r6, r3
 8003cc2:	4b9b      	ldr	r3, [pc, #620]	; (8003f30 <_dtoa_r+0x618>)
 8003cc4:	f006 020f 	and.w	r2, r6, #15
 8003cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	ec51 0b19 	vmov	r0, r1, d9
 8003cd4:	f7fc fc98 	bl	8000608 <__aeabi_dmul>
 8003cd8:	1136      	asrs	r6, r6, #4
 8003cda:	4682      	mov	sl, r0
 8003cdc:	468b      	mov	fp, r1
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2502      	movs	r5, #2
 8003ce2:	2e00      	cmp	r6, #0
 8003ce4:	d17a      	bne.n	8003ddc <_dtoa_r+0x4c4>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1d3      	bne.n	8003c92 <_dtoa_r+0x37a>
 8003cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8082 	beq.w	8003df6 <_dtoa_r+0x4de>
 8003cf2:	4b91      	ldr	r3, [pc, #580]	; (8003f38 <_dtoa_r+0x620>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4650      	mov	r0, sl
 8003cf8:	4659      	mov	r1, fp
 8003cfa:	f7fc fef7 	bl	8000aec <__aeabi_dcmplt>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d079      	beq.n	8003df6 <_dtoa_r+0x4de>
 8003d02:	9b03      	ldr	r3, [sp, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d076      	beq.n	8003df6 <_dtoa_r+0x4de>
 8003d08:	9b02      	ldr	r3, [sp, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	dd36      	ble.n	8003d7c <_dtoa_r+0x464>
 8003d0e:	9b00      	ldr	r3, [sp, #0]
 8003d10:	4650      	mov	r0, sl
 8003d12:	4659      	mov	r1, fp
 8003d14:	1e5f      	subs	r7, r3, #1
 8003d16:	2200      	movs	r2, #0
 8003d18:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <_dtoa_r+0x624>)
 8003d1a:	f7fc fc75 	bl	8000608 <__aeabi_dmul>
 8003d1e:	9e02      	ldr	r6, [sp, #8]
 8003d20:	4682      	mov	sl, r0
 8003d22:	468b      	mov	fp, r1
 8003d24:	3501      	adds	r5, #1
 8003d26:	4628      	mov	r0, r5
 8003d28:	f7fc fc04 	bl	8000534 <__aeabi_i2d>
 8003d2c:	4652      	mov	r2, sl
 8003d2e:	465b      	mov	r3, fp
 8003d30:	f7fc fc6a 	bl	8000608 <__aeabi_dmul>
 8003d34:	4b82      	ldr	r3, [pc, #520]	; (8003f40 <_dtoa_r+0x628>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	f7fc fab0 	bl	800029c <__adddf3>
 8003d3c:	46d0      	mov	r8, sl
 8003d3e:	46d9      	mov	r9, fp
 8003d40:	4682      	mov	sl, r0
 8003d42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003d46:	2e00      	cmp	r6, #0
 8003d48:	d158      	bne.n	8003dfc <_dtoa_r+0x4e4>
 8003d4a:	4b7e      	ldr	r3, [pc, #504]	; (8003f44 <_dtoa_r+0x62c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4649      	mov	r1, r9
 8003d52:	f7fc faa1 	bl	8000298 <__aeabi_dsub>
 8003d56:	4652      	mov	r2, sl
 8003d58:	465b      	mov	r3, fp
 8003d5a:	4680      	mov	r8, r0
 8003d5c:	4689      	mov	r9, r1
 8003d5e:	f7fc fee3 	bl	8000b28 <__aeabi_dcmpgt>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	f040 8295 	bne.w	8004292 <_dtoa_r+0x97a>
 8003d68:	4652      	mov	r2, sl
 8003d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003d6e:	4640      	mov	r0, r8
 8003d70:	4649      	mov	r1, r9
 8003d72:	f7fc febb 	bl	8000aec <__aeabi_dcmplt>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f040 8289 	bne.w	800428e <_dtoa_r+0x976>
 8003d7c:	ec5b ab19 	vmov	sl, fp, d9
 8003d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f2c0 8148 	blt.w	8004018 <_dtoa_r+0x700>
 8003d88:	9a00      	ldr	r2, [sp, #0]
 8003d8a:	2a0e      	cmp	r2, #14
 8003d8c:	f300 8144 	bgt.w	8004018 <_dtoa_r+0x700>
 8003d90:	4b67      	ldr	r3, [pc, #412]	; (8003f30 <_dtoa_r+0x618>)
 8003d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f280 80d5 	bge.w	8003f4c <_dtoa_r+0x634>
 8003da2:	9b03      	ldr	r3, [sp, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f300 80d1 	bgt.w	8003f4c <_dtoa_r+0x634>
 8003daa:	f040 826f 	bne.w	800428c <_dtoa_r+0x974>
 8003dae:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <_dtoa_r+0x62c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	4640      	mov	r0, r8
 8003db4:	4649      	mov	r1, r9
 8003db6:	f7fc fc27 	bl	8000608 <__aeabi_dmul>
 8003dba:	4652      	mov	r2, sl
 8003dbc:	465b      	mov	r3, fp
 8003dbe:	f7fc fea9 	bl	8000b14 <__aeabi_dcmpge>
 8003dc2:	9e03      	ldr	r6, [sp, #12]
 8003dc4:	4637      	mov	r7, r6
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	f040 8245 	bne.w	8004256 <_dtoa_r+0x93e>
 8003dcc:	9d01      	ldr	r5, [sp, #4]
 8003dce:	2331      	movs	r3, #49	; 0x31
 8003dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8003dd4:	9b00      	ldr	r3, [sp, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	e240      	b.n	800425e <_dtoa_r+0x946>
 8003ddc:	07f2      	lsls	r2, r6, #31
 8003dde:	d505      	bpl.n	8003dec <_dtoa_r+0x4d4>
 8003de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003de4:	f7fc fc10 	bl	8000608 <__aeabi_dmul>
 8003de8:	3501      	adds	r5, #1
 8003dea:	2301      	movs	r3, #1
 8003dec:	1076      	asrs	r6, r6, #1
 8003dee:	3708      	adds	r7, #8
 8003df0:	e777      	b.n	8003ce2 <_dtoa_r+0x3ca>
 8003df2:	2502      	movs	r5, #2
 8003df4:	e779      	b.n	8003cea <_dtoa_r+0x3d2>
 8003df6:	9f00      	ldr	r7, [sp, #0]
 8003df8:	9e03      	ldr	r6, [sp, #12]
 8003dfa:	e794      	b.n	8003d26 <_dtoa_r+0x40e>
 8003dfc:	9901      	ldr	r1, [sp, #4]
 8003dfe:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <_dtoa_r+0x618>)
 8003e00:	4431      	add	r1, r6
 8003e02:	910d      	str	r1, [sp, #52]	; 0x34
 8003e04:	9908      	ldr	r1, [sp, #32]
 8003e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e0e:	2900      	cmp	r1, #0
 8003e10:	d043      	beq.n	8003e9a <_dtoa_r+0x582>
 8003e12:	494d      	ldr	r1, [pc, #308]	; (8003f48 <_dtoa_r+0x630>)
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7fc fd21 	bl	800085c <__aeabi_ddiv>
 8003e1a:	4652      	mov	r2, sl
 8003e1c:	465b      	mov	r3, fp
 8003e1e:	f7fc fa3b 	bl	8000298 <__aeabi_dsub>
 8003e22:	9d01      	ldr	r5, [sp, #4]
 8003e24:	4682      	mov	sl, r0
 8003e26:	468b      	mov	fp, r1
 8003e28:	4649      	mov	r1, r9
 8003e2a:	4640      	mov	r0, r8
 8003e2c:	f7fc fe9c 	bl	8000b68 <__aeabi_d2iz>
 8003e30:	4606      	mov	r6, r0
 8003e32:	f7fc fb7f 	bl	8000534 <__aeabi_i2d>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	f7fc fa2b 	bl	8000298 <__aeabi_dsub>
 8003e42:	3630      	adds	r6, #48	; 0x30
 8003e44:	f805 6b01 	strb.w	r6, [r5], #1
 8003e48:	4652      	mov	r2, sl
 8003e4a:	465b      	mov	r3, fp
 8003e4c:	4680      	mov	r8, r0
 8003e4e:	4689      	mov	r9, r1
 8003e50:	f7fc fe4c 	bl	8000aec <__aeabi_dcmplt>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d163      	bne.n	8003f20 <_dtoa_r+0x608>
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	4936      	ldr	r1, [pc, #216]	; (8003f38 <_dtoa_r+0x620>)
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7fc fa1a 	bl	8000298 <__aeabi_dsub>
 8003e64:	4652      	mov	r2, sl
 8003e66:	465b      	mov	r3, fp
 8003e68:	f7fc fe40 	bl	8000aec <__aeabi_dcmplt>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	f040 80b5 	bne.w	8003fdc <_dtoa_r+0x6c4>
 8003e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e74:	429d      	cmp	r5, r3
 8003e76:	d081      	beq.n	8003d7c <_dtoa_r+0x464>
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <_dtoa_r+0x624>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4650      	mov	r0, sl
 8003e7e:	4659      	mov	r1, fp
 8003e80:	f7fc fbc2 	bl	8000608 <__aeabi_dmul>
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <_dtoa_r+0x624>)
 8003e86:	4682      	mov	sl, r0
 8003e88:	468b      	mov	fp, r1
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f7fc fbba 	bl	8000608 <__aeabi_dmul>
 8003e94:	4680      	mov	r8, r0
 8003e96:	4689      	mov	r9, r1
 8003e98:	e7c6      	b.n	8003e28 <_dtoa_r+0x510>
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	f7fc fbb3 	bl	8000608 <__aeabi_dmul>
 8003ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ea4:	9d01      	ldr	r5, [sp, #4]
 8003ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ea8:	4682      	mov	sl, r0
 8003eaa:	468b      	mov	fp, r1
 8003eac:	4649      	mov	r1, r9
 8003eae:	4640      	mov	r0, r8
 8003eb0:	f7fc fe5a 	bl	8000b68 <__aeabi_d2iz>
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	f7fc fb3d 	bl	8000534 <__aeabi_i2d>
 8003eba:	3630      	adds	r6, #48	; 0x30
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	f7fc f9e8 	bl	8000298 <__aeabi_dsub>
 8003ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8003ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ece:	429d      	cmp	r5, r3
 8003ed0:	4680      	mov	r8, r0
 8003ed2:	4689      	mov	r9, r1
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	d124      	bne.n	8003f24 <_dtoa_r+0x60c>
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <_dtoa_r+0x630>)
 8003edc:	4650      	mov	r0, sl
 8003ede:	4659      	mov	r1, fp
 8003ee0:	f7fc f9dc 	bl	800029c <__adddf3>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4640      	mov	r0, r8
 8003eea:	4649      	mov	r1, r9
 8003eec:	f7fc fe1c 	bl	8000b28 <__aeabi_dcmpgt>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d173      	bne.n	8003fdc <_dtoa_r+0x6c4>
 8003ef4:	4652      	mov	r2, sl
 8003ef6:	465b      	mov	r3, fp
 8003ef8:	4913      	ldr	r1, [pc, #76]	; (8003f48 <_dtoa_r+0x630>)
 8003efa:	2000      	movs	r0, #0
 8003efc:	f7fc f9cc 	bl	8000298 <__aeabi_dsub>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4640      	mov	r0, r8
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc fdf0 	bl	8000aec <__aeabi_dcmplt>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f43f af35 	beq.w	8003d7c <_dtoa_r+0x464>
 8003f12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003f14:	1e6b      	subs	r3, r5, #1
 8003f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f1c:	2b30      	cmp	r3, #48	; 0x30
 8003f1e:	d0f8      	beq.n	8003f12 <_dtoa_r+0x5fa>
 8003f20:	9700      	str	r7, [sp, #0]
 8003f22:	e049      	b.n	8003fb8 <_dtoa_r+0x6a0>
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <_dtoa_r+0x624>)
 8003f26:	f7fc fb6f 	bl	8000608 <__aeabi_dmul>
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	4689      	mov	r9, r1
 8003f2e:	e7bd      	b.n	8003eac <_dtoa_r+0x594>
 8003f30:	080069b0 	.word	0x080069b0
 8003f34:	08006988 	.word	0x08006988
 8003f38:	3ff00000 	.word	0x3ff00000
 8003f3c:	40240000 	.word	0x40240000
 8003f40:	401c0000 	.word	0x401c0000
 8003f44:	40140000 	.word	0x40140000
 8003f48:	3fe00000 	.word	0x3fe00000
 8003f4c:	9d01      	ldr	r5, [sp, #4]
 8003f4e:	4656      	mov	r6, sl
 8003f50:	465f      	mov	r7, fp
 8003f52:	4642      	mov	r2, r8
 8003f54:	464b      	mov	r3, r9
 8003f56:	4630      	mov	r0, r6
 8003f58:	4639      	mov	r1, r7
 8003f5a:	f7fc fc7f 	bl	800085c <__aeabi_ddiv>
 8003f5e:	f7fc fe03 	bl	8000b68 <__aeabi_d2iz>
 8003f62:	4682      	mov	sl, r0
 8003f64:	f7fc fae6 	bl	8000534 <__aeabi_i2d>
 8003f68:	4642      	mov	r2, r8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	f7fc fb4c 	bl	8000608 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4630      	mov	r0, r6
 8003f76:	4639      	mov	r1, r7
 8003f78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8003f7c:	f7fc f98c 	bl	8000298 <__aeabi_dsub>
 8003f80:	f805 6b01 	strb.w	r6, [r5], #1
 8003f84:	9e01      	ldr	r6, [sp, #4]
 8003f86:	9f03      	ldr	r7, [sp, #12]
 8003f88:	1bae      	subs	r6, r5, r6
 8003f8a:	42b7      	cmp	r7, r6
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	d135      	bne.n	8003ffe <_dtoa_r+0x6e6>
 8003f92:	f7fc f983 	bl	800029c <__adddf3>
 8003f96:	4642      	mov	r2, r8
 8003f98:	464b      	mov	r3, r9
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	460f      	mov	r7, r1
 8003f9e:	f7fc fdc3 	bl	8000b28 <__aeabi_dcmpgt>
 8003fa2:	b9d0      	cbnz	r0, 8003fda <_dtoa_r+0x6c2>
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	4630      	mov	r0, r6
 8003faa:	4639      	mov	r1, r7
 8003fac:	f7fc fd94 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fb0:	b110      	cbz	r0, 8003fb8 <_dtoa_r+0x6a0>
 8003fb2:	f01a 0f01 	tst.w	sl, #1
 8003fb6:	d110      	bne.n	8003fda <_dtoa_r+0x6c2>
 8003fb8:	4620      	mov	r0, r4
 8003fba:	ee18 1a10 	vmov	r1, s16
 8003fbe:	f000 faf3 	bl	80045a8 <_Bfree>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9800      	ldr	r0, [sp, #0]
 8003fc6:	702b      	strb	r3, [r5, #0]
 8003fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fca:	3001      	adds	r0, #1
 8003fcc:	6018      	str	r0, [r3, #0]
 8003fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f43f acf1 	beq.w	80039b8 <_dtoa_r+0xa0>
 8003fd6:	601d      	str	r5, [r3, #0]
 8003fd8:	e4ee      	b.n	80039b8 <_dtoa_r+0xa0>
 8003fda:	9f00      	ldr	r7, [sp, #0]
 8003fdc:	462b      	mov	r3, r5
 8003fde:	461d      	mov	r5, r3
 8003fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fe4:	2a39      	cmp	r2, #57	; 0x39
 8003fe6:	d106      	bne.n	8003ff6 <_dtoa_r+0x6de>
 8003fe8:	9a01      	ldr	r2, [sp, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d1f7      	bne.n	8003fde <_dtoa_r+0x6c6>
 8003fee:	9901      	ldr	r1, [sp, #4]
 8003ff0:	2230      	movs	r2, #48	; 0x30
 8003ff2:	3701      	adds	r7, #1
 8003ff4:	700a      	strb	r2, [r1, #0]
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	3201      	adds	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e790      	b.n	8003f20 <_dtoa_r+0x608>
 8003ffe:	4ba6      	ldr	r3, [pc, #664]	; (8004298 <_dtoa_r+0x980>)
 8004000:	2200      	movs	r2, #0
 8004002:	f7fc fb01 	bl	8000608 <__aeabi_dmul>
 8004006:	2200      	movs	r2, #0
 8004008:	2300      	movs	r3, #0
 800400a:	4606      	mov	r6, r0
 800400c:	460f      	mov	r7, r1
 800400e:	f7fc fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 8004012:	2800      	cmp	r0, #0
 8004014:	d09d      	beq.n	8003f52 <_dtoa_r+0x63a>
 8004016:	e7cf      	b.n	8003fb8 <_dtoa_r+0x6a0>
 8004018:	9a08      	ldr	r2, [sp, #32]
 800401a:	2a00      	cmp	r2, #0
 800401c:	f000 80d7 	beq.w	80041ce <_dtoa_r+0x8b6>
 8004020:	9a06      	ldr	r2, [sp, #24]
 8004022:	2a01      	cmp	r2, #1
 8004024:	f300 80ba 	bgt.w	800419c <_dtoa_r+0x884>
 8004028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800402a:	2a00      	cmp	r2, #0
 800402c:	f000 80b2 	beq.w	8004194 <_dtoa_r+0x87c>
 8004030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004034:	9e07      	ldr	r6, [sp, #28]
 8004036:	9d04      	ldr	r5, [sp, #16]
 8004038:	9a04      	ldr	r2, [sp, #16]
 800403a:	441a      	add	r2, r3
 800403c:	9204      	str	r2, [sp, #16]
 800403e:	9a05      	ldr	r2, [sp, #20]
 8004040:	2101      	movs	r1, #1
 8004042:	441a      	add	r2, r3
 8004044:	4620      	mov	r0, r4
 8004046:	9205      	str	r2, [sp, #20]
 8004048:	f000 fb66 	bl	8004718 <__i2b>
 800404c:	4607      	mov	r7, r0
 800404e:	2d00      	cmp	r5, #0
 8004050:	dd0c      	ble.n	800406c <_dtoa_r+0x754>
 8004052:	9b05      	ldr	r3, [sp, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	dd09      	ble.n	800406c <_dtoa_r+0x754>
 8004058:	42ab      	cmp	r3, r5
 800405a:	9a04      	ldr	r2, [sp, #16]
 800405c:	bfa8      	it	ge
 800405e:	462b      	movge	r3, r5
 8004060:	1ad2      	subs	r2, r2, r3
 8004062:	9204      	str	r2, [sp, #16]
 8004064:	9a05      	ldr	r2, [sp, #20]
 8004066:	1aed      	subs	r5, r5, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	9305      	str	r3, [sp, #20]
 800406c:	9b07      	ldr	r3, [sp, #28]
 800406e:	b31b      	cbz	r3, 80040b8 <_dtoa_r+0x7a0>
 8004070:	9b08      	ldr	r3, [sp, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80af 	beq.w	80041d6 <_dtoa_r+0x8be>
 8004078:	2e00      	cmp	r6, #0
 800407a:	dd13      	ble.n	80040a4 <_dtoa_r+0x78c>
 800407c:	4639      	mov	r1, r7
 800407e:	4632      	mov	r2, r6
 8004080:	4620      	mov	r0, r4
 8004082:	f000 fc09 	bl	8004898 <__pow5mult>
 8004086:	ee18 2a10 	vmov	r2, s16
 800408a:	4601      	mov	r1, r0
 800408c:	4607      	mov	r7, r0
 800408e:	4620      	mov	r0, r4
 8004090:	f000 fb58 	bl	8004744 <__multiply>
 8004094:	ee18 1a10 	vmov	r1, s16
 8004098:	4680      	mov	r8, r0
 800409a:	4620      	mov	r0, r4
 800409c:	f000 fa84 	bl	80045a8 <_Bfree>
 80040a0:	ee08 8a10 	vmov	s16, r8
 80040a4:	9b07      	ldr	r3, [sp, #28]
 80040a6:	1b9a      	subs	r2, r3, r6
 80040a8:	d006      	beq.n	80040b8 <_dtoa_r+0x7a0>
 80040aa:	ee18 1a10 	vmov	r1, s16
 80040ae:	4620      	mov	r0, r4
 80040b0:	f000 fbf2 	bl	8004898 <__pow5mult>
 80040b4:	ee08 0a10 	vmov	s16, r0
 80040b8:	2101      	movs	r1, #1
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 fb2c 	bl	8004718 <__i2b>
 80040c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	4606      	mov	r6, r0
 80040c6:	f340 8088 	ble.w	80041da <_dtoa_r+0x8c2>
 80040ca:	461a      	mov	r2, r3
 80040cc:	4601      	mov	r1, r0
 80040ce:	4620      	mov	r0, r4
 80040d0:	f000 fbe2 	bl	8004898 <__pow5mult>
 80040d4:	9b06      	ldr	r3, [sp, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	4606      	mov	r6, r0
 80040da:	f340 8081 	ble.w	80041e0 <_dtoa_r+0x8c8>
 80040de:	f04f 0800 	mov.w	r8, #0
 80040e2:	6933      	ldr	r3, [r6, #16]
 80040e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040e8:	6918      	ldr	r0, [r3, #16]
 80040ea:	f000 fac5 	bl	8004678 <__hi0bits>
 80040ee:	f1c0 0020 	rsb	r0, r0, #32
 80040f2:	9b05      	ldr	r3, [sp, #20]
 80040f4:	4418      	add	r0, r3
 80040f6:	f010 001f 	ands.w	r0, r0, #31
 80040fa:	f000 8092 	beq.w	8004222 <_dtoa_r+0x90a>
 80040fe:	f1c0 0320 	rsb	r3, r0, #32
 8004102:	2b04      	cmp	r3, #4
 8004104:	f340 808a 	ble.w	800421c <_dtoa_r+0x904>
 8004108:	f1c0 001c 	rsb	r0, r0, #28
 800410c:	9b04      	ldr	r3, [sp, #16]
 800410e:	4403      	add	r3, r0
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	9b05      	ldr	r3, [sp, #20]
 8004114:	4403      	add	r3, r0
 8004116:	4405      	add	r5, r0
 8004118:	9305      	str	r3, [sp, #20]
 800411a:	9b04      	ldr	r3, [sp, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	dd07      	ble.n	8004130 <_dtoa_r+0x818>
 8004120:	ee18 1a10 	vmov	r1, s16
 8004124:	461a      	mov	r2, r3
 8004126:	4620      	mov	r0, r4
 8004128:	f000 fc10 	bl	800494c <__lshift>
 800412c:	ee08 0a10 	vmov	s16, r0
 8004130:	9b05      	ldr	r3, [sp, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	dd05      	ble.n	8004142 <_dtoa_r+0x82a>
 8004136:	4631      	mov	r1, r6
 8004138:	461a      	mov	r2, r3
 800413a:	4620      	mov	r0, r4
 800413c:	f000 fc06 	bl	800494c <__lshift>
 8004140:	4606      	mov	r6, r0
 8004142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d06e      	beq.n	8004226 <_dtoa_r+0x90e>
 8004148:	ee18 0a10 	vmov	r0, s16
 800414c:	4631      	mov	r1, r6
 800414e:	f000 fc6d 	bl	8004a2c <__mcmp>
 8004152:	2800      	cmp	r0, #0
 8004154:	da67      	bge.n	8004226 <_dtoa_r+0x90e>
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	3b01      	subs	r3, #1
 800415a:	ee18 1a10 	vmov	r1, s16
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	220a      	movs	r2, #10
 8004162:	2300      	movs	r3, #0
 8004164:	4620      	mov	r0, r4
 8004166:	f000 fa41 	bl	80045ec <__multadd>
 800416a:	9b08      	ldr	r3, [sp, #32]
 800416c:	ee08 0a10 	vmov	s16, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 81b1 	beq.w	80044d8 <_dtoa_r+0xbc0>
 8004176:	2300      	movs	r3, #0
 8004178:	4639      	mov	r1, r7
 800417a:	220a      	movs	r2, #10
 800417c:	4620      	mov	r0, r4
 800417e:	f000 fa35 	bl	80045ec <__multadd>
 8004182:	9b02      	ldr	r3, [sp, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	4607      	mov	r7, r0
 8004188:	f300 808e 	bgt.w	80042a8 <_dtoa_r+0x990>
 800418c:	9b06      	ldr	r3, [sp, #24]
 800418e:	2b02      	cmp	r3, #2
 8004190:	dc51      	bgt.n	8004236 <_dtoa_r+0x91e>
 8004192:	e089      	b.n	80042a8 <_dtoa_r+0x990>
 8004194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800419a:	e74b      	b.n	8004034 <_dtoa_r+0x71c>
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	1e5e      	subs	r6, r3, #1
 80041a0:	9b07      	ldr	r3, [sp, #28]
 80041a2:	42b3      	cmp	r3, r6
 80041a4:	bfbf      	itttt	lt
 80041a6:	9b07      	ldrlt	r3, [sp, #28]
 80041a8:	9607      	strlt	r6, [sp, #28]
 80041aa:	1af2      	sublt	r2, r6, r3
 80041ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80041ae:	bfb6      	itet	lt
 80041b0:	189b      	addlt	r3, r3, r2
 80041b2:	1b9e      	subge	r6, r3, r6
 80041b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80041b6:	9b03      	ldr	r3, [sp, #12]
 80041b8:	bfb8      	it	lt
 80041ba:	2600      	movlt	r6, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bfb7      	itett	lt
 80041c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80041c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80041c8:	1a9d      	sublt	r5, r3, r2
 80041ca:	2300      	movlt	r3, #0
 80041cc:	e734      	b.n	8004038 <_dtoa_r+0x720>
 80041ce:	9e07      	ldr	r6, [sp, #28]
 80041d0:	9d04      	ldr	r5, [sp, #16]
 80041d2:	9f08      	ldr	r7, [sp, #32]
 80041d4:	e73b      	b.n	800404e <_dtoa_r+0x736>
 80041d6:	9a07      	ldr	r2, [sp, #28]
 80041d8:	e767      	b.n	80040aa <_dtoa_r+0x792>
 80041da:	9b06      	ldr	r3, [sp, #24]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	dc18      	bgt.n	8004212 <_dtoa_r+0x8fa>
 80041e0:	f1ba 0f00 	cmp.w	sl, #0
 80041e4:	d115      	bne.n	8004212 <_dtoa_r+0x8fa>
 80041e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80041ea:	b993      	cbnz	r3, 8004212 <_dtoa_r+0x8fa>
 80041ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80041f0:	0d1b      	lsrs	r3, r3, #20
 80041f2:	051b      	lsls	r3, r3, #20
 80041f4:	b183      	cbz	r3, 8004218 <_dtoa_r+0x900>
 80041f6:	9b04      	ldr	r3, [sp, #16]
 80041f8:	3301      	adds	r3, #1
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	9b05      	ldr	r3, [sp, #20]
 80041fe:	3301      	adds	r3, #1
 8004200:	9305      	str	r3, [sp, #20]
 8004202:	f04f 0801 	mov.w	r8, #1
 8004206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	f47f af6a 	bne.w	80040e2 <_dtoa_r+0x7ca>
 800420e:	2001      	movs	r0, #1
 8004210:	e76f      	b.n	80040f2 <_dtoa_r+0x7da>
 8004212:	f04f 0800 	mov.w	r8, #0
 8004216:	e7f6      	b.n	8004206 <_dtoa_r+0x8ee>
 8004218:	4698      	mov	r8, r3
 800421a:	e7f4      	b.n	8004206 <_dtoa_r+0x8ee>
 800421c:	f43f af7d 	beq.w	800411a <_dtoa_r+0x802>
 8004220:	4618      	mov	r0, r3
 8004222:	301c      	adds	r0, #28
 8004224:	e772      	b.n	800410c <_dtoa_r+0x7f4>
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	dc37      	bgt.n	800429c <_dtoa_r+0x984>
 800422c:	9b06      	ldr	r3, [sp, #24]
 800422e:	2b02      	cmp	r3, #2
 8004230:	dd34      	ble.n	800429c <_dtoa_r+0x984>
 8004232:	9b03      	ldr	r3, [sp, #12]
 8004234:	9302      	str	r3, [sp, #8]
 8004236:	9b02      	ldr	r3, [sp, #8]
 8004238:	b96b      	cbnz	r3, 8004256 <_dtoa_r+0x93e>
 800423a:	4631      	mov	r1, r6
 800423c:	2205      	movs	r2, #5
 800423e:	4620      	mov	r0, r4
 8004240:	f000 f9d4 	bl	80045ec <__multadd>
 8004244:	4601      	mov	r1, r0
 8004246:	4606      	mov	r6, r0
 8004248:	ee18 0a10 	vmov	r0, s16
 800424c:	f000 fbee 	bl	8004a2c <__mcmp>
 8004250:	2800      	cmp	r0, #0
 8004252:	f73f adbb 	bgt.w	8003dcc <_dtoa_r+0x4b4>
 8004256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004258:	9d01      	ldr	r5, [sp, #4]
 800425a:	43db      	mvns	r3, r3
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	f04f 0800 	mov.w	r8, #0
 8004262:	4631      	mov	r1, r6
 8004264:	4620      	mov	r0, r4
 8004266:	f000 f99f 	bl	80045a8 <_Bfree>
 800426a:	2f00      	cmp	r7, #0
 800426c:	f43f aea4 	beq.w	8003fb8 <_dtoa_r+0x6a0>
 8004270:	f1b8 0f00 	cmp.w	r8, #0
 8004274:	d005      	beq.n	8004282 <_dtoa_r+0x96a>
 8004276:	45b8      	cmp	r8, r7
 8004278:	d003      	beq.n	8004282 <_dtoa_r+0x96a>
 800427a:	4641      	mov	r1, r8
 800427c:	4620      	mov	r0, r4
 800427e:	f000 f993 	bl	80045a8 <_Bfree>
 8004282:	4639      	mov	r1, r7
 8004284:	4620      	mov	r0, r4
 8004286:	f000 f98f 	bl	80045a8 <_Bfree>
 800428a:	e695      	b.n	8003fb8 <_dtoa_r+0x6a0>
 800428c:	2600      	movs	r6, #0
 800428e:	4637      	mov	r7, r6
 8004290:	e7e1      	b.n	8004256 <_dtoa_r+0x93e>
 8004292:	9700      	str	r7, [sp, #0]
 8004294:	4637      	mov	r7, r6
 8004296:	e599      	b.n	8003dcc <_dtoa_r+0x4b4>
 8004298:	40240000 	.word	0x40240000
 800429c:	9b08      	ldr	r3, [sp, #32]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80ca 	beq.w	8004438 <_dtoa_r+0xb20>
 80042a4:	9b03      	ldr	r3, [sp, #12]
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	dd05      	ble.n	80042b8 <_dtoa_r+0x9a0>
 80042ac:	4639      	mov	r1, r7
 80042ae:	462a      	mov	r2, r5
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 fb4b 	bl	800494c <__lshift>
 80042b6:	4607      	mov	r7, r0
 80042b8:	f1b8 0f00 	cmp.w	r8, #0
 80042bc:	d05b      	beq.n	8004376 <_dtoa_r+0xa5e>
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 f931 	bl	8004528 <_Balloc>
 80042c6:	4605      	mov	r5, r0
 80042c8:	b928      	cbnz	r0, 80042d6 <_dtoa_r+0x9be>
 80042ca:	4b87      	ldr	r3, [pc, #540]	; (80044e8 <_dtoa_r+0xbd0>)
 80042cc:	4602      	mov	r2, r0
 80042ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80042d2:	f7ff bb3b 	b.w	800394c <_dtoa_r+0x34>
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	3202      	adds	r2, #2
 80042da:	0092      	lsls	r2, r2, #2
 80042dc:	f107 010c 	add.w	r1, r7, #12
 80042e0:	300c      	adds	r0, #12
 80042e2:	f000 f913 	bl	800450c <memcpy>
 80042e6:	2201      	movs	r2, #1
 80042e8:	4629      	mov	r1, r5
 80042ea:	4620      	mov	r0, r4
 80042ec:	f000 fb2e 	bl	800494c <__lshift>
 80042f0:	9b01      	ldr	r3, [sp, #4]
 80042f2:	f103 0901 	add.w	r9, r3, #1
 80042f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	f00a 0301 	and.w	r3, sl, #1
 8004302:	46b8      	mov	r8, r7
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	4607      	mov	r7, r0
 8004308:	4631      	mov	r1, r6
 800430a:	ee18 0a10 	vmov	r0, s16
 800430e:	f7ff fa75 	bl	80037fc <quorem>
 8004312:	4641      	mov	r1, r8
 8004314:	9002      	str	r0, [sp, #8]
 8004316:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800431a:	ee18 0a10 	vmov	r0, s16
 800431e:	f000 fb85 	bl	8004a2c <__mcmp>
 8004322:	463a      	mov	r2, r7
 8004324:	9003      	str	r0, [sp, #12]
 8004326:	4631      	mov	r1, r6
 8004328:	4620      	mov	r0, r4
 800432a:	f000 fb9b 	bl	8004a64 <__mdiff>
 800432e:	68c2      	ldr	r2, [r0, #12]
 8004330:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004334:	4605      	mov	r5, r0
 8004336:	bb02      	cbnz	r2, 800437a <_dtoa_r+0xa62>
 8004338:	4601      	mov	r1, r0
 800433a:	ee18 0a10 	vmov	r0, s16
 800433e:	f000 fb75 	bl	8004a2c <__mcmp>
 8004342:	4602      	mov	r2, r0
 8004344:	4629      	mov	r1, r5
 8004346:	4620      	mov	r0, r4
 8004348:	9207      	str	r2, [sp, #28]
 800434a:	f000 f92d 	bl	80045a8 <_Bfree>
 800434e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004352:	ea43 0102 	orr.w	r1, r3, r2
 8004356:	9b04      	ldr	r3, [sp, #16]
 8004358:	430b      	orrs	r3, r1
 800435a:	464d      	mov	r5, r9
 800435c:	d10f      	bne.n	800437e <_dtoa_r+0xa66>
 800435e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004362:	d02a      	beq.n	80043ba <_dtoa_r+0xaa2>
 8004364:	9b03      	ldr	r3, [sp, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	dd02      	ble.n	8004370 <_dtoa_r+0xa58>
 800436a:	9b02      	ldr	r3, [sp, #8]
 800436c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004370:	f88b a000 	strb.w	sl, [fp]
 8004374:	e775      	b.n	8004262 <_dtoa_r+0x94a>
 8004376:	4638      	mov	r0, r7
 8004378:	e7ba      	b.n	80042f0 <_dtoa_r+0x9d8>
 800437a:	2201      	movs	r2, #1
 800437c:	e7e2      	b.n	8004344 <_dtoa_r+0xa2c>
 800437e:	9b03      	ldr	r3, [sp, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db04      	blt.n	800438e <_dtoa_r+0xa76>
 8004384:	9906      	ldr	r1, [sp, #24]
 8004386:	430b      	orrs	r3, r1
 8004388:	9904      	ldr	r1, [sp, #16]
 800438a:	430b      	orrs	r3, r1
 800438c:	d122      	bne.n	80043d4 <_dtoa_r+0xabc>
 800438e:	2a00      	cmp	r2, #0
 8004390:	ddee      	ble.n	8004370 <_dtoa_r+0xa58>
 8004392:	ee18 1a10 	vmov	r1, s16
 8004396:	2201      	movs	r2, #1
 8004398:	4620      	mov	r0, r4
 800439a:	f000 fad7 	bl	800494c <__lshift>
 800439e:	4631      	mov	r1, r6
 80043a0:	ee08 0a10 	vmov	s16, r0
 80043a4:	f000 fb42 	bl	8004a2c <__mcmp>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	dc03      	bgt.n	80043b4 <_dtoa_r+0xa9c>
 80043ac:	d1e0      	bne.n	8004370 <_dtoa_r+0xa58>
 80043ae:	f01a 0f01 	tst.w	sl, #1
 80043b2:	d0dd      	beq.n	8004370 <_dtoa_r+0xa58>
 80043b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80043b8:	d1d7      	bne.n	800436a <_dtoa_r+0xa52>
 80043ba:	2339      	movs	r3, #57	; 0x39
 80043bc:	f88b 3000 	strb.w	r3, [fp]
 80043c0:	462b      	mov	r3, r5
 80043c2:	461d      	mov	r5, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043ca:	2a39      	cmp	r2, #57	; 0x39
 80043cc:	d071      	beq.n	80044b2 <_dtoa_r+0xb9a>
 80043ce:	3201      	adds	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e746      	b.n	8004262 <_dtoa_r+0x94a>
 80043d4:	2a00      	cmp	r2, #0
 80043d6:	dd07      	ble.n	80043e8 <_dtoa_r+0xad0>
 80043d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80043dc:	d0ed      	beq.n	80043ba <_dtoa_r+0xaa2>
 80043de:	f10a 0301 	add.w	r3, sl, #1
 80043e2:	f88b 3000 	strb.w	r3, [fp]
 80043e6:	e73c      	b.n	8004262 <_dtoa_r+0x94a>
 80043e8:	9b05      	ldr	r3, [sp, #20]
 80043ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80043ee:	4599      	cmp	r9, r3
 80043f0:	d047      	beq.n	8004482 <_dtoa_r+0xb6a>
 80043f2:	ee18 1a10 	vmov	r1, s16
 80043f6:	2300      	movs	r3, #0
 80043f8:	220a      	movs	r2, #10
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f8f6 	bl	80045ec <__multadd>
 8004400:	45b8      	cmp	r8, r7
 8004402:	ee08 0a10 	vmov	s16, r0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f04f 020a 	mov.w	r2, #10
 800440e:	4641      	mov	r1, r8
 8004410:	4620      	mov	r0, r4
 8004412:	d106      	bne.n	8004422 <_dtoa_r+0xb0a>
 8004414:	f000 f8ea 	bl	80045ec <__multadd>
 8004418:	4680      	mov	r8, r0
 800441a:	4607      	mov	r7, r0
 800441c:	f109 0901 	add.w	r9, r9, #1
 8004420:	e772      	b.n	8004308 <_dtoa_r+0x9f0>
 8004422:	f000 f8e3 	bl	80045ec <__multadd>
 8004426:	4639      	mov	r1, r7
 8004428:	4680      	mov	r8, r0
 800442a:	2300      	movs	r3, #0
 800442c:	220a      	movs	r2, #10
 800442e:	4620      	mov	r0, r4
 8004430:	f000 f8dc 	bl	80045ec <__multadd>
 8004434:	4607      	mov	r7, r0
 8004436:	e7f1      	b.n	800441c <_dtoa_r+0xb04>
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	9302      	str	r3, [sp, #8]
 800443c:	9d01      	ldr	r5, [sp, #4]
 800443e:	ee18 0a10 	vmov	r0, s16
 8004442:	4631      	mov	r1, r6
 8004444:	f7ff f9da 	bl	80037fc <quorem>
 8004448:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800444c:	9b01      	ldr	r3, [sp, #4]
 800444e:	f805 ab01 	strb.w	sl, [r5], #1
 8004452:	1aea      	subs	r2, r5, r3
 8004454:	9b02      	ldr	r3, [sp, #8]
 8004456:	4293      	cmp	r3, r2
 8004458:	dd09      	ble.n	800446e <_dtoa_r+0xb56>
 800445a:	ee18 1a10 	vmov	r1, s16
 800445e:	2300      	movs	r3, #0
 8004460:	220a      	movs	r2, #10
 8004462:	4620      	mov	r0, r4
 8004464:	f000 f8c2 	bl	80045ec <__multadd>
 8004468:	ee08 0a10 	vmov	s16, r0
 800446c:	e7e7      	b.n	800443e <_dtoa_r+0xb26>
 800446e:	9b02      	ldr	r3, [sp, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	bfc8      	it	gt
 8004474:	461d      	movgt	r5, r3
 8004476:	9b01      	ldr	r3, [sp, #4]
 8004478:	bfd8      	it	le
 800447a:	2501      	movle	r5, #1
 800447c:	441d      	add	r5, r3
 800447e:	f04f 0800 	mov.w	r8, #0
 8004482:	ee18 1a10 	vmov	r1, s16
 8004486:	2201      	movs	r2, #1
 8004488:	4620      	mov	r0, r4
 800448a:	f000 fa5f 	bl	800494c <__lshift>
 800448e:	4631      	mov	r1, r6
 8004490:	ee08 0a10 	vmov	s16, r0
 8004494:	f000 faca 	bl	8004a2c <__mcmp>
 8004498:	2800      	cmp	r0, #0
 800449a:	dc91      	bgt.n	80043c0 <_dtoa_r+0xaa8>
 800449c:	d102      	bne.n	80044a4 <_dtoa_r+0xb8c>
 800449e:	f01a 0f01 	tst.w	sl, #1
 80044a2:	d18d      	bne.n	80043c0 <_dtoa_r+0xaa8>
 80044a4:	462b      	mov	r3, r5
 80044a6:	461d      	mov	r5, r3
 80044a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044ac:	2a30      	cmp	r2, #48	; 0x30
 80044ae:	d0fa      	beq.n	80044a6 <_dtoa_r+0xb8e>
 80044b0:	e6d7      	b.n	8004262 <_dtoa_r+0x94a>
 80044b2:	9a01      	ldr	r2, [sp, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d184      	bne.n	80043c2 <_dtoa_r+0xaaa>
 80044b8:	9b00      	ldr	r3, [sp, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2331      	movs	r3, #49	; 0x31
 80044c0:	7013      	strb	r3, [r2, #0]
 80044c2:	e6ce      	b.n	8004262 <_dtoa_r+0x94a>
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <_dtoa_r+0xbd4>)
 80044c6:	f7ff ba95 	b.w	80039f4 <_dtoa_r+0xdc>
 80044ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f47f aa6e 	bne.w	80039ae <_dtoa_r+0x96>
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <_dtoa_r+0xbd8>)
 80044d4:	f7ff ba8e 	b.w	80039f4 <_dtoa_r+0xdc>
 80044d8:	9b02      	ldr	r3, [sp, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	dcae      	bgt.n	800443c <_dtoa_r+0xb24>
 80044de:	9b06      	ldr	r3, [sp, #24]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	f73f aea8 	bgt.w	8004236 <_dtoa_r+0x91e>
 80044e6:	e7a9      	b.n	800443c <_dtoa_r+0xb24>
 80044e8:	08006917 	.word	0x08006917
 80044ec:	08006874 	.word	0x08006874
 80044f0:	08006898 	.word	0x08006898

080044f4 <_localeconv_r>:
 80044f4:	4800      	ldr	r0, [pc, #0]	; (80044f8 <_localeconv_r+0x4>)
 80044f6:	4770      	bx	lr
 80044f8:	2000015c 	.word	0x2000015c

080044fc <malloc>:
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <malloc+0xc>)
 80044fe:	4601      	mov	r1, r0
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f000 bc17 	b.w	8004d34 <_malloc_r>
 8004506:	bf00      	nop
 8004508:	20000008 	.word	0x20000008

0800450c <memcpy>:
 800450c:	440a      	add	r2, r1
 800450e:	4291      	cmp	r1, r2
 8004510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004514:	d100      	bne.n	8004518 <memcpy+0xc>
 8004516:	4770      	bx	lr
 8004518:	b510      	push	{r4, lr}
 800451a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800451e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004522:	4291      	cmp	r1, r2
 8004524:	d1f9      	bne.n	800451a <memcpy+0xe>
 8004526:	bd10      	pop	{r4, pc}

08004528 <_Balloc>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
 8004530:	b976      	cbnz	r6, 8004550 <_Balloc+0x28>
 8004532:	2010      	movs	r0, #16
 8004534:	f7ff ffe2 	bl	80044fc <malloc>
 8004538:	4602      	mov	r2, r0
 800453a:	6260      	str	r0, [r4, #36]	; 0x24
 800453c:	b920      	cbnz	r0, 8004548 <_Balloc+0x20>
 800453e:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <_Balloc+0x78>)
 8004540:	4818      	ldr	r0, [pc, #96]	; (80045a4 <_Balloc+0x7c>)
 8004542:	2166      	movs	r1, #102	; 0x66
 8004544:	f000 fc7a 	bl	8004e3c <__assert_func>
 8004548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800454c:	6006      	str	r6, [r0, #0]
 800454e:	60c6      	str	r6, [r0, #12]
 8004550:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004552:	68f3      	ldr	r3, [r6, #12]
 8004554:	b183      	cbz	r3, 8004578 <_Balloc+0x50>
 8004556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800455e:	b9b8      	cbnz	r0, 8004590 <_Balloc+0x68>
 8004560:	2101      	movs	r1, #1
 8004562:	fa01 f605 	lsl.w	r6, r1, r5
 8004566:	1d72      	adds	r2, r6, #5
 8004568:	0092      	lsls	r2, r2, #2
 800456a:	4620      	mov	r0, r4
 800456c:	f000 fb60 	bl	8004c30 <_calloc_r>
 8004570:	b160      	cbz	r0, 800458c <_Balloc+0x64>
 8004572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004576:	e00e      	b.n	8004596 <_Balloc+0x6e>
 8004578:	2221      	movs	r2, #33	; 0x21
 800457a:	2104      	movs	r1, #4
 800457c:	4620      	mov	r0, r4
 800457e:	f000 fb57 	bl	8004c30 <_calloc_r>
 8004582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004584:	60f0      	str	r0, [r6, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e4      	bne.n	8004556 <_Balloc+0x2e>
 800458c:	2000      	movs	r0, #0
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	6802      	ldr	r2, [r0, #0]
 8004592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004596:	2300      	movs	r3, #0
 8004598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800459c:	e7f7      	b.n	800458e <_Balloc+0x66>
 800459e:	bf00      	nop
 80045a0:	080068a5 	.word	0x080068a5
 80045a4:	08006928 	.word	0x08006928

080045a8 <_Bfree>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80045ac:	4605      	mov	r5, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	b976      	cbnz	r6, 80045d0 <_Bfree+0x28>
 80045b2:	2010      	movs	r0, #16
 80045b4:	f7ff ffa2 	bl	80044fc <malloc>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6268      	str	r0, [r5, #36]	; 0x24
 80045bc:	b920      	cbnz	r0, 80045c8 <_Bfree+0x20>
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <_Bfree+0x3c>)
 80045c0:	4809      	ldr	r0, [pc, #36]	; (80045e8 <_Bfree+0x40>)
 80045c2:	218a      	movs	r1, #138	; 0x8a
 80045c4:	f000 fc3a 	bl	8004e3c <__assert_func>
 80045c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045cc:	6006      	str	r6, [r0, #0]
 80045ce:	60c6      	str	r6, [r0, #12]
 80045d0:	b13c      	cbz	r4, 80045e2 <_Bfree+0x3a>
 80045d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045d4:	6862      	ldr	r2, [r4, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045dc:	6021      	str	r1, [r4, #0]
 80045de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	080068a5 	.word	0x080068a5
 80045e8:	08006928 	.word	0x08006928

080045ec <__multadd>:
 80045ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f0:	690d      	ldr	r5, [r1, #16]
 80045f2:	4607      	mov	r7, r0
 80045f4:	460c      	mov	r4, r1
 80045f6:	461e      	mov	r6, r3
 80045f8:	f101 0c14 	add.w	ip, r1, #20
 80045fc:	2000      	movs	r0, #0
 80045fe:	f8dc 3000 	ldr.w	r3, [ip]
 8004602:	b299      	uxth	r1, r3
 8004604:	fb02 6101 	mla	r1, r2, r1, r6
 8004608:	0c1e      	lsrs	r6, r3, #16
 800460a:	0c0b      	lsrs	r3, r1, #16
 800460c:	fb02 3306 	mla	r3, r2, r6, r3
 8004610:	b289      	uxth	r1, r1
 8004612:	3001      	adds	r0, #1
 8004614:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004618:	4285      	cmp	r5, r0
 800461a:	f84c 1b04 	str.w	r1, [ip], #4
 800461e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004622:	dcec      	bgt.n	80045fe <__multadd+0x12>
 8004624:	b30e      	cbz	r6, 800466a <__multadd+0x7e>
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	42ab      	cmp	r3, r5
 800462a:	dc19      	bgt.n	8004660 <__multadd+0x74>
 800462c:	6861      	ldr	r1, [r4, #4]
 800462e:	4638      	mov	r0, r7
 8004630:	3101      	adds	r1, #1
 8004632:	f7ff ff79 	bl	8004528 <_Balloc>
 8004636:	4680      	mov	r8, r0
 8004638:	b928      	cbnz	r0, 8004646 <__multadd+0x5a>
 800463a:	4602      	mov	r2, r0
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <__multadd+0x84>)
 800463e:	480d      	ldr	r0, [pc, #52]	; (8004674 <__multadd+0x88>)
 8004640:	21b5      	movs	r1, #181	; 0xb5
 8004642:	f000 fbfb 	bl	8004e3c <__assert_func>
 8004646:	6922      	ldr	r2, [r4, #16]
 8004648:	3202      	adds	r2, #2
 800464a:	f104 010c 	add.w	r1, r4, #12
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	300c      	adds	r0, #12
 8004652:	f7ff ff5b 	bl	800450c <memcpy>
 8004656:	4621      	mov	r1, r4
 8004658:	4638      	mov	r0, r7
 800465a:	f7ff ffa5 	bl	80045a8 <_Bfree>
 800465e:	4644      	mov	r4, r8
 8004660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004664:	3501      	adds	r5, #1
 8004666:	615e      	str	r6, [r3, #20]
 8004668:	6125      	str	r5, [r4, #16]
 800466a:	4620      	mov	r0, r4
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004670:	08006917 	.word	0x08006917
 8004674:	08006928 	.word	0x08006928

08004678 <__hi0bits>:
 8004678:	0c03      	lsrs	r3, r0, #16
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	b9d3      	cbnz	r3, 80046b4 <__hi0bits+0x3c>
 800467e:	0400      	lsls	r0, r0, #16
 8004680:	2310      	movs	r3, #16
 8004682:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004686:	bf04      	itt	eq
 8004688:	0200      	lsleq	r0, r0, #8
 800468a:	3308      	addeq	r3, #8
 800468c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004690:	bf04      	itt	eq
 8004692:	0100      	lsleq	r0, r0, #4
 8004694:	3304      	addeq	r3, #4
 8004696:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800469a:	bf04      	itt	eq
 800469c:	0080      	lsleq	r0, r0, #2
 800469e:	3302      	addeq	r3, #2
 80046a0:	2800      	cmp	r0, #0
 80046a2:	db05      	blt.n	80046b0 <__hi0bits+0x38>
 80046a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80046a8:	f103 0301 	add.w	r3, r3, #1
 80046ac:	bf08      	it	eq
 80046ae:	2320      	moveq	r3, #32
 80046b0:	4618      	mov	r0, r3
 80046b2:	4770      	bx	lr
 80046b4:	2300      	movs	r3, #0
 80046b6:	e7e4      	b.n	8004682 <__hi0bits+0xa>

080046b8 <__lo0bits>:
 80046b8:	6803      	ldr	r3, [r0, #0]
 80046ba:	f013 0207 	ands.w	r2, r3, #7
 80046be:	4601      	mov	r1, r0
 80046c0:	d00b      	beq.n	80046da <__lo0bits+0x22>
 80046c2:	07da      	lsls	r2, r3, #31
 80046c4:	d423      	bmi.n	800470e <__lo0bits+0x56>
 80046c6:	0798      	lsls	r0, r3, #30
 80046c8:	bf49      	itett	mi
 80046ca:	085b      	lsrmi	r3, r3, #1
 80046cc:	089b      	lsrpl	r3, r3, #2
 80046ce:	2001      	movmi	r0, #1
 80046d0:	600b      	strmi	r3, [r1, #0]
 80046d2:	bf5c      	itt	pl
 80046d4:	600b      	strpl	r3, [r1, #0]
 80046d6:	2002      	movpl	r0, #2
 80046d8:	4770      	bx	lr
 80046da:	b298      	uxth	r0, r3
 80046dc:	b9a8      	cbnz	r0, 800470a <__lo0bits+0x52>
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	2010      	movs	r0, #16
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	b90a      	cbnz	r2, 80046ea <__lo0bits+0x32>
 80046e6:	3008      	adds	r0, #8
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	071a      	lsls	r2, r3, #28
 80046ec:	bf04      	itt	eq
 80046ee:	091b      	lsreq	r3, r3, #4
 80046f0:	3004      	addeq	r0, #4
 80046f2:	079a      	lsls	r2, r3, #30
 80046f4:	bf04      	itt	eq
 80046f6:	089b      	lsreq	r3, r3, #2
 80046f8:	3002      	addeq	r0, #2
 80046fa:	07da      	lsls	r2, r3, #31
 80046fc:	d403      	bmi.n	8004706 <__lo0bits+0x4e>
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	f100 0001 	add.w	r0, r0, #1
 8004704:	d005      	beq.n	8004712 <__lo0bits+0x5a>
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	4770      	bx	lr
 800470a:	4610      	mov	r0, r2
 800470c:	e7e9      	b.n	80046e2 <__lo0bits+0x2a>
 800470e:	2000      	movs	r0, #0
 8004710:	4770      	bx	lr
 8004712:	2020      	movs	r0, #32
 8004714:	4770      	bx	lr
	...

08004718 <__i2b>:
 8004718:	b510      	push	{r4, lr}
 800471a:	460c      	mov	r4, r1
 800471c:	2101      	movs	r1, #1
 800471e:	f7ff ff03 	bl	8004528 <_Balloc>
 8004722:	4602      	mov	r2, r0
 8004724:	b928      	cbnz	r0, 8004732 <__i2b+0x1a>
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <__i2b+0x24>)
 8004728:	4805      	ldr	r0, [pc, #20]	; (8004740 <__i2b+0x28>)
 800472a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800472e:	f000 fb85 	bl	8004e3c <__assert_func>
 8004732:	2301      	movs	r3, #1
 8004734:	6144      	str	r4, [r0, #20]
 8004736:	6103      	str	r3, [r0, #16]
 8004738:	bd10      	pop	{r4, pc}
 800473a:	bf00      	nop
 800473c:	08006917 	.word	0x08006917
 8004740:	08006928 	.word	0x08006928

08004744 <__multiply>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	4691      	mov	r9, r2
 800474a:	690a      	ldr	r2, [r1, #16]
 800474c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004750:	429a      	cmp	r2, r3
 8004752:	bfb8      	it	lt
 8004754:	460b      	movlt	r3, r1
 8004756:	460c      	mov	r4, r1
 8004758:	bfbc      	itt	lt
 800475a:	464c      	movlt	r4, r9
 800475c:	4699      	movlt	r9, r3
 800475e:	6927      	ldr	r7, [r4, #16]
 8004760:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004764:	68a3      	ldr	r3, [r4, #8]
 8004766:	6861      	ldr	r1, [r4, #4]
 8004768:	eb07 060a 	add.w	r6, r7, sl
 800476c:	42b3      	cmp	r3, r6
 800476e:	b085      	sub	sp, #20
 8004770:	bfb8      	it	lt
 8004772:	3101      	addlt	r1, #1
 8004774:	f7ff fed8 	bl	8004528 <_Balloc>
 8004778:	b930      	cbnz	r0, 8004788 <__multiply+0x44>
 800477a:	4602      	mov	r2, r0
 800477c:	4b44      	ldr	r3, [pc, #272]	; (8004890 <__multiply+0x14c>)
 800477e:	4845      	ldr	r0, [pc, #276]	; (8004894 <__multiply+0x150>)
 8004780:	f240 115d 	movw	r1, #349	; 0x15d
 8004784:	f000 fb5a 	bl	8004e3c <__assert_func>
 8004788:	f100 0514 	add.w	r5, r0, #20
 800478c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004790:	462b      	mov	r3, r5
 8004792:	2200      	movs	r2, #0
 8004794:	4543      	cmp	r3, r8
 8004796:	d321      	bcc.n	80047dc <__multiply+0x98>
 8004798:	f104 0314 	add.w	r3, r4, #20
 800479c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80047a0:	f109 0314 	add.w	r3, r9, #20
 80047a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80047a8:	9202      	str	r2, [sp, #8]
 80047aa:	1b3a      	subs	r2, r7, r4
 80047ac:	3a15      	subs	r2, #21
 80047ae:	f022 0203 	bic.w	r2, r2, #3
 80047b2:	3204      	adds	r2, #4
 80047b4:	f104 0115 	add.w	r1, r4, #21
 80047b8:	428f      	cmp	r7, r1
 80047ba:	bf38      	it	cc
 80047bc:	2204      	movcc	r2, #4
 80047be:	9201      	str	r2, [sp, #4]
 80047c0:	9a02      	ldr	r2, [sp, #8]
 80047c2:	9303      	str	r3, [sp, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d80c      	bhi.n	80047e2 <__multiply+0x9e>
 80047c8:	2e00      	cmp	r6, #0
 80047ca:	dd03      	ble.n	80047d4 <__multiply+0x90>
 80047cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05a      	beq.n	800488a <__multiply+0x146>
 80047d4:	6106      	str	r6, [r0, #16]
 80047d6:	b005      	add	sp, #20
 80047d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047dc:	f843 2b04 	str.w	r2, [r3], #4
 80047e0:	e7d8      	b.n	8004794 <__multiply+0x50>
 80047e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80047e6:	f1ba 0f00 	cmp.w	sl, #0
 80047ea:	d024      	beq.n	8004836 <__multiply+0xf2>
 80047ec:	f104 0e14 	add.w	lr, r4, #20
 80047f0:	46a9      	mov	r9, r5
 80047f2:	f04f 0c00 	mov.w	ip, #0
 80047f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80047fa:	f8d9 1000 	ldr.w	r1, [r9]
 80047fe:	fa1f fb82 	uxth.w	fp, r2
 8004802:	b289      	uxth	r1, r1
 8004804:	fb0a 110b 	mla	r1, sl, fp, r1
 8004808:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800480c:	f8d9 2000 	ldr.w	r2, [r9]
 8004810:	4461      	add	r1, ip
 8004812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004816:	fb0a c20b 	mla	r2, sl, fp, ip
 800481a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800481e:	b289      	uxth	r1, r1
 8004820:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004824:	4577      	cmp	r7, lr
 8004826:	f849 1b04 	str.w	r1, [r9], #4
 800482a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800482e:	d8e2      	bhi.n	80047f6 <__multiply+0xb2>
 8004830:	9a01      	ldr	r2, [sp, #4]
 8004832:	f845 c002 	str.w	ip, [r5, r2]
 8004836:	9a03      	ldr	r2, [sp, #12]
 8004838:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800483c:	3304      	adds	r3, #4
 800483e:	f1b9 0f00 	cmp.w	r9, #0
 8004842:	d020      	beq.n	8004886 <__multiply+0x142>
 8004844:	6829      	ldr	r1, [r5, #0]
 8004846:	f104 0c14 	add.w	ip, r4, #20
 800484a:	46ae      	mov	lr, r5
 800484c:	f04f 0a00 	mov.w	sl, #0
 8004850:	f8bc b000 	ldrh.w	fp, [ip]
 8004854:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004858:	fb09 220b 	mla	r2, r9, fp, r2
 800485c:	4492      	add	sl, r2
 800485e:	b289      	uxth	r1, r1
 8004860:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004864:	f84e 1b04 	str.w	r1, [lr], #4
 8004868:	f85c 2b04 	ldr.w	r2, [ip], #4
 800486c:	f8be 1000 	ldrh.w	r1, [lr]
 8004870:	0c12      	lsrs	r2, r2, #16
 8004872:	fb09 1102 	mla	r1, r9, r2, r1
 8004876:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800487a:	4567      	cmp	r7, ip
 800487c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004880:	d8e6      	bhi.n	8004850 <__multiply+0x10c>
 8004882:	9a01      	ldr	r2, [sp, #4]
 8004884:	50a9      	str	r1, [r5, r2]
 8004886:	3504      	adds	r5, #4
 8004888:	e79a      	b.n	80047c0 <__multiply+0x7c>
 800488a:	3e01      	subs	r6, #1
 800488c:	e79c      	b.n	80047c8 <__multiply+0x84>
 800488e:	bf00      	nop
 8004890:	08006917 	.word	0x08006917
 8004894:	08006928 	.word	0x08006928

08004898 <__pow5mult>:
 8004898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800489c:	4615      	mov	r5, r2
 800489e:	f012 0203 	ands.w	r2, r2, #3
 80048a2:	4606      	mov	r6, r0
 80048a4:	460f      	mov	r7, r1
 80048a6:	d007      	beq.n	80048b8 <__pow5mult+0x20>
 80048a8:	4c25      	ldr	r4, [pc, #148]	; (8004940 <__pow5mult+0xa8>)
 80048aa:	3a01      	subs	r2, #1
 80048ac:	2300      	movs	r3, #0
 80048ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80048b2:	f7ff fe9b 	bl	80045ec <__multadd>
 80048b6:	4607      	mov	r7, r0
 80048b8:	10ad      	asrs	r5, r5, #2
 80048ba:	d03d      	beq.n	8004938 <__pow5mult+0xa0>
 80048bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80048be:	b97c      	cbnz	r4, 80048e0 <__pow5mult+0x48>
 80048c0:	2010      	movs	r0, #16
 80048c2:	f7ff fe1b 	bl	80044fc <malloc>
 80048c6:	4602      	mov	r2, r0
 80048c8:	6270      	str	r0, [r6, #36]	; 0x24
 80048ca:	b928      	cbnz	r0, 80048d8 <__pow5mult+0x40>
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <__pow5mult+0xac>)
 80048ce:	481e      	ldr	r0, [pc, #120]	; (8004948 <__pow5mult+0xb0>)
 80048d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80048d4:	f000 fab2 	bl	8004e3c <__assert_func>
 80048d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048dc:	6004      	str	r4, [r0, #0]
 80048de:	60c4      	str	r4, [r0, #12]
 80048e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048e8:	b94c      	cbnz	r4, 80048fe <__pow5mult+0x66>
 80048ea:	f240 2171 	movw	r1, #625	; 0x271
 80048ee:	4630      	mov	r0, r6
 80048f0:	f7ff ff12 	bl	8004718 <__i2b>
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80048fa:	4604      	mov	r4, r0
 80048fc:	6003      	str	r3, [r0, #0]
 80048fe:	f04f 0900 	mov.w	r9, #0
 8004902:	07eb      	lsls	r3, r5, #31
 8004904:	d50a      	bpl.n	800491c <__pow5mult+0x84>
 8004906:	4639      	mov	r1, r7
 8004908:	4622      	mov	r2, r4
 800490a:	4630      	mov	r0, r6
 800490c:	f7ff ff1a 	bl	8004744 <__multiply>
 8004910:	4639      	mov	r1, r7
 8004912:	4680      	mov	r8, r0
 8004914:	4630      	mov	r0, r6
 8004916:	f7ff fe47 	bl	80045a8 <_Bfree>
 800491a:	4647      	mov	r7, r8
 800491c:	106d      	asrs	r5, r5, #1
 800491e:	d00b      	beq.n	8004938 <__pow5mult+0xa0>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	b938      	cbnz	r0, 8004934 <__pow5mult+0x9c>
 8004924:	4622      	mov	r2, r4
 8004926:	4621      	mov	r1, r4
 8004928:	4630      	mov	r0, r6
 800492a:	f7ff ff0b 	bl	8004744 <__multiply>
 800492e:	6020      	str	r0, [r4, #0]
 8004930:	f8c0 9000 	str.w	r9, [r0]
 8004934:	4604      	mov	r4, r0
 8004936:	e7e4      	b.n	8004902 <__pow5mult+0x6a>
 8004938:	4638      	mov	r0, r7
 800493a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493e:	bf00      	nop
 8004940:	08006a78 	.word	0x08006a78
 8004944:	080068a5 	.word	0x080068a5
 8004948:	08006928 	.word	0x08006928

0800494c <__lshift>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	460c      	mov	r4, r1
 8004952:	6849      	ldr	r1, [r1, #4]
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800495a:	68a3      	ldr	r3, [r4, #8]
 800495c:	4607      	mov	r7, r0
 800495e:	4691      	mov	r9, r2
 8004960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004964:	f108 0601 	add.w	r6, r8, #1
 8004968:	42b3      	cmp	r3, r6
 800496a:	db0b      	blt.n	8004984 <__lshift+0x38>
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff fddb 	bl	8004528 <_Balloc>
 8004972:	4605      	mov	r5, r0
 8004974:	b948      	cbnz	r0, 800498a <__lshift+0x3e>
 8004976:	4602      	mov	r2, r0
 8004978:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <__lshift+0xd8>)
 800497a:	482b      	ldr	r0, [pc, #172]	; (8004a28 <__lshift+0xdc>)
 800497c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004980:	f000 fa5c 	bl	8004e3c <__assert_func>
 8004984:	3101      	adds	r1, #1
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	e7ee      	b.n	8004968 <__lshift+0x1c>
 800498a:	2300      	movs	r3, #0
 800498c:	f100 0114 	add.w	r1, r0, #20
 8004990:	f100 0210 	add.w	r2, r0, #16
 8004994:	4618      	mov	r0, r3
 8004996:	4553      	cmp	r3, sl
 8004998:	db37      	blt.n	8004a0a <__lshift+0xbe>
 800499a:	6920      	ldr	r0, [r4, #16]
 800499c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049a0:	f104 0314 	add.w	r3, r4, #20
 80049a4:	f019 091f 	ands.w	r9, r9, #31
 80049a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80049ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80049b0:	d02f      	beq.n	8004a12 <__lshift+0xc6>
 80049b2:	f1c9 0e20 	rsb	lr, r9, #32
 80049b6:	468a      	mov	sl, r1
 80049b8:	f04f 0c00 	mov.w	ip, #0
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	fa02 f209 	lsl.w	r2, r2, r9
 80049c2:	ea42 020c 	orr.w	r2, r2, ip
 80049c6:	f84a 2b04 	str.w	r2, [sl], #4
 80049ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ce:	4298      	cmp	r0, r3
 80049d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80049d4:	d8f2      	bhi.n	80049bc <__lshift+0x70>
 80049d6:	1b03      	subs	r3, r0, r4
 80049d8:	3b15      	subs	r3, #21
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	3304      	adds	r3, #4
 80049e0:	f104 0215 	add.w	r2, r4, #21
 80049e4:	4290      	cmp	r0, r2
 80049e6:	bf38      	it	cc
 80049e8:	2304      	movcc	r3, #4
 80049ea:	f841 c003 	str.w	ip, [r1, r3]
 80049ee:	f1bc 0f00 	cmp.w	ip, #0
 80049f2:	d001      	beq.n	80049f8 <__lshift+0xac>
 80049f4:	f108 0602 	add.w	r6, r8, #2
 80049f8:	3e01      	subs	r6, #1
 80049fa:	4638      	mov	r0, r7
 80049fc:	612e      	str	r6, [r5, #16]
 80049fe:	4621      	mov	r1, r4
 8004a00:	f7ff fdd2 	bl	80045a8 <_Bfree>
 8004a04:	4628      	mov	r0, r5
 8004a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004a0e:	3301      	adds	r3, #1
 8004a10:	e7c1      	b.n	8004996 <__lshift+0x4a>
 8004a12:	3904      	subs	r1, #4
 8004a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a18:	f841 2f04 	str.w	r2, [r1, #4]!
 8004a1c:	4298      	cmp	r0, r3
 8004a1e:	d8f9      	bhi.n	8004a14 <__lshift+0xc8>
 8004a20:	e7ea      	b.n	80049f8 <__lshift+0xac>
 8004a22:	bf00      	nop
 8004a24:	08006917 	.word	0x08006917
 8004a28:	08006928 	.word	0x08006928

08004a2c <__mcmp>:
 8004a2c:	b530      	push	{r4, r5, lr}
 8004a2e:	6902      	ldr	r2, [r0, #16]
 8004a30:	690c      	ldr	r4, [r1, #16]
 8004a32:	1b12      	subs	r2, r2, r4
 8004a34:	d10e      	bne.n	8004a54 <__mcmp+0x28>
 8004a36:	f100 0314 	add.w	r3, r0, #20
 8004a3a:	3114      	adds	r1, #20
 8004a3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004a40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004a44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004a48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004a4c:	42a5      	cmp	r5, r4
 8004a4e:	d003      	beq.n	8004a58 <__mcmp+0x2c>
 8004a50:	d305      	bcc.n	8004a5e <__mcmp+0x32>
 8004a52:	2201      	movs	r2, #1
 8004a54:	4610      	mov	r0, r2
 8004a56:	bd30      	pop	{r4, r5, pc}
 8004a58:	4283      	cmp	r3, r0
 8004a5a:	d3f3      	bcc.n	8004a44 <__mcmp+0x18>
 8004a5c:	e7fa      	b.n	8004a54 <__mcmp+0x28>
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a62:	e7f7      	b.n	8004a54 <__mcmp+0x28>

08004a64 <__mdiff>:
 8004a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	460c      	mov	r4, r1
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4690      	mov	r8, r2
 8004a72:	f7ff ffdb 	bl	8004a2c <__mcmp>
 8004a76:	1e05      	subs	r5, r0, #0
 8004a78:	d110      	bne.n	8004a9c <__mdiff+0x38>
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f7ff fd53 	bl	8004528 <_Balloc>
 8004a82:	b930      	cbnz	r0, 8004a92 <__mdiff+0x2e>
 8004a84:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <__mdiff+0x10c>)
 8004a86:	4602      	mov	r2, r0
 8004a88:	f240 2132 	movw	r1, #562	; 0x232
 8004a8c:	4839      	ldr	r0, [pc, #228]	; (8004b74 <__mdiff+0x110>)
 8004a8e:	f000 f9d5 	bl	8004e3c <__assert_func>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9c:	bfa4      	itt	ge
 8004a9e:	4643      	movge	r3, r8
 8004aa0:	46a0      	movge	r8, r4
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004aa8:	bfa6      	itte	ge
 8004aaa:	461c      	movge	r4, r3
 8004aac:	2500      	movge	r5, #0
 8004aae:	2501      	movlt	r5, #1
 8004ab0:	f7ff fd3a 	bl	8004528 <_Balloc>
 8004ab4:	b920      	cbnz	r0, 8004ac0 <__mdiff+0x5c>
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <__mdiff+0x10c>)
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004abe:	e7e5      	b.n	8004a8c <__mdiff+0x28>
 8004ac0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004ac4:	6926      	ldr	r6, [r4, #16]
 8004ac6:	60c5      	str	r5, [r0, #12]
 8004ac8:	f104 0914 	add.w	r9, r4, #20
 8004acc:	f108 0514 	add.w	r5, r8, #20
 8004ad0:	f100 0e14 	add.w	lr, r0, #20
 8004ad4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004ad8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004adc:	f108 0210 	add.w	r2, r8, #16
 8004ae0:	46f2      	mov	sl, lr
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ae8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004aec:	fa1f f883 	uxth.w	r8, r3
 8004af0:	fa11 f18b 	uxtah	r1, r1, fp
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	eba1 0808 	sub.w	r8, r1, r8
 8004afa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004afe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004b02:	fa1f f888 	uxth.w	r8, r8
 8004b06:	1419      	asrs	r1, r3, #16
 8004b08:	454e      	cmp	r6, r9
 8004b0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004b0e:	f84a 3b04 	str.w	r3, [sl], #4
 8004b12:	d8e7      	bhi.n	8004ae4 <__mdiff+0x80>
 8004b14:	1b33      	subs	r3, r6, r4
 8004b16:	3b15      	subs	r3, #21
 8004b18:	f023 0303 	bic.w	r3, r3, #3
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	3415      	adds	r4, #21
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	bf38      	it	cc
 8004b24:	2304      	movcc	r3, #4
 8004b26:	441d      	add	r5, r3
 8004b28:	4473      	add	r3, lr
 8004b2a:	469e      	mov	lr, r3
 8004b2c:	462e      	mov	r6, r5
 8004b2e:	4566      	cmp	r6, ip
 8004b30:	d30e      	bcc.n	8004b50 <__mdiff+0xec>
 8004b32:	f10c 0203 	add.w	r2, ip, #3
 8004b36:	1b52      	subs	r2, r2, r5
 8004b38:	f022 0203 	bic.w	r2, r2, #3
 8004b3c:	3d03      	subs	r5, #3
 8004b3e:	45ac      	cmp	ip, r5
 8004b40:	bf38      	it	cc
 8004b42:	2200      	movcc	r2, #0
 8004b44:	441a      	add	r2, r3
 8004b46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004b4a:	b17b      	cbz	r3, 8004b6c <__mdiff+0x108>
 8004b4c:	6107      	str	r7, [r0, #16]
 8004b4e:	e7a3      	b.n	8004a98 <__mdiff+0x34>
 8004b50:	f856 8b04 	ldr.w	r8, [r6], #4
 8004b54:	fa11 f288 	uxtah	r2, r1, r8
 8004b58:	1414      	asrs	r4, r2, #16
 8004b5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004b5e:	b292      	uxth	r2, r2
 8004b60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004b64:	f84e 2b04 	str.w	r2, [lr], #4
 8004b68:	1421      	asrs	r1, r4, #16
 8004b6a:	e7e0      	b.n	8004b2e <__mdiff+0xca>
 8004b6c:	3f01      	subs	r7, #1
 8004b6e:	e7ea      	b.n	8004b46 <__mdiff+0xe2>
 8004b70:	08006917 	.word	0x08006917
 8004b74:	08006928 	.word	0x08006928

08004b78 <__d2b>:
 8004b78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b7c:	4689      	mov	r9, r1
 8004b7e:	2101      	movs	r1, #1
 8004b80:	ec57 6b10 	vmov	r6, r7, d0
 8004b84:	4690      	mov	r8, r2
 8004b86:	f7ff fccf 	bl	8004528 <_Balloc>
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	b930      	cbnz	r0, 8004b9c <__d2b+0x24>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <__d2b+0xb0>)
 8004b92:	4826      	ldr	r0, [pc, #152]	; (8004c2c <__d2b+0xb4>)
 8004b94:	f240 310a 	movw	r1, #778	; 0x30a
 8004b98:	f000 f950 	bl	8004e3c <__assert_func>
 8004b9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004ba0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ba4:	bb35      	cbnz	r5, 8004bf4 <__d2b+0x7c>
 8004ba6:	2e00      	cmp	r6, #0
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	d028      	beq.n	8004bfe <__d2b+0x86>
 8004bac:	4668      	mov	r0, sp
 8004bae:	9600      	str	r6, [sp, #0]
 8004bb0:	f7ff fd82 	bl	80046b8 <__lo0bits>
 8004bb4:	9900      	ldr	r1, [sp, #0]
 8004bb6:	b300      	cbz	r0, 8004bfa <__d2b+0x82>
 8004bb8:	9a01      	ldr	r2, [sp, #4]
 8004bba:	f1c0 0320 	rsb	r3, r0, #32
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	40c2      	lsrs	r2, r0
 8004bc6:	6163      	str	r3, [r4, #20]
 8004bc8:	9201      	str	r2, [sp, #4]
 8004bca:	9b01      	ldr	r3, [sp, #4]
 8004bcc:	61a3      	str	r3, [r4, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2202      	movne	r2, #2
 8004bd4:	2201      	moveq	r2, #1
 8004bd6:	6122      	str	r2, [r4, #16]
 8004bd8:	b1d5      	cbz	r5, 8004c10 <__d2b+0x98>
 8004bda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004bde:	4405      	add	r5, r0
 8004be0:	f8c9 5000 	str.w	r5, [r9]
 8004be4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004be8:	f8c8 0000 	str.w	r0, [r8]
 8004bec:	4620      	mov	r0, r4
 8004bee:	b003      	add	sp, #12
 8004bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf8:	e7d5      	b.n	8004ba6 <__d2b+0x2e>
 8004bfa:	6161      	str	r1, [r4, #20]
 8004bfc:	e7e5      	b.n	8004bca <__d2b+0x52>
 8004bfe:	a801      	add	r0, sp, #4
 8004c00:	f7ff fd5a 	bl	80046b8 <__lo0bits>
 8004c04:	9b01      	ldr	r3, [sp, #4]
 8004c06:	6163      	str	r3, [r4, #20]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	6122      	str	r2, [r4, #16]
 8004c0c:	3020      	adds	r0, #32
 8004c0e:	e7e3      	b.n	8004bd8 <__d2b+0x60>
 8004c10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004c14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004c18:	f8c9 0000 	str.w	r0, [r9]
 8004c1c:	6918      	ldr	r0, [r3, #16]
 8004c1e:	f7ff fd2b 	bl	8004678 <__hi0bits>
 8004c22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004c26:	e7df      	b.n	8004be8 <__d2b+0x70>
 8004c28:	08006917 	.word	0x08006917
 8004c2c:	08006928 	.word	0x08006928

08004c30 <_calloc_r>:
 8004c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c32:	fba1 2402 	umull	r2, r4, r1, r2
 8004c36:	b94c      	cbnz	r4, 8004c4c <_calloc_r+0x1c>
 8004c38:	4611      	mov	r1, r2
 8004c3a:	9201      	str	r2, [sp, #4]
 8004c3c:	f000 f87a 	bl	8004d34 <_malloc_r>
 8004c40:	9a01      	ldr	r2, [sp, #4]
 8004c42:	4605      	mov	r5, r0
 8004c44:	b930      	cbnz	r0, 8004c54 <_calloc_r+0x24>
 8004c46:	4628      	mov	r0, r5
 8004c48:	b003      	add	sp, #12
 8004c4a:	bd30      	pop	{r4, r5, pc}
 8004c4c:	220c      	movs	r2, #12
 8004c4e:	6002      	str	r2, [r0, #0]
 8004c50:	2500      	movs	r5, #0
 8004c52:	e7f8      	b.n	8004c46 <_calloc_r+0x16>
 8004c54:	4621      	mov	r1, r4
 8004c56:	f7fe f95f 	bl	8002f18 <memset>
 8004c5a:	e7f4      	b.n	8004c46 <_calloc_r+0x16>

08004c5c <_free_r>:
 8004c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c5e:	2900      	cmp	r1, #0
 8004c60:	d044      	beq.n	8004cec <_free_r+0x90>
 8004c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c66:	9001      	str	r0, [sp, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c6e:	bfb8      	it	lt
 8004c70:	18e4      	addlt	r4, r4, r3
 8004c72:	f000 f925 	bl	8004ec0 <__malloc_lock>
 8004c76:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <_free_r+0x94>)
 8004c78:	9801      	ldr	r0, [sp, #4]
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	b933      	cbnz	r3, 8004c8c <_free_r+0x30>
 8004c7e:	6063      	str	r3, [r4, #4]
 8004c80:	6014      	str	r4, [r2, #0]
 8004c82:	b003      	add	sp, #12
 8004c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c88:	f000 b920 	b.w	8004ecc <__malloc_unlock>
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	d908      	bls.n	8004ca2 <_free_r+0x46>
 8004c90:	6825      	ldr	r5, [r4, #0]
 8004c92:	1961      	adds	r1, r4, r5
 8004c94:	428b      	cmp	r3, r1
 8004c96:	bf01      	itttt	eq
 8004c98:	6819      	ldreq	r1, [r3, #0]
 8004c9a:	685b      	ldreq	r3, [r3, #4]
 8004c9c:	1949      	addeq	r1, r1, r5
 8004c9e:	6021      	streq	r1, [r4, #0]
 8004ca0:	e7ed      	b.n	8004c7e <_free_r+0x22>
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	b10b      	cbz	r3, 8004cac <_free_r+0x50>
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	d9fa      	bls.n	8004ca2 <_free_r+0x46>
 8004cac:	6811      	ldr	r1, [r2, #0]
 8004cae:	1855      	adds	r5, r2, r1
 8004cb0:	42a5      	cmp	r5, r4
 8004cb2:	d10b      	bne.n	8004ccc <_free_r+0x70>
 8004cb4:	6824      	ldr	r4, [r4, #0]
 8004cb6:	4421      	add	r1, r4
 8004cb8:	1854      	adds	r4, r2, r1
 8004cba:	42a3      	cmp	r3, r4
 8004cbc:	6011      	str	r1, [r2, #0]
 8004cbe:	d1e0      	bne.n	8004c82 <_free_r+0x26>
 8004cc0:	681c      	ldr	r4, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	6053      	str	r3, [r2, #4]
 8004cc6:	4421      	add	r1, r4
 8004cc8:	6011      	str	r1, [r2, #0]
 8004cca:	e7da      	b.n	8004c82 <_free_r+0x26>
 8004ccc:	d902      	bls.n	8004cd4 <_free_r+0x78>
 8004cce:	230c      	movs	r3, #12
 8004cd0:	6003      	str	r3, [r0, #0]
 8004cd2:	e7d6      	b.n	8004c82 <_free_r+0x26>
 8004cd4:	6825      	ldr	r5, [r4, #0]
 8004cd6:	1961      	adds	r1, r4, r5
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	bf04      	itt	eq
 8004cdc:	6819      	ldreq	r1, [r3, #0]
 8004cde:	685b      	ldreq	r3, [r3, #4]
 8004ce0:	6063      	str	r3, [r4, #4]
 8004ce2:	bf04      	itt	eq
 8004ce4:	1949      	addeq	r1, r1, r5
 8004ce6:	6021      	streq	r1, [r4, #0]
 8004ce8:	6054      	str	r4, [r2, #4]
 8004cea:	e7ca      	b.n	8004c82 <_free_r+0x26>
 8004cec:	b003      	add	sp, #12
 8004cee:	bd30      	pop	{r4, r5, pc}
 8004cf0:	200002fc 	.word	0x200002fc

08004cf4 <sbrk_aligned>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	4e0e      	ldr	r6, [pc, #56]	; (8004d30 <sbrk_aligned+0x3c>)
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	6831      	ldr	r1, [r6, #0]
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	b911      	cbnz	r1, 8004d06 <sbrk_aligned+0x12>
 8004d00:	f000 f88c 	bl	8004e1c <_sbrk_r>
 8004d04:	6030      	str	r0, [r6, #0]
 8004d06:	4621      	mov	r1, r4
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f000 f887 	bl	8004e1c <_sbrk_r>
 8004d0e:	1c43      	adds	r3, r0, #1
 8004d10:	d00a      	beq.n	8004d28 <sbrk_aligned+0x34>
 8004d12:	1cc4      	adds	r4, r0, #3
 8004d14:	f024 0403 	bic.w	r4, r4, #3
 8004d18:	42a0      	cmp	r0, r4
 8004d1a:	d007      	beq.n	8004d2c <sbrk_aligned+0x38>
 8004d1c:	1a21      	subs	r1, r4, r0
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f87c 	bl	8004e1c <_sbrk_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d101      	bne.n	8004d2c <sbrk_aligned+0x38>
 8004d28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	20000300 	.word	0x20000300

08004d34 <_malloc_r>:
 8004d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d38:	1ccd      	adds	r5, r1, #3
 8004d3a:	f025 0503 	bic.w	r5, r5, #3
 8004d3e:	3508      	adds	r5, #8
 8004d40:	2d0c      	cmp	r5, #12
 8004d42:	bf38      	it	cc
 8004d44:	250c      	movcc	r5, #12
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	4607      	mov	r7, r0
 8004d4a:	db01      	blt.n	8004d50 <_malloc_r+0x1c>
 8004d4c:	42a9      	cmp	r1, r5
 8004d4e:	d905      	bls.n	8004d5c <_malloc_r+0x28>
 8004d50:	230c      	movs	r3, #12
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	2600      	movs	r6, #0
 8004d56:	4630      	mov	r0, r6
 8004d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d5c:	4e2e      	ldr	r6, [pc, #184]	; (8004e18 <_malloc_r+0xe4>)
 8004d5e:	f000 f8af 	bl	8004ec0 <__malloc_lock>
 8004d62:	6833      	ldr	r3, [r6, #0]
 8004d64:	461c      	mov	r4, r3
 8004d66:	bb34      	cbnz	r4, 8004db6 <_malloc_r+0x82>
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f7ff ffc2 	bl	8004cf4 <sbrk_aligned>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	4604      	mov	r4, r0
 8004d74:	d14d      	bne.n	8004e12 <_malloc_r+0xde>
 8004d76:	6834      	ldr	r4, [r6, #0]
 8004d78:	4626      	mov	r6, r4
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d140      	bne.n	8004e00 <_malloc_r+0xcc>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	4631      	mov	r1, r6
 8004d82:	4638      	mov	r0, r7
 8004d84:	eb04 0803 	add.w	r8, r4, r3
 8004d88:	f000 f848 	bl	8004e1c <_sbrk_r>
 8004d8c:	4580      	cmp	r8, r0
 8004d8e:	d13a      	bne.n	8004e06 <_malloc_r+0xd2>
 8004d90:	6821      	ldr	r1, [r4, #0]
 8004d92:	3503      	adds	r5, #3
 8004d94:	1a6d      	subs	r5, r5, r1
 8004d96:	f025 0503 	bic.w	r5, r5, #3
 8004d9a:	3508      	adds	r5, #8
 8004d9c:	2d0c      	cmp	r5, #12
 8004d9e:	bf38      	it	cc
 8004da0:	250c      	movcc	r5, #12
 8004da2:	4629      	mov	r1, r5
 8004da4:	4638      	mov	r0, r7
 8004da6:	f7ff ffa5 	bl	8004cf4 <sbrk_aligned>
 8004daa:	3001      	adds	r0, #1
 8004dac:	d02b      	beq.n	8004e06 <_malloc_r+0xd2>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	442b      	add	r3, r5
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	e00e      	b.n	8004dd4 <_malloc_r+0xa0>
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	1b52      	subs	r2, r2, r5
 8004dba:	d41e      	bmi.n	8004dfa <_malloc_r+0xc6>
 8004dbc:	2a0b      	cmp	r2, #11
 8004dbe:	d916      	bls.n	8004dee <_malloc_r+0xba>
 8004dc0:	1961      	adds	r1, r4, r5
 8004dc2:	42a3      	cmp	r3, r4
 8004dc4:	6025      	str	r5, [r4, #0]
 8004dc6:	bf18      	it	ne
 8004dc8:	6059      	strne	r1, [r3, #4]
 8004dca:	6863      	ldr	r3, [r4, #4]
 8004dcc:	bf08      	it	eq
 8004dce:	6031      	streq	r1, [r6, #0]
 8004dd0:	5162      	str	r2, [r4, r5]
 8004dd2:	604b      	str	r3, [r1, #4]
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f104 060b 	add.w	r6, r4, #11
 8004dda:	f000 f877 	bl	8004ecc <__malloc_unlock>
 8004dde:	f026 0607 	bic.w	r6, r6, #7
 8004de2:	1d23      	adds	r3, r4, #4
 8004de4:	1af2      	subs	r2, r6, r3
 8004de6:	d0b6      	beq.n	8004d56 <_malloc_r+0x22>
 8004de8:	1b9b      	subs	r3, r3, r6
 8004dea:	50a3      	str	r3, [r4, r2]
 8004dec:	e7b3      	b.n	8004d56 <_malloc_r+0x22>
 8004dee:	6862      	ldr	r2, [r4, #4]
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	bf0c      	ite	eq
 8004df4:	6032      	streq	r2, [r6, #0]
 8004df6:	605a      	strne	r2, [r3, #4]
 8004df8:	e7ec      	b.n	8004dd4 <_malloc_r+0xa0>
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	6864      	ldr	r4, [r4, #4]
 8004dfe:	e7b2      	b.n	8004d66 <_malloc_r+0x32>
 8004e00:	4634      	mov	r4, r6
 8004e02:	6876      	ldr	r6, [r6, #4]
 8004e04:	e7b9      	b.n	8004d7a <_malloc_r+0x46>
 8004e06:	230c      	movs	r3, #12
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f000 f85e 	bl	8004ecc <__malloc_unlock>
 8004e10:	e7a1      	b.n	8004d56 <_malloc_r+0x22>
 8004e12:	6025      	str	r5, [r4, #0]
 8004e14:	e7de      	b.n	8004dd4 <_malloc_r+0xa0>
 8004e16:	bf00      	nop
 8004e18:	200002fc 	.word	0x200002fc

08004e1c <_sbrk_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d06      	ldr	r5, [pc, #24]	; (8004e38 <_sbrk_r+0x1c>)
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	f001 fcf8 	bl	800681c <_sbrk>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_sbrk_r+0x1a>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_sbrk_r+0x1a>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20000304 	.word	0x20000304

08004e3c <__assert_func>:
 8004e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e3e:	4614      	mov	r4, r2
 8004e40:	461a      	mov	r2, r3
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <__assert_func+0x2c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4605      	mov	r5, r0
 8004e48:	68d8      	ldr	r0, [r3, #12]
 8004e4a:	b14c      	cbz	r4, 8004e60 <__assert_func+0x24>
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <__assert_func+0x30>)
 8004e4e:	9100      	str	r1, [sp, #0]
 8004e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e54:	4906      	ldr	r1, [pc, #24]	; (8004e70 <__assert_func+0x34>)
 8004e56:	462b      	mov	r3, r5
 8004e58:	f000 f80e 	bl	8004e78 <fiprintf>
 8004e5c:	f000 fa64 	bl	8005328 <abort>
 8004e60:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <__assert_func+0x38>)
 8004e62:	461c      	mov	r4, r3
 8004e64:	e7f3      	b.n	8004e4e <__assert_func+0x12>
 8004e66:	bf00      	nop
 8004e68:	20000008 	.word	0x20000008
 8004e6c:	08006a84 	.word	0x08006a84
 8004e70:	08006a91 	.word	0x08006a91
 8004e74:	08006abf 	.word	0x08006abf

08004e78 <fiprintf>:
 8004e78:	b40e      	push	{r1, r2, r3}
 8004e7a:	b503      	push	{r0, r1, lr}
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	ab03      	add	r3, sp, #12
 8004e80:	4805      	ldr	r0, [pc, #20]	; (8004e98 <fiprintf+0x20>)
 8004e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e86:	6800      	ldr	r0, [r0, #0]
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	f000 f84f 	bl	8004f2c <_vfiprintf_r>
 8004e8e:	b002      	add	sp, #8
 8004e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e94:	b003      	add	sp, #12
 8004e96:	4770      	bx	lr
 8004e98:	20000008 	.word	0x20000008

08004e9c <__ascii_mbtowc>:
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	b901      	cbnz	r1, 8004ea2 <__ascii_mbtowc+0x6>
 8004ea0:	a901      	add	r1, sp, #4
 8004ea2:	b142      	cbz	r2, 8004eb6 <__ascii_mbtowc+0x1a>
 8004ea4:	b14b      	cbz	r3, 8004eba <__ascii_mbtowc+0x1e>
 8004ea6:	7813      	ldrb	r3, [r2, #0]
 8004ea8:	600b      	str	r3, [r1, #0]
 8004eaa:	7812      	ldrb	r2, [r2, #0]
 8004eac:	1e10      	subs	r0, r2, #0
 8004eae:	bf18      	it	ne
 8004eb0:	2001      	movne	r0, #1
 8004eb2:	b002      	add	sp, #8
 8004eb4:	4770      	bx	lr
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	e7fb      	b.n	8004eb2 <__ascii_mbtowc+0x16>
 8004eba:	f06f 0001 	mvn.w	r0, #1
 8004ebe:	e7f8      	b.n	8004eb2 <__ascii_mbtowc+0x16>

08004ec0 <__malloc_lock>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__malloc_lock+0x8>)
 8004ec2:	f000 bbf1 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	20000308 	.word	0x20000308

08004ecc <__malloc_unlock>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__malloc_unlock+0x8>)
 8004ece:	f000 bbec 	b.w	80056aa <__retarget_lock_release_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20000308 	.word	0x20000308

08004ed8 <__sfputc_r>:
 8004ed8:	6893      	ldr	r3, [r2, #8]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	b410      	push	{r4}
 8004ee0:	6093      	str	r3, [r2, #8]
 8004ee2:	da08      	bge.n	8004ef6 <__sfputc_r+0x1e>
 8004ee4:	6994      	ldr	r4, [r2, #24]
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	db01      	blt.n	8004eee <__sfputc_r+0x16>
 8004eea:	290a      	cmp	r1, #10
 8004eec:	d103      	bne.n	8004ef6 <__sfputc_r+0x1e>
 8004eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef2:	f000 b94b 	b.w	800518c <__swbuf_r>
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	1c58      	adds	r0, r3, #1
 8004efa:	6010      	str	r0, [r2, #0]
 8004efc:	7019      	strb	r1, [r3, #0]
 8004efe:	4608      	mov	r0, r1
 8004f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <__sfputs_r>:
 8004f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f08:	4606      	mov	r6, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	18d5      	adds	r5, r2, r3
 8004f10:	42ac      	cmp	r4, r5
 8004f12:	d101      	bne.n	8004f18 <__sfputs_r+0x12>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e007      	b.n	8004f28 <__sfputs_r+0x22>
 8004f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff ffda 	bl	8004ed8 <__sfputc_r>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d1f3      	bne.n	8004f10 <__sfputs_r+0xa>
 8004f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f2c <_vfiprintf_r>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	460d      	mov	r5, r1
 8004f32:	b09d      	sub	sp, #116	; 0x74
 8004f34:	4614      	mov	r4, r2
 8004f36:	4698      	mov	r8, r3
 8004f38:	4606      	mov	r6, r0
 8004f3a:	b118      	cbz	r0, 8004f44 <_vfiprintf_r+0x18>
 8004f3c:	6983      	ldr	r3, [r0, #24]
 8004f3e:	b90b      	cbnz	r3, 8004f44 <_vfiprintf_r+0x18>
 8004f40:	f000 fb14 	bl	800556c <__sinit>
 8004f44:	4b89      	ldr	r3, [pc, #548]	; (800516c <_vfiprintf_r+0x240>)
 8004f46:	429d      	cmp	r5, r3
 8004f48:	d11b      	bne.n	8004f82 <_vfiprintf_r+0x56>
 8004f4a:	6875      	ldr	r5, [r6, #4]
 8004f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f4e:	07d9      	lsls	r1, r3, #31
 8004f50:	d405      	bmi.n	8004f5e <_vfiprintf_r+0x32>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	059a      	lsls	r2, r3, #22
 8004f56:	d402      	bmi.n	8004f5e <_vfiprintf_r+0x32>
 8004f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f5a:	f000 fba5 	bl	80056a8 <__retarget_lock_acquire_recursive>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	d501      	bpl.n	8004f68 <_vfiprintf_r+0x3c>
 8004f64:	692b      	ldr	r3, [r5, #16]
 8004f66:	b9eb      	cbnz	r3, 8004fa4 <_vfiprintf_r+0x78>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f000 f96e 	bl	800524c <__swsetup_r>
 8004f70:	b1c0      	cbz	r0, 8004fa4 <_vfiprintf_r+0x78>
 8004f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f74:	07dc      	lsls	r4, r3, #31
 8004f76:	d50e      	bpl.n	8004f96 <_vfiprintf_r+0x6a>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7c:	b01d      	add	sp, #116	; 0x74
 8004f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f82:	4b7b      	ldr	r3, [pc, #492]	; (8005170 <_vfiprintf_r+0x244>)
 8004f84:	429d      	cmp	r5, r3
 8004f86:	d101      	bne.n	8004f8c <_vfiprintf_r+0x60>
 8004f88:	68b5      	ldr	r5, [r6, #8]
 8004f8a:	e7df      	b.n	8004f4c <_vfiprintf_r+0x20>
 8004f8c:	4b79      	ldr	r3, [pc, #484]	; (8005174 <_vfiprintf_r+0x248>)
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	bf08      	it	eq
 8004f92:	68f5      	ldreq	r5, [r6, #12]
 8004f94:	e7da      	b.n	8004f4c <_vfiprintf_r+0x20>
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	0598      	lsls	r0, r3, #22
 8004f9a:	d4ed      	bmi.n	8004f78 <_vfiprintf_r+0x4c>
 8004f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f9e:	f000 fb84 	bl	80056aa <__retarget_lock_release_recursive>
 8004fa2:	e7e9      	b.n	8004f78 <_vfiprintf_r+0x4c>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa8:	2320      	movs	r3, #32
 8004faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb2:	2330      	movs	r3, #48	; 0x30
 8004fb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005178 <_vfiprintf_r+0x24c>
 8004fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fbc:	f04f 0901 	mov.w	r9, #1
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	469a      	mov	sl, r3
 8004fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fc8:	b10a      	cbz	r2, 8004fce <_vfiprintf_r+0xa2>
 8004fca:	2a25      	cmp	r2, #37	; 0x25
 8004fcc:	d1f9      	bne.n	8004fc2 <_vfiprintf_r+0x96>
 8004fce:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd2:	d00b      	beq.n	8004fec <_vfiprintf_r+0xc0>
 8004fd4:	465b      	mov	r3, fp
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f7ff ff93 	bl	8004f06 <__sfputs_r>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f000 80aa 	beq.w	800513a <_vfiprintf_r+0x20e>
 8004fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fe8:	445a      	add	r2, fp
 8004fea:	9209      	str	r2, [sp, #36]	; 0x24
 8004fec:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a2 	beq.w	800513a <_vfiprintf_r+0x20e>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005000:	f10a 0a01 	add.w	sl, sl, #1
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	9307      	str	r3, [sp, #28]
 8005008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800500c:	931a      	str	r3, [sp, #104]	; 0x68
 800500e:	4654      	mov	r4, sl
 8005010:	2205      	movs	r2, #5
 8005012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005016:	4858      	ldr	r0, [pc, #352]	; (8005178 <_vfiprintf_r+0x24c>)
 8005018:	f7fb f8ea 	bl	80001f0 <memchr>
 800501c:	9a04      	ldr	r2, [sp, #16]
 800501e:	b9d8      	cbnz	r0, 8005058 <_vfiprintf_r+0x12c>
 8005020:	06d1      	lsls	r1, r2, #27
 8005022:	bf44      	itt	mi
 8005024:	2320      	movmi	r3, #32
 8005026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800502a:	0713      	lsls	r3, r2, #28
 800502c:	bf44      	itt	mi
 800502e:	232b      	movmi	r3, #43	; 0x2b
 8005030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005034:	f89a 3000 	ldrb.w	r3, [sl]
 8005038:	2b2a      	cmp	r3, #42	; 0x2a
 800503a:	d015      	beq.n	8005068 <_vfiprintf_r+0x13c>
 800503c:	9a07      	ldr	r2, [sp, #28]
 800503e:	4654      	mov	r4, sl
 8005040:	2000      	movs	r0, #0
 8005042:	f04f 0c0a 	mov.w	ip, #10
 8005046:	4621      	mov	r1, r4
 8005048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800504c:	3b30      	subs	r3, #48	; 0x30
 800504e:	2b09      	cmp	r3, #9
 8005050:	d94e      	bls.n	80050f0 <_vfiprintf_r+0x1c4>
 8005052:	b1b0      	cbz	r0, 8005082 <_vfiprintf_r+0x156>
 8005054:	9207      	str	r2, [sp, #28]
 8005056:	e014      	b.n	8005082 <_vfiprintf_r+0x156>
 8005058:	eba0 0308 	sub.w	r3, r0, r8
 800505c:	fa09 f303 	lsl.w	r3, r9, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	9304      	str	r3, [sp, #16]
 8005064:	46a2      	mov	sl, r4
 8005066:	e7d2      	b.n	800500e <_vfiprintf_r+0xe2>
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	1d19      	adds	r1, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	9103      	str	r1, [sp, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfbb      	ittet	lt
 8005074:	425b      	neglt	r3, r3
 8005076:	f042 0202 	orrlt.w	r2, r2, #2
 800507a:	9307      	strge	r3, [sp, #28]
 800507c:	9307      	strlt	r3, [sp, #28]
 800507e:	bfb8      	it	lt
 8005080:	9204      	strlt	r2, [sp, #16]
 8005082:	7823      	ldrb	r3, [r4, #0]
 8005084:	2b2e      	cmp	r3, #46	; 0x2e
 8005086:	d10c      	bne.n	80050a2 <_vfiprintf_r+0x176>
 8005088:	7863      	ldrb	r3, [r4, #1]
 800508a:	2b2a      	cmp	r3, #42	; 0x2a
 800508c:	d135      	bne.n	80050fa <_vfiprintf_r+0x1ce>
 800508e:	9b03      	ldr	r3, [sp, #12]
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	9203      	str	r2, [sp, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfb8      	it	lt
 800509a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800509e:	3402      	adds	r4, #2
 80050a0:	9305      	str	r3, [sp, #20]
 80050a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005188 <_vfiprintf_r+0x25c>
 80050a6:	7821      	ldrb	r1, [r4, #0]
 80050a8:	2203      	movs	r2, #3
 80050aa:	4650      	mov	r0, sl
 80050ac:	f7fb f8a0 	bl	80001f0 <memchr>
 80050b0:	b140      	cbz	r0, 80050c4 <_vfiprintf_r+0x198>
 80050b2:	2340      	movs	r3, #64	; 0x40
 80050b4:	eba0 000a 	sub.w	r0, r0, sl
 80050b8:	fa03 f000 	lsl.w	r0, r3, r0
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	4303      	orrs	r3, r0
 80050c0:	3401      	adds	r4, #1
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c8:	482c      	ldr	r0, [pc, #176]	; (800517c <_vfiprintf_r+0x250>)
 80050ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050ce:	2206      	movs	r2, #6
 80050d0:	f7fb f88e 	bl	80001f0 <memchr>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d03f      	beq.n	8005158 <_vfiprintf_r+0x22c>
 80050d8:	4b29      	ldr	r3, [pc, #164]	; (8005180 <_vfiprintf_r+0x254>)
 80050da:	bb1b      	cbnz	r3, 8005124 <_vfiprintf_r+0x1f8>
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	3307      	adds	r3, #7
 80050e0:	f023 0307 	bic.w	r3, r3, #7
 80050e4:	3308      	adds	r3, #8
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ea:	443b      	add	r3, r7
 80050ec:	9309      	str	r3, [sp, #36]	; 0x24
 80050ee:	e767      	b.n	8004fc0 <_vfiprintf_r+0x94>
 80050f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80050f4:	460c      	mov	r4, r1
 80050f6:	2001      	movs	r0, #1
 80050f8:	e7a5      	b.n	8005046 <_vfiprintf_r+0x11a>
 80050fa:	2300      	movs	r3, #0
 80050fc:	3401      	adds	r4, #1
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	4619      	mov	r1, r3
 8005102:	f04f 0c0a 	mov.w	ip, #10
 8005106:	4620      	mov	r0, r4
 8005108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800510c:	3a30      	subs	r2, #48	; 0x30
 800510e:	2a09      	cmp	r2, #9
 8005110:	d903      	bls.n	800511a <_vfiprintf_r+0x1ee>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0c5      	beq.n	80050a2 <_vfiprintf_r+0x176>
 8005116:	9105      	str	r1, [sp, #20]
 8005118:	e7c3      	b.n	80050a2 <_vfiprintf_r+0x176>
 800511a:	fb0c 2101 	mla	r1, ip, r1, r2
 800511e:	4604      	mov	r4, r0
 8005120:	2301      	movs	r3, #1
 8005122:	e7f0      	b.n	8005106 <_vfiprintf_r+0x1da>
 8005124:	ab03      	add	r3, sp, #12
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	462a      	mov	r2, r5
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <_vfiprintf_r+0x258>)
 800512c:	a904      	add	r1, sp, #16
 800512e:	4630      	mov	r0, r6
 8005130:	f7fd ff9a 	bl	8003068 <_printf_float>
 8005134:	4607      	mov	r7, r0
 8005136:	1c78      	adds	r0, r7, #1
 8005138:	d1d6      	bne.n	80050e8 <_vfiprintf_r+0x1bc>
 800513a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800513c:	07d9      	lsls	r1, r3, #31
 800513e:	d405      	bmi.n	800514c <_vfiprintf_r+0x220>
 8005140:	89ab      	ldrh	r3, [r5, #12]
 8005142:	059a      	lsls	r2, r3, #22
 8005144:	d402      	bmi.n	800514c <_vfiprintf_r+0x220>
 8005146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005148:	f000 faaf 	bl	80056aa <__retarget_lock_release_recursive>
 800514c:	89ab      	ldrh	r3, [r5, #12]
 800514e:	065b      	lsls	r3, r3, #25
 8005150:	f53f af12 	bmi.w	8004f78 <_vfiprintf_r+0x4c>
 8005154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005156:	e711      	b.n	8004f7c <_vfiprintf_r+0x50>
 8005158:	ab03      	add	r3, sp, #12
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	462a      	mov	r2, r5
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <_vfiprintf_r+0x258>)
 8005160:	a904      	add	r1, sp, #16
 8005162:	4630      	mov	r0, r6
 8005164:	f7fe fa24 	bl	80035b0 <_printf_i>
 8005168:	e7e4      	b.n	8005134 <_vfiprintf_r+0x208>
 800516a:	bf00      	nop
 800516c:	08006bfc 	.word	0x08006bfc
 8005170:	08006c1c 	.word	0x08006c1c
 8005174:	08006bdc 	.word	0x08006bdc
 8005178:	08006aca 	.word	0x08006aca
 800517c:	08006ad4 	.word	0x08006ad4
 8005180:	08003069 	.word	0x08003069
 8005184:	08004f07 	.word	0x08004f07
 8005188:	08006ad0 	.word	0x08006ad0

0800518c <__swbuf_r>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	460e      	mov	r6, r1
 8005190:	4614      	mov	r4, r2
 8005192:	4605      	mov	r5, r0
 8005194:	b118      	cbz	r0, 800519e <__swbuf_r+0x12>
 8005196:	6983      	ldr	r3, [r0, #24]
 8005198:	b90b      	cbnz	r3, 800519e <__swbuf_r+0x12>
 800519a:	f000 f9e7 	bl	800556c <__sinit>
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <__swbuf_r+0x98>)
 80051a0:	429c      	cmp	r4, r3
 80051a2:	d12b      	bne.n	80051fc <__swbuf_r+0x70>
 80051a4:	686c      	ldr	r4, [r5, #4]
 80051a6:	69a3      	ldr	r3, [r4, #24]
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	071a      	lsls	r2, r3, #28
 80051ae:	d52f      	bpl.n	8005210 <__swbuf_r+0x84>
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	b36b      	cbz	r3, 8005210 <__swbuf_r+0x84>
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	1ac0      	subs	r0, r0, r3
 80051ba:	6963      	ldr	r3, [r4, #20]
 80051bc:	b2f6      	uxtb	r6, r6
 80051be:	4283      	cmp	r3, r0
 80051c0:	4637      	mov	r7, r6
 80051c2:	dc04      	bgt.n	80051ce <__swbuf_r+0x42>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4628      	mov	r0, r5
 80051c8:	f000 f93c 	bl	8005444 <_fflush_r>
 80051cc:	bb30      	cbnz	r0, 800521c <__swbuf_r+0x90>
 80051ce:	68a3      	ldr	r3, [r4, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	6022      	str	r2, [r4, #0]
 80051da:	701e      	strb	r6, [r3, #0]
 80051dc:	6963      	ldr	r3, [r4, #20]
 80051de:	3001      	adds	r0, #1
 80051e0:	4283      	cmp	r3, r0
 80051e2:	d004      	beq.n	80051ee <__swbuf_r+0x62>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	07db      	lsls	r3, r3, #31
 80051e8:	d506      	bpl.n	80051f8 <__swbuf_r+0x6c>
 80051ea:	2e0a      	cmp	r6, #10
 80051ec:	d104      	bne.n	80051f8 <__swbuf_r+0x6c>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f927 	bl	8005444 <_fflush_r>
 80051f6:	b988      	cbnz	r0, 800521c <__swbuf_r+0x90>
 80051f8:	4638      	mov	r0, r7
 80051fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <__swbuf_r+0x9c>)
 80051fe:	429c      	cmp	r4, r3
 8005200:	d101      	bne.n	8005206 <__swbuf_r+0x7a>
 8005202:	68ac      	ldr	r4, [r5, #8]
 8005204:	e7cf      	b.n	80051a6 <__swbuf_r+0x1a>
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <__swbuf_r+0xa0>)
 8005208:	429c      	cmp	r4, r3
 800520a:	bf08      	it	eq
 800520c:	68ec      	ldreq	r4, [r5, #12]
 800520e:	e7ca      	b.n	80051a6 <__swbuf_r+0x1a>
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f81a 	bl	800524c <__swsetup_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	d0cb      	beq.n	80051b4 <__swbuf_r+0x28>
 800521c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005220:	e7ea      	b.n	80051f8 <__swbuf_r+0x6c>
 8005222:	bf00      	nop
 8005224:	08006bfc 	.word	0x08006bfc
 8005228:	08006c1c 	.word	0x08006c1c
 800522c:	08006bdc 	.word	0x08006bdc

08005230 <__ascii_wctomb>:
 8005230:	b149      	cbz	r1, 8005246 <__ascii_wctomb+0x16>
 8005232:	2aff      	cmp	r2, #255	; 0xff
 8005234:	bf85      	ittet	hi
 8005236:	238a      	movhi	r3, #138	; 0x8a
 8005238:	6003      	strhi	r3, [r0, #0]
 800523a:	700a      	strbls	r2, [r1, #0]
 800523c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005240:	bf98      	it	ls
 8005242:	2001      	movls	r0, #1
 8005244:	4770      	bx	lr
 8005246:	4608      	mov	r0, r1
 8005248:	4770      	bx	lr
	...

0800524c <__swsetup_r>:
 800524c:	4b32      	ldr	r3, [pc, #200]	; (8005318 <__swsetup_r+0xcc>)
 800524e:	b570      	push	{r4, r5, r6, lr}
 8005250:	681d      	ldr	r5, [r3, #0]
 8005252:	4606      	mov	r6, r0
 8005254:	460c      	mov	r4, r1
 8005256:	b125      	cbz	r5, 8005262 <__swsetup_r+0x16>
 8005258:	69ab      	ldr	r3, [r5, #24]
 800525a:	b913      	cbnz	r3, 8005262 <__swsetup_r+0x16>
 800525c:	4628      	mov	r0, r5
 800525e:	f000 f985 	bl	800556c <__sinit>
 8005262:	4b2e      	ldr	r3, [pc, #184]	; (800531c <__swsetup_r+0xd0>)
 8005264:	429c      	cmp	r4, r3
 8005266:	d10f      	bne.n	8005288 <__swsetup_r+0x3c>
 8005268:	686c      	ldr	r4, [r5, #4]
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005270:	0719      	lsls	r1, r3, #28
 8005272:	d42c      	bmi.n	80052ce <__swsetup_r+0x82>
 8005274:	06dd      	lsls	r5, r3, #27
 8005276:	d411      	bmi.n	800529c <__swsetup_r+0x50>
 8005278:	2309      	movs	r3, #9
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005286:	e03e      	b.n	8005306 <__swsetup_r+0xba>
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <__swsetup_r+0xd4>)
 800528a:	429c      	cmp	r4, r3
 800528c:	d101      	bne.n	8005292 <__swsetup_r+0x46>
 800528e:	68ac      	ldr	r4, [r5, #8]
 8005290:	e7eb      	b.n	800526a <__swsetup_r+0x1e>
 8005292:	4b24      	ldr	r3, [pc, #144]	; (8005324 <__swsetup_r+0xd8>)
 8005294:	429c      	cmp	r4, r3
 8005296:	bf08      	it	eq
 8005298:	68ec      	ldreq	r4, [r5, #12]
 800529a:	e7e6      	b.n	800526a <__swsetup_r+0x1e>
 800529c:	0758      	lsls	r0, r3, #29
 800529e:	d512      	bpl.n	80052c6 <__swsetup_r+0x7a>
 80052a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052a2:	b141      	cbz	r1, 80052b6 <__swsetup_r+0x6a>
 80052a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052a8:	4299      	cmp	r1, r3
 80052aa:	d002      	beq.n	80052b2 <__swsetup_r+0x66>
 80052ac:	4630      	mov	r0, r6
 80052ae:	f7ff fcd5 	bl	8004c5c <_free_r>
 80052b2:	2300      	movs	r3, #0
 80052b4:	6363      	str	r3, [r4, #52]	; 0x34
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	2300      	movs	r3, #0
 80052c0:	6063      	str	r3, [r4, #4]
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	f043 0308 	orr.w	r3, r3, #8
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	b94b      	cbnz	r3, 80052e6 <__swsetup_r+0x9a>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052dc:	d003      	beq.n	80052e6 <__swsetup_r+0x9a>
 80052de:	4621      	mov	r1, r4
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 fa09 	bl	80056f8 <__smakebuf_r>
 80052e6:	89a0      	ldrh	r0, [r4, #12]
 80052e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052ec:	f010 0301 	ands.w	r3, r0, #1
 80052f0:	d00a      	beq.n	8005308 <__swsetup_r+0xbc>
 80052f2:	2300      	movs	r3, #0
 80052f4:	60a3      	str	r3, [r4, #8]
 80052f6:	6963      	ldr	r3, [r4, #20]
 80052f8:	425b      	negs	r3, r3
 80052fa:	61a3      	str	r3, [r4, #24]
 80052fc:	6923      	ldr	r3, [r4, #16]
 80052fe:	b943      	cbnz	r3, 8005312 <__swsetup_r+0xc6>
 8005300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005304:	d1ba      	bne.n	800527c <__swsetup_r+0x30>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	0781      	lsls	r1, r0, #30
 800530a:	bf58      	it	pl
 800530c:	6963      	ldrpl	r3, [r4, #20]
 800530e:	60a3      	str	r3, [r4, #8]
 8005310:	e7f4      	b.n	80052fc <__swsetup_r+0xb0>
 8005312:	2000      	movs	r0, #0
 8005314:	e7f7      	b.n	8005306 <__swsetup_r+0xba>
 8005316:	bf00      	nop
 8005318:	20000008 	.word	0x20000008
 800531c:	08006bfc 	.word	0x08006bfc
 8005320:	08006c1c 	.word	0x08006c1c
 8005324:	08006bdc 	.word	0x08006bdc

08005328 <abort>:
 8005328:	b508      	push	{r3, lr}
 800532a:	2006      	movs	r0, #6
 800532c:	f000 fa4c 	bl	80057c8 <raise>
 8005330:	2001      	movs	r0, #1
 8005332:	f7fb fe11 	bl	8000f58 <_exit>
	...

08005338 <__sflush_r>:
 8005338:	898a      	ldrh	r2, [r1, #12]
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	4605      	mov	r5, r0
 8005340:	0710      	lsls	r0, r2, #28
 8005342:	460c      	mov	r4, r1
 8005344:	d458      	bmi.n	80053f8 <__sflush_r+0xc0>
 8005346:	684b      	ldr	r3, [r1, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	dc05      	bgt.n	8005358 <__sflush_r+0x20>
 800534c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	dc02      	bgt.n	8005358 <__sflush_r+0x20>
 8005352:	2000      	movs	r0, #0
 8005354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800535a:	2e00      	cmp	r6, #0
 800535c:	d0f9      	beq.n	8005352 <__sflush_r+0x1a>
 800535e:	2300      	movs	r3, #0
 8005360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005364:	682f      	ldr	r7, [r5, #0]
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	d032      	beq.n	80053d0 <__sflush_r+0x98>
 800536a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	075a      	lsls	r2, r3, #29
 8005370:	d505      	bpl.n	800537e <__sflush_r+0x46>
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	1ac0      	subs	r0, r0, r3
 8005376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005378:	b10b      	cbz	r3, 800537e <__sflush_r+0x46>
 800537a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537c:	1ac0      	subs	r0, r0, r3
 800537e:	2300      	movs	r3, #0
 8005380:	4602      	mov	r2, r0
 8005382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005384:	6a21      	ldr	r1, [r4, #32]
 8005386:	4628      	mov	r0, r5
 8005388:	47b0      	blx	r6
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	d106      	bne.n	800539e <__sflush_r+0x66>
 8005390:	6829      	ldr	r1, [r5, #0]
 8005392:	291d      	cmp	r1, #29
 8005394:	d82c      	bhi.n	80053f0 <__sflush_r+0xb8>
 8005396:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <__sflush_r+0x108>)
 8005398:	40ca      	lsrs	r2, r1
 800539a:	07d6      	lsls	r6, r2, #31
 800539c:	d528      	bpl.n	80053f0 <__sflush_r+0xb8>
 800539e:	2200      	movs	r2, #0
 80053a0:	6062      	str	r2, [r4, #4]
 80053a2:	04d9      	lsls	r1, r3, #19
 80053a4:	6922      	ldr	r2, [r4, #16]
 80053a6:	6022      	str	r2, [r4, #0]
 80053a8:	d504      	bpl.n	80053b4 <__sflush_r+0x7c>
 80053aa:	1c42      	adds	r2, r0, #1
 80053ac:	d101      	bne.n	80053b2 <__sflush_r+0x7a>
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	b903      	cbnz	r3, 80053b4 <__sflush_r+0x7c>
 80053b2:	6560      	str	r0, [r4, #84]	; 0x54
 80053b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b6:	602f      	str	r7, [r5, #0]
 80053b8:	2900      	cmp	r1, #0
 80053ba:	d0ca      	beq.n	8005352 <__sflush_r+0x1a>
 80053bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c0:	4299      	cmp	r1, r3
 80053c2:	d002      	beq.n	80053ca <__sflush_r+0x92>
 80053c4:	4628      	mov	r0, r5
 80053c6:	f7ff fc49 	bl	8004c5c <_free_r>
 80053ca:	2000      	movs	r0, #0
 80053cc:	6360      	str	r0, [r4, #52]	; 0x34
 80053ce:	e7c1      	b.n	8005354 <__sflush_r+0x1c>
 80053d0:	6a21      	ldr	r1, [r4, #32]
 80053d2:	2301      	movs	r3, #1
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b0      	blx	r6
 80053d8:	1c41      	adds	r1, r0, #1
 80053da:	d1c7      	bne.n	800536c <__sflush_r+0x34>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0c4      	beq.n	800536c <__sflush_r+0x34>
 80053e2:	2b1d      	cmp	r3, #29
 80053e4:	d001      	beq.n	80053ea <__sflush_r+0xb2>
 80053e6:	2b16      	cmp	r3, #22
 80053e8:	d101      	bne.n	80053ee <__sflush_r+0xb6>
 80053ea:	602f      	str	r7, [r5, #0]
 80053ec:	e7b1      	b.n	8005352 <__sflush_r+0x1a>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	e7ad      	b.n	8005354 <__sflush_r+0x1c>
 80053f8:	690f      	ldr	r7, [r1, #16]
 80053fa:	2f00      	cmp	r7, #0
 80053fc:	d0a9      	beq.n	8005352 <__sflush_r+0x1a>
 80053fe:	0793      	lsls	r3, r2, #30
 8005400:	680e      	ldr	r6, [r1, #0]
 8005402:	bf08      	it	eq
 8005404:	694b      	ldreq	r3, [r1, #20]
 8005406:	600f      	str	r7, [r1, #0]
 8005408:	bf18      	it	ne
 800540a:	2300      	movne	r3, #0
 800540c:	eba6 0807 	sub.w	r8, r6, r7
 8005410:	608b      	str	r3, [r1, #8]
 8005412:	f1b8 0f00 	cmp.w	r8, #0
 8005416:	dd9c      	ble.n	8005352 <__sflush_r+0x1a>
 8005418:	6a21      	ldr	r1, [r4, #32]
 800541a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800541c:	4643      	mov	r3, r8
 800541e:	463a      	mov	r2, r7
 8005420:	4628      	mov	r0, r5
 8005422:	47b0      	blx	r6
 8005424:	2800      	cmp	r0, #0
 8005426:	dc06      	bgt.n	8005436 <__sflush_r+0xfe>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542e:	81a3      	strh	r3, [r4, #12]
 8005430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005434:	e78e      	b.n	8005354 <__sflush_r+0x1c>
 8005436:	4407      	add	r7, r0
 8005438:	eba8 0800 	sub.w	r8, r8, r0
 800543c:	e7e9      	b.n	8005412 <__sflush_r+0xda>
 800543e:	bf00      	nop
 8005440:	20400001 	.word	0x20400001

08005444 <_fflush_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	4605      	mov	r5, r0
 800544a:	460c      	mov	r4, r1
 800544c:	b913      	cbnz	r3, 8005454 <_fflush_r+0x10>
 800544e:	2500      	movs	r5, #0
 8005450:	4628      	mov	r0, r5
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	b118      	cbz	r0, 800545e <_fflush_r+0x1a>
 8005456:	6983      	ldr	r3, [r0, #24]
 8005458:	b90b      	cbnz	r3, 800545e <_fflush_r+0x1a>
 800545a:	f000 f887 	bl	800556c <__sinit>
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <_fflush_r+0x6c>)
 8005460:	429c      	cmp	r4, r3
 8005462:	d11b      	bne.n	800549c <_fflush_r+0x58>
 8005464:	686c      	ldr	r4, [r5, #4]
 8005466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ef      	beq.n	800544e <_fflush_r+0xa>
 800546e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005470:	07d0      	lsls	r0, r2, #31
 8005472:	d404      	bmi.n	800547e <_fflush_r+0x3a>
 8005474:	0599      	lsls	r1, r3, #22
 8005476:	d402      	bmi.n	800547e <_fflush_r+0x3a>
 8005478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547a:	f000 f915 	bl	80056a8 <__retarget_lock_acquire_recursive>
 800547e:	4628      	mov	r0, r5
 8005480:	4621      	mov	r1, r4
 8005482:	f7ff ff59 	bl	8005338 <__sflush_r>
 8005486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005488:	07da      	lsls	r2, r3, #31
 800548a:	4605      	mov	r5, r0
 800548c:	d4e0      	bmi.n	8005450 <_fflush_r+0xc>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	d4dd      	bmi.n	8005450 <_fflush_r+0xc>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f000 f908 	bl	80056aa <__retarget_lock_release_recursive>
 800549a:	e7d9      	b.n	8005450 <_fflush_r+0xc>
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <_fflush_r+0x70>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d101      	bne.n	80054a6 <_fflush_r+0x62>
 80054a2:	68ac      	ldr	r4, [r5, #8]
 80054a4:	e7df      	b.n	8005466 <_fflush_r+0x22>
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <_fflush_r+0x74>)
 80054a8:	429c      	cmp	r4, r3
 80054aa:	bf08      	it	eq
 80054ac:	68ec      	ldreq	r4, [r5, #12]
 80054ae:	e7da      	b.n	8005466 <_fflush_r+0x22>
 80054b0:	08006bfc 	.word	0x08006bfc
 80054b4:	08006c1c 	.word	0x08006c1c
 80054b8:	08006bdc 	.word	0x08006bdc

080054bc <std>:
 80054bc:	2300      	movs	r3, #0
 80054be:	b510      	push	{r4, lr}
 80054c0:	4604      	mov	r4, r0
 80054c2:	e9c0 3300 	strd	r3, r3, [r0]
 80054c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ca:	6083      	str	r3, [r0, #8]
 80054cc:	8181      	strh	r1, [r0, #12]
 80054ce:	6643      	str	r3, [r0, #100]	; 0x64
 80054d0:	81c2      	strh	r2, [r0, #14]
 80054d2:	6183      	str	r3, [r0, #24]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2208      	movs	r2, #8
 80054d8:	305c      	adds	r0, #92	; 0x5c
 80054da:	f7fd fd1d 	bl	8002f18 <memset>
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <std+0x38>)
 80054e0:	6263      	str	r3, [r4, #36]	; 0x24
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <std+0x3c>)
 80054e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <std+0x40>)
 80054e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <std+0x44>)
 80054ec:	6224      	str	r4, [r4, #32]
 80054ee:	6323      	str	r3, [r4, #48]	; 0x30
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	bf00      	nop
 80054f4:	08005801 	.word	0x08005801
 80054f8:	08005823 	.word	0x08005823
 80054fc:	0800585b 	.word	0x0800585b
 8005500:	0800587f 	.word	0x0800587f

08005504 <_cleanup_r>:
 8005504:	4901      	ldr	r1, [pc, #4]	; (800550c <_cleanup_r+0x8>)
 8005506:	f000 b8af 	b.w	8005668 <_fwalk_reent>
 800550a:	bf00      	nop
 800550c:	08005445 	.word	0x08005445

08005510 <__sfmoreglue>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	2268      	movs	r2, #104	; 0x68
 8005514:	1e4d      	subs	r5, r1, #1
 8005516:	4355      	muls	r5, r2
 8005518:	460e      	mov	r6, r1
 800551a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800551e:	f7ff fc09 	bl	8004d34 <_malloc_r>
 8005522:	4604      	mov	r4, r0
 8005524:	b140      	cbz	r0, 8005538 <__sfmoreglue+0x28>
 8005526:	2100      	movs	r1, #0
 8005528:	e9c0 1600 	strd	r1, r6, [r0]
 800552c:	300c      	adds	r0, #12
 800552e:	60a0      	str	r0, [r4, #8]
 8005530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005534:	f7fd fcf0 	bl	8002f18 <memset>
 8005538:	4620      	mov	r0, r4
 800553a:	bd70      	pop	{r4, r5, r6, pc}

0800553c <__sfp_lock_acquire>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__sfp_lock_acquire+0x8>)
 800553e:	f000 b8b3 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	20000309 	.word	0x20000309

08005548 <__sfp_lock_release>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__sfp_lock_release+0x8>)
 800554a:	f000 b8ae 	b.w	80056aa <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	20000309 	.word	0x20000309

08005554 <__sinit_lock_acquire>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__sinit_lock_acquire+0x8>)
 8005556:	f000 b8a7 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	2000030a 	.word	0x2000030a

08005560 <__sinit_lock_release>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__sinit_lock_release+0x8>)
 8005562:	f000 b8a2 	b.w	80056aa <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	2000030a 	.word	0x2000030a

0800556c <__sinit>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	f7ff fff0 	bl	8005554 <__sinit_lock_acquire>
 8005574:	69a3      	ldr	r3, [r4, #24]
 8005576:	b11b      	cbz	r3, 8005580 <__sinit+0x14>
 8005578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800557c:	f7ff bff0 	b.w	8005560 <__sinit_lock_release>
 8005580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005584:	6523      	str	r3, [r4, #80]	; 0x50
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <__sinit+0x68>)
 8005588:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <__sinit+0x6c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	62a2      	str	r2, [r4, #40]	; 0x28
 800558e:	42a3      	cmp	r3, r4
 8005590:	bf04      	itt	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	61a3      	streq	r3, [r4, #24]
 8005596:	4620      	mov	r0, r4
 8005598:	f000 f820 	bl	80055dc <__sfp>
 800559c:	6060      	str	r0, [r4, #4]
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 f81c 	bl	80055dc <__sfp>
 80055a4:	60a0      	str	r0, [r4, #8]
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f818 	bl	80055dc <__sfp>
 80055ac:	2200      	movs	r2, #0
 80055ae:	60e0      	str	r0, [r4, #12]
 80055b0:	2104      	movs	r1, #4
 80055b2:	6860      	ldr	r0, [r4, #4]
 80055b4:	f7ff ff82 	bl	80054bc <std>
 80055b8:	68a0      	ldr	r0, [r4, #8]
 80055ba:	2201      	movs	r2, #1
 80055bc:	2109      	movs	r1, #9
 80055be:	f7ff ff7d 	bl	80054bc <std>
 80055c2:	68e0      	ldr	r0, [r4, #12]
 80055c4:	2202      	movs	r2, #2
 80055c6:	2112      	movs	r1, #18
 80055c8:	f7ff ff78 	bl	80054bc <std>
 80055cc:	2301      	movs	r3, #1
 80055ce:	61a3      	str	r3, [r4, #24]
 80055d0:	e7d2      	b.n	8005578 <__sinit+0xc>
 80055d2:	bf00      	nop
 80055d4:	08006860 	.word	0x08006860
 80055d8:	08005505 	.word	0x08005505

080055dc <__sfp>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	4607      	mov	r7, r0
 80055e0:	f7ff ffac 	bl	800553c <__sfp_lock_acquire>
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <__sfp+0x84>)
 80055e6:	681e      	ldr	r6, [r3, #0]
 80055e8:	69b3      	ldr	r3, [r6, #24]
 80055ea:	b913      	cbnz	r3, 80055f2 <__sfp+0x16>
 80055ec:	4630      	mov	r0, r6
 80055ee:	f7ff ffbd 	bl	800556c <__sinit>
 80055f2:	3648      	adds	r6, #72	; 0x48
 80055f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	d503      	bpl.n	8005604 <__sfp+0x28>
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	b30b      	cbz	r3, 8005644 <__sfp+0x68>
 8005600:	6836      	ldr	r6, [r6, #0]
 8005602:	e7f7      	b.n	80055f4 <__sfp+0x18>
 8005604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005608:	b9d5      	cbnz	r5, 8005640 <__sfp+0x64>
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <__sfp+0x88>)
 800560c:	60e3      	str	r3, [r4, #12]
 800560e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005612:	6665      	str	r5, [r4, #100]	; 0x64
 8005614:	f000 f847 	bl	80056a6 <__retarget_lock_init_recursive>
 8005618:	f7ff ff96 	bl	8005548 <__sfp_lock_release>
 800561c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005624:	6025      	str	r5, [r4, #0]
 8005626:	61a5      	str	r5, [r4, #24]
 8005628:	2208      	movs	r2, #8
 800562a:	4629      	mov	r1, r5
 800562c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005630:	f7fd fc72 	bl	8002f18 <memset>
 8005634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800563c:	4620      	mov	r0, r4
 800563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005640:	3468      	adds	r4, #104	; 0x68
 8005642:	e7d9      	b.n	80055f8 <__sfp+0x1c>
 8005644:	2104      	movs	r1, #4
 8005646:	4638      	mov	r0, r7
 8005648:	f7ff ff62 	bl	8005510 <__sfmoreglue>
 800564c:	4604      	mov	r4, r0
 800564e:	6030      	str	r0, [r6, #0]
 8005650:	2800      	cmp	r0, #0
 8005652:	d1d5      	bne.n	8005600 <__sfp+0x24>
 8005654:	f7ff ff78 	bl	8005548 <__sfp_lock_release>
 8005658:	230c      	movs	r3, #12
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	e7ee      	b.n	800563c <__sfp+0x60>
 800565e:	bf00      	nop
 8005660:	08006860 	.word	0x08006860
 8005664:	ffff0001 	.word	0xffff0001

08005668 <_fwalk_reent>:
 8005668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800566c:	4606      	mov	r6, r0
 800566e:	4688      	mov	r8, r1
 8005670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005674:	2700      	movs	r7, #0
 8005676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800567a:	f1b9 0901 	subs.w	r9, r9, #1
 800567e:	d505      	bpl.n	800568c <_fwalk_reent+0x24>
 8005680:	6824      	ldr	r4, [r4, #0]
 8005682:	2c00      	cmp	r4, #0
 8005684:	d1f7      	bne.n	8005676 <_fwalk_reent+0xe>
 8005686:	4638      	mov	r0, r7
 8005688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d907      	bls.n	80056a2 <_fwalk_reent+0x3a>
 8005692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005696:	3301      	adds	r3, #1
 8005698:	d003      	beq.n	80056a2 <_fwalk_reent+0x3a>
 800569a:	4629      	mov	r1, r5
 800569c:	4630      	mov	r0, r6
 800569e:	47c0      	blx	r8
 80056a0:	4307      	orrs	r7, r0
 80056a2:	3568      	adds	r5, #104	; 0x68
 80056a4:	e7e9      	b.n	800567a <_fwalk_reent+0x12>

080056a6 <__retarget_lock_init_recursive>:
 80056a6:	4770      	bx	lr

080056a8 <__retarget_lock_acquire_recursive>:
 80056a8:	4770      	bx	lr

080056aa <__retarget_lock_release_recursive>:
 80056aa:	4770      	bx	lr

080056ac <__swhatbuf_r>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	460e      	mov	r6, r1
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	2900      	cmp	r1, #0
 80056b6:	b096      	sub	sp, #88	; 0x58
 80056b8:	4614      	mov	r4, r2
 80056ba:	461d      	mov	r5, r3
 80056bc:	da08      	bge.n	80056d0 <__swhatbuf_r+0x24>
 80056be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	061a      	lsls	r2, r3, #24
 80056c8:	d410      	bmi.n	80056ec <__swhatbuf_r+0x40>
 80056ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ce:	e00e      	b.n	80056ee <__swhatbuf_r+0x42>
 80056d0:	466a      	mov	r2, sp
 80056d2:	f000 f8fb 	bl	80058cc <_fstat_r>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	dbf1      	blt.n	80056be <__swhatbuf_r+0x12>
 80056da:	9a01      	ldr	r2, [sp, #4]
 80056dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056e4:	425a      	negs	r2, r3
 80056e6:	415a      	adcs	r2, r3
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	e7ee      	b.n	80056ca <__swhatbuf_r+0x1e>
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	2000      	movs	r0, #0
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	b016      	add	sp, #88	; 0x58
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080056f8 <__smakebuf_r>:
 80056f8:	898b      	ldrh	r3, [r1, #12]
 80056fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056fc:	079d      	lsls	r5, r3, #30
 80056fe:	4606      	mov	r6, r0
 8005700:	460c      	mov	r4, r1
 8005702:	d507      	bpl.n	8005714 <__smakebuf_r+0x1c>
 8005704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	6123      	str	r3, [r4, #16]
 800570c:	2301      	movs	r3, #1
 800570e:	6163      	str	r3, [r4, #20]
 8005710:	b002      	add	sp, #8
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	ab01      	add	r3, sp, #4
 8005716:	466a      	mov	r2, sp
 8005718:	f7ff ffc8 	bl	80056ac <__swhatbuf_r>
 800571c:	9900      	ldr	r1, [sp, #0]
 800571e:	4605      	mov	r5, r0
 8005720:	4630      	mov	r0, r6
 8005722:	f7ff fb07 	bl	8004d34 <_malloc_r>
 8005726:	b948      	cbnz	r0, 800573c <__smakebuf_r+0x44>
 8005728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572c:	059a      	lsls	r2, r3, #22
 800572e:	d4ef      	bmi.n	8005710 <__smakebuf_r+0x18>
 8005730:	f023 0303 	bic.w	r3, r3, #3
 8005734:	f043 0302 	orr.w	r3, r3, #2
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	e7e3      	b.n	8005704 <__smakebuf_r+0xc>
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <__smakebuf_r+0x7c>)
 800573e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	6020      	str	r0, [r4, #0]
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	9b00      	ldr	r3, [sp, #0]
 800574c:	6163      	str	r3, [r4, #20]
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	6120      	str	r0, [r4, #16]
 8005752:	b15b      	cbz	r3, 800576c <__smakebuf_r+0x74>
 8005754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f8c9 	bl	80058f0 <_isatty_r>
 800575e:	b128      	cbz	r0, 800576c <__smakebuf_r+0x74>
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	89a0      	ldrh	r0, [r4, #12]
 800576e:	4305      	orrs	r5, r0
 8005770:	81a5      	strh	r5, [r4, #12]
 8005772:	e7cd      	b.n	8005710 <__smakebuf_r+0x18>
 8005774:	08005505 	.word	0x08005505

08005778 <_raise_r>:
 8005778:	291f      	cmp	r1, #31
 800577a:	b538      	push	{r3, r4, r5, lr}
 800577c:	4604      	mov	r4, r0
 800577e:	460d      	mov	r5, r1
 8005780:	d904      	bls.n	800578c <_raise_r+0x14>
 8005782:	2316      	movs	r3, #22
 8005784:	6003      	str	r3, [r0, #0]
 8005786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800578e:	b112      	cbz	r2, 8005796 <_raise_r+0x1e>
 8005790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005794:	b94b      	cbnz	r3, 80057aa <_raise_r+0x32>
 8005796:	4620      	mov	r0, r4
 8005798:	f000 f830 	bl	80057fc <_getpid_r>
 800579c:	462a      	mov	r2, r5
 800579e:	4601      	mov	r1, r0
 80057a0:	4620      	mov	r0, r4
 80057a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a6:	f000 b817 	b.w	80057d8 <_kill_r>
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d00a      	beq.n	80057c4 <_raise_r+0x4c>
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	d103      	bne.n	80057ba <_raise_r+0x42>
 80057b2:	2316      	movs	r3, #22
 80057b4:	6003      	str	r3, [r0, #0]
 80057b6:	2001      	movs	r0, #1
 80057b8:	e7e7      	b.n	800578a <_raise_r+0x12>
 80057ba:	2400      	movs	r4, #0
 80057bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057c0:	4628      	mov	r0, r5
 80057c2:	4798      	blx	r3
 80057c4:	2000      	movs	r0, #0
 80057c6:	e7e0      	b.n	800578a <_raise_r+0x12>

080057c8 <raise>:
 80057c8:	4b02      	ldr	r3, [pc, #8]	; (80057d4 <raise+0xc>)
 80057ca:	4601      	mov	r1, r0
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f7ff bfd3 	b.w	8005778 <_raise_r>
 80057d2:	bf00      	nop
 80057d4:	20000008 	.word	0x20000008

080057d8 <_kill_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4d07      	ldr	r5, [pc, #28]	; (80057f8 <_kill_r+0x20>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4604      	mov	r4, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	602b      	str	r3, [r5, #0]
 80057e6:	f7fb fba7 	bl	8000f38 <_kill>
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	d102      	bne.n	80057f4 <_kill_r+0x1c>
 80057ee:	682b      	ldr	r3, [r5, #0]
 80057f0:	b103      	cbz	r3, 80057f4 <_kill_r+0x1c>
 80057f2:	6023      	str	r3, [r4, #0]
 80057f4:	bd38      	pop	{r3, r4, r5, pc}
 80057f6:	bf00      	nop
 80057f8:	20000304 	.word	0x20000304

080057fc <_getpid_r>:
 80057fc:	f7fb bb94 	b.w	8000f28 <_getpid>

08005800 <__sread>:
 8005800:	b510      	push	{r4, lr}
 8005802:	460c      	mov	r4, r1
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	f000 f894 	bl	8005934 <_read_r>
 800580c:	2800      	cmp	r0, #0
 800580e:	bfab      	itete	ge
 8005810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005812:	89a3      	ldrhlt	r3, [r4, #12]
 8005814:	181b      	addge	r3, r3, r0
 8005816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800581a:	bfac      	ite	ge
 800581c:	6563      	strge	r3, [r4, #84]	; 0x54
 800581e:	81a3      	strhlt	r3, [r4, #12]
 8005820:	bd10      	pop	{r4, pc}

08005822 <__swrite>:
 8005822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005826:	461f      	mov	r7, r3
 8005828:	898b      	ldrh	r3, [r1, #12]
 800582a:	05db      	lsls	r3, r3, #23
 800582c:	4605      	mov	r5, r0
 800582e:	460c      	mov	r4, r1
 8005830:	4616      	mov	r6, r2
 8005832:	d505      	bpl.n	8005840 <__swrite+0x1e>
 8005834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005838:	2302      	movs	r3, #2
 800583a:	2200      	movs	r2, #0
 800583c:	f000 f868 	bl	8005910 <_lseek_r>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	4632      	mov	r2, r6
 800584e:	463b      	mov	r3, r7
 8005850:	4628      	mov	r0, r5
 8005852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005856:	f000 b817 	b.w	8005888 <_write_r>

0800585a <__sseek>:
 800585a:	b510      	push	{r4, lr}
 800585c:	460c      	mov	r4, r1
 800585e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005862:	f000 f855 	bl	8005910 <_lseek_r>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	bf15      	itete	ne
 800586c:	6560      	strne	r0, [r4, #84]	; 0x54
 800586e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005876:	81a3      	strheq	r3, [r4, #12]
 8005878:	bf18      	it	ne
 800587a:	81a3      	strhne	r3, [r4, #12]
 800587c:	bd10      	pop	{r4, pc}

0800587e <__sclose>:
 800587e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005882:	f000 b813 	b.w	80058ac <_close_r>
	...

08005888 <_write_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	; (80058a8 <_write_r+0x20>)
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f7fb fb85 	bl	8000fa6 <_write>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_write_r+0x1e>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_write_r+0x1e>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	20000304 	.word	0x20000304

080058ac <_close_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d06      	ldr	r5, [pc, #24]	; (80058c8 <_close_r+0x1c>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4604      	mov	r4, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	602b      	str	r3, [r5, #0]
 80058b8:	f7fb fb91 	bl	8000fde <_close>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_close_r+0x1a>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_close_r+0x1a>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	20000304 	.word	0x20000304

080058cc <_fstat_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d07      	ldr	r5, [pc, #28]	; (80058ec <_fstat_r+0x20>)
 80058d0:	2300      	movs	r3, #0
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	f7fb fb8c 	bl	8000ff6 <_fstat>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	d102      	bne.n	80058e8 <_fstat_r+0x1c>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	b103      	cbz	r3, 80058e8 <_fstat_r+0x1c>
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	bd38      	pop	{r3, r4, r5, pc}
 80058ea:	bf00      	nop
 80058ec:	20000304 	.word	0x20000304

080058f0 <_isatty_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4d06      	ldr	r5, [pc, #24]	; (800590c <_isatty_r+0x1c>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f7fb fb8b 	bl	8001016 <_isatty>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_isatty_r+0x1a>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_isatty_r+0x1a>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20000304 	.word	0x20000304

08005910 <_lseek_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_lseek_r+0x20>)
 8005914:	4604      	mov	r4, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fb fb84 	bl	800102c <_lseek>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_lseek_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_lseek_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000304 	.word	0x20000304

08005934 <_read_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4d07      	ldr	r5, [pc, #28]	; (8005954 <_read_r+0x20>)
 8005938:	4604      	mov	r4, r0
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	2200      	movs	r2, #0
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fb fb12 	bl	8000f6c <_read>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_read_r+0x1e>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_read_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20000304 	.word	0x20000304

08005958 <round>:
 8005958:	ec51 0b10 	vmov	r0, r1, d0
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8005962:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8005966:	2c13      	cmp	r4, #19
 8005968:	ee10 2a10 	vmov	r2, s0
 800596c:	460b      	mov	r3, r1
 800596e:	dc19      	bgt.n	80059a4 <round+0x4c>
 8005970:	2c00      	cmp	r4, #0
 8005972:	da09      	bge.n	8005988 <round+0x30>
 8005974:	3401      	adds	r4, #1
 8005976:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800597a:	d103      	bne.n	8005984 <round+0x2c>
 800597c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005980:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005984:	2200      	movs	r2, #0
 8005986:	e028      	b.n	80059da <round+0x82>
 8005988:	4d15      	ldr	r5, [pc, #84]	; (80059e0 <round+0x88>)
 800598a:	4125      	asrs	r5, r4
 800598c:	ea01 0605 	and.w	r6, r1, r5
 8005990:	4332      	orrs	r2, r6
 8005992:	d00e      	beq.n	80059b2 <round+0x5a>
 8005994:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005998:	fa42 f404 	asr.w	r4, r2, r4
 800599c:	4423      	add	r3, r4
 800599e:	ea23 0305 	bic.w	r3, r3, r5
 80059a2:	e7ef      	b.n	8005984 <round+0x2c>
 80059a4:	2c33      	cmp	r4, #51	; 0x33
 80059a6:	dd07      	ble.n	80059b8 <round+0x60>
 80059a8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80059ac:	d101      	bne.n	80059b2 <round+0x5a>
 80059ae:	f7fa fc75 	bl	800029c <__adddf3>
 80059b2:	ec41 0b10 	vmov	d0, r0, r1
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80059bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80059c0:	40f5      	lsrs	r5, r6
 80059c2:	4228      	tst	r0, r5
 80059c4:	d0f5      	beq.n	80059b2 <round+0x5a>
 80059c6:	2101      	movs	r1, #1
 80059c8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80059cc:	fa01 f404 	lsl.w	r4, r1, r4
 80059d0:	1912      	adds	r2, r2, r4
 80059d2:	bf28      	it	cs
 80059d4:	185b      	addcs	r3, r3, r1
 80059d6:	ea22 0205 	bic.w	r2, r2, r5
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	e7e8      	b.n	80059b2 <round+0x5a>
 80059e0:	000fffff 	.word	0x000fffff

080059e4 <pow>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	ed2d 8b02 	vpush	{d8}
 80059ea:	eeb0 8a40 	vmov.f32	s16, s0
 80059ee:	eef0 8a60 	vmov.f32	s17, s1
 80059f2:	ec55 4b11 	vmov	r4, r5, d1
 80059f6:	f000 f867 	bl	8005ac8 <__ieee754_pow>
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	4620      	mov	r0, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	ec57 6b10 	vmov	r6, r7, d0
 8005a06:	f7fb f899 	bl	8000b3c <__aeabi_dcmpun>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d13b      	bne.n	8005a86 <pow+0xa2>
 8005a0e:	ec51 0b18 	vmov	r0, r1, d8
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	f7fb f85f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a1a:	b1b8      	cbz	r0, 8005a4c <pow+0x68>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4620      	mov	r0, r4
 8005a22:	4629      	mov	r1, r5
 8005a24:	f7fb f858 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d146      	bne.n	8005aba <pow+0xd6>
 8005a2c:	ec45 4b10 	vmov	d0, r4, r5
 8005a30:	f000 fe63 	bl	80066fa <finite>
 8005a34:	b338      	cbz	r0, 8005a86 <pow+0xa2>
 8005a36:	2200      	movs	r2, #0
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fb f855 	bl	8000aec <__aeabi_dcmplt>
 8005a42:	b300      	cbz	r0, 8005a86 <pow+0xa2>
 8005a44:	f7fd fa3e 	bl	8002ec4 <__errno>
 8005a48:	2322      	movs	r3, #34	; 0x22
 8005a4a:	e01b      	b.n	8005a84 <pow+0xa0>
 8005a4c:	ec47 6b10 	vmov	d0, r6, r7
 8005a50:	f000 fe53 	bl	80066fa <finite>
 8005a54:	b9e0      	cbnz	r0, 8005a90 <pow+0xac>
 8005a56:	eeb0 0a48 	vmov.f32	s0, s16
 8005a5a:	eef0 0a68 	vmov.f32	s1, s17
 8005a5e:	f000 fe4c 	bl	80066fa <finite>
 8005a62:	b1a8      	cbz	r0, 8005a90 <pow+0xac>
 8005a64:	ec45 4b10 	vmov	d0, r4, r5
 8005a68:	f000 fe47 	bl	80066fa <finite>
 8005a6c:	b180      	cbz	r0, 8005a90 <pow+0xac>
 8005a6e:	4632      	mov	r2, r6
 8005a70:	463b      	mov	r3, r7
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fb f861 	bl	8000b3c <__aeabi_dcmpun>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d0e2      	beq.n	8005a44 <pow+0x60>
 8005a7e:	f7fd fa21 	bl	8002ec4 <__errno>
 8005a82:	2321      	movs	r3, #33	; 0x21
 8005a84:	6003      	str	r3, [r0, #0]
 8005a86:	ecbd 8b02 	vpop	{d8}
 8005a8a:	ec47 6b10 	vmov	d0, r6, r7
 8005a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a90:	2200      	movs	r2, #0
 8005a92:	2300      	movs	r3, #0
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fb f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d0f2      	beq.n	8005a86 <pow+0xa2>
 8005aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8005aa4:	eef0 0a68 	vmov.f32	s1, s17
 8005aa8:	f000 fe27 	bl	80066fa <finite>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d0ea      	beq.n	8005a86 <pow+0xa2>
 8005ab0:	ec45 4b10 	vmov	d0, r4, r5
 8005ab4:	f000 fe21 	bl	80066fa <finite>
 8005ab8:	e7c3      	b.n	8005a42 <pow+0x5e>
 8005aba:	4f01      	ldr	r7, [pc, #4]	; (8005ac0 <pow+0xdc>)
 8005abc:	2600      	movs	r6, #0
 8005abe:	e7e2      	b.n	8005a86 <pow+0xa2>
 8005ac0:	3ff00000 	.word	0x3ff00000
 8005ac4:	00000000 	.word	0x00000000

08005ac8 <__ieee754_pow>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	ed2d 8b06 	vpush	{d8-d10}
 8005ad0:	b089      	sub	sp, #36	; 0x24
 8005ad2:	ed8d 1b00 	vstr	d1, [sp]
 8005ad6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005ada:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005ade:	ea58 0102 	orrs.w	r1, r8, r2
 8005ae2:	ec57 6b10 	vmov	r6, r7, d0
 8005ae6:	d115      	bne.n	8005b14 <__ieee754_pow+0x4c>
 8005ae8:	19b3      	adds	r3, r6, r6
 8005aea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005aee:	4152      	adcs	r2, r2
 8005af0:	4299      	cmp	r1, r3
 8005af2:	4b89      	ldr	r3, [pc, #548]	; (8005d18 <__ieee754_pow+0x250>)
 8005af4:	4193      	sbcs	r3, r2
 8005af6:	f080 84d2 	bcs.w	800649e <__ieee754_pow+0x9d6>
 8005afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa fbcb 	bl	800029c <__adddf3>
 8005b06:	ec41 0b10 	vmov	d0, r0, r1
 8005b0a:	b009      	add	sp, #36	; 0x24
 8005b0c:	ecbd 8b06 	vpop	{d8-d10}
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <__ieee754_pow+0x254>)
 8005b16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	ee10 aa10 	vmov	sl, s0
 8005b20:	463d      	mov	r5, r7
 8005b22:	dc06      	bgt.n	8005b32 <__ieee754_pow+0x6a>
 8005b24:	d101      	bne.n	8005b2a <__ieee754_pow+0x62>
 8005b26:	2e00      	cmp	r6, #0
 8005b28:	d1e7      	bne.n	8005afa <__ieee754_pow+0x32>
 8005b2a:	4598      	cmp	r8, r3
 8005b2c:	dc01      	bgt.n	8005b32 <__ieee754_pow+0x6a>
 8005b2e:	d10f      	bne.n	8005b50 <__ieee754_pow+0x88>
 8005b30:	b172      	cbz	r2, 8005b50 <__ieee754_pow+0x88>
 8005b32:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005b36:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005b3a:	ea55 050a 	orrs.w	r5, r5, sl
 8005b3e:	d1dc      	bne.n	8005afa <__ieee754_pow+0x32>
 8005b40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005b44:	18db      	adds	r3, r3, r3
 8005b46:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005b4a:	4152      	adcs	r2, r2
 8005b4c:	429d      	cmp	r5, r3
 8005b4e:	e7d0      	b.n	8005af2 <__ieee754_pow+0x2a>
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	da3b      	bge.n	8005bcc <__ieee754_pow+0x104>
 8005b54:	4b72      	ldr	r3, [pc, #456]	; (8005d20 <__ieee754_pow+0x258>)
 8005b56:	4598      	cmp	r8, r3
 8005b58:	dc51      	bgt.n	8005bfe <__ieee754_pow+0x136>
 8005b5a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005b5e:	4598      	cmp	r8, r3
 8005b60:	f340 84ac 	ble.w	80064bc <__ieee754_pow+0x9f4>
 8005b64:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005b68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b6c:	2b14      	cmp	r3, #20
 8005b6e:	dd0f      	ble.n	8005b90 <__ieee754_pow+0xc8>
 8005b70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005b74:	fa22 f103 	lsr.w	r1, r2, r3
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	f040 849d 	bne.w	80064bc <__ieee754_pow+0x9f4>
 8005b82:	f001 0101 	and.w	r1, r1, #1
 8005b86:	f1c1 0302 	rsb	r3, r1, #2
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	b182      	cbz	r2, 8005bb0 <__ieee754_pow+0xe8>
 8005b8e:	e05f      	b.n	8005c50 <__ieee754_pow+0x188>
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	d15b      	bne.n	8005c4c <__ieee754_pow+0x184>
 8005b94:	f1c3 0314 	rsb	r3, r3, #20
 8005b98:	fa48 f103 	asr.w	r1, r8, r3
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	4543      	cmp	r3, r8
 8005ba2:	f040 8488 	bne.w	80064b6 <__ieee754_pow+0x9ee>
 8005ba6:	f001 0101 	and.w	r1, r1, #1
 8005baa:	f1c1 0302 	rsb	r3, r1, #2
 8005bae:	9304      	str	r3, [sp, #16]
 8005bb0:	4b5c      	ldr	r3, [pc, #368]	; (8005d24 <__ieee754_pow+0x25c>)
 8005bb2:	4598      	cmp	r8, r3
 8005bb4:	d132      	bne.n	8005c1c <__ieee754_pow+0x154>
 8005bb6:	f1b9 0f00 	cmp.w	r9, #0
 8005bba:	f280 8478 	bge.w	80064ae <__ieee754_pow+0x9e6>
 8005bbe:	4959      	ldr	r1, [pc, #356]	; (8005d24 <__ieee754_pow+0x25c>)
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f7fa fe49 	bl	800085c <__aeabi_ddiv>
 8005bca:	e79c      	b.n	8005b06 <__ieee754_pow+0x3e>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	2a00      	cmp	r2, #0
 8005bd2:	d13d      	bne.n	8005c50 <__ieee754_pow+0x188>
 8005bd4:	4b51      	ldr	r3, [pc, #324]	; (8005d1c <__ieee754_pow+0x254>)
 8005bd6:	4598      	cmp	r8, r3
 8005bd8:	d1ea      	bne.n	8005bb0 <__ieee754_pow+0xe8>
 8005bda:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005bde:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005be2:	ea53 030a 	orrs.w	r3, r3, sl
 8005be6:	f000 845a 	beq.w	800649e <__ieee754_pow+0x9d6>
 8005bea:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <__ieee754_pow+0x260>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	dd08      	ble.n	8005c02 <__ieee754_pow+0x13a>
 8005bf0:	f1b9 0f00 	cmp.w	r9, #0
 8005bf4:	f2c0 8457 	blt.w	80064a6 <__ieee754_pow+0x9de>
 8005bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bfc:	e783      	b.n	8005b06 <__ieee754_pow+0x3e>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e7e5      	b.n	8005bce <__ieee754_pow+0x106>
 8005c02:	f1b9 0f00 	cmp.w	r9, #0
 8005c06:	f04f 0000 	mov.w	r0, #0
 8005c0a:	f04f 0100 	mov.w	r1, #0
 8005c0e:	f6bf af7a 	bge.w	8005b06 <__ieee754_pow+0x3e>
 8005c12:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005c16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005c1a:	e774      	b.n	8005b06 <__ieee754_pow+0x3e>
 8005c1c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005c20:	d106      	bne.n	8005c30 <__ieee754_pow+0x168>
 8005c22:	4632      	mov	r2, r6
 8005c24:	463b      	mov	r3, r7
 8005c26:	4630      	mov	r0, r6
 8005c28:	4639      	mov	r1, r7
 8005c2a:	f7fa fced 	bl	8000608 <__aeabi_dmul>
 8005c2e:	e76a      	b.n	8005b06 <__ieee754_pow+0x3e>
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <__ieee754_pow+0x264>)
 8005c32:	4599      	cmp	r9, r3
 8005c34:	d10c      	bne.n	8005c50 <__ieee754_pow+0x188>
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	db0a      	blt.n	8005c50 <__ieee754_pow+0x188>
 8005c3a:	ec47 6b10 	vmov	d0, r6, r7
 8005c3e:	b009      	add	sp, #36	; 0x24
 8005c40:	ecbd 8b06 	vpop	{d8-d10}
 8005c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	f000 bc6c 	b.w	8006524 <__ieee754_sqrt>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	9304      	str	r3, [sp, #16]
 8005c50:	ec47 6b10 	vmov	d0, r6, r7
 8005c54:	f000 fd48 	bl	80066e8 <fabs>
 8005c58:	ec51 0b10 	vmov	r0, r1, d0
 8005c5c:	f1ba 0f00 	cmp.w	sl, #0
 8005c60:	d129      	bne.n	8005cb6 <__ieee754_pow+0x1ee>
 8005c62:	b124      	cbz	r4, 8005c6e <__ieee754_pow+0x1a6>
 8005c64:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <__ieee754_pow+0x25c>)
 8005c66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d123      	bne.n	8005cb6 <__ieee754_pow+0x1ee>
 8005c6e:	f1b9 0f00 	cmp.w	r9, #0
 8005c72:	da05      	bge.n	8005c80 <__ieee754_pow+0x1b8>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	2000      	movs	r0, #0
 8005c7a:	492a      	ldr	r1, [pc, #168]	; (8005d24 <__ieee754_pow+0x25c>)
 8005c7c:	f7fa fdee 	bl	800085c <__aeabi_ddiv>
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	f6bf af40 	bge.w	8005b06 <__ieee754_pow+0x3e>
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005c8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005c90:	4323      	orrs	r3, r4
 8005c92:	d108      	bne.n	8005ca6 <__ieee754_pow+0x1de>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f7fa fafc 	bl	8000298 <__aeabi_dsub>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	e78f      	b.n	8005bc6 <__ieee754_pow+0xfe>
 8005ca6:	9b04      	ldr	r3, [sp, #16]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	f47f af2c 	bne.w	8005b06 <__ieee754_pow+0x3e>
 8005cae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	e727      	b.n	8005b06 <__ieee754_pow+0x3e>
 8005cb6:	0feb      	lsrs	r3, r5, #31
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	9306      	str	r3, [sp, #24]
 8005cbc:	9a06      	ldr	r2, [sp, #24]
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	d102      	bne.n	8005cca <__ieee754_pow+0x202>
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	e7e6      	b.n	8005c98 <__ieee754_pow+0x1d0>
 8005cca:	4b19      	ldr	r3, [pc, #100]	; (8005d30 <__ieee754_pow+0x268>)
 8005ccc:	4598      	cmp	r8, r3
 8005cce:	f340 80fb 	ble.w	8005ec8 <__ieee754_pow+0x400>
 8005cd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005cd6:	4598      	cmp	r8, r3
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <__ieee754_pow+0x260>)
 8005cda:	dd0c      	ble.n	8005cf6 <__ieee754_pow+0x22e>
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	dc0f      	bgt.n	8005d00 <__ieee754_pow+0x238>
 8005ce0:	f1b9 0f00 	cmp.w	r9, #0
 8005ce4:	da0f      	bge.n	8005d06 <__ieee754_pow+0x23e>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	b009      	add	sp, #36	; 0x24
 8005cea:	ecbd 8b06 	vpop	{d8-d10}
 8005cee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf2:	f000 bcf0 	b.w	80066d6 <__math_oflow>
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	dbf2      	blt.n	8005ce0 <__ieee754_pow+0x218>
 8005cfa:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <__ieee754_pow+0x25c>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	dd19      	ble.n	8005d34 <__ieee754_pow+0x26c>
 8005d00:	f1b9 0f00 	cmp.w	r9, #0
 8005d04:	dcef      	bgt.n	8005ce6 <__ieee754_pow+0x21e>
 8005d06:	2000      	movs	r0, #0
 8005d08:	b009      	add	sp, #36	; 0x24
 8005d0a:	ecbd 8b06 	vpop	{d8-d10}
 8005d0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d12:	f000 bcd7 	b.w	80066c4 <__math_uflow>
 8005d16:	bf00      	nop
 8005d18:	fff00000 	.word	0xfff00000
 8005d1c:	7ff00000 	.word	0x7ff00000
 8005d20:	433fffff 	.word	0x433fffff
 8005d24:	3ff00000 	.word	0x3ff00000
 8005d28:	3fefffff 	.word	0x3fefffff
 8005d2c:	3fe00000 	.word	0x3fe00000
 8005d30:	41e00000 	.word	0x41e00000
 8005d34:	4b60      	ldr	r3, [pc, #384]	; (8005eb8 <__ieee754_pow+0x3f0>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	f7fa faae 	bl	8000298 <__aeabi_dsub>
 8005d3c:	a354      	add	r3, pc, #336	; (adr r3, 8005e90 <__ieee754_pow+0x3c8>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	4604      	mov	r4, r0
 8005d44:	460d      	mov	r5, r1
 8005d46:	f7fa fc5f 	bl	8000608 <__aeabi_dmul>
 8005d4a:	a353      	add	r3, pc, #332	; (adr r3, 8005e98 <__ieee754_pow+0x3d0>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	4606      	mov	r6, r0
 8005d52:	460f      	mov	r7, r1
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fc56 	bl	8000608 <__aeabi_dmul>
 8005d5c:	4b57      	ldr	r3, [pc, #348]	; (8005ebc <__ieee754_pow+0x3f4>)
 8005d5e:	4682      	mov	sl, r0
 8005d60:	468b      	mov	fp, r1
 8005d62:	2200      	movs	r2, #0
 8005d64:	4620      	mov	r0, r4
 8005d66:	4629      	mov	r1, r5
 8005d68:	f7fa fc4e 	bl	8000608 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	a14b      	add	r1, pc, #300	; (adr r1, 8005ea0 <__ieee754_pow+0x3d8>)
 8005d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d76:	f7fa fa8f 	bl	8000298 <__aeabi_dsub>
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	462b      	mov	r3, r5
 8005d7e:	f7fa fc43 	bl	8000608 <__aeabi_dmul>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	2000      	movs	r0, #0
 8005d88:	494d      	ldr	r1, [pc, #308]	; (8005ec0 <__ieee754_pow+0x3f8>)
 8005d8a:	f7fa fa85 	bl	8000298 <__aeabi_dsub>
 8005d8e:	4622      	mov	r2, r4
 8005d90:	4680      	mov	r8, r0
 8005d92:	4689      	mov	r9, r1
 8005d94:	462b      	mov	r3, r5
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa fc35 	bl	8000608 <__aeabi_dmul>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa fc2f 	bl	8000608 <__aeabi_dmul>
 8005daa:	a33f      	add	r3, pc, #252	; (adr r3, 8005ea8 <__ieee754_pow+0x3e0>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fc2a 	bl	8000608 <__aeabi_dmul>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4650      	mov	r0, sl
 8005dba:	4659      	mov	r1, fp
 8005dbc:	f7fa fa6c 	bl	8000298 <__aeabi_dsub>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	4689      	mov	r9, r1
 8005dc8:	4630      	mov	r0, r6
 8005dca:	4639      	mov	r1, r7
 8005dcc:	f7fa fa66 	bl	800029c <__adddf3>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	4632      	mov	r2, r6
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	460d      	mov	r5, r1
 8005dda:	f7fa fa5d 	bl	8000298 <__aeabi_dsub>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4640      	mov	r0, r8
 8005de4:	4649      	mov	r1, r9
 8005de6:	f7fa fa57 	bl	8000298 <__aeabi_dsub>
 8005dea:	9b04      	ldr	r3, [sp, #16]
 8005dec:	9a06      	ldr	r2, [sp, #24]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	4682      	mov	sl, r0
 8005df4:	468b      	mov	fp, r1
 8005df6:	f040 81e7 	bne.w	80061c8 <__ieee754_pow+0x700>
 8005dfa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005eb0 <__ieee754_pow+0x3e8>
 8005dfe:	eeb0 8a47 	vmov.f32	s16, s14
 8005e02:	eef0 8a67 	vmov.f32	s17, s15
 8005e06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	463b      	mov	r3, r7
 8005e10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e14:	f7fa fa40 	bl	8000298 <__aeabi_dsub>
 8005e18:	4622      	mov	r2, r4
 8005e1a:	462b      	mov	r3, r5
 8005e1c:	f7fa fbf4 	bl	8000608 <__aeabi_dmul>
 8005e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e24:	4680      	mov	r8, r0
 8005e26:	4689      	mov	r9, r1
 8005e28:	4650      	mov	r0, sl
 8005e2a:	4659      	mov	r1, fp
 8005e2c:	f7fa fbec 	bl	8000608 <__aeabi_dmul>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa fa30 	bl	800029c <__adddf3>
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	463b      	mov	r3, r7
 8005e40:	4680      	mov	r8, r0
 8005e42:	4689      	mov	r9, r1
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7fa fbde 	bl	8000608 <__aeabi_dmul>
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4604      	mov	r4, r0
 8005e50:	460d      	mov	r5, r1
 8005e52:	4602      	mov	r2, r0
 8005e54:	4649      	mov	r1, r9
 8005e56:	4640      	mov	r0, r8
 8005e58:	f7fa fa20 	bl	800029c <__adddf3>
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <__ieee754_pow+0x3fc>)
 8005e5e:	4299      	cmp	r1, r3
 8005e60:	ec45 4b19 	vmov	d9, r4, r5
 8005e64:	4606      	mov	r6, r0
 8005e66:	460f      	mov	r7, r1
 8005e68:	468b      	mov	fp, r1
 8005e6a:	f340 82f1 	ble.w	8006450 <__ieee754_pow+0x988>
 8005e6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005e72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005e76:	4303      	orrs	r3, r0
 8005e78:	f000 81e4 	beq.w	8006244 <__ieee754_pow+0x77c>
 8005e7c:	ec51 0b18 	vmov	r0, r1, d8
 8005e80:	2200      	movs	r2, #0
 8005e82:	2300      	movs	r3, #0
 8005e84:	f7fa fe32 	bl	8000aec <__aeabi_dcmplt>
 8005e88:	3800      	subs	r0, #0
 8005e8a:	bf18      	it	ne
 8005e8c:	2001      	movne	r0, #1
 8005e8e:	e72b      	b.n	8005ce8 <__ieee754_pow+0x220>
 8005e90:	60000000 	.word	0x60000000
 8005e94:	3ff71547 	.word	0x3ff71547
 8005e98:	f85ddf44 	.word	0xf85ddf44
 8005e9c:	3e54ae0b 	.word	0x3e54ae0b
 8005ea0:	55555555 	.word	0x55555555
 8005ea4:	3fd55555 	.word	0x3fd55555
 8005ea8:	652b82fe 	.word	0x652b82fe
 8005eac:	3ff71547 	.word	0x3ff71547
 8005eb0:	00000000 	.word	0x00000000
 8005eb4:	bff00000 	.word	0xbff00000
 8005eb8:	3ff00000 	.word	0x3ff00000
 8005ebc:	3fd00000 	.word	0x3fd00000
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	408fffff 	.word	0x408fffff
 8005ec8:	4bd5      	ldr	r3, [pc, #852]	; (8006220 <__ieee754_pow+0x758>)
 8005eca:	402b      	ands	r3, r5
 8005ecc:	2200      	movs	r2, #0
 8005ece:	b92b      	cbnz	r3, 8005edc <__ieee754_pow+0x414>
 8005ed0:	4bd4      	ldr	r3, [pc, #848]	; (8006224 <__ieee754_pow+0x75c>)
 8005ed2:	f7fa fb99 	bl	8000608 <__aeabi_dmul>
 8005ed6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005eda:	460c      	mov	r4, r1
 8005edc:	1523      	asrs	r3, r4, #20
 8005ede:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ee2:	4413      	add	r3, r2
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	4bd0      	ldr	r3, [pc, #832]	; (8006228 <__ieee754_pow+0x760>)
 8005ee8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005eec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005ef0:	429c      	cmp	r4, r3
 8005ef2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005ef6:	dd08      	ble.n	8005f0a <__ieee754_pow+0x442>
 8005ef8:	4bcc      	ldr	r3, [pc, #816]	; (800622c <__ieee754_pow+0x764>)
 8005efa:	429c      	cmp	r4, r3
 8005efc:	f340 8162 	ble.w	80061c4 <__ieee754_pow+0x6fc>
 8005f00:	9b05      	ldr	r3, [sp, #20]
 8005f02:	3301      	adds	r3, #1
 8005f04:	9305      	str	r3, [sp, #20]
 8005f06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005f0a:	2400      	movs	r4, #0
 8005f0c:	00e3      	lsls	r3, r4, #3
 8005f0e:	9307      	str	r3, [sp, #28]
 8005f10:	4bc7      	ldr	r3, [pc, #796]	; (8006230 <__ieee754_pow+0x768>)
 8005f12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f16:	ed93 7b00 	vldr	d7, [r3]
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	ec53 2b17 	vmov	r2, r3, d7
 8005f20:	eeb0 9a47 	vmov.f32	s18, s14
 8005f24:	eef0 9a67 	vmov.f32	s19, s15
 8005f28:	4682      	mov	sl, r0
 8005f2a:	f7fa f9b5 	bl	8000298 <__aeabi_dsub>
 8005f2e:	4652      	mov	r2, sl
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	462b      	mov	r3, r5
 8005f36:	ec51 0b19 	vmov	r0, r1, d9
 8005f3a:	f7fa f9af 	bl	800029c <__adddf3>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	2000      	movs	r0, #0
 8005f44:	49bb      	ldr	r1, [pc, #748]	; (8006234 <__ieee754_pow+0x76c>)
 8005f46:	f7fa fc89 	bl	800085c <__aeabi_ddiv>
 8005f4a:	ec41 0b1a 	vmov	d10, r0, r1
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f7fa fb57 	bl	8000608 <__aeabi_dmul>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f66:	46ab      	mov	fp, r5
 8005f68:	106d      	asrs	r5, r5, #1
 8005f6a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005f6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005f72:	ec41 0b18 	vmov	d8, r0, r1
 8005f76:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	4649      	mov	r1, r9
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	f7fa fb40 	bl	8000608 <__aeabi_dmul>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	4639      	mov	r1, r7
 8005f90:	f7fa f982 	bl	8000298 <__aeabi_dsub>
 8005f94:	ec53 2b19 	vmov	r2, r3, d9
 8005f98:	4606      	mov	r6, r0
 8005f9a:	460f      	mov	r7, r1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	f7fa f97a 	bl	8000298 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4650      	mov	r0, sl
 8005faa:	4659      	mov	r1, fp
 8005fac:	f7fa f974 	bl	8000298 <__aeabi_dsub>
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	f7fa fb28 	bl	8000608 <__aeabi_dmul>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa f96a 	bl	8000298 <__aeabi_dsub>
 8005fc4:	ec53 2b1a 	vmov	r2, r3, d10
 8005fc8:	f7fa fb1e 	bl	8000608 <__aeabi_dmul>
 8005fcc:	ec53 2b18 	vmov	r2, r3, d8
 8005fd0:	ec41 0b19 	vmov	d9, r0, r1
 8005fd4:	ec51 0b18 	vmov	r0, r1, d8
 8005fd8:	f7fa fb16 	bl	8000608 <__aeabi_dmul>
 8005fdc:	a37c      	add	r3, pc, #496	; (adr r3, 80061d0 <__ieee754_pow+0x708>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	f7fa fb0f 	bl	8000608 <__aeabi_dmul>
 8005fea:	a37b      	add	r3, pc, #492	; (adr r3, 80061d8 <__ieee754_pow+0x710>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f7fa f954 	bl	800029c <__adddf3>
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	f7fa fb06 	bl	8000608 <__aeabi_dmul>
 8005ffc:	a378      	add	r3, pc, #480	; (adr r3, 80061e0 <__ieee754_pow+0x718>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f7fa f94b 	bl	800029c <__adddf3>
 8006006:	4622      	mov	r2, r4
 8006008:	462b      	mov	r3, r5
 800600a:	f7fa fafd 	bl	8000608 <__aeabi_dmul>
 800600e:	a376      	add	r3, pc, #472	; (adr r3, 80061e8 <__ieee754_pow+0x720>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa f942 	bl	800029c <__adddf3>
 8006018:	4622      	mov	r2, r4
 800601a:	462b      	mov	r3, r5
 800601c:	f7fa faf4 	bl	8000608 <__aeabi_dmul>
 8006020:	a373      	add	r3, pc, #460	; (adr r3, 80061f0 <__ieee754_pow+0x728>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f7fa f939 	bl	800029c <__adddf3>
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	f7fa faeb 	bl	8000608 <__aeabi_dmul>
 8006032:	a371      	add	r3, pc, #452	; (adr r3, 80061f8 <__ieee754_pow+0x730>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa f930 	bl	800029c <__adddf3>
 800603c:	4622      	mov	r2, r4
 800603e:	4606      	mov	r6, r0
 8006040:	460f      	mov	r7, r1
 8006042:	462b      	mov	r3, r5
 8006044:	4620      	mov	r0, r4
 8006046:	4629      	mov	r1, r5
 8006048:	f7fa fade 	bl	8000608 <__aeabi_dmul>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4630      	mov	r0, r6
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa fad8 	bl	8000608 <__aeabi_dmul>
 8006058:	4642      	mov	r2, r8
 800605a:	4604      	mov	r4, r0
 800605c:	460d      	mov	r5, r1
 800605e:	464b      	mov	r3, r9
 8006060:	ec51 0b18 	vmov	r0, r1, d8
 8006064:	f7fa f91a 	bl	800029c <__adddf3>
 8006068:	ec53 2b19 	vmov	r2, r3, d9
 800606c:	f7fa facc 	bl	8000608 <__aeabi_dmul>
 8006070:	4622      	mov	r2, r4
 8006072:	462b      	mov	r3, r5
 8006074:	f7fa f912 	bl	800029c <__adddf3>
 8006078:	4642      	mov	r2, r8
 800607a:	4682      	mov	sl, r0
 800607c:	468b      	mov	fp, r1
 800607e:	464b      	mov	r3, r9
 8006080:	4640      	mov	r0, r8
 8006082:	4649      	mov	r1, r9
 8006084:	f7fa fac0 	bl	8000608 <__aeabi_dmul>
 8006088:	4b6b      	ldr	r3, [pc, #428]	; (8006238 <__ieee754_pow+0x770>)
 800608a:	2200      	movs	r2, #0
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	f7fa f904 	bl	800029c <__adddf3>
 8006094:	4652      	mov	r2, sl
 8006096:	465b      	mov	r3, fp
 8006098:	f7fa f900 	bl	800029c <__adddf3>
 800609c:	2000      	movs	r0, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	460d      	mov	r5, r1
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4640      	mov	r0, r8
 80060a8:	4649      	mov	r1, r9
 80060aa:	f7fa faad 	bl	8000608 <__aeabi_dmul>
 80060ae:	4b62      	ldr	r3, [pc, #392]	; (8006238 <__ieee754_pow+0x770>)
 80060b0:	4680      	mov	r8, r0
 80060b2:	4689      	mov	r9, r1
 80060b4:	2200      	movs	r2, #0
 80060b6:	4620      	mov	r0, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7fa f8ed 	bl	8000298 <__aeabi_dsub>
 80060be:	4632      	mov	r2, r6
 80060c0:	463b      	mov	r3, r7
 80060c2:	f7fa f8e9 	bl	8000298 <__aeabi_dsub>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4650      	mov	r0, sl
 80060cc:	4659      	mov	r1, fp
 80060ce:	f7fa f8e3 	bl	8000298 <__aeabi_dsub>
 80060d2:	ec53 2b18 	vmov	r2, r3, d8
 80060d6:	f7fa fa97 	bl	8000608 <__aeabi_dmul>
 80060da:	4622      	mov	r2, r4
 80060dc:	4606      	mov	r6, r0
 80060de:	460f      	mov	r7, r1
 80060e0:	462b      	mov	r3, r5
 80060e2:	ec51 0b19 	vmov	r0, r1, d9
 80060e6:	f7fa fa8f 	bl	8000608 <__aeabi_dmul>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4630      	mov	r0, r6
 80060f0:	4639      	mov	r1, r7
 80060f2:	f7fa f8d3 	bl	800029c <__adddf3>
 80060f6:	4606      	mov	r6, r0
 80060f8:	460f      	mov	r7, r1
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4640      	mov	r0, r8
 8006100:	4649      	mov	r1, r9
 8006102:	f7fa f8cb 	bl	800029c <__adddf3>
 8006106:	a33e      	add	r3, pc, #248	; (adr r3, 8006200 <__ieee754_pow+0x738>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	2000      	movs	r0, #0
 800610e:	4604      	mov	r4, r0
 8006110:	460d      	mov	r5, r1
 8006112:	f7fa fa79 	bl	8000608 <__aeabi_dmul>
 8006116:	4642      	mov	r2, r8
 8006118:	ec41 0b18 	vmov	d8, r0, r1
 800611c:	464b      	mov	r3, r9
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa f8b9 	bl	8000298 <__aeabi_dsub>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4630      	mov	r0, r6
 800612c:	4639      	mov	r1, r7
 800612e:	f7fa f8b3 	bl	8000298 <__aeabi_dsub>
 8006132:	a335      	add	r3, pc, #212	; (adr r3, 8006208 <__ieee754_pow+0x740>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa fa66 	bl	8000608 <__aeabi_dmul>
 800613c:	a334      	add	r3, pc, #208	; (adr r3, 8006210 <__ieee754_pow+0x748>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	4606      	mov	r6, r0
 8006144:	460f      	mov	r7, r1
 8006146:	4620      	mov	r0, r4
 8006148:	4629      	mov	r1, r5
 800614a:	f7fa fa5d 	bl	8000608 <__aeabi_dmul>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4630      	mov	r0, r6
 8006154:	4639      	mov	r1, r7
 8006156:	f7fa f8a1 	bl	800029c <__adddf3>
 800615a:	9a07      	ldr	r2, [sp, #28]
 800615c:	4b37      	ldr	r3, [pc, #220]	; (800623c <__ieee754_pow+0x774>)
 800615e:	4413      	add	r3, r2
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa f89a 	bl	800029c <__adddf3>
 8006168:	4682      	mov	sl, r0
 800616a:	9805      	ldr	r0, [sp, #20]
 800616c:	468b      	mov	fp, r1
 800616e:	f7fa f9e1 	bl	8000534 <__aeabi_i2d>
 8006172:	9a07      	ldr	r2, [sp, #28]
 8006174:	4b32      	ldr	r3, [pc, #200]	; (8006240 <__ieee754_pow+0x778>)
 8006176:	4413      	add	r3, r2
 8006178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800617c:	4606      	mov	r6, r0
 800617e:	460f      	mov	r7, r1
 8006180:	4652      	mov	r2, sl
 8006182:	465b      	mov	r3, fp
 8006184:	ec51 0b18 	vmov	r0, r1, d8
 8006188:	f7fa f888 	bl	800029c <__adddf3>
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	f7fa f884 	bl	800029c <__adddf3>
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	f7fa f880 	bl	800029c <__adddf3>
 800619c:	2000      	movs	r0, #0
 800619e:	4632      	mov	r2, r6
 80061a0:	463b      	mov	r3, r7
 80061a2:	4604      	mov	r4, r0
 80061a4:	460d      	mov	r5, r1
 80061a6:	f7fa f877 	bl	8000298 <__aeabi_dsub>
 80061aa:	4642      	mov	r2, r8
 80061ac:	464b      	mov	r3, r9
 80061ae:	f7fa f873 	bl	8000298 <__aeabi_dsub>
 80061b2:	ec53 2b18 	vmov	r2, r3, d8
 80061b6:	f7fa f86f 	bl	8000298 <__aeabi_dsub>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4650      	mov	r0, sl
 80061c0:	4659      	mov	r1, fp
 80061c2:	e610      	b.n	8005de6 <__ieee754_pow+0x31e>
 80061c4:	2401      	movs	r4, #1
 80061c6:	e6a1      	b.n	8005f0c <__ieee754_pow+0x444>
 80061c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006218 <__ieee754_pow+0x750>
 80061cc:	e617      	b.n	8005dfe <__ieee754_pow+0x336>
 80061ce:	bf00      	nop
 80061d0:	4a454eef 	.word	0x4a454eef
 80061d4:	3fca7e28 	.word	0x3fca7e28
 80061d8:	93c9db65 	.word	0x93c9db65
 80061dc:	3fcd864a 	.word	0x3fcd864a
 80061e0:	a91d4101 	.word	0xa91d4101
 80061e4:	3fd17460 	.word	0x3fd17460
 80061e8:	518f264d 	.word	0x518f264d
 80061ec:	3fd55555 	.word	0x3fd55555
 80061f0:	db6fabff 	.word	0xdb6fabff
 80061f4:	3fdb6db6 	.word	0x3fdb6db6
 80061f8:	33333303 	.word	0x33333303
 80061fc:	3fe33333 	.word	0x3fe33333
 8006200:	e0000000 	.word	0xe0000000
 8006204:	3feec709 	.word	0x3feec709
 8006208:	dc3a03fd 	.word	0xdc3a03fd
 800620c:	3feec709 	.word	0x3feec709
 8006210:	145b01f5 	.word	0x145b01f5
 8006214:	be3e2fe0 	.word	0xbe3e2fe0
 8006218:	00000000 	.word	0x00000000
 800621c:	3ff00000 	.word	0x3ff00000
 8006220:	7ff00000 	.word	0x7ff00000
 8006224:	43400000 	.word	0x43400000
 8006228:	0003988e 	.word	0x0003988e
 800622c:	000bb679 	.word	0x000bb679
 8006230:	08006c40 	.word	0x08006c40
 8006234:	3ff00000 	.word	0x3ff00000
 8006238:	40080000 	.word	0x40080000
 800623c:	08006c60 	.word	0x08006c60
 8006240:	08006c50 	.word	0x08006c50
 8006244:	a3b5      	add	r3, pc, #724	; (adr r3, 800651c <__ieee754_pow+0xa54>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	4640      	mov	r0, r8
 800624c:	4649      	mov	r1, r9
 800624e:	f7fa f825 	bl	800029c <__adddf3>
 8006252:	4622      	mov	r2, r4
 8006254:	ec41 0b1a 	vmov	d10, r0, r1
 8006258:	462b      	mov	r3, r5
 800625a:	4630      	mov	r0, r6
 800625c:	4639      	mov	r1, r7
 800625e:	f7fa f81b 	bl	8000298 <__aeabi_dsub>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	ec51 0b1a 	vmov	r0, r1, d10
 800626a:	f7fa fc5d 	bl	8000b28 <__aeabi_dcmpgt>
 800626e:	2800      	cmp	r0, #0
 8006270:	f47f ae04 	bne.w	8005e7c <__ieee754_pow+0x3b4>
 8006274:	4aa4      	ldr	r2, [pc, #656]	; (8006508 <__ieee754_pow+0xa40>)
 8006276:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800627a:	4293      	cmp	r3, r2
 800627c:	f340 8108 	ble.w	8006490 <__ieee754_pow+0x9c8>
 8006280:	151b      	asrs	r3, r3, #20
 8006282:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006286:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800628a:	fa4a f303 	asr.w	r3, sl, r3
 800628e:	445b      	add	r3, fp
 8006290:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006294:	4e9d      	ldr	r6, [pc, #628]	; (800650c <__ieee754_pow+0xa44>)
 8006296:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800629a:	4116      	asrs	r6, r2
 800629c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80062a0:	2000      	movs	r0, #0
 80062a2:	ea23 0106 	bic.w	r1, r3, r6
 80062a6:	f1c2 0214 	rsb	r2, r2, #20
 80062aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80062ae:	fa4a fa02 	asr.w	sl, sl, r2
 80062b2:	f1bb 0f00 	cmp.w	fp, #0
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4620      	mov	r0, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	bfb8      	it	lt
 80062c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80062c4:	f7f9 ffe8 	bl	8000298 <__aeabi_dsub>
 80062c8:	ec41 0b19 	vmov	d9, r0, r1
 80062cc:	4642      	mov	r2, r8
 80062ce:	464b      	mov	r3, r9
 80062d0:	ec51 0b19 	vmov	r0, r1, d9
 80062d4:	f7f9 ffe2 	bl	800029c <__adddf3>
 80062d8:	a37b      	add	r3, pc, #492	; (adr r3, 80064c8 <__ieee754_pow+0xa00>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	2000      	movs	r0, #0
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	f7fa f990 	bl	8000608 <__aeabi_dmul>
 80062e8:	ec53 2b19 	vmov	r2, r3, d9
 80062ec:	4606      	mov	r6, r0
 80062ee:	460f      	mov	r7, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7f9 ffd0 	bl	8000298 <__aeabi_dsub>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4640      	mov	r0, r8
 80062fe:	4649      	mov	r1, r9
 8006300:	f7f9 ffca 	bl	8000298 <__aeabi_dsub>
 8006304:	a372      	add	r3, pc, #456	; (adr r3, 80064d0 <__ieee754_pow+0xa08>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7fa f97d 	bl	8000608 <__aeabi_dmul>
 800630e:	a372      	add	r3, pc, #456	; (adr r3, 80064d8 <__ieee754_pow+0xa10>)
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	4680      	mov	r8, r0
 8006316:	4689      	mov	r9, r1
 8006318:	4620      	mov	r0, r4
 800631a:	4629      	mov	r1, r5
 800631c:	f7fa f974 	bl	8000608 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4640      	mov	r0, r8
 8006326:	4649      	mov	r1, r9
 8006328:	f7f9 ffb8 	bl	800029c <__adddf3>
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4630      	mov	r0, r6
 8006336:	4639      	mov	r1, r7
 8006338:	f7f9 ffb0 	bl	800029c <__adddf3>
 800633c:	4632      	mov	r2, r6
 800633e:	463b      	mov	r3, r7
 8006340:	4680      	mov	r8, r0
 8006342:	4689      	mov	r9, r1
 8006344:	f7f9 ffa8 	bl	8000298 <__aeabi_dsub>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	f7f9 ffa2 	bl	8000298 <__aeabi_dsub>
 8006354:	4642      	mov	r2, r8
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	464b      	mov	r3, r9
 800635c:	4640      	mov	r0, r8
 800635e:	4649      	mov	r1, r9
 8006360:	f7fa f952 	bl	8000608 <__aeabi_dmul>
 8006364:	a35e      	add	r3, pc, #376	; (adr r3, 80064e0 <__ieee754_pow+0xa18>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	4604      	mov	r4, r0
 800636c:	460d      	mov	r5, r1
 800636e:	f7fa f94b 	bl	8000608 <__aeabi_dmul>
 8006372:	a35d      	add	r3, pc, #372	; (adr r3, 80064e8 <__ieee754_pow+0xa20>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f7f9 ff8e 	bl	8000298 <__aeabi_dsub>
 800637c:	4622      	mov	r2, r4
 800637e:	462b      	mov	r3, r5
 8006380:	f7fa f942 	bl	8000608 <__aeabi_dmul>
 8006384:	a35a      	add	r3, pc, #360	; (adr r3, 80064f0 <__ieee754_pow+0xa28>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f7f9 ff87 	bl	800029c <__adddf3>
 800638e:	4622      	mov	r2, r4
 8006390:	462b      	mov	r3, r5
 8006392:	f7fa f939 	bl	8000608 <__aeabi_dmul>
 8006396:	a358      	add	r3, pc, #352	; (adr r3, 80064f8 <__ieee754_pow+0xa30>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7f9 ff7c 	bl	8000298 <__aeabi_dsub>
 80063a0:	4622      	mov	r2, r4
 80063a2:	462b      	mov	r3, r5
 80063a4:	f7fa f930 	bl	8000608 <__aeabi_dmul>
 80063a8:	a355      	add	r3, pc, #340	; (adr r3, 8006500 <__ieee754_pow+0xa38>)
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	f7f9 ff75 	bl	800029c <__adddf3>
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	f7fa f927 	bl	8000608 <__aeabi_dmul>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4640      	mov	r0, r8
 80063c0:	4649      	mov	r1, r9
 80063c2:	f7f9 ff69 	bl	8000298 <__aeabi_dsub>
 80063c6:	4604      	mov	r4, r0
 80063c8:	460d      	mov	r5, r1
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7fa f919 	bl	8000608 <__aeabi_dmul>
 80063d6:	2200      	movs	r2, #0
 80063d8:	ec41 0b19 	vmov	d9, r0, r1
 80063dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063e0:	4620      	mov	r0, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	f7f9 ff58 	bl	8000298 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	ec51 0b19 	vmov	r0, r1, d9
 80063f0:	f7fa fa34 	bl	800085c <__aeabi_ddiv>
 80063f4:	4632      	mov	r2, r6
 80063f6:	4604      	mov	r4, r0
 80063f8:	460d      	mov	r5, r1
 80063fa:	463b      	mov	r3, r7
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7fa f902 	bl	8000608 <__aeabi_dmul>
 8006404:	4632      	mov	r2, r6
 8006406:	463b      	mov	r3, r7
 8006408:	f7f9 ff48 	bl	800029c <__adddf3>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	f7f9 ff40 	bl	8000298 <__aeabi_dsub>
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	f7f9 ff3c 	bl	8000298 <__aeabi_dsub>
 8006420:	460b      	mov	r3, r1
 8006422:	4602      	mov	r2, r0
 8006424:	493a      	ldr	r1, [pc, #232]	; (8006510 <__ieee754_pow+0xa48>)
 8006426:	2000      	movs	r0, #0
 8006428:	f7f9 ff36 	bl	8000298 <__aeabi_dsub>
 800642c:	ec41 0b10 	vmov	d0, r0, r1
 8006430:	ee10 3a90 	vmov	r3, s1
 8006434:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643c:	da2b      	bge.n	8006496 <__ieee754_pow+0x9ce>
 800643e:	4650      	mov	r0, sl
 8006440:	f000 f966 	bl	8006710 <scalbn>
 8006444:	ec51 0b10 	vmov	r0, r1, d0
 8006448:	ec53 2b18 	vmov	r2, r3, d8
 800644c:	f7ff bbed 	b.w	8005c2a <__ieee754_pow+0x162>
 8006450:	4b30      	ldr	r3, [pc, #192]	; (8006514 <__ieee754_pow+0xa4c>)
 8006452:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006456:	429e      	cmp	r6, r3
 8006458:	f77f af0c 	ble.w	8006274 <__ieee754_pow+0x7ac>
 800645c:	4b2e      	ldr	r3, [pc, #184]	; (8006518 <__ieee754_pow+0xa50>)
 800645e:	440b      	add	r3, r1
 8006460:	4303      	orrs	r3, r0
 8006462:	d009      	beq.n	8006478 <__ieee754_pow+0x9b0>
 8006464:	ec51 0b18 	vmov	r0, r1, d8
 8006468:	2200      	movs	r2, #0
 800646a:	2300      	movs	r3, #0
 800646c:	f7fa fb3e 	bl	8000aec <__aeabi_dcmplt>
 8006470:	3800      	subs	r0, #0
 8006472:	bf18      	it	ne
 8006474:	2001      	movne	r0, #1
 8006476:	e447      	b.n	8005d08 <__ieee754_pow+0x240>
 8006478:	4622      	mov	r2, r4
 800647a:	462b      	mov	r3, r5
 800647c:	f7f9 ff0c 	bl	8000298 <__aeabi_dsub>
 8006480:	4642      	mov	r2, r8
 8006482:	464b      	mov	r3, r9
 8006484:	f7fa fb46 	bl	8000b14 <__aeabi_dcmpge>
 8006488:	2800      	cmp	r0, #0
 800648a:	f43f aef3 	beq.w	8006274 <__ieee754_pow+0x7ac>
 800648e:	e7e9      	b.n	8006464 <__ieee754_pow+0x99c>
 8006490:	f04f 0a00 	mov.w	sl, #0
 8006494:	e71a      	b.n	80062cc <__ieee754_pow+0x804>
 8006496:	ec51 0b10 	vmov	r0, r1, d0
 800649a:	4619      	mov	r1, r3
 800649c:	e7d4      	b.n	8006448 <__ieee754_pow+0x980>
 800649e:	491c      	ldr	r1, [pc, #112]	; (8006510 <__ieee754_pow+0xa48>)
 80064a0:	2000      	movs	r0, #0
 80064a2:	f7ff bb30 	b.w	8005b06 <__ieee754_pow+0x3e>
 80064a6:	2000      	movs	r0, #0
 80064a8:	2100      	movs	r1, #0
 80064aa:	f7ff bb2c 	b.w	8005b06 <__ieee754_pow+0x3e>
 80064ae:	4630      	mov	r0, r6
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7ff bb28 	b.w	8005b06 <__ieee754_pow+0x3e>
 80064b6:	9204      	str	r2, [sp, #16]
 80064b8:	f7ff bb7a 	b.w	8005bb0 <__ieee754_pow+0xe8>
 80064bc:	2300      	movs	r3, #0
 80064be:	f7ff bb64 	b.w	8005b8a <__ieee754_pow+0xc2>
 80064c2:	bf00      	nop
 80064c4:	f3af 8000 	nop.w
 80064c8:	00000000 	.word	0x00000000
 80064cc:	3fe62e43 	.word	0x3fe62e43
 80064d0:	fefa39ef 	.word	0xfefa39ef
 80064d4:	3fe62e42 	.word	0x3fe62e42
 80064d8:	0ca86c39 	.word	0x0ca86c39
 80064dc:	be205c61 	.word	0xbe205c61
 80064e0:	72bea4d0 	.word	0x72bea4d0
 80064e4:	3e663769 	.word	0x3e663769
 80064e8:	c5d26bf1 	.word	0xc5d26bf1
 80064ec:	3ebbbd41 	.word	0x3ebbbd41
 80064f0:	af25de2c 	.word	0xaf25de2c
 80064f4:	3f11566a 	.word	0x3f11566a
 80064f8:	16bebd93 	.word	0x16bebd93
 80064fc:	3f66c16c 	.word	0x3f66c16c
 8006500:	5555553e 	.word	0x5555553e
 8006504:	3fc55555 	.word	0x3fc55555
 8006508:	3fe00000 	.word	0x3fe00000
 800650c:	000fffff 	.word	0x000fffff
 8006510:	3ff00000 	.word	0x3ff00000
 8006514:	4090cbff 	.word	0x4090cbff
 8006518:	3f6f3400 	.word	0x3f6f3400
 800651c:	652b82fe 	.word	0x652b82fe
 8006520:	3c971547 	.word	0x3c971547

08006524 <__ieee754_sqrt>:
 8006524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006528:	ec55 4b10 	vmov	r4, r5, d0
 800652c:	4e55      	ldr	r6, [pc, #340]	; (8006684 <__ieee754_sqrt+0x160>)
 800652e:	43ae      	bics	r6, r5
 8006530:	ee10 0a10 	vmov	r0, s0
 8006534:	ee10 3a10 	vmov	r3, s0
 8006538:	462a      	mov	r2, r5
 800653a:	4629      	mov	r1, r5
 800653c:	d110      	bne.n	8006560 <__ieee754_sqrt+0x3c>
 800653e:	ee10 2a10 	vmov	r2, s0
 8006542:	462b      	mov	r3, r5
 8006544:	f7fa f860 	bl	8000608 <__aeabi_dmul>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4620      	mov	r0, r4
 800654e:	4629      	mov	r1, r5
 8006550:	f7f9 fea4 	bl	800029c <__adddf3>
 8006554:	4604      	mov	r4, r0
 8006556:	460d      	mov	r5, r1
 8006558:	ec45 4b10 	vmov	d0, r4, r5
 800655c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006560:	2d00      	cmp	r5, #0
 8006562:	dc10      	bgt.n	8006586 <__ieee754_sqrt+0x62>
 8006564:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006568:	4330      	orrs	r0, r6
 800656a:	d0f5      	beq.n	8006558 <__ieee754_sqrt+0x34>
 800656c:	b15d      	cbz	r5, 8006586 <__ieee754_sqrt+0x62>
 800656e:	ee10 2a10 	vmov	r2, s0
 8006572:	462b      	mov	r3, r5
 8006574:	ee10 0a10 	vmov	r0, s0
 8006578:	f7f9 fe8e 	bl	8000298 <__aeabi_dsub>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	f7fa f96c 	bl	800085c <__aeabi_ddiv>
 8006584:	e7e6      	b.n	8006554 <__ieee754_sqrt+0x30>
 8006586:	1512      	asrs	r2, r2, #20
 8006588:	d074      	beq.n	8006674 <__ieee754_sqrt+0x150>
 800658a:	07d4      	lsls	r4, r2, #31
 800658c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006590:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006598:	bf5e      	ittt	pl
 800659a:	0fda      	lsrpl	r2, r3, #31
 800659c:	005b      	lslpl	r3, r3, #1
 800659e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80065a2:	2400      	movs	r4, #0
 80065a4:	0fda      	lsrs	r2, r3, #31
 80065a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80065aa:	107f      	asrs	r7, r7, #1
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	2516      	movs	r5, #22
 80065b0:	4620      	mov	r0, r4
 80065b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80065b6:	1886      	adds	r6, r0, r2
 80065b8:	428e      	cmp	r6, r1
 80065ba:	bfde      	ittt	le
 80065bc:	1b89      	suble	r1, r1, r6
 80065be:	18b0      	addle	r0, r6, r2
 80065c0:	18a4      	addle	r4, r4, r2
 80065c2:	0049      	lsls	r1, r1, #1
 80065c4:	3d01      	subs	r5, #1
 80065c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80065ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80065ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80065d2:	d1f0      	bne.n	80065b6 <__ieee754_sqrt+0x92>
 80065d4:	462a      	mov	r2, r5
 80065d6:	f04f 0e20 	mov.w	lr, #32
 80065da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80065de:	4281      	cmp	r1, r0
 80065e0:	eb06 0c05 	add.w	ip, r6, r5
 80065e4:	dc02      	bgt.n	80065ec <__ieee754_sqrt+0xc8>
 80065e6:	d113      	bne.n	8006610 <__ieee754_sqrt+0xec>
 80065e8:	459c      	cmp	ip, r3
 80065ea:	d811      	bhi.n	8006610 <__ieee754_sqrt+0xec>
 80065ec:	f1bc 0f00 	cmp.w	ip, #0
 80065f0:	eb0c 0506 	add.w	r5, ip, r6
 80065f4:	da43      	bge.n	800667e <__ieee754_sqrt+0x15a>
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	db41      	blt.n	800667e <__ieee754_sqrt+0x15a>
 80065fa:	f100 0801 	add.w	r8, r0, #1
 80065fe:	1a09      	subs	r1, r1, r0
 8006600:	459c      	cmp	ip, r3
 8006602:	bf88      	it	hi
 8006604:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8006608:	eba3 030c 	sub.w	r3, r3, ip
 800660c:	4432      	add	r2, r6
 800660e:	4640      	mov	r0, r8
 8006610:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006614:	f1be 0e01 	subs.w	lr, lr, #1
 8006618:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800661c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006620:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006624:	d1db      	bne.n	80065de <__ieee754_sqrt+0xba>
 8006626:	430b      	orrs	r3, r1
 8006628:	d006      	beq.n	8006638 <__ieee754_sqrt+0x114>
 800662a:	1c50      	adds	r0, r2, #1
 800662c:	bf13      	iteet	ne
 800662e:	3201      	addne	r2, #1
 8006630:	3401      	addeq	r4, #1
 8006632:	4672      	moveq	r2, lr
 8006634:	f022 0201 	bicne.w	r2, r2, #1
 8006638:	1063      	asrs	r3, r4, #1
 800663a:	0852      	lsrs	r2, r2, #1
 800663c:	07e1      	lsls	r1, r4, #31
 800663e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006642:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006646:	bf48      	it	mi
 8006648:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800664c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006650:	4614      	mov	r4, r2
 8006652:	e781      	b.n	8006558 <__ieee754_sqrt+0x34>
 8006654:	0ad9      	lsrs	r1, r3, #11
 8006656:	3815      	subs	r0, #21
 8006658:	055b      	lsls	r3, r3, #21
 800665a:	2900      	cmp	r1, #0
 800665c:	d0fa      	beq.n	8006654 <__ieee754_sqrt+0x130>
 800665e:	02cd      	lsls	r5, r1, #11
 8006660:	d50a      	bpl.n	8006678 <__ieee754_sqrt+0x154>
 8006662:	f1c2 0420 	rsb	r4, r2, #32
 8006666:	fa23 f404 	lsr.w	r4, r3, r4
 800666a:	1e55      	subs	r5, r2, #1
 800666c:	4093      	lsls	r3, r2
 800666e:	4321      	orrs	r1, r4
 8006670:	1b42      	subs	r2, r0, r5
 8006672:	e78a      	b.n	800658a <__ieee754_sqrt+0x66>
 8006674:	4610      	mov	r0, r2
 8006676:	e7f0      	b.n	800665a <__ieee754_sqrt+0x136>
 8006678:	0049      	lsls	r1, r1, #1
 800667a:	3201      	adds	r2, #1
 800667c:	e7ef      	b.n	800665e <__ieee754_sqrt+0x13a>
 800667e:	4680      	mov	r8, r0
 8006680:	e7bd      	b.n	80065fe <__ieee754_sqrt+0xda>
 8006682:	bf00      	nop
 8006684:	7ff00000 	.word	0x7ff00000

08006688 <with_errno>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	460d      	mov	r5, r1
 800668e:	4616      	mov	r6, r2
 8006690:	f7fc fc18 	bl	8002ec4 <__errno>
 8006694:	4629      	mov	r1, r5
 8006696:	6006      	str	r6, [r0, #0]
 8006698:	4620      	mov	r0, r4
 800669a:	bd70      	pop	{r4, r5, r6, pc}

0800669c <xflow>:
 800669c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800669e:	4614      	mov	r4, r2
 80066a0:	461d      	mov	r5, r3
 80066a2:	b108      	cbz	r0, 80066a8 <xflow+0xc>
 80066a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	e9cd 2300 	strd	r2, r3, [sp]
 80066ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066b0:	4620      	mov	r0, r4
 80066b2:	4629      	mov	r1, r5
 80066b4:	f7f9 ffa8 	bl	8000608 <__aeabi_dmul>
 80066b8:	2222      	movs	r2, #34	; 0x22
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c0:	f7ff bfe2 	b.w	8006688 <with_errno>

080066c4 <__math_uflow>:
 80066c4:	b508      	push	{r3, lr}
 80066c6:	2200      	movs	r2, #0
 80066c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066cc:	f7ff ffe6 	bl	800669c <xflow>
 80066d0:	ec41 0b10 	vmov	d0, r0, r1
 80066d4:	bd08      	pop	{r3, pc}

080066d6 <__math_oflow>:
 80066d6:	b508      	push	{r3, lr}
 80066d8:	2200      	movs	r2, #0
 80066da:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80066de:	f7ff ffdd 	bl	800669c <xflow>
 80066e2:	ec41 0b10 	vmov	d0, r0, r1
 80066e6:	bd08      	pop	{r3, pc}

080066e8 <fabs>:
 80066e8:	ec51 0b10 	vmov	r0, r1, d0
 80066ec:	ee10 2a10 	vmov	r2, s0
 80066f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066f4:	ec43 2b10 	vmov	d0, r2, r3
 80066f8:	4770      	bx	lr

080066fa <finite>:
 80066fa:	b082      	sub	sp, #8
 80066fc:	ed8d 0b00 	vstr	d0, [sp]
 8006700:	9801      	ldr	r0, [sp, #4]
 8006702:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006706:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800670a:	0fc0      	lsrs	r0, r0, #31
 800670c:	b002      	add	sp, #8
 800670e:	4770      	bx	lr

08006710 <scalbn>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	ec55 4b10 	vmov	r4, r5, d0
 8006716:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800671a:	4606      	mov	r6, r0
 800671c:	462b      	mov	r3, r5
 800671e:	b99a      	cbnz	r2, 8006748 <scalbn+0x38>
 8006720:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006724:	4323      	orrs	r3, r4
 8006726:	d036      	beq.n	8006796 <scalbn+0x86>
 8006728:	4b39      	ldr	r3, [pc, #228]	; (8006810 <scalbn+0x100>)
 800672a:	4629      	mov	r1, r5
 800672c:	ee10 0a10 	vmov	r0, s0
 8006730:	2200      	movs	r2, #0
 8006732:	f7f9 ff69 	bl	8000608 <__aeabi_dmul>
 8006736:	4b37      	ldr	r3, [pc, #220]	; (8006814 <scalbn+0x104>)
 8006738:	429e      	cmp	r6, r3
 800673a:	4604      	mov	r4, r0
 800673c:	460d      	mov	r5, r1
 800673e:	da10      	bge.n	8006762 <scalbn+0x52>
 8006740:	a32b      	add	r3, pc, #172	; (adr r3, 80067f0 <scalbn+0xe0>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	e03a      	b.n	80067be <scalbn+0xae>
 8006748:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800674c:	428a      	cmp	r2, r1
 800674e:	d10c      	bne.n	800676a <scalbn+0x5a>
 8006750:	ee10 2a10 	vmov	r2, s0
 8006754:	4620      	mov	r0, r4
 8006756:	4629      	mov	r1, r5
 8006758:	f7f9 fda0 	bl	800029c <__adddf3>
 800675c:	4604      	mov	r4, r0
 800675e:	460d      	mov	r5, r1
 8006760:	e019      	b.n	8006796 <scalbn+0x86>
 8006762:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006766:	460b      	mov	r3, r1
 8006768:	3a36      	subs	r2, #54	; 0x36
 800676a:	4432      	add	r2, r6
 800676c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006770:	428a      	cmp	r2, r1
 8006772:	dd08      	ble.n	8006786 <scalbn+0x76>
 8006774:	2d00      	cmp	r5, #0
 8006776:	a120      	add	r1, pc, #128	; (adr r1, 80067f8 <scalbn+0xe8>)
 8006778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800677c:	da1c      	bge.n	80067b8 <scalbn+0xa8>
 800677e:	a120      	add	r1, pc, #128	; (adr r1, 8006800 <scalbn+0xf0>)
 8006780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006784:	e018      	b.n	80067b8 <scalbn+0xa8>
 8006786:	2a00      	cmp	r2, #0
 8006788:	dd08      	ble.n	800679c <scalbn+0x8c>
 800678a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800678e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006792:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006796:	ec45 4b10 	vmov	d0, r4, r5
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80067a0:	da19      	bge.n	80067d6 <scalbn+0xc6>
 80067a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80067a6:	429e      	cmp	r6, r3
 80067a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80067ac:	dd0a      	ble.n	80067c4 <scalbn+0xb4>
 80067ae:	a112      	add	r1, pc, #72	; (adr r1, 80067f8 <scalbn+0xe8>)
 80067b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e2      	bne.n	800677e <scalbn+0x6e>
 80067b8:	a30f      	add	r3, pc, #60	; (adr r3, 80067f8 <scalbn+0xe8>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 ff23 	bl	8000608 <__aeabi_dmul>
 80067c2:	e7cb      	b.n	800675c <scalbn+0x4c>
 80067c4:	a10a      	add	r1, pc, #40	; (adr r1, 80067f0 <scalbn+0xe0>)
 80067c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0b8      	beq.n	8006740 <scalbn+0x30>
 80067ce:	a10e      	add	r1, pc, #56	; (adr r1, 8006808 <scalbn+0xf8>)
 80067d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d4:	e7b4      	b.n	8006740 <scalbn+0x30>
 80067d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067da:	3236      	adds	r2, #54	; 0x36
 80067dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80067e4:	4620      	mov	r0, r4
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <scalbn+0x108>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	e7e8      	b.n	80067be <scalbn+0xae>
 80067ec:	f3af 8000 	nop.w
 80067f0:	c2f8f359 	.word	0xc2f8f359
 80067f4:	01a56e1f 	.word	0x01a56e1f
 80067f8:	8800759c 	.word	0x8800759c
 80067fc:	7e37e43c 	.word	0x7e37e43c
 8006800:	8800759c 	.word	0x8800759c
 8006804:	fe37e43c 	.word	0xfe37e43c
 8006808:	c2f8f359 	.word	0xc2f8f359
 800680c:	81a56e1f 	.word	0x81a56e1f
 8006810:	43500000 	.word	0x43500000
 8006814:	ffff3cb0 	.word	0xffff3cb0
 8006818:	3c900000 	.word	0x3c900000

0800681c <_sbrk>:
 800681c:	4a04      	ldr	r2, [pc, #16]	; (8006830 <_sbrk+0x14>)
 800681e:	6811      	ldr	r1, [r2, #0]
 8006820:	4603      	mov	r3, r0
 8006822:	b909      	cbnz	r1, 8006828 <_sbrk+0xc>
 8006824:	4903      	ldr	r1, [pc, #12]	; (8006834 <_sbrk+0x18>)
 8006826:	6011      	str	r1, [r2, #0]
 8006828:	6810      	ldr	r0, [r2, #0]
 800682a:	4403      	add	r3, r0
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	4770      	bx	lr
 8006830:	2000030c 	.word	0x2000030c
 8006834:	20000310 	.word	0x20000310

08006838 <_init>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr

08006844 <_fini>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr
