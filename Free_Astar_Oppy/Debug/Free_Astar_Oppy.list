
Free_Astar_Oppy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08008ab8  08008ab8  00018ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca8  08008ca8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008ca8  08008ca8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ca8  08008ca8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f20  20000078  08008d24  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20012f98  08008d24  00022f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009483  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c77  00000000  00000000  00029527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bd0  00000000  00000000  0002c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a251  00000000  00000000  0003dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060a8a  00000000  00000000  00047fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8a63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003174  00000000  00000000  000a8ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008aa0 	.word	0x08008aa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008aa0 	.word	0x08008aa0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
uint16_t getRandomNumber(void);
void led_Callback (TimerHandle_t xTimer);

/* Funcion principal. Aca es donde sucede todo!! */
int main(void)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af02      	add	r7, sp, #8
	 * - Encender la FPU
	 * - Activar el contador de Ticks para debuging
	 * - Configurar adecuadamente el reloj principal del equipo para 100MHz
	 * - Lllamar a la funcion que inicializa nuestros perifericos (initSystem)
	 * */
	SCB -> CPACR |= (0xF << 20);
 8000c4e:	4b54      	ldr	r3, [pc, #336]	; (8000da0 <main+0x158>)
 8000c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c54:	4a52      	ldr	r2, [pc, #328]	; (8000da0 <main+0x158>)
 8000c56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	DWT -> CTRL    |= (1 << 0);
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <main+0x15c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <main+0x15c>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6013      	str	r3, [r2, #0]
	initSystem();
 8000c6a:	f000 f8b7 	bl	8000ddc <initSystem>

	/* Crear las tareas que necesita el programa*/
	/* Creando la Tarea Counter */
	xReturned = xTaskCreate(vTask_Counting,
 8000c6e:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <main+0x160>)
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2300      	movs	r3, #0
 8000c78:	22c8      	movs	r2, #200	; 0xc8
 8000c7a:	494c      	ldr	r1, [pc, #304]	; (8000dac <main+0x164>)
 8000c7c:	484c      	ldr	r0, [pc, #304]	; (8000db0 <main+0x168>)
 8000c7e:	f001 fa87 	bl	8002190 <xTaskCreate>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a4b      	ldr	r2, [pc, #300]	; (8000db4 <main+0x16c>)
 8000c86:	6013      	str	r3, [r2, #0]
							NULL,
							1,
							&xHandleTask_Counting);


    configASSERT(xReturned == pdPASS);
 8000c88:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <main+0x16c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d00a      	beq.n	8000ca6 <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c94:	f383 8811 	msr	BASEPRI, r3
 8000c98:	f3bf 8f6f 	isb	sy
 8000c9c:	f3bf 8f4f 	dsb	sy
 8000ca0:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000ca2:	bf00      	nop
 8000ca4:	e7fe      	b.n	8000ca4 <main+0x5c>

    /* Creando la Tarea Print */
    xReturned = xTaskCreate (vTask_Print,
 8000ca6:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <main+0x170>)
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2303      	movs	r3, #3
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	22c8      	movs	r2, #200	; 0xc8
 8000cb2:	4942      	ldr	r1, [pc, #264]	; (8000dbc <main+0x174>)
 8000cb4:	4842      	ldr	r0, [pc, #264]	; (8000dc0 <main+0x178>)
 8000cb6:	f001 fa6b 	bl	8002190 <xTaskCreate>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a3d      	ldr	r2, [pc, #244]	; (8000db4 <main+0x16c>)
 8000cbe:	6013      	str	r3, [r2, #0]
							STACK_SIZE,
							NULL,
							3,
							&xHandleTask_Print);

    configASSERT(xReturned == pdPASS);
 8000cc0:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <main+0x16c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d00a      	beq.n	8000cde <main+0x96>
        __asm volatile
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	613b      	str	r3, [r7, #16]
    }
 8000cda:	bf00      	nop
 8000cdc:	e7fe      	b.n	8000cdc <main+0x94>

    /* Crear la cola para la tarea de impresion*/
    xQueue_Print = xQueueCreate(10, sizeof(size_t));
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f000 fbe8 	bl	80014b8 <xQueueGenericCreate>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <main+0x17c>)
 8000cec:	6013      	str	r3, [r2, #0]
    configASSERT(xQueue_Print != NULL);  // verificamos que se ha creado la queue correctamente.
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <main+0x17c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10a      	bne.n	8000d0c <main+0xc4>
        __asm volatile
 8000cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfa:	f383 8811 	msr	BASEPRI, r3
 8000cfe:	f3bf 8f6f 	isb	sy
 8000d02:	f3bf 8f4f 	dsb	sy
 8000d06:	60fb      	str	r3, [r7, #12]
    }
 8000d08:	bf00      	nop
 8000d0a:	e7fe      	b.n	8000d0a <main+0xc2>

    /* Creando el semaforo binario (1)*/
   	xBinarySemaphore = xSemaphoreCreateBinary();
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fbd1 	bl	80014b8 <xQueueGenericCreate>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <main+0x180>)
 8000d1a:	6013      	str	r3, [r2, #0]
   	configASSERT(xBinarySemaphore != NULL);  // verificamos que se ha creado la queue correctamente.
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <main+0x180>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10a      	bne.n	8000d3a <main+0xf2>
        __asm volatile
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	60bb      	str	r3, [r7, #8]
    }
 8000d36:	bf00      	nop
 8000d38:	e7fe      	b.n	8000d38 <main+0xf0>

   	/* Creando el semaforo counter de 10 elementos, que inicia en 0 (1)*/
   	xCounterSemaphore = xSemaphoreCreateCounting(10,0);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	f000 fc3d 	bl	80015bc <xQueueCreateCountingSemaphore>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <main+0x184>)
 8000d46:	6013      	str	r3, [r2, #0]
   	configASSERT(xCounterSemaphore != NULL);  // verificamos que se ha creado la queue correctamente.
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <main+0x184>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10a      	bne.n	8000d66 <main+0x11e>
        __asm volatile
 8000d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d54:	f383 8811 	msr	BASEPRI, r3
 8000d58:	f3bf 8f6f 	isb	sy
 8000d5c:	f3bf 8f4f 	dsb	sy
 8000d60:	607b      	str	r3, [r7, #4]
    }
 8000d62:	bf00      	nop
 8000d64:	e7fe      	b.n	8000d64 <main+0x11c>

    /* Creando el timer que controla el blinky del led de estado, con un periodo de 350ms (1)*/
   	xTimerHandler = xTimerCreate("ledTimer",
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <main+0x188>)
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d72:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <main+0x18c>)
 8000d74:	f002 f998 	bl	80030a8 <xTimerCreate>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <main+0x190>)
 8000d7c:	6013      	str	r3, [r2, #0]
								pdTRUE,
								(void*) 0,
								led_Callback);

   	/* Activar el Timer que controla el led (1)*/
   	xTimerStart(xTimerHandler, portMAX_DELAY);
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <main+0x190>)
 8000d80:	681c      	ldr	r4, [r3, #0]
 8000d82:	f001 fc47 	bl	8002614 <xTaskGetTickCount>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2101      	movs	r1, #1
 8000d92:	4620      	mov	r0, r4
 8000d94:	f002 f9e4 	bl	8003160 <xTimerGenericCommand>

    /* Start the created tasks running. */
    vTaskStartScheduler();
 8000d98:	f001 fb40 	bl	800241c <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000d9c:	e7fe      	b.n	8000d9c <main+0x154>
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00
 8000da4:	e0001000 	.word	0xe0001000
 8000da8:	20000174 	.word	0x20000174
 8000dac:	08008acc 	.word	0x08008acc
 8000db0:	08000f39 	.word	0x08000f39
 8000db4:	20000164 	.word	0x20000164
 8000db8:	20000178 	.word	0x20000178
 8000dbc:	08008adc 	.word	0x08008adc
 8000dc0:	08000fbd 	.word	0x08000fbd
 8000dc4:	2000017c 	.word	0x2000017c
 8000dc8:	20000168 	.word	0x20000168
 8000dcc:	2000016c 	.word	0x2000016c
 8000dd0:	08001031 	.word	0x08001031
 8000dd4:	08008ae8 	.word	0x08008ae8
 8000dd8:	20000170 	.word	0x20000170

08000ddc <initSystem>:
}




void initSystem(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

	//Habilitamos la maxima velocidad del micro
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000de0:	2008      	movs	r0, #8
 8000de2:	f004 fb8f 	bl	8005504 <RCC_enableMaxFrequencies>


	// Configuramos el pin del led de estado A5
	handlerLedPin.pGPIOx = GPIOA;
 8000de6:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <initSystem+0x134>)
 8000de8:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <initSystem+0x138>)
 8000dea:	601a      	str	r2, [r3, #0]
	handlerLedPin.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000dec:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <initSystem+0x134>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	725a      	strb	r2, [r3, #9]
	handlerLedPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000df2:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <initSystem+0x134>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	715a      	strb	r2, [r3, #5]
	handlerLedPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <initSystem+0x134>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	721a      	strb	r2, [r3, #8]
	handlerLedPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <initSystem+0x134>)
 8000e00:	2205      	movs	r2, #5
 8000e02:	711a      	strb	r2, [r3, #4]
	handlerLedPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e04:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <initSystem+0x134>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	71da      	strb	r2, [r3, #7]
	handlerLedPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000e0a:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <initSystem+0x134>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerLedPin);
 8000e10:	483f      	ldr	r0, [pc, #252]	; (8000f10 <initSystem+0x134>)
 8000e12:	f004 f9e9 	bl	80051e8 <GPIO_Config>
	GPIO_WritePin(&handlerLedPin, RESET);
 8000e16:	2100      	movs	r1, #0
 8000e18:	483d      	ldr	r0, [pc, #244]	; (8000f10 <initSystem+0x134>)
 8000e1a:	f004 fb0f 	bl	800543c <GPIO_WritePin>


	// configuramos el USART 2 pRA COMUNICACION SERIAL
	handlerPinRx.pGPIOx = GPIOA;
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <initSystem+0x13c>)
 8000e20:	4a3c      	ldr	r2, [pc, #240]	; (8000f14 <initSystem+0x138>)
 8000e22:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <initSystem+0x13c>)
 8000e26:	2207      	movs	r2, #7
 8000e28:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <initSystem+0x13c>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <initSystem+0x13c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <initSystem+0x13c>)
 8000e38:	2203      	movs	r2, #3
 8000e3a:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e3c:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <initSystem+0x13c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <initSystem+0x13c>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8000e48:	4833      	ldr	r0, [pc, #204]	; (8000f18 <initSystem+0x13c>)
 8000e4a:	f004 f9cd 	bl	80051e8 <GPIO_Config>


	handlerPinTx.pGPIOx = GPIOA;
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <initSystem+0x140>)
 8000e50:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <initSystem+0x138>)
 8000e52:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <initSystem+0x140>)
 8000e56:	2207      	movs	r2, #7
 8000e58:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <initSystem+0x140>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000e60:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <initSystem+0x140>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <initSystem+0x140>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <initSystem+0x140>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <initSystem+0x140>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8000e78:	4828      	ldr	r0, [pc, #160]	; (8000f1c <initSystem+0x140>)
 8000e7a:	f004 f9b5 	bl	80051e8 <GPIO_Config>

	handlerUART.ptrUSARTx                      = USART2;
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <initSystem+0x144>)
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <initSystem+0x148>)
 8000e82:	601a      	str	r2, [r3, #0]
	handlerUART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <initSystem+0x144>)
 8000e86:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <initSystem+0x14c>)
 8000e88:	60da      	str	r2, [r3, #12]
	handlerUART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <initSystem+0x144>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	71da      	strb	r2, [r3, #7]
	handlerUART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <initSystem+0x144>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	715a      	strb	r2, [r3, #5]
	handlerUART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <initSystem+0x144>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	711a      	strb	r2, [r3, #4]
	handlerUART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <initSystem+0x144>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	719a      	strb	r2, [r3, #6]
	handlerUART.USART_Config.USART_parity      = USART_PARITY_NONE;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <initSystem+0x144>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	725a      	strb	r2, [r3, #9]
	handlerUART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <initSystem+0x144>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	729a      	strb	r2, [r3, #10]
	handlerUART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <initSystem+0x144>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUART);
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <initSystem+0x144>)
 8000eb6:	f004 fea1 	bl	8005bfc <USART_Config>
	usart_Set_Priority(&handlerUART, e_USART_PRIORITY_6);
 8000eba:	2106      	movs	r1, #6
 8000ebc:	4818      	ldr	r0, [pc, #96]	; (8000f20 <initSystem+0x144>)
 8000ebe:	f005 fb43 	bl	8006548 <usart_Set_Priority>



	// configuracion del Exti para interrupcion del Usser Button
	handlerUserButton.pGPIOx = GPIOC;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <initSystem+0x150>)
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <initSystem+0x154>)
 8000ec6:	601a      	str	r2, [r3, #0]
	handlerUserButton.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <initSystem+0x150>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	725a      	strb	r2, [r3, #9]
	handlerUserButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <initSystem+0x150>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	715a      	strb	r2, [r3, #5]
	handlerUserButton.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <initSystem+0x150>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	721a      	strb	r2, [r3, #8]
	handlerUserButton.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <initSystem+0x150>)
 8000edc:	220d      	movs	r2, #13
 8000ede:	711a      	strb	r2, [r3, #4]
	handlerUserButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <initSystem+0x150>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	71da      	strb	r2, [r3, #7]
	handlerUserButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <initSystem+0x150>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	719a      	strb	r2, [r3, #6]
	handlerExtiButton.edgeType = EXTERNAL_INTERRUPT_RISING_EDGE;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <initSystem+0x158>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	711a      	strb	r2, [r3, #4]
	handlerExtiButton.pGPIOHandler = &handlerUserButton;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <initSystem+0x158>)
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <initSystem+0x150>)
 8000ef6:	601a      	str	r2, [r3, #0]
	handlerExtiButton.priority     = e_EXTI_PRIORITY_6;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <initSystem+0x158>)
 8000efa:	2206      	movs	r2, #6
 8000efc:	715a      	strb	r2, [r3, #5]
	exti_Set_Priority(&handlerExtiButton, e_EXTI_PRIORITY_6);
 8000efe:	2106      	movs	r1, #6
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <initSystem+0x158>)
 8000f02:	f003 ff49 	bl	8004d98 <exti_Set_Priority>
	extInt_Config(&handlerExtiButton);
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <initSystem+0x158>)
 8000f08:	f003 f89e 	bl	8004048 <extInt_Config>


}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000094 	.word	0x20000094
 8000f14:	40020000 	.word	0x40020000
 8000f18:	200000b4 	.word	0x200000b4
 8000f1c:	200000c0 	.word	0x200000c0
 8000f20:	200000cc 	.word	0x200000cc
 8000f24:	40004400 	.word	0x40004400
 8000f28:	02faf080 	.word	0x02faf080
 8000f2c:	200000a0 	.word	0x200000a0
 8000f30:	40020800 	.word	0x40020800
 8000f34:	200000ac 	.word	0x200000ac

08000f38 <vTask_Counting>:


/* Funcion que gobierna a la tarea que muestra como funciona un semaforo contador */
void vTask_Counting( void * pvParameters )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 1000 );
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	60fb      	str	r3, [r7, #12]

    while(1)
    {
    	/* En este if() el sistema espera que se tenga un elemento disponible en el semaforo
    	 * cuando esta disponible actual -> imprime un mensaje que dice "working"*/
    	if ( xSemaphoreTake(xCounterSemaphore,xMaxExpectedBlockTime) == pdPASS) {
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <vTask_Counting+0x64>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68f9      	ldr	r1, [r7, #12]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fe8d 	bl	8001c6c <xQueueSemaphoreTake>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d1f6      	bne.n	8000f46 <vTask_Counting+0xe>

    		/* Este bloque es para imprimir solo 1 vez el valor del numero aleatorio*/
    		if(printOneTime == 1){
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <vTask_Counting+0x68>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d115      	bne.n	8000f8e <vTask_Counting+0x56>
    			sprintf(auxMsg, "counter i = %d\n", randomNumber);
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <vTask_Counting+0x6c>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	490f      	ldr	r1, [pc, #60]	; (8000fa8 <vTask_Counting+0x70>)
 8000f6c:	480f      	ldr	r0, [pc, #60]	; (8000fac <vTask_Counting+0x74>)
 8000f6e:	f005 fc5f 	bl	8006830 <siprintf>
    			char *dummy = auxMsg;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <vTask_Counting+0x74>)
 8000f74:	60bb      	str	r3, [r7, #8]
    			xQueueSend(xQueue_Print, &dummy, portMAX_DELAY);
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <vTask_Counting+0x78>)
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	f107 0108 	add.w	r1, r7, #8
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f84:	f000 fb4e 	bl	8001624 <xQueueGenericSend>
    			printOneTime = 0;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <vTask_Counting+0x68>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
    		}
    		/* Imprime las peticiones de trabajo que genera el numero aleatorio en la interupcion*/
    		writeMsg(&handlerUART,(char*) msg_working);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <vTask_Counting+0x7c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <vTask_Counting+0x80>)
 8000f96:	f005 fa11 	bl	80063bc <writeMsg>
    	if ( xSemaphoreTake(xCounterSemaphore,xMaxExpectedBlockTime) == pdPASS) {
 8000f9a:	e7d4      	b.n	8000f46 <vTask_Counting+0xe>
 8000f9c:	2000016c 	.word	0x2000016c
 8000fa0:	200001c0 	.word	0x200001c0
 8000fa4:	200001c2 	.word	0x200001c2
 8000fa8:	08008af4 	.word	0x08008af4
 8000fac:	20000180 	.word	0x20000180
 8000fb0:	2000017c 	.word	0x2000017c
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	200000cc 	.word	0x200000cc

08000fbc <vTask_Print>:
    }
}

/* Funcion que gobierna a la tarea Print */
void vTask_Print( void * pvParameters )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
    while(1)
    {
        /* Task code goes here. */
    	xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <vTask_Print+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f107 010c 	add.w	r1, r7, #12
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fd6b 	bl	8001aac <xQueueReceive>
    	//Escribimos el mensaje en la terminal
    	writeMsg(&handlerUART, (char*) msg);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <vTask_Print+0x2c>)
 8000fdc:	f005 f9ee 	bl	80063bc <writeMsg>
    	xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000fe0:	e7f0      	b.n	8000fc4 <vTask_Print+0x8>
 8000fe2:	bf00      	nop
 8000fe4:	2000017c 	.word	0x2000017c
 8000fe8:	200000cc 	.word	0x200000cc

08000fec <getRandomNumber>:
 * que rand() genere un numero diferente siempre.
 * La funcion srand(number) requiere siempre un numero diferente, para
 * generar siempre un numero diferente...
 * */
uint16_t getRandomNumber(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
	srand(xTaskGetTickCount());
 8000ff2:	f001 fb0f 	bl	8002614 <xTaskGetTickCount>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 fbad 	bl	8006758 <srand>
	int randomnumber;
	randomnumber = (rand() % 10) +1;
 8000ffe:	f005 fbd9 	bl	80067b4 <rand>
 8001002:	4601      	mov	r1, r0
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <getRandomNumber+0x40>)
 8001006:	fb83 2301 	smull	r2, r3, r3, r1
 800100a:	109a      	asrs	r2, r3, #2
 800100c:	17cb      	asrs	r3, r1, #31
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	1aca      	subs	r2, r1, r3
 800101a:	1c53      	adds	r3, r2, #1
 800101c:	607b      	str	r3, [r7, #4]
	return (uint16_t)randomnumber;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	b29b      	uxth	r3, r3
}//vago
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	66666667 	.word	0x66666667

08001030 <led_Callback>:

/*Controla el estado del Led */
void led_Callback( TimerHandle_t xTimer )
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	/* Toogle LED */
	GPIOxTooglePin(&handlerLedPin);
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <led_Callback+0x18>)
 800103a:	f004 fa4b 	bl	80054d4 <GPIOxTooglePin>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000094 	.word	0x20000094

0800104c <callback_extInt13>:

/* Interrupcion lanzada por el encider del BlueMotor. */
void callback_extInt13(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	/* Activar la variable printOneTime*/
	printOneTime = SET;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <callback_extInt13+0x4c>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
	/* Generar un numero aleatorio */
	randomNumber = getRandomNumber();
 8001058:	f7ff ffc8 	bl	8000fec <getRandomNumber>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <callback_extInt13+0x50>)
 8001062:	801a      	strh	r2, [r3, #0]

	BaseType_t xHigherPriorityTaskWoken;
	(void) xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
	//(void)pxHigherPriorityTaskWoken;

	/* Hacer un for que se ejecute tantas veces como el numero aleatorio lo indica
	 * y allí cargar el semaforo (ejemplo binario y ejemplo counter)*/
   	for (uint16_t ii = 0; ii < randomNumber; ii++) {
 8001068:	2300      	movs	r3, #0
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	e009      	b.n	8001082 <callback_extInt13+0x36>
   		/*cargar el semaforo e indicar que hay un cambio en las funciones.*/
   		xSemaphoreGiveFromISR(xCounterSemaphore, &xHigherPriorityTaskWoken);
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <callback_extInt13+0x54>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	463a      	mov	r2, r7
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fc7c 	bl	8001974 <xQueueGiveFromISR>
   	for (uint16_t ii = 0; ii < randomNumber; ii++) {
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	3301      	adds	r3, #1
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <callback_extInt13+0x50>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	b29b      	uxth	r3, r3
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3ef      	bcc.n	800106e <callback_extInt13+0x22>
	}
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200001c0 	.word	0x200001c0
 800109c:	200001c2 	.word	0x200001c2
 80010a0:	2000016c 	.word	0x2000016c

080010a4 <usart2Rx_Callback>:

/* Interrupcion debida al puerto serial */
void usart2Rx_Callback(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	/* Recibir un dato en el serial y no hacer nada mas*/
	rxData = getRxData();
 80010a8:	f005 f9b0 	bl	800640c <getRxData>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b01      	ldr	r3, [pc, #4]	; (80010b8 <usart2Rx_Callback+0x14>)
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000160 	.word	0x20000160

080010bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <ITM_SendChar+0x48>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <ITM_SendChar+0x48>)
 80010cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <ITM_SendChar+0x4c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <ITM_SendChar+0x4c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80010de:	bf00      	nop
 80010e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f8      	beq.n	80010e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80010ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000edfc 	.word	0xe000edfc
 8001108:	e0000e00 	.word	0xe0000e00

0800110c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	return 1;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_kill>:

int _kill(int pid, int sig)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001126:	f005 fad7 	bl	80066d8 <__errno>
 800112a:	4603      	mov	r3, r0
 800112c:	2216      	movs	r2, #22
 800112e:	601a      	str	r2, [r3, #0]
	return -1;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_exit>:

void _exit (int status)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffe7 	bl	800111c <_kill>
	while (1) {}		/* Make sure we hang here */
 800114e:	e7fe      	b.n	800114e <_exit+0x12>

08001150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00a      	b.n	8001178 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001162:	f3af 8000 	nop.w
 8001166:	4601      	mov	r1, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf0      	blt.n	8001162 <_read+0x12>
	}

return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e009      	b.n	80011b0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff89 	bl	80010bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf1      	blt.n	800119c <_write+0x12>
	}
	return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ea:	605a      	str	r2, [r3, #4]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_isatty>:

int _isatty(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001230:	f005 f9c0 	bl	80065b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <LoopForever+0x6>)
  ldr r1, =_edata
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <LoopForever+0xe>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800124c:	4c0a      	ldr	r4, [pc, #40]	; (8001278 <LoopForever+0x16>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800125a:	f005 fa43 	bl	80066e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fcf3 	bl	8000c48 <main>

08001262 <LoopForever>:

LoopForever:
    b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   r0, =_estack
 8001264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001270:	08008cb0 	.word	0x08008cb0
  ldr r2, =_sbss
 8001274:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001278:	20012f98 	.word	0x20012f98

0800127c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>

0800127e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f103 0208 	add.w	r2, r3, #8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001296:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f103 0208 	add.w	r2, r3, #8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f103 0208 	add.w	r2, r3, #8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001336:	d103      	bne.n	8001340 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e00c      	b.n	800135a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3308      	adds	r3, #8
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e002      	b.n	800134e <vListInsert+0x2e>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	429a      	cmp	r2, r3
 8001358:	d2f6      	bcs.n	8001348 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001392:	b480      	push	{r7}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6892      	ldr	r2, [r2, #8]
 80013a8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6852      	ldr	r2, [r2, #4]
 80013b2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d103      	bne.n	80013c6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10a      	bne.n	8001412 <xQueueGenericReset+0x2a>
        __asm volatile
 80013fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001400:	f383 8811 	msr	BASEPRI, r3
 8001404:	f3bf 8f6f 	isb	sy
 8001408:	f3bf 8f4f 	dsb	sy
 800140c:	60bb      	str	r3, [r7, #8]
    }
 800140e:	bf00      	nop
 8001410:	e7fe      	b.n	8001410 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001412:	f002 fab1 	bl	8003978 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141e:	68f9      	ldr	r1, [r7, #12]
 8001420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	441a      	add	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001442:	3b01      	subs	r3, #1
 8001444:	68f9      	ldr	r1, [r7, #12]
 8001446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001448:	fb01 f303 	mul.w	r3, r1, r3
 800144c:	441a      	add	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	22ff      	movs	r2, #255	; 0xff
 8001456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d114      	bne.n	8001492 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01a      	beq.n	80014a6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3310      	adds	r3, #16
 8001474:	4618      	mov	r0, r3
 8001476:	f001 fa33 	bl	80028e0 <xTaskRemoveFromEventList>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d012      	beq.n	80014a6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <xQueueGenericReset+0xcc>)
 8001482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f3bf 8f4f 	dsb	sy
 800148c:	f3bf 8f6f 	isb	sy
 8001490:	e009      	b.n	80014a6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3310      	adds	r3, #16
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fef1 	bl	800127e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3324      	adds	r3, #36	; 0x24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff feec 	bl	800127e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80014a6:	f002 fa97 	bl	80039d8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	e000ed04 	.word	0xe000ed04

080014b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	4613      	mov	r3, r2
 80014c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10a      	bne.n	80014e2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80014cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d0:	f383 8811 	msr	BASEPRI, r3
 80014d4:	f3bf 8f6f 	isb	sy
 80014d8:	f3bf 8f4f 	dsb	sy
 80014dc:	61bb      	str	r3, [r7, #24]
    }
 80014de:	bf00      	nop
 80014e0:	e7fe      	b.n	80014e0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <xQueueGenericCreate+0x48>
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d101      	bne.n	8001504 <xQueueGenericCreate+0x4c>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <xQueueGenericCreate+0x4e>
 8001504:	2300      	movs	r3, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10a      	bne.n	8001520 <xQueueGenericCreate+0x68>
        __asm volatile
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	617b      	str	r3, [r7, #20]
    }
 800151c:	bf00      	nop
 800151e:	e7fe      	b.n	800151e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001526:	d90a      	bls.n	800153e <xQueueGenericCreate+0x86>
        __asm volatile
 8001528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152c:	f383 8811 	msr	BASEPRI, r3
 8001530:	f3bf 8f6f 	isb	sy
 8001534:	f3bf 8f4f 	dsb	sy
 8001538:	613b      	str	r3, [r7, #16]
    }
 800153a:	bf00      	nop
 800153c:	e7fe      	b.n	800153c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	3350      	adds	r3, #80	; 0x50
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fb3a 	bl	8003bbc <pvPortMalloc>
 8001548:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00d      	beq.n	800156c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	3350      	adds	r3, #80	; 0x50
 8001558:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4613      	mov	r3, r2
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f805 	bl	8001576 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800156c:	6a3b      	ldr	r3, [r7, #32]
    }
 800156e:	4618      	mov	r0, r3
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e002      	b.n	8001598 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80015a4:	2101      	movs	r1, #1
 80015a6:	69b8      	ldr	r0, [r7, #24]
 80015a8:	f7ff ff1e 	bl	80013e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 80015cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d0:	f383 8811 	msr	BASEPRI, r3
 80015d4:	f3bf 8f6f 	isb	sy
 80015d8:	f3bf 8f4f 	dsb	sy
 80015dc:	613b      	str	r3, [r7, #16]
    }
 80015de:	bf00      	nop
 80015e0:	e7fe      	b.n	80015e0 <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90a      	bls.n	8001600 <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 80015ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ee:	f383 8811 	msr	BASEPRI, r3
 80015f2:	f3bf 8f6f 	isb	sy
 80015f6:	f3bf 8f4f 	dsb	sy
 80015fa:	60fb      	str	r3, [r7, #12]
    }
 80015fc:	bf00      	nop
 80015fe:	e7fe      	b.n	80015fe <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001600:	2202      	movs	r2, #2
 8001602:	2100      	movs	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff57 	bl	80014b8 <xQueueGenericCreate>
 800160a:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8001618:	697b      	ldr	r3, [r7, #20]
    }
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10a      	bne.n	8001656 <xQueueGenericSend+0x32>
        __asm volatile
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001652:	bf00      	nop
 8001654:	e7fe      	b.n	8001654 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <xQueueGenericSend+0x40>
 800165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <xQueueGenericSend+0x44>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <xQueueGenericSend+0x46>
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10a      	bne.n	8001684 <xQueueGenericSend+0x60>
        __asm volatile
 800166e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001672:	f383 8811 	msr	BASEPRI, r3
 8001676:	f3bf 8f6f 	isb	sy
 800167a:	f3bf 8f4f 	dsb	sy
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001680:	bf00      	nop
 8001682:	e7fe      	b.n	8001682 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d103      	bne.n	8001692 <xQueueGenericSend+0x6e>
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <xQueueGenericSend+0x72>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <xQueueGenericSend+0x74>
 8001696:	2300      	movs	r3, #0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10a      	bne.n	80016b2 <xQueueGenericSend+0x8e>
        __asm volatile
 800169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a0:	f383 8811 	msr	BASEPRI, r3
 80016a4:	f3bf 8f6f 	isb	sy
 80016a8:	f3bf 8f4f 	dsb	sy
 80016ac:	623b      	str	r3, [r7, #32]
    }
 80016ae:	bf00      	nop
 80016b0:	e7fe      	b.n	80016b0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80016b2:	f001 fab1 	bl	8002c18 <xTaskGetSchedulerState>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <xQueueGenericSend+0x9e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <xQueueGenericSend+0xa2>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <xQueueGenericSend+0xa4>
 80016c6:	2300      	movs	r3, #0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10a      	bne.n	80016e2 <xQueueGenericSend+0xbe>
        __asm volatile
 80016cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d0:	f383 8811 	msr	BASEPRI, r3
 80016d4:	f3bf 8f6f 	isb	sy
 80016d8:	f3bf 8f4f 	dsb	sy
 80016dc:	61fb      	str	r3, [r7, #28]
    }
 80016de:	bf00      	nop
 80016e0:	e7fe      	b.n	80016e0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80016e2:	f002 f949 	bl	8003978 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80016e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d302      	bcc.n	80016f8 <xQueueGenericSend+0xd4>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d129      	bne.n	800174c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016fe:	f000 fbd9 	bl	8001eb4 <prvCopyDataToQueue>
 8001702:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	3324      	adds	r3, #36	; 0x24
 8001710:	4618      	mov	r0, r3
 8001712:	f001 f8e5 	bl	80028e0 <xTaskRemoveFromEventList>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <xQueueGenericSend+0x1f8>)
 800171e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f3bf 8f4f 	dsb	sy
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	e00a      	b.n	8001744 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001734:	4b39      	ldr	r3, [pc, #228]	; (800181c <xQueueGenericSend+0x1f8>)
 8001736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001744:	f002 f948 	bl	80039d8 <vPortExitCritical>
                return pdPASS;
 8001748:	2301      	movs	r3, #1
 800174a:	e063      	b.n	8001814 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001752:	f002 f941 	bl	80039d8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001756:	2300      	movs	r3, #0
 8001758:	e05c      	b.n	8001814 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175c:	2b00      	cmp	r3, #0
 800175e:	d106      	bne.n	800176e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4618      	mov	r0, r3
 8001766:	f001 f91d 	bl	80029a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800176a:	2301      	movs	r3, #1
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800176e:	f002 f933 	bl	80039d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001772:	f000 fea5 	bl	80024c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001776:	f002 f8ff 	bl	8003978 <vPortEnterCritical>
 800177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001780:	b25b      	sxtb	r3, r3
 8001782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001786:	d103      	bne.n	8001790 <xQueueGenericSend+0x16c>
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179c:	d103      	bne.n	80017a6 <xQueueGenericSend+0x182>
 800179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017a6:	f002 f917 	bl	80039d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017aa:	1d3a      	adds	r2, r7, #4
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 f90c 	bl	80029d0 <xTaskCheckForTimeOut>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d124      	bne.n	8001808 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80017be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017c0:	f000 fc70 	bl	80020a4 <prvIsQueueFull>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d018      	beq.n	80017fc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80017ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017cc:	3310      	adds	r3, #16
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 f834 	bl	8002840 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80017d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017da:	f000 fbfb 	bl	8001fd4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80017de:	f000 fe7d 	bl	80024dc <xTaskResumeAll>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f af7c 	bne.w	80016e2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <xQueueGenericSend+0x1f8>)
 80017ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f3bf 8f4f 	dsb	sy
 80017f6:	f3bf 8f6f 	isb	sy
 80017fa:	e772      	b.n	80016e2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80017fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017fe:	f000 fbe9 	bl	8001fd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001802:	f000 fe6b 	bl	80024dc <xTaskResumeAll>
 8001806:	e76c      	b.n	80016e2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800180a:	f000 fbe3 	bl	8001fd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800180e:	f000 fe65 	bl	80024dc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001812:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001814:	4618      	mov	r0, r3
 8001816:	3738      	adds	r7, #56	; 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	e000ed04 	.word	0xe000ed04

08001820 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b090      	sub	sp, #64	; 0x40
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800184a:	bf00      	nop
 800184c:	e7fe      	b.n	800184c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d103      	bne.n	800185c <xQueueGenericSendFromISR+0x3c>
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <xQueueGenericSendFromISR+0x40>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <xQueueGenericSendFromISR+0x42>
 8001860:	2300      	movs	r3, #0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186a:	f383 8811 	msr	BASEPRI, r3
 800186e:	f3bf 8f6f 	isb	sy
 8001872:	f3bf 8f4f 	dsb	sy
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001878:	bf00      	nop
 800187a:	e7fe      	b.n	800187a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d103      	bne.n	800188a <xQueueGenericSendFromISR+0x6a>
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <xQueueGenericSendFromISR+0x6e>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <xQueueGenericSendFromISR+0x70>
 800188e:	2300      	movs	r3, #0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	623b      	str	r3, [r7, #32]
    }
 80018a6:	bf00      	nop
 80018a8:	e7fe      	b.n	80018a8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80018aa:	f002 f947 	bl	8003b3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80018ae:	f3ef 8211 	mrs	r2, BASEPRI
 80018b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b6:	f383 8811 	msr	BASEPRI, r3
 80018ba:	f3bf 8f6f 	isb	sy
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	61fa      	str	r2, [r7, #28]
 80018c4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80018c6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d302      	bcc.n	80018dc <xQueueGenericSendFromISR+0xbc>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d13e      	bne.n	800195a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80018dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018f2:	f000 fadf 	bl	8001eb4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80018f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80018fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018fe:	d112      	bne.n	8001926 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	2b00      	cmp	r3, #0
 8001906:	d025      	beq.n	8001954 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190a:	3324      	adds	r3, #36	; 0x24
 800190c:	4618      	mov	r0, r3
 800190e:	f000 ffe7 	bl	80028e0 <xTaskRemoveFromEventList>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01d      	beq.n	8001954 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01a      	beq.n	8001954 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e016      	b.n	8001954 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001926:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800192a:	2b7f      	cmp	r3, #127	; 0x7f
 800192c:	d10a      	bne.n	8001944 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800192e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001932:	f383 8811 	msr	BASEPRI, r3
 8001936:	f3bf 8f6f 	isb	sy
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	617b      	str	r3, [r7, #20]
    }
 8001940:	bf00      	nop
 8001942:	e7fe      	b.n	8001942 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001948:	3301      	adds	r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	b25a      	sxtb	r2, r3
 800194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001954:	2301      	movs	r3, #1
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001958:	e001      	b.n	800195e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800195a:	2300      	movs	r3, #0
 800195c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001968:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800196c:	4618      	mov	r0, r3
 800196e:	3740      	adds	r7, #64	; 0x40
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <xQueueGiveFromISR+0x2a>
        __asm volatile
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	623b      	str	r3, [r7, #32]
    }
 800199a:	bf00      	nop
 800199c:	e7fe      	b.n	800199c <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <xQueueGiveFromISR+0x48>
        __asm volatile
 80019a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019aa:	f383 8811 	msr	BASEPRI, r3
 80019ae:	f3bf 8f6f 	isb	sy
 80019b2:	f3bf 8f4f 	dsb	sy
 80019b6:	61fb      	str	r3, [r7, #28]
    }
 80019b8:	bf00      	nop
 80019ba:	e7fe      	b.n	80019ba <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <xQueueGiveFromISR+0x58>
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <xQueueGiveFromISR+0x5c>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <xQueueGiveFromISR+0x5e>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <xQueueGiveFromISR+0x78>
        __asm volatile
 80019d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019da:	f383 8811 	msr	BASEPRI, r3
 80019de:	f3bf 8f6f 	isb	sy
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	61bb      	str	r3, [r7, #24]
    }
 80019e8:	bf00      	nop
 80019ea:	e7fe      	b.n	80019ea <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80019ec:	f002 f8a6 	bl	8003b3c <vPortValidateInterruptPriority>
        __asm volatile
 80019f0:	f3ef 8211 	mrs	r2, BASEPRI
 80019f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	617a      	str	r2, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8001a08:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d23a      	bcs.n	8001a92 <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001a2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a36:	d112      	bne.n	8001a5e <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d025      	beq.n	8001a8c <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	3324      	adds	r3, #36	; 0x24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 ff4b 	bl	80028e0 <xTaskRemoveFromEventList>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01d      	beq.n	8001a8c <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01a      	beq.n	8001a8c <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e016      	b.n	8001a8c <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001a5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a62:	2b7f      	cmp	r3, #127	; 0x7f
 8001a64:	d10a      	bne.n	8001a7c <xQueueGiveFromISR+0x108>
        __asm volatile
 8001a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	60fb      	str	r3, [r7, #12]
    }
 8001a78:	bf00      	nop
 8001a7a:	e7fe      	b.n	8001a7a <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a80:	3301      	adds	r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a90:	e001      	b.n	8001a96 <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f383 8811 	msr	BASEPRI, r3
    }
 8001aa0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3738      	adds	r7, #56	; 0x38
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10a      	bne.n	8001adc <xQueueReceive+0x30>
        __asm volatile
 8001ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	f3bf 8f6f 	isb	sy
 8001ad2:	f3bf 8f4f 	dsb	sy
 8001ad6:	623b      	str	r3, [r7, #32]
    }
 8001ad8:	bf00      	nop
 8001ada:	e7fe      	b.n	8001ada <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <xQueueReceive+0x3e>
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <xQueueReceive+0x42>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <xQueueReceive+0x44>
 8001aee:	2300      	movs	r3, #0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10a      	bne.n	8001b0a <xQueueReceive+0x5e>
        __asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	61fb      	str	r3, [r7, #28]
    }
 8001b06:	bf00      	nop
 8001b08:	e7fe      	b.n	8001b08 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b0a:	f001 f885 	bl	8002c18 <xTaskGetSchedulerState>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <xQueueReceive+0x6e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <xQueueReceive+0x72>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <xQueueReceive+0x74>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <xQueueReceive+0x8e>
        __asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	61bb      	str	r3, [r7, #24]
    }
 8001b36:	bf00      	nop
 8001b38:	e7fe      	b.n	8001b38 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001b3a:	f001 ff1d 	bl	8003978 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01f      	beq.n	8001b8a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b4e:	f000 fa1b 	bl	8001f88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00f      	beq.n	8001b82 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b64:	3310      	adds	r3, #16
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 feba 	bl	80028e0 <xTaskRemoveFromEventList>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <xQueueReceive+0x1bc>)
 8001b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001b82:	f001 ff29 	bl	80039d8 <vPortExitCritical>
                return pdPASS;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e069      	b.n	8001c5e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d103      	bne.n	8001b98 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001b90:	f001 ff22 	bl	80039d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e062      	b.n	8001c5e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fefe 	bl	80029a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001bac:	f001 ff14 	bl	80039d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001bb0:	f000 fc86 	bl	80024c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001bb4:	f001 fee0 	bl	8003978 <vPortEnterCritical>
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc4:	d103      	bne.n	8001bce <xQueueReceive+0x122>
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bda:	d103      	bne.n	8001be4 <xQueueReceive+0x138>
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001be4:	f001 fef8 	bl	80039d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001be8:	1d3a      	adds	r2, r7, #4
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 feed 	bl	80029d0 <xTaskCheckForTimeOut>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d123      	bne.n	8001c44 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bfe:	f000 fa3b 	bl	8002078 <prvIsQueueEmpty>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d017      	beq.n	8001c38 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0a:	3324      	adds	r3, #36	; 0x24
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fe15 	bl	8002840 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c18:	f000 f9dc 	bl	8001fd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001c1c:	f000 fc5e 	bl	80024dc <xTaskResumeAll>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d189      	bne.n	8001b3a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <xQueueReceive+0x1bc>)
 8001c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f3bf 8f4f 	dsb	sy
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	e780      	b.n	8001b3a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c3a:	f000 f9cb 	bl	8001fd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c3e:	f000 fc4d 	bl	80024dc <xTaskResumeAll>
 8001c42:	e77a      	b.n	8001b3a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c46:	f000 f9c5 	bl	8001fd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001c4a:	f000 fc47 	bl	80024dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c50:	f000 fa12 	bl	8002078 <prvIsQueueEmpty>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f43f af6f 	beq.w	8001b3a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001c5c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3730      	adds	r7, #48	; 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000ed04 	.word	0xe000ed04

08001c6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	623b      	str	r3, [r7, #32]
    }
 8001c9a:	bf00      	nop
 8001c9c:	e7fe      	b.n	8001c9c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <xQueueSemaphoreTake+0x50>
        __asm volatile
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	61fb      	str	r3, [r7, #28]
    }
 8001cb8:	bf00      	nop
 8001cba:	e7fe      	b.n	8001cba <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cbc:	f000 ffac 	bl	8002c18 <xTaskGetSchedulerState>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <xQueueSemaphoreTake+0x60>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <xQueueSemaphoreTake+0x64>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <xQueueSemaphoreTake+0x66>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10a      	bne.n	8001cec <xQueueSemaphoreTake+0x80>
        __asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	61bb      	str	r3, [r7, #24]
    }
 8001ce8:	bf00      	nop
 8001cea:	e7fe      	b.n	8001cea <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001cec:	f001 fe44 	bl	8003978 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d024      	beq.n	8001d46 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d104      	bne.n	8001d16 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001d0c:	f001 f920 	bl	8002f50 <pvTaskIncrementMutexHeldCount>
 8001d10:	4602      	mov	r2, r0
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	3310      	adds	r3, #16
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fddc 	bl	80028e0 <xTaskRemoveFromEventList>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001d2e:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <xQueueSemaphoreTake+0x214>)
 8001d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f3bf 8f4f 	dsb	sy
 8001d3a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001d3e:	f001 fe4b 	bl	80039d8 <vPortExitCritical>
                return pdPASS;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e097      	b.n	8001e76 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d111      	bne.n	8001d70 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8001d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d56:	f383 8811 	msr	BASEPRI, r3
 8001d5a:	f3bf 8f6f 	isb	sy
 8001d5e:	f3bf 8f4f 	dsb	sy
 8001d62:	617b      	str	r3, [r7, #20]
    }
 8001d64:	bf00      	nop
 8001d66:	e7fe      	b.n	8001d66 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001d68:	f001 fe36 	bl	80039d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e082      	b.n	8001e76 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fe12 	bl	80029a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d84:	f001 fe28 	bl	80039d8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d88:	f000 fb9a 	bl	80024c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d8c:	f001 fdf4 	bl	8003978 <vPortEnterCritical>
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d9c:	d103      	bne.n	8001da6 <xQueueSemaphoreTake+0x13a>
 8001d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db2:	d103      	bne.n	8001dbc <xQueueSemaphoreTake+0x150>
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dbc:	f001 fe0c 	bl	80039d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dc0:	463a      	mov	r2, r7
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fe01 	bl	80029d0 <xTaskCheckForTimeOut>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d132      	bne.n	8001e3a <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dd6:	f000 f94f 	bl	8002078 <prvIsQueueEmpty>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d026      	beq.n	8001e2e <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8001de8:	f001 fdc6 	bl	8003978 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 ff2f 	bl	8002c54 <xTaskPriorityInherit>
 8001df6:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8001df8:	f001 fdee 	bl	80039d8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	3324      	adds	r3, #36	; 0x24
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fd1b 	bl	8002840 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e0c:	f000 f8e2 	bl	8001fd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001e10:	f000 fb64 	bl	80024dc <xTaskResumeAll>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f af68 	bne.w	8001cec <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <xQueueSemaphoreTake+0x214>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	e75e      	b.n	8001cec <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e30:	f000 f8d0 	bl	8001fd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e34:	f000 fb52 	bl	80024dc <xTaskResumeAll>
 8001e38:	e758      	b.n	8001cec <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e3c:	f000 f8ca 	bl	8001fd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e40:	f000 fb4c 	bl	80024dc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e46:	f000 f917 	bl	8002078 <prvIsQueueEmpty>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f43f af4d 	beq.w	8001cec <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00d      	beq.n	8001e74 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8001e58:	f001 fd8e 	bl	8003978 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e5e:	f000 f811 	bl	8001e84 <prvGetDisinheritPriorityAfterTimeout>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 ffe2 	bl	8002e34 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8001e70:	f001 fdb2 	bl	80039d8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001e74:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3738      	adds	r7, #56	; 0x38
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000ed04 	.word	0xe000ed04

08001e84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1c3 0305 	rsb	r3, r3, #5
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e001      	b.n	8001ea6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    }
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d14d      	bne.n	8001f76 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 ff2e 	bl	8002d40 <xTaskPriorityDisinherit>
 8001ee4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e043      	b.n	8001f76 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d119      	bne.n	8001f28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6858      	ldr	r0, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	461a      	mov	r2, r3
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	f004 fc14 	bl	800672c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	441a      	add	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d32b      	bcc.n	8001f76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	e026      	b.n	8001f76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	68d8      	ldr	r0, [r3, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	461a      	mov	r2, r3
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	f004 fbfa 	bl	800672c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	425b      	negs	r3, r3
 8001f42:	441a      	add	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	441a      	add	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d105      	bne.n	8001f76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001f7e:	697b      	ldr	r3, [r7, #20]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d018      	beq.n	8001fcc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	441a      	add	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d303      	bcc.n	8001fbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68d9      	ldr	r1, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f004 fbb0 	bl	800672c <memcpy>
    }
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001fdc:	f001 fccc 	bl	8003978 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fe8:	e011      	b.n	800200e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3324      	adds	r3, #36	; 0x24
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fc72 	bl	80028e0 <xTaskRemoveFromEventList>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002002:	f000 fd4b 	bl	8002a9c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	3b01      	subs	r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	dce9      	bgt.n	8001fea <prvUnlockQueue+0x16>
 8002016:	e000      	b.n	800201a <prvUnlockQueue+0x46>
                        break;
 8002018:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	22ff      	movs	r2, #255	; 0xff
 800201e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002022:	f001 fcd9 	bl	80039d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002026:	f001 fca7 	bl	8003978 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002030:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002032:	e011      	b.n	8002058 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3310      	adds	r3, #16
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fc4d 	bl	80028e0 <xTaskRemoveFromEventList>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800204c:	f000 fd26 	bl	8002a9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	3b01      	subs	r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800205c:	2b00      	cmp	r3, #0
 800205e:	dce9      	bgt.n	8002034 <prvUnlockQueue+0x60>
 8002060:	e000      	b.n	8002064 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002062:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800206c:	f001 fcb4 	bl	80039d8 <vPortExitCritical>
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002080:	f001 fc7a 	bl	8003978 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800208c:	2301      	movs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e001      	b.n	8002096 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002096:	f001 fc9f 	bl	80039d8 <vPortExitCritical>

    return xReturn;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80020ac:	f001 fc64 	bl	8003978 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d102      	bne.n	80020c2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80020bc:	2301      	movs	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e001      	b.n	80020c6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020c6:	f001 fc87 	bl	80039d8 <vPortExitCritical>

    return xReturn;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e014      	b.n	800210e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80020e4:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <vQueueAddToRegistry+0x50>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <vQueueAddToRegistry+0x50>)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <vQueueAddToRegistry+0x50>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002106:	e006      	b.n	8002116 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b07      	cmp	r3, #7
 8002112:	d9e7      	bls.n	80020e4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200001c4 	.word	0x200001c4

08002128 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002138:	f001 fc1e 	bl	8003978 <vPortEnterCritical>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002142:	b25b      	sxtb	r3, r3
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002148:	d103      	bne.n	8002152 <vQueueWaitForMessageRestricted+0x2a>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002158:	b25b      	sxtb	r3, r3
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800215e:	d103      	bne.n	8002168 <vQueueWaitForMessageRestricted+0x40>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002168:	f001 fc36 	bl	80039d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3324      	adds	r3, #36	; 0x24
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fb83 	bl	8002888 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff26 	bl	8001fd4 <prvUnlockQueue>
    }
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af04      	add	r7, sp, #16
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 fd09 	bl	8003bbc <pvPortMalloc>
 80021aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00e      	beq.n	80021d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021b2:	2058      	movs	r0, #88	; 0x58
 80021b4:	f001 fd02 	bl	8003bbc <pvPortMalloc>
 80021b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
 80021c6:	e005      	b.n	80021d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021c8:	6978      	ldr	r0, [r7, #20]
 80021ca:	f001 fdd7 	bl	8003d7c <vPortFree>
 80021ce:	e001      	b.n	80021d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d013      	beq.n	8002202 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	2300      	movs	r3, #0
 80021de:	9303      	str	r3, [sp, #12]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	9302      	str	r3, [sp, #8]
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f80e 	bl	8002212 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021f6:	69f8      	ldr	r0, [r7, #28]
 80021f8:	f000 f8a2 	bl	8002340 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	e002      	b.n	8002208 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002206:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002208:	69bb      	ldr	r3, [r7, #24]
    }
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b088      	sub	sp, #32
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	461a      	mov	r2, r3
 800222a:	21a5      	movs	r1, #165	; 0xa5
 800222c:	f004 fa8c 	bl	8006748 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800223a:	3b01      	subs	r3, #1
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f023 0307 	bic.w	r3, r3, #7
 8002248:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	617b      	str	r3, [r7, #20]
    }
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01f      	beq.n	80022b0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	e012      	b.n	800229c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	4413      	add	r3, r2
 800227c:	7819      	ldrb	r1, [r3, #0]
 800227e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	3334      	adds	r3, #52	; 0x34
 8002286:	460a      	mov	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3301      	adds	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d9e9      	bls.n	8002276 <prvInitialiseNewTask+0x64>
 80022a2:	e000      	b.n	80022a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80022a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022ae:	e003      	b.n	80022b8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d901      	bls.n	80022c2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022be:	2304      	movs	r3, #4
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	2200      	movs	r2, #0
 80022d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	3304      	adds	r3, #4
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fff0 	bl	80012be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	3318      	adds	r3, #24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe ffeb 	bl	80012be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	f1c3 0205 	rsb	r2, r3, #5
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	3350      	adds	r3, #80	; 0x50
 8002302:	2204      	movs	r2, #4
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f004 fa1e 	bl	8006748 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	3354      	adds	r3, #84	; 0x54
 8002310:	2201      	movs	r2, #1
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f004 fa17 	bl	8006748 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	69b8      	ldr	r0, [r7, #24]
 8002320:	f001 f9fe 	bl	8003720 <pxPortInitialiseStack>
 8002324:	4602      	mov	r2, r0
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002334:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002348:	f001 fb16 	bl	8003978 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <prvAddNewTaskToReadyList+0xc0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <prvAddNewTaskToReadyList+0xc0>)
 8002354:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800235e:	4a29      	ldr	r2, [pc, #164]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002364:	4b26      	ldr	r3, [pc, #152]	; (8002400 <prvAddNewTaskToReadyList+0xc0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d110      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800236c:	f000 fbba 	bl	8002ae4 <prvInitialiseTaskLists>
 8002370:	e00d      	b.n	800238e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d802      	bhi.n	800238e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002388:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <prvAddNewTaskToReadyList+0xcc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <prvAddNewTaskToReadyList+0xcc>)
 8002396:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <prvAddNewTaskToReadyList+0xcc>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <prvAddNewTaskToReadyList+0xd0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <prvAddNewTaskToReadyList+0xd0>)
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <prvAddNewTaskToReadyList+0xd4>)
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7fe ff85 	bl	80012d8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023ce:	f001 fb03 	bl	80039d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00e      	beq.n	80023f8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <prvAddNewTaskToReadyList+0xd8>)
 80023ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200002dc 	.word	0x200002dc
 8002404:	20000204 	.word	0x20000204
 8002408:	200002e8 	.word	0x200002e8
 800240c:	200002f8 	.word	0x200002f8
 8002410:	200002e4 	.word	0x200002e4
 8002414:	20000208 	.word	0x20000208
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <vTaskStartScheduler+0x88>)
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2282      	movs	r2, #130	; 0x82
 800242e:	491e      	ldr	r1, [pc, #120]	; (80024a8 <vTaskStartScheduler+0x8c>)
 8002430:	481e      	ldr	r0, [pc, #120]	; (80024ac <vTaskStartScheduler+0x90>)
 8002432:	f7ff fead 	bl	8002190 <xTaskCreate>
 8002436:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d102      	bne.n	8002444 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800243e:	f000 fe01 	bl	8003044 <xTimerCreateTimerTask>
 8002442:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d116      	bne.n	8002478 <vTaskStartScheduler+0x5c>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	60bb      	str	r3, [r7, #8]
    }
 800245c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <vTaskStartScheduler+0x94>)
 8002460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002464:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <vTaskStartScheduler+0x98>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <vTaskStartScheduler+0x9c>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002472:	f001 f9df 	bl	8003834 <xPortStartScheduler>
 8002476:	e00e      	b.n	8002496 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800247e:	d10a      	bne.n	8002496 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	607b      	str	r3, [r7, #4]
    }
 8002492:	bf00      	nop
 8002494:	e7fe      	b.n	8002494 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <vTaskStartScheduler+0xa0>)
 8002498:	681b      	ldr	r3, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000300 	.word	0x20000300
 80024a8:	08008b04 	.word	0x08008b04
 80024ac:	08002ab5 	.word	0x08002ab5
 80024b0:	200002fc 	.word	0x200002fc
 80024b4:	200002e8 	.word	0x200002e8
 80024b8:	200002e0 	.word	0x200002e0
 80024bc:	20000004 	.word	0x20000004

080024c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <vTaskSuspendAll+0x18>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <vTaskSuspendAll+0x18>)
 80024cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	20000304 	.word	0x20000304

080024dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <xTaskResumeAll+0x114>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <xTaskResumeAll+0x2c>
        __asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	603b      	str	r3, [r7, #0]
    }
 8002504:	bf00      	nop
 8002506:	e7fe      	b.n	8002506 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002508:	f001 fa36 	bl	8003978 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <xTaskResumeAll+0x114>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3b01      	subs	r3, #1
 8002512:	4a37      	ldr	r2, [pc, #220]	; (80025f0 <xTaskResumeAll+0x114>)
 8002514:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <xTaskResumeAll+0x114>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d161      	bne.n	80025e2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800251e:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <xTaskResumeAll+0x118>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d05d      	beq.n	80025e2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002526:	e02e      	b.n	8002586 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <xTaskResumeAll+0x11c>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3318      	adds	r3, #24
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe ff2c 	bl	8001392 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3304      	adds	r3, #4
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe ff27 	bl	8001392 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	2201      	movs	r2, #1
 800254a:	409a      	lsls	r2, r3
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <xTaskResumeAll+0x120>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <xTaskResumeAll+0x120>)
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4a27      	ldr	r2, [pc, #156]	; (8002600 <xTaskResumeAll+0x124>)
 8002564:	441a      	add	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3304      	adds	r3, #4
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7fe feb3 	bl	80012d8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <xTaskResumeAll+0x128>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	429a      	cmp	r2, r3
 800257e:	d302      	bcc.n	8002586 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <xTaskResumeAll+0x12c>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <xTaskResumeAll+0x11c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1cc      	bne.n	8002528 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002594:	f000 fb24 	bl	8002be0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <xTaskResumeAll+0x130>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025a4:	f000 f846 	bl	8002634 <xTaskIncrementTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <xTaskResumeAll+0x12c>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f1      	bne.n	80025a4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <xTaskResumeAll+0x130>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <xTaskResumeAll+0x12c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <xTaskResumeAll+0x134>)
 80025d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80025e2:	f001 f9f9 	bl	80039d8 <vPortExitCritical>

    return xAlreadyYielded;
 80025e6:	68bb      	ldr	r3, [r7, #8]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000304 	.word	0x20000304
 80025f4:	200002dc 	.word	0x200002dc
 80025f8:	2000029c 	.word	0x2000029c
 80025fc:	200002e4 	.word	0x200002e4
 8002600:	20000208 	.word	0x20000208
 8002604:	20000204 	.word	0x20000204
 8002608:	200002f0 	.word	0x200002f0
 800260c:	200002ec 	.word	0x200002ec
 8002610:	e000ed04 	.word	0xe000ed04

08002614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <xTaskGetTickCount+0x1c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200002e0 	.word	0x200002e0

08002634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <xTaskIncrementTick+0x128>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d17f      	bne.n	8002746 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002646:	4b46      	ldr	r3, [pc, #280]	; (8002760 <xTaskIncrementTick+0x12c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800264e:	4a44      	ldr	r2, [pc, #272]	; (8002760 <xTaskIncrementTick+0x12c>)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d120      	bne.n	800269c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800265a:	4b42      	ldr	r3, [pc, #264]	; (8002764 <xTaskIncrementTick+0x130>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <xTaskIncrementTick+0x46>
        __asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	603b      	str	r3, [r7, #0]
    }
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xTaskIncrementTick+0x44>
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <xTaskIncrementTick+0x130>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <xTaskIncrementTick+0x134>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a37      	ldr	r2, [pc, #220]	; (8002764 <xTaskIncrementTick+0x130>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4a37      	ldr	r2, [pc, #220]	; (8002768 <xTaskIncrementTick+0x134>)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b37      	ldr	r3, [pc, #220]	; (800276c <xTaskIncrementTick+0x138>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a35      	ldr	r2, [pc, #212]	; (800276c <xTaskIncrementTick+0x138>)
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	f000 faa2 	bl	8002be0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <xTaskIncrementTick+0x13c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d348      	bcc.n	8002738 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <xTaskIncrementTick+0x130>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026b0:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <xTaskIncrementTick+0x13c>)
 80026b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b6:	601a      	str	r2, [r3, #0]
                    break;
 80026b8:	e03e      	b.n	8002738 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <xTaskIncrementTick+0x130>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d203      	bcs.n	80026da <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026d2:	4a27      	ldr	r2, [pc, #156]	; (8002770 <xTaskIncrementTick+0x13c>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026d8:	e02e      	b.n	8002738 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3304      	adds	r3, #4
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fe57 	bl	8001392 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3318      	adds	r3, #24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fe4e 	bl	8001392 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <xTaskIncrementTick+0x140>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <xTaskIncrementTick+0x140>)
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <xTaskIncrementTick+0x144>)
 8002716:	441a      	add	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7fe fdda 	bl	80012d8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <xTaskIncrementTick+0x148>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	429a      	cmp	r2, r3
 8002730:	d3b9      	bcc.n	80026a6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002736:	e7b6      	b.n	80026a6 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <xTaskIncrementTick+0x14c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e004      	b.n	8002750 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <xTaskIncrementTick+0x150>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <xTaskIncrementTick+0x150>)
 800274e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002750:	697b      	ldr	r3, [r7, #20]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000304 	.word	0x20000304
 8002760:	200002e0 	.word	0x200002e0
 8002764:	20000294 	.word	0x20000294
 8002768:	20000298 	.word	0x20000298
 800276c:	200002f4 	.word	0x200002f4
 8002770:	200002fc 	.word	0x200002fc
 8002774:	200002e4 	.word	0x200002e4
 8002778:	20000208 	.word	0x20000208
 800277c:	20000204 	.word	0x20000204
 8002780:	200002f0 	.word	0x200002f0
 8002784:	200002ec 	.word	0x200002ec

08002788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <vTaskSwitchContext+0xa4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <vTaskSwitchContext+0xa8>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800279c:	e03f      	b.n	800281e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <vTaskSwitchContext+0xa8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <vTaskSwitchContext+0xac>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	f1c3 031f 	rsb	r3, r3, #31
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	491f      	ldr	r1, [pc, #124]	; (8002838 <vTaskSwitchContext+0xb0>)
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	607b      	str	r3, [r7, #4]
    }
 80027e0:	bf00      	nop
 80027e2:	e7fe      	b.n	80027e2 <vTaskSwitchContext+0x5a>
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <vTaskSwitchContext+0xb0>)
 80027f0:	4413      	add	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	3308      	adds	r3, #8
 8002806:	429a      	cmp	r2, r3
 8002808:	d104      	bne.n	8002814 <vTaskSwitchContext+0x8c>
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <vTaskSwitchContext+0xb4>)
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000304 	.word	0x20000304
 8002830:	200002f0 	.word	0x200002f0
 8002834:	200002e4 	.word	0x200002e4
 8002838:	20000208 	.word	0x20000208
 800283c:	20000204 	.word	0x20000204

08002840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	60fb      	str	r3, [r7, #12]
    }
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <vTaskPlaceOnEventList+0x44>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3318      	adds	r3, #24
 800286c:	4619      	mov	r1, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fd56 	bl	8001320 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002874:	2101      	movs	r1, #1
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f000 fb7e 	bl	8002f78 <prvAddCurrentTaskToDelayedList>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000204 	.word	0x20000204

08002888 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	617b      	str	r3, [r7, #20]
    }
 80028ac:	bf00      	nop
 80028ae:	e7fe      	b.n	80028ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <vTaskPlaceOnEventListRestricted+0x54>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3318      	adds	r3, #24
 80028b6:	4619      	mov	r1, r3
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7fe fd0d 	bl	80012d8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	68b8      	ldr	r0, [r7, #8]
 80028ce:	f000 fb53 	bl	8002f78 <prvAddCurrentTaskToDelayedList>
    }
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000204 	.word	0x20000204

080028e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	60fb      	str	r3, [r7, #12]
    }
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3318      	adds	r3, #24
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fd3e 	bl	8001392 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <xTaskRemoveFromEventList+0xac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11c      	bne.n	8002958 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	3304      	adds	r3, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fd35 	bl	8001392 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2201      	movs	r2, #1
 800292e:	409a      	lsls	r2, r3
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <xTaskRemoveFromEventList+0xb0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4313      	orrs	r3, r2
 8002936:	4a16      	ldr	r2, [pc, #88]	; (8002990 <xTaskRemoveFromEventList+0xb0>)
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <xTaskRemoveFromEventList+0xb4>)
 8002948:	441a      	add	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	3304      	adds	r3, #4
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f7fe fcc1 	bl	80012d8 <vListInsertEnd>
 8002956:	e005      	b.n	8002964 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3318      	adds	r3, #24
 800295c:	4619      	mov	r1, r3
 800295e:	480e      	ldr	r0, [pc, #56]	; (8002998 <xTaskRemoveFromEventList+0xb8>)
 8002960:	f7fe fcba 	bl	80012d8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <xTaskRemoveFromEventList+0xbc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	429a      	cmp	r2, r3
 8002970:	d905      	bls.n	800297e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002972:	2301      	movs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <xTaskRemoveFromEventList+0xc0>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e001      	b.n	8002982 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002982:	697b      	ldr	r3, [r7, #20]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000304 	.word	0x20000304
 8002990:	200002e4 	.word	0x200002e4
 8002994:	20000208 	.word	0x20000208
 8002998:	2000029c 	.word	0x2000029c
 800299c:	20000204 	.word	0x20000204
 80029a0:	200002f0 	.word	0x200002f0

080029a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <vTaskInternalSetTimeOutState+0x24>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <vTaskInternalSetTimeOutState+0x28>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	605a      	str	r2, [r3, #4]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	200002f4 	.word	0x200002f4
 80029cc:	200002e0 	.word	0x200002e0

080029d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	613b      	str	r3, [r7, #16]
    }
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	60fb      	str	r3, [r7, #12]
    }
 8002a0e:	bf00      	nop
 8002a10:	e7fe      	b.n	8002a10 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002a12:	f000 ffb1 	bl	8003978 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002a16:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <xTaskCheckForTimeOut+0xc4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2e:	d102      	bne.n	8002a36 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e026      	b.n	8002a84 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <xTaskCheckForTimeOut+0xc8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d00a      	beq.n	8002a58 <xTaskCheckForTimeOut+0x88>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d305      	bcc.n	8002a58 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e015      	b.n	8002a84 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d20b      	bcs.n	8002a7a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad2      	subs	r2, r2, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff98 	bl	80029a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e004      	b.n	8002a84 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002a84:	f000 ffa8 	bl	80039d8 <vPortExitCritical>

    return xReturn;
 8002a88:	69fb      	ldr	r3, [r7, #28]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200002e0 	.word	0x200002e0
 8002a98:	200002f4 	.word	0x200002f4

08002a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <vTaskMissedYield+0x14>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	200002f0 	.word	0x200002f0

08002ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002abc:	f000 f852 	bl	8002b64 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <prvIdleTask+0x28>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d9f9      	bls.n	8002abc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <prvIdleTask+0x2c>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ad8:	e7f0      	b.n	8002abc <prvIdleTask+0x8>
 8002ada:	bf00      	nop
 8002adc:	20000208 	.word	0x20000208
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	e00c      	b.n	8002b0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <prvInitialiseTaskLists+0x60>)
 8002afc:	4413      	add	r3, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fbbd 	bl	800127e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d9ef      	bls.n	8002af0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b10:	480d      	ldr	r0, [pc, #52]	; (8002b48 <prvInitialiseTaskLists+0x64>)
 8002b12:	f7fe fbb4 	bl	800127e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b16:	480d      	ldr	r0, [pc, #52]	; (8002b4c <prvInitialiseTaskLists+0x68>)
 8002b18:	f7fe fbb1 	bl	800127e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <prvInitialiseTaskLists+0x6c>)
 8002b1e:	f7fe fbae 	bl	800127e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b22:	480c      	ldr	r0, [pc, #48]	; (8002b54 <prvInitialiseTaskLists+0x70>)
 8002b24:	f7fe fbab 	bl	800127e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b28:	480b      	ldr	r0, [pc, #44]	; (8002b58 <prvInitialiseTaskLists+0x74>)
 8002b2a:	f7fe fba8 	bl	800127e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <prvInitialiseTaskLists+0x78>)
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <prvInitialiseTaskLists+0x64>)
 8002b32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <prvInitialiseTaskLists+0x7c>)
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <prvInitialiseTaskLists+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000208 	.word	0x20000208
 8002b48:	2000026c 	.word	0x2000026c
 8002b4c:	20000280 	.word	0x20000280
 8002b50:	2000029c 	.word	0x2000029c
 8002b54:	200002b0 	.word	0x200002b0
 8002b58:	200002c8 	.word	0x200002c8
 8002b5c:	20000294 	.word	0x20000294
 8002b60:	20000298 	.word	0x20000298

08002b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b6a:	e019      	b.n	8002ba0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b6c:	f000 ff04 	bl	8003978 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <prvCheckTasksWaitingTermination+0x50>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fc08 	bl	8001392 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <prvCheckTasksWaitingTermination+0x54>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <prvCheckTasksWaitingTermination+0x54>)
 8002b8a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002b94:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b96:	f000 ff1f 	bl	80039d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f810 	bl	8002bc0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <prvCheckTasksWaitingTermination+0x58>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e1      	bne.n	8002b6c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200002b0 	.word	0x200002b0
 8002bb8:	200002dc 	.word	0x200002dc
 8002bbc:	200002c4 	.word	0x200002c4

08002bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 f8d5 	bl	8003d7c <vPortFree>
                vPortFree( pxTCB );
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f001 f8d2 	bl	8003d7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <prvResetNextTaskUnblockTime+0x30>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <prvResetNextTaskUnblockTime+0x34>)
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bf6:	e005      	b.n	8002c04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <prvResetNextTaskUnblockTime+0x30>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <prvResetNextTaskUnblockTime+0x34>)
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000294 	.word	0x20000294
 8002c14:	200002fc 	.word	0x200002fc

08002c18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <xTaskGetSchedulerState+0x34>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002c26:	2301      	movs	r3, #1
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	e008      	b.n	8002c3e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <xTaskGetSchedulerState+0x38>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002c34:	2302      	movs	r3, #2
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	e001      	b.n	8002c3e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002c3e:	687b      	ldr	r3, [r7, #4]
    }
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	200002e8 	.word	0x200002e8
 8002c50:	20000304 	.word	0x20000304

08002c54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d05e      	beq.n	8002d28 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <xTaskPriorityInherit+0xe0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d24e      	bcs.n	8002d16 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db06      	blt.n	8002c8e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c80:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <xTaskPriorityInherit+0xe0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f1c3 0205 	rsb	r2, r3, #5
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6959      	ldr	r1, [r3, #20]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <xTaskPriorityInherit+0xe4>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4299      	cmp	r1, r3
 8002ca4:	d12f      	bne.n	8002d06 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fb71 	bl	8001392 <uxListRemove>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <xTaskPriorityInherit+0xe8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <xTaskPriorityInherit+0xe8>)
 8002cca:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <xTaskPriorityInherit+0xe0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	2201      	movs	r2, #1
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <xTaskPriorityInherit+0xe8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <xTaskPriorityInherit+0xe8>)
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <xTaskPriorityInherit+0xe4>)
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7fe faea 	bl	80012d8 <vListInsertEnd>
 8002d04:	e004      	b.n	8002d10 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <xTaskPriorityInherit+0xe0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e008      	b.n	8002d28 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <xTaskPriorityInherit+0xe0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d201      	bcs.n	8002d28 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002d28:	68fb      	ldr	r3, [r7, #12]
    }
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000204 	.word	0x20000204
 8002d38:	20000208 	.word	0x20000208
 8002d3c:	200002e4 	.word	0x200002e4

08002d40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d063      	beq.n	8002e1e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <xTaskPriorityDisinherit+0xe8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d00a      	beq.n	8002d76 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60fb      	str	r3, [r7, #12]
    }
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	60bb      	str	r3, [r7, #8]
    }
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d039      	beq.n	8002e1e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d135      	bne.n	8002e1e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	3304      	adds	r3, #4
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe faeb 	bl	8001392 <uxListRemove>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <xTaskPriorityDisinherit+0xec>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <xTaskPriorityDisinherit+0xec>)
 8002dd6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f1c3 0205 	rsb	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2201      	movs	r2, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <xTaskPriorityDisinherit+0xec>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <xTaskPriorityDisinherit+0xec>)
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <xTaskPriorityDisinherit+0xf0>)
 8002e0c:	441a      	add	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fe fa5f 	bl	80012d8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002e1e:	697b      	ldr	r3, [r7, #20]
    }
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000204 	.word	0x20000204
 8002e2c:	200002e4 	.word	0x200002e4
 8002e30:	20000208 	.word	0x20000208

08002e34 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d077      	beq.n	8002f3c <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	60fb      	str	r3, [r7, #12]
    }
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d902      	bls.n	8002e7a <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	e002      	b.n	8002e80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d058      	beq.n	8002f3c <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d153      	bne.n	8002f3c <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d10a      	bne.n	8002eb4 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60bb      	str	r3, [r7, #8]
    }
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db04      	blt.n	8002ed2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0205 	rsb	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6959      	ldr	r1, [r3, #20]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4299      	cmp	r1, r3
 8002ee6:	d129      	bne.n	8002f3c <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fa50 	bl	8001392 <uxListRemove>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	2201      	movs	r2, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002f0c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	2201      	movs	r2, #1
 8002f14:	409a      	lsls	r2, r3
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002f2e:	441a      	add	r2, r3
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f7fe f9ce 	bl	80012d8 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002f3c:	bf00      	nop
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000204 	.word	0x20000204
 8002f48:	20000208 	.word	0x20000208
 8002f4c:	200002e4 	.word	0x200002e4

08002f50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f62:	3201      	adds	r2, #1
 8002f64:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8002f66:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8002f68:	681b      	ldr	r3, [r3, #0]
    }
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	20000204 	.word	0x20000204

08002f78 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f88:	4b28      	ldr	r3, [pc, #160]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe f9ff 	bl	8001392 <uxListRemove>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4013      	ands	r3, r2
 8002fae:	4a20      	ldr	r2, [pc, #128]	; (8003030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002fb0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb8:	d10a      	bne.n	8002fd0 <prvAddCurrentTaskToDelayedList+0x58>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	481a      	ldr	r0, [pc, #104]	; (8003034 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002fca:	f7fe f985 	bl	80012d8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002fce:	e026      	b.n	800301e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d209      	bcs.n	8002ffc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	f7fe f993 	bl	8001320 <vListInsert>
}
 8002ffa:	e010      	b.n	800301e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3304      	adds	r3, #4
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7fe f989 	bl	8001320 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d202      	bcs.n	800301e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <prvAddCurrentTaskToDelayedList+0xc8>)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6013      	str	r3, [r2, #0]
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200002e0 	.word	0x200002e0
 800302c:	20000204 	.word	0x20000204
 8003030:	200002e4 	.word	0x200002e4
 8003034:	200002c8 	.word	0x200002c8
 8003038:	20000298 	.word	0x20000298
 800303c:	20000294 	.word	0x20000294
 8003040:	200002fc 	.word	0x200002fc

08003044 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800304e:	f000 fb31 	bl	80036b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <xTimerCreateTimerTask+0x54>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <xTimerCreateTimerTask+0x58>)
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2300      	movs	r3, #0
 8003064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003068:	490d      	ldr	r1, [pc, #52]	; (80030a0 <xTimerCreateTimerTask+0x5c>)
 800306a:	480e      	ldr	r0, [pc, #56]	; (80030a4 <xTimerCreateTimerTask+0x60>)
 800306c:	f7ff f890 	bl	8002190 <xTaskCreate>
 8003070:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	603b      	str	r3, [r7, #0]
    }
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800308e:	687b      	ldr	r3, [r7, #4]
    }
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000338 	.word	0x20000338
 800309c:	2000033c 	.word	0x2000033c
 80030a0:	08008b0c 	.word	0x08008b0c
 80030a4:	08003295 	.word	0x08003295

080030a8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80030b6:	202c      	movs	r0, #44	; 0x2c
 80030b8:	f000 fd80 	bl	8003bbc <pvPortMalloc>
 80030bc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f805 	bl	80030ea <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80030e0:	697b      	ldr	r3, [r7, #20]
        }
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	617b      	str	r3, [r7, #20]
    }
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01e      	beq.n	8003158 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800311a:	f000 facb 	bl	80036b4 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	6a3a      	ldr	r2, [r7, #32]
 8003134:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe f8bf 	bl	80012be <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	b2da      	uxtb	r2, r3
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	623b      	str	r3, [r7, #32]
    }
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <xTimerGenericCommand+0x98>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02a      	beq.n	80031ec <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	dc18      	bgt.n	80031da <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80031a8:	f7ff fd36 	bl	8002c18 <xTaskGetSchedulerState>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d109      	bne.n	80031c6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <xTimerGenericCommand+0x98>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f107 0114 	add.w	r1, r7, #20
 80031ba:	2300      	movs	r3, #0
 80031bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031be:	f7fe fa31 	bl	8001624 <xQueueGenericSend>
 80031c2:	6278      	str	r0, [r7, #36]	; 0x24
 80031c4:	e012      	b.n	80031ec <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <xTimerGenericCommand+0x98>)
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	f107 0114 	add.w	r1, r7, #20
 80031ce:	2300      	movs	r3, #0
 80031d0:	2200      	movs	r2, #0
 80031d2:	f7fe fa27 	bl	8001624 <xQueueGenericSend>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24
 80031d8:	e008      	b.n	80031ec <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <xTimerGenericCommand+0x98>)
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f107 0114 	add.w	r1, r7, #20
 80031e2:	2300      	movs	r3, #0
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	f7fe fb1b 	bl	8001820 <xQueueGenericSendFromISR>
 80031ea:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000338 	.word	0x20000338

080031fc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <prvProcessExpiredTimer+0x94>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3304      	adds	r3, #4
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe f8bc 	bl	8001392 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	18d1      	adds	r1, r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	6978      	ldr	r0, [r7, #20]
 8003236:	f000 f8d1 	bl	80033dc <prvInsertTimerInActiveList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01f      	beq.n	8003280 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003240:	2300      	movs	r3, #0
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	2100      	movs	r1, #0
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff88 	bl	8003160 <xTimerGenericCommand>
 8003250:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d113      	bne.n	8003280 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	60fb      	str	r3, [r7, #12]
    }
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	6978      	ldr	r0, [r7, #20]
 8003286:	4798      	blx	r3
    }
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000330 	.word	0x20000330

08003294 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800329c:	f107 0308 	add.w	r3, r7, #8
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f857 	bl	8003354 <prvGetNextExpireTime>
 80032a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4619      	mov	r1, r3
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f803 	bl	80032b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80032b2:	f000 f8d5 	bl	8003460 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032b6:	e7f1      	b.n	800329c <prvTimerTask+0x8>

080032b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80032c2:	f7ff f8fd 	bl	80024c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f866 	bl	800339c <prvSampleTimeNow>
 80032d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d130      	bne.n	800333a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <prvProcessTimerOrBlockTask+0x3c>
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d806      	bhi.n	80032f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80032e6:	f7ff f8f9 	bl	80024dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80032ea:	68f9      	ldr	r1, [r7, #12]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff85 	bl	80031fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80032f2:	e024      	b.n	800333e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <prvProcessTimerOrBlockTask+0x90>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <prvProcessTimerOrBlockTask+0x50>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <prvProcessTimerOrBlockTask+0x52>
 8003308:	2300      	movs	r3, #0
 800330a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <prvProcessTimerOrBlockTask+0x94>)
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	f7fe ff05 	bl	8002128 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800331e:	f7ff f8dd 	bl	80024dc <xTaskResumeAll>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <prvProcessTimerOrBlockTask+0x98>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
    }
 8003338:	e001      	b.n	800333e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800333a:	f7ff f8cf 	bl	80024dc <xTaskResumeAll>
    }
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000334 	.word	0x20000334
 800334c:	20000338 	.word	0x20000338
 8003350:	e000ed04 	.word	0xe000ed04

08003354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <prvGetNextExpireTime+0x44>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <prvGetNextExpireTime+0x16>
 8003366:	2201      	movs	r2, #1
 8003368:	e000      	b.n	800336c <prvGetNextExpireTime+0x18>
 800336a:	2200      	movs	r2, #0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <prvGetNextExpireTime+0x44>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e001      	b.n	8003388 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003388:	68fb      	ldr	r3, [r7, #12]
    }
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000330 	.word	0x20000330

0800339c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80033a4:	f7ff f936 	bl	8002614 <xTaskGetTickCount>
 80033a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvSampleTimeNow+0x3c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d205      	bcs.n	80033c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80033b4:	f000 f91a 	bl	80035ec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e002      	b.n	80033c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <prvSampleTimeNow+0x3c>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80033cc:	68fb      	ldr	r3, [r7, #12]
    }
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000340 	.word	0x20000340

080033dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d812      	bhi.n	8003428 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	1ad2      	subs	r2, r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e01b      	b.n	800344e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <prvInsertTimerInActiveList+0x7c>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3304      	adds	r3, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fd ff7d 	bl	8001320 <vListInsert>
 8003426:	e012      	b.n	800344e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d206      	bcs.n	800343e <prvInsertTimerInActiveList+0x62>
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d302      	bcc.n	800343e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e007      	b.n	800344e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <prvInsertTimerInActiveList+0x80>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7fd ff69 	bl	8001320 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800344e:	697b      	ldr	r3, [r7, #20]
    }
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000334 	.word	0x20000334
 800345c:	20000330 	.word	0x20000330

08003460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003466:	e0ae      	b.n	80035c6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f2c0 80aa 	blt.w	80035c4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	3304      	adds	r3, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd ff86 	bl	8001392 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff87 	bl	800339c <prvSampleTimeNow>
 800348e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b09      	cmp	r3, #9
 8003494:	f200 8097 	bhi.w	80035c6 <prvProcessReceivedCommands+0x166>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <prvProcessReceivedCommands+0x40>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034c9 	.word	0x080034c9
 80034ac:	0800353d 	.word	0x0800353d
 80034b0:	08003551 	.word	0x08003551
 80034b4:	0800359b 	.word	0x0800359b
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034c9 	.word	0x080034c9
 80034c0:	0800353d 	.word	0x0800353d
 80034c4:	08003551 	.word	0x08003551
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	18d1      	adds	r1, r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034e8:	f7ff ff78 	bl	80033dc <prvInsertTimerInActiveList>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d069      	beq.n	80035c6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034f8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05e      	beq.n	80035c6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	441a      	add	r2, r3
 8003510:	2300      	movs	r3, #0
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2300      	movs	r3, #0
 8003516:	2100      	movs	r1, #0
 8003518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800351a:	f7ff fe21 	bl	8003160 <xTimerGenericCommand>
 800351e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d14f      	bne.n	80035c6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	61bb      	str	r3, [r7, #24]
    }
 8003538:	bf00      	nop
 800353a:	e7fe      	b.n	800353a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800354e:	e03a      	b.n	80035c6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	617b      	str	r3, [r7, #20]
    }
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	18d1      	adds	r1, r2, r3
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003594:	f7ff ff22 	bl	80033dc <prvInsertTimerInActiveList>
                        break;
 8003598:	e015      	b.n	80035c6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80035a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035aa:	f000 fbe7 	bl	8003d7c <vPortFree>
 80035ae:	e00a      	b.n	80035c6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80035c2:	e000      	b.n	80035c6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80035c4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <prvProcessReceivedCommands+0x188>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f107 0108 	add.w	r1, r7, #8
 80035ce:	2200      	movs	r2, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fa6b 	bl	8001aac <xQueueReceive>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f af45 	bne.w	8003468 <prvProcessReceivedCommands+0x8>
        }
    }
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000338 	.word	0x20000338

080035ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035f2:	e048      	b.n	8003686 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <prvSwitchTimerLists+0xc0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <prvSwitchTimerLists+0xc0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3304      	adds	r3, #4
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fec0 	bl	8001392 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02e      	beq.n	8003686 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d90e      	bls.n	8003658 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <prvSwitchTimerLists+0xc0>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3304      	adds	r3, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f7fd fe65 	bl	8001320 <vListInsert>
 8003656:	e016      	b.n	8003686 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	2100      	movs	r1, #0
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff fd7c 	bl	8003160 <xTimerGenericCommand>
 8003668:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	603b      	str	r3, [r7, #0]
    }
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <prvSwitchTimerLists+0xc0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1b1      	bne.n	80035f4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <prvSwitchTimerLists+0xc0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <prvSwitchTimerLists+0xc4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <prvSwitchTimerLists+0xc0>)
 800369c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <prvSwitchTimerLists+0xc4>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	6013      	str	r3, [r2, #0]
    }
 80036a4:	bf00      	nop
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000330 	.word	0x20000330
 80036b0:	20000334 	.word	0x20000334

080036b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80036b8:	f000 f95e 	bl	8003978 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <prvCheckForValidListAndQueue+0x54>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11d      	bne.n	8003700 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80036c4:	4811      	ldr	r0, [pc, #68]	; (800370c <prvCheckForValidListAndQueue+0x58>)
 80036c6:	f7fd fdda 	bl	800127e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80036ca:	4811      	ldr	r0, [pc, #68]	; (8003710 <prvCheckForValidListAndQueue+0x5c>)
 80036cc:	f7fd fdd7 	bl	800127e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <prvCheckForValidListAndQueue+0x60>)
 80036d2:	4a0e      	ldr	r2, [pc, #56]	; (800370c <prvCheckForValidListAndQueue+0x58>)
 80036d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <prvCheckForValidListAndQueue+0x64>)
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <prvCheckForValidListAndQueue+0x5c>)
 80036da:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80036dc:	2200      	movs	r2, #0
 80036de:	210c      	movs	r1, #12
 80036e0:	200a      	movs	r0, #10
 80036e2:	f7fd fee9 	bl	80014b8 <xQueueGenericCreate>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a07      	ldr	r2, [pc, #28]	; (8003708 <prvCheckForValidListAndQueue+0x54>)
 80036ea:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <prvCheckForValidListAndQueue+0x54>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <prvCheckForValidListAndQueue+0x54>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4908      	ldr	r1, [pc, #32]	; (800371c <prvCheckForValidListAndQueue+0x68>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fcea 	bl	80020d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003700:	f000 f96a 	bl	80039d8 <vPortExitCritical>
    }
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000338 	.word	0x20000338
 800370c:	20000308 	.word	0x20000308
 8003710:	2000031c 	.word	0x2000031c
 8003714:	20000330 	.word	0x20000330
 8003718:	20000334 	.word	0x20000334
 800371c:	08008b14 	.word	0x08008b14

08003720 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b04      	subs	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003738:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b04      	subs	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3b04      	subs	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003750:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <pxPortInitialiseStack+0x64>)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b14      	subs	r3, #20
 800375a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3b04      	subs	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f06f 0202 	mvn.w	r2, #2
 800376e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3b20      	subs	r3, #32
 8003774:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003776:	68fb      	ldr	r3, [r7, #12]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	08003789 	.word	0x08003789

08003788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <prvTaskExitError+0x54>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379a:	d00a      	beq.n	80037b2 <prvTaskExitError+0x2a>
        __asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60fb      	str	r3, [r7, #12]
    }
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <prvTaskExitError+0x28>
        __asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	60bb      	str	r3, [r7, #8]
    }
 80037c4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80037c6:	bf00      	nop
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0fc      	beq.n	80037c8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000008 	.word	0x20000008

080037e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <pxCurrentTCBConst2>)
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	6808      	ldr	r0, [r1, #0]
 80037e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ea:	f380 8809 	msr	PSP, r0
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8811 	msr	BASEPRI, r0
 80037fa:	4770      	bx	lr
 80037fc:	f3af 8000 	nop.w

08003800 <pxCurrentTCBConst2>:
 8003800:	20000204 	.word	0x20000204
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop

08003808 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003808:	4808      	ldr	r0, [pc, #32]	; (800382c <prvPortStartFirstTask+0x24>)
 800380a:	6800      	ldr	r0, [r0, #0]
 800380c:	6800      	ldr	r0, [r0, #0]
 800380e:	f380 8808 	msr	MSP, r0
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f380 8814 	msr	CONTROL, r0
 800381a:	b662      	cpsie	i
 800381c:	b661      	cpsie	f
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	df00      	svc	0
 8003828:	bf00      	nop
 800382a:	0000      	.short	0x0000
 800382c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop

08003834 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800383a:	4b46      	ldr	r3, [pc, #280]	; (8003954 <xPortStartScheduler+0x120>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a46      	ldr	r2, [pc, #280]	; (8003958 <xPortStartScheduler+0x124>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10a      	bne.n	800385a <xPortStartScheduler+0x26>
        __asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	613b      	str	r3, [r7, #16]
    }
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800385a:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <xPortStartScheduler+0x120>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3f      	ldr	r2, [pc, #252]	; (800395c <xPortStartScheduler+0x128>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10a      	bne.n	800387a <xPortStartScheduler+0x46>
        __asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60fb      	str	r3, [r7, #12]
    }
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800387a:	4b39      	ldr	r3, [pc, #228]	; (8003960 <xPortStartScheduler+0x12c>)
 800387c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	22ff      	movs	r2, #255	; 0xff
 800388a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <xPortStartScheduler+0x130>)
 80038a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <xPortStartScheduler+0x134>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038a8:	e009      	b.n	80038be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <xPortStartScheduler+0x134>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	4a2d      	ldr	r2, [pc, #180]	; (8003968 <xPortStartScheduler+0x134>)
 80038b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d0ef      	beq.n	80038aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038ca:	4b27      	ldr	r3, [pc, #156]	; (8003968 <xPortStartScheduler+0x134>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00a      	beq.n	80038ec <xPortStartScheduler+0xb8>
        __asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	60bb      	str	r3, [r7, #8]
    }
 80038e8:	bf00      	nop
 80038ea:	e7fe      	b.n	80038ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <xPortStartScheduler+0x134>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <xPortStartScheduler+0x134>)
 80038f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <xPortStartScheduler+0x134>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <xPortStartScheduler+0x134>)
 8003900:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <xPortStartScheduler+0x138>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <xPortStartScheduler+0x138>)
 8003910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003914:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <xPortStartScheduler+0x138>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a14      	ldr	r2, [pc, #80]	; (800396c <xPortStartScheduler+0x138>)
 800391c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003920:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003922:	f000 f8db 	bl	8003adc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <xPortStartScheduler+0x13c>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800392c:	f000 f8fa 	bl	8003b24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <xPortStartScheduler+0x140>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <xPortStartScheduler+0x140>)
 8003936:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800393a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800393c:	f7ff ff64 	bl	8003808 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003940:	f7fe ff22 	bl	8002788 <vTaskSwitchContext>
    prvTaskExitError();
 8003944:	f7ff ff20 	bl	8003788 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	e000ed00 	.word	0xe000ed00
 8003958:	410fc271 	.word	0x410fc271
 800395c:	410fc270 	.word	0x410fc270
 8003960:	e000e400 	.word	0xe000e400
 8003964:	20000344 	.word	0x20000344
 8003968:	20000348 	.word	0x20000348
 800396c:	e000ed20 	.word	0xe000ed20
 8003970:	20000008 	.word	0x20000008
 8003974:	e000ef34 	.word	0xe000ef34

08003978 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
        __asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	607b      	str	r3, [r7, #4]
    }
 8003990:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <vPortEnterCritical+0x58>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <vPortEnterCritical+0x58>)
 800399a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <vPortEnterCritical+0x58>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10f      	bne.n	80039c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <vPortEnterCritical+0x5c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	603b      	str	r3, [r7, #0]
    }
 80039c0:	bf00      	nop
 80039c2:	e7fe      	b.n	80039c2 <vPortEnterCritical+0x4a>
    }
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	20000008 	.word	0x20000008
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <vPortExitCritical+0x50>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <vPortExitCritical+0x24>
        __asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	607b      	str	r3, [r7, #4]
    }
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <vPortExitCritical+0x50>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <vPortExitCritical+0x50>)
 8003a04:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <vPortExitCritical+0x50>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <vPortExitCritical+0x42>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f383 8811 	msr	BASEPRI, r3
    }
 8003a18:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000008 	.word	0x20000008
 8003a2c:	00000000 	.word	0x00000000

08003a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a30:	f3ef 8009 	mrs	r0, PSP
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <pxCurrentTCBConst>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	f01e 0f10 	tst.w	lr, #16
 8003a40:	bf08      	it	eq
 8003a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4a:	6010      	str	r0, [r2, #0]
 8003a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a54:	f380 8811 	msr	BASEPRI, r0
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f7fe fe92 	bl	8002788 <vTaskSwitchContext>
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	f380 8811 	msr	BASEPRI, r0
 8003a6c:	bc09      	pop	{r0, r3}
 8003a6e:	6819      	ldr	r1, [r3, #0]
 8003a70:	6808      	ldr	r0, [r1, #0]
 8003a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a76:	f01e 0f10 	tst.w	lr, #16
 8003a7a:	bf08      	it	eq
 8003a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a80:	f380 8809 	msr	PSP, r0
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	f3af 8000 	nop.w

08003a90 <pxCurrentTCBConst>:
 8003a90:	20000204 	.word	0x20000204
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop

08003a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	607b      	str	r3, [r7, #4]
    }
 8003ab0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ab2:	f7fe fdbf 	bl	8002634 <xTaskIncrementTick>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <SysTick_Handler+0x40>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f383 8811 	msr	BASEPRI, r3
    }
 8003ace:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <vPortSetupTimerInterrupt+0x34>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <vPortSetupTimerInterrupt+0x38>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <vPortSetupTimerInterrupt+0x3c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <vPortSetupTimerInterrupt+0x40>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <vPortSetupTimerInterrupt+0x44>)
 8003afa:	3b01      	subs	r3, #1
 8003afc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003afe:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <vPortSetupTimerInterrupt+0x34>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000e010 	.word	0xe000e010
 8003b14:	e000e018 	.word	0xe000e018
 8003b18:	2000000c 	.word	0x2000000c
 8003b1c:	10624dd3 	.word	0x10624dd3
 8003b20:	e000e014 	.word	0xe000e014

08003b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b34 <vPortEnableVFP+0x10>
 8003b28:	6801      	ldr	r1, [r0, #0]
 8003b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b2e:	6001      	str	r1, [r0, #0]
 8003b30:	4770      	bx	lr
 8003b32:	0000      	.short	0x0000
 8003b34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop

08003b3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003b42:	f3ef 8305 	mrs	r3, IPSR
 8003b46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	d914      	bls.n	8003b78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <vPortValidateInterruptPriority+0x70>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <vPortValidateInterruptPriority+0x74>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	7afa      	ldrb	r2, [r7, #11]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d20a      	bcs.n	8003b78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	607b      	str	r3, [r7, #4]
    }
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <vPortValidateInterruptPriority+0x78>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <vPortValidateInterruptPriority+0x7c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d90a      	bls.n	8003b9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	603b      	str	r3, [r7, #0]
    }
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <vPortValidateInterruptPriority+0x60>
    }
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e3f0 	.word	0xe000e3f0
 8003bb0:	20000344 	.word	0x20000344
 8003bb4:	e000ed0c 	.word	0xe000ed0c
 8003bb8:	20000348 	.word	0x20000348

08003bbc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003bc8:	f7fe fc7a 	bl	80024c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003bcc:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <pvPortMalloc+0x1a8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003bd4:	f000 f934 	bl	8003e40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bd8:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <pvPortMalloc+0x1ac>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f040 80a7 	bne.w	8003d34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d02d      	beq.n	8003c48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003bec:	2208      	movs	r2, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d227      	bcs.n	8003c48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d021      	beq.n	8003c4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f023 0307 	bic.w	r3, r3, #7
 8003c10:	3308      	adds	r3, #8
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d214      	bcs.n	8003c42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f023 0307 	bic.w	r3, r3, #7
 8003c1e:	3308      	adds	r3, #8
 8003c20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <pvPortMalloc+0x92>
        __asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	617b      	str	r3, [r7, #20]
    }
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c46:	e002      	b.n	8003c4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	e000      	b.n	8003c50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d06e      	beq.n	8003d34 <pvPortMalloc+0x178>
 8003c56:	4b45      	ldr	r3, [pc, #276]	; (8003d6c <pvPortMalloc+0x1b0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d869      	bhi.n	8003d34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003c60:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <pvPortMalloc+0x1b4>)
 8003c62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003c64:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <pvPortMalloc+0x1b4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c6a:	e004      	b.n	8003c76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d903      	bls.n	8003c88 <pvPortMalloc+0xcc>
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f1      	bne.n	8003c6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <pvPortMalloc+0x1a8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d050      	beq.n	8003d34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2208      	movs	r2, #8
 8003c98:	4413      	add	r3, r2
 8003c9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	2308      	movs	r3, #8
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d91f      	bls.n	8003cf4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <pvPortMalloc+0x120>
        __asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	613b      	str	r3, [r7, #16]
    }
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cee:	69b8      	ldr	r0, [r7, #24]
 8003cf0:	f000 f908 	bl	8003f04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <pvPortMalloc+0x1b0>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <pvPortMalloc+0x1b0>)
 8003d00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <pvPortMalloc+0x1b0>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <pvPortMalloc+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d203      	bcs.n	8003d16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <pvPortMalloc+0x1b0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <pvPortMalloc+0x1b8>)
 8003d14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <pvPortMalloc+0x1ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <pvPortMalloc+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <pvPortMalloc+0x1bc>)
 8003d32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003d34:	f7fe fbd2 	bl	80024dc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <pvPortMalloc+0x19c>
        __asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60fb      	str	r3, [r7, #12]
    }
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <pvPortMalloc+0x19a>
    return pvReturn;
 8003d58:	69fb      	ldr	r3, [r7, #28]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3728      	adds	r7, #40	; 0x28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20012f54 	.word	0x20012f54
 8003d68:	20012f68 	.word	0x20012f68
 8003d6c:	20012f58 	.word	0x20012f58
 8003d70:	20012f4c 	.word	0x20012f4c
 8003d74:	20012f5c 	.word	0x20012f5c
 8003d78:	20012f60 	.word	0x20012f60

08003d7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d04d      	beq.n	8003e2a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d8e:	2308      	movs	r3, #8
 8003d90:	425b      	negs	r3, r3
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4413      	add	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <vPortFree+0xb8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <vPortFree+0x44>
        __asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60fb      	str	r3, [r7, #12]
    }
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <vPortFree+0x62>
        __asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	60bb      	str	r3, [r7, #8]
    }
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <vPortFree+0xb8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01e      	beq.n	8003e2a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11a      	bne.n	8003e2a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <vPortFree+0xb8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	401a      	ands	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003e04:	f7fe fb5c 	bl	80024c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <vPortFree+0xbc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <vPortFree+0xbc>)
 8003e14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e16:	6938      	ldr	r0, [r7, #16]
 8003e18:	f000 f874 	bl	8003f04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <vPortFree+0xc0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <vPortFree+0xc0>)
 8003e24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003e26:	f7fe fb59 	bl	80024dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20012f68 	.word	0x20012f68
 8003e38:	20012f58 	.word	0x20012f58
 8003e3c:	20012f64 	.word	0x20012f64

08003e40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003e4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <prvHeapInit+0xac>)
 8003e4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00c      	beq.n	8003e74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3307      	adds	r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0307 	bic.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <prvHeapInit+0xac>)
 8003e70:	4413      	add	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <prvHeapInit+0xb0>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <prvHeapInit+0xb0>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <prvHeapInit+0xb4>)
 8003ea0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <prvHeapInit+0xb4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <prvHeapInit+0xb4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	1ad2      	subs	r2, r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <prvHeapInit+0xb4>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <prvHeapInit+0xb8>)
 8003ece:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <prvHeapInit+0xbc>)
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <prvHeapInit+0xc0>)
 8003eda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	2000034c 	.word	0x2000034c
 8003ef0:	20012f4c 	.word	0x20012f4c
 8003ef4:	20012f54 	.word	0x20012f54
 8003ef8:	20012f5c 	.word	0x20012f5c
 8003efc:	20012f58 	.word	0x20012f58
 8003f00:	20012f68 	.word	0x20012f68

08003f04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f0c:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <prvInsertBlockIntoFreeList+0xac>)
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e002      	b.n	8003f18 <prvInsertBlockIntoFreeList+0x14>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d8f7      	bhi.n	8003f12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d108      	bne.n	8003f46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	441a      	add	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d118      	bne.n	8003f8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d00d      	beq.n	8003f82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	441a      	add	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e008      	b.n	8003f94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e003      	b.n	8003f94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d002      	beq.n	8003fa2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20012f4c 	.word	0x20012f4c
 8003fb4:	20012f54 	.word	0x20012f54

08003fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db0b      	blt.n	8003fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	4907      	ldr	r1, [pc, #28]	; (8003ff0 <__NVIC_EnableIRQ+0x38>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2001      	movs	r0, #1
 8003fda:	fa00 f202 	lsl.w	r2, r0, r2
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000e100 	.word	0xe000e100

08003ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004004:	2b00      	cmp	r3, #0
 8004006:	db0a      	blt.n	800401e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	490c      	ldr	r1, [pc, #48]	; (8004040 <__NVIC_SetPriority+0x4c>)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	0112      	lsls	r2, r2, #4
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	440b      	add	r3, r1
 8004018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800401c:	e00a      	b.n	8004034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4908      	ldr	r1, [pc, #32]	; (8004044 <__NVIC_SetPriority+0x50>)
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	3b04      	subs	r3, #4
 800402c:	0112      	lsls	r2, r2, #4
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	440b      	add	r3, r1
 8004032:	761a      	strb	r2, [r3, #24]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000e100 	.word	0xe000e100
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f8c7 	bl	80051e8 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 800405a:	4b96      	ldr	r3, [pc, #600]	; (80042b4 <extInt_Config+0x26c>)
 800405c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004060:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	791b      	ldrb	r3, [r3, #4]
 8004068:	2b0f      	cmp	r3, #15
 800406a:	f200 85cd 	bhi.w	8004c08 <extInt_Config+0xbc0>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <extInt_Config+0x2c>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040b5 	.word	0x080040b5
 8004078:	0800416b 	.word	0x0800416b
 800407c:	08004221 	.word	0x08004221
 8004080:	080042f7 	.word	0x080042f7
 8004084:	080043ad 	.word	0x080043ad
 8004088:	0800445b 	.word	0x0800445b
 800408c:	08004521 	.word	0x08004521
 8004090:	080045c9 	.word	0x080045c9
 8004094:	08004671 	.word	0x08004671
 8004098:	08004719 	.word	0x08004719
 800409c:	080047df 	.word	0x080047df
 80040a0:	08004887 	.word	0x08004887
 80040a4:	0800492f 	.word	0x0800492f
 80040a8:	080049f5 	.word	0x080049f5
 80040ac:	08004a9b 	.word	0x08004a9b
 80040b0:	08004b43 	.word	0x08004b43
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80040b4:	4b80      	ldr	r3, [pc, #512]	; (80042b8 <extInt_Config+0x270>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a7f      	ldr	r2, [pc, #508]	; (80042b8 <extInt_Config+0x270>)
 80040ba:	f023 030f 	bic.w	r3, r3, #15
 80040be:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7d      	ldr	r2, [pc, #500]	; (80042bc <extInt_Config+0x274>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d105      	bne.n	80040d8 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80040cc:	4b7a      	ldr	r3, [pc, #488]	; (80042b8 <extInt_Config+0x270>)
 80040ce:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <extInt_Config+0x270>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80040d4:	f000 bd9a 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a78      	ldr	r2, [pc, #480]	; (80042c0 <extInt_Config+0x278>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d107      	bne.n	80040f4 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80040e4:	4b74      	ldr	r3, [pc, #464]	; (80042b8 <extInt_Config+0x270>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a73      	ldr	r2, [pc, #460]	; (80042b8 <extInt_Config+0x270>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6093      	str	r3, [r2, #8]
					break;
 80040f0:	f000 bd8c 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a72      	ldr	r2, [pc, #456]	; (80042c4 <extInt_Config+0x27c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d107      	bne.n	8004110 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8004100:	4b6d      	ldr	r3, [pc, #436]	; (80042b8 <extInt_Config+0x270>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a6c      	ldr	r2, [pc, #432]	; (80042b8 <extInt_Config+0x270>)
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	6093      	str	r3, [r2, #8]
					break;
 800410c:	f000 bd7e 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6c      	ldr	r2, [pc, #432]	; (80042c8 <extInt_Config+0x280>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d107      	bne.n	800412c <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 800411c:	4b66      	ldr	r3, [pc, #408]	; (80042b8 <extInt_Config+0x270>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a65      	ldr	r2, [pc, #404]	; (80042b8 <extInt_Config+0x270>)
 8004122:	f043 0303 	orr.w	r3, r3, #3
 8004126:	6093      	str	r3, [r2, #8]
					break;
 8004128:	f000 bd70 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a66      	ldr	r2, [pc, #408]	; (80042cc <extInt_Config+0x284>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d107      	bne.n	8004148 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8004138:	4b5f      	ldr	r3, [pc, #380]	; (80042b8 <extInt_Config+0x270>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a5e      	ldr	r2, [pc, #376]	; (80042b8 <extInt_Config+0x270>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	6093      	str	r3, [r2, #8]
					break;
 8004144:	f000 bd62 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a60      	ldr	r2, [pc, #384]	; (80042d0 <extInt_Config+0x288>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d107      	bne.n	8004164 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8004154:	4b58      	ldr	r3, [pc, #352]	; (80042b8 <extInt_Config+0x270>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a57      	ldr	r2, [pc, #348]	; (80042b8 <extInt_Config+0x270>)
 800415a:	f043 0307 	orr.w	r3, r3, #7
 800415e:	6093      	str	r3, [r2, #8]
					break;
 8004160:	f000 bd54 	b.w	8004c0c <extInt_Config+0xbc4>
						__NOP();
 8004164:	bf00      	nop
					break;
 8004166:	f000 bd51 	b.w	8004c0c <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 800416a:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <extInt_Config+0x270>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <extInt_Config+0x270>)
 8004170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004174:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a4f      	ldr	r2, [pc, #316]	; (80042bc <extInt_Config+0x274>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d105      	bne.n	800418e <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8004182:	4b4d      	ldr	r3, [pc, #308]	; (80042b8 <extInt_Config+0x270>)
 8004184:	4a4c      	ldr	r2, [pc, #304]	; (80042b8 <extInt_Config+0x270>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800418a:	f000 bd3f 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a4a      	ldr	r2, [pc, #296]	; (80042c0 <extInt_Config+0x278>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d107      	bne.n	80041aa <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <extInt_Config+0x270>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	4a46      	ldr	r2, [pc, #280]	; (80042b8 <extInt_Config+0x270>)
 80041a0:	f043 0310 	orr.w	r3, r3, #16
 80041a4:	6093      	str	r3, [r2, #8]
					break;
 80041a6:	f000 bd31 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a44      	ldr	r2, [pc, #272]	; (80042c4 <extInt_Config+0x27c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d107      	bne.n	80041c6 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80041b6:	4b40      	ldr	r3, [pc, #256]	; (80042b8 <extInt_Config+0x270>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4a3f      	ldr	r2, [pc, #252]	; (80042b8 <extInt_Config+0x270>)
 80041bc:	f043 0320 	orr.w	r3, r3, #32
 80041c0:	6093      	str	r3, [r2, #8]
					break;
 80041c2:	f000 bd23 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3e      	ldr	r2, [pc, #248]	; (80042c8 <extInt_Config+0x280>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d107      	bne.n	80041e2 <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80041d2:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <extInt_Config+0x270>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4a38      	ldr	r2, [pc, #224]	; (80042b8 <extInt_Config+0x270>)
 80041d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80041dc:	6093      	str	r3, [r2, #8]
					break;
 80041de:	f000 bd15 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a38      	ldr	r2, [pc, #224]	; (80042cc <extInt_Config+0x284>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d107      	bne.n	80041fe <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80041ee:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <extInt_Config+0x270>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	4a31      	ldr	r2, [pc, #196]	; (80042b8 <extInt_Config+0x270>)
 80041f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f8:	6093      	str	r3, [r2, #8]
					break;
 80041fa:	f000 bd07 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a32      	ldr	r2, [pc, #200]	; (80042d0 <extInt_Config+0x288>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d107      	bne.n	800421a <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <extInt_Config+0x270>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <extInt_Config+0x270>)
 8004210:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004214:	6093      	str	r3, [r2, #8]
					break;
 8004216:	f000 bcf9 	b.w	8004c0c <extInt_Config+0xbc4>
						__NOP();
 800421a:	bf00      	nop
					break;
 800421c:	f000 bcf6 	b.w	8004c0c <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <extInt_Config+0x270>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <extInt_Config+0x270>)
 8004226:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800422a:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a22      	ldr	r2, [pc, #136]	; (80042bc <extInt_Config+0x274>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d105      	bne.n	8004244 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8004238:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <extInt_Config+0x270>)
 800423a:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <extInt_Config+0x270>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8004240:	f000 bce4 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <extInt_Config+0x278>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d107      	bne.n	8004260 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <extInt_Config+0x270>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <extInt_Config+0x270>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6093      	str	r3, [r2, #8]
					break;
 800425c:	f000 bcd6 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <extInt_Config+0x27c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d107      	bne.n	800427c <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <extInt_Config+0x270>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <extInt_Config+0x270>)
 8004272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004276:	6093      	str	r3, [r2, #8]
					break;
 8004278:	f000 bcc8 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <extInt_Config+0x280>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d107      	bne.n	8004298 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <extInt_Config+0x270>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <extInt_Config+0x270>)
 800428e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004292:	6093      	str	r3, [r2, #8]
					break;
 8004294:	f000 bcba 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <extInt_Config+0x284>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d117      	bne.n	80042d4 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <extInt_Config+0x270>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a03      	ldr	r2, [pc, #12]	; (80042b8 <extInt_Config+0x270>)
 80042aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ae:	6093      	str	r3, [r2, #8]
					break;
 80042b0:	f000 bcac 	b.w	8004c0c <extInt_Config+0xbc4>
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40013800 	.word	0x40013800
 80042bc:	40020000 	.word	0x40020000
 80042c0:	40020400 	.word	0x40020400
 80042c4:	40020800 	.word	0x40020800
 80042c8:	40020c00 	.word	0x40020c00
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a8a      	ldr	r2, [pc, #552]	; (8004504 <extInt_Config+0x4bc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d107      	bne.n	80042f0 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80042e0:	4b89      	ldr	r3, [pc, #548]	; (8004508 <extInt_Config+0x4c0>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a88      	ldr	r2, [pc, #544]	; (8004508 <extInt_Config+0x4c0>)
 80042e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ea:	6093      	str	r3, [r2, #8]
					break;
 80042ec:	f000 bc8e 	b.w	8004c0c <extInt_Config+0xbc4>
						__NOP();
 80042f0:	bf00      	nop
					break;
 80042f2:	f000 bc8b 	b.w	8004c0c <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80042f6:	4b84      	ldr	r3, [pc, #528]	; (8004508 <extInt_Config+0x4c0>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4a83      	ldr	r2, [pc, #524]	; (8004508 <extInt_Config+0x4c0>)
 80042fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004300:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a80      	ldr	r2, [pc, #512]	; (800450c <extInt_Config+0x4c4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d105      	bne.n	800431a <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800430e:	4b7e      	ldr	r3, [pc, #504]	; (8004508 <extInt_Config+0x4c0>)
 8004310:	4a7d      	ldr	r2, [pc, #500]	; (8004508 <extInt_Config+0x4c0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8004316:	f000 bc79 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7b      	ldr	r2, [pc, #492]	; (8004510 <extInt_Config+0x4c8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d107      	bne.n	8004336 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8004326:	4b78      	ldr	r3, [pc, #480]	; (8004508 <extInt_Config+0x4c0>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4a77      	ldr	r2, [pc, #476]	; (8004508 <extInt_Config+0x4c0>)
 800432c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004330:	6093      	str	r3, [r2, #8]
					break;
 8004332:	f000 bc6b 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a75      	ldr	r2, [pc, #468]	; (8004514 <extInt_Config+0x4cc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d107      	bne.n	8004352 <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8004342:	4b71      	ldr	r3, [pc, #452]	; (8004508 <extInt_Config+0x4c0>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4a70      	ldr	r2, [pc, #448]	; (8004508 <extInt_Config+0x4c0>)
 8004348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800434c:	6093      	str	r3, [r2, #8]
					break;
 800434e:	f000 bc5d 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6f      	ldr	r2, [pc, #444]	; (8004518 <extInt_Config+0x4d0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d107      	bne.n	800436e <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800435e:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <extInt_Config+0x4c0>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4a69      	ldr	r2, [pc, #420]	; (8004508 <extInt_Config+0x4c0>)
 8004364:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004368:	6093      	str	r3, [r2, #8]
					break;
 800436a:	f000 bc4f 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a69      	ldr	r2, [pc, #420]	; (800451c <extInt_Config+0x4d4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d107      	bne.n	800438a <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800437a:	4b63      	ldr	r3, [pc, #396]	; (8004508 <extInt_Config+0x4c0>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	4a62      	ldr	r2, [pc, #392]	; (8004508 <extInt_Config+0x4c0>)
 8004380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004384:	6093      	str	r3, [r2, #8]
					break;
 8004386:	f000 bc41 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a5c      	ldr	r2, [pc, #368]	; (8004504 <extInt_Config+0x4bc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d107      	bne.n	80043a6 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8004396:	4b5c      	ldr	r3, [pc, #368]	; (8004508 <extInt_Config+0x4c0>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	4a5b      	ldr	r2, [pc, #364]	; (8004508 <extInt_Config+0x4c0>)
 800439c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80043a0:	6093      	str	r3, [r2, #8]
					break;
 80043a2:	f000 bc33 	b.w	8004c0c <extInt_Config+0xbc4>
						__NOP();
 80043a6:	bf00      	nop
					break;
 80043a8:	f000 bc30 	b.w	8004c0c <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80043ac:	4b56      	ldr	r3, [pc, #344]	; (8004508 <extInt_Config+0x4c0>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a55      	ldr	r2, [pc, #340]	; (8004508 <extInt_Config+0x4c0>)
 80043b2:	f023 030f 	bic.w	r3, r3, #15
 80043b6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a53      	ldr	r2, [pc, #332]	; (800450c <extInt_Config+0x4c4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d105      	bne.n	80043d0 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <extInt_Config+0x4c0>)
 80043c6:	4a50      	ldr	r2, [pc, #320]	; (8004508 <extInt_Config+0x4c0>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80043cc:	f000 bc1e 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a4e      	ldr	r2, [pc, #312]	; (8004510 <extInt_Config+0x4c8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d107      	bne.n	80043ec <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80043dc:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <extInt_Config+0x4c0>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a49      	ldr	r2, [pc, #292]	; (8004508 <extInt_Config+0x4c0>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	60d3      	str	r3, [r2, #12]
					break;
 80043e8:	f000 bc10 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a48      	ldr	r2, [pc, #288]	; (8004514 <extInt_Config+0x4cc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d107      	bne.n	8004408 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <extInt_Config+0x4c0>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a42      	ldr	r2, [pc, #264]	; (8004508 <extInt_Config+0x4c0>)
 80043fe:	f043 0302 	orr.w	r3, r3, #2
 8004402:	60d3      	str	r3, [r2, #12]
					break;
 8004404:	f000 bc02 	b.w	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a42      	ldr	r2, [pc, #264]	; (8004518 <extInt_Config+0x4d0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d106      	bne.n	8004422 <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8004414:	4b3c      	ldr	r3, [pc, #240]	; (8004508 <extInt_Config+0x4c0>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a3b      	ldr	r2, [pc, #236]	; (8004508 <extInt_Config+0x4c0>)
 800441a:	f043 0303 	orr.w	r3, r3, #3
 800441e:	60d3      	str	r3, [r2, #12]
					break;
 8004420:	e3f4      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3c      	ldr	r2, [pc, #240]	; (800451c <extInt_Config+0x4d4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d106      	bne.n	800443c <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <extInt_Config+0x4c0>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	4a35      	ldr	r2, [pc, #212]	; (8004508 <extInt_Config+0x4c0>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	60d3      	str	r3, [r2, #12]
					break;
 800443a:	e3e7      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a30      	ldr	r2, [pc, #192]	; (8004504 <extInt_Config+0x4bc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d106      	bne.n	8004456 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8004448:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <extInt_Config+0x4c0>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a2e      	ldr	r2, [pc, #184]	; (8004508 <extInt_Config+0x4c0>)
 800444e:	f043 0307 	orr.w	r3, r3, #7
 8004452:	60d3      	str	r3, [r2, #12]
					break;
 8004454:	e3da      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 8004456:	bf00      	nop
					break;
 8004458:	e3d8      	b.n	8004c0c <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 800445a:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <extInt_Config+0x4c0>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <extInt_Config+0x4c0>)
 8004460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004464:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a27      	ldr	r2, [pc, #156]	; (800450c <extInt_Config+0x4c4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d104      	bne.n	800447c <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8004472:	4b25      	ldr	r3, [pc, #148]	; (8004508 <extInt_Config+0x4c0>)
 8004474:	4a24      	ldr	r2, [pc, #144]	; (8004508 <extInt_Config+0x4c0>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800447a:	e3c7      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a23      	ldr	r2, [pc, #140]	; (8004510 <extInt_Config+0x4c8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d106      	bne.n	8004496 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8004488:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <extInt_Config+0x4c0>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <extInt_Config+0x4c0>)
 800448e:	f043 0310 	orr.w	r3, r3, #16
 8004492:	60d3      	str	r3, [r2, #12]
					break;
 8004494:	e3ba      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <extInt_Config+0x4cc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d106      	bne.n	80044b0 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80044a2:	4b19      	ldr	r3, [pc, #100]	; (8004508 <extInt_Config+0x4c0>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4a18      	ldr	r2, [pc, #96]	; (8004508 <extInt_Config+0x4c0>)
 80044a8:	f043 0320 	orr.w	r3, r3, #32
 80044ac:	60d3      	str	r3, [r2, #12]
					break;
 80044ae:	e3ad      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <extInt_Config+0x4d0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d106      	bne.n	80044ca <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <extInt_Config+0x4c0>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <extInt_Config+0x4c0>)
 80044c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80044c6:	60d3      	str	r3, [r2, #12]
					break;
 80044c8:	e3a0      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <extInt_Config+0x4d4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d106      	bne.n	80044e4 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <extInt_Config+0x4c0>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <extInt_Config+0x4c0>)
 80044dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e0:	60d3      	str	r3, [r2, #12]
					break;
 80044e2:	e393      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a06      	ldr	r2, [pc, #24]	; (8004504 <extInt_Config+0x4bc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d106      	bne.n	80044fe <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <extInt_Config+0x4c0>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <extInt_Config+0x4c0>)
 80044f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80044fa:	60d3      	str	r3, [r2, #12]
					break;
 80044fc:	e386      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 80044fe:	bf00      	nop
					break;
 8004500:	e384      	b.n	8004c0c <extInt_Config+0xbc4>
 8004502:	bf00      	nop
 8004504:	40021c00 	.word	0x40021c00
 8004508:	40013800 	.word	0x40013800
 800450c:	40020000 	.word	0x40020000
 8004510:	40020400 	.word	0x40020400
 8004514:	40020800 	.word	0x40020800
 8004518:	40020c00 	.word	0x40020c00
 800451c:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8004520:	4b86      	ldr	r3, [pc, #536]	; (800473c <extInt_Config+0x6f4>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a85      	ldr	r2, [pc, #532]	; (800473c <extInt_Config+0x6f4>)
 8004526:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800452a:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a83      	ldr	r2, [pc, #524]	; (8004740 <extInt_Config+0x6f8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d104      	bne.n	8004542 <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8004538:	4b80      	ldr	r3, [pc, #512]	; (800473c <extInt_Config+0x6f4>)
 800453a:	4a80      	ldr	r2, [pc, #512]	; (800473c <extInt_Config+0x6f4>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8004540:	e364      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7e      	ldr	r2, [pc, #504]	; (8004744 <extInt_Config+0x6fc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d106      	bne.n	800455c <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800454e:	4b7b      	ldr	r3, [pc, #492]	; (800473c <extInt_Config+0x6f4>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4a7a      	ldr	r2, [pc, #488]	; (800473c <extInt_Config+0x6f4>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	60d3      	str	r3, [r2, #12]
					break;
 800455a:	e357      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a79      	ldr	r2, [pc, #484]	; (8004748 <extInt_Config+0x700>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d106      	bne.n	8004576 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8004568:	4b74      	ldr	r3, [pc, #464]	; (800473c <extInt_Config+0x6f4>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a73      	ldr	r2, [pc, #460]	; (800473c <extInt_Config+0x6f4>)
 800456e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004572:	60d3      	str	r3, [r2, #12]
					break;
 8004574:	e34a      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a73      	ldr	r2, [pc, #460]	; (800474c <extInt_Config+0x704>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d106      	bne.n	8004590 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8004582:	4b6e      	ldr	r3, [pc, #440]	; (800473c <extInt_Config+0x6f4>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a6d      	ldr	r2, [pc, #436]	; (800473c <extInt_Config+0x6f4>)
 8004588:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800458c:	60d3      	str	r3, [r2, #12]
					break;
 800458e:	e33d      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <extInt_Config+0x708>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d106      	bne.n	80045aa <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800459c:	4b67      	ldr	r3, [pc, #412]	; (800473c <extInt_Config+0x6f4>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a66      	ldr	r2, [pc, #408]	; (800473c <extInt_Config+0x6f4>)
 80045a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045a6:	60d3      	str	r3, [r2, #12]
					break;
 80045a8:	e330      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <extInt_Config+0x70c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d106      	bne.n	80045c4 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80045b6:	4b61      	ldr	r3, [pc, #388]	; (800473c <extInt_Config+0x6f4>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4a60      	ldr	r2, [pc, #384]	; (800473c <extInt_Config+0x6f4>)
 80045bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045c0:	60d3      	str	r3, [r2, #12]
					break;
 80045c2:	e323      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 80045c4:	bf00      	nop
					break;
 80045c6:	e321      	b.n	8004c0c <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80045c8:	4b5c      	ldr	r3, [pc, #368]	; (800473c <extInt_Config+0x6f4>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a5b      	ldr	r2, [pc, #364]	; (800473c <extInt_Config+0x6f4>)
 80045ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045d2:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a59      	ldr	r2, [pc, #356]	; (8004740 <extInt_Config+0x6f8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d104      	bne.n	80045ea <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80045e0:	4b56      	ldr	r3, [pc, #344]	; (800473c <extInt_Config+0x6f4>)
 80045e2:	4a56      	ldr	r2, [pc, #344]	; (800473c <extInt_Config+0x6f4>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80045e8:	e310      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a54      	ldr	r2, [pc, #336]	; (8004744 <extInt_Config+0x6fc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d106      	bne.n	8004604 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80045f6:	4b51      	ldr	r3, [pc, #324]	; (800473c <extInt_Config+0x6f4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a50      	ldr	r2, [pc, #320]	; (800473c <extInt_Config+0x6f4>)
 80045fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004600:	60d3      	str	r3, [r2, #12]
					break;
 8004602:	e303      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4f      	ldr	r2, [pc, #316]	; (8004748 <extInt_Config+0x700>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d106      	bne.n	800461e <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <extInt_Config+0x6f4>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a49      	ldr	r2, [pc, #292]	; (800473c <extInt_Config+0x6f4>)
 8004616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800461a:	60d3      	str	r3, [r2, #12]
					break;
 800461c:	e2f6      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a49      	ldr	r2, [pc, #292]	; (800474c <extInt_Config+0x704>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d106      	bne.n	8004638 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800462a:	4b44      	ldr	r3, [pc, #272]	; (800473c <extInt_Config+0x6f4>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4a43      	ldr	r2, [pc, #268]	; (800473c <extInt_Config+0x6f4>)
 8004630:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004634:	60d3      	str	r3, [r2, #12]
					break;
 8004636:	e2e9      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a44      	ldr	r2, [pc, #272]	; (8004750 <extInt_Config+0x708>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d106      	bne.n	8004652 <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8004644:	4b3d      	ldr	r3, [pc, #244]	; (800473c <extInt_Config+0x6f4>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a3c      	ldr	r2, [pc, #240]	; (800473c <extInt_Config+0x6f4>)
 800464a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800464e:	60d3      	str	r3, [r2, #12]
					break;
 8004650:	e2dc      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3e      	ldr	r2, [pc, #248]	; (8004754 <extInt_Config+0x70c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d106      	bne.n	800466c <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <extInt_Config+0x6f4>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	4a36      	ldr	r2, [pc, #216]	; (800473c <extInt_Config+0x6f4>)
 8004664:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004668:	60d3      	str	r3, [r2, #12]
					break;
 800466a:	e2cf      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 800466c:	bf00      	nop
					break;
 800466e:	e2cd      	b.n	8004c0c <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8004670:	4b32      	ldr	r3, [pc, #200]	; (800473c <extInt_Config+0x6f4>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	4a31      	ldr	r2, [pc, #196]	; (800473c <extInt_Config+0x6f4>)
 8004676:	f023 030f 	bic.w	r3, r3, #15
 800467a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <extInt_Config+0x6f8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d104      	bne.n	8004692 <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8004688:	4b2c      	ldr	r3, [pc, #176]	; (800473c <extInt_Config+0x6f4>)
 800468a:	4a2c      	ldr	r2, [pc, #176]	; (800473c <extInt_Config+0x6f4>)
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8004690:	e2bc      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <extInt_Config+0x6fc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d106      	bne.n	80046ac <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800469e:	4b27      	ldr	r3, [pc, #156]	; (800473c <extInt_Config+0x6f4>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	4a26      	ldr	r2, [pc, #152]	; (800473c <extInt_Config+0x6f4>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6113      	str	r3, [r2, #16]
					break;
 80046aa:	e2af      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a25      	ldr	r2, [pc, #148]	; (8004748 <extInt_Config+0x700>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d106      	bne.n	80046c6 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80046b8:	4b20      	ldr	r3, [pc, #128]	; (800473c <extInt_Config+0x6f4>)
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	4a1f      	ldr	r2, [pc, #124]	; (800473c <extInt_Config+0x6f4>)
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	6113      	str	r3, [r2, #16]
					break;
 80046c4:	e2a2      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1f      	ldr	r2, [pc, #124]	; (800474c <extInt_Config+0x704>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d106      	bne.n	80046e0 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80046d2:	4b1a      	ldr	r3, [pc, #104]	; (800473c <extInt_Config+0x6f4>)
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	4a19      	ldr	r2, [pc, #100]	; (800473c <extInt_Config+0x6f4>)
 80046d8:	f043 0303 	orr.w	r3, r3, #3
 80046dc:	6113      	str	r3, [r2, #16]
					break;
 80046de:	e295      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1a      	ldr	r2, [pc, #104]	; (8004750 <extInt_Config+0x708>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d106      	bne.n	80046fa <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <extInt_Config+0x6f4>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	4a12      	ldr	r2, [pc, #72]	; (800473c <extInt_Config+0x6f4>)
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	6113      	str	r3, [r2, #16]
					break;
 80046f8:	e288      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <extInt_Config+0x70c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d106      	bne.n	8004714 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <extInt_Config+0x6f4>)
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <extInt_Config+0x6f4>)
 800470c:	f043 0307 	orr.w	r3, r3, #7
 8004710:	6113      	str	r3, [r2, #16]
					break;
 8004712:	e27b      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 8004714:	bf00      	nop
					break;
 8004716:	e279      	b.n	8004c0c <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <extInt_Config+0x6f4>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	4a07      	ldr	r2, [pc, #28]	; (800473c <extInt_Config+0x6f4>)
 800471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004722:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a05      	ldr	r2, [pc, #20]	; (8004740 <extInt_Config+0x6f8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d113      	bne.n	8004758 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8004730:	4b02      	ldr	r3, [pc, #8]	; (800473c <extInt_Config+0x6f4>)
 8004732:	4a02      	ldr	r2, [pc, #8]	; (800473c <extInt_Config+0x6f4>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8004738:	e268      	b.n	8004c0c <extInt_Config+0xbc4>
 800473a:	bf00      	nop
 800473c:	40013800 	.word	0x40013800
 8004740:	40020000 	.word	0x40020000
 8004744:	40020400 	.word	0x40020400
 8004748:	40020800 	.word	0x40020800
 800474c:	40020c00 	.word	0x40020c00
 8004750:	40021000 	.word	0x40021000
 8004754:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a83      	ldr	r2, [pc, #524]	; (800496c <extInt_Config+0x924>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d106      	bne.n	8004772 <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8004764:	4b82      	ldr	r3, [pc, #520]	; (8004970 <extInt_Config+0x928>)
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4a81      	ldr	r2, [pc, #516]	; (8004970 <extInt_Config+0x928>)
 800476a:	f043 0310 	orr.w	r3, r3, #16
 800476e:	6113      	str	r3, [r2, #16]
					break;
 8004770:	e24c      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a7e      	ldr	r2, [pc, #504]	; (8004974 <extInt_Config+0x92c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d106      	bne.n	800478c <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800477e:	4b7c      	ldr	r3, [pc, #496]	; (8004970 <extInt_Config+0x928>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	4a7b      	ldr	r2, [pc, #492]	; (8004970 <extInt_Config+0x928>)
 8004784:	f043 0320 	orr.w	r3, r3, #32
 8004788:	6113      	str	r3, [r2, #16]
					break;
 800478a:	e23f      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a79      	ldr	r2, [pc, #484]	; (8004978 <extInt_Config+0x930>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d106      	bne.n	80047a6 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8004798:	4b75      	ldr	r3, [pc, #468]	; (8004970 <extInt_Config+0x928>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	4a74      	ldr	r2, [pc, #464]	; (8004970 <extInt_Config+0x928>)
 800479e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80047a2:	6113      	str	r3, [r2, #16]
					break;
 80047a4:	e232      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a73      	ldr	r2, [pc, #460]	; (800497c <extInt_Config+0x934>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d106      	bne.n	80047c0 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80047b2:	4b6f      	ldr	r3, [pc, #444]	; (8004970 <extInt_Config+0x928>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	4a6e      	ldr	r2, [pc, #440]	; (8004970 <extInt_Config+0x928>)
 80047b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047bc:	6113      	str	r3, [r2, #16]
					break;
 80047be:	e225      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a6e      	ldr	r2, [pc, #440]	; (8004980 <extInt_Config+0x938>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d106      	bne.n	80047da <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80047cc:	4b68      	ldr	r3, [pc, #416]	; (8004970 <extInt_Config+0x928>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	4a67      	ldr	r2, [pc, #412]	; (8004970 <extInt_Config+0x928>)
 80047d2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80047d6:	6113      	str	r3, [r2, #16]
					break;
 80047d8:	e218      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 80047da:	bf00      	nop
					break;
 80047dc:	e216      	b.n	8004c0c <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80047de:	4b64      	ldr	r3, [pc, #400]	; (8004970 <extInt_Config+0x928>)
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	4a63      	ldr	r2, [pc, #396]	; (8004970 <extInt_Config+0x928>)
 80047e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047e8:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a64      	ldr	r2, [pc, #400]	; (8004984 <extInt_Config+0x93c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d104      	bne.n	8004800 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80047f6:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <extInt_Config+0x928>)
 80047f8:	4a5d      	ldr	r2, [pc, #372]	; (8004970 <extInt_Config+0x928>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80047fe:	e205      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a59      	ldr	r2, [pc, #356]	; (800496c <extInt_Config+0x924>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d106      	bne.n	800481a <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800480c:	4b58      	ldr	r3, [pc, #352]	; (8004970 <extInt_Config+0x928>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	4a57      	ldr	r2, [pc, #348]	; (8004970 <extInt_Config+0x928>)
 8004812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004816:	6113      	str	r3, [r2, #16]
					break;
 8004818:	e1f8      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a54      	ldr	r2, [pc, #336]	; (8004974 <extInt_Config+0x92c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d106      	bne.n	8004834 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8004826:	4b52      	ldr	r3, [pc, #328]	; (8004970 <extInt_Config+0x928>)
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	4a51      	ldr	r2, [pc, #324]	; (8004970 <extInt_Config+0x928>)
 800482c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004830:	6113      	str	r3, [r2, #16]
					break;
 8004832:	e1eb      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a4f      	ldr	r2, [pc, #316]	; (8004978 <extInt_Config+0x930>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d106      	bne.n	800484e <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <extInt_Config+0x928>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	4a4a      	ldr	r2, [pc, #296]	; (8004970 <extInt_Config+0x928>)
 8004846:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800484a:	6113      	str	r3, [r2, #16]
					break;
 800484c:	e1de      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a49      	ldr	r2, [pc, #292]	; (800497c <extInt_Config+0x934>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d106      	bne.n	8004868 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800485a:	4b45      	ldr	r3, [pc, #276]	; (8004970 <extInt_Config+0x928>)
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	4a44      	ldr	r2, [pc, #272]	; (8004970 <extInt_Config+0x928>)
 8004860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004864:	6113      	str	r3, [r2, #16]
					break;
 8004866:	e1d1      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a44      	ldr	r2, [pc, #272]	; (8004980 <extInt_Config+0x938>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d106      	bne.n	8004882 <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8004874:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <extInt_Config+0x928>)
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	4a3d      	ldr	r2, [pc, #244]	; (8004970 <extInt_Config+0x928>)
 800487a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800487e:	6113      	str	r3, [r2, #16]
					break;
 8004880:	e1c4      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 8004882:	bf00      	nop
					break;
 8004884:	e1c2      	b.n	8004c0c <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8004886:	4b3a      	ldr	r3, [pc, #232]	; (8004970 <extInt_Config+0x928>)
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4a39      	ldr	r2, [pc, #228]	; (8004970 <extInt_Config+0x928>)
 800488c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004890:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a3a      	ldr	r2, [pc, #232]	; (8004984 <extInt_Config+0x93c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d104      	bne.n	80048a8 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800489e:	4b34      	ldr	r3, [pc, #208]	; (8004970 <extInt_Config+0x928>)
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <extInt_Config+0x928>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80048a6:	e1b1      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2f      	ldr	r2, [pc, #188]	; (800496c <extInt_Config+0x924>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d106      	bne.n	80048c2 <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80048b4:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <extInt_Config+0x928>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	4a2d      	ldr	r2, [pc, #180]	; (8004970 <extInt_Config+0x928>)
 80048ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048be:	6113      	str	r3, [r2, #16]
					break;
 80048c0:	e1a4      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <extInt_Config+0x92c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d106      	bne.n	80048dc <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80048ce:	4b28      	ldr	r3, [pc, #160]	; (8004970 <extInt_Config+0x928>)
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	4a27      	ldr	r2, [pc, #156]	; (8004970 <extInt_Config+0x928>)
 80048d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048d8:	6113      	str	r3, [r2, #16]
					break;
 80048da:	e197      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a25      	ldr	r2, [pc, #148]	; (8004978 <extInt_Config+0x930>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d106      	bne.n	80048f6 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80048e8:	4b21      	ldr	r3, [pc, #132]	; (8004970 <extInt_Config+0x928>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <extInt_Config+0x928>)
 80048ee:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80048f2:	6113      	str	r3, [r2, #16]
					break;
 80048f4:	e18a      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <extInt_Config+0x934>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d106      	bne.n	8004910 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <extInt_Config+0x928>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <extInt_Config+0x928>)
 8004908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800490c:	6113      	str	r3, [r2, #16]
					break;
 800490e:	e17d      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <extInt_Config+0x938>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d106      	bne.n	800492a <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <extInt_Config+0x928>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	4a13      	ldr	r2, [pc, #76]	; (8004970 <extInt_Config+0x928>)
 8004922:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004926:	6113      	str	r3, [r2, #16]
					break;
 8004928:	e170      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 800492a:	bf00      	nop
					break;
 800492c:	e16e      	b.n	8004c0c <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800492e:	4b10      	ldr	r3, [pc, #64]	; (8004970 <extInt_Config+0x928>)
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <extInt_Config+0x928>)
 8004934:	f023 030f 	bic.w	r3, r3, #15
 8004938:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a10      	ldr	r2, [pc, #64]	; (8004984 <extInt_Config+0x93c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d104      	bne.n	8004950 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <extInt_Config+0x928>)
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <extInt_Config+0x928>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800494e:	e15d      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <extInt_Config+0x924>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d115      	bne.n	8004988 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800495c:	4b04      	ldr	r3, [pc, #16]	; (8004970 <extInt_Config+0x928>)
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	4a03      	ldr	r2, [pc, #12]	; (8004970 <extInt_Config+0x928>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6153      	str	r3, [r2, #20]
					break;
 8004968:	e150      	b.n	8004c0c <extInt_Config+0xbc4>
 800496a:	bf00      	nop
 800496c:	40020400 	.word	0x40020400
 8004970:	40013800 	.word	0x40013800
 8004974:	40020800 	.word	0x40020800
 8004978:	40020c00 	.word	0x40020c00
 800497c:	40021000 	.word	0x40021000
 8004980:	40021c00 	.word	0x40021c00
 8004984:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a89      	ldr	r2, [pc, #548]	; (8004bb4 <extInt_Config+0xb6c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d106      	bne.n	80049a2 <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8004994:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <extInt_Config+0xb70>)
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	4a87      	ldr	r2, [pc, #540]	; (8004bb8 <extInt_Config+0xb70>)
 800499a:	f043 0302 	orr.w	r3, r3, #2
 800499e:	6153      	str	r3, [r2, #20]
					break;
 80049a0:	e134      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a84      	ldr	r2, [pc, #528]	; (8004bbc <extInt_Config+0xb74>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d106      	bne.n	80049bc <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80049ae:	4b82      	ldr	r3, [pc, #520]	; (8004bb8 <extInt_Config+0xb70>)
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	4a81      	ldr	r2, [pc, #516]	; (8004bb8 <extInt_Config+0xb70>)
 80049b4:	f043 0303 	orr.w	r3, r3, #3
 80049b8:	6153      	str	r3, [r2, #20]
					break;
 80049ba:	e127      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7f      	ldr	r2, [pc, #508]	; (8004bc0 <extInt_Config+0xb78>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d106      	bne.n	80049d6 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80049c8:	4b7b      	ldr	r3, [pc, #492]	; (8004bb8 <extInt_Config+0xb70>)
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	4a7a      	ldr	r2, [pc, #488]	; (8004bb8 <extInt_Config+0xb70>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6153      	str	r3, [r2, #20]
					break;
 80049d4:	e11a      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a79      	ldr	r2, [pc, #484]	; (8004bc4 <extInt_Config+0xb7c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d106      	bne.n	80049f0 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80049e2:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <extInt_Config+0xb70>)
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4a74      	ldr	r2, [pc, #464]	; (8004bb8 <extInt_Config+0xb70>)
 80049e8:	f043 0307 	orr.w	r3, r3, #7
 80049ec:	6153      	str	r3, [r2, #20]
					break;
 80049ee:	e10d      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 80049f0:	bf00      	nop
					break;
 80049f2:	e10b      	b.n	8004c0c <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 80049f4:	4b70      	ldr	r3, [pc, #448]	; (8004bb8 <extInt_Config+0xb70>)
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	4a6f      	ldr	r2, [pc, #444]	; (8004bb8 <extInt_Config+0xb70>)
 80049fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049fe:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a70      	ldr	r2, [pc, #448]	; (8004bc8 <extInt_Config+0xb80>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d104      	bne.n	8004a16 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8004a0c:	4b6a      	ldr	r3, [pc, #424]	; (8004bb8 <extInt_Config+0xb70>)
 8004a0e:	4a6a      	ldr	r2, [pc, #424]	; (8004bb8 <extInt_Config+0xb70>)
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	6153      	str	r3, [r2, #20]
 8004a14:	e041      	b.n	8004a9a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6b      	ldr	r2, [pc, #428]	; (8004bcc <extInt_Config+0xb84>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d106      	bne.n	8004a30 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8004a22:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <extInt_Config+0xb70>)
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4a64      	ldr	r2, [pc, #400]	; (8004bb8 <extInt_Config+0xb70>)
 8004a28:	f043 0310 	orr.w	r3, r3, #16
 8004a2c:	6153      	str	r3, [r2, #20]
 8004a2e:	e034      	b.n	8004a9a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5f      	ldr	r2, [pc, #380]	; (8004bb4 <extInt_Config+0xb6c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d106      	bne.n	8004a4a <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8004a3c:	4b5e      	ldr	r3, [pc, #376]	; (8004bb8 <extInt_Config+0xb70>)
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	4a5d      	ldr	r2, [pc, #372]	; (8004bb8 <extInt_Config+0xb70>)
 8004a42:	f043 0320 	orr.w	r3, r3, #32
 8004a46:	6153      	str	r3, [r2, #20]
 8004a48:	e027      	b.n	8004a9a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5a      	ldr	r2, [pc, #360]	; (8004bbc <extInt_Config+0xb74>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d106      	bne.n	8004a64 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8004a56:	4b58      	ldr	r3, [pc, #352]	; (8004bb8 <extInt_Config+0xb70>)
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	4a57      	ldr	r2, [pc, #348]	; (8004bb8 <extInt_Config+0xb70>)
 8004a5c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004a60:	6153      	str	r3, [r2, #20]
 8004a62:	e01a      	b.n	8004a9a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a55      	ldr	r2, [pc, #340]	; (8004bc0 <extInt_Config+0xb78>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d106      	bne.n	8004a7e <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8004a70:	4b51      	ldr	r3, [pc, #324]	; (8004bb8 <extInt_Config+0xb70>)
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	4a50      	ldr	r2, [pc, #320]	; (8004bb8 <extInt_Config+0xb70>)
 8004a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7a:	6153      	str	r3, [r2, #20]
 8004a7c:	e00d      	b.n	8004a9a <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a4f      	ldr	r2, [pc, #316]	; (8004bc4 <extInt_Config+0xb7c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d106      	bne.n	8004a98 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8004a8a:	4b4b      	ldr	r3, [pc, #300]	; (8004bb8 <extInt_Config+0xb70>)
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4a4a      	ldr	r2, [pc, #296]	; (8004bb8 <extInt_Config+0xb70>)
 8004a90:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004a94:	6153      	str	r3, [r2, #20]
 8004a96:	e000      	b.n	8004a9a <extInt_Config+0xa52>

					} else {
						__NOP();
 8004a98:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8004a9a:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <extInt_Config+0xb70>)
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4a46      	ldr	r2, [pc, #280]	; (8004bb8 <extInt_Config+0xb70>)
 8004aa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aa4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a46      	ldr	r2, [pc, #280]	; (8004bc8 <extInt_Config+0xb80>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d104      	bne.n	8004abc <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <extInt_Config+0xb70>)
 8004ab4:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <extInt_Config+0xb70>)
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8004aba:	e0a7      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <extInt_Config+0xb84>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d106      	bne.n	8004ad6 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <extInt_Config+0xb70>)
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <extInt_Config+0xb70>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6153      	str	r3, [r2, #20]
					break;
 8004ad4:	e09a      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a35      	ldr	r2, [pc, #212]	; (8004bb4 <extInt_Config+0xb6c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d106      	bne.n	8004af0 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8004ae2:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <extInt_Config+0xb70>)
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <extInt_Config+0xb70>)
 8004ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aec:	6153      	str	r3, [r2, #20]
					break;
 8004aee:	e08d      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <extInt_Config+0xb74>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d106      	bne.n	8004b0a <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8004afc:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <extInt_Config+0xb70>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	4a2d      	ldr	r2, [pc, #180]	; (8004bb8 <extInt_Config+0xb70>)
 8004b02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004b06:	6153      	str	r3, [r2, #20]
					break;
 8004b08:	e080      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <extInt_Config+0xb78>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d106      	bne.n	8004b24 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8004b16:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <extInt_Config+0xb70>)
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <extInt_Config+0xb70>)
 8004b1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b20:	6153      	str	r3, [r2, #20]
					break;
 8004b22:	e073      	b.n	8004c0c <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <extInt_Config+0xb7c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d106      	bne.n	8004b3e <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <extInt_Config+0xb70>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <extInt_Config+0xb70>)
 8004b36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b3a:	6153      	str	r3, [r2, #20]
					break;
 8004b3c:	e066      	b.n	8004c0c <extInt_Config+0xbc4>
						__NOP();
 8004b3e:	bf00      	nop
					break;
 8004b40:	e064      	b.n	8004c0c <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <extInt_Config+0xb70>)
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <extInt_Config+0xb70>)
 8004b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b4c:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <extInt_Config+0xb80>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d104      	bne.n	8004b64 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <extInt_Config+0xb70>)
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <extInt_Config+0xb70>)
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8004b62:	e053      	b.n	8004c0c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <extInt_Config+0xb84>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d106      	bne.n	8004b7e <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <extInt_Config+0xb70>)
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <extInt_Config+0xb70>)
 8004b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b7a:	6153      	str	r3, [r2, #20]
						break;
 8004b7c:	e046      	b.n	8004c0c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <extInt_Config+0xb6c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d106      	bne.n	8004b98 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <extInt_Config+0xb70>)
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <extInt_Config+0xb70>)
 8004b90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b94:	6153      	str	r3, [r2, #20]
						break;
 8004b96:	e039      	b.n	8004c0c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <extInt_Config+0xb74>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d115      	bne.n	8004bd0 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <extInt_Config+0xb70>)
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	4a03      	ldr	r2, [pc, #12]	; (8004bb8 <extInt_Config+0xb70>)
 8004baa:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004bae:	6153      	str	r3, [r2, #20]
						break;
 8004bb0:	e02c      	b.n	8004c0c <extInt_Config+0xbc4>
 8004bb2:	bf00      	nop
 8004bb4:	40020800 	.word	0x40020800
 8004bb8:	40013800 	.word	0x40013800
 8004bbc:	40020c00 	.word	0x40020c00
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	40021c00 	.word	0x40021c00
 8004bc8:	40020000 	.word	0x40020000
 8004bcc:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a6c      	ldr	r2, [pc, #432]	; (8004d88 <extInt_Config+0xd40>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d106      	bne.n	8004bea <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8004bdc:	4b6b      	ldr	r3, [pc, #428]	; (8004d8c <extInt_Config+0xd44>)
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	4a6a      	ldr	r2, [pc, #424]	; (8004d8c <extInt_Config+0xd44>)
 8004be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004be6:	6153      	str	r3, [r2, #20]
						break;
 8004be8:	e010      	b.n	8004c0c <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a67      	ldr	r2, [pc, #412]	; (8004d90 <extInt_Config+0xd48>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d106      	bne.n	8004c04 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8004bf6:	4b65      	ldr	r3, [pc, #404]	; (8004d8c <extInt_Config+0xd44>)
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4a64      	ldr	r2, [pc, #400]	; (8004d8c <extInt_Config+0xd44>)
 8004bfc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8004c00:	6153      	str	r3, [r2, #20]
						break;
 8004c02:	e003      	b.n	8004c0c <extInt_Config+0xbc4>
							__NOP();
 8004c04:	bf00      	nop
						break;
 8004c06:	e001      	b.n	8004c0c <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8004c08:	bf00      	nop
						break;
 8004c0a:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	791b      	ldrb	r3, [r3, #4]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d020      	beq.n	8004c56 <extInt_Config+0xc0e>
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	dc37      	bgt.n	8004c88 <extInt_Config+0xc40>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <extInt_Config+0xbda>
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d00d      	beq.n	8004c3c <extInt_Config+0xbf4>
 8004c20:	e032      	b.n	8004c88 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c22:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <extInt_Config+0xd4c>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	7912      	ldrb	r2, [r2, #4]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	2201      	movs	r2, #1
 8004c30:	408a      	lsls	r2, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	4a57      	ldr	r2, [pc, #348]	; (8004d94 <extInt_Config+0xd4c>)
 8004c36:	430b      	orrs	r3, r1
 8004c38:	60d3      	str	r3, [r2, #12]

		break;
 8004c3a:	e027      	b.n	8004c8c <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c3c:	4b55      	ldr	r3, [pc, #340]	; (8004d94 <extInt_Config+0xd4c>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	7912      	ldrb	r2, [r2, #4]
 8004c46:	4611      	mov	r1, r2
 8004c48:	2201      	movs	r2, #1
 8004c4a:	408a      	lsls	r2, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <extInt_Config+0xd4c>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6093      	str	r3, [r2, #8]

		break;
 8004c54:	e01a      	b.n	8004c8c <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c56:	4b4f      	ldr	r3, [pc, #316]	; (8004d94 <extInt_Config+0xd4c>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	7912      	ldrb	r2, [r2, #4]
 8004c60:	4611      	mov	r1, r2
 8004c62:	2201      	movs	r2, #1
 8004c64:	408a      	lsls	r2, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	4a4a      	ldr	r2, [pc, #296]	; (8004d94 <extInt_Config+0xd4c>)
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c6e:	4b49      	ldr	r3, [pc, #292]	; (8004d94 <extInt_Config+0xd4c>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	7912      	ldrb	r2, [r2, #4]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	408a      	lsls	r2, r1
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4a44      	ldr	r2, [pc, #272]	; (8004d94 <extInt_Config+0xd4c>)
 8004c82:	430b      	orrs	r3, r1
 8004c84:	6093      	str	r3, [r2, #8]

		break;
 8004c86:	e001      	b.n	8004c8c <extInt_Config+0xc44>

	}default :{

		__NOP();
 8004c88:	bf00      	nop
		break;
 8004c8a:	bf00      	nop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c8c:	b672      	cpsid	i
}
 8004c8e:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c90:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <extInt_Config+0xd4c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	7912      	ldrb	r2, [r2, #4]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	408a      	lsls	r2, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4a3c      	ldr	r2, [pc, #240]	; (8004d94 <extInt_Config+0xd4c>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	d862      	bhi.n	8004d78 <extInt_Config+0xd30>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <extInt_Config+0xc70>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cf9 	.word	0x08004cf9
 8004cbc:	08004d01 	.word	0x08004d01
 8004cc0:	08004d09 	.word	0x08004d09
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004d19 	.word	0x08004d19
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004d29 	.word	0x08004d29
 8004cd4:	08004d31 	.word	0x08004d31
 8004cd8:	08004d39 	.word	0x08004d39
 8004cdc:	08004d41 	.word	0x08004d41
 8004ce0:	08004d49 	.word	0x08004d49
 8004ce4:	08004d51 	.word	0x08004d51
 8004ce8:	08004d59 	.word	0x08004d59
 8004cec:	08004d61 	.word	0x08004d61
 8004cf0:	08004d69 	.word	0x08004d69
 8004cf4:	08004d71 	.word	0x08004d71
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8004cf8:	2006      	movs	r0, #6
 8004cfa:	f7ff f95d 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004cfe:	e03d      	b.n	8004d7c <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8004d00:	2007      	movs	r0, #7
 8004d02:	f7ff f959 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d06:	e039      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8004d08:	2008      	movs	r0, #8
 8004d0a:	f7ff f955 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d0e:	e035      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8004d10:	2009      	movs	r0, #9
 8004d12:	f7ff f951 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d16:	e031      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f7ff f94d 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d1e:	e02d      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d20:	2017      	movs	r0, #23
 8004d22:	f7ff f949 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d26:	e029      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d28:	2017      	movs	r0, #23
 8004d2a:	f7ff f945 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d2e:	e025      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d30:	2017      	movs	r0, #23
 8004d32:	f7ff f941 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d36:	e021      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d38:	2017      	movs	r0, #23
 8004d3a:	f7ff f93d 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d3e:	e01d      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d40:	2017      	movs	r0, #23
 8004d42:	f7ff f939 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d46:	e019      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d48:	2028      	movs	r0, #40	; 0x28
 8004d4a:	f7ff f935 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d4e:	e015      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d50:	2028      	movs	r0, #40	; 0x28
 8004d52:	f7ff f931 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d56:	e011      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d58:	2028      	movs	r0, #40	; 0x28
 8004d5a:	f7ff f92d 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d5e:	e00d      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d60:	2028      	movs	r0, #40	; 0x28
 8004d62:	f7ff f929 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d66:	e009      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d68:	2028      	movs	r0, #40	; 0x28
 8004d6a:	f7ff f925 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d6e:	e005      	b.n	8004d7c <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d70:	2028      	movs	r0, #40	; 0x28
 8004d72:	f7ff f921 	bl	8003fb8 <__NVIC_EnableIRQ>
			break;
 8004d76:	e001      	b.n	8004d7c <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8004d78:	bf00      	nop
			break;
 8004d7a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004d7c:	b662      	cpsie	i
}
 8004d7e:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40013800 	.word	0x40013800
 8004d90:	40021c00 	.word	0x40021c00
 8004d94:	40013c00 	.word	0x40013c00

08004d98 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8004da4:	b672      	cpsid	i
}
 8004da6:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	791b      	ldrb	r3, [r3, #4]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	f200 8084 	bhi.w	8004ebc <exti_Set_Priority+0x124>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <exti_Set_Priority+0x24>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dfd 	.word	0x08004dfd
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004e15 	.word	0x08004e15
 8004dc8:	08004e21 	.word	0x08004e21
 8004dcc:	08004e2d 	.word	0x08004e2d
 8004dd0:	08004e39 	.word	0x08004e39
 8004dd4:	08004e45 	.word	0x08004e45
 8004dd8:	08004e51 	.word	0x08004e51
 8004ddc:	08004e5d 	.word	0x08004e5d
 8004de0:	08004e69 	.word	0x08004e69
 8004de4:	08004e75 	.word	0x08004e75
 8004de8:	08004e81 	.word	0x08004e81
 8004dec:	08004e8d 	.word	0x08004e8d
 8004df0:	08004e99 	.word	0x08004e99
 8004df4:	08004ea5 	.word	0x08004ea5
 8004df8:	08004eb1 	.word	0x08004eb1
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	2006      	movs	r0, #6
 8004e02:	f7ff f8f7 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e06:	e05b      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	2007      	movs	r0, #7
 8004e0e:	f7ff f8f1 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e12:	e055      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	4619      	mov	r1, r3
 8004e18:	2008      	movs	r0, #8
 8004e1a:	f7ff f8eb 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e1e:	e04f      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	4619      	mov	r1, r3
 8004e24:	2009      	movs	r0, #9
 8004e26:	f7ff f8e5 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e2a:	e049      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	200a      	movs	r0, #10
 8004e32:	f7ff f8df 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e36:	e043      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	2017      	movs	r0, #23
 8004e3e:	f7ff f8d9 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e42:	e03d      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	4619      	mov	r1, r3
 8004e48:	2017      	movs	r0, #23
 8004e4a:	f7ff f8d3 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e4e:	e037      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	4619      	mov	r1, r3
 8004e54:	2017      	movs	r0, #23
 8004e56:	f7ff f8cd 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e5a:	e031      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	2017      	movs	r0, #23
 8004e62:	f7ff f8c7 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e66:	e02b      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	2017      	movs	r0, #23
 8004e6e:	f7ff f8c1 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e72:	e025      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	4619      	mov	r1, r3
 8004e78:	2028      	movs	r0, #40	; 0x28
 8004e7a:	f7ff f8bb 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e7e:	e01f      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	4619      	mov	r1, r3
 8004e84:	2028      	movs	r0, #40	; 0x28
 8004e86:	f7ff f8b5 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e8a:	e019      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	2028      	movs	r0, #40	; 0x28
 8004e92:	f7ff f8af 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004e96:	e013      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	2028      	movs	r0, #40	; 0x28
 8004e9e:	f7ff f8a9 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004ea2:	e00d      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	2028      	movs	r0, #40	; 0x28
 8004eaa:	f7ff f8a3 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004eae:	e007      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	2028      	movs	r0, #40	; 0x28
 8004eb6:	f7ff f89d 	bl	8003ff4 <__NVIC_SetPriority>
				break;
 8004eba:	e001      	b.n	8004ec0 <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 8004ebc:	bf00      	nop
				break;
 8004ebe:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004ec0:	b662      	cpsie	i
}
 8004ec2:	bf00      	nop

		}

	__enable_irq();

}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
	__NOP();
 8004ed0:	bf00      	nop
}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <callback_extInt1>:
__attribute__ ((weak)) void callback_extInt1(void){
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
	__NOP();
 8004ee0:	bf00      	nop
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt2(void){
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
	__NOP();
 8004ef0:	bf00      	nop
}
 8004ef2:	bf00      	nop
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <callback_extInt3>:
__attribute__ ((weak)) void callback_extInt3(void){
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
	__NOP();
 8004f00:	bf00      	nop
}
 8004f02:	bf00      	nop
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt4(void){
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
	__NOP();
 8004f10:	bf00      	nop
}
 8004f12:	bf00      	nop
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	__NOP();
 8004f20:	bf00      	nop
}
 8004f22:	bf00      	nop
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
	__NOP();
 8004f30:	bf00      	nop
}
 8004f32:	bf00      	nop
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
	__NOP();
 8004f40:	bf00      	nop
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
	__NOP();
 8004f50:	bf00      	nop
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
	__NOP();
 8004f60:	bf00      	nop
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
	__NOP();
 8004f70:	bf00      	nop
}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
	__NOP();
 8004f80:	bf00      	nop
}
 8004f82:	bf00      	nop
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
	__NOP();
 8004f90:	bf00      	nop
}
 8004f92:	bf00      	nop
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt13(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt14(void){
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
	__NOP();
 8004fa0:	bf00      	nop
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	__NOP();
 8004fb0:	bf00      	nop
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <EXTI0_IRQHandler+0x24>)
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <EXTI0_IRQHandler+0x24>)
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	4a03      	ldr	r2, [pc, #12]	; (8004fe0 <EXTI0_IRQHandler+0x24>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8004fd8:	f7ff ff78 	bl	8004ecc <callback_extInt0>
	}
}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40013c00 	.word	0x40013c00

08004fe4 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <EXTI1_IRQHandler+0x24>)
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8004ff4:	4b04      	ldr	r3, [pc, #16]	; (8005008 <EXTI1_IRQHandler+0x24>)
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <EXTI1_IRQHandler+0x24>)
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8005000:	f7ff ff6c 	bl	8004edc <callback_extInt1>
	}
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40013c00 	.word	0x40013c00

0800500c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <EXTI2_IRQHandler+0x24>)
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <EXTI2_IRQHandler+0x24>)
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	4a03      	ldr	r2, [pc, #12]	; (8005030 <EXTI2_IRQHandler+0x24>)
 8005022:	f043 0304 	orr.w	r3, r3, #4
 8005026:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8005028:	f7ff ff60 	bl	8004eec <callback_extInt2>
	}
}
 800502c:	bf00      	nop
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40013c00 	.word	0x40013c00

08005034 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <EXTI3_IRQHandler+0x24>)
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <EXTI3_IRQHandler+0x24>)
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	4a03      	ldr	r2, [pc, #12]	; (8005058 <EXTI3_IRQHandler+0x24>)
 800504a:	f043 0308 	orr.w	r3, r3, #8
 800504e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8005050:	f7ff ff54 	bl	8004efc <callback_extInt3>
	}
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40013c00 	.word	0x40013c00

0800505c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <EXTI4_IRQHandler+0x24>)
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <EXTI4_IRQHandler+0x24>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	4a03      	ldr	r2, [pc, #12]	; (8005080 <EXTI4_IRQHandler+0x24>)
 8005072:	f043 0310 	orr.w	r3, r3, #16
 8005076:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8005078:	f7ff ff48 	bl	8004f0c <callback_extInt4>
	}
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40013c00 	.word	0x40013c00

08005084 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8005088:	4b26      	ldr	r3, [pc, #152]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8005094:	4b23      	ldr	r3, [pc, #140]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	4a22      	ldr	r2, [pc, #136]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 800509a:	f043 0320 	orr.w	r3, r3, #32
 800509e:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 80050a0:	f7ff ff3c 	bl	8004f1c <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 80050a4:	e03c      	b.n	8005120 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 80050a6:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050bc:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 80050be:	f7ff ff35 	bl	8004f2c <callback_extInt6>
}
 80050c2:	e02d      	b.n	8005120 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80050d0:	4b14      	ldr	r3, [pc, #80]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	4a13      	ldr	r2, [pc, #76]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 80050dc:	f7ff ff2e 	bl	8004f3c <callback_extInt7>
}
 80050e0:	e01e      	b.n	8005120 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 80050f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f8:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80050fa:	f7ff ff27 	bl	8004f4c <callback_extInt8>
}
 80050fe:	e00f      	b.n	8005120 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 800510c:	4b05      	ldr	r3, [pc, #20]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <EXTI9_5_IRQHandler+0xa0>)
 8005112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005116:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8005118:	f7ff ff20 	bl	8004f5c <callback_extInt9>
}
 800511c:	e000      	b.n	8005120 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800511e:	bf00      	nop
}
 8005120:	bf00      	nop
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40013c00 	.word	0x40013c00

08005128 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 800512c:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8005138:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 800513e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005142:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8005144:	f7ff ff12 	bl	8004f6c <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8005148:	e049      	b.n	80051de <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800514a:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8005156:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 800515c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005160:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8005162:	f7ff ff0b 	bl	8004f7c <callback_extInt11>
}
 8005166:	e03a      	b.n	80051de <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8005168:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 800517a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800517e:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8005180:	f7ff ff04 	bl	8004f8c <callback_extInt12>
}
 8005184:	e02b      	b.n	80051de <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8005186:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 8005198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800519c:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800519e:	f7fb ff55 	bl	800104c <callback_extInt13>
}
 80051a2:	e01c      	b.n	80051de <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	4a0b      	ldr	r2, [pc, #44]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 80051b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051ba:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 80051bc:	f7ff feee 	bl	8004f9c <callback_extInt14>
}
 80051c0:	e00d      	b.n	80051de <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <EXTI15_10_IRQHandler+0xbc>)
 80051d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d8:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 80051da:	f7ff fee7 	bl	8004fac <callback_extInt15>
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40013c00 	.word	0x40013c00

080051e8 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a88      	ldr	r2, [pc, #544]	; (8005420 <GPIO_Config+0x238>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d106      	bne.n	8005210 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8005202:	4b88      	ldr	r3, [pc, #544]	; (8005424 <GPIO_Config+0x23c>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	4a87      	ldr	r2, [pc, #540]	; (8005424 <GPIO_Config+0x23c>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6313      	str	r3, [r2, #48]	; 0x30
 800520e:	e03a      	b.n	8005286 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a84      	ldr	r2, [pc, #528]	; (8005428 <GPIO_Config+0x240>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d106      	bne.n	8005228 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800521a:	4b82      	ldr	r3, [pc, #520]	; (8005424 <GPIO_Config+0x23c>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	4a81      	ldr	r2, [pc, #516]	; (8005424 <GPIO_Config+0x23c>)
 8005220:	f043 0302 	orr.w	r3, r3, #2
 8005224:	6313      	str	r3, [r2, #48]	; 0x30
 8005226:	e02e      	b.n	8005286 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a7f      	ldr	r2, [pc, #508]	; (800542c <GPIO_Config+0x244>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d106      	bne.n	8005240 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8005232:	4b7c      	ldr	r3, [pc, #496]	; (8005424 <GPIO_Config+0x23c>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	4a7b      	ldr	r2, [pc, #492]	; (8005424 <GPIO_Config+0x23c>)
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	6313      	str	r3, [r2, #48]	; 0x30
 800523e:	e022      	b.n	8005286 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a7a      	ldr	r2, [pc, #488]	; (8005430 <GPIO_Config+0x248>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d106      	bne.n	8005258 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800524a:	4b76      	ldr	r3, [pc, #472]	; (8005424 <GPIO_Config+0x23c>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	4a75      	ldr	r2, [pc, #468]	; (8005424 <GPIO_Config+0x23c>)
 8005250:	f043 0308 	orr.w	r3, r3, #8
 8005254:	6313      	str	r3, [r2, #48]	; 0x30
 8005256:	e016      	b.n	8005286 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a75      	ldr	r2, [pc, #468]	; (8005434 <GPIO_Config+0x24c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d106      	bne.n	8005270 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8005262:	4b70      	ldr	r3, [pc, #448]	; (8005424 <GPIO_Config+0x23c>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	4a6f      	ldr	r2, [pc, #444]	; (8005424 <GPIO_Config+0x23c>)
 8005268:	f043 0310 	orr.w	r3, r3, #16
 800526c:	6313      	str	r3, [r2, #48]	; 0x30
 800526e:	e00a      	b.n	8005286 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a70      	ldr	r2, [pc, #448]	; (8005438 <GPIO_Config+0x250>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d105      	bne.n	8005286 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800527a:	4b6a      	ldr	r3, [pc, #424]	; (8005424 <GPIO_Config+0x23c>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	4a69      	ldr	r2, [pc, #420]	; (8005424 <GPIO_Config+0x23c>)
 8005280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005284:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	795b      	ldrb	r3, [r3, #5]
 800528a:	461a      	mov	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	791b      	ldrb	r3, [r3, #4]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	2103      	movs	r1, #3
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	43db      	mvns	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	400a      	ands	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6819      	ldr	r1, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7a1b      	ldrb	r3, [r3, #8]
 80052ca:	461a      	mov	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	791b      	ldrb	r3, [r3, #4]
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	791b      	ldrb	r3, [r3, #4]
 80052e0:	4619      	mov	r1, r3
 80052e2:	2301      	movs	r3, #1
 80052e4:	408b      	lsls	r3, r1
 80052e6:	43db      	mvns	r3, r3
 80052e8:	4619      	mov	r1, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	400a      	ands	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6859      	ldr	r1, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	799b      	ldrb	r3, [r3, #6]
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	791b      	ldrb	r3, [r3, #4]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	2103      	movs	r1, #3
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	400a      	ands	r2, r1
 8005330:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6899      	ldr	r1, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	430a      	orrs	r2, r1
 8005340:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	79db      	ldrb	r3, [r3, #7]
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	791b      	ldrb	r3, [r3, #4]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	791b      	ldrb	r3, [r3, #4]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	2103      	movs	r1, #3
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	400a      	ands	r2, r1
 8005370:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68d9      	ldr	r1, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	430a      	orrs	r2, r1
 8005380:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	795b      	ldrb	r3, [r3, #5]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d143      	bne.n	8005412 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	791b      	ldrb	r3, [r3, #4]
 800538e:	2b07      	cmp	r3, #7
 8005390:	d81f      	bhi.n	80053d2 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	791b      	ldrb	r3, [r3, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	210f      	movs	r1, #15
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	4619      	mov	r1, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	400a      	ands	r2, r1
 80053b2:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7a5b      	ldrb	r3, [r3, #9]
 80053be:	4619      	mov	r1, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	4619      	mov	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 80053d0:	e01f      	b.n	8005412 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	791b      	ldrb	r3, [r3, #4]
 80053d6:	3b08      	subs	r3, #8
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e2:	210f      	movs	r1, #15
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	4619      	mov	r1, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	400a      	ands	r2, r1
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7a5b      	ldrb	r3, [r3, #9]
 8005400:	4619      	mov	r1, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	4619      	mov	r1, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40020000 	.word	0x40020000
 8005424:	40023800 	.word	0x40023800
 8005428:	40020400 	.word	0x40020400
 800542c:	40020800 	.word	0x40020800
 8005430:	40020c00 	.word	0x40020c00
 8005434:	40021000 	.word	0x40021000
 8005438:	40021c00 	.word	0x40021c00

0800543c <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10d      	bne.n	800546a <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699a      	ldr	r2, [r3, #24]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	791b      	ldrb	r3, [r3, #4]
 8005458:	4619      	mov	r1, r3
 800545a:	2301      	movs	r3, #1
 800545c:	408b      	lsls	r3, r1
 800545e:	4619      	mov	r1, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8005468:	e00d      	b.n	8005486 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	791b      	ldrb	r3, [r3, #4]
 8005474:	3310      	adds	r3, #16
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	4619      	mov	r1, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	619a      	str	r2, [r3, #24]
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	791b      	ldrb	r3, [r3, #4]
 80054a2:	461a      	mov	r2, r3
 80054a4:	2301      	movs	r3, #1
 80054a6:	4093      	lsls	r3, r2
 80054a8:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4013      	ands	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	791b      	ldrb	r3, [r3, #4]
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	40d3      	lsrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ffd8 	bl	8005492 <GPIO_ReadPin>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ffa1 	bl	800543c <GPIO_WritePin>
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 800550e:	4b92      	ldr	r3, [pc, #584]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a91      	ldr	r2, [pc, #580]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005514:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005518:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800551a:	4b8f      	ldr	r3, [pc, #572]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800551c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8005522:	4b8e      	ldr	r3, [pc, #568]	; (800575c <RCC_enableMaxFrequencies+0x258>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a8d      	ldr	r2, [pc, #564]	; (800575c <RCC_enableMaxFrequencies+0x258>)
 8005528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800552c:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800552e:	4b8a      	ldr	r3, [pc, #552]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4a89      	ldr	r2, [pc, #548]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005534:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005538:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	2b08      	cmp	r3, #8
 800553e:	f200 82fc 	bhi.w	8005b3a <RCC_enableMaxFrequencies+0x636>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <RCC_enableMaxFrequencies+0x44>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	0800556d 	.word	0x0800556d
 800554c:	0800560f 	.word	0x0800560f
 8005550:	080056b1 	.word	0x080056b1
 8005554:	08005765 	.word	0x08005765
 8005558:	08005807 	.word	0x08005807
 800555c:	080058a9 	.word	0x080058a9
 8005560:	08005955 	.word	0x08005955
 8005564:	080059f7 	.word	0x080059f7
 8005568:	08005a99 	.word	0x08005a99
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800556c:	4b7a      	ldr	r3, [pc, #488]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a79      	ldr	r2, [pc, #484]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005576:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005578:	4b77      	ldr	r3, [pc, #476]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a76      	ldr	r2, [pc, #472]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800557e:	f043 0310 	orr.w	r3, r3, #16
 8005582:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005584:	4b74      	ldr	r3, [pc, #464]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4a73      	ldr	r2, [pc, #460]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800558a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800558e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005592:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8005594:	4b70      	ldr	r3, [pc, #448]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a6f      	ldr	r2, [pc, #444]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800559a:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800559e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80055a0:	4b6d      	ldr	r3, [pc, #436]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4a6c      	ldr	r2, [pc, #432]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80055ac:	4b6a      	ldr	r3, [pc, #424]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a69      	ldr	r2, [pc, #420]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b6:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80055b8:	4b67      	ldr	r3, [pc, #412]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a66      	ldr	r2, [pc, #408]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80055c4:	4b64      	ldr	r3, [pc, #400]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a63      	ldr	r2, [pc, #396]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055ce:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80055d0:	4b61      	ldr	r3, [pc, #388]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a60      	ldr	r2, [pc, #384]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055da:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80055dc:	4b5e      	ldr	r3, [pc, #376]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a5d      	ldr	r2, [pc, #372]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80055e8:	e000      	b.n	80055ec <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80055ea:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80055ec:	4b5a      	ldr	r3, [pc, #360]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f8      	beq.n	80055ea <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80055f8:	4b59      	ldr	r3, [pc, #356]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a58      	ldr	r2, [pc, #352]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 80055fe:	f023 030f 	bic.w	r3, r3, #15
 8005602:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8005604:	4b56      	ldr	r3, [pc, #344]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 8005606:	4a56      	ldr	r2, [pc, #344]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6013      	str	r3, [r2, #0]

			break;
 800560c:	e296      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800560e:	4b52      	ldr	r3, [pc, #328]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4a51      	ldr	r2, [pc, #324]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005614:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005618:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800561a:	4b4f      	ldr	r3, [pc, #316]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4a4e      	ldr	r2, [pc, #312]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005620:	f043 0310 	orr.w	r3, r3, #16
 8005624:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005626:	4b4c      	ldr	r3, [pc, #304]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4a4b      	ldr	r2, [pc, #300]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800562c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8005636:	4b48      	ldr	r3, [pc, #288]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4a47      	ldr	r2, [pc, #284]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800563c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005640:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005642:	4b45      	ldr	r3, [pc, #276]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4a44      	ldr	r2, [pc, #272]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005648:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800564c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800564e:	4b42      	ldr	r3, [pc, #264]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4a41      	ldr	r2, [pc, #260]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800565a:	4b3f      	ldr	r3, [pc, #252]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	4a3e      	ldr	r2, [pc, #248]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005664:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005666:	4b3c      	ldr	r3, [pc, #240]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	4a3b      	ldr	r2, [pc, #236]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800566c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005670:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8005672:	4b39      	ldr	r3, [pc, #228]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4a38      	ldr	r2, [pc, #224]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800567e:	4b36      	ldr	r3, [pc, #216]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a35      	ldr	r2, [pc, #212]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005688:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800568a:	e000      	b.n	800568e <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800568c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800568e:	4b32      	ldr	r3, [pc, #200]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f8      	beq.n	800568c <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800569a:	4b31      	ldr	r3, [pc, #196]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a30      	ldr	r2, [pc, #192]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 80056a0:	f023 030f 	bic.w	r3, r3, #15
 80056a4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80056a6:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 80056a8:	4a2d      	ldr	r2, [pc, #180]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6013      	str	r3, [r2, #0]

			break;
 80056ae:	e245      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80056b0:	4b29      	ldr	r3, [pc, #164]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4a28      	ldr	r2, [pc, #160]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80056bc:	4b26      	ldr	r3, [pc, #152]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a25      	ldr	r2, [pc, #148]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056c2:	f043 0310 	orr.w	r3, r3, #16
 80056c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4a22      	ldr	r2, [pc, #136]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80056d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 80056d8:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056de:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80056e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80056ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80056f0:	4b19      	ldr	r3, [pc, #100]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a18      	ldr	r2, [pc, #96]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fa:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80056fc:	4b16      	ldr	r3, [pc, #88]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4a15      	ldr	r2, [pc, #84]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005706:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005708:	4b13      	ldr	r3, [pc, #76]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a12      	ldr	r2, [pc, #72]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800570e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005712:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8005714:	4b10      	ldr	r3, [pc, #64]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 800571a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800571e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005720:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800572c:	e000      	b.n	8005730 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800572e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005730:	4b09      	ldr	r3, [pc, #36]	; (8005758 <RCC_enableMaxFrequencies+0x254>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f8      	beq.n	800572e <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a07      	ldr	r2, [pc, #28]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 8005742:	f023 030f 	bic.w	r3, r3, #15
 8005746:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a04      	ldr	r2, [pc, #16]	; (8005760 <RCC_enableMaxFrequencies+0x25c>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6013      	str	r3, [r2, #0]


			break;
 8005754:	e1f2      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	40007000 	.word	0x40007000
 8005760:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005764:	4b79      	ldr	r3, [pc, #484]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a78      	ldr	r2, [pc, #480]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800576a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800576e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005770:	4b76      	ldr	r3, [pc, #472]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4a75      	ldr	r2, [pc, #468]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005776:	f043 0310 	orr.w	r3, r3, #16
 800577a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800577c:	4b73      	ldr	r3, [pc, #460]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a72      	ldr	r2, [pc, #456]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005782:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800578c:	4b6f      	ldr	r3, [pc, #444]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a6e      	ldr	r2, [pc, #440]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005792:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8005796:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005798:	4b6c      	ldr	r3, [pc, #432]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4a6b      	ldr	r2, [pc, #428]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800579e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80057a2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80057a4:	4b69      	ldr	r3, [pc, #420]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057a6:	4a69      	ldr	r2, [pc, #420]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80057ac:	4b67      	ldr	r3, [pc, #412]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4a66      	ldr	r2, [pc, #408]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80057b8:	4b64      	ldr	r3, [pc, #400]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a63      	ldr	r2, [pc, #396]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80057c4:	4b61      	ldr	r3, [pc, #388]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a60      	ldr	r2, [pc, #384]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ce:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80057d0:	4b5e      	ldr	r3, [pc, #376]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a5d      	ldr	r2, [pc, #372]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057da:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80057dc:	e000      	b.n	80057e0 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 80057de:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80057e0:	4b5a      	ldr	r3, [pc, #360]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f8      	beq.n	80057de <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80057ec:	4b58      	ldr	r3, [pc, #352]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a57      	ldr	r2, [pc, #348]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 80057f2:	f023 030f 	bic.w	r3, r3, #15
 80057f6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80057f8:	4b55      	ldr	r3, [pc, #340]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a54      	ldr	r2, [pc, #336]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6013      	str	r3, [r2, #0]

			break;
 8005804:	e19a      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005806:	4b51      	ldr	r3, [pc, #324]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4a50      	ldr	r2, [pc, #320]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800580c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005810:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005812:	4b4e      	ldr	r3, [pc, #312]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4a4d      	ldr	r2, [pc, #308]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005818:	f043 0310 	orr.w	r3, r3, #16
 800581c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800581e:	4b4b      	ldr	r3, [pc, #300]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4a4a      	ldr	r2, [pc, #296]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005824:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800582e:	4b47      	ldr	r3, [pc, #284]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4a46      	ldr	r2, [pc, #280]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005834:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8005838:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800583a:	4b44      	ldr	r3, [pc, #272]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4a43      	ldr	r2, [pc, #268]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005840:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005844:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005846:	4b41      	ldr	r3, [pc, #260]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005848:	4a40      	ldr	r2, [pc, #256]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800584e:	4b3f      	ldr	r3, [pc, #252]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4a3e      	ldr	r2, [pc, #248]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005858:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800585a:	4b3c      	ldr	r3, [pc, #240]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4a3b      	ldr	r2, [pc, #236]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005864:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	4a38      	ldr	r2, [pc, #224]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800586c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005870:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005872:	4b36      	ldr	r3, [pc, #216]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a35      	ldr	r2, [pc, #212]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800587e:	e000      	b.n	8005882 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8005880:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005882:	4b32      	ldr	r3, [pc, #200]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f8      	beq.n	8005880 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800588e:	4b30      	ldr	r3, [pc, #192]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2f      	ldr	r2, [pc, #188]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 8005894:	f023 030f 	bic.w	r3, r3, #15
 8005898:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800589a:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2c      	ldr	r2, [pc, #176]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6013      	str	r3, [r2, #0]

			break;
 80058a6:	e149      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80058a8:	4b28      	ldr	r3, [pc, #160]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058b2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a24      	ldr	r2, [pc, #144]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058ba:	f043 0310 	orr.w	r3, r3, #16
 80058be:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80058c0:	4b22      	ldr	r3, [pc, #136]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a21      	ldr	r2, [pc, #132]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 80058d0:	4b1e      	ldr	r3, [pc, #120]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a1d      	ldr	r2, [pc, #116]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058d6:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 80058da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a1a      	ldr	r2, [pc, #104]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80058e6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80058e8:	4b18      	ldr	r3, [pc, #96]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80058f0:	4b16      	ldr	r3, [pc, #88]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fa:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80058fc:	4b13      	ldr	r3, [pc, #76]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a12      	ldr	r2, [pc, #72]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005906:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4a0f      	ldr	r2, [pc, #60]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800590e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005912:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0c      	ldr	r2, [pc, #48]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 800591a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005920:	e000      	b.n	8005924 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8005922:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005924:	4b09      	ldr	r3, [pc, #36]	; (800594c <RCC_enableMaxFrequencies+0x448>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f8      	beq.n	8005922 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a06      	ldr	r2, [pc, #24]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 8005936:	f023 030f 	bic.w	r3, r3, #15
 800593a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a03      	ldr	r2, [pc, #12]	; (8005950 <RCC_enableMaxFrequencies+0x44c>)
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	6013      	str	r3, [r2, #0]

			break;
 8005948:	e0f8      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
 800594a:	bf00      	nop
 800594c:	40023800 	.word	0x40023800
 8005950:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005954:	4b83      	ldr	r3, [pc, #524]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4a82      	ldr	r2, [pc, #520]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 800595a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800595e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005960:	4b80      	ldr	r3, [pc, #512]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4a7f      	ldr	r2, [pc, #508]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005966:	f043 0310 	orr.w	r3, r3, #16
 800596a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800596c:	4b7d      	ldr	r3, [pc, #500]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a7c      	ldr	r2, [pc, #496]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005972:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 800597c:	4b79      	ldr	r3, [pc, #484]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a78      	ldr	r2, [pc, #480]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005982:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005986:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005988:	4b76      	ldr	r3, [pc, #472]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a75      	ldr	r2, [pc, #468]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 800598e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005992:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005994:	4b73      	ldr	r3, [pc, #460]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005996:	4a73      	ldr	r2, [pc, #460]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800599c:	4b71      	ldr	r3, [pc, #452]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a70      	ldr	r2, [pc, #448]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80059a8:	4b6e      	ldr	r3, [pc, #440]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4a6d      	ldr	r2, [pc, #436]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059b2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80059b4:	4b6b      	ldr	r3, [pc, #428]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	4a6a      	ldr	r2, [pc, #424]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059be:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80059c0:	4b68      	ldr	r3, [pc, #416]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a67      	ldr	r2, [pc, #412]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ca:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80059cc:	e000      	b.n	80059d0 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 80059ce:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80059d0:	4b64      	ldr	r3, [pc, #400]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f8      	beq.n	80059ce <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80059dc:	4b62      	ldr	r3, [pc, #392]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a61      	ldr	r2, [pc, #388]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 80059e2:	f023 030f 	bic.w	r3, r3, #15
 80059e6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80059e8:	4b5f      	ldr	r3, [pc, #380]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a5e      	ldr	r2, [pc, #376]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 80059ee:	f043 0302 	orr.w	r3, r3, #2
 80059f2:	6013      	str	r3, [r2, #0]

			break;
 80059f4:	e0a2      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80059f6:	4b5b      	ldr	r3, [pc, #364]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4a5a      	ldr	r2, [pc, #360]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 80059fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a00:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8005a02:	4b58      	ldr	r3, [pc, #352]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a57      	ldr	r2, [pc, #348]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a08:	f043 0310 	orr.w	r3, r3, #16
 8005a0c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005a0e:	4b55      	ldr	r3, [pc, #340]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	4a54      	ldr	r2, [pc, #336]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a14:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8005a1e:	4b51      	ldr	r3, [pc, #324]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4a50      	ldr	r2, [pc, #320]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a24:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8005a28:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005a2a:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4a4d      	ldr	r2, [pc, #308]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a30:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005a34:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005a36:	4b4b      	ldr	r3, [pc, #300]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a38:	4a4a      	ldr	r2, [pc, #296]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005a3e:	4b49      	ldr	r3, [pc, #292]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4a48      	ldr	r2, [pc, #288]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a48:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005a4a:	4b46      	ldr	r3, [pc, #280]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4a45      	ldr	r2, [pc, #276]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a54:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005a56:	4b43      	ldr	r3, [pc, #268]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a42      	ldr	r2, [pc, #264]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a60:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005a62:	4b40      	ldr	r3, [pc, #256]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a3f      	ldr	r2, [pc, #252]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005a6e:	e000      	b.n	8005a72 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8005a70:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005a72:	4b3c      	ldr	r3, [pc, #240]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f8      	beq.n	8005a70 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005a7e:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a39      	ldr	r2, [pc, #228]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005a84:	f023 030f 	bic.w	r3, r3, #15
 8005a88:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8005a8a:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a36      	ldr	r2, [pc, #216]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005a90:	f043 0302 	orr.w	r3, r3, #2
 8005a94:	6013      	str	r3, [r2, #0]

			break;
 8005a96:	e051      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8005a98:	4b32      	ldr	r3, [pc, #200]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a31      	ldr	r2, [pc, #196]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aa2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8005aa4:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a2e      	ldr	r2, [pc, #184]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005aaa:	f043 0308 	orr.w	r3, r3, #8
 8005aae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8005ab0:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8005ac0:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4a27      	ldr	r2, [pc, #156]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ac6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8005aca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8005acc:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4a24      	ldr	r2, [pc, #144]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ad2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005ad6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8005ad8:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ada:	4a22      	ldr	r2, [pc, #136]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aea:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8005aec:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005af2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005afe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b02:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8005b04:	4b17      	ldr	r3, [pc, #92]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005b10:	e000      	b.n	8005b14 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8005b12:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005b14:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f8      	beq.n	8005b12 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a10      	ldr	r2, [pc, #64]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005b26:	f023 030f 	bic.w	r3, r3, #15
 8005b2a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <RCC_enableMaxFrequencies+0x664>)
 8005b32:	f043 0303 	orr.w	r3, r3, #3
 8005b36:	6013      	str	r3, [r2, #0]

			break;
 8005b38:	e000      	b.n	8005b3c <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8005b3a:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005b3c:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005b48:	e000      	b.n	8005b4c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8005b4a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <RCC_enableMaxFrequencies+0x660>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f8      	beq.n	8005b4a <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8005b58:	f000 fd3e 	bl	80065d8 <SystemCoreClockUpdate>

}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40023800 	.word	0x40023800
 8005b68:	40023c00 	.word	0x40023c00

08005b6c <__NVIC_EnableIRQ>:
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	db0b      	blt.n	8005b96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	f003 021f 	and.w	r2, r3, #31
 8005b84:	4907      	ldr	r1, [pc, #28]	; (8005ba4 <__NVIC_EnableIRQ+0x38>)
 8005b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	e000e100 	.word	0xe000e100

08005ba8 <__NVIC_SetPriority>:
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	db0a      	blt.n	8005bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	490c      	ldr	r1, [pc, #48]	; (8005bf4 <__NVIC_SetPriority+0x4c>)
 8005bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc6:	0112      	lsls	r2, r2, #4
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	440b      	add	r3, r1
 8005bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005bd0:	e00a      	b.n	8005be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	4908      	ldr	r1, [pc, #32]	; (8005bf8 <__NVIC_SetPriority+0x50>)
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	3b04      	subs	r3, #4
 8005be0:	0112      	lsls	r2, r2, #4
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	440b      	add	r3, r1
 8005be6:	761a      	strb	r2, [r3, #24]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	e000e100 	.word	0xe000e100
 8005bf8:	e000ed00 	.word	0xe000ed00

08005bfc <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c04:	b672      	cpsid	i
}
 8005c06:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a8f      	ldr	r2, [pc, #572]	; (8005e4c <USART_Config+0x250>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d106      	bne.n	8005c20 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8005c12:	4b8f      	ldr	r3, [pc, #572]	; (8005e50 <USART_Config+0x254>)
 8005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c16:	4a8e      	ldr	r2, [pc, #568]	; (8005e50 <USART_Config+0x254>)
 8005c18:	f043 0310 	orr.w	r3, r3, #16
 8005c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c1e:	e018      	b.n	8005c52 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a8b      	ldr	r2, [pc, #556]	; (8005e54 <USART_Config+0x258>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d106      	bne.n	8005c38 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8005c2a:	4b89      	ldr	r3, [pc, #548]	; (8005e50 <USART_Config+0x254>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	4a88      	ldr	r2, [pc, #544]	; (8005e50 <USART_Config+0x254>)
 8005c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c34:	6413      	str	r3, [r2, #64]	; 0x40
 8005c36:	e00c      	b.n	8005c52 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a86      	ldr	r2, [pc, #536]	; (8005e58 <USART_Config+0x25c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d106      	bne.n	8005c50 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8005c42:	4b83      	ldr	r3, [pc, #524]	; (8005e50 <USART_Config+0x254>)
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	4a82      	ldr	r2, [pc, #520]	; (8005e50 <USART_Config+0x254>)
 8005c48:	f043 0320 	orr.w	r3, r3, #32
 8005c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c4e:	e000      	b.n	8005c52 <USART_Config+0x56>
	}
	else{
		__NOP();
 8005c50:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2200      	movs	r2, #0
 8005c58:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	7a5b      	ldrb	r3, [r3, #9]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d025      	beq.n	8005cb6 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7a5b      	ldrb	r3, [r3, #9]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d110      	bne.n	8005c94 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c80:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e018      	b.n	8005cc6 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca2:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	e007      	b.n	8005cc6 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc4:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	7a1b      	ldrb	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	e007      	b.n	8005cf0 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cee:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7a9b      	ldrb	r3, [r3, #10]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d82f      	bhi.n	8005d58 <USART_Config+0x15c>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <USART_Config+0x104>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d23 	.word	0x08005d23
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d47 	.word	0x08005d47
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005d1e:	611a      	str	r2, [r3, #16]
			break;
 8005d20:	e023      	b.n	8005d6a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d30:	611a      	str	r2, [r3, #16]
			break;
 8005d32:	e01a      	b.n	8005d6a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d42:	611a      	str	r2, [r3, #16]
			break;
 8005d44:	e011      	b.n	8005d6a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005d54:	611a      	str	r2, [r3, #16]
			break;
 8005d56:	e008      	b.n	8005d6a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005d66:	611a      	str	r2, [r3, #16]
			break;
 8005d68:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681c      	ldr	r4, [r3, #0]
 8005d72:	4611      	mov	r1, r2
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f8cb 	bl	8005f10 <brrCalculus>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	799b      	ldrb	r3, [r3, #6]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d82e      	bhi.n	8005de4 <USART_Config+0x1e8>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <USART_Config+0x190>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005daf 	.word	0x08005daf
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	08005dd3 	.word	0x08005dd3
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	60da      	str	r2, [r3, #12]
			break;
 8005dac:	e023      	b.n	8005df6 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0204 	orr.w	r2, r2, #4
 8005dbc:	60da      	str	r2, [r3, #12]
			break;
 8005dbe:	e01a      	b.n	8005df6 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 020c 	orr.w	r2, r2, #12
 8005dce:	60da      	str	r2, [r3, #12]
			break;
 8005dd0:	e011      	b.n	8005df6 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 020c 	bic.w	r2, r2, #12
 8005de0:	60da      	str	r2, [r3, #12]
			break;
 8005de2:	e008      	b.n	8005df6 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 020c 	bic.w	r2, r2, #12
 8005df2:	60da      	str	r2, [r3, #12]
			break;
 8005df4:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	799b      	ldrb	r3, [r3, #6]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d008      	beq.n	8005e10 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	e007      	b.n	8005e20 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e1e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	795b      	ldrb	r3, [r3, #5]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d12d      	bne.n	8005e84 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0220 	orr.w	r2, r2, #32
 8005e36:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a03      	ldr	r2, [pc, #12]	; (8005e4c <USART_Config+0x250>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10c      	bne.n	8005e5c <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8005e42:	2025      	movs	r0, #37	; 0x25
 8005e44:	f7ff fe92 	bl	8005b6c <__NVIC_EnableIRQ>
 8005e48:	e024      	b.n	8005e94 <USART_Config+0x298>
 8005e4a:	bf00      	nop
 8005e4c:	40011000 	.word	0x40011000
 8005e50:	40023800 	.word	0x40023800
 8005e54:	40004400 	.word	0x40004400
 8005e58:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <USART_Config+0x308>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d103      	bne.n	8005e6e <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8005e66:	2026      	movs	r0, #38	; 0x26
 8005e68:	f7ff fe80 	bl	8005b6c <__NVIC_EnableIRQ>
 8005e6c:	e012      	b.n	8005e94 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a25      	ldr	r2, [pc, #148]	; (8005f08 <USART_Config+0x30c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d103      	bne.n	8005e80 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8005e78:	2047      	movs	r0, #71	; 0x47
 8005e7a:	f7ff fe77 	bl	8005b6c <__NVIC_EnableIRQ>
 8005e7e:	e009      	b.n	8005e94 <USART_Config+0x298>
		}
		else{
				__NOP();
 8005e80:	bf00      	nop
 8005e82:	e007      	b.n	8005e94 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0220 	bic.w	r2, r2, #32
 8005e92:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	791b      	ldrb	r3, [r3, #4]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d124      	bne.n	8005ee6 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eaa:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <USART_Config+0x310>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d103      	bne.n	8005ebe <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8005eb6:	2025      	movs	r0, #37	; 0x25
 8005eb8:	f7ff fe58 	bl	8005b6c <__NVIC_EnableIRQ>
 8005ebc:	e01b      	b.n	8005ef6 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <USART_Config+0x308>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d103      	bne.n	8005ed0 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8005ec8:	2026      	movs	r0, #38	; 0x26
 8005eca:	f7ff fe4f 	bl	8005b6c <__NVIC_EnableIRQ>
 8005ece:	e012      	b.n	8005ef6 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <USART_Config+0x30c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d103      	bne.n	8005ee2 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8005eda:	2047      	movs	r0, #71	; 0x47
 8005edc:	f7ff fe46 	bl	8005b6c <__NVIC_EnableIRQ>
 8005ee0:	e009      	b.n	8005ef6 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8005ee2:	bf00      	nop
 8005ee4:	e007      	b.n	8005ef6 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef6:	b662      	cpsie	i
}
 8005ef8:	bf00      	nop
	}

	__enable_irq();
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd90      	pop	{r4, r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40004400 	.word	0x40004400
 8005f08:	40011400 	.word	0x40011400
 8005f0c:	40011000 	.word	0x40011000

08005f10 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8005f10:	b5b0      	push	{r4, r5, r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	79db      	ldrb	r3, [r3, #7]
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	f200 8217 	bhi.w	8006352 <brrCalculus+0x442>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <brrCalculus+0x1c>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08006037 	.word	0x08006037
 8005f34:	08006151 	.word	0x08006151
 8005f38:	08006259 	.word	0x08006259

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8005f3c:	4980      	ldr	r1, [pc, #512]	; (8006140 <brrCalculus+0x230>)
 8005f3e:	a37c      	add	r3, pc, #496	; (adr r3, 8006130 <brrCalculus+0x220>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	ee17 0a90 	vmov	r0, s15
 8005f56:	f7fa faf7 	bl	8000548 <__aeabi_f2d>
 8005f5a:	4b79      	ldr	r3, [pc, #484]	; (8006140 <brrCalculus+0x230>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa fb4a 	bl	80005f8 <__aeabi_dmul>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4975      	ldr	r1, [pc, #468]	; (8006140 <brrCalculus+0x230>)
 8005f6a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8005f6e:	4b74      	ldr	r3, [pc, #464]	; (8006140 <brrCalculus+0x230>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	4610      	mov	r0, r2
 8005f76:	4619      	mov	r1, r3
 8005f78:	f7fa fdee 	bl	8000b58 <__aeabi_d2iz>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	4b70      	ldr	r3, [pc, #448]	; (8006144 <brrCalculus+0x234>)
 8005f82:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8005f84:	4b6e      	ldr	r3, [pc, #440]	; (8006140 <brrCalculus+0x230>)
 8005f86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f8a:	4b6d      	ldr	r3, [pc, #436]	; (8006140 <brrCalculus+0x230>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	f7fa fde0 	bl	8000b58 <__aeabi_d2iz>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa fac2 	bl	8000524 <__aeabi_i2d>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f7fa f96e 	bl	8000288 <__aeabi_dsub>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	f7fa fdf8 	bl	8000ba8 <__aeabi_d2f>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4a63      	ldr	r2, [pc, #396]	; (8006148 <brrCalculus+0x238>)
 8005fbc:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8005fbe:	4b62      	ldr	r3, [pc, #392]	; (8006148 <brrCalculus+0x238>)
 8005fc0:	edd3 7a00 	vldr	s15, [r3]
 8005fc4:	2004      	movs	r0, #4
 8005fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fca:	f000 fa6d 	bl	80064a8 <roundToNDecimals>
 8005fce:	eef0 7a40 	vmov.f32	s15, s0
 8005fd2:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <brrCalculus+0x238>)
 8005fd4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8005fd8:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <brrCalculus+0x238>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fe6:	4b58      	ldr	r3, [pc, #352]	; (8006148 <brrCalculus+0x238>)
 8005fe8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8005fec:	4b56      	ldr	r3, [pc, #344]	; (8006148 <brrCalculus+0x238>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fa faa9 	bl	8000548 <__aeabi_f2d>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	ec43 2b10 	vmov	d0, r2, r3
 8005ffe:	f001 fddf 	bl	8007bc0 <round>
 8006002:	ec53 2b10 	vmov	r2, r3, d0
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	f7fa fdcd 	bl	8000ba8 <__aeabi_d2f>
 800600e:	4603      	mov	r3, r0
 8006010:	4a4d      	ldr	r2, [pc, #308]	; (8006148 <brrCalculus+0x238>)
 8006012:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006014:	4b4b      	ldr	r3, [pc, #300]	; (8006144 <brrCalculus+0x234>)
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	b29a      	uxth	r2, r3
 800601c:	4b4a      	ldr	r3, [pc, #296]	; (8006148 <brrCalculus+0x238>)
 800601e:	edd3 7a00 	vldr	s15, [r3]
 8006022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006026:	ee17 3a90 	vmov	r3, s15
 800602a:	b29b      	uxth	r3, r3
 800602c:	4313      	orrs	r3, r2
 800602e:	b29a      	uxth	r2, r3
 8006030:	4b46      	ldr	r3, [pc, #280]	; (800614c <brrCalculus+0x23c>)
 8006032:	801a      	strh	r2, [r3, #0]


		break;
 8006034:	e18f      	b.n	8006356 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8006036:	4942      	ldr	r1, [pc, #264]	; (8006140 <brrCalculus+0x230>)
 8006038:	a33f      	add	r3, pc, #252	; (adr r3, 8006138 <brrCalculus+0x228>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604c:	ee17 0a90 	vmov	r0, s15
 8006050:	f7fa fa7a 	bl	8000548 <__aeabi_f2d>
 8006054:	4b3a      	ldr	r3, [pc, #232]	; (8006140 <brrCalculus+0x230>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa facd 	bl	80005f8 <__aeabi_dmul>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4937      	ldr	r1, [pc, #220]	; (8006140 <brrCalculus+0x230>)
 8006064:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8006068:	4b35      	ldr	r3, [pc, #212]	; (8006140 <brrCalculus+0x230>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	f7fa fd71 	bl	8000b58 <__aeabi_d2iz>
 8006076:	4603      	mov	r3, r0
 8006078:	b29a      	uxth	r2, r3
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <brrCalculus+0x234>)
 800607c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800607e:	4b30      	ldr	r3, [pc, #192]	; (8006140 <brrCalculus+0x230>)
 8006080:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <brrCalculus+0x230>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	4610      	mov	r0, r2
 800608c:	4619      	mov	r1, r3
 800608e:	f7fa fd63 	bl	8000b58 <__aeabi_d2iz>
 8006092:	4603      	mov	r3, r0
 8006094:	4618      	mov	r0, r3
 8006096:	f7fa fa45 	bl	8000524 <__aeabi_i2d>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa f8f1 	bl	8000288 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	f7fa fd7b 	bl	8000ba8 <__aeabi_d2f>
 80060b2:	4603      	mov	r3, r0
 80060b4:	4a24      	ldr	r2, [pc, #144]	; (8006148 <brrCalculus+0x238>)
 80060b6:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80060b8:	4b23      	ldr	r3, [pc, #140]	; (8006148 <brrCalculus+0x238>)
 80060ba:	edd3 7a00 	vldr	s15, [r3]
 80060be:	2004      	movs	r0, #4
 80060c0:	eeb0 0a67 	vmov.f32	s0, s15
 80060c4:	f000 f9f0 	bl	80064a8 <roundToNDecimals>
 80060c8:	eef0 7a40 	vmov.f32	s15, s0
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <brrCalculus+0x238>)
 80060ce:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80060d2:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <brrCalculus+0x238>)
 80060d4:	edd3 7a00 	vldr	s15, [r3]
 80060d8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80060dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <brrCalculus+0x238>)
 80060e2:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80060e6:	4b18      	ldr	r3, [pc, #96]	; (8006148 <brrCalculus+0x238>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fa fa2c 	bl	8000548 <__aeabi_f2d>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	ec43 2b10 	vmov	d0, r2, r3
 80060f8:	f001 fd62 	bl	8007bc0 <round>
 80060fc:	ec53 2b10 	vmov	r2, r3, d0
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f7fa fd50 	bl	8000ba8 <__aeabi_d2f>
 8006108:	4603      	mov	r3, r0
 800610a:	4a0f      	ldr	r2, [pc, #60]	; (8006148 <brrCalculus+0x238>)
 800610c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <brrCalculus+0x234>)
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	b29a      	uxth	r2, r3
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <brrCalculus+0x238>)
 8006118:	edd3 7a00 	vldr	s15, [r3]
 800611c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006120:	ee17 3a90 	vmov	r3, s15
 8006124:	b29b      	uxth	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b29a      	uxth	r2, r3
 800612a:	4b08      	ldr	r3, [pc, #32]	; (800614c <brrCalculus+0x23c>)
 800612c:	801a      	strh	r2, [r3, #0]


		break;
 800612e:	e112      	b.n	8006356 <brrCalculus+0x446>
 8006130:	b4e81b4f 	.word	0xb4e81b4f
 8006134:	3edb4e81 	.word	0x3edb4e81
 8006138:	b4e81b4f 	.word	0xb4e81b4f
 800613c:	3ecb4e81 	.word	0x3ecb4e81
 8006140:	20012f78 	.word	0x20012f78
 8006144:	20012f6e 	.word	0x20012f6e
 8006148:	20012f70 	.word	0x20012f70
 800614c:	20012f6c 	.word	0x20012f6c
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8006150:	4989      	ldr	r1, [pc, #548]	; (8006378 <brrCalculus+0x468>)
 8006152:	a385      	add	r3, pc, #532	; (adr r3, 8006368 <brrCalculus+0x458>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	ee17 0a90 	vmov	r0, s15
 800616a:	f7fa f9ed 	bl	8000548 <__aeabi_f2d>
 800616e:	4b82      	ldr	r3, [pc, #520]	; (8006378 <brrCalculus+0x468>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	497e      	ldr	r1, [pc, #504]	; (8006378 <brrCalculus+0x468>)
 800617e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8006182:	4b7d      	ldr	r3, [pc, #500]	; (8006378 <brrCalculus+0x468>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	f7fa fce4 	bl	8000b58 <__aeabi_d2iz>
 8006190:	4603      	mov	r3, r0
 8006192:	b29a      	uxth	r2, r3
 8006194:	4b79      	ldr	r3, [pc, #484]	; (800637c <brrCalculus+0x46c>)
 8006196:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8006198:	4b77      	ldr	r3, [pc, #476]	; (8006378 <brrCalculus+0x468>)
 800619a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800619e:	4b76      	ldr	r3, [pc, #472]	; (8006378 <brrCalculus+0x468>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	f7fa fcd6 	bl	8000b58 <__aeabi_d2iz>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa f9b8 	bl	8000524 <__aeabi_i2d>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4620      	mov	r0, r4
 80061ba:	4629      	mov	r1, r5
 80061bc:	f7fa f864 	bl	8000288 <__aeabi_dsub>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4610      	mov	r0, r2
 80061c6:	4619      	mov	r1, r3
 80061c8:	f7fa fcee 	bl	8000ba8 <__aeabi_d2f>
 80061cc:	4603      	mov	r3, r0
 80061ce:	4a6c      	ldr	r2, [pc, #432]	; (8006380 <brrCalculus+0x470>)
 80061d0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80061d2:	4b6b      	ldr	r3, [pc, #428]	; (8006380 <brrCalculus+0x470>)
 80061d4:	edd3 7a00 	vldr	s15, [r3]
 80061d8:	2004      	movs	r0, #4
 80061da:	eeb0 0a67 	vmov.f32	s0, s15
 80061de:	f000 f963 	bl	80064a8 <roundToNDecimals>
 80061e2:	eef0 7a40 	vmov.f32	s15, s0
 80061e6:	4b66      	ldr	r3, [pc, #408]	; (8006380 <brrCalculus+0x470>)
 80061e8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80061ec:	4b64      	ldr	r3, [pc, #400]	; (8006380 <brrCalculus+0x470>)
 80061ee:	edd3 7a00 	vldr	s15, [r3]
 80061f2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80061f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061fa:	4b61      	ldr	r3, [pc, #388]	; (8006380 <brrCalculus+0x470>)
 80061fc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8006200:	4b5f      	ldr	r3, [pc, #380]	; (8006380 <brrCalculus+0x470>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7fa f99f 	bl	8000548 <__aeabi_f2d>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	ec43 2b10 	vmov	d0, r2, r3
 8006212:	f001 fcd5 	bl	8007bc0 <round>
 8006216:	ec51 0b10 	vmov	r0, r1, d0
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	4b59      	ldr	r3, [pc, #356]	; (8006384 <brrCalculus+0x474>)
 8006220:	f7fa f834 	bl	800028c <__adddf3>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	f7fa fcbc 	bl	8000ba8 <__aeabi_d2f>
 8006230:	4603      	mov	r3, r0
 8006232:	4a53      	ldr	r2, [pc, #332]	; (8006380 <brrCalculus+0x470>)
 8006234:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006236:	4b51      	ldr	r3, [pc, #324]	; (800637c <brrCalculus+0x46c>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	b29a      	uxth	r2, r3
 800623e:	4b50      	ldr	r3, [pc, #320]	; (8006380 <brrCalculus+0x470>)
 8006240:	edd3 7a00 	vldr	s15, [r3]
 8006244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006248:	ee17 3a90 	vmov	r3, s15
 800624c:	b29b      	uxth	r3, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	b29a      	uxth	r2, r3
 8006252:	4b4d      	ldr	r3, [pc, #308]	; (8006388 <brrCalculus+0x478>)
 8006254:	801a      	strh	r2, [r3, #0]


		break;
 8006256:	e07e      	b.n	8006356 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8006258:	4947      	ldr	r1, [pc, #284]	; (8006378 <brrCalculus+0x468>)
 800625a:	a345      	add	r3, pc, #276	; (adr r3, 8006370 <brrCalculus+0x460>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626e:	ee17 0a90 	vmov	r0, s15
 8006272:	f7fa f969 	bl	8000548 <__aeabi_f2d>
 8006276:	4b40      	ldr	r3, [pc, #256]	; (8006378 <brrCalculus+0x468>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f9bc 	bl	80005f8 <__aeabi_dmul>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	493c      	ldr	r1, [pc, #240]	; (8006378 <brrCalculus+0x468>)
 8006286:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800628a:	4b3b      	ldr	r3, [pc, #236]	; (8006378 <brrCalculus+0x468>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	f7fa fc60 	bl	8000b58 <__aeabi_d2iz>
 8006298:	4603      	mov	r3, r0
 800629a:	b29a      	uxth	r2, r3
 800629c:	4b37      	ldr	r3, [pc, #220]	; (800637c <brrCalculus+0x46c>)
 800629e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80062a0:	4b35      	ldr	r3, [pc, #212]	; (8006378 <brrCalculus+0x468>)
 80062a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80062a6:	4b34      	ldr	r3, [pc, #208]	; (8006378 <brrCalculus+0x468>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	f7fa fc52 	bl	8000b58 <__aeabi_d2iz>
 80062b4:	4603      	mov	r3, r0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fa f934 	bl	8000524 <__aeabi_i2d>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	f7f9 ffe0 	bl	8000288 <__aeabi_dsub>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4610      	mov	r0, r2
 80062ce:	4619      	mov	r1, r3
 80062d0:	f7fa fc6a 	bl	8000ba8 <__aeabi_d2f>
 80062d4:	4603      	mov	r3, r0
 80062d6:	4a2a      	ldr	r2, [pc, #168]	; (8006380 <brrCalculus+0x470>)
 80062d8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80062da:	4b29      	ldr	r3, [pc, #164]	; (8006380 <brrCalculus+0x470>)
 80062dc:	edd3 7a00 	vldr	s15, [r3]
 80062e0:	2004      	movs	r0, #4
 80062e2:	eeb0 0a67 	vmov.f32	s0, s15
 80062e6:	f000 f8df 	bl	80064a8 <roundToNDecimals>
 80062ea:	eef0 7a40 	vmov.f32	s15, s0
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <brrCalculus+0x470>)
 80062f0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80062f4:	4b22      	ldr	r3, [pc, #136]	; (8006380 <brrCalculus+0x470>)
 80062f6:	edd3 7a00 	vldr	s15, [r3]
 80062fa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80062fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006302:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <brrCalculus+0x470>)
 8006304:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8006308:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <brrCalculus+0x470>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f7fa f91b 	bl	8000548 <__aeabi_f2d>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	ec43 2b10 	vmov	d0, r2, r3
 800631a:	f001 fc51 	bl	8007bc0 <round>
 800631e:	ec53 2b10 	vmov	r2, r3, d0
 8006322:	4610      	mov	r0, r2
 8006324:	4619      	mov	r1, r3
 8006326:	f7fa fc3f 	bl	8000ba8 <__aeabi_d2f>
 800632a:	4603      	mov	r3, r0
 800632c:	4a14      	ldr	r2, [pc, #80]	; (8006380 <brrCalculus+0x470>)
 800632e:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8006330:	4b12      	ldr	r3, [pc, #72]	; (800637c <brrCalculus+0x46c>)
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	b29a      	uxth	r2, r3
 8006338:	4b11      	ldr	r3, [pc, #68]	; (8006380 <brrCalculus+0x470>)
 800633a:	edd3 7a00 	vldr	s15, [r3]
 800633e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006342:	ee17 3a90 	vmov	r3, s15
 8006346:	b29b      	uxth	r3, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <brrCalculus+0x478>)
 800634e:	801a      	strh	r2, [r3, #0]


		break;
 8006350:	e001      	b.n	8006356 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8006352:	bf00      	nop
		break;
 8006354:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <brrCalculus+0x478>)
 8006358:	881b      	ldrh	r3, [r3, #0]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bdb0      	pop	{r4, r5, r7, pc}
 8006362:	bf00      	nop
 8006364:	f3af 8000 	nop.w
 8006368:	789abcdf 	.word	0x789abcdf
 800636c:	3ec23456 	.word	0x3ec23456
 8006370:	789abcdf 	.word	0x789abcdf
 8006374:	3ea23456 	.word	0x3ea23456
 8006378:	20012f78 	.word	0x20012f78
 800637c:	20012f6e 	.word	0x20012f6e
 8006380:	20012f70 	.word	0x20012f70
 8006384:	3ff00000 	.word	0x3ff00000
 8006388:	20012f6c 	.word	0x20012f6c

0800638c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8006396:	e000      	b.n	800639a <writeChar+0xe>
		__NOP();
 8006398:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f7      	beq.n	8006398 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	605a      	str	r2, [r3, #4]

}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 80063c6:	e008      	b.n	80063da <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff ffdc 	bl	800638c <writeChar>
		msgToSend ++ ;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f2      	bne.n	80063c8 <writeMsg+0xc>
	}
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
	__NOP();
 80063f0:	bf00      	nop
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
	__NOP();
 8006400:	bf00      	nop
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	return auxRxData;
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <getRxData+0x14>)
 8006412:	781b      	ldrb	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20012f80 	.word	0x20012f80

08006424 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <USART2_IRQHandler+0x24>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8006434:	4b04      	ldr	r3, [pc, #16]	; (8006448 <USART2_IRQHandler+0x24>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	b2da      	uxtb	r2, r3
 800643a:	4b04      	ldr	r3, [pc, #16]	; (800644c <USART2_IRQHandler+0x28>)
 800643c:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800643e:	f7fa fe31 	bl	80010a4 <usart2Rx_Callback>
	}

}
 8006442:	bf00      	nop
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40004400 	.word	0x40004400
 800644c:	20012f80 	.word	0x20012f80

08006450 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <USART1_IRQHandler+0x24>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <USART1_IRQHandler+0x24>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4b04      	ldr	r3, [pc, #16]	; (8006478 <USART1_IRQHandler+0x28>)
 8006468:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800646a:	f7ff ffbf 	bl	80063ec <usart1Rx_Callback>
	}
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40011000 	.word	0x40011000
 8006478:	20012f80 	.word	0x20012f80

0800647c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8006480:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <USART6_IRQHandler+0x24>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d006      	beq.n	800649a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <USART6_IRQHandler+0x24>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <USART6_IRQHandler+0x28>)
 8006494:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8006496:	f7ff ffb1 	bl	80063fc <usart6Rx_Callback>
	}

}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40011400 	.word	0x40011400
 80064a4:	20012f80 	.word	0x20012f80

080064a8 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80064b2:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 80064b4:	6838      	ldr	r0, [r7, #0]
 80064b6:	f7fa f835 	bl	8000524 <__aeabi_i2d>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	ec43 2b11 	vmov	d1, r2, r3
 80064c2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8006540 <roundToNDecimals+0x98>
 80064c6:	f001 fbc1 	bl	8007c4c <pow>
 80064ca:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fa f83a 	bl	8000548 <__aeabi_f2d>
 80064d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	f7fa fb60 	bl	8000ba8 <__aeabi_d2f>
 80064e8:	4603      	mov	r3, r0
 80064ea:	607b      	str	r3, [r7, #4]

    number = round(number);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fa f82b 	bl	8000548 <__aeabi_f2d>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	ec43 2b10 	vmov	d0, r2, r3
 80064fa:	f001 fb61 	bl	8007bc0 <round>
 80064fe:	ec53 2b10 	vmov	r2, r3, d0
 8006502:	4610      	mov	r0, r2
 8006504:	4619      	mov	r1, r3
 8006506:	f7fa fb4f 	bl	8000ba8 <__aeabi_d2f>
 800650a:	4603      	mov	r3, r0
 800650c:	607b      	str	r3, [r7, #4]

    number /= factor;
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fa f81a 	bl	8000548 <__aeabi_f2d>
 8006514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006518:	f7fa f998 	bl	800084c <__aeabi_ddiv>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	f7fa fb40 	bl	8000ba8 <__aeabi_d2f>
 8006528:	4603      	mov	r3, r0
 800652a:	607b      	str	r3, [r7, #4]

    return number;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	ee07 3a90 	vmov	s15, r3
}
 8006532:	eeb0 0a67 	vmov.f32	s0, s15
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	f3af 8000 	nop.w
 8006540:	00000000 	.word	0x00000000
 8006544:	40240000 	.word	0x40240000

08006548 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8006554:	b672      	cpsid	i
}
 8006556:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <usart_Set_Priority+0x60>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d105      	bne.n	800656e <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	4619      	mov	r1, r3
 8006566:	2025      	movs	r0, #37	; 0x25
 8006568:	f7ff fb1e 	bl	8005ba8 <__NVIC_SetPriority>
 800656c:	e016      	b.n	800659c <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <usart_Set_Priority+0x64>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d105      	bne.n	8006584 <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	4619      	mov	r1, r3
 800657c:	2026      	movs	r0, #38	; 0x26
 800657e:	f7ff fb13 	bl	8005ba8 <__NVIC_SetPriority>
 8006582:	e00b      	b.n	800659c <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <usart_Set_Priority+0x68>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d105      	bne.n	800659a <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	4619      	mov	r1, r3
 8006592:	2047      	movs	r0, #71	; 0x47
 8006594:	f7ff fb08 	bl	8005ba8 <__NVIC_SetPriority>
 8006598:	e000      	b.n	800659c <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800659a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800659c:	b662      	cpsie	i
}
 800659e:	bf00      	nop



	__enable_irq();

}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40011000 	.word	0x40011000
 80065ac:	40004400 	.word	0x40004400
 80065b0:	40011400 	.word	0x40011400

080065b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065b8:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <SystemInit+0x20>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	4a05      	ldr	r2, [pc, #20]	; (80065d4 <SystemInit+0x20>)
 80065c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065c8:	bf00      	nop
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	e000ed00 	.word	0xe000ed00

080065d8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	2302      	movs	r3, #2
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	2302      	movs	r3, #2
 80065f0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80065f2:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <SystemCoreClockUpdate+0xec>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 030c 	and.w	r3, r3, #12
 80065fa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d011      	beq.n	8006626 <SystemCoreClockUpdate+0x4e>
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d844      	bhi.n	8006692 <SystemCoreClockUpdate+0xba>
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <SystemCoreClockUpdate+0x3e>
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b04      	cmp	r3, #4
 8006612:	d004      	beq.n	800661e <SystemCoreClockUpdate+0x46>
 8006614:	e03d      	b.n	8006692 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8006616:	4b2c      	ldr	r3, [pc, #176]	; (80066c8 <SystemCoreClockUpdate+0xf0>)
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <SystemCoreClockUpdate+0xf4>)
 800661a:	601a      	str	r2, [r3, #0]
      break;
 800661c:	e03d      	b.n	800669a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800661e:	4b2a      	ldr	r3, [pc, #168]	; (80066c8 <SystemCoreClockUpdate+0xf0>)
 8006620:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <SystemCoreClockUpdate+0xf8>)
 8006622:	601a      	str	r2, [r3, #0]
      break;
 8006624:	e039      	b.n	800669a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006626:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <SystemCoreClockUpdate+0xec>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	0d9b      	lsrs	r3, r3, #22
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006632:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <SystemCoreClockUpdate+0xec>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800663a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006642:	4a23      	ldr	r2, [pc, #140]	; (80066d0 <SystemCoreClockUpdate+0xf8>)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	fbb2 f3f3 	udiv	r3, r2, r3
 800664a:	4a1e      	ldr	r2, [pc, #120]	; (80066c4 <SystemCoreClockUpdate+0xec>)
 800664c:	6852      	ldr	r2, [r2, #4]
 800664e:	0992      	lsrs	r2, r2, #6
 8006650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006654:	fb02 f303 	mul.w	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e00b      	b.n	8006674 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800665c:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <SystemCoreClockUpdate+0xf4>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	4a17      	ldr	r2, [pc, #92]	; (80066c4 <SystemCoreClockUpdate+0xec>)
 8006666:	6852      	ldr	r2, [r2, #4]
 8006668:	0992      	lsrs	r2, r2, #6
 800666a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006674:	4b13      	ldr	r3, [pc, #76]	; (80066c4 <SystemCoreClockUpdate+0xec>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	3301      	adds	r3, #1
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	4a0e      	ldr	r2, [pc, #56]	; (80066c8 <SystemCoreClockUpdate+0xf0>)
 800668e:	6013      	str	r3, [r2, #0]
      break;
 8006690:	e003      	b.n	800669a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <SystemCoreClockUpdate+0xf0>)
 8006694:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <SystemCoreClockUpdate+0xf4>)
 8006696:	601a      	str	r2, [r3, #0]
      break;
 8006698:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <SystemCoreClockUpdate+0xec>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	091b      	lsrs	r3, r3, #4
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	4a0b      	ldr	r2, [pc, #44]	; (80066d4 <SystemCoreClockUpdate+0xfc>)
 80066a6:	5cd3      	ldrb	r3, [r2, r3]
 80066a8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80066aa:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <SystemCoreClockUpdate+0xf0>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
 80066b4:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <SystemCoreClockUpdate+0xf0>)
 80066b6:	6013      	str	r3, [r2, #0]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40023800 	.word	0x40023800
 80066c8:	2000000c 	.word	0x2000000c
 80066cc:	00f42400 	.word	0x00f42400
 80066d0:	017d7840 	.word	0x017d7840
 80066d4:	08008b1c 	.word	0x08008b1c

080066d8 <__errno>:
 80066d8:	4b01      	ldr	r3, [pc, #4]	; (80066e0 <__errno+0x8>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000010 	.word	0x20000010

080066e4 <__libc_init_array>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4d0d      	ldr	r5, [pc, #52]	; (800671c <__libc_init_array+0x38>)
 80066e8:	4c0d      	ldr	r4, [pc, #52]	; (8006720 <__libc_init_array+0x3c>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	2600      	movs	r6, #0
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	d109      	bne.n	8006708 <__libc_init_array+0x24>
 80066f4:	4d0b      	ldr	r5, [pc, #44]	; (8006724 <__libc_init_array+0x40>)
 80066f6:	4c0c      	ldr	r4, [pc, #48]	; (8006728 <__libc_init_array+0x44>)
 80066f8:	f002 f9d2 	bl	8008aa0 <_init>
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	2600      	movs	r6, #0
 8006702:	42a6      	cmp	r6, r4
 8006704:	d105      	bne.n	8006712 <__libc_init_array+0x2e>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f855 3b04 	ldr.w	r3, [r5], #4
 800670c:	4798      	blx	r3
 800670e:	3601      	adds	r6, #1
 8006710:	e7ee      	b.n	80066f0 <__libc_init_array+0xc>
 8006712:	f855 3b04 	ldr.w	r3, [r5], #4
 8006716:	4798      	blx	r3
 8006718:	3601      	adds	r6, #1
 800671a:	e7f2      	b.n	8006702 <__libc_init_array+0x1e>
 800671c:	08008ca8 	.word	0x08008ca8
 8006720:	08008ca8 	.word	0x08008ca8
 8006724:	08008ca8 	.word	0x08008ca8
 8006728:	08008cac 	.word	0x08008cac

0800672c <memcpy>:
 800672c:	440a      	add	r2, r1
 800672e:	4291      	cmp	r1, r2
 8006730:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006734:	d100      	bne.n	8006738 <memcpy+0xc>
 8006736:	4770      	bx	lr
 8006738:	b510      	push	{r4, lr}
 800673a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006742:	4291      	cmp	r1, r2
 8006744:	d1f9      	bne.n	800673a <memcpy+0xe>
 8006746:	bd10      	pop	{r4, pc}

08006748 <memset>:
 8006748:	4402      	add	r2, r0
 800674a:	4603      	mov	r3, r0
 800674c:	4293      	cmp	r3, r2
 800674e:	d100      	bne.n	8006752 <memset+0xa>
 8006750:	4770      	bx	lr
 8006752:	f803 1b01 	strb.w	r1, [r3], #1
 8006756:	e7f9      	b.n	800674c <memset+0x4>

08006758 <srand>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <srand+0x44>)
 800675c:	681d      	ldr	r5, [r3, #0]
 800675e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006760:	4604      	mov	r4, r0
 8006762:	b9b3      	cbnz	r3, 8006792 <srand+0x3a>
 8006764:	2018      	movs	r0, #24
 8006766:	f000 f8b3 	bl	80068d0 <malloc>
 800676a:	4602      	mov	r2, r0
 800676c:	63a8      	str	r0, [r5, #56]	; 0x38
 800676e:	b920      	cbnz	r0, 800677a <srand+0x22>
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <srand+0x48>)
 8006772:	480c      	ldr	r0, [pc, #48]	; (80067a4 <srand+0x4c>)
 8006774:	2142      	movs	r1, #66	; 0x42
 8006776:	f000 f87b 	bl	8006870 <__assert_func>
 800677a:	490b      	ldr	r1, [pc, #44]	; (80067a8 <srand+0x50>)
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <srand+0x54>)
 800677e:	e9c0 1300 	strd	r1, r3, [r0]
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <srand+0x58>)
 8006784:	6083      	str	r3, [r0, #8]
 8006786:	230b      	movs	r3, #11
 8006788:	8183      	strh	r3, [r0, #12]
 800678a:	2100      	movs	r1, #0
 800678c:	2001      	movs	r0, #1
 800678e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006792:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006794:	2200      	movs	r2, #0
 8006796:	611c      	str	r4, [r3, #16]
 8006798:	615a      	str	r2, [r3, #20]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	20000010 	.word	0x20000010
 80067a0:	08008b30 	.word	0x08008b30
 80067a4:	08008b47 	.word	0x08008b47
 80067a8:	abcd330e 	.word	0xabcd330e
 80067ac:	e66d1234 	.word	0xe66d1234
 80067b0:	0005deec 	.word	0x0005deec

080067b4 <rand>:
 80067b4:	4b16      	ldr	r3, [pc, #88]	; (8006810 <rand+0x5c>)
 80067b6:	b510      	push	{r4, lr}
 80067b8:	681c      	ldr	r4, [r3, #0]
 80067ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067bc:	b9b3      	cbnz	r3, 80067ec <rand+0x38>
 80067be:	2018      	movs	r0, #24
 80067c0:	f000 f886 	bl	80068d0 <malloc>
 80067c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80067c6:	b928      	cbnz	r0, 80067d4 <rand+0x20>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <rand+0x60>)
 80067cc:	4812      	ldr	r0, [pc, #72]	; (8006818 <rand+0x64>)
 80067ce:	214e      	movs	r1, #78	; 0x4e
 80067d0:	f000 f84e 	bl	8006870 <__assert_func>
 80067d4:	4a11      	ldr	r2, [pc, #68]	; (800681c <rand+0x68>)
 80067d6:	4b12      	ldr	r3, [pc, #72]	; (8006820 <rand+0x6c>)
 80067d8:	e9c0 2300 	strd	r2, r3, [r0]
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <rand+0x70>)
 80067de:	6083      	str	r3, [r0, #8]
 80067e0:	230b      	movs	r3, #11
 80067e2:	8183      	strh	r3, [r0, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	2300      	movs	r3, #0
 80067e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80067ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80067ee:	4a0e      	ldr	r2, [pc, #56]	; (8006828 <rand+0x74>)
 80067f0:	6920      	ldr	r0, [r4, #16]
 80067f2:	6963      	ldr	r3, [r4, #20]
 80067f4:	490d      	ldr	r1, [pc, #52]	; (800682c <rand+0x78>)
 80067f6:	4342      	muls	r2, r0
 80067f8:	fb01 2203 	mla	r2, r1, r3, r2
 80067fc:	fba0 0101 	umull	r0, r1, r0, r1
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	eb42 0001 	adc.w	r0, r2, r1
 8006806:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800680a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800680e:	bd10      	pop	{r4, pc}
 8006810:	20000010 	.word	0x20000010
 8006814:	08008b30 	.word	0x08008b30
 8006818:	08008b47 	.word	0x08008b47
 800681c:	abcd330e 	.word	0xabcd330e
 8006820:	e66d1234 	.word	0xe66d1234
 8006824:	0005deec 	.word	0x0005deec
 8006828:	5851f42d 	.word	0x5851f42d
 800682c:	4c957f2d 	.word	0x4c957f2d

08006830 <siprintf>:
 8006830:	b40e      	push	{r1, r2, r3}
 8006832:	b500      	push	{lr}
 8006834:	b09c      	sub	sp, #112	; 0x70
 8006836:	ab1d      	add	r3, sp, #116	; 0x74
 8006838:	9002      	str	r0, [sp, #8]
 800683a:	9006      	str	r0, [sp, #24]
 800683c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006840:	4809      	ldr	r0, [pc, #36]	; (8006868 <siprintf+0x38>)
 8006842:	9107      	str	r1, [sp, #28]
 8006844:	9104      	str	r1, [sp, #16]
 8006846:	4909      	ldr	r1, [pc, #36]	; (800686c <siprintf+0x3c>)
 8006848:	f853 2b04 	ldr.w	r2, [r3], #4
 800684c:	9105      	str	r1, [sp, #20]
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	a902      	add	r1, sp, #8
 8006854:	f000 f980 	bl	8006b58 <_svfiprintf_r>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	b01c      	add	sp, #112	; 0x70
 8006860:	f85d eb04 	ldr.w	lr, [sp], #4
 8006864:	b003      	add	sp, #12
 8006866:	4770      	bx	lr
 8006868:	20000010 	.word	0x20000010
 800686c:	ffff0208 	.word	0xffff0208

08006870 <__assert_func>:
 8006870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006872:	4614      	mov	r4, r2
 8006874:	461a      	mov	r2, r3
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <__assert_func+0x2c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4605      	mov	r5, r0
 800687c:	68d8      	ldr	r0, [r3, #12]
 800687e:	b14c      	cbz	r4, 8006894 <__assert_func+0x24>
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <__assert_func+0x30>)
 8006882:	9100      	str	r1, [sp, #0]
 8006884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006888:	4906      	ldr	r1, [pc, #24]	; (80068a4 <__assert_func+0x34>)
 800688a:	462b      	mov	r3, r5
 800688c:	f000 f80e 	bl	80068ac <fiprintf>
 8006890:	f000 fe20 	bl	80074d4 <abort>
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <__assert_func+0x38>)
 8006896:	461c      	mov	r4, r3
 8006898:	e7f3      	b.n	8006882 <__assert_func+0x12>
 800689a:	bf00      	nop
 800689c:	20000010 	.word	0x20000010
 80068a0:	08008ba2 	.word	0x08008ba2
 80068a4:	08008baf 	.word	0x08008baf
 80068a8:	08008bdd 	.word	0x08008bdd

080068ac <fiprintf>:
 80068ac:	b40e      	push	{r1, r2, r3}
 80068ae:	b503      	push	{r0, r1, lr}
 80068b0:	4601      	mov	r1, r0
 80068b2:	ab03      	add	r3, sp, #12
 80068b4:	4805      	ldr	r0, [pc, #20]	; (80068cc <fiprintf+0x20>)
 80068b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	f000 fa75 	bl	8006dac <_vfiprintf_r>
 80068c2:	b002      	add	sp, #8
 80068c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c8:	b003      	add	sp, #12
 80068ca:	4770      	bx	lr
 80068cc:	20000010 	.word	0x20000010

080068d0 <malloc>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <malloc+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f000 b86f 	b.w	80069b8 <_malloc_r>
 80068da:	bf00      	nop
 80068dc:	20000010 	.word	0x20000010

080068e0 <_free_r>:
 80068e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e2:	2900      	cmp	r1, #0
 80068e4:	d044      	beq.n	8006970 <_free_r+0x90>
 80068e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ea:	9001      	str	r0, [sp, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f1a1 0404 	sub.w	r4, r1, #4
 80068f2:	bfb8      	it	lt
 80068f4:	18e4      	addlt	r4, r4, r3
 80068f6:	f001 f82f 	bl	8007958 <__malloc_lock>
 80068fa:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <_free_r+0x94>)
 80068fc:	9801      	ldr	r0, [sp, #4]
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	b933      	cbnz	r3, 8006910 <_free_r+0x30>
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	6014      	str	r4, [r2, #0]
 8006906:	b003      	add	sp, #12
 8006908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800690c:	f001 b82a 	b.w	8007964 <__malloc_unlock>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d908      	bls.n	8006926 <_free_r+0x46>
 8006914:	6825      	ldr	r5, [r4, #0]
 8006916:	1961      	adds	r1, r4, r5
 8006918:	428b      	cmp	r3, r1
 800691a:	bf01      	itttt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	1949      	addeq	r1, r1, r5
 8006922:	6021      	streq	r1, [r4, #0]
 8006924:	e7ed      	b.n	8006902 <_free_r+0x22>
 8006926:	461a      	mov	r2, r3
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	b10b      	cbz	r3, 8006930 <_free_r+0x50>
 800692c:	42a3      	cmp	r3, r4
 800692e:	d9fa      	bls.n	8006926 <_free_r+0x46>
 8006930:	6811      	ldr	r1, [r2, #0]
 8006932:	1855      	adds	r5, r2, r1
 8006934:	42a5      	cmp	r5, r4
 8006936:	d10b      	bne.n	8006950 <_free_r+0x70>
 8006938:	6824      	ldr	r4, [r4, #0]
 800693a:	4421      	add	r1, r4
 800693c:	1854      	adds	r4, r2, r1
 800693e:	42a3      	cmp	r3, r4
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	d1e0      	bne.n	8006906 <_free_r+0x26>
 8006944:	681c      	ldr	r4, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	6053      	str	r3, [r2, #4]
 800694a:	4421      	add	r1, r4
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	e7da      	b.n	8006906 <_free_r+0x26>
 8006950:	d902      	bls.n	8006958 <_free_r+0x78>
 8006952:	230c      	movs	r3, #12
 8006954:	6003      	str	r3, [r0, #0]
 8006956:	e7d6      	b.n	8006906 <_free_r+0x26>
 8006958:	6825      	ldr	r5, [r4, #0]
 800695a:	1961      	adds	r1, r4, r5
 800695c:	428b      	cmp	r3, r1
 800695e:	bf04      	itt	eq
 8006960:	6819      	ldreq	r1, [r3, #0]
 8006962:	685b      	ldreq	r3, [r3, #4]
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	bf04      	itt	eq
 8006968:	1949      	addeq	r1, r1, r5
 800696a:	6021      	streq	r1, [r4, #0]
 800696c:	6054      	str	r4, [r2, #4]
 800696e:	e7ca      	b.n	8006906 <_free_r+0x26>
 8006970:	b003      	add	sp, #12
 8006972:	bd30      	pop	{r4, r5, pc}
 8006974:	20012f84 	.word	0x20012f84

08006978 <sbrk_aligned>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4e0e      	ldr	r6, [pc, #56]	; (80069b4 <sbrk_aligned+0x3c>)
 800697c:	460c      	mov	r4, r1
 800697e:	6831      	ldr	r1, [r6, #0]
 8006980:	4605      	mov	r5, r0
 8006982:	b911      	cbnz	r1, 800698a <sbrk_aligned+0x12>
 8006984:	f000 fcd6 	bl	8007334 <_sbrk_r>
 8006988:	6030      	str	r0, [r6, #0]
 800698a:	4621      	mov	r1, r4
 800698c:	4628      	mov	r0, r5
 800698e:	f000 fcd1 	bl	8007334 <_sbrk_r>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d00a      	beq.n	80069ac <sbrk_aligned+0x34>
 8006996:	1cc4      	adds	r4, r0, #3
 8006998:	f024 0403 	bic.w	r4, r4, #3
 800699c:	42a0      	cmp	r0, r4
 800699e:	d007      	beq.n	80069b0 <sbrk_aligned+0x38>
 80069a0:	1a21      	subs	r1, r4, r0
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 fcc6 	bl	8007334 <_sbrk_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d101      	bne.n	80069b0 <sbrk_aligned+0x38>
 80069ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80069b0:	4620      	mov	r0, r4
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	20012f88 	.word	0x20012f88

080069b8 <_malloc_r>:
 80069b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	1ccd      	adds	r5, r1, #3
 80069be:	f025 0503 	bic.w	r5, r5, #3
 80069c2:	3508      	adds	r5, #8
 80069c4:	2d0c      	cmp	r5, #12
 80069c6:	bf38      	it	cc
 80069c8:	250c      	movcc	r5, #12
 80069ca:	2d00      	cmp	r5, #0
 80069cc:	4607      	mov	r7, r0
 80069ce:	db01      	blt.n	80069d4 <_malloc_r+0x1c>
 80069d0:	42a9      	cmp	r1, r5
 80069d2:	d905      	bls.n	80069e0 <_malloc_r+0x28>
 80069d4:	230c      	movs	r3, #12
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	2600      	movs	r6, #0
 80069da:	4630      	mov	r0, r6
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	4e2e      	ldr	r6, [pc, #184]	; (8006a9c <_malloc_r+0xe4>)
 80069e2:	f000 ffb9 	bl	8007958 <__malloc_lock>
 80069e6:	6833      	ldr	r3, [r6, #0]
 80069e8:	461c      	mov	r4, r3
 80069ea:	bb34      	cbnz	r4, 8006a3a <_malloc_r+0x82>
 80069ec:	4629      	mov	r1, r5
 80069ee:	4638      	mov	r0, r7
 80069f0:	f7ff ffc2 	bl	8006978 <sbrk_aligned>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	4604      	mov	r4, r0
 80069f8:	d14d      	bne.n	8006a96 <_malloc_r+0xde>
 80069fa:	6834      	ldr	r4, [r6, #0]
 80069fc:	4626      	mov	r6, r4
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d140      	bne.n	8006a84 <_malloc_r+0xcc>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4631      	mov	r1, r6
 8006a06:	4638      	mov	r0, r7
 8006a08:	eb04 0803 	add.w	r8, r4, r3
 8006a0c:	f000 fc92 	bl	8007334 <_sbrk_r>
 8006a10:	4580      	cmp	r8, r0
 8006a12:	d13a      	bne.n	8006a8a <_malloc_r+0xd2>
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	3503      	adds	r5, #3
 8006a18:	1a6d      	subs	r5, r5, r1
 8006a1a:	f025 0503 	bic.w	r5, r5, #3
 8006a1e:	3508      	adds	r5, #8
 8006a20:	2d0c      	cmp	r5, #12
 8006a22:	bf38      	it	cc
 8006a24:	250c      	movcc	r5, #12
 8006a26:	4629      	mov	r1, r5
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff ffa5 	bl	8006978 <sbrk_aligned>
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d02b      	beq.n	8006a8a <_malloc_r+0xd2>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	442b      	add	r3, r5
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	e00e      	b.n	8006a58 <_malloc_r+0xa0>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	1b52      	subs	r2, r2, r5
 8006a3e:	d41e      	bmi.n	8006a7e <_malloc_r+0xc6>
 8006a40:	2a0b      	cmp	r2, #11
 8006a42:	d916      	bls.n	8006a72 <_malloc_r+0xba>
 8006a44:	1961      	adds	r1, r4, r5
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	6025      	str	r5, [r4, #0]
 8006a4a:	bf18      	it	ne
 8006a4c:	6059      	strne	r1, [r3, #4]
 8006a4e:	6863      	ldr	r3, [r4, #4]
 8006a50:	bf08      	it	eq
 8006a52:	6031      	streq	r1, [r6, #0]
 8006a54:	5162      	str	r2, [r4, r5]
 8006a56:	604b      	str	r3, [r1, #4]
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f104 060b 	add.w	r6, r4, #11
 8006a5e:	f000 ff81 	bl	8007964 <__malloc_unlock>
 8006a62:	f026 0607 	bic.w	r6, r6, #7
 8006a66:	1d23      	adds	r3, r4, #4
 8006a68:	1af2      	subs	r2, r6, r3
 8006a6a:	d0b6      	beq.n	80069da <_malloc_r+0x22>
 8006a6c:	1b9b      	subs	r3, r3, r6
 8006a6e:	50a3      	str	r3, [r4, r2]
 8006a70:	e7b3      	b.n	80069da <_malloc_r+0x22>
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	bf0c      	ite	eq
 8006a78:	6032      	streq	r2, [r6, #0]
 8006a7a:	605a      	strne	r2, [r3, #4]
 8006a7c:	e7ec      	b.n	8006a58 <_malloc_r+0xa0>
 8006a7e:	4623      	mov	r3, r4
 8006a80:	6864      	ldr	r4, [r4, #4]
 8006a82:	e7b2      	b.n	80069ea <_malloc_r+0x32>
 8006a84:	4634      	mov	r4, r6
 8006a86:	6876      	ldr	r6, [r6, #4]
 8006a88:	e7b9      	b.n	80069fe <_malloc_r+0x46>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f000 ff68 	bl	8007964 <__malloc_unlock>
 8006a94:	e7a1      	b.n	80069da <_malloc_r+0x22>
 8006a96:	6025      	str	r5, [r4, #0]
 8006a98:	e7de      	b.n	8006a58 <_malloc_r+0xa0>
 8006a9a:	bf00      	nop
 8006a9c:	20012f84 	.word	0x20012f84

08006aa0 <__ssputs_r>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	688e      	ldr	r6, [r1, #8]
 8006aa6:	429e      	cmp	r6, r3
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4690      	mov	r8, r2
 8006aae:	461f      	mov	r7, r3
 8006ab0:	d838      	bhi.n	8006b24 <__ssputs_r+0x84>
 8006ab2:	898a      	ldrh	r2, [r1, #12]
 8006ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ab8:	d032      	beq.n	8006b20 <__ssputs_r+0x80>
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	6909      	ldr	r1, [r1, #16]
 8006abe:	eba5 0901 	sub.w	r9, r5, r1
 8006ac2:	6965      	ldr	r5, [r4, #20]
 8006ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006acc:	3301      	adds	r3, #1
 8006ace:	444b      	add	r3, r9
 8006ad0:	106d      	asrs	r5, r5, #1
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	bf38      	it	cc
 8006ad6:	461d      	movcc	r5, r3
 8006ad8:	0553      	lsls	r3, r2, #21
 8006ada:	d531      	bpl.n	8006b40 <__ssputs_r+0xa0>
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7ff ff6b 	bl	80069b8 <_malloc_r>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	b950      	cbnz	r0, 8006afc <__ssputs_r+0x5c>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	f8ca 3000 	str.w	r3, [sl]
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	6921      	ldr	r1, [r4, #16]
 8006afe:	464a      	mov	r2, r9
 8006b00:	f7ff fe14 	bl	800672c <memcpy>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	6126      	str	r6, [r4, #16]
 8006b12:	6165      	str	r5, [r4, #20]
 8006b14:	444e      	add	r6, r9
 8006b16:	eba5 0509 	sub.w	r5, r5, r9
 8006b1a:	6026      	str	r6, [r4, #0]
 8006b1c:	60a5      	str	r5, [r4, #8]
 8006b1e:	463e      	mov	r6, r7
 8006b20:	42be      	cmp	r6, r7
 8006b22:	d900      	bls.n	8006b26 <__ssputs_r+0x86>
 8006b24:	463e      	mov	r6, r7
 8006b26:	6820      	ldr	r0, [r4, #0]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	f000 fefa 	bl	8007924 <memmove>
 8006b30:	68a3      	ldr	r3, [r4, #8]
 8006b32:	1b9b      	subs	r3, r3, r6
 8006b34:	60a3      	str	r3, [r4, #8]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	4433      	add	r3, r6
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e7db      	b.n	8006af8 <__ssputs_r+0x58>
 8006b40:	462a      	mov	r2, r5
 8006b42:	f000 ff15 	bl	8007970 <_realloc_r>
 8006b46:	4606      	mov	r6, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d1e1      	bne.n	8006b10 <__ssputs_r+0x70>
 8006b4c:	6921      	ldr	r1, [r4, #16]
 8006b4e:	4650      	mov	r0, sl
 8006b50:	f7ff fec6 	bl	80068e0 <_free_r>
 8006b54:	e7c7      	b.n	8006ae6 <__ssputs_r+0x46>
	...

08006b58 <_svfiprintf_r>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	4698      	mov	r8, r3
 8006b5e:	898b      	ldrh	r3, [r1, #12]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	b09d      	sub	sp, #116	; 0x74
 8006b64:	4607      	mov	r7, r0
 8006b66:	460d      	mov	r5, r1
 8006b68:	4614      	mov	r4, r2
 8006b6a:	d50e      	bpl.n	8006b8a <_svfiprintf_r+0x32>
 8006b6c:	690b      	ldr	r3, [r1, #16]
 8006b6e:	b963      	cbnz	r3, 8006b8a <_svfiprintf_r+0x32>
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	f7ff ff21 	bl	80069b8 <_malloc_r>
 8006b76:	6028      	str	r0, [r5, #0]
 8006b78:	6128      	str	r0, [r5, #16]
 8006b7a:	b920      	cbnz	r0, 8006b86 <_svfiprintf_r+0x2e>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b84:	e0d1      	b.n	8006d2a <_svfiprintf_r+0x1d2>
 8006b86:	2340      	movs	r3, #64	; 0x40
 8006b88:	616b      	str	r3, [r5, #20]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8e:	2320      	movs	r3, #32
 8006b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b98:	2330      	movs	r3, #48	; 0x30
 8006b9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d44 <_svfiprintf_r+0x1ec>
 8006b9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ba2:	f04f 0901 	mov.w	r9, #1
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bae:	b10a      	cbz	r2, 8006bb4 <_svfiprintf_r+0x5c>
 8006bb0:	2a25      	cmp	r2, #37	; 0x25
 8006bb2:	d1f9      	bne.n	8006ba8 <_svfiprintf_r+0x50>
 8006bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8006bb8:	d00b      	beq.n	8006bd2 <_svfiprintf_r+0x7a>
 8006bba:	465b      	mov	r3, fp
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ff6d 	bl	8006aa0 <__ssputs_r>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f000 80aa 	beq.w	8006d20 <_svfiprintf_r+0x1c8>
 8006bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bce:	445a      	add	r2, fp
 8006bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80a2 	beq.w	8006d20 <_svfiprintf_r+0x1c8>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be6:	f10a 0a01 	add.w	sl, sl, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	9307      	str	r3, [sp, #28]
 8006bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8006bf4:	4654      	mov	r4, sl
 8006bf6:	2205      	movs	r2, #5
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	4851      	ldr	r0, [pc, #324]	; (8006d44 <_svfiprintf_r+0x1ec>)
 8006bfe:	f7f9 faef 	bl	80001e0 <memchr>
 8006c02:	9a04      	ldr	r2, [sp, #16]
 8006c04:	b9d8      	cbnz	r0, 8006c3e <_svfiprintf_r+0xe6>
 8006c06:	06d0      	lsls	r0, r2, #27
 8006c08:	bf44      	itt	mi
 8006c0a:	2320      	movmi	r3, #32
 8006c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c10:	0711      	lsls	r1, r2, #28
 8006c12:	bf44      	itt	mi
 8006c14:	232b      	movmi	r3, #43	; 0x2b
 8006c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c20:	d015      	beq.n	8006c4e <_svfiprintf_r+0xf6>
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	4654      	mov	r4, sl
 8006c26:	2000      	movs	r0, #0
 8006c28:	f04f 0c0a 	mov.w	ip, #10
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c32:	3b30      	subs	r3, #48	; 0x30
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d94e      	bls.n	8006cd6 <_svfiprintf_r+0x17e>
 8006c38:	b1b0      	cbz	r0, 8006c68 <_svfiprintf_r+0x110>
 8006c3a:	9207      	str	r2, [sp, #28]
 8006c3c:	e014      	b.n	8006c68 <_svfiprintf_r+0x110>
 8006c3e:	eba0 0308 	sub.w	r3, r0, r8
 8006c42:	fa09 f303 	lsl.w	r3, r9, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	46a2      	mov	sl, r4
 8006c4c:	e7d2      	b.n	8006bf4 <_svfiprintf_r+0x9c>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	9103      	str	r1, [sp, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfbb      	ittet	lt
 8006c5a:	425b      	neglt	r3, r3
 8006c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c60:	9307      	strge	r3, [sp, #28]
 8006c62:	9307      	strlt	r3, [sp, #28]
 8006c64:	bfb8      	it	lt
 8006c66:	9204      	strlt	r2, [sp, #16]
 8006c68:	7823      	ldrb	r3, [r4, #0]
 8006c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c6c:	d10c      	bne.n	8006c88 <_svfiprintf_r+0x130>
 8006c6e:	7863      	ldrb	r3, [r4, #1]
 8006c70:	2b2a      	cmp	r3, #42	; 0x2a
 8006c72:	d135      	bne.n	8006ce0 <_svfiprintf_r+0x188>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	9203      	str	r2, [sp, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfb8      	it	lt
 8006c80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c84:	3402      	adds	r4, #2
 8006c86:	9305      	str	r3, [sp, #20]
 8006c88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d54 <_svfiprintf_r+0x1fc>
 8006c8c:	7821      	ldrb	r1, [r4, #0]
 8006c8e:	2203      	movs	r2, #3
 8006c90:	4650      	mov	r0, sl
 8006c92:	f7f9 faa5 	bl	80001e0 <memchr>
 8006c96:	b140      	cbz	r0, 8006caa <_svfiprintf_r+0x152>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	eba0 000a 	sub.w	r0, r0, sl
 8006c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	4303      	orrs	r3, r0
 8006ca6:	3401      	adds	r4, #1
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cae:	4826      	ldr	r0, [pc, #152]	; (8006d48 <_svfiprintf_r+0x1f0>)
 8006cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cb4:	2206      	movs	r2, #6
 8006cb6:	f7f9 fa93 	bl	80001e0 <memchr>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d038      	beq.n	8006d30 <_svfiprintf_r+0x1d8>
 8006cbe:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <_svfiprintf_r+0x1f4>)
 8006cc0:	bb1b      	cbnz	r3, 8006d0a <_svfiprintf_r+0x1b2>
 8006cc2:	9b03      	ldr	r3, [sp, #12]
 8006cc4:	3307      	adds	r3, #7
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	3308      	adds	r3, #8
 8006ccc:	9303      	str	r3, [sp, #12]
 8006cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd0:	4433      	add	r3, r6
 8006cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd4:	e767      	b.n	8006ba6 <_svfiprintf_r+0x4e>
 8006cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cda:	460c      	mov	r4, r1
 8006cdc:	2001      	movs	r0, #1
 8006cde:	e7a5      	b.n	8006c2c <_svfiprintf_r+0xd4>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	3401      	adds	r4, #1
 8006ce4:	9305      	str	r3, [sp, #20]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f04f 0c0a 	mov.w	ip, #10
 8006cec:	4620      	mov	r0, r4
 8006cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cf2:	3a30      	subs	r2, #48	; 0x30
 8006cf4:	2a09      	cmp	r2, #9
 8006cf6:	d903      	bls.n	8006d00 <_svfiprintf_r+0x1a8>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0c5      	beq.n	8006c88 <_svfiprintf_r+0x130>
 8006cfc:	9105      	str	r1, [sp, #20]
 8006cfe:	e7c3      	b.n	8006c88 <_svfiprintf_r+0x130>
 8006d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d04:	4604      	mov	r4, r0
 8006d06:	2301      	movs	r3, #1
 8006d08:	e7f0      	b.n	8006cec <_svfiprintf_r+0x194>
 8006d0a:	ab03      	add	r3, sp, #12
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <_svfiprintf_r+0x1f8>)
 8006d12:	a904      	add	r1, sp, #16
 8006d14:	4638      	mov	r0, r7
 8006d16:	f3af 8000 	nop.w
 8006d1a:	1c42      	adds	r2, r0, #1
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	d1d6      	bne.n	8006cce <_svfiprintf_r+0x176>
 8006d20:	89ab      	ldrh	r3, [r5, #12]
 8006d22:	065b      	lsls	r3, r3, #25
 8006d24:	f53f af2c 	bmi.w	8006b80 <_svfiprintf_r+0x28>
 8006d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d2a:	b01d      	add	sp, #116	; 0x74
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	ab03      	add	r3, sp, #12
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	462a      	mov	r2, r5
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <_svfiprintf_r+0x1f8>)
 8006d38:	a904      	add	r1, sp, #16
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	f000 f9d4 	bl	80070e8 <_printf_i>
 8006d40:	e7eb      	b.n	8006d1a <_svfiprintf_r+0x1c2>
 8006d42:	bf00      	nop
 8006d44:	08008bde 	.word	0x08008bde
 8006d48:	08008be8 	.word	0x08008be8
 8006d4c:	00000000 	.word	0x00000000
 8006d50:	08006aa1 	.word	0x08006aa1
 8006d54:	08008be4 	.word	0x08008be4

08006d58 <__sfputc_r>:
 8006d58:	6893      	ldr	r3, [r2, #8]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	b410      	push	{r4}
 8006d60:	6093      	str	r3, [r2, #8]
 8006d62:	da08      	bge.n	8006d76 <__sfputc_r+0x1e>
 8006d64:	6994      	ldr	r4, [r2, #24]
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	db01      	blt.n	8006d6e <__sfputc_r+0x16>
 8006d6a:	290a      	cmp	r1, #10
 8006d6c:	d103      	bne.n	8006d76 <__sfputc_r+0x1e>
 8006d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d72:	f000 baef 	b.w	8007354 <__swbuf_r>
 8006d76:	6813      	ldr	r3, [r2, #0]
 8006d78:	1c58      	adds	r0, r3, #1
 8006d7a:	6010      	str	r0, [r2, #0]
 8006d7c:	7019      	strb	r1, [r3, #0]
 8006d7e:	4608      	mov	r0, r1
 8006d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <__sfputs_r>:
 8006d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	18d5      	adds	r5, r2, r3
 8006d90:	42ac      	cmp	r4, r5
 8006d92:	d101      	bne.n	8006d98 <__sfputs_r+0x12>
 8006d94:	2000      	movs	r0, #0
 8006d96:	e007      	b.n	8006da8 <__sfputs_r+0x22>
 8006d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9c:	463a      	mov	r2, r7
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ffda 	bl	8006d58 <__sfputc_r>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d1f3      	bne.n	8006d90 <__sfputs_r+0xa>
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dac <_vfiprintf_r>:
 8006dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	460d      	mov	r5, r1
 8006db2:	b09d      	sub	sp, #116	; 0x74
 8006db4:	4614      	mov	r4, r2
 8006db6:	4698      	mov	r8, r3
 8006db8:	4606      	mov	r6, r0
 8006dba:	b118      	cbz	r0, 8006dc4 <_vfiprintf_r+0x18>
 8006dbc:	6983      	ldr	r3, [r0, #24]
 8006dbe:	b90b      	cbnz	r3, 8006dc4 <_vfiprintf_r+0x18>
 8006dc0:	f000 fcaa 	bl	8007718 <__sinit>
 8006dc4:	4b89      	ldr	r3, [pc, #548]	; (8006fec <_vfiprintf_r+0x240>)
 8006dc6:	429d      	cmp	r5, r3
 8006dc8:	d11b      	bne.n	8006e02 <_vfiprintf_r+0x56>
 8006dca:	6875      	ldr	r5, [r6, #4]
 8006dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dce:	07d9      	lsls	r1, r3, #31
 8006dd0:	d405      	bmi.n	8006dde <_vfiprintf_r+0x32>
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	059a      	lsls	r2, r3, #22
 8006dd6:	d402      	bmi.n	8006dde <_vfiprintf_r+0x32>
 8006dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dda:	f000 fd3b 	bl	8007854 <__retarget_lock_acquire_recursive>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	071b      	lsls	r3, r3, #28
 8006de2:	d501      	bpl.n	8006de8 <_vfiprintf_r+0x3c>
 8006de4:	692b      	ldr	r3, [r5, #16]
 8006de6:	b9eb      	cbnz	r3, 8006e24 <_vfiprintf_r+0x78>
 8006de8:	4629      	mov	r1, r5
 8006dea:	4630      	mov	r0, r6
 8006dec:	f000 fb04 	bl	80073f8 <__swsetup_r>
 8006df0:	b1c0      	cbz	r0, 8006e24 <_vfiprintf_r+0x78>
 8006df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006df4:	07dc      	lsls	r4, r3, #31
 8006df6:	d50e      	bpl.n	8006e16 <_vfiprintf_r+0x6a>
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dfc:	b01d      	add	sp, #116	; 0x74
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e02:	4b7b      	ldr	r3, [pc, #492]	; (8006ff0 <_vfiprintf_r+0x244>)
 8006e04:	429d      	cmp	r5, r3
 8006e06:	d101      	bne.n	8006e0c <_vfiprintf_r+0x60>
 8006e08:	68b5      	ldr	r5, [r6, #8]
 8006e0a:	e7df      	b.n	8006dcc <_vfiprintf_r+0x20>
 8006e0c:	4b79      	ldr	r3, [pc, #484]	; (8006ff4 <_vfiprintf_r+0x248>)
 8006e0e:	429d      	cmp	r5, r3
 8006e10:	bf08      	it	eq
 8006e12:	68f5      	ldreq	r5, [r6, #12]
 8006e14:	e7da      	b.n	8006dcc <_vfiprintf_r+0x20>
 8006e16:	89ab      	ldrh	r3, [r5, #12]
 8006e18:	0598      	lsls	r0, r3, #22
 8006e1a:	d4ed      	bmi.n	8006df8 <_vfiprintf_r+0x4c>
 8006e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e1e:	f000 fd1a 	bl	8007856 <__retarget_lock_release_recursive>
 8006e22:	e7e9      	b.n	8006df8 <_vfiprintf_r+0x4c>
 8006e24:	2300      	movs	r3, #0
 8006e26:	9309      	str	r3, [sp, #36]	; 0x24
 8006e28:	2320      	movs	r3, #32
 8006e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e32:	2330      	movs	r3, #48	; 0x30
 8006e34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ff8 <_vfiprintf_r+0x24c>
 8006e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e3c:	f04f 0901 	mov.w	r9, #1
 8006e40:	4623      	mov	r3, r4
 8006e42:	469a      	mov	sl, r3
 8006e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e48:	b10a      	cbz	r2, 8006e4e <_vfiprintf_r+0xa2>
 8006e4a:	2a25      	cmp	r2, #37	; 0x25
 8006e4c:	d1f9      	bne.n	8006e42 <_vfiprintf_r+0x96>
 8006e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006e52:	d00b      	beq.n	8006e6c <_vfiprintf_r+0xc0>
 8006e54:	465b      	mov	r3, fp
 8006e56:	4622      	mov	r2, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f7ff ff93 	bl	8006d86 <__sfputs_r>
 8006e60:	3001      	adds	r0, #1
 8006e62:	f000 80aa 	beq.w	8006fba <_vfiprintf_r+0x20e>
 8006e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e68:	445a      	add	r2, fp
 8006e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80a2 	beq.w	8006fba <_vfiprintf_r+0x20e>
 8006e76:	2300      	movs	r3, #0
 8006e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e80:	f10a 0a01 	add.w	sl, sl, #1
 8006e84:	9304      	str	r3, [sp, #16]
 8006e86:	9307      	str	r3, [sp, #28]
 8006e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e8e:	4654      	mov	r4, sl
 8006e90:	2205      	movs	r2, #5
 8006e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e96:	4858      	ldr	r0, [pc, #352]	; (8006ff8 <_vfiprintf_r+0x24c>)
 8006e98:	f7f9 f9a2 	bl	80001e0 <memchr>
 8006e9c:	9a04      	ldr	r2, [sp, #16]
 8006e9e:	b9d8      	cbnz	r0, 8006ed8 <_vfiprintf_r+0x12c>
 8006ea0:	06d1      	lsls	r1, r2, #27
 8006ea2:	bf44      	itt	mi
 8006ea4:	2320      	movmi	r3, #32
 8006ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eaa:	0713      	lsls	r3, r2, #28
 8006eac:	bf44      	itt	mi
 8006eae:	232b      	movmi	r3, #43	; 0x2b
 8006eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eba:	d015      	beq.n	8006ee8 <_vfiprintf_r+0x13c>
 8006ebc:	9a07      	ldr	r2, [sp, #28]
 8006ebe:	4654      	mov	r4, sl
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f04f 0c0a 	mov.w	ip, #10
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ecc:	3b30      	subs	r3, #48	; 0x30
 8006ece:	2b09      	cmp	r3, #9
 8006ed0:	d94e      	bls.n	8006f70 <_vfiprintf_r+0x1c4>
 8006ed2:	b1b0      	cbz	r0, 8006f02 <_vfiprintf_r+0x156>
 8006ed4:	9207      	str	r2, [sp, #28]
 8006ed6:	e014      	b.n	8006f02 <_vfiprintf_r+0x156>
 8006ed8:	eba0 0308 	sub.w	r3, r0, r8
 8006edc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	9304      	str	r3, [sp, #16]
 8006ee4:	46a2      	mov	sl, r4
 8006ee6:	e7d2      	b.n	8006e8e <_vfiprintf_r+0xe2>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	1d19      	adds	r1, r3, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	9103      	str	r1, [sp, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bfbb      	ittet	lt
 8006ef4:	425b      	neglt	r3, r3
 8006ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8006efa:	9307      	strge	r3, [sp, #28]
 8006efc:	9307      	strlt	r3, [sp, #28]
 8006efe:	bfb8      	it	lt
 8006f00:	9204      	strlt	r2, [sp, #16]
 8006f02:	7823      	ldrb	r3, [r4, #0]
 8006f04:	2b2e      	cmp	r3, #46	; 0x2e
 8006f06:	d10c      	bne.n	8006f22 <_vfiprintf_r+0x176>
 8006f08:	7863      	ldrb	r3, [r4, #1]
 8006f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f0c:	d135      	bne.n	8006f7a <_vfiprintf_r+0x1ce>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	1d1a      	adds	r2, r3, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	9203      	str	r2, [sp, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfb8      	it	lt
 8006f1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f1e:	3402      	adds	r4, #2
 8006f20:	9305      	str	r3, [sp, #20]
 8006f22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007008 <_vfiprintf_r+0x25c>
 8006f26:	7821      	ldrb	r1, [r4, #0]
 8006f28:	2203      	movs	r2, #3
 8006f2a:	4650      	mov	r0, sl
 8006f2c:	f7f9 f958 	bl	80001e0 <memchr>
 8006f30:	b140      	cbz	r0, 8006f44 <_vfiprintf_r+0x198>
 8006f32:	2340      	movs	r3, #64	; 0x40
 8006f34:	eba0 000a 	sub.w	r0, r0, sl
 8006f38:	fa03 f000 	lsl.w	r0, r3, r0
 8006f3c:	9b04      	ldr	r3, [sp, #16]
 8006f3e:	4303      	orrs	r3, r0
 8006f40:	3401      	adds	r4, #1
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f48:	482c      	ldr	r0, [pc, #176]	; (8006ffc <_vfiprintf_r+0x250>)
 8006f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f4e:	2206      	movs	r2, #6
 8006f50:	f7f9 f946 	bl	80001e0 <memchr>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d03f      	beq.n	8006fd8 <_vfiprintf_r+0x22c>
 8006f58:	4b29      	ldr	r3, [pc, #164]	; (8007000 <_vfiprintf_r+0x254>)
 8006f5a:	bb1b      	cbnz	r3, 8006fa4 <_vfiprintf_r+0x1f8>
 8006f5c:	9b03      	ldr	r3, [sp, #12]
 8006f5e:	3307      	adds	r3, #7
 8006f60:	f023 0307 	bic.w	r3, r3, #7
 8006f64:	3308      	adds	r3, #8
 8006f66:	9303      	str	r3, [sp, #12]
 8006f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f6a:	443b      	add	r3, r7
 8006f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6e:	e767      	b.n	8006e40 <_vfiprintf_r+0x94>
 8006f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f74:	460c      	mov	r4, r1
 8006f76:	2001      	movs	r0, #1
 8006f78:	e7a5      	b.n	8006ec6 <_vfiprintf_r+0x11a>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	3401      	adds	r4, #1
 8006f7e:	9305      	str	r3, [sp, #20]
 8006f80:	4619      	mov	r1, r3
 8006f82:	f04f 0c0a 	mov.w	ip, #10
 8006f86:	4620      	mov	r0, r4
 8006f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f8c:	3a30      	subs	r2, #48	; 0x30
 8006f8e:	2a09      	cmp	r2, #9
 8006f90:	d903      	bls.n	8006f9a <_vfiprintf_r+0x1ee>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0c5      	beq.n	8006f22 <_vfiprintf_r+0x176>
 8006f96:	9105      	str	r1, [sp, #20]
 8006f98:	e7c3      	b.n	8006f22 <_vfiprintf_r+0x176>
 8006f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e7f0      	b.n	8006f86 <_vfiprintf_r+0x1da>
 8006fa4:	ab03      	add	r3, sp, #12
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	462a      	mov	r2, r5
 8006faa:	4b16      	ldr	r3, [pc, #88]	; (8007004 <_vfiprintf_r+0x258>)
 8006fac:	a904      	add	r1, sp, #16
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f3af 8000 	nop.w
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	1c78      	adds	r0, r7, #1
 8006fb8:	d1d6      	bne.n	8006f68 <_vfiprintf_r+0x1bc>
 8006fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fbc:	07d9      	lsls	r1, r3, #31
 8006fbe:	d405      	bmi.n	8006fcc <_vfiprintf_r+0x220>
 8006fc0:	89ab      	ldrh	r3, [r5, #12]
 8006fc2:	059a      	lsls	r2, r3, #22
 8006fc4:	d402      	bmi.n	8006fcc <_vfiprintf_r+0x220>
 8006fc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc8:	f000 fc45 	bl	8007856 <__retarget_lock_release_recursive>
 8006fcc:	89ab      	ldrh	r3, [r5, #12]
 8006fce:	065b      	lsls	r3, r3, #25
 8006fd0:	f53f af12 	bmi.w	8006df8 <_vfiprintf_r+0x4c>
 8006fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd6:	e711      	b.n	8006dfc <_vfiprintf_r+0x50>
 8006fd8:	ab03      	add	r3, sp, #12
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	462a      	mov	r2, r5
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <_vfiprintf_r+0x258>)
 8006fe0:	a904      	add	r1, sp, #16
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f000 f880 	bl	80070e8 <_printf_i>
 8006fe8:	e7e4      	b.n	8006fb4 <_vfiprintf_r+0x208>
 8006fea:	bf00      	nop
 8006fec:	08008c34 	.word	0x08008c34
 8006ff0:	08008c54 	.word	0x08008c54
 8006ff4:	08008c14 	.word	0x08008c14
 8006ff8:	08008bde 	.word	0x08008bde
 8006ffc:	08008be8 	.word	0x08008be8
 8007000:	00000000 	.word	0x00000000
 8007004:	08006d87 	.word	0x08006d87
 8007008:	08008be4 	.word	0x08008be4

0800700c <_printf_common>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	4616      	mov	r6, r2
 8007012:	4699      	mov	r9, r3
 8007014:	688a      	ldr	r2, [r1, #8]
 8007016:	690b      	ldr	r3, [r1, #16]
 8007018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800701c:	4293      	cmp	r3, r2
 800701e:	bfb8      	it	lt
 8007020:	4613      	movlt	r3, r2
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007028:	4607      	mov	r7, r0
 800702a:	460c      	mov	r4, r1
 800702c:	b10a      	cbz	r2, 8007032 <_printf_common+0x26>
 800702e:	3301      	adds	r3, #1
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	0699      	lsls	r1, r3, #26
 8007036:	bf42      	ittt	mi
 8007038:	6833      	ldrmi	r3, [r6, #0]
 800703a:	3302      	addmi	r3, #2
 800703c:	6033      	strmi	r3, [r6, #0]
 800703e:	6825      	ldr	r5, [r4, #0]
 8007040:	f015 0506 	ands.w	r5, r5, #6
 8007044:	d106      	bne.n	8007054 <_printf_common+0x48>
 8007046:	f104 0a19 	add.w	sl, r4, #25
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	6832      	ldr	r2, [r6, #0]
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	42ab      	cmp	r3, r5
 8007052:	dc26      	bgt.n	80070a2 <_printf_common+0x96>
 8007054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007058:	1e13      	subs	r3, r2, #0
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	bf18      	it	ne
 800705e:	2301      	movne	r3, #1
 8007060:	0692      	lsls	r2, r2, #26
 8007062:	d42b      	bmi.n	80070bc <_printf_common+0xb0>
 8007064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007068:	4649      	mov	r1, r9
 800706a:	4638      	mov	r0, r7
 800706c:	47c0      	blx	r8
 800706e:	3001      	adds	r0, #1
 8007070:	d01e      	beq.n	80070b0 <_printf_common+0xa4>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	68e5      	ldr	r5, [r4, #12]
 8007076:	6832      	ldr	r2, [r6, #0]
 8007078:	f003 0306 	and.w	r3, r3, #6
 800707c:	2b04      	cmp	r3, #4
 800707e:	bf08      	it	eq
 8007080:	1aad      	subeq	r5, r5, r2
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	bf0c      	ite	eq
 8007088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800708c:	2500      	movne	r5, #0
 800708e:	4293      	cmp	r3, r2
 8007090:	bfc4      	itt	gt
 8007092:	1a9b      	subgt	r3, r3, r2
 8007094:	18ed      	addgt	r5, r5, r3
 8007096:	2600      	movs	r6, #0
 8007098:	341a      	adds	r4, #26
 800709a:	42b5      	cmp	r5, r6
 800709c:	d11a      	bne.n	80070d4 <_printf_common+0xc8>
 800709e:	2000      	movs	r0, #0
 80070a0:	e008      	b.n	80070b4 <_printf_common+0xa8>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4652      	mov	r2, sl
 80070a6:	4649      	mov	r1, r9
 80070a8:	4638      	mov	r0, r7
 80070aa:	47c0      	blx	r8
 80070ac:	3001      	adds	r0, #1
 80070ae:	d103      	bne.n	80070b8 <_printf_common+0xac>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	3501      	adds	r5, #1
 80070ba:	e7c6      	b.n	800704a <_printf_common+0x3e>
 80070bc:	18e1      	adds	r1, r4, r3
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	2030      	movs	r0, #48	; 0x30
 80070c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c6:	4422      	add	r2, r4
 80070c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070d0:	3302      	adds	r3, #2
 80070d2:	e7c7      	b.n	8007064 <_printf_common+0x58>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4622      	mov	r2, r4
 80070d8:	4649      	mov	r1, r9
 80070da:	4638      	mov	r0, r7
 80070dc:	47c0      	blx	r8
 80070de:	3001      	adds	r0, #1
 80070e0:	d0e6      	beq.n	80070b0 <_printf_common+0xa4>
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7d9      	b.n	800709a <_printf_common+0x8e>
	...

080070e8 <_printf_i>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	7e0f      	ldrb	r7, [r1, #24]
 80070ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070f0:	2f78      	cmp	r7, #120	; 0x78
 80070f2:	4691      	mov	r9, r2
 80070f4:	4680      	mov	r8, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	469a      	mov	sl, r3
 80070fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070fe:	d807      	bhi.n	8007110 <_printf_i+0x28>
 8007100:	2f62      	cmp	r7, #98	; 0x62
 8007102:	d80a      	bhi.n	800711a <_printf_i+0x32>
 8007104:	2f00      	cmp	r7, #0
 8007106:	f000 80d8 	beq.w	80072ba <_printf_i+0x1d2>
 800710a:	2f58      	cmp	r7, #88	; 0x58
 800710c:	f000 80a3 	beq.w	8007256 <_printf_i+0x16e>
 8007110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007118:	e03a      	b.n	8007190 <_printf_i+0xa8>
 800711a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800711e:	2b15      	cmp	r3, #21
 8007120:	d8f6      	bhi.n	8007110 <_printf_i+0x28>
 8007122:	a101      	add	r1, pc, #4	; (adr r1, 8007128 <_printf_i+0x40>)
 8007124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007128:	08007181 	.word	0x08007181
 800712c:	08007195 	.word	0x08007195
 8007130:	08007111 	.word	0x08007111
 8007134:	08007111 	.word	0x08007111
 8007138:	08007111 	.word	0x08007111
 800713c:	08007111 	.word	0x08007111
 8007140:	08007195 	.word	0x08007195
 8007144:	08007111 	.word	0x08007111
 8007148:	08007111 	.word	0x08007111
 800714c:	08007111 	.word	0x08007111
 8007150:	08007111 	.word	0x08007111
 8007154:	080072a1 	.word	0x080072a1
 8007158:	080071c5 	.word	0x080071c5
 800715c:	08007283 	.word	0x08007283
 8007160:	08007111 	.word	0x08007111
 8007164:	08007111 	.word	0x08007111
 8007168:	080072c3 	.word	0x080072c3
 800716c:	08007111 	.word	0x08007111
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007111 	.word	0x08007111
 8007178:	08007111 	.word	0x08007111
 800717c:	0800728b 	.word	0x0800728b
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	602a      	str	r2, [r5, #0]
 8007188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800718c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007190:	2301      	movs	r3, #1
 8007192:	e0a3      	b.n	80072dc <_printf_i+0x1f4>
 8007194:	6820      	ldr	r0, [r4, #0]
 8007196:	6829      	ldr	r1, [r5, #0]
 8007198:	0606      	lsls	r6, r0, #24
 800719a:	f101 0304 	add.w	r3, r1, #4
 800719e:	d50a      	bpl.n	80071b6 <_printf_i+0xce>
 80071a0:	680e      	ldr	r6, [r1, #0]
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	2e00      	cmp	r6, #0
 80071a6:	da03      	bge.n	80071b0 <_printf_i+0xc8>
 80071a8:	232d      	movs	r3, #45	; 0x2d
 80071aa:	4276      	negs	r6, r6
 80071ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b0:	485e      	ldr	r0, [pc, #376]	; (800732c <_printf_i+0x244>)
 80071b2:	230a      	movs	r3, #10
 80071b4:	e019      	b.n	80071ea <_printf_i+0x102>
 80071b6:	680e      	ldr	r6, [r1, #0]
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071be:	bf18      	it	ne
 80071c0:	b236      	sxthne	r6, r6
 80071c2:	e7ef      	b.n	80071a4 <_printf_i+0xbc>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	6820      	ldr	r0, [r4, #0]
 80071c8:	1d19      	adds	r1, r3, #4
 80071ca:	6029      	str	r1, [r5, #0]
 80071cc:	0601      	lsls	r1, r0, #24
 80071ce:	d501      	bpl.n	80071d4 <_printf_i+0xec>
 80071d0:	681e      	ldr	r6, [r3, #0]
 80071d2:	e002      	b.n	80071da <_printf_i+0xf2>
 80071d4:	0646      	lsls	r6, r0, #25
 80071d6:	d5fb      	bpl.n	80071d0 <_printf_i+0xe8>
 80071d8:	881e      	ldrh	r6, [r3, #0]
 80071da:	4854      	ldr	r0, [pc, #336]	; (800732c <_printf_i+0x244>)
 80071dc:	2f6f      	cmp	r7, #111	; 0x6f
 80071de:	bf0c      	ite	eq
 80071e0:	2308      	moveq	r3, #8
 80071e2:	230a      	movne	r3, #10
 80071e4:	2100      	movs	r1, #0
 80071e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ea:	6865      	ldr	r5, [r4, #4]
 80071ec:	60a5      	str	r5, [r4, #8]
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	bfa2      	ittt	ge
 80071f2:	6821      	ldrge	r1, [r4, #0]
 80071f4:	f021 0104 	bicge.w	r1, r1, #4
 80071f8:	6021      	strge	r1, [r4, #0]
 80071fa:	b90e      	cbnz	r6, 8007200 <_printf_i+0x118>
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	d04d      	beq.n	800729c <_printf_i+0x1b4>
 8007200:	4615      	mov	r5, r2
 8007202:	fbb6 f1f3 	udiv	r1, r6, r3
 8007206:	fb03 6711 	mls	r7, r3, r1, r6
 800720a:	5dc7      	ldrb	r7, [r0, r7]
 800720c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007210:	4637      	mov	r7, r6
 8007212:	42bb      	cmp	r3, r7
 8007214:	460e      	mov	r6, r1
 8007216:	d9f4      	bls.n	8007202 <_printf_i+0x11a>
 8007218:	2b08      	cmp	r3, #8
 800721a:	d10b      	bne.n	8007234 <_printf_i+0x14c>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	07de      	lsls	r6, r3, #31
 8007220:	d508      	bpl.n	8007234 <_printf_i+0x14c>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	4299      	cmp	r1, r3
 8007228:	bfde      	ittt	le
 800722a:	2330      	movle	r3, #48	; 0x30
 800722c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007230:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007234:	1b52      	subs	r2, r2, r5
 8007236:	6122      	str	r2, [r4, #16]
 8007238:	f8cd a000 	str.w	sl, [sp]
 800723c:	464b      	mov	r3, r9
 800723e:	aa03      	add	r2, sp, #12
 8007240:	4621      	mov	r1, r4
 8007242:	4640      	mov	r0, r8
 8007244:	f7ff fee2 	bl	800700c <_printf_common>
 8007248:	3001      	adds	r0, #1
 800724a:	d14c      	bne.n	80072e6 <_printf_i+0x1fe>
 800724c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007250:	b004      	add	sp, #16
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	4835      	ldr	r0, [pc, #212]	; (800732c <_printf_i+0x244>)
 8007258:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800725c:	6829      	ldr	r1, [r5, #0]
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	f851 6b04 	ldr.w	r6, [r1], #4
 8007264:	6029      	str	r1, [r5, #0]
 8007266:	061d      	lsls	r5, r3, #24
 8007268:	d514      	bpl.n	8007294 <_printf_i+0x1ac>
 800726a:	07df      	lsls	r7, r3, #31
 800726c:	bf44      	itt	mi
 800726e:	f043 0320 	orrmi.w	r3, r3, #32
 8007272:	6023      	strmi	r3, [r4, #0]
 8007274:	b91e      	cbnz	r6, 800727e <_printf_i+0x196>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	f023 0320 	bic.w	r3, r3, #32
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	2310      	movs	r3, #16
 8007280:	e7b0      	b.n	80071e4 <_printf_i+0xfc>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	f043 0320 	orr.w	r3, r3, #32
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	2378      	movs	r3, #120	; 0x78
 800728c:	4828      	ldr	r0, [pc, #160]	; (8007330 <_printf_i+0x248>)
 800728e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007292:	e7e3      	b.n	800725c <_printf_i+0x174>
 8007294:	0659      	lsls	r1, r3, #25
 8007296:	bf48      	it	mi
 8007298:	b2b6      	uxthmi	r6, r6
 800729a:	e7e6      	b.n	800726a <_printf_i+0x182>
 800729c:	4615      	mov	r5, r2
 800729e:	e7bb      	b.n	8007218 <_printf_i+0x130>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	6826      	ldr	r6, [r4, #0]
 80072a4:	6961      	ldr	r1, [r4, #20]
 80072a6:	1d18      	adds	r0, r3, #4
 80072a8:	6028      	str	r0, [r5, #0]
 80072aa:	0635      	lsls	r5, r6, #24
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	d501      	bpl.n	80072b4 <_printf_i+0x1cc>
 80072b0:	6019      	str	r1, [r3, #0]
 80072b2:	e002      	b.n	80072ba <_printf_i+0x1d2>
 80072b4:	0670      	lsls	r0, r6, #25
 80072b6:	d5fb      	bpl.n	80072b0 <_printf_i+0x1c8>
 80072b8:	8019      	strh	r1, [r3, #0]
 80072ba:	2300      	movs	r3, #0
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	4615      	mov	r5, r2
 80072c0:	e7ba      	b.n	8007238 <_printf_i+0x150>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	1d1a      	adds	r2, r3, #4
 80072c6:	602a      	str	r2, [r5, #0]
 80072c8:	681d      	ldr	r5, [r3, #0]
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	2100      	movs	r1, #0
 80072ce:	4628      	mov	r0, r5
 80072d0:	f7f8 ff86 	bl	80001e0 <memchr>
 80072d4:	b108      	cbz	r0, 80072da <_printf_i+0x1f2>
 80072d6:	1b40      	subs	r0, r0, r5
 80072d8:	6060      	str	r0, [r4, #4]
 80072da:	6863      	ldr	r3, [r4, #4]
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	2300      	movs	r3, #0
 80072e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e4:	e7a8      	b.n	8007238 <_printf_i+0x150>
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	462a      	mov	r2, r5
 80072ea:	4649      	mov	r1, r9
 80072ec:	4640      	mov	r0, r8
 80072ee:	47d0      	blx	sl
 80072f0:	3001      	adds	r0, #1
 80072f2:	d0ab      	beq.n	800724c <_printf_i+0x164>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	079b      	lsls	r3, r3, #30
 80072f8:	d413      	bmi.n	8007322 <_printf_i+0x23a>
 80072fa:	68e0      	ldr	r0, [r4, #12]
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	4298      	cmp	r0, r3
 8007300:	bfb8      	it	lt
 8007302:	4618      	movlt	r0, r3
 8007304:	e7a4      	b.n	8007250 <_printf_i+0x168>
 8007306:	2301      	movs	r3, #1
 8007308:	4632      	mov	r2, r6
 800730a:	4649      	mov	r1, r9
 800730c:	4640      	mov	r0, r8
 800730e:	47d0      	blx	sl
 8007310:	3001      	adds	r0, #1
 8007312:	d09b      	beq.n	800724c <_printf_i+0x164>
 8007314:	3501      	adds	r5, #1
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	9903      	ldr	r1, [sp, #12]
 800731a:	1a5b      	subs	r3, r3, r1
 800731c:	42ab      	cmp	r3, r5
 800731e:	dcf2      	bgt.n	8007306 <_printf_i+0x21e>
 8007320:	e7eb      	b.n	80072fa <_printf_i+0x212>
 8007322:	2500      	movs	r5, #0
 8007324:	f104 0619 	add.w	r6, r4, #25
 8007328:	e7f5      	b.n	8007316 <_printf_i+0x22e>
 800732a:	bf00      	nop
 800732c:	08008bef 	.word	0x08008bef
 8007330:	08008c00 	.word	0x08008c00

08007334 <_sbrk_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d06      	ldr	r5, [pc, #24]	; (8007350 <_sbrk_r+0x1c>)
 8007338:	2300      	movs	r3, #0
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	f001 fba0 	bl	8008a84 <_sbrk>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_sbrk_r+0x1a>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_sbrk_r+0x1a>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	20012f90 	.word	0x20012f90

08007354 <__swbuf_r>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	460e      	mov	r6, r1
 8007358:	4614      	mov	r4, r2
 800735a:	4605      	mov	r5, r0
 800735c:	b118      	cbz	r0, 8007366 <__swbuf_r+0x12>
 800735e:	6983      	ldr	r3, [r0, #24]
 8007360:	b90b      	cbnz	r3, 8007366 <__swbuf_r+0x12>
 8007362:	f000 f9d9 	bl	8007718 <__sinit>
 8007366:	4b21      	ldr	r3, [pc, #132]	; (80073ec <__swbuf_r+0x98>)
 8007368:	429c      	cmp	r4, r3
 800736a:	d12b      	bne.n	80073c4 <__swbuf_r+0x70>
 800736c:	686c      	ldr	r4, [r5, #4]
 800736e:	69a3      	ldr	r3, [r4, #24]
 8007370:	60a3      	str	r3, [r4, #8]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	071a      	lsls	r2, r3, #28
 8007376:	d52f      	bpl.n	80073d8 <__swbuf_r+0x84>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	b36b      	cbz	r3, 80073d8 <__swbuf_r+0x84>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	6820      	ldr	r0, [r4, #0]
 8007380:	1ac0      	subs	r0, r0, r3
 8007382:	6963      	ldr	r3, [r4, #20]
 8007384:	b2f6      	uxtb	r6, r6
 8007386:	4283      	cmp	r3, r0
 8007388:	4637      	mov	r7, r6
 800738a:	dc04      	bgt.n	8007396 <__swbuf_r+0x42>
 800738c:	4621      	mov	r1, r4
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f92e 	bl	80075f0 <_fflush_r>
 8007394:	bb30      	cbnz	r0, 80073e4 <__swbuf_r+0x90>
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	3b01      	subs	r3, #1
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	6022      	str	r2, [r4, #0]
 80073a2:	701e      	strb	r6, [r3, #0]
 80073a4:	6963      	ldr	r3, [r4, #20]
 80073a6:	3001      	adds	r0, #1
 80073a8:	4283      	cmp	r3, r0
 80073aa:	d004      	beq.n	80073b6 <__swbuf_r+0x62>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	07db      	lsls	r3, r3, #31
 80073b0:	d506      	bpl.n	80073c0 <__swbuf_r+0x6c>
 80073b2:	2e0a      	cmp	r6, #10
 80073b4:	d104      	bne.n	80073c0 <__swbuf_r+0x6c>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 f919 	bl	80075f0 <_fflush_r>
 80073be:	b988      	cbnz	r0, 80073e4 <__swbuf_r+0x90>
 80073c0:	4638      	mov	r0, r7
 80073c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <__swbuf_r+0x9c>)
 80073c6:	429c      	cmp	r4, r3
 80073c8:	d101      	bne.n	80073ce <__swbuf_r+0x7a>
 80073ca:	68ac      	ldr	r4, [r5, #8]
 80073cc:	e7cf      	b.n	800736e <__swbuf_r+0x1a>
 80073ce:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <__swbuf_r+0xa0>)
 80073d0:	429c      	cmp	r4, r3
 80073d2:	bf08      	it	eq
 80073d4:	68ec      	ldreq	r4, [r5, #12]
 80073d6:	e7ca      	b.n	800736e <__swbuf_r+0x1a>
 80073d8:	4621      	mov	r1, r4
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 f80c 	bl	80073f8 <__swsetup_r>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d0cb      	beq.n	800737c <__swbuf_r+0x28>
 80073e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80073e8:	e7ea      	b.n	80073c0 <__swbuf_r+0x6c>
 80073ea:	bf00      	nop
 80073ec:	08008c34 	.word	0x08008c34
 80073f0:	08008c54 	.word	0x08008c54
 80073f4:	08008c14 	.word	0x08008c14

080073f8 <__swsetup_r>:
 80073f8:	4b32      	ldr	r3, [pc, #200]	; (80074c4 <__swsetup_r+0xcc>)
 80073fa:	b570      	push	{r4, r5, r6, lr}
 80073fc:	681d      	ldr	r5, [r3, #0]
 80073fe:	4606      	mov	r6, r0
 8007400:	460c      	mov	r4, r1
 8007402:	b125      	cbz	r5, 800740e <__swsetup_r+0x16>
 8007404:	69ab      	ldr	r3, [r5, #24]
 8007406:	b913      	cbnz	r3, 800740e <__swsetup_r+0x16>
 8007408:	4628      	mov	r0, r5
 800740a:	f000 f985 	bl	8007718 <__sinit>
 800740e:	4b2e      	ldr	r3, [pc, #184]	; (80074c8 <__swsetup_r+0xd0>)
 8007410:	429c      	cmp	r4, r3
 8007412:	d10f      	bne.n	8007434 <__swsetup_r+0x3c>
 8007414:	686c      	ldr	r4, [r5, #4]
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800741c:	0719      	lsls	r1, r3, #28
 800741e:	d42c      	bmi.n	800747a <__swsetup_r+0x82>
 8007420:	06dd      	lsls	r5, r3, #27
 8007422:	d411      	bmi.n	8007448 <__swsetup_r+0x50>
 8007424:	2309      	movs	r3, #9
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007432:	e03e      	b.n	80074b2 <__swsetup_r+0xba>
 8007434:	4b25      	ldr	r3, [pc, #148]	; (80074cc <__swsetup_r+0xd4>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d101      	bne.n	800743e <__swsetup_r+0x46>
 800743a:	68ac      	ldr	r4, [r5, #8]
 800743c:	e7eb      	b.n	8007416 <__swsetup_r+0x1e>
 800743e:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <__swsetup_r+0xd8>)
 8007440:	429c      	cmp	r4, r3
 8007442:	bf08      	it	eq
 8007444:	68ec      	ldreq	r4, [r5, #12]
 8007446:	e7e6      	b.n	8007416 <__swsetup_r+0x1e>
 8007448:	0758      	lsls	r0, r3, #29
 800744a:	d512      	bpl.n	8007472 <__swsetup_r+0x7a>
 800744c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800744e:	b141      	cbz	r1, 8007462 <__swsetup_r+0x6a>
 8007450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007454:	4299      	cmp	r1, r3
 8007456:	d002      	beq.n	800745e <__swsetup_r+0x66>
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff fa41 	bl	80068e0 <_free_r>
 800745e:	2300      	movs	r3, #0
 8007460:	6363      	str	r3, [r4, #52]	; 0x34
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	2300      	movs	r3, #0
 800746c:	6063      	str	r3, [r4, #4]
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	f043 0308 	orr.w	r3, r3, #8
 8007478:	81a3      	strh	r3, [r4, #12]
 800747a:	6923      	ldr	r3, [r4, #16]
 800747c:	b94b      	cbnz	r3, 8007492 <__swsetup_r+0x9a>
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007488:	d003      	beq.n	8007492 <__swsetup_r+0x9a>
 800748a:	4621      	mov	r1, r4
 800748c:	4630      	mov	r0, r6
 800748e:	f000 fa09 	bl	80078a4 <__smakebuf_r>
 8007492:	89a0      	ldrh	r0, [r4, #12]
 8007494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007498:	f010 0301 	ands.w	r3, r0, #1
 800749c:	d00a      	beq.n	80074b4 <__swsetup_r+0xbc>
 800749e:	2300      	movs	r3, #0
 80074a0:	60a3      	str	r3, [r4, #8]
 80074a2:	6963      	ldr	r3, [r4, #20]
 80074a4:	425b      	negs	r3, r3
 80074a6:	61a3      	str	r3, [r4, #24]
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	b943      	cbnz	r3, 80074be <__swsetup_r+0xc6>
 80074ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074b0:	d1ba      	bne.n	8007428 <__swsetup_r+0x30>
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	0781      	lsls	r1, r0, #30
 80074b6:	bf58      	it	pl
 80074b8:	6963      	ldrpl	r3, [r4, #20]
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	e7f4      	b.n	80074a8 <__swsetup_r+0xb0>
 80074be:	2000      	movs	r0, #0
 80074c0:	e7f7      	b.n	80074b2 <__swsetup_r+0xba>
 80074c2:	bf00      	nop
 80074c4:	20000010 	.word	0x20000010
 80074c8:	08008c34 	.word	0x08008c34
 80074cc:	08008c54 	.word	0x08008c54
 80074d0:	08008c14 	.word	0x08008c14

080074d4 <abort>:
 80074d4:	b508      	push	{r3, lr}
 80074d6:	2006      	movs	r0, #6
 80074d8:	f000 faa2 	bl	8007a20 <raise>
 80074dc:	2001      	movs	r0, #1
 80074de:	f7f9 fe2d 	bl	800113c <_exit>
	...

080074e4 <__sflush_r>:
 80074e4:	898a      	ldrh	r2, [r1, #12]
 80074e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ea:	4605      	mov	r5, r0
 80074ec:	0710      	lsls	r0, r2, #28
 80074ee:	460c      	mov	r4, r1
 80074f0:	d458      	bmi.n	80075a4 <__sflush_r+0xc0>
 80074f2:	684b      	ldr	r3, [r1, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dc05      	bgt.n	8007504 <__sflush_r+0x20>
 80074f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	dc02      	bgt.n	8007504 <__sflush_r+0x20>
 80074fe:	2000      	movs	r0, #0
 8007500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007506:	2e00      	cmp	r6, #0
 8007508:	d0f9      	beq.n	80074fe <__sflush_r+0x1a>
 800750a:	2300      	movs	r3, #0
 800750c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007510:	682f      	ldr	r7, [r5, #0]
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	d032      	beq.n	800757c <__sflush_r+0x98>
 8007516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	075a      	lsls	r2, r3, #29
 800751c:	d505      	bpl.n	800752a <__sflush_r+0x46>
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	1ac0      	subs	r0, r0, r3
 8007522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007524:	b10b      	cbz	r3, 800752a <__sflush_r+0x46>
 8007526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007528:	1ac0      	subs	r0, r0, r3
 800752a:	2300      	movs	r3, #0
 800752c:	4602      	mov	r2, r0
 800752e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007530:	6a21      	ldr	r1, [r4, #32]
 8007532:	4628      	mov	r0, r5
 8007534:	47b0      	blx	r6
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	d106      	bne.n	800754a <__sflush_r+0x66>
 800753c:	6829      	ldr	r1, [r5, #0]
 800753e:	291d      	cmp	r1, #29
 8007540:	d82c      	bhi.n	800759c <__sflush_r+0xb8>
 8007542:	4a2a      	ldr	r2, [pc, #168]	; (80075ec <__sflush_r+0x108>)
 8007544:	40ca      	lsrs	r2, r1
 8007546:	07d6      	lsls	r6, r2, #31
 8007548:	d528      	bpl.n	800759c <__sflush_r+0xb8>
 800754a:	2200      	movs	r2, #0
 800754c:	6062      	str	r2, [r4, #4]
 800754e:	04d9      	lsls	r1, r3, #19
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	6022      	str	r2, [r4, #0]
 8007554:	d504      	bpl.n	8007560 <__sflush_r+0x7c>
 8007556:	1c42      	adds	r2, r0, #1
 8007558:	d101      	bne.n	800755e <__sflush_r+0x7a>
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	b903      	cbnz	r3, 8007560 <__sflush_r+0x7c>
 800755e:	6560      	str	r0, [r4, #84]	; 0x54
 8007560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007562:	602f      	str	r7, [r5, #0]
 8007564:	2900      	cmp	r1, #0
 8007566:	d0ca      	beq.n	80074fe <__sflush_r+0x1a>
 8007568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800756c:	4299      	cmp	r1, r3
 800756e:	d002      	beq.n	8007576 <__sflush_r+0x92>
 8007570:	4628      	mov	r0, r5
 8007572:	f7ff f9b5 	bl	80068e0 <_free_r>
 8007576:	2000      	movs	r0, #0
 8007578:	6360      	str	r0, [r4, #52]	; 0x34
 800757a:	e7c1      	b.n	8007500 <__sflush_r+0x1c>
 800757c:	6a21      	ldr	r1, [r4, #32]
 800757e:	2301      	movs	r3, #1
 8007580:	4628      	mov	r0, r5
 8007582:	47b0      	blx	r6
 8007584:	1c41      	adds	r1, r0, #1
 8007586:	d1c7      	bne.n	8007518 <__sflush_r+0x34>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0c4      	beq.n	8007518 <__sflush_r+0x34>
 800758e:	2b1d      	cmp	r3, #29
 8007590:	d001      	beq.n	8007596 <__sflush_r+0xb2>
 8007592:	2b16      	cmp	r3, #22
 8007594:	d101      	bne.n	800759a <__sflush_r+0xb6>
 8007596:	602f      	str	r7, [r5, #0]
 8007598:	e7b1      	b.n	80074fe <__sflush_r+0x1a>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	e7ad      	b.n	8007500 <__sflush_r+0x1c>
 80075a4:	690f      	ldr	r7, [r1, #16]
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	d0a9      	beq.n	80074fe <__sflush_r+0x1a>
 80075aa:	0793      	lsls	r3, r2, #30
 80075ac:	680e      	ldr	r6, [r1, #0]
 80075ae:	bf08      	it	eq
 80075b0:	694b      	ldreq	r3, [r1, #20]
 80075b2:	600f      	str	r7, [r1, #0]
 80075b4:	bf18      	it	ne
 80075b6:	2300      	movne	r3, #0
 80075b8:	eba6 0807 	sub.w	r8, r6, r7
 80075bc:	608b      	str	r3, [r1, #8]
 80075be:	f1b8 0f00 	cmp.w	r8, #0
 80075c2:	dd9c      	ble.n	80074fe <__sflush_r+0x1a>
 80075c4:	6a21      	ldr	r1, [r4, #32]
 80075c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075c8:	4643      	mov	r3, r8
 80075ca:	463a      	mov	r2, r7
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b0      	blx	r6
 80075d0:	2800      	cmp	r0, #0
 80075d2:	dc06      	bgt.n	80075e2 <__sflush_r+0xfe>
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075da:	81a3      	strh	r3, [r4, #12]
 80075dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075e0:	e78e      	b.n	8007500 <__sflush_r+0x1c>
 80075e2:	4407      	add	r7, r0
 80075e4:	eba8 0800 	sub.w	r8, r8, r0
 80075e8:	e7e9      	b.n	80075be <__sflush_r+0xda>
 80075ea:	bf00      	nop
 80075ec:	20400001 	.word	0x20400001

080075f0 <_fflush_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	690b      	ldr	r3, [r1, #16]
 80075f4:	4605      	mov	r5, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	b913      	cbnz	r3, 8007600 <_fflush_r+0x10>
 80075fa:	2500      	movs	r5, #0
 80075fc:	4628      	mov	r0, r5
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	b118      	cbz	r0, 800760a <_fflush_r+0x1a>
 8007602:	6983      	ldr	r3, [r0, #24]
 8007604:	b90b      	cbnz	r3, 800760a <_fflush_r+0x1a>
 8007606:	f000 f887 	bl	8007718 <__sinit>
 800760a:	4b14      	ldr	r3, [pc, #80]	; (800765c <_fflush_r+0x6c>)
 800760c:	429c      	cmp	r4, r3
 800760e:	d11b      	bne.n	8007648 <_fflush_r+0x58>
 8007610:	686c      	ldr	r4, [r5, #4]
 8007612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0ef      	beq.n	80075fa <_fflush_r+0xa>
 800761a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800761c:	07d0      	lsls	r0, r2, #31
 800761e:	d404      	bmi.n	800762a <_fflush_r+0x3a>
 8007620:	0599      	lsls	r1, r3, #22
 8007622:	d402      	bmi.n	800762a <_fflush_r+0x3a>
 8007624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007626:	f000 f915 	bl	8007854 <__retarget_lock_acquire_recursive>
 800762a:	4628      	mov	r0, r5
 800762c:	4621      	mov	r1, r4
 800762e:	f7ff ff59 	bl	80074e4 <__sflush_r>
 8007632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007634:	07da      	lsls	r2, r3, #31
 8007636:	4605      	mov	r5, r0
 8007638:	d4e0      	bmi.n	80075fc <_fflush_r+0xc>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	059b      	lsls	r3, r3, #22
 800763e:	d4dd      	bmi.n	80075fc <_fflush_r+0xc>
 8007640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007642:	f000 f908 	bl	8007856 <__retarget_lock_release_recursive>
 8007646:	e7d9      	b.n	80075fc <_fflush_r+0xc>
 8007648:	4b05      	ldr	r3, [pc, #20]	; (8007660 <_fflush_r+0x70>)
 800764a:	429c      	cmp	r4, r3
 800764c:	d101      	bne.n	8007652 <_fflush_r+0x62>
 800764e:	68ac      	ldr	r4, [r5, #8]
 8007650:	e7df      	b.n	8007612 <_fflush_r+0x22>
 8007652:	4b04      	ldr	r3, [pc, #16]	; (8007664 <_fflush_r+0x74>)
 8007654:	429c      	cmp	r4, r3
 8007656:	bf08      	it	eq
 8007658:	68ec      	ldreq	r4, [r5, #12]
 800765a:	e7da      	b.n	8007612 <_fflush_r+0x22>
 800765c:	08008c34 	.word	0x08008c34
 8007660:	08008c54 	.word	0x08008c54
 8007664:	08008c14 	.word	0x08008c14

08007668 <std>:
 8007668:	2300      	movs	r3, #0
 800766a:	b510      	push	{r4, lr}
 800766c:	4604      	mov	r4, r0
 800766e:	e9c0 3300 	strd	r3, r3, [r0]
 8007672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007676:	6083      	str	r3, [r0, #8]
 8007678:	8181      	strh	r1, [r0, #12]
 800767a:	6643      	str	r3, [r0, #100]	; 0x64
 800767c:	81c2      	strh	r2, [r0, #14]
 800767e:	6183      	str	r3, [r0, #24]
 8007680:	4619      	mov	r1, r3
 8007682:	2208      	movs	r2, #8
 8007684:	305c      	adds	r0, #92	; 0x5c
 8007686:	f7ff f85f 	bl	8006748 <memset>
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <std+0x38>)
 800768c:	6263      	str	r3, [r4, #36]	; 0x24
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <std+0x3c>)
 8007690:	62a3      	str	r3, [r4, #40]	; 0x28
 8007692:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <std+0x40>)
 8007694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <std+0x44>)
 8007698:	6224      	str	r4, [r4, #32]
 800769a:	6323      	str	r3, [r4, #48]	; 0x30
 800769c:	bd10      	pop	{r4, pc}
 800769e:	bf00      	nop
 80076a0:	08007a59 	.word	0x08007a59
 80076a4:	08007a7b 	.word	0x08007a7b
 80076a8:	08007ab3 	.word	0x08007ab3
 80076ac:	08007ad7 	.word	0x08007ad7

080076b0 <_cleanup_r>:
 80076b0:	4901      	ldr	r1, [pc, #4]	; (80076b8 <_cleanup_r+0x8>)
 80076b2:	f000 b8af 	b.w	8007814 <_fwalk_reent>
 80076b6:	bf00      	nop
 80076b8:	080075f1 	.word	0x080075f1

080076bc <__sfmoreglue>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	2268      	movs	r2, #104	; 0x68
 80076c0:	1e4d      	subs	r5, r1, #1
 80076c2:	4355      	muls	r5, r2
 80076c4:	460e      	mov	r6, r1
 80076c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076ca:	f7ff f975 	bl	80069b8 <_malloc_r>
 80076ce:	4604      	mov	r4, r0
 80076d0:	b140      	cbz	r0, 80076e4 <__sfmoreglue+0x28>
 80076d2:	2100      	movs	r1, #0
 80076d4:	e9c0 1600 	strd	r1, r6, [r0]
 80076d8:	300c      	adds	r0, #12
 80076da:	60a0      	str	r0, [r4, #8]
 80076dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076e0:	f7ff f832 	bl	8006748 <memset>
 80076e4:	4620      	mov	r0, r4
 80076e6:	bd70      	pop	{r4, r5, r6, pc}

080076e8 <__sfp_lock_acquire>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__sfp_lock_acquire+0x8>)
 80076ea:	f000 b8b3 	b.w	8007854 <__retarget_lock_acquire_recursive>
 80076ee:	bf00      	nop
 80076f0:	20012f8d 	.word	0x20012f8d

080076f4 <__sfp_lock_release>:
 80076f4:	4801      	ldr	r0, [pc, #4]	; (80076fc <__sfp_lock_release+0x8>)
 80076f6:	f000 b8ae 	b.w	8007856 <__retarget_lock_release_recursive>
 80076fa:	bf00      	nop
 80076fc:	20012f8d 	.word	0x20012f8d

08007700 <__sinit_lock_acquire>:
 8007700:	4801      	ldr	r0, [pc, #4]	; (8007708 <__sinit_lock_acquire+0x8>)
 8007702:	f000 b8a7 	b.w	8007854 <__retarget_lock_acquire_recursive>
 8007706:	bf00      	nop
 8007708:	20012f8e 	.word	0x20012f8e

0800770c <__sinit_lock_release>:
 800770c:	4801      	ldr	r0, [pc, #4]	; (8007714 <__sinit_lock_release+0x8>)
 800770e:	f000 b8a2 	b.w	8007856 <__retarget_lock_release_recursive>
 8007712:	bf00      	nop
 8007714:	20012f8e 	.word	0x20012f8e

08007718 <__sinit>:
 8007718:	b510      	push	{r4, lr}
 800771a:	4604      	mov	r4, r0
 800771c:	f7ff fff0 	bl	8007700 <__sinit_lock_acquire>
 8007720:	69a3      	ldr	r3, [r4, #24]
 8007722:	b11b      	cbz	r3, 800772c <__sinit+0x14>
 8007724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007728:	f7ff bff0 	b.w	800770c <__sinit_lock_release>
 800772c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007730:	6523      	str	r3, [r4, #80]	; 0x50
 8007732:	4b13      	ldr	r3, [pc, #76]	; (8007780 <__sinit+0x68>)
 8007734:	4a13      	ldr	r2, [pc, #76]	; (8007784 <__sinit+0x6c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	62a2      	str	r2, [r4, #40]	; 0x28
 800773a:	42a3      	cmp	r3, r4
 800773c:	bf04      	itt	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	61a3      	streq	r3, [r4, #24]
 8007742:	4620      	mov	r0, r4
 8007744:	f000 f820 	bl	8007788 <__sfp>
 8007748:	6060      	str	r0, [r4, #4]
 800774a:	4620      	mov	r0, r4
 800774c:	f000 f81c 	bl	8007788 <__sfp>
 8007750:	60a0      	str	r0, [r4, #8]
 8007752:	4620      	mov	r0, r4
 8007754:	f000 f818 	bl	8007788 <__sfp>
 8007758:	2200      	movs	r2, #0
 800775a:	60e0      	str	r0, [r4, #12]
 800775c:	2104      	movs	r1, #4
 800775e:	6860      	ldr	r0, [r4, #4]
 8007760:	f7ff ff82 	bl	8007668 <std>
 8007764:	68a0      	ldr	r0, [r4, #8]
 8007766:	2201      	movs	r2, #1
 8007768:	2109      	movs	r1, #9
 800776a:	f7ff ff7d 	bl	8007668 <std>
 800776e:	68e0      	ldr	r0, [r4, #12]
 8007770:	2202      	movs	r2, #2
 8007772:	2112      	movs	r1, #18
 8007774:	f7ff ff78 	bl	8007668 <std>
 8007778:	2301      	movs	r3, #1
 800777a:	61a3      	str	r3, [r4, #24]
 800777c:	e7d2      	b.n	8007724 <__sinit+0xc>
 800777e:	bf00      	nop
 8007780:	08008b2c 	.word	0x08008b2c
 8007784:	080076b1 	.word	0x080076b1

08007788 <__sfp>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	4607      	mov	r7, r0
 800778c:	f7ff ffac 	bl	80076e8 <__sfp_lock_acquire>
 8007790:	4b1e      	ldr	r3, [pc, #120]	; (800780c <__sfp+0x84>)
 8007792:	681e      	ldr	r6, [r3, #0]
 8007794:	69b3      	ldr	r3, [r6, #24]
 8007796:	b913      	cbnz	r3, 800779e <__sfp+0x16>
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff ffbd 	bl	8007718 <__sinit>
 800779e:	3648      	adds	r6, #72	; 0x48
 80077a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	d503      	bpl.n	80077b0 <__sfp+0x28>
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	b30b      	cbz	r3, 80077f0 <__sfp+0x68>
 80077ac:	6836      	ldr	r6, [r6, #0]
 80077ae:	e7f7      	b.n	80077a0 <__sfp+0x18>
 80077b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077b4:	b9d5      	cbnz	r5, 80077ec <__sfp+0x64>
 80077b6:	4b16      	ldr	r3, [pc, #88]	; (8007810 <__sfp+0x88>)
 80077b8:	60e3      	str	r3, [r4, #12]
 80077ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077be:	6665      	str	r5, [r4, #100]	; 0x64
 80077c0:	f000 f847 	bl	8007852 <__retarget_lock_init_recursive>
 80077c4:	f7ff ff96 	bl	80076f4 <__sfp_lock_release>
 80077c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077d0:	6025      	str	r5, [r4, #0]
 80077d2:	61a5      	str	r5, [r4, #24]
 80077d4:	2208      	movs	r2, #8
 80077d6:	4629      	mov	r1, r5
 80077d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077dc:	f7fe ffb4 	bl	8006748 <memset>
 80077e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077e8:	4620      	mov	r0, r4
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ec:	3468      	adds	r4, #104	; 0x68
 80077ee:	e7d9      	b.n	80077a4 <__sfp+0x1c>
 80077f0:	2104      	movs	r1, #4
 80077f2:	4638      	mov	r0, r7
 80077f4:	f7ff ff62 	bl	80076bc <__sfmoreglue>
 80077f8:	4604      	mov	r4, r0
 80077fa:	6030      	str	r0, [r6, #0]
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d1d5      	bne.n	80077ac <__sfp+0x24>
 8007800:	f7ff ff78 	bl	80076f4 <__sfp_lock_release>
 8007804:	230c      	movs	r3, #12
 8007806:	603b      	str	r3, [r7, #0]
 8007808:	e7ee      	b.n	80077e8 <__sfp+0x60>
 800780a:	bf00      	nop
 800780c:	08008b2c 	.word	0x08008b2c
 8007810:	ffff0001 	.word	0xffff0001

08007814 <_fwalk_reent>:
 8007814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007818:	4606      	mov	r6, r0
 800781a:	4688      	mov	r8, r1
 800781c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007820:	2700      	movs	r7, #0
 8007822:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007826:	f1b9 0901 	subs.w	r9, r9, #1
 800782a:	d505      	bpl.n	8007838 <_fwalk_reent+0x24>
 800782c:	6824      	ldr	r4, [r4, #0]
 800782e:	2c00      	cmp	r4, #0
 8007830:	d1f7      	bne.n	8007822 <_fwalk_reent+0xe>
 8007832:	4638      	mov	r0, r7
 8007834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007838:	89ab      	ldrh	r3, [r5, #12]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d907      	bls.n	800784e <_fwalk_reent+0x3a>
 800783e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007842:	3301      	adds	r3, #1
 8007844:	d003      	beq.n	800784e <_fwalk_reent+0x3a>
 8007846:	4629      	mov	r1, r5
 8007848:	4630      	mov	r0, r6
 800784a:	47c0      	blx	r8
 800784c:	4307      	orrs	r7, r0
 800784e:	3568      	adds	r5, #104	; 0x68
 8007850:	e7e9      	b.n	8007826 <_fwalk_reent+0x12>

08007852 <__retarget_lock_init_recursive>:
 8007852:	4770      	bx	lr

08007854 <__retarget_lock_acquire_recursive>:
 8007854:	4770      	bx	lr

08007856 <__retarget_lock_release_recursive>:
 8007856:	4770      	bx	lr

08007858 <__swhatbuf_r>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	460e      	mov	r6, r1
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	2900      	cmp	r1, #0
 8007862:	b096      	sub	sp, #88	; 0x58
 8007864:	4614      	mov	r4, r2
 8007866:	461d      	mov	r5, r3
 8007868:	da08      	bge.n	800787c <__swhatbuf_r+0x24>
 800786a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	061a      	lsls	r2, r3, #24
 8007874:	d410      	bmi.n	8007898 <__swhatbuf_r+0x40>
 8007876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800787a:	e00e      	b.n	800789a <__swhatbuf_r+0x42>
 800787c:	466a      	mov	r2, sp
 800787e:	f000 f951 	bl	8007b24 <_fstat_r>
 8007882:	2800      	cmp	r0, #0
 8007884:	dbf1      	blt.n	800786a <__swhatbuf_r+0x12>
 8007886:	9a01      	ldr	r2, [sp, #4]
 8007888:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800788c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007890:	425a      	negs	r2, r3
 8007892:	415a      	adcs	r2, r3
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	e7ee      	b.n	8007876 <__swhatbuf_r+0x1e>
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	2000      	movs	r0, #0
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	b016      	add	sp, #88	; 0x58
 80078a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080078a4 <__smakebuf_r>:
 80078a4:	898b      	ldrh	r3, [r1, #12]
 80078a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078a8:	079d      	lsls	r5, r3, #30
 80078aa:	4606      	mov	r6, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	d507      	bpl.n	80078c0 <__smakebuf_r+0x1c>
 80078b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	2301      	movs	r3, #1
 80078ba:	6163      	str	r3, [r4, #20]
 80078bc:	b002      	add	sp, #8
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	ab01      	add	r3, sp, #4
 80078c2:	466a      	mov	r2, sp
 80078c4:	f7ff ffc8 	bl	8007858 <__swhatbuf_r>
 80078c8:	9900      	ldr	r1, [sp, #0]
 80078ca:	4605      	mov	r5, r0
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff f873 	bl	80069b8 <_malloc_r>
 80078d2:	b948      	cbnz	r0, 80078e8 <__smakebuf_r+0x44>
 80078d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d8:	059a      	lsls	r2, r3, #22
 80078da:	d4ef      	bmi.n	80078bc <__smakebuf_r+0x18>
 80078dc:	f023 0303 	bic.w	r3, r3, #3
 80078e0:	f043 0302 	orr.w	r3, r3, #2
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	e7e3      	b.n	80078b0 <__smakebuf_r+0xc>
 80078e8:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <__smakebuf_r+0x7c>)
 80078ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	6020      	str	r0, [r4, #0]
 80078f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	9b00      	ldr	r3, [sp, #0]
 80078f8:	6163      	str	r3, [r4, #20]
 80078fa:	9b01      	ldr	r3, [sp, #4]
 80078fc:	6120      	str	r0, [r4, #16]
 80078fe:	b15b      	cbz	r3, 8007918 <__smakebuf_r+0x74>
 8007900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f91f 	bl	8007b48 <_isatty_r>
 800790a:	b128      	cbz	r0, 8007918 <__smakebuf_r+0x74>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	89a0      	ldrh	r0, [r4, #12]
 800791a:	4305      	orrs	r5, r0
 800791c:	81a5      	strh	r5, [r4, #12]
 800791e:	e7cd      	b.n	80078bc <__smakebuf_r+0x18>
 8007920:	080076b1 	.word	0x080076b1

08007924 <memmove>:
 8007924:	4288      	cmp	r0, r1
 8007926:	b510      	push	{r4, lr}
 8007928:	eb01 0402 	add.w	r4, r1, r2
 800792c:	d902      	bls.n	8007934 <memmove+0x10>
 800792e:	4284      	cmp	r4, r0
 8007930:	4623      	mov	r3, r4
 8007932:	d807      	bhi.n	8007944 <memmove+0x20>
 8007934:	1e43      	subs	r3, r0, #1
 8007936:	42a1      	cmp	r1, r4
 8007938:	d008      	beq.n	800794c <memmove+0x28>
 800793a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800793e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007942:	e7f8      	b.n	8007936 <memmove+0x12>
 8007944:	4402      	add	r2, r0
 8007946:	4601      	mov	r1, r0
 8007948:	428a      	cmp	r2, r1
 800794a:	d100      	bne.n	800794e <memmove+0x2a>
 800794c:	bd10      	pop	{r4, pc}
 800794e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007956:	e7f7      	b.n	8007948 <memmove+0x24>

08007958 <__malloc_lock>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__malloc_lock+0x8>)
 800795a:	f7ff bf7b 	b.w	8007854 <__retarget_lock_acquire_recursive>
 800795e:	bf00      	nop
 8007960:	20012f8c 	.word	0x20012f8c

08007964 <__malloc_unlock>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__malloc_unlock+0x8>)
 8007966:	f7ff bf76 	b.w	8007856 <__retarget_lock_release_recursive>
 800796a:	bf00      	nop
 800796c:	20012f8c 	.word	0x20012f8c

08007970 <_realloc_r>:
 8007970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007974:	4680      	mov	r8, r0
 8007976:	4614      	mov	r4, r2
 8007978:	460e      	mov	r6, r1
 800797a:	b921      	cbnz	r1, 8007986 <_realloc_r+0x16>
 800797c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	4611      	mov	r1, r2
 8007982:	f7ff b819 	b.w	80069b8 <_malloc_r>
 8007986:	b92a      	cbnz	r2, 8007994 <_realloc_r+0x24>
 8007988:	f7fe ffaa 	bl	80068e0 <_free_r>
 800798c:	4625      	mov	r5, r4
 800798e:	4628      	mov	r0, r5
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	f000 f8fa 	bl	8007b8c <_malloc_usable_size_r>
 8007998:	4284      	cmp	r4, r0
 800799a:	4607      	mov	r7, r0
 800799c:	d802      	bhi.n	80079a4 <_realloc_r+0x34>
 800799e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079a2:	d812      	bhi.n	80079ca <_realloc_r+0x5a>
 80079a4:	4621      	mov	r1, r4
 80079a6:	4640      	mov	r0, r8
 80079a8:	f7ff f806 	bl	80069b8 <_malloc_r>
 80079ac:	4605      	mov	r5, r0
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d0ed      	beq.n	800798e <_realloc_r+0x1e>
 80079b2:	42bc      	cmp	r4, r7
 80079b4:	4622      	mov	r2, r4
 80079b6:	4631      	mov	r1, r6
 80079b8:	bf28      	it	cs
 80079ba:	463a      	movcs	r2, r7
 80079bc:	f7fe feb6 	bl	800672c <memcpy>
 80079c0:	4631      	mov	r1, r6
 80079c2:	4640      	mov	r0, r8
 80079c4:	f7fe ff8c 	bl	80068e0 <_free_r>
 80079c8:	e7e1      	b.n	800798e <_realloc_r+0x1e>
 80079ca:	4635      	mov	r5, r6
 80079cc:	e7df      	b.n	800798e <_realloc_r+0x1e>

080079ce <_raise_r>:
 80079ce:	291f      	cmp	r1, #31
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	460d      	mov	r5, r1
 80079d6:	d904      	bls.n	80079e2 <_raise_r+0x14>
 80079d8:	2316      	movs	r3, #22
 80079da:	6003      	str	r3, [r0, #0]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e0:	bd38      	pop	{r3, r4, r5, pc}
 80079e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079e4:	b112      	cbz	r2, 80079ec <_raise_r+0x1e>
 80079e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079ea:	b94b      	cbnz	r3, 8007a00 <_raise_r+0x32>
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 f831 	bl	8007a54 <_getpid_r>
 80079f2:	462a      	mov	r2, r5
 80079f4:	4601      	mov	r1, r0
 80079f6:	4620      	mov	r0, r4
 80079f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079fc:	f000 b818 	b.w	8007a30 <_kill_r>
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d00a      	beq.n	8007a1a <_raise_r+0x4c>
 8007a04:	1c59      	adds	r1, r3, #1
 8007a06:	d103      	bne.n	8007a10 <_raise_r+0x42>
 8007a08:	2316      	movs	r3, #22
 8007a0a:	6003      	str	r3, [r0, #0]
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	e7e7      	b.n	80079e0 <_raise_r+0x12>
 8007a10:	2400      	movs	r4, #0
 8007a12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a16:	4628      	mov	r0, r5
 8007a18:	4798      	blx	r3
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e7e0      	b.n	80079e0 <_raise_r+0x12>
	...

08007a20 <raise>:
 8007a20:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <raise+0xc>)
 8007a22:	4601      	mov	r1, r0
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	f7ff bfd2 	b.w	80079ce <_raise_r>
 8007a2a:	bf00      	nop
 8007a2c:	20000010 	.word	0x20000010

08007a30 <_kill_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	; (8007a50 <_kill_r+0x20>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	f7f9 fb6d 	bl	800111c <_kill>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d102      	bne.n	8007a4c <_kill_r+0x1c>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b103      	cbz	r3, 8007a4c <_kill_r+0x1c>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	20012f90 	.word	0x20012f90

08007a54 <_getpid_r>:
 8007a54:	f7f9 bb5a 	b.w	800110c <_getpid>

08007a58 <__sread>:
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a60:	f000 f89c 	bl	8007b9c <_read_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	bfab      	itete	ge
 8007a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a6c:	181b      	addge	r3, r3, r0
 8007a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a72:	bfac      	ite	ge
 8007a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a76:	81a3      	strhlt	r3, [r4, #12]
 8007a78:	bd10      	pop	{r4, pc}

08007a7a <__swrite>:
 8007a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7e:	461f      	mov	r7, r3
 8007a80:	898b      	ldrh	r3, [r1, #12]
 8007a82:	05db      	lsls	r3, r3, #23
 8007a84:	4605      	mov	r5, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	4616      	mov	r6, r2
 8007a8a:	d505      	bpl.n	8007a98 <__swrite+0x1e>
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	2302      	movs	r3, #2
 8007a92:	2200      	movs	r2, #0
 8007a94:	f000 f868 	bl	8007b68 <_lseek_r>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aae:	f000 b817 	b.w	8007ae0 <_write_r>

08007ab2 <__sseek>:
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aba:	f000 f855 	bl	8007b68 <_lseek_r>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	bf15      	itete	ne
 8007ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ace:	81a3      	strheq	r3, [r4, #12]
 8007ad0:	bf18      	it	ne
 8007ad2:	81a3      	strhne	r3, [r4, #12]
 8007ad4:	bd10      	pop	{r4, pc}

08007ad6 <__sclose>:
 8007ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ada:	f000 b813 	b.w	8007b04 <_close_r>
	...

08007ae0 <_write_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d07      	ldr	r5, [pc, #28]	; (8007b00 <_write_r+0x20>)
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	2200      	movs	r2, #0
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7f9 fb4b 	bl	800118a <_write>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_write_r+0x1e>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_write_r+0x1e>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	20012f90 	.word	0x20012f90

08007b04 <_close_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d06      	ldr	r5, [pc, #24]	; (8007b20 <_close_r+0x1c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	f7f9 fb57 	bl	80011c2 <_close>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_close_r+0x1a>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_close_r+0x1a>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	20012f90 	.word	0x20012f90

08007b24 <_fstat_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d07      	ldr	r5, [pc, #28]	; (8007b44 <_fstat_r+0x20>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	f7f9 fb52 	bl	80011da <_fstat>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d102      	bne.n	8007b40 <_fstat_r+0x1c>
 8007b3a:	682b      	ldr	r3, [r5, #0]
 8007b3c:	b103      	cbz	r3, 8007b40 <_fstat_r+0x1c>
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	bf00      	nop
 8007b44:	20012f90 	.word	0x20012f90

08007b48 <_isatty_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_isatty_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7f9 fb51 	bl	80011fa <_isatty>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_isatty_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_isatty_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	20012f90 	.word	0x20012f90

08007b68 <_lseek_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	; (8007b88 <_lseek_r+0x20>)
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	4608      	mov	r0, r1
 8007b70:	4611      	mov	r1, r2
 8007b72:	2200      	movs	r2, #0
 8007b74:	602a      	str	r2, [r5, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f7f9 fb4a 	bl	8001210 <_lseek>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_lseek_r+0x1e>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_lseek_r+0x1e>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	20012f90 	.word	0x20012f90

08007b8c <_malloc_usable_size_r>:
 8007b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b90:	1f18      	subs	r0, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfbc      	itt	lt
 8007b96:	580b      	ldrlt	r3, [r1, r0]
 8007b98:	18c0      	addlt	r0, r0, r3
 8007b9a:	4770      	bx	lr

08007b9c <_read_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d07      	ldr	r5, [pc, #28]	; (8007bbc <_read_r+0x20>)
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	4608      	mov	r0, r1
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	602a      	str	r2, [r5, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	f7f9 fad0 	bl	8001150 <_read>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_read_r+0x1e>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_read_r+0x1e>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20012f90 	.word	0x20012f90

08007bc0 <round>:
 8007bc0:	ec51 0b10 	vmov	r0, r1, d0
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007bca:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007bce:	2c13      	cmp	r4, #19
 8007bd0:	ee10 2a10 	vmov	r2, s0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	dc19      	bgt.n	8007c0c <round+0x4c>
 8007bd8:	2c00      	cmp	r4, #0
 8007bda:	da09      	bge.n	8007bf0 <round+0x30>
 8007bdc:	3401      	adds	r4, #1
 8007bde:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007be2:	d103      	bne.n	8007bec <round+0x2c>
 8007be4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007be8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bec:	2200      	movs	r2, #0
 8007bee:	e028      	b.n	8007c42 <round+0x82>
 8007bf0:	4d15      	ldr	r5, [pc, #84]	; (8007c48 <round+0x88>)
 8007bf2:	4125      	asrs	r5, r4
 8007bf4:	ea01 0605 	and.w	r6, r1, r5
 8007bf8:	4332      	orrs	r2, r6
 8007bfa:	d00e      	beq.n	8007c1a <round+0x5a>
 8007bfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c00:	fa42 f404 	asr.w	r4, r2, r4
 8007c04:	4423      	add	r3, r4
 8007c06:	ea23 0305 	bic.w	r3, r3, r5
 8007c0a:	e7ef      	b.n	8007bec <round+0x2c>
 8007c0c:	2c33      	cmp	r4, #51	; 0x33
 8007c0e:	dd07      	ble.n	8007c20 <round+0x60>
 8007c10:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007c14:	d101      	bne.n	8007c1a <round+0x5a>
 8007c16:	f7f8 fb39 	bl	800028c <__adddf3>
 8007c1a:	ec41 0b10 	vmov	d0, r0, r1
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007c24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007c28:	40f5      	lsrs	r5, r6
 8007c2a:	4228      	tst	r0, r5
 8007c2c:	d0f5      	beq.n	8007c1a <round+0x5a>
 8007c2e:	2101      	movs	r1, #1
 8007c30:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007c34:	fa01 f404 	lsl.w	r4, r1, r4
 8007c38:	1912      	adds	r2, r2, r4
 8007c3a:	bf28      	it	cs
 8007c3c:	185b      	addcs	r3, r3, r1
 8007c3e:	ea22 0205 	bic.w	r2, r2, r5
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	e7e8      	b.n	8007c1a <round+0x5a>
 8007c48:	000fffff 	.word	0x000fffff

08007c4c <pow>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	ed2d 8b02 	vpush	{d8}
 8007c52:	eeb0 8a40 	vmov.f32	s16, s0
 8007c56:	eef0 8a60 	vmov.f32	s17, s1
 8007c5a:	ec55 4b11 	vmov	r4, r5, d1
 8007c5e:	f000 f867 	bl	8007d30 <__ieee754_pow>
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	ec57 6b10 	vmov	r6, r7, d0
 8007c6e:	f7f8 ff5d 	bl	8000b2c <__aeabi_dcmpun>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d13b      	bne.n	8007cee <pow+0xa2>
 8007c76:	ec51 0b18 	vmov	r0, r1, d8
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f7f8 ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c82:	b1b8      	cbz	r0, 8007cb4 <pow+0x68>
 8007c84:	2200      	movs	r2, #0
 8007c86:	2300      	movs	r3, #0
 8007c88:	4620      	mov	r0, r4
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	f7f8 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d146      	bne.n	8007d22 <pow+0xd6>
 8007c94:	ec45 4b10 	vmov	d0, r4, r5
 8007c98:	f000 fe63 	bl	8008962 <finite>
 8007c9c:	b338      	cbz	r0, 8007cee <pow+0xa2>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	f7f8 ff19 	bl	8000adc <__aeabi_dcmplt>
 8007caa:	b300      	cbz	r0, 8007cee <pow+0xa2>
 8007cac:	f7fe fd14 	bl	80066d8 <__errno>
 8007cb0:	2322      	movs	r3, #34	; 0x22
 8007cb2:	e01b      	b.n	8007cec <pow+0xa0>
 8007cb4:	ec47 6b10 	vmov	d0, r6, r7
 8007cb8:	f000 fe53 	bl	8008962 <finite>
 8007cbc:	b9e0      	cbnz	r0, 8007cf8 <pow+0xac>
 8007cbe:	eeb0 0a48 	vmov.f32	s0, s16
 8007cc2:	eef0 0a68 	vmov.f32	s1, s17
 8007cc6:	f000 fe4c 	bl	8008962 <finite>
 8007cca:	b1a8      	cbz	r0, 8007cf8 <pow+0xac>
 8007ccc:	ec45 4b10 	vmov	d0, r4, r5
 8007cd0:	f000 fe47 	bl	8008962 <finite>
 8007cd4:	b180      	cbz	r0, 8007cf8 <pow+0xac>
 8007cd6:	4632      	mov	r2, r6
 8007cd8:	463b      	mov	r3, r7
 8007cda:	4630      	mov	r0, r6
 8007cdc:	4639      	mov	r1, r7
 8007cde:	f7f8 ff25 	bl	8000b2c <__aeabi_dcmpun>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0e2      	beq.n	8007cac <pow+0x60>
 8007ce6:	f7fe fcf7 	bl	80066d8 <__errno>
 8007cea:	2321      	movs	r3, #33	; 0x21
 8007cec:	6003      	str	r3, [r0, #0]
 8007cee:	ecbd 8b02 	vpop	{d8}
 8007cf2:	ec47 6b10 	vmov	d0, r6, r7
 8007cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d0f2      	beq.n	8007cee <pow+0xa2>
 8007d08:	eeb0 0a48 	vmov.f32	s0, s16
 8007d0c:	eef0 0a68 	vmov.f32	s1, s17
 8007d10:	f000 fe27 	bl	8008962 <finite>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d0ea      	beq.n	8007cee <pow+0xa2>
 8007d18:	ec45 4b10 	vmov	d0, r4, r5
 8007d1c:	f000 fe21 	bl	8008962 <finite>
 8007d20:	e7c3      	b.n	8007caa <pow+0x5e>
 8007d22:	4f01      	ldr	r7, [pc, #4]	; (8007d28 <pow+0xdc>)
 8007d24:	2600      	movs	r6, #0
 8007d26:	e7e2      	b.n	8007cee <pow+0xa2>
 8007d28:	3ff00000 	.word	0x3ff00000
 8007d2c:	00000000 	.word	0x00000000

08007d30 <__ieee754_pow>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	ed2d 8b06 	vpush	{d8-d10}
 8007d38:	b089      	sub	sp, #36	; 0x24
 8007d3a:	ed8d 1b00 	vstr	d1, [sp]
 8007d3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007d42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007d46:	ea58 0102 	orrs.w	r1, r8, r2
 8007d4a:	ec57 6b10 	vmov	r6, r7, d0
 8007d4e:	d115      	bne.n	8007d7c <__ieee754_pow+0x4c>
 8007d50:	19b3      	adds	r3, r6, r6
 8007d52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007d56:	4152      	adcs	r2, r2
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	4b89      	ldr	r3, [pc, #548]	; (8007f80 <__ieee754_pow+0x250>)
 8007d5c:	4193      	sbcs	r3, r2
 8007d5e:	f080 84d2 	bcs.w	8008706 <__ieee754_pow+0x9d6>
 8007d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d66:	4630      	mov	r0, r6
 8007d68:	4639      	mov	r1, r7
 8007d6a:	f7f8 fa8f 	bl	800028c <__adddf3>
 8007d6e:	ec41 0b10 	vmov	d0, r0, r1
 8007d72:	b009      	add	sp, #36	; 0x24
 8007d74:	ecbd 8b06 	vpop	{d8-d10}
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	4b81      	ldr	r3, [pc, #516]	; (8007f84 <__ieee754_pow+0x254>)
 8007d7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007d82:	429c      	cmp	r4, r3
 8007d84:	ee10 aa10 	vmov	sl, s0
 8007d88:	463d      	mov	r5, r7
 8007d8a:	dc06      	bgt.n	8007d9a <__ieee754_pow+0x6a>
 8007d8c:	d101      	bne.n	8007d92 <__ieee754_pow+0x62>
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d1e7      	bne.n	8007d62 <__ieee754_pow+0x32>
 8007d92:	4598      	cmp	r8, r3
 8007d94:	dc01      	bgt.n	8007d9a <__ieee754_pow+0x6a>
 8007d96:	d10f      	bne.n	8007db8 <__ieee754_pow+0x88>
 8007d98:	b172      	cbz	r2, 8007db8 <__ieee754_pow+0x88>
 8007d9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007d9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007da2:	ea55 050a 	orrs.w	r5, r5, sl
 8007da6:	d1dc      	bne.n	8007d62 <__ieee754_pow+0x32>
 8007da8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dac:	18db      	adds	r3, r3, r3
 8007dae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007db2:	4152      	adcs	r2, r2
 8007db4:	429d      	cmp	r5, r3
 8007db6:	e7d0      	b.n	8007d5a <__ieee754_pow+0x2a>
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	da3b      	bge.n	8007e34 <__ieee754_pow+0x104>
 8007dbc:	4b72      	ldr	r3, [pc, #456]	; (8007f88 <__ieee754_pow+0x258>)
 8007dbe:	4598      	cmp	r8, r3
 8007dc0:	dc51      	bgt.n	8007e66 <__ieee754_pow+0x136>
 8007dc2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007dc6:	4598      	cmp	r8, r3
 8007dc8:	f340 84ac 	ble.w	8008724 <__ieee754_pow+0x9f4>
 8007dcc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007dd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007dd4:	2b14      	cmp	r3, #20
 8007dd6:	dd0f      	ble.n	8007df8 <__ieee754_pow+0xc8>
 8007dd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007ddc:	fa22 f103 	lsr.w	r1, r2, r3
 8007de0:	fa01 f303 	lsl.w	r3, r1, r3
 8007de4:	4293      	cmp	r3, r2
 8007de6:	f040 849d 	bne.w	8008724 <__ieee754_pow+0x9f4>
 8007dea:	f001 0101 	and.w	r1, r1, #1
 8007dee:	f1c1 0302 	rsb	r3, r1, #2
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	b182      	cbz	r2, 8007e18 <__ieee754_pow+0xe8>
 8007df6:	e05f      	b.n	8007eb8 <__ieee754_pow+0x188>
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	d15b      	bne.n	8007eb4 <__ieee754_pow+0x184>
 8007dfc:	f1c3 0314 	rsb	r3, r3, #20
 8007e00:	fa48 f103 	asr.w	r1, r8, r3
 8007e04:	fa01 f303 	lsl.w	r3, r1, r3
 8007e08:	4543      	cmp	r3, r8
 8007e0a:	f040 8488 	bne.w	800871e <__ieee754_pow+0x9ee>
 8007e0e:	f001 0101 	and.w	r1, r1, #1
 8007e12:	f1c1 0302 	rsb	r3, r1, #2
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	4b5c      	ldr	r3, [pc, #368]	; (8007f8c <__ieee754_pow+0x25c>)
 8007e1a:	4598      	cmp	r8, r3
 8007e1c:	d132      	bne.n	8007e84 <__ieee754_pow+0x154>
 8007e1e:	f1b9 0f00 	cmp.w	r9, #0
 8007e22:	f280 8478 	bge.w	8008716 <__ieee754_pow+0x9e6>
 8007e26:	4959      	ldr	r1, [pc, #356]	; (8007f8c <__ieee754_pow+0x25c>)
 8007e28:	4632      	mov	r2, r6
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f7f8 fd0d 	bl	800084c <__aeabi_ddiv>
 8007e32:	e79c      	b.n	8007d6e <__ieee754_pow+0x3e>
 8007e34:	2300      	movs	r3, #0
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d13d      	bne.n	8007eb8 <__ieee754_pow+0x188>
 8007e3c:	4b51      	ldr	r3, [pc, #324]	; (8007f84 <__ieee754_pow+0x254>)
 8007e3e:	4598      	cmp	r8, r3
 8007e40:	d1ea      	bne.n	8007e18 <__ieee754_pow+0xe8>
 8007e42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007e46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e4e:	f000 845a 	beq.w	8008706 <__ieee754_pow+0x9d6>
 8007e52:	4b4f      	ldr	r3, [pc, #316]	; (8007f90 <__ieee754_pow+0x260>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	dd08      	ble.n	8007e6a <__ieee754_pow+0x13a>
 8007e58:	f1b9 0f00 	cmp.w	r9, #0
 8007e5c:	f2c0 8457 	blt.w	800870e <__ieee754_pow+0x9de>
 8007e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e64:	e783      	b.n	8007d6e <__ieee754_pow+0x3e>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e7e5      	b.n	8007e36 <__ieee754_pow+0x106>
 8007e6a:	f1b9 0f00 	cmp.w	r9, #0
 8007e6e:	f04f 0000 	mov.w	r0, #0
 8007e72:	f04f 0100 	mov.w	r1, #0
 8007e76:	f6bf af7a 	bge.w	8007d6e <__ieee754_pow+0x3e>
 8007e7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007e7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e82:	e774      	b.n	8007d6e <__ieee754_pow+0x3e>
 8007e84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007e88:	d106      	bne.n	8007e98 <__ieee754_pow+0x168>
 8007e8a:	4632      	mov	r2, r6
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	4630      	mov	r0, r6
 8007e90:	4639      	mov	r1, r7
 8007e92:	f7f8 fbb1 	bl	80005f8 <__aeabi_dmul>
 8007e96:	e76a      	b.n	8007d6e <__ieee754_pow+0x3e>
 8007e98:	4b3e      	ldr	r3, [pc, #248]	; (8007f94 <__ieee754_pow+0x264>)
 8007e9a:	4599      	cmp	r9, r3
 8007e9c:	d10c      	bne.n	8007eb8 <__ieee754_pow+0x188>
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	db0a      	blt.n	8007eb8 <__ieee754_pow+0x188>
 8007ea2:	ec47 6b10 	vmov	d0, r6, r7
 8007ea6:	b009      	add	sp, #36	; 0x24
 8007ea8:	ecbd 8b06 	vpop	{d8-d10}
 8007eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	f000 bc6c 	b.w	800878c <__ieee754_sqrt>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9304      	str	r3, [sp, #16]
 8007eb8:	ec47 6b10 	vmov	d0, r6, r7
 8007ebc:	f000 fd48 	bl	8008950 <fabs>
 8007ec0:	ec51 0b10 	vmov	r0, r1, d0
 8007ec4:	f1ba 0f00 	cmp.w	sl, #0
 8007ec8:	d129      	bne.n	8007f1e <__ieee754_pow+0x1ee>
 8007eca:	b124      	cbz	r4, 8007ed6 <__ieee754_pow+0x1a6>
 8007ecc:	4b2f      	ldr	r3, [pc, #188]	; (8007f8c <__ieee754_pow+0x25c>)
 8007ece:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d123      	bne.n	8007f1e <__ieee754_pow+0x1ee>
 8007ed6:	f1b9 0f00 	cmp.w	r9, #0
 8007eda:	da05      	bge.n	8007ee8 <__ieee754_pow+0x1b8>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	492a      	ldr	r1, [pc, #168]	; (8007f8c <__ieee754_pow+0x25c>)
 8007ee4:	f7f8 fcb2 	bl	800084c <__aeabi_ddiv>
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	f6bf af40 	bge.w	8007d6e <__ieee754_pow+0x3e>
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007ef4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007ef8:	4323      	orrs	r3, r4
 8007efa:	d108      	bne.n	8007f0e <__ieee754_pow+0x1de>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4610      	mov	r0, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	f7f8 f9c0 	bl	8000288 <__aeabi_dsub>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	e78f      	b.n	8007e2e <__ieee754_pow+0xfe>
 8007f0e:	9b04      	ldr	r3, [sp, #16]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	f47f af2c 	bne.w	8007d6e <__ieee754_pow+0x3e>
 8007f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	e727      	b.n	8007d6e <__ieee754_pow+0x3e>
 8007f1e:	0feb      	lsrs	r3, r5, #31
 8007f20:	3b01      	subs	r3, #1
 8007f22:	9306      	str	r3, [sp, #24]
 8007f24:	9a06      	ldr	r2, [sp, #24]
 8007f26:	9b04      	ldr	r3, [sp, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	d102      	bne.n	8007f32 <__ieee754_pow+0x202>
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	463b      	mov	r3, r7
 8007f30:	e7e6      	b.n	8007f00 <__ieee754_pow+0x1d0>
 8007f32:	4b19      	ldr	r3, [pc, #100]	; (8007f98 <__ieee754_pow+0x268>)
 8007f34:	4598      	cmp	r8, r3
 8007f36:	f340 80fb 	ble.w	8008130 <__ieee754_pow+0x400>
 8007f3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f3e:	4598      	cmp	r8, r3
 8007f40:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <__ieee754_pow+0x260>)
 8007f42:	dd0c      	ble.n	8007f5e <__ieee754_pow+0x22e>
 8007f44:	429c      	cmp	r4, r3
 8007f46:	dc0f      	bgt.n	8007f68 <__ieee754_pow+0x238>
 8007f48:	f1b9 0f00 	cmp.w	r9, #0
 8007f4c:	da0f      	bge.n	8007f6e <__ieee754_pow+0x23e>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	b009      	add	sp, #36	; 0x24
 8007f52:	ecbd 8b06 	vpop	{d8-d10}
 8007f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5a:	f000 bcf0 	b.w	800893e <__math_oflow>
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	dbf2      	blt.n	8007f48 <__ieee754_pow+0x218>
 8007f62:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <__ieee754_pow+0x25c>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	dd19      	ble.n	8007f9c <__ieee754_pow+0x26c>
 8007f68:	f1b9 0f00 	cmp.w	r9, #0
 8007f6c:	dcef      	bgt.n	8007f4e <__ieee754_pow+0x21e>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	b009      	add	sp, #36	; 0x24
 8007f72:	ecbd 8b06 	vpop	{d8-d10}
 8007f76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	f000 bcd7 	b.w	800892c <__math_uflow>
 8007f7e:	bf00      	nop
 8007f80:	fff00000 	.word	0xfff00000
 8007f84:	7ff00000 	.word	0x7ff00000
 8007f88:	433fffff 	.word	0x433fffff
 8007f8c:	3ff00000 	.word	0x3ff00000
 8007f90:	3fefffff 	.word	0x3fefffff
 8007f94:	3fe00000 	.word	0x3fe00000
 8007f98:	41e00000 	.word	0x41e00000
 8007f9c:	4b60      	ldr	r3, [pc, #384]	; (8008120 <__ieee754_pow+0x3f0>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f7f8 f972 	bl	8000288 <__aeabi_dsub>
 8007fa4:	a354      	add	r3, pc, #336	; (adr r3, 80080f8 <__ieee754_pow+0x3c8>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	4604      	mov	r4, r0
 8007fac:	460d      	mov	r5, r1
 8007fae:	f7f8 fb23 	bl	80005f8 <__aeabi_dmul>
 8007fb2:	a353      	add	r3, pc, #332	; (adr r3, 8008100 <__ieee754_pow+0x3d0>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	4606      	mov	r6, r0
 8007fba:	460f      	mov	r7, r1
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 fb1a 	bl	80005f8 <__aeabi_dmul>
 8007fc4:	4b57      	ldr	r3, [pc, #348]	; (8008124 <__ieee754_pow+0x3f4>)
 8007fc6:	4682      	mov	sl, r0
 8007fc8:	468b      	mov	fp, r1
 8007fca:	2200      	movs	r2, #0
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	a14b      	add	r1, pc, #300	; (adr r1, 8008108 <__ieee754_pow+0x3d8>)
 8007fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fde:	f7f8 f953 	bl	8000288 <__aeabi_dsub>
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	f7f8 fb07 	bl	80005f8 <__aeabi_dmul>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	2000      	movs	r0, #0
 8007ff0:	494d      	ldr	r1, [pc, #308]	; (8008128 <__ieee754_pow+0x3f8>)
 8007ff2:	f7f8 f949 	bl	8000288 <__aeabi_dsub>
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	4689      	mov	r9, r1
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 faf9 	bl	80005f8 <__aeabi_dmul>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4640      	mov	r0, r8
 800800c:	4649      	mov	r1, r9
 800800e:	f7f8 faf3 	bl	80005f8 <__aeabi_dmul>
 8008012:	a33f      	add	r3, pc, #252	; (adr r3, 8008110 <__ieee754_pow+0x3e0>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 faee 	bl	80005f8 <__aeabi_dmul>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	f7f8 f930 	bl	8000288 <__aeabi_dsub>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4680      	mov	r8, r0
 800802e:	4689      	mov	r9, r1
 8008030:	4630      	mov	r0, r6
 8008032:	4639      	mov	r1, r7
 8008034:	f7f8 f92a 	bl	800028c <__adddf3>
 8008038:	2000      	movs	r0, #0
 800803a:	4632      	mov	r2, r6
 800803c:	463b      	mov	r3, r7
 800803e:	4604      	mov	r4, r0
 8008040:	460d      	mov	r5, r1
 8008042:	f7f8 f921 	bl	8000288 <__aeabi_dsub>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 f91b 	bl	8000288 <__aeabi_dsub>
 8008052:	9b04      	ldr	r3, [sp, #16]
 8008054:	9a06      	ldr	r2, [sp, #24]
 8008056:	3b01      	subs	r3, #1
 8008058:	4313      	orrs	r3, r2
 800805a:	4682      	mov	sl, r0
 800805c:	468b      	mov	fp, r1
 800805e:	f040 81e7 	bne.w	8008430 <__ieee754_pow+0x700>
 8008062:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008118 <__ieee754_pow+0x3e8>
 8008066:	eeb0 8a47 	vmov.f32	s16, s14
 800806a:	eef0 8a67 	vmov.f32	s17, s15
 800806e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008072:	2600      	movs	r6, #0
 8008074:	4632      	mov	r2, r6
 8008076:	463b      	mov	r3, r7
 8008078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800807c:	f7f8 f904 	bl	8000288 <__aeabi_dsub>
 8008080:	4622      	mov	r2, r4
 8008082:	462b      	mov	r3, r5
 8008084:	f7f8 fab8 	bl	80005f8 <__aeabi_dmul>
 8008088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800808c:	4680      	mov	r8, r0
 800808e:	4689      	mov	r9, r1
 8008090:	4650      	mov	r0, sl
 8008092:	4659      	mov	r1, fp
 8008094:	f7f8 fab0 	bl	80005f8 <__aeabi_dmul>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 f8f4 	bl	800028c <__adddf3>
 80080a4:	4632      	mov	r2, r6
 80080a6:	463b      	mov	r3, r7
 80080a8:	4680      	mov	r8, r0
 80080aa:	4689      	mov	r9, r1
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	f7f8 faa2 	bl	80005f8 <__aeabi_dmul>
 80080b4:	460b      	mov	r3, r1
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	4602      	mov	r2, r0
 80080bc:	4649      	mov	r1, r9
 80080be:	4640      	mov	r0, r8
 80080c0:	f7f8 f8e4 	bl	800028c <__adddf3>
 80080c4:	4b19      	ldr	r3, [pc, #100]	; (800812c <__ieee754_pow+0x3fc>)
 80080c6:	4299      	cmp	r1, r3
 80080c8:	ec45 4b19 	vmov	d9, r4, r5
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	468b      	mov	fp, r1
 80080d2:	f340 82f1 	ble.w	80086b8 <__ieee754_pow+0x988>
 80080d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80080da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80080de:	4303      	orrs	r3, r0
 80080e0:	f000 81e4 	beq.w	80084ac <__ieee754_pow+0x77c>
 80080e4:	ec51 0b18 	vmov	r0, r1, d8
 80080e8:	2200      	movs	r2, #0
 80080ea:	2300      	movs	r3, #0
 80080ec:	f7f8 fcf6 	bl	8000adc <__aeabi_dcmplt>
 80080f0:	3800      	subs	r0, #0
 80080f2:	bf18      	it	ne
 80080f4:	2001      	movne	r0, #1
 80080f6:	e72b      	b.n	8007f50 <__ieee754_pow+0x220>
 80080f8:	60000000 	.word	0x60000000
 80080fc:	3ff71547 	.word	0x3ff71547
 8008100:	f85ddf44 	.word	0xf85ddf44
 8008104:	3e54ae0b 	.word	0x3e54ae0b
 8008108:	55555555 	.word	0x55555555
 800810c:	3fd55555 	.word	0x3fd55555
 8008110:	652b82fe 	.word	0x652b82fe
 8008114:	3ff71547 	.word	0x3ff71547
 8008118:	00000000 	.word	0x00000000
 800811c:	bff00000 	.word	0xbff00000
 8008120:	3ff00000 	.word	0x3ff00000
 8008124:	3fd00000 	.word	0x3fd00000
 8008128:	3fe00000 	.word	0x3fe00000
 800812c:	408fffff 	.word	0x408fffff
 8008130:	4bd5      	ldr	r3, [pc, #852]	; (8008488 <__ieee754_pow+0x758>)
 8008132:	402b      	ands	r3, r5
 8008134:	2200      	movs	r2, #0
 8008136:	b92b      	cbnz	r3, 8008144 <__ieee754_pow+0x414>
 8008138:	4bd4      	ldr	r3, [pc, #848]	; (800848c <__ieee754_pow+0x75c>)
 800813a:	f7f8 fa5d 	bl	80005f8 <__aeabi_dmul>
 800813e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008142:	460c      	mov	r4, r1
 8008144:	1523      	asrs	r3, r4, #20
 8008146:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800814a:	4413      	add	r3, r2
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	4bd0      	ldr	r3, [pc, #832]	; (8008490 <__ieee754_pow+0x760>)
 8008150:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008154:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008158:	429c      	cmp	r4, r3
 800815a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800815e:	dd08      	ble.n	8008172 <__ieee754_pow+0x442>
 8008160:	4bcc      	ldr	r3, [pc, #816]	; (8008494 <__ieee754_pow+0x764>)
 8008162:	429c      	cmp	r4, r3
 8008164:	f340 8162 	ble.w	800842c <__ieee754_pow+0x6fc>
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	3301      	adds	r3, #1
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008172:	2400      	movs	r4, #0
 8008174:	00e3      	lsls	r3, r4, #3
 8008176:	9307      	str	r3, [sp, #28]
 8008178:	4bc7      	ldr	r3, [pc, #796]	; (8008498 <__ieee754_pow+0x768>)
 800817a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800817e:	ed93 7b00 	vldr	d7, [r3]
 8008182:	4629      	mov	r1, r5
 8008184:	ec53 2b17 	vmov	r2, r3, d7
 8008188:	eeb0 9a47 	vmov.f32	s18, s14
 800818c:	eef0 9a67 	vmov.f32	s19, s15
 8008190:	4682      	mov	sl, r0
 8008192:	f7f8 f879 	bl	8000288 <__aeabi_dsub>
 8008196:	4652      	mov	r2, sl
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	462b      	mov	r3, r5
 800819e:	ec51 0b19 	vmov	r0, r1, d9
 80081a2:	f7f8 f873 	bl	800028c <__adddf3>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	2000      	movs	r0, #0
 80081ac:	49bb      	ldr	r1, [pc, #748]	; (800849c <__ieee754_pow+0x76c>)
 80081ae:	f7f8 fb4d 	bl	800084c <__aeabi_ddiv>
 80081b2:	ec41 0b1a 	vmov	d10, r0, r1
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4630      	mov	r0, r6
 80081bc:	4639      	mov	r1, r7
 80081be:	f7f8 fa1b 	bl	80005f8 <__aeabi_dmul>
 80081c2:	2300      	movs	r3, #0
 80081c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80081ce:	46ab      	mov	fp, r5
 80081d0:	106d      	asrs	r5, r5, #1
 80081d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80081d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80081da:	ec41 0b18 	vmov	d8, r0, r1
 80081de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80081e2:	2200      	movs	r2, #0
 80081e4:	4640      	mov	r0, r8
 80081e6:	4649      	mov	r1, r9
 80081e8:	4614      	mov	r4, r2
 80081ea:	461d      	mov	r5, r3
 80081ec:	f7f8 fa04 	bl	80005f8 <__aeabi_dmul>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	f7f8 f846 	bl	8000288 <__aeabi_dsub>
 80081fc:	ec53 2b19 	vmov	r2, r3, d9
 8008200:	4606      	mov	r6, r0
 8008202:	460f      	mov	r7, r1
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	f7f8 f83e 	bl	8000288 <__aeabi_dsub>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4650      	mov	r0, sl
 8008212:	4659      	mov	r1, fp
 8008214:	f7f8 f838 	bl	8000288 <__aeabi_dsub>
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	f7f8 f9ec 	bl	80005f8 <__aeabi_dmul>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4630      	mov	r0, r6
 8008226:	4639      	mov	r1, r7
 8008228:	f7f8 f82e 	bl	8000288 <__aeabi_dsub>
 800822c:	ec53 2b1a 	vmov	r2, r3, d10
 8008230:	f7f8 f9e2 	bl	80005f8 <__aeabi_dmul>
 8008234:	ec53 2b18 	vmov	r2, r3, d8
 8008238:	ec41 0b19 	vmov	d9, r0, r1
 800823c:	ec51 0b18 	vmov	r0, r1, d8
 8008240:	f7f8 f9da 	bl	80005f8 <__aeabi_dmul>
 8008244:	a37c      	add	r3, pc, #496	; (adr r3, 8008438 <__ieee754_pow+0x708>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	4604      	mov	r4, r0
 800824c:	460d      	mov	r5, r1
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	a37b      	add	r3, pc, #492	; (adr r3, 8008440 <__ieee754_pow+0x710>)
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	f7f8 f818 	bl	800028c <__adddf3>
 800825c:	4622      	mov	r2, r4
 800825e:	462b      	mov	r3, r5
 8008260:	f7f8 f9ca 	bl	80005f8 <__aeabi_dmul>
 8008264:	a378      	add	r3, pc, #480	; (adr r3, 8008448 <__ieee754_pow+0x718>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 f80f 	bl	800028c <__adddf3>
 800826e:	4622      	mov	r2, r4
 8008270:	462b      	mov	r3, r5
 8008272:	f7f8 f9c1 	bl	80005f8 <__aeabi_dmul>
 8008276:	a376      	add	r3, pc, #472	; (adr r3, 8008450 <__ieee754_pow+0x720>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f7f8 f806 	bl	800028c <__adddf3>
 8008280:	4622      	mov	r2, r4
 8008282:	462b      	mov	r3, r5
 8008284:	f7f8 f9b8 	bl	80005f8 <__aeabi_dmul>
 8008288:	a373      	add	r3, pc, #460	; (adr r3, 8008458 <__ieee754_pow+0x728>)
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f7 fffd 	bl	800028c <__adddf3>
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	f7f8 f9af 	bl	80005f8 <__aeabi_dmul>
 800829a:	a371      	add	r3, pc, #452	; (adr r3, 8008460 <__ieee754_pow+0x730>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f7 fff4 	bl	800028c <__adddf3>
 80082a4:	4622      	mov	r2, r4
 80082a6:	4606      	mov	r6, r0
 80082a8:	460f      	mov	r7, r1
 80082aa:	462b      	mov	r3, r5
 80082ac:	4620      	mov	r0, r4
 80082ae:	4629      	mov	r1, r5
 80082b0:	f7f8 f9a2 	bl	80005f8 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4630      	mov	r0, r6
 80082ba:	4639      	mov	r1, r7
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	4642      	mov	r2, r8
 80082c2:	4604      	mov	r4, r0
 80082c4:	460d      	mov	r5, r1
 80082c6:	464b      	mov	r3, r9
 80082c8:	ec51 0b18 	vmov	r0, r1, d8
 80082cc:	f7f7 ffde 	bl	800028c <__adddf3>
 80082d0:	ec53 2b19 	vmov	r2, r3, d9
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	4622      	mov	r2, r4
 80082da:	462b      	mov	r3, r5
 80082dc:	f7f7 ffd6 	bl	800028c <__adddf3>
 80082e0:	4642      	mov	r2, r8
 80082e2:	4682      	mov	sl, r0
 80082e4:	468b      	mov	fp, r1
 80082e6:	464b      	mov	r3, r9
 80082e8:	4640      	mov	r0, r8
 80082ea:	4649      	mov	r1, r9
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	4b6b      	ldr	r3, [pc, #428]	; (80084a0 <__ieee754_pow+0x770>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	f7f7 ffc8 	bl	800028c <__adddf3>
 80082fc:	4652      	mov	r2, sl
 80082fe:	465b      	mov	r3, fp
 8008300:	f7f7 ffc4 	bl	800028c <__adddf3>
 8008304:	2000      	movs	r0, #0
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4640      	mov	r0, r8
 8008310:	4649      	mov	r1, r9
 8008312:	f7f8 f971 	bl	80005f8 <__aeabi_dmul>
 8008316:	4b62      	ldr	r3, [pc, #392]	; (80084a0 <__ieee754_pow+0x770>)
 8008318:	4680      	mov	r8, r0
 800831a:	4689      	mov	r9, r1
 800831c:	2200      	movs	r2, #0
 800831e:	4620      	mov	r0, r4
 8008320:	4629      	mov	r1, r5
 8008322:	f7f7 ffb1 	bl	8000288 <__aeabi_dsub>
 8008326:	4632      	mov	r2, r6
 8008328:	463b      	mov	r3, r7
 800832a:	f7f7 ffad 	bl	8000288 <__aeabi_dsub>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4650      	mov	r0, sl
 8008334:	4659      	mov	r1, fp
 8008336:	f7f7 ffa7 	bl	8000288 <__aeabi_dsub>
 800833a:	ec53 2b18 	vmov	r2, r3, d8
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	4622      	mov	r2, r4
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	462b      	mov	r3, r5
 800834a:	ec51 0b19 	vmov	r0, r1, d9
 800834e:	f7f8 f953 	bl	80005f8 <__aeabi_dmul>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4630      	mov	r0, r6
 8008358:	4639      	mov	r1, r7
 800835a:	f7f7 ff97 	bl	800028c <__adddf3>
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4640      	mov	r0, r8
 8008368:	4649      	mov	r1, r9
 800836a:	f7f7 ff8f 	bl	800028c <__adddf3>
 800836e:	a33e      	add	r3, pc, #248	; (adr r3, 8008468 <__ieee754_pow+0x738>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	2000      	movs	r0, #0
 8008376:	4604      	mov	r4, r0
 8008378:	460d      	mov	r5, r1
 800837a:	f7f8 f93d 	bl	80005f8 <__aeabi_dmul>
 800837e:	4642      	mov	r2, r8
 8008380:	ec41 0b18 	vmov	d8, r0, r1
 8008384:	464b      	mov	r3, r9
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	f7f7 ff7d 	bl	8000288 <__aeabi_dsub>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f7 ff77 	bl	8000288 <__aeabi_dsub>
 800839a:	a335      	add	r3, pc, #212	; (adr r3, 8008470 <__ieee754_pow+0x740>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f7f8 f92a 	bl	80005f8 <__aeabi_dmul>
 80083a4:	a334      	add	r3, pc, #208	; (adr r3, 8008478 <__ieee754_pow+0x748>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	4606      	mov	r6, r0
 80083ac:	460f      	mov	r7, r1
 80083ae:	4620      	mov	r0, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	f7f8 f921 	bl	80005f8 <__aeabi_dmul>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4630      	mov	r0, r6
 80083bc:	4639      	mov	r1, r7
 80083be:	f7f7 ff65 	bl	800028c <__adddf3>
 80083c2:	9a07      	ldr	r2, [sp, #28]
 80083c4:	4b37      	ldr	r3, [pc, #220]	; (80084a4 <__ieee754_pow+0x774>)
 80083c6:	4413      	add	r3, r2
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f7 ff5e 	bl	800028c <__adddf3>
 80083d0:	4682      	mov	sl, r0
 80083d2:	9805      	ldr	r0, [sp, #20]
 80083d4:	468b      	mov	fp, r1
 80083d6:	f7f8 f8a5 	bl	8000524 <__aeabi_i2d>
 80083da:	9a07      	ldr	r2, [sp, #28]
 80083dc:	4b32      	ldr	r3, [pc, #200]	; (80084a8 <__ieee754_pow+0x778>)
 80083de:	4413      	add	r3, r2
 80083e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	4652      	mov	r2, sl
 80083ea:	465b      	mov	r3, fp
 80083ec:	ec51 0b18 	vmov	r0, r1, d8
 80083f0:	f7f7 ff4c 	bl	800028c <__adddf3>
 80083f4:	4642      	mov	r2, r8
 80083f6:	464b      	mov	r3, r9
 80083f8:	f7f7 ff48 	bl	800028c <__adddf3>
 80083fc:	4632      	mov	r2, r6
 80083fe:	463b      	mov	r3, r7
 8008400:	f7f7 ff44 	bl	800028c <__adddf3>
 8008404:	2000      	movs	r0, #0
 8008406:	4632      	mov	r2, r6
 8008408:	463b      	mov	r3, r7
 800840a:	4604      	mov	r4, r0
 800840c:	460d      	mov	r5, r1
 800840e:	f7f7 ff3b 	bl	8000288 <__aeabi_dsub>
 8008412:	4642      	mov	r2, r8
 8008414:	464b      	mov	r3, r9
 8008416:	f7f7 ff37 	bl	8000288 <__aeabi_dsub>
 800841a:	ec53 2b18 	vmov	r2, r3, d8
 800841e:	f7f7 ff33 	bl	8000288 <__aeabi_dsub>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4650      	mov	r0, sl
 8008428:	4659      	mov	r1, fp
 800842a:	e610      	b.n	800804e <__ieee754_pow+0x31e>
 800842c:	2401      	movs	r4, #1
 800842e:	e6a1      	b.n	8008174 <__ieee754_pow+0x444>
 8008430:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008480 <__ieee754_pow+0x750>
 8008434:	e617      	b.n	8008066 <__ieee754_pow+0x336>
 8008436:	bf00      	nop
 8008438:	4a454eef 	.word	0x4a454eef
 800843c:	3fca7e28 	.word	0x3fca7e28
 8008440:	93c9db65 	.word	0x93c9db65
 8008444:	3fcd864a 	.word	0x3fcd864a
 8008448:	a91d4101 	.word	0xa91d4101
 800844c:	3fd17460 	.word	0x3fd17460
 8008450:	518f264d 	.word	0x518f264d
 8008454:	3fd55555 	.word	0x3fd55555
 8008458:	db6fabff 	.word	0xdb6fabff
 800845c:	3fdb6db6 	.word	0x3fdb6db6
 8008460:	33333303 	.word	0x33333303
 8008464:	3fe33333 	.word	0x3fe33333
 8008468:	e0000000 	.word	0xe0000000
 800846c:	3feec709 	.word	0x3feec709
 8008470:	dc3a03fd 	.word	0xdc3a03fd
 8008474:	3feec709 	.word	0x3feec709
 8008478:	145b01f5 	.word	0x145b01f5
 800847c:	be3e2fe0 	.word	0xbe3e2fe0
 8008480:	00000000 	.word	0x00000000
 8008484:	3ff00000 	.word	0x3ff00000
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	43400000 	.word	0x43400000
 8008490:	0003988e 	.word	0x0003988e
 8008494:	000bb679 	.word	0x000bb679
 8008498:	08008c78 	.word	0x08008c78
 800849c:	3ff00000 	.word	0x3ff00000
 80084a0:	40080000 	.word	0x40080000
 80084a4:	08008c98 	.word	0x08008c98
 80084a8:	08008c88 	.word	0x08008c88
 80084ac:	a3b5      	add	r3, pc, #724	; (adr r3, 8008784 <__ieee754_pow+0xa54>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	4640      	mov	r0, r8
 80084b4:	4649      	mov	r1, r9
 80084b6:	f7f7 fee9 	bl	800028c <__adddf3>
 80084ba:	4622      	mov	r2, r4
 80084bc:	ec41 0b1a 	vmov	d10, r0, r1
 80084c0:	462b      	mov	r3, r5
 80084c2:	4630      	mov	r0, r6
 80084c4:	4639      	mov	r1, r7
 80084c6:	f7f7 fedf 	bl	8000288 <__aeabi_dsub>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	ec51 0b1a 	vmov	r0, r1, d10
 80084d2:	f7f8 fb21 	bl	8000b18 <__aeabi_dcmpgt>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f47f ae04 	bne.w	80080e4 <__ieee754_pow+0x3b4>
 80084dc:	4aa4      	ldr	r2, [pc, #656]	; (8008770 <__ieee754_pow+0xa40>)
 80084de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f340 8108 	ble.w	80086f8 <__ieee754_pow+0x9c8>
 80084e8:	151b      	asrs	r3, r3, #20
 80084ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80084ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80084f2:	fa4a f303 	asr.w	r3, sl, r3
 80084f6:	445b      	add	r3, fp
 80084f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80084fc:	4e9d      	ldr	r6, [pc, #628]	; (8008774 <__ieee754_pow+0xa44>)
 80084fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008502:	4116      	asrs	r6, r2
 8008504:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008508:	2000      	movs	r0, #0
 800850a:	ea23 0106 	bic.w	r1, r3, r6
 800850e:	f1c2 0214 	rsb	r2, r2, #20
 8008512:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008516:	fa4a fa02 	asr.w	sl, sl, r2
 800851a:	f1bb 0f00 	cmp.w	fp, #0
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4620      	mov	r0, r4
 8008524:	4629      	mov	r1, r5
 8008526:	bfb8      	it	lt
 8008528:	f1ca 0a00 	rsblt	sl, sl, #0
 800852c:	f7f7 feac 	bl	8000288 <__aeabi_dsub>
 8008530:	ec41 0b19 	vmov	d9, r0, r1
 8008534:	4642      	mov	r2, r8
 8008536:	464b      	mov	r3, r9
 8008538:	ec51 0b19 	vmov	r0, r1, d9
 800853c:	f7f7 fea6 	bl	800028c <__adddf3>
 8008540:	a37b      	add	r3, pc, #492	; (adr r3, 8008730 <__ieee754_pow+0xa00>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	2000      	movs	r0, #0
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	f7f8 f854 	bl	80005f8 <__aeabi_dmul>
 8008550:	ec53 2b19 	vmov	r2, r3, d9
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	4620      	mov	r0, r4
 800855a:	4629      	mov	r1, r5
 800855c:	f7f7 fe94 	bl	8000288 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f7 fe8e 	bl	8000288 <__aeabi_dsub>
 800856c:	a372      	add	r3, pc, #456	; (adr r3, 8008738 <__ieee754_pow+0xa08>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f8 f841 	bl	80005f8 <__aeabi_dmul>
 8008576:	a372      	add	r3, pc, #456	; (adr r3, 8008740 <__ieee754_pow+0xa10>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	4680      	mov	r8, r0
 800857e:	4689      	mov	r9, r1
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	f7f8 f838 	bl	80005f8 <__aeabi_dmul>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4640      	mov	r0, r8
 800858e:	4649      	mov	r1, r9
 8008590:	f7f7 fe7c 	bl	800028c <__adddf3>
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f7 fe74 	bl	800028c <__adddf3>
 80085a4:	4632      	mov	r2, r6
 80085a6:	463b      	mov	r3, r7
 80085a8:	4680      	mov	r8, r0
 80085aa:	4689      	mov	r9, r1
 80085ac:	f7f7 fe6c 	bl	8000288 <__aeabi_dsub>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4620      	mov	r0, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	f7f7 fe66 	bl	8000288 <__aeabi_dsub>
 80085bc:	4642      	mov	r2, r8
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	464b      	mov	r3, r9
 80085c4:	4640      	mov	r0, r8
 80085c6:	4649      	mov	r1, r9
 80085c8:	f7f8 f816 	bl	80005f8 <__aeabi_dmul>
 80085cc:	a35e      	add	r3, pc, #376	; (adr r3, 8008748 <__ieee754_pow+0xa18>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	4604      	mov	r4, r0
 80085d4:	460d      	mov	r5, r1
 80085d6:	f7f8 f80f 	bl	80005f8 <__aeabi_dmul>
 80085da:	a35d      	add	r3, pc, #372	; (adr r3, 8008750 <__ieee754_pow+0xa20>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f7 fe52 	bl	8000288 <__aeabi_dsub>
 80085e4:	4622      	mov	r2, r4
 80085e6:	462b      	mov	r3, r5
 80085e8:	f7f8 f806 	bl	80005f8 <__aeabi_dmul>
 80085ec:	a35a      	add	r3, pc, #360	; (adr r3, 8008758 <__ieee754_pow+0xa28>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fe4b 	bl	800028c <__adddf3>
 80085f6:	4622      	mov	r2, r4
 80085f8:	462b      	mov	r3, r5
 80085fa:	f7f7 fffd 	bl	80005f8 <__aeabi_dmul>
 80085fe:	a358      	add	r3, pc, #352	; (adr r3, 8008760 <__ieee754_pow+0xa30>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f7 fe40 	bl	8000288 <__aeabi_dsub>
 8008608:	4622      	mov	r2, r4
 800860a:	462b      	mov	r3, r5
 800860c:	f7f7 fff4 	bl	80005f8 <__aeabi_dmul>
 8008610:	a355      	add	r3, pc, #340	; (adr r3, 8008768 <__ieee754_pow+0xa38>)
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	f7f7 fe39 	bl	800028c <__adddf3>
 800861a:	4622      	mov	r2, r4
 800861c:	462b      	mov	r3, r5
 800861e:	f7f7 ffeb 	bl	80005f8 <__aeabi_dmul>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4640      	mov	r0, r8
 8008628:	4649      	mov	r1, r9
 800862a:	f7f7 fe2d 	bl	8000288 <__aeabi_dsub>
 800862e:	4604      	mov	r4, r0
 8008630:	460d      	mov	r5, r1
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4640      	mov	r0, r8
 8008638:	4649      	mov	r1, r9
 800863a:	f7f7 ffdd 	bl	80005f8 <__aeabi_dmul>
 800863e:	2200      	movs	r2, #0
 8008640:	ec41 0b19 	vmov	d9, r0, r1
 8008644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008648:	4620      	mov	r0, r4
 800864a:	4629      	mov	r1, r5
 800864c:	f7f7 fe1c 	bl	8000288 <__aeabi_dsub>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	ec51 0b19 	vmov	r0, r1, d9
 8008658:	f7f8 f8f8 	bl	800084c <__aeabi_ddiv>
 800865c:	4632      	mov	r2, r6
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	463b      	mov	r3, r7
 8008664:	4640      	mov	r0, r8
 8008666:	4649      	mov	r1, r9
 8008668:	f7f7 ffc6 	bl	80005f8 <__aeabi_dmul>
 800866c:	4632      	mov	r2, r6
 800866e:	463b      	mov	r3, r7
 8008670:	f7f7 fe0c 	bl	800028c <__adddf3>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4620      	mov	r0, r4
 800867a:	4629      	mov	r1, r5
 800867c:	f7f7 fe04 	bl	8000288 <__aeabi_dsub>
 8008680:	4642      	mov	r2, r8
 8008682:	464b      	mov	r3, r9
 8008684:	f7f7 fe00 	bl	8000288 <__aeabi_dsub>
 8008688:	460b      	mov	r3, r1
 800868a:	4602      	mov	r2, r0
 800868c:	493a      	ldr	r1, [pc, #232]	; (8008778 <__ieee754_pow+0xa48>)
 800868e:	2000      	movs	r0, #0
 8008690:	f7f7 fdfa 	bl	8000288 <__aeabi_dsub>
 8008694:	ec41 0b10 	vmov	d0, r0, r1
 8008698:	ee10 3a90 	vmov	r3, s1
 800869c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80086a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086a4:	da2b      	bge.n	80086fe <__ieee754_pow+0x9ce>
 80086a6:	4650      	mov	r0, sl
 80086a8:	f000 f966 	bl	8008978 <scalbn>
 80086ac:	ec51 0b10 	vmov	r0, r1, d0
 80086b0:	ec53 2b18 	vmov	r2, r3, d8
 80086b4:	f7ff bbed 	b.w	8007e92 <__ieee754_pow+0x162>
 80086b8:	4b30      	ldr	r3, [pc, #192]	; (800877c <__ieee754_pow+0xa4c>)
 80086ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80086be:	429e      	cmp	r6, r3
 80086c0:	f77f af0c 	ble.w	80084dc <__ieee754_pow+0x7ac>
 80086c4:	4b2e      	ldr	r3, [pc, #184]	; (8008780 <__ieee754_pow+0xa50>)
 80086c6:	440b      	add	r3, r1
 80086c8:	4303      	orrs	r3, r0
 80086ca:	d009      	beq.n	80086e0 <__ieee754_pow+0x9b0>
 80086cc:	ec51 0b18 	vmov	r0, r1, d8
 80086d0:	2200      	movs	r2, #0
 80086d2:	2300      	movs	r3, #0
 80086d4:	f7f8 fa02 	bl	8000adc <__aeabi_dcmplt>
 80086d8:	3800      	subs	r0, #0
 80086da:	bf18      	it	ne
 80086dc:	2001      	movne	r0, #1
 80086de:	e447      	b.n	8007f70 <__ieee754_pow+0x240>
 80086e0:	4622      	mov	r2, r4
 80086e2:	462b      	mov	r3, r5
 80086e4:	f7f7 fdd0 	bl	8000288 <__aeabi_dsub>
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	f7f8 fa0a 	bl	8000b04 <__aeabi_dcmpge>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	f43f aef3 	beq.w	80084dc <__ieee754_pow+0x7ac>
 80086f6:	e7e9      	b.n	80086cc <__ieee754_pow+0x99c>
 80086f8:	f04f 0a00 	mov.w	sl, #0
 80086fc:	e71a      	b.n	8008534 <__ieee754_pow+0x804>
 80086fe:	ec51 0b10 	vmov	r0, r1, d0
 8008702:	4619      	mov	r1, r3
 8008704:	e7d4      	b.n	80086b0 <__ieee754_pow+0x980>
 8008706:	491c      	ldr	r1, [pc, #112]	; (8008778 <__ieee754_pow+0xa48>)
 8008708:	2000      	movs	r0, #0
 800870a:	f7ff bb30 	b.w	8007d6e <__ieee754_pow+0x3e>
 800870e:	2000      	movs	r0, #0
 8008710:	2100      	movs	r1, #0
 8008712:	f7ff bb2c 	b.w	8007d6e <__ieee754_pow+0x3e>
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7ff bb28 	b.w	8007d6e <__ieee754_pow+0x3e>
 800871e:	9204      	str	r2, [sp, #16]
 8008720:	f7ff bb7a 	b.w	8007e18 <__ieee754_pow+0xe8>
 8008724:	2300      	movs	r3, #0
 8008726:	f7ff bb64 	b.w	8007df2 <__ieee754_pow+0xc2>
 800872a:	bf00      	nop
 800872c:	f3af 8000 	nop.w
 8008730:	00000000 	.word	0x00000000
 8008734:	3fe62e43 	.word	0x3fe62e43
 8008738:	fefa39ef 	.word	0xfefa39ef
 800873c:	3fe62e42 	.word	0x3fe62e42
 8008740:	0ca86c39 	.word	0x0ca86c39
 8008744:	be205c61 	.word	0xbe205c61
 8008748:	72bea4d0 	.word	0x72bea4d0
 800874c:	3e663769 	.word	0x3e663769
 8008750:	c5d26bf1 	.word	0xc5d26bf1
 8008754:	3ebbbd41 	.word	0x3ebbbd41
 8008758:	af25de2c 	.word	0xaf25de2c
 800875c:	3f11566a 	.word	0x3f11566a
 8008760:	16bebd93 	.word	0x16bebd93
 8008764:	3f66c16c 	.word	0x3f66c16c
 8008768:	5555553e 	.word	0x5555553e
 800876c:	3fc55555 	.word	0x3fc55555
 8008770:	3fe00000 	.word	0x3fe00000
 8008774:	000fffff 	.word	0x000fffff
 8008778:	3ff00000 	.word	0x3ff00000
 800877c:	4090cbff 	.word	0x4090cbff
 8008780:	3f6f3400 	.word	0x3f6f3400
 8008784:	652b82fe 	.word	0x652b82fe
 8008788:	3c971547 	.word	0x3c971547

0800878c <__ieee754_sqrt>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	ec55 4b10 	vmov	r4, r5, d0
 8008794:	4e55      	ldr	r6, [pc, #340]	; (80088ec <__ieee754_sqrt+0x160>)
 8008796:	43ae      	bics	r6, r5
 8008798:	ee10 0a10 	vmov	r0, s0
 800879c:	ee10 3a10 	vmov	r3, s0
 80087a0:	462a      	mov	r2, r5
 80087a2:	4629      	mov	r1, r5
 80087a4:	d110      	bne.n	80087c8 <__ieee754_sqrt+0x3c>
 80087a6:	ee10 2a10 	vmov	r2, s0
 80087aa:	462b      	mov	r3, r5
 80087ac:	f7f7 ff24 	bl	80005f8 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4620      	mov	r0, r4
 80087b6:	4629      	mov	r1, r5
 80087b8:	f7f7 fd68 	bl	800028c <__adddf3>
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	ec45 4b10 	vmov	d0, r4, r5
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	dc10      	bgt.n	80087ee <__ieee754_sqrt+0x62>
 80087cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80087d0:	4330      	orrs	r0, r6
 80087d2:	d0f5      	beq.n	80087c0 <__ieee754_sqrt+0x34>
 80087d4:	b15d      	cbz	r5, 80087ee <__ieee754_sqrt+0x62>
 80087d6:	ee10 2a10 	vmov	r2, s0
 80087da:	462b      	mov	r3, r5
 80087dc:	ee10 0a10 	vmov	r0, s0
 80087e0:	f7f7 fd52 	bl	8000288 <__aeabi_dsub>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	f7f8 f830 	bl	800084c <__aeabi_ddiv>
 80087ec:	e7e6      	b.n	80087bc <__ieee754_sqrt+0x30>
 80087ee:	1512      	asrs	r2, r2, #20
 80087f0:	d074      	beq.n	80088dc <__ieee754_sqrt+0x150>
 80087f2:	07d4      	lsls	r4, r2, #31
 80087f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80087f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80087fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008800:	bf5e      	ittt	pl
 8008802:	0fda      	lsrpl	r2, r3, #31
 8008804:	005b      	lslpl	r3, r3, #1
 8008806:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800880a:	2400      	movs	r4, #0
 800880c:	0fda      	lsrs	r2, r3, #31
 800880e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008812:	107f      	asrs	r7, r7, #1
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	2516      	movs	r5, #22
 8008818:	4620      	mov	r0, r4
 800881a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800881e:	1886      	adds	r6, r0, r2
 8008820:	428e      	cmp	r6, r1
 8008822:	bfde      	ittt	le
 8008824:	1b89      	suble	r1, r1, r6
 8008826:	18b0      	addle	r0, r6, r2
 8008828:	18a4      	addle	r4, r4, r2
 800882a:	0049      	lsls	r1, r1, #1
 800882c:	3d01      	subs	r5, #1
 800882e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008832:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008836:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800883a:	d1f0      	bne.n	800881e <__ieee754_sqrt+0x92>
 800883c:	462a      	mov	r2, r5
 800883e:	f04f 0e20 	mov.w	lr, #32
 8008842:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008846:	4281      	cmp	r1, r0
 8008848:	eb06 0c05 	add.w	ip, r6, r5
 800884c:	dc02      	bgt.n	8008854 <__ieee754_sqrt+0xc8>
 800884e:	d113      	bne.n	8008878 <__ieee754_sqrt+0xec>
 8008850:	459c      	cmp	ip, r3
 8008852:	d811      	bhi.n	8008878 <__ieee754_sqrt+0xec>
 8008854:	f1bc 0f00 	cmp.w	ip, #0
 8008858:	eb0c 0506 	add.w	r5, ip, r6
 800885c:	da43      	bge.n	80088e6 <__ieee754_sqrt+0x15a>
 800885e:	2d00      	cmp	r5, #0
 8008860:	db41      	blt.n	80088e6 <__ieee754_sqrt+0x15a>
 8008862:	f100 0801 	add.w	r8, r0, #1
 8008866:	1a09      	subs	r1, r1, r0
 8008868:	459c      	cmp	ip, r3
 800886a:	bf88      	it	hi
 800886c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008870:	eba3 030c 	sub.w	r3, r3, ip
 8008874:	4432      	add	r2, r6
 8008876:	4640      	mov	r0, r8
 8008878:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800887c:	f1be 0e01 	subs.w	lr, lr, #1
 8008880:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008884:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008888:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800888c:	d1db      	bne.n	8008846 <__ieee754_sqrt+0xba>
 800888e:	430b      	orrs	r3, r1
 8008890:	d006      	beq.n	80088a0 <__ieee754_sqrt+0x114>
 8008892:	1c50      	adds	r0, r2, #1
 8008894:	bf13      	iteet	ne
 8008896:	3201      	addne	r2, #1
 8008898:	3401      	addeq	r4, #1
 800889a:	4672      	moveq	r2, lr
 800889c:	f022 0201 	bicne.w	r2, r2, #1
 80088a0:	1063      	asrs	r3, r4, #1
 80088a2:	0852      	lsrs	r2, r2, #1
 80088a4:	07e1      	lsls	r1, r4, #31
 80088a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80088aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80088ae:	bf48      	it	mi
 80088b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80088b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80088b8:	4614      	mov	r4, r2
 80088ba:	e781      	b.n	80087c0 <__ieee754_sqrt+0x34>
 80088bc:	0ad9      	lsrs	r1, r3, #11
 80088be:	3815      	subs	r0, #21
 80088c0:	055b      	lsls	r3, r3, #21
 80088c2:	2900      	cmp	r1, #0
 80088c4:	d0fa      	beq.n	80088bc <__ieee754_sqrt+0x130>
 80088c6:	02cd      	lsls	r5, r1, #11
 80088c8:	d50a      	bpl.n	80088e0 <__ieee754_sqrt+0x154>
 80088ca:	f1c2 0420 	rsb	r4, r2, #32
 80088ce:	fa23 f404 	lsr.w	r4, r3, r4
 80088d2:	1e55      	subs	r5, r2, #1
 80088d4:	4093      	lsls	r3, r2
 80088d6:	4321      	orrs	r1, r4
 80088d8:	1b42      	subs	r2, r0, r5
 80088da:	e78a      	b.n	80087f2 <__ieee754_sqrt+0x66>
 80088dc:	4610      	mov	r0, r2
 80088de:	e7f0      	b.n	80088c2 <__ieee754_sqrt+0x136>
 80088e0:	0049      	lsls	r1, r1, #1
 80088e2:	3201      	adds	r2, #1
 80088e4:	e7ef      	b.n	80088c6 <__ieee754_sqrt+0x13a>
 80088e6:	4680      	mov	r8, r0
 80088e8:	e7bd      	b.n	8008866 <__ieee754_sqrt+0xda>
 80088ea:	bf00      	nop
 80088ec:	7ff00000 	.word	0x7ff00000

080088f0 <with_errno>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	4604      	mov	r4, r0
 80088f4:	460d      	mov	r5, r1
 80088f6:	4616      	mov	r6, r2
 80088f8:	f7fd feee 	bl	80066d8 <__errno>
 80088fc:	4629      	mov	r1, r5
 80088fe:	6006      	str	r6, [r0, #0]
 8008900:	4620      	mov	r0, r4
 8008902:	bd70      	pop	{r4, r5, r6, pc}

08008904 <xflow>:
 8008904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008906:	4614      	mov	r4, r2
 8008908:	461d      	mov	r5, r3
 800890a:	b108      	cbz	r0, 8008910 <xflow+0xc>
 800890c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008910:	e9cd 2300 	strd	r2, r3, [sp]
 8008914:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008918:	4620      	mov	r0, r4
 800891a:	4629      	mov	r1, r5
 800891c:	f7f7 fe6c 	bl	80005f8 <__aeabi_dmul>
 8008920:	2222      	movs	r2, #34	; 0x22
 8008922:	b003      	add	sp, #12
 8008924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008928:	f7ff bfe2 	b.w	80088f0 <with_errno>

0800892c <__math_uflow>:
 800892c:	b508      	push	{r3, lr}
 800892e:	2200      	movs	r2, #0
 8008930:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008934:	f7ff ffe6 	bl	8008904 <xflow>
 8008938:	ec41 0b10 	vmov	d0, r0, r1
 800893c:	bd08      	pop	{r3, pc}

0800893e <__math_oflow>:
 800893e:	b508      	push	{r3, lr}
 8008940:	2200      	movs	r2, #0
 8008942:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008946:	f7ff ffdd 	bl	8008904 <xflow>
 800894a:	ec41 0b10 	vmov	d0, r0, r1
 800894e:	bd08      	pop	{r3, pc}

08008950 <fabs>:
 8008950:	ec51 0b10 	vmov	r0, r1, d0
 8008954:	ee10 2a10 	vmov	r2, s0
 8008958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800895c:	ec43 2b10 	vmov	d0, r2, r3
 8008960:	4770      	bx	lr

08008962 <finite>:
 8008962:	b082      	sub	sp, #8
 8008964:	ed8d 0b00 	vstr	d0, [sp]
 8008968:	9801      	ldr	r0, [sp, #4]
 800896a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800896e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008972:	0fc0      	lsrs	r0, r0, #31
 8008974:	b002      	add	sp, #8
 8008976:	4770      	bx	lr

08008978 <scalbn>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	ec55 4b10 	vmov	r4, r5, d0
 800897e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008982:	4606      	mov	r6, r0
 8008984:	462b      	mov	r3, r5
 8008986:	b99a      	cbnz	r2, 80089b0 <scalbn+0x38>
 8008988:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800898c:	4323      	orrs	r3, r4
 800898e:	d036      	beq.n	80089fe <scalbn+0x86>
 8008990:	4b39      	ldr	r3, [pc, #228]	; (8008a78 <scalbn+0x100>)
 8008992:	4629      	mov	r1, r5
 8008994:	ee10 0a10 	vmov	r0, s0
 8008998:	2200      	movs	r2, #0
 800899a:	f7f7 fe2d 	bl	80005f8 <__aeabi_dmul>
 800899e:	4b37      	ldr	r3, [pc, #220]	; (8008a7c <scalbn+0x104>)
 80089a0:	429e      	cmp	r6, r3
 80089a2:	4604      	mov	r4, r0
 80089a4:	460d      	mov	r5, r1
 80089a6:	da10      	bge.n	80089ca <scalbn+0x52>
 80089a8:	a32b      	add	r3, pc, #172	; (adr r3, 8008a58 <scalbn+0xe0>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	e03a      	b.n	8008a26 <scalbn+0xae>
 80089b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80089b4:	428a      	cmp	r2, r1
 80089b6:	d10c      	bne.n	80089d2 <scalbn+0x5a>
 80089b8:	ee10 2a10 	vmov	r2, s0
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 fc64 	bl	800028c <__adddf3>
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	e019      	b.n	80089fe <scalbn+0x86>
 80089ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80089ce:	460b      	mov	r3, r1
 80089d0:	3a36      	subs	r2, #54	; 0x36
 80089d2:	4432      	add	r2, r6
 80089d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80089d8:	428a      	cmp	r2, r1
 80089da:	dd08      	ble.n	80089ee <scalbn+0x76>
 80089dc:	2d00      	cmp	r5, #0
 80089de:	a120      	add	r1, pc, #128	; (adr r1, 8008a60 <scalbn+0xe8>)
 80089e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e4:	da1c      	bge.n	8008a20 <scalbn+0xa8>
 80089e6:	a120      	add	r1, pc, #128	; (adr r1, 8008a68 <scalbn+0xf0>)
 80089e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ec:	e018      	b.n	8008a20 <scalbn+0xa8>
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	dd08      	ble.n	8008a04 <scalbn+0x8c>
 80089f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089fe:	ec45 4b10 	vmov	d0, r4, r5
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008a08:	da19      	bge.n	8008a3e <scalbn+0xc6>
 8008a0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a0e:	429e      	cmp	r6, r3
 8008a10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008a14:	dd0a      	ble.n	8008a2c <scalbn+0xb4>
 8008a16:	a112      	add	r1, pc, #72	; (adr r1, 8008a60 <scalbn+0xe8>)
 8008a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e2      	bne.n	80089e6 <scalbn+0x6e>
 8008a20:	a30f      	add	r3, pc, #60	; (adr r3, 8008a60 <scalbn+0xe8>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fde7 	bl	80005f8 <__aeabi_dmul>
 8008a2a:	e7cb      	b.n	80089c4 <scalbn+0x4c>
 8008a2c:	a10a      	add	r1, pc, #40	; (adr r1, 8008a58 <scalbn+0xe0>)
 8008a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0b8      	beq.n	80089a8 <scalbn+0x30>
 8008a36:	a10e      	add	r1, pc, #56	; (adr r1, 8008a70 <scalbn+0xf8>)
 8008a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3c:	e7b4      	b.n	80089a8 <scalbn+0x30>
 8008a3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a42:	3236      	adds	r2, #54	; 0x36
 8008a44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <scalbn+0x108>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	e7e8      	b.n	8008a26 <scalbn+0xae>
 8008a54:	f3af 8000 	nop.w
 8008a58:	c2f8f359 	.word	0xc2f8f359
 8008a5c:	01a56e1f 	.word	0x01a56e1f
 8008a60:	8800759c 	.word	0x8800759c
 8008a64:	7e37e43c 	.word	0x7e37e43c
 8008a68:	8800759c 	.word	0x8800759c
 8008a6c:	fe37e43c 	.word	0xfe37e43c
 8008a70:	c2f8f359 	.word	0xc2f8f359
 8008a74:	81a56e1f 	.word	0x81a56e1f
 8008a78:	43500000 	.word	0x43500000
 8008a7c:	ffff3cb0 	.word	0xffff3cb0
 8008a80:	3c900000 	.word	0x3c900000

08008a84 <_sbrk>:
 8008a84:	4a04      	ldr	r2, [pc, #16]	; (8008a98 <_sbrk+0x14>)
 8008a86:	6811      	ldr	r1, [r2, #0]
 8008a88:	4603      	mov	r3, r0
 8008a8a:	b909      	cbnz	r1, 8008a90 <_sbrk+0xc>
 8008a8c:	4903      	ldr	r1, [pc, #12]	; (8008a9c <_sbrk+0x18>)
 8008a8e:	6011      	str	r1, [r2, #0]
 8008a90:	6810      	ldr	r0, [r2, #0]
 8008a92:	4403      	add	r3, r0
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	4770      	bx	lr
 8008a98:	20012f94 	.word	0x20012f94
 8008a9c:	20012f98 	.word	0x20012f98

08008aa0 <_init>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr

08008aac <_fini>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr
