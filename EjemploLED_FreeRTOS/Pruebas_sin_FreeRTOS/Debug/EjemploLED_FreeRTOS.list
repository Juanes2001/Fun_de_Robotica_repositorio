
EjemploLED_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c1c  08005c1c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005c1c  08005c1c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c1c  08005c1c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a8  20000014  08005c38  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144bc  08005c38  000244bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2eb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe7  00000000  00000000  0002d32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012335  00000000  00000000  00030860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd1a  00000000  00000000  00042b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006487b  00000000  00000000  0004f8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b412a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db4  00000000  00000000  000b417c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005af0 	.word	0x08005af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005af0 	.word	0x08005af0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ee8 	.word	0x20012ee8

08000274 <main>:
TaskHandle_t xHandleTask2 = NULL;

extern void SEGGER_UART_init(uint32_t);

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
 	SCB -> CPACR |= (0xF << 20);
 800027a:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <main+0x84>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	4a1d      	ldr	r2, [pc, #116]	; (80002f8 <main+0x84>)
 8000282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000286:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <main+0x88>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a1b      	ldr	r2, [pc, #108]	; (80002fc <main+0x88>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]

	// Configuracion de orden de prioridad
	vInitPrioGroupValue();
 8000296:	f002 fc37 	bl	8002b08 <vInitPrioGroupValue>
//

   	SEGGER_UART_init(500000);
 800029a:	4819      	ldr	r0, [pc, #100]	; (8000300 <main+0x8c>)
 800029c:	f003 f9c0 	bl	8003620 <SEGGER_UART_init>
//	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 80002a0:	f002 ffe8 	bl	8003274 <SEGGER_SYSVIEW_Conf>
//	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();


	inSystem ();
 80002a4:	f000 f83c 	bl	8000320 <inSystem>

	BaseType_t xReturned;

	xReturned = xTaskCreate(
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <main+0x90>)
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	2302      	movs	r3, #2
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2300      	movs	r3, #0
 80002b2:	22c8      	movs	r2, #200	; 0xc8
 80002b4:	4914      	ldr	r1, [pc, #80]	; (8000308 <main+0x94>)
 80002b6:	4815      	ldr	r0, [pc, #84]	; (800030c <main+0x98>)
 80002b8:	f000 ff72 	bl	80011a0 <xTaskCreate>
 80002bc:	6078      	str	r0, [r7, #4]
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1 );      /* Used to pass out the created task's handle. */


	 configASSERT( xReturned == pdPASS );
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d00a      	beq.n	80002da <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002c8:	f383 8811 	msr	BASEPRI, r3
 80002cc:	f3bf 8f6f 	isb	sy
 80002d0:	f3bf 8f4f 	dsb	sy
 80002d4:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002d6:	bf00      	nop
 80002d8:	e7fe      	b.n	80002d8 <main+0x64>

	 xReturned = xTaskCreate(
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <main+0x9c>)
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2302      	movs	r3, #2
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <main+0xa0>)
 80002e4:	22c8      	movs	r2, #200	; 0xc8
 80002e6:	490c      	ldr	r1, [pc, #48]	; (8000318 <main+0xa4>)
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <main+0xa8>)
 80002ea:	f000 ff59 	bl	80011a0 <xTaskCreate>
 80002ee:	6078      	str	r0, [r7, #4]
	 	                    2,/* Priority at which the task is created. */
	 	                    &xHandleTask2 );      /* Used to pass out the created task's handle. */


	 /* Start the created tasks running. */
	 vTaskStartScheduler();
 80002f0:	f001 f8f2 	bl	80014d8 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 80002f4:	e7fe      	b.n	80002f4 <main+0x80>
 80002f6:	bf00      	nop
 80002f8:	e000ed00 	.word	0xe000ed00
 80002fc:	e0001000 	.word	0xe0001000
 8000300:	0007a120 	.word	0x0007a120
 8000304:	2000008c 	.word	0x2000008c
 8000308:	08005b08 	.word	0x08005b08
 800030c:	08000491 	.word	0x08000491
 8000310:	20000090 	.word	0x20000090
 8000314:	08005b10 	.word	0x08005b10
 8000318:	08005b1c 	.word	0x08005b1c
 800031c:	080004e5 	.word	0x080004e5

08000320 <inSystem>:

	}
}


void inSystem (void){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0



	RCC_enableMaxFrequencies();
 8000324:	f005 fb08 	bl	8005938 <RCC_enableMaxFrequencies>
	//Descripción de la configuración
	show_MaxFreq ();
 8000328:	f005 fb76 	bl	8005a18 <show_MaxFreq>


	//Config del pin A8 salida de la velocidad del micro

	handlerMCO1Show.pGPIOx                             = GPIOA;
 800032c:	4b4e      	ldr	r3, [pc, #312]	; (8000468 <inSystem+0x148>)
 800032e:	4a4f      	ldr	r2, [pc, #316]	; (800046c <inSystem+0x14c>)
 8000330:	601a      	str	r2, [r3, #0]
	handlerMCO1Show.GPIO_PinConfig.GPIO_PinNumber      = PIN_8 ;
 8000332:	4b4d      	ldr	r3, [pc, #308]	; (8000468 <inSystem+0x148>)
 8000334:	2208      	movs	r2, #8
 8000336:	711a      	strb	r2, [r3, #4]
	handlerMCO1Show.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8000338:	4b4b      	ldr	r3, [pc, #300]	; (8000468 <inSystem+0x148>)
 800033a:	2200      	movs	r2, #0
 800033c:	725a      	strb	r2, [r3, #9]
	handlerMCO1Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800033e:	4b4a      	ldr	r3, [pc, #296]	; (8000468 <inSystem+0x148>)
 8000340:	2202      	movs	r2, #2
 8000342:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerMCO1Show);
 8000344:	4848      	ldr	r0, [pc, #288]	; (8000468 <inSystem+0x148>)
 8000346:	f005 f81b 	bl	8005380 <GPIO_Config>

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 800034a:	4b49      	ldr	r3, [pc, #292]	; (8000470 <inSystem+0x150>)
 800034c:	4a47      	ldr	r2, [pc, #284]	; (800046c <inSystem+0x14c>)
 800034e:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000350:	4b47      	ldr	r3, [pc, #284]	; (8000470 <inSystem+0x150>)
 8000352:	2200      	movs	r2, #0
 8000354:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000356:	4b46      	ldr	r3, [pc, #280]	; (8000470 <inSystem+0x150>)
 8000358:	2201      	movs	r2, #1
 800035a:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 800035c:	4b44      	ldr	r3, [pc, #272]	; (8000470 <inSystem+0x150>)
 800035e:	2200      	movs	r2, #0
 8000360:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000362:	4b43      	ldr	r3, [pc, #268]	; (8000470 <inSystem+0x150>)
 8000364:	2205      	movs	r2, #5
 8000366:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000368:	4b41      	ldr	r3, [pc, #260]	; (8000470 <inSystem+0x150>)
 800036a:	2200      	movs	r2, #0
 800036c:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 800036e:	4b40      	ldr	r3, [pc, #256]	; (8000470 <inSystem+0x150>)
 8000370:	2202      	movs	r2, #2
 8000372:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000374:	483e      	ldr	r0, [pc, #248]	; (8000470 <inSystem+0x150>)
 8000376:	f005 f803 	bl	8005380 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 800037a:	2101      	movs	r1, #1
 800037c:	483c      	ldr	r0, [pc, #240]	; (8000470 <inSystem+0x150>)
 800037e:	f005 f929 	bl	80055d4 <GPIO_WritePin>


	//User Button
	handlerUserButton.pGPIOx = GPIOC;
 8000382:	4b3c      	ldr	r3, [pc, #240]	; (8000474 <inSystem+0x154>)
 8000384:	4a3c      	ldr	r2, [pc, #240]	; (8000478 <inSystem+0x158>)
 8000386:	601a      	str	r2, [r3, #0]
	handlerUserButton.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000388:	4b3a      	ldr	r3, [pc, #232]	; (8000474 <inSystem+0x154>)
 800038a:	2200      	movs	r2, #0
 800038c:	725a      	strb	r2, [r3, #9]
	handlerUserButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800038e:	4b39      	ldr	r3, [pc, #228]	; (8000474 <inSystem+0x154>)
 8000390:	2200      	movs	r2, #0
 8000392:	715a      	strb	r2, [r3, #5]
	handlerUserButton.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 8000394:	4b37      	ldr	r3, [pc, #220]	; (8000474 <inSystem+0x154>)
 8000396:	220d      	movs	r2, #13
 8000398:	711a      	strb	r2, [r3, #4]
	handlerUserButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800039a:	4b36      	ldr	r3, [pc, #216]	; (8000474 <inSystem+0x154>)
 800039c:	2200      	movs	r2, #0
 800039e:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerUserButton);
 80003a0:	4834      	ldr	r0, [pc, #208]	; (8000474 <inSystem+0x154>)
 80003a2:	f004 ffed 	bl	8005380 <GPIO_Config>

	//PWM

	handlerPinPwm_1.pGPIOx                             = GPIOC;
 80003a6:	4b35      	ldr	r3, [pc, #212]	; (800047c <inSystem+0x15c>)
 80003a8:	4a33      	ldr	r2, [pc, #204]	; (8000478 <inSystem+0x158>)
 80003aa:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80003ac:	4b33      	ldr	r3, [pc, #204]	; (800047c <inSystem+0x15c>)
 80003ae:	2202      	movs	r2, #2
 80003b0:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80003b2:	4b32      	ldr	r3, [pc, #200]	; (800047c <inSystem+0x15c>)
 80003b4:	2202      	movs	r2, #2
 80003b6:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80003b8:	4b30      	ldr	r3, [pc, #192]	; (800047c <inSystem+0x15c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_7;
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <inSystem+0x15c>)
 80003c0:	2207      	movs	r2, #7
 80003c2:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <inSystem+0x15c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80003ca:	4b2c      	ldr	r3, [pc, #176]	; (800047c <inSystem+0x15c>)
 80003cc:	2202      	movs	r2, #2
 80003ce:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 80003d0:	482a      	ldr	r0, [pc, #168]	; (800047c <inSystem+0x15c>)
 80003d2:	f004 ffd5 	bl	8005380 <GPIO_Config>

	handlerPWM_1.ptrTIMx           = TIM3;
 80003d6:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <inSystem+0x160>)
 80003d8:	4a2a      	ldr	r2, [pc, #168]	; (8000484 <inSystem+0x164>)
 80003da:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel    = PWM_CHANNEL_2;
 80003dc:	4b28      	ldr	r3, [pc, #160]	; (8000480 <inSystem+0x160>)
 80003de:	2201      	movs	r2, #1
 80003e0:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle = 100;
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <inSystem+0x160>)
 80003e4:	2264      	movs	r2, #100	; 0x64
 80003e6:	81da      	strh	r2, [r3, #14]
	handlerPWM_1.config.periodo    = 100;
 80003e8:	4b25      	ldr	r3, [pc, #148]	; (8000480 <inSystem+0x160>)
 80003ea:	2264      	movs	r2, #100	; 0x64
 80003ec:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler  = BTIMER_SPEED_100us;
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <inSystem+0x160>)
 80003f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80003f4:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity   = PWM_ENABLE_POLARITY;
 80003f6:	4b22      	ldr	r3, [pc, #136]	; (8000480 <inSystem+0x160>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	741a      	strb	r2, [r3, #16]
	pwm_Config(&handlerPWM_1);
 80003fc:	4820      	ldr	r0, [pc, #128]	; (8000480 <inSystem+0x160>)
 80003fe:	f005 f94f 	bl	80056a0 <pwm_Config>

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <inSystem+0x168>)
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <inSystem+0x14c>)
 8000406:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000408:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <inSystem+0x168>)
 800040a:	2207      	movs	r2, #7
 800040c:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <inSystem+0x168>)
 8000410:	2202      	movs	r2, #2
 8000412:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <inSystem+0x168>)
 8000416:	2200      	movs	r2, #0
 8000418:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <inSystem+0x168>)
 800041c:	2202      	movs	r2, #2
 800041e:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <inSystem+0x168>)
 8000422:	2200      	movs	r2, #0
 8000424:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <inSystem+0x168>)
 8000428:	2202      	movs	r2, #2
 800042a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 800042c:	4816      	ldr	r0, [pc, #88]	; (8000488 <inSystem+0x168>)
 800042e:	f004 ffa7 	bl	8005380 <GPIO_Config>


	handlerPinRx.pGPIOx                             = GPIOA;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <inSystem+0x16c>)
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <inSystem+0x14c>)
 8000436:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <inSystem+0x16c>)
 800043a:	2207      	movs	r2, #7
 800043c:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <inSystem+0x16c>)
 8000440:	2202      	movs	r2, #2
 8000442:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <inSystem+0x16c>)
 8000446:	2200      	movs	r2, #0
 8000448:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <inSystem+0x16c>)
 800044c:	2203      	movs	r2, #3
 800044e:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <inSystem+0x16c>)
 8000452:	2200      	movs	r2, #0
 8000454:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <inSystem+0x16c>)
 8000458:	2202      	movs	r2, #2
 800045a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 800045c:	480b      	ldr	r0, [pc, #44]	; (800048c <inSystem+0x16c>)
 800045e:	f004 ff8f 	bl	8005380 <GPIO_Config>





}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000006c 	.word	0x2000006c
 800046c:	40020000 	.word	0x40020000
 8000470:	20000030 	.word	0x20000030
 8000474:	2000003c 	.word	0x2000003c
 8000478:	40020800 	.word	0x40020800
 800047c:	20000048 	.word	0x20000048
 8000480:	20000078 	.word	0x20000078
 8000484:	40000400 	.word	0x40000400
 8000488:	20000060 	.word	0x20000060
 800048c:	20000054 	.word	0x20000054

08000490 <vTaskOne>:



void vTaskOne( void * pvParameters )
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af02      	add	r7, sp, #8
 8000496:	6078      	str	r0, [r7, #4]

	BaseType_t notify_state ={0};
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
	uint8_t flag = RESET;
 800049c:	2300      	movs	r3, #0
 800049e:	72fb      	strb	r3, [r7, #11]

   while(1){
	   //printf("%s\n",((char*) pvParameters));
	   if (notify_state == pdTRUE){
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d106      	bne.n	80004b4 <vTaskOne+0x24>
		   flag = !flag;
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	72fb      	strb	r3, [r7, #11]
   	   //vTaskDelay((pdMS_TO_TICKS(100)));
	   }

	   if (flag){
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d003      	beq.n	80004c2 <vTaskOne+0x32>
		   GPIOxTooglePin(&handlerPinA5);
 80004ba:	4809      	ldr	r0, [pc, #36]	; (80004e0 <vTaskOne+0x50>)
 80004bc:	f005 f8d6 	bl	800566c <GPIOxTooglePin>
 80004c0:	e003      	b.n	80004ca <vTaskOne+0x3a>
	   }
	   else{

		   GPIO_WritePin(&handlerPinA5, RESET);
 80004c2:	2100      	movs	r1, #0
 80004c4:	4806      	ldr	r0, [pc, #24]	; (80004e0 <vTaskOne+0x50>)
 80004c6:	f005 f885 	bl	80055d4 <GPIO_WritePin>
	   }

	   notify_state = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(100));
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2300      	movs	r3, #0
 80004d0:	2200      	movs	r2, #0
 80004d2:	2100      	movs	r1, #0
 80004d4:	2000      	movs	r0, #0
 80004d6:	f001 fce7 	bl	8001ea8 <xTaskGenericNotifyWait>
 80004da:	60f8      	str	r0, [r7, #12]
	   if (notify_state == pdTRUE){
 80004dc:	e7e0      	b.n	80004a0 <vTaskOne+0x10>
 80004de:	bf00      	nop
 80004e0:	20000030 	.word	0x20000030

080004e4 <vTaskTwo>:
	   //taskYIELD();
   }
}

void vTaskTwo( void * pvParameters )
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	6078      	str	r0, [r7, #4]

	uint8_t button_state = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_button_state = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]

   while(1){
//	   printf("%s\n",((char*) pvParameters));
	   button_state = GPIO_ReadPin(&handlerUserButton);
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <vTaskTwo+0x44>)
 80004f6:	f005 f898 	bl	800562a <GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	73bb      	strb	r3, [r7, #14]

	   if (button_state){
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00b      	beq.n	800051c <vTaskTwo+0x38>
		   if (!prev_button_state){
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d108      	bne.n	800051c <vTaskTwo+0x38>
			   //Notificacion
			   xTaskNotify(xHandleTask1,0,eNoAction);
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <vTaskTwo+0x48>)
 800050c:	6818      	ldr	r0, [r3, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	f001 fd4e 	bl	8001fb8 <xTaskGenericNotify>

		   }
	   }

	   prev_button_state = button_state;
 800051c:	7bbb      	ldrb	r3, [r7, #14]
 800051e:	73fb      	strb	r3, [r7, #15]

	   vTaskDelay((pdMS_TO_TICKS(10)));
 8000520:	200a      	movs	r0, #10
 8000522:	f000 ffa1 	bl	8001468 <vTaskDelay>
	   button_state = GPIO_ReadPin(&handlerUserButton);
 8000526:	e7e5      	b.n	80004f4 <vTaskTwo+0x10>
 8000528:	2000003c 	.word	0x2000003c
 800052c:	2000008c 	.word	0x2000008c

08000530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000532:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000534:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	; (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	; (800057c <LoopForever+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055e:	f005 fa7d 	bl	8005a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff fe87 	bl	8000274 <main>

08000566 <LoopForever>:

LoopForever:
    b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000574:	08005c24 	.word	0x08005c24
  ldr r2, =_sbss
 8000578:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800057c:	200144bc 	.word	0x200144bc

08000580 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC_IRQHandler>

08000582 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f103 0208 	add.w	r2, r3, #8
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800059a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f103 0208 	add.w	r2, r3, #8
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800063a:	d103      	bne.n	8000644 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e00c      	b.n	800065e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3308      	adds	r3, #8
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e002      	b.n	8000652 <vListInsert+0x2e>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	429a      	cmp	r2, r3
 800065c:	d2f6      	bcs.n	800064c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000696:	b480      	push	{r7}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6892      	ldr	r2, [r2, #8]
 80006ac:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	6852      	ldr	r2, [r2, #4]
 80006b6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d103      	bne.n	80006ca <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10a      	bne.n	8000716 <xQueueGenericReset+0x2a>
        __asm volatile
 8000700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000704:	f383 8811 	msr	BASEPRI, r3
 8000708:	f3bf 8f6f 	isb	sy
 800070c:	f3bf 8f4f 	dsb	sy
 8000710:	60bb      	str	r3, [r7, #8]
    }
 8000712:	bf00      	nop
 8000714:	e7fe      	b.n	8000714 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000716:	f002 fa75 	bl	8002c04 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000722:	68f9      	ldr	r1, [r7, #12]
 8000724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000726:	fb01 f303 	mul.w	r3, r1, r3
 800072a:	441a      	add	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2200      	movs	r2, #0
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000746:	3b01      	subs	r3, #1
 8000748:	68f9      	ldr	r1, [r7, #12]
 800074a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	441a      	add	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d114      	bne.n	8000796 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01a      	beq.n	80007aa <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3310      	adds	r3, #16
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f957 	bl	8001a2c <xTaskRemoveFromEventList>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d012      	beq.n	80007aa <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <xQueueGenericReset+0xcc>)
 8000786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	e009      	b.n	80007aa <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3310      	adds	r3, #16
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fef1 	bl	8000582 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3324      	adds	r3, #36	; 0x24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff feec 	bl	8000582 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007aa:	f002 fa5b 	bl	8002c64 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	e000ed04 	.word	0xe000ed04

080007bc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10a      	bne.n	80007e6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	61bb      	str	r3, [r7, #24]
    }
 80007e2:	bf00      	nop
 80007e4:	e7fe      	b.n	80007e4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <xQueueGenericCreate+0x48>
 80007f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d101      	bne.n	8000808 <xQueueGenericCreate+0x4c>
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <xQueueGenericCreate+0x4e>
 8000808:	2300      	movs	r3, #0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10a      	bne.n	8000824 <xQueueGenericCreate+0x68>
        __asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	617b      	str	r3, [r7, #20]
    }
 8000820:	bf00      	nop
 8000822:	e7fe      	b.n	8000822 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800082a:	d90a      	bls.n	8000842 <xQueueGenericCreate+0x86>
        __asm volatile
 800082c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000830:	f383 8811 	msr	BASEPRI, r3
 8000834:	f3bf 8f6f 	isb	sy
 8000838:	f3bf 8f4f 	dsb	sy
 800083c:	613b      	str	r3, [r7, #16]
    }
 800083e:	bf00      	nop
 8000840:	e7fe      	b.n	8000840 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	3350      	adds	r3, #80	; 0x50
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fb08 	bl	8002e5c <pvPortMalloc>
 800084c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00d      	beq.n	8000870 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	3350      	adds	r3, #80	; 0x50
 800085c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4613      	mov	r3, r2
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 f805 	bl	800087a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000870:	6a3b      	ldr	r3, [r7, #32]
    }
 8000872:	4618      	mov	r0, r3
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e002      	b.n	800089c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008a8:	2101      	movs	r1, #1
 80008aa:	69b8      	ldr	r0, [r7, #24]
 80008ac:	f7ff ff1e 	bl	80006ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	78fa      	ldrb	r2, [r7, #3]
 80008b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	68f9      	ldr	r1, [r7, #12]
 80008be:	2073      	movs	r0, #115	; 0x73
 80008c0:	f003 fe5a 	bl	8004578 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	; 0x40
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10a      	bne.n	80008fe <xQueueGenericSend+0x32>
        __asm volatile
 80008e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ec:	f383 8811 	msr	BASEPRI, r3
 80008f0:	f3bf 8f6f 	isb	sy
 80008f4:	f3bf 8f4f 	dsb	sy
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80008fa:	bf00      	nop
 80008fc:	e7fe      	b.n	80008fc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d103      	bne.n	800090c <xQueueGenericSend+0x40>
 8000904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <xQueueGenericSend+0x44>
 800090c:	2301      	movs	r3, #1
 800090e:	e000      	b.n	8000912 <xQueueGenericSend+0x46>
 8000910:	2300      	movs	r3, #0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10a      	bne.n	800092c <xQueueGenericSend+0x60>
        __asm volatile
 8000916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091a:	f383 8811 	msr	BASEPRI, r3
 800091e:	f3bf 8f6f 	isb	sy
 8000922:	f3bf 8f4f 	dsb	sy
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000928:	bf00      	nop
 800092a:	e7fe      	b.n	800092a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d103      	bne.n	800093a <xQueueGenericSend+0x6e>
 8000932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000936:	2b01      	cmp	r3, #1
 8000938:	d101      	bne.n	800093e <xQueueGenericSend+0x72>
 800093a:	2301      	movs	r3, #1
 800093c:	e000      	b.n	8000940 <xQueueGenericSend+0x74>
 800093e:	2300      	movs	r3, #0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10a      	bne.n	800095a <xQueueGenericSend+0x8e>
        __asm volatile
 8000944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000948:	f383 8811 	msr	BASEPRI, r3
 800094c:	f3bf 8f6f 	isb	sy
 8000950:	f3bf 8f4f 	dsb	sy
 8000954:	623b      	str	r3, [r7, #32]
    }
 8000956:	bf00      	nop
 8000958:	e7fe      	b.n	8000958 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800095a:	f001 fa07 	bl	8001d6c <xTaskGetSchedulerState>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <xQueueGenericSend+0x9e>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <xQueueGenericSend+0xa2>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <xQueueGenericSend+0xa4>
 800096e:	2300      	movs	r3, #0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10a      	bne.n	800098a <xQueueGenericSend+0xbe>
        __asm volatile
 8000974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000978:	f383 8811 	msr	BASEPRI, r3
 800097c:	f3bf 8f6f 	isb	sy
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	61fb      	str	r3, [r7, #28]
    }
 8000986:	bf00      	nop
 8000988:	e7fe      	b.n	8000988 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800098a:	f002 f93b 	bl	8002c04 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000996:	429a      	cmp	r2, r3
 8000998:	d302      	bcc.n	80009a0 <xQueueGenericSend+0xd4>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d136      	bne.n	8000a0e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80009a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 fb76 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	460b      	mov	r3, r1
 80009b2:	4601      	mov	r1, r0
 80009b4:	205a      	movs	r0, #90	; 0x5a
 80009b6:	f003 fe55 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009c0:	f000 fa78 	bl	8000eb4 <prvCopyDataToQueue>
 80009c4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d010      	beq.n	80009f0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d0:	3324      	adds	r3, #36	; 0x24
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f82a 	bl	8001a2c <xTaskRemoveFromEventList>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d013      	beq.n	8000a06 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009de:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <xQueueGenericSend+0x248>)
 80009e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	f3bf 8f4f 	dsb	sy
 80009ea:	f3bf 8f6f 	isb	sy
 80009ee:	e00a      	b.n	8000a06 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d007      	beq.n	8000a06 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009f6:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <xQueueGenericSend+0x248>)
 80009f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	f3bf 8f4f 	dsb	sy
 8000a02:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a06:	f002 f92d 	bl	8002c64 <vPortExitCritical>
                return pdPASS;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e07d      	b.n	8000b0a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d110      	bne.n	8000a36 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a14:	f002 f926 	bl	8002c64 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fb3a 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	4601      	mov	r1, r0
 8000a2c:	205a      	movs	r0, #90	; 0x5a
 8000a2e:	f003 fe19 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e069      	b.n	8000b0a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d106      	bne.n	8000a4a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f859 	bl	8001af8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a46:	2301      	movs	r3, #1
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a4a:	f002 f90b 	bl	8002c64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a4e:	f000 fda5 	bl	800159c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a52:	f002 f8d7 	bl	8002c04 <vPortEnterCritical>
 8000a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a62:	d103      	bne.n	8000a6c <xQueueGenericSend+0x1a0>
 8000a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a78:	d103      	bne.n	8000a82 <xQueueGenericSend+0x1b6>
 8000a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a82:	f002 f8ef 	bl	8002c64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a86:	1d3a      	adds	r2, r7, #4
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f848 	bl	8001b24 <xTaskCheckForTimeOut>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d124      	bne.n	8000ae4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a9c:	f000 fb02 	bl	80010a4 <prvIsQueueFull>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d018      	beq.n	8000ad8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa8:	3310      	adds	r3, #16
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 ff6a 	bl	8001988 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ab6:	f000 fa8d 	bl	8000fd4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aba:	f000 fd7d 	bl	80015b8 <xTaskResumeAll>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f47f af62 	bne.w	800098a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <xQueueGenericSend+0x248>)
 8000ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	f3bf 8f4f 	dsb	sy
 8000ad2:	f3bf 8f6f 	isb	sy
 8000ad6:	e758      	b.n	800098a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ada:	f000 fa7b 	bl	8000fd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ade:	f000 fd6b 	bl	80015b8 <xTaskResumeAll>
 8000ae2:	e752      	b.n	800098a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ae6:	f000 fa75 	bl	8000fd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aea:	f000 fd65 	bl	80015b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 facf 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	460b      	mov	r3, r1
 8000b00:	4601      	mov	r1, r0
 8000b02:	205a      	movs	r0, #90	; 0x5a
 8000b04:	f003 fdae 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000b08:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3738      	adds	r7, #56	; 0x38
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000ed04 	.word	0xe000ed04

08000b18 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b090      	sub	sp, #64	; 0x40
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10a      	bne.n	8000b46 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b34:	f383 8811 	msr	BASEPRI, r3
 8000b38:	f3bf 8f6f 	isb	sy
 8000b3c:	f3bf 8f4f 	dsb	sy
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000b42:	bf00      	nop
 8000b44:	e7fe      	b.n	8000b44 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <xQueueGenericSendFromISR+0x3c>
 8000b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <xQueueGenericSendFromISR+0x40>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <xQueueGenericSendFromISR+0x42>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10a      	bne.n	8000b74 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b62:	f383 8811 	msr	BASEPRI, r3
 8000b66:	f3bf 8f6f 	isb	sy
 8000b6a:	f3bf 8f4f 	dsb	sy
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b70:	bf00      	nop
 8000b72:	e7fe      	b.n	8000b72 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d103      	bne.n	8000b82 <xQueueGenericSendFromISR+0x6a>
 8000b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d101      	bne.n	8000b86 <xQueueGenericSendFromISR+0x6e>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <xQueueGenericSendFromISR+0x70>
 8000b86:	2300      	movs	r3, #0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10a      	bne.n	8000ba2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b90:	f383 8811 	msr	BASEPRI, r3
 8000b94:	f3bf 8f6f 	isb	sy
 8000b98:	f3bf 8f4f 	dsb	sy
 8000b9c:	623b      	str	r3, [r7, #32]
    }
 8000b9e:	bf00      	nop
 8000ba0:	e7fe      	b.n	8000ba0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ba2:	f002 f91b 	bl	8002ddc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8000baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bae:	f383 8811 	msr	BASEPRI, r3
 8000bb2:	f3bf 8f6f 	isb	sy
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	61fa      	str	r2, [r7, #28]
 8000bbc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d302      	bcc.n	8000bd4 <xQueueGenericSendFromISR+0xbc>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d148      	bne.n	8000c66 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 fa54 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000bec:	4601      	mov	r1, r0
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2060      	movs	r0, #96	; 0x60
 8000bf4:	f003 fc66 	bl	80044c4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000bfe:	f000 f959 	bl	8000eb4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000c02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c0a:	d112      	bne.n	8000c32 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d025      	beq.n	8000c60 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c16:	3324      	adds	r3, #36	; 0x24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 ff07 	bl	8001a2c <xTaskRemoveFromEventList>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d01d      	beq.n	8000c60 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d01a      	beq.n	8000c60 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e016      	b.n	8000c60 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000c32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000c36:	2b7f      	cmp	r3, #127	; 0x7f
 8000c38:	d10a      	bne.n	8000c50 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3e:	f383 8811 	msr	BASEPRI, r3
 8000c42:	f3bf 8f6f 	isb	sy
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	617b      	str	r3, [r7, #20]
    }
 8000c4c:	bf00      	nop
 8000c4e:	e7fe      	b.n	8000c4e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c54:	3301      	adds	r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c60:	2301      	movs	r3, #1
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c64:	e00b      	b.n	8000c7e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 fa13 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000c6e:	4601      	mov	r1, r0
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2060      	movs	r0, #96	; 0x60
 8000c76:	f003 fc25 	bl	80044c4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c80:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c88:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3740      	adds	r7, #64	; 0x40
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b08f      	sub	sp, #60	; 0x3c
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10a      	bne.n	8000cc4 <xQueueReceive+0x30>
        __asm volatile
 8000cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	623b      	str	r3, [r7, #32]
    }
 8000cc0:	bf00      	nop
 8000cc2:	e7fe      	b.n	8000cc2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d103      	bne.n	8000cd2 <xQueueReceive+0x3e>
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <xQueueReceive+0x42>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <xQueueReceive+0x44>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10a      	bne.n	8000cf2 <xQueueReceive+0x5e>
        __asm volatile
 8000cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	f3bf 8f6f 	isb	sy
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	61fb      	str	r3, [r7, #28]
    }
 8000cee:	bf00      	nop
 8000cf0:	e7fe      	b.n	8000cf0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cf2:	f001 f83b 	bl	8001d6c <xTaskGetSchedulerState>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <xQueueReceive+0x6e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <xQueueReceive+0x72>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <xQueueReceive+0x74>
 8000d06:	2300      	movs	r3, #0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10a      	bne.n	8000d22 <xQueueReceive+0x8e>
        __asm volatile
 8000d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d10:	f383 8811 	msr	BASEPRI, r3
 8000d14:	f3bf 8f6f 	isb	sy
 8000d18:	f3bf 8f4f 	dsb	sy
 8000d1c:	61bb      	str	r3, [r7, #24]
    }
 8000d1e:	bf00      	nop
 8000d20:	e7fe      	b.n	8000d20 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d22:	f001 ff6f 	bl	8002c04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d02f      	beq.n	8000d92 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d36:	f000 f927 	bl	8000f88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 f9a9 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000d42:	4604      	mov	r4, r0
 8000d44:	2000      	movs	r0, #0
 8000d46:	f004 f9a5 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	9100      	str	r1, [sp, #0]
 8000d52:	4621      	mov	r1, r4
 8000d54:	205c      	movs	r0, #92	; 0x5c
 8000d56:	f003 fc85 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	1e5a      	subs	r2, r3, #1
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00f      	beq.n	8000d8a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6c:	3310      	adds	r3, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fe5c 	bl	8001a2c <xTaskRemoveFromEventList>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <xQueueReceive+0x21c>)
 8000d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	f3bf 8f4f 	dsb	sy
 8000d86:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d8a:	f001 ff6b 	bl	8002c64 <vPortExitCritical>
                return pdPASS;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e08a      	b.n	8000ea8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d113      	bne.n	8000dc0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d98:	f001 ff64 	bl	8002c64 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 f978 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000da4:	4604      	mov	r4, r0
 8000da6:	2000      	movs	r0, #0
 8000da8:	f004 f974 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000dac:	4602      	mov	r2, r0
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2101      	movs	r1, #1
 8000db2:	9100      	str	r1, [sp, #0]
 8000db4:	4621      	mov	r1, r4
 8000db6:	205c      	movs	r0, #92	; 0x5c
 8000db8:	f003 fc54 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e073      	b.n	8000ea8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d106      	bne.n	8000dd4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fe94 	bl	8001af8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000dd4:	f001 ff46 	bl	8002c64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dd8:	f000 fbe0 	bl	800159c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ddc:	f001 ff12 	bl	8002c04 <vPortEnterCritical>
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dec:	d103      	bne.n	8000df6 <xQueueReceive+0x162>
 8000dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e02:	d103      	bne.n	8000e0c <xQueueReceive+0x178>
 8000e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e0c:	f001 ff2a 	bl	8002c64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e10:	1d3a      	adds	r2, r7, #4
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fe83 	bl	8001b24 <xTaskCheckForTimeOut>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d124      	bne.n	8000e6e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e26:	f000 f927 	bl	8001078 <prvIsQueueEmpty>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d018      	beq.n	8000e62 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e32:	3324      	adds	r3, #36	; 0x24
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fda5 	bl	8001988 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e40:	f000 f8c8 	bl	8000fd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e44:	f000 fbb8 	bl	80015b8 <xTaskResumeAll>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f47f af69 	bne.w	8000d22 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <xQueueReceive+0x21c>)
 8000e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	f3bf 8f4f 	dsb	sy
 8000e5c:	f3bf 8f6f 	isb	sy
 8000e60:	e75f      	b.n	8000d22 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e64:	f000 f8b6 	bl	8000fd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e68:	f000 fba6 	bl	80015b8 <xTaskResumeAll>
 8000e6c:	e759      	b.n	8000d22 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e70:	f000 f8b0 	bl	8000fd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e74:	f000 fba0 	bl	80015b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e7a:	f000 f8fd 	bl	8001078 <prvIsQueueEmpty>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f43f af4e 	beq.w	8000d22 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 f903 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	2000      	movs	r0, #0
 8000e92:	f004 f8ff 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 8000e96:	4602      	mov	r2, r0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	9100      	str	r1, [sp, #0]
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	205c      	movs	r0, #92	; 0x5c
 8000ea2:	f003 fbdf 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000ea6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3734      	adds	r7, #52	; 0x34
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000ed04 	.word	0xe000ed04

08000eb4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10d      	bne.n	8000eee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d14d      	bne.n	8000f76 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 ff62 	bl	8001da8 <xTaskPriorityDisinherit>
 8000ee4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	e043      	b.n	8000f76 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d119      	bne.n	8000f28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6858      	ldr	r0, [r3, #4]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	461a      	mov	r2, r3
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	f004 fde0 	bl	8005ac4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	441a      	add	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d32b      	bcc.n	8000f76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	e026      	b.n	8000f76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	68d8      	ldr	r0, [r3, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	461a      	mov	r2, r3
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	f004 fdc6 	bl	8005ac4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	425b      	negs	r3, r3
 8000f42:	441a      	add	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	441a      	add	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d105      	bne.n	8000f76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000f7e:	697b      	ldr	r3, [r7, #20]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d018      	beq.n	8000fcc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	441a      	add	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d303      	bcc.n	8000fbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68d9      	ldr	r1, [r3, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	6838      	ldr	r0, [r7, #0]
 8000fc8:	f004 fd7c 	bl	8005ac4 <memcpy>
    }
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000fdc:	f001 fe12 	bl	8002c04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fe6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fe8:	e011      	b.n	800100e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d012      	beq.n	8001018 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3324      	adds	r3, #36	; 0x24
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fd18 	bl	8001a2c <xTaskRemoveFromEventList>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001002:	f000 fdf5 	bl	8001bf0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	3b01      	subs	r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dce9      	bgt.n	8000fea <prvUnlockQueue+0x16>
 8001016:	e000      	b.n	800101a <prvUnlockQueue+0x46>
                        break;
 8001018:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	22ff      	movs	r2, #255	; 0xff
 800101e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001022:	f001 fe1f 	bl	8002c64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001026:	f001 fded 	bl	8002c04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001030:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001032:	e011      	b.n	8001058 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d012      	beq.n	8001062 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3310      	adds	r3, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fcf3 	bl	8001a2c <xTaskRemoveFromEventList>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800104c:	f000 fdd0 	bl	8001bf0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	3b01      	subs	r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dce9      	bgt.n	8001034 <prvUnlockQueue+0x60>
 8001060:	e000      	b.n	8001064 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001062:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800106c:	f001 fdfa 	bl	8002c64 <vPortExitCritical>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001080:	f001 fdc0 	bl	8002c04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800108c:	2301      	movs	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e001      	b.n	8001096 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001096:	f001 fde5 	bl	8002c64 <vPortExitCritical>

    return xReturn;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010ac:	f001 fdaa 	bl	8002c04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d102      	bne.n	80010c2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e001      	b.n	80010c6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010c6:	f001 fdcd 	bl	8002c64 <vPortExitCritical>

    return xReturn;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e01e      	b.n	8001122 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80010e4:	4a13      	ldr	r2, [pc, #76]	; (8001134 <vQueueAddToRegistry+0x60>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d115      	bne.n	800111c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <vQueueAddToRegistry+0x60>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <vQueueAddToRegistry+0x60>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f003 ffc3 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 800110e:	4601      	mov	r1, r0
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	2071      	movs	r0, #113	; 0x71
 8001116:	f003 f9d5 	bl	80044c4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800111a:	e006      	b.n	800112a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b07      	cmp	r3, #7
 8001126:	d9dd      	bls.n	80010e4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000094 	.word	0x20000094

08001138 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001148:	f001 fd5c 	bl	8002c04 <vPortEnterCritical>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001158:	d103      	bne.n	8001162 <vQueueWaitForMessageRestricted+0x2a>
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001168:	b25b      	sxtb	r3, r3
 800116a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800116e:	d103      	bne.n	8001178 <vQueueWaitForMessageRestricted+0x40>
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001178:	f001 fd74 	bl	8002c64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	2b00      	cmp	r3, #0
 8001182:	d106      	bne.n	8001192 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3324      	adds	r3, #36	; 0x24
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fc1f 	bl	80019d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff1e 	bl	8000fd4 <prvUnlockQueue>
    }
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fe51 	bl	8002e5c <pvPortMalloc>
 80011ba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00e      	beq.n	80011e0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011c2:	2058      	movs	r0, #88	; 0x58
 80011c4:	f001 fe4a 	bl	8002e5c <pvPortMalloc>
 80011c8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
 80011d6:	e005      	b.n	80011e4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f001 ff1f 	bl	800301c <vPortFree>
 80011de:	e001      	b.n	80011e4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d013      	beq.n	8001212 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	2300      	movs	r3, #0
 80011ee:	9303      	str	r3, [sp, #12]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 f80e 	bl	8001222 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001206:	69f8      	ldr	r0, [r7, #28]
 8001208:	f000 f8a2 	bl	8001350 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	e002      	b.n	8001218 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001216:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001218:	69bb      	ldr	r3, [r7, #24]
    }
 800121a:	4618      	mov	r0, r3
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	461a      	mov	r2, r3
 800123a:	21a5      	movs	r1, #165	; 0xa5
 800123c:	f004 fc50 	bl	8005ae0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800124a:	3b01      	subs	r3, #1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f023 0307 	bic.w	r3, r3, #7
 8001258:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00a      	beq.n	800127a <prvInitialiseNewTask+0x58>
        __asm volatile
 8001264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001268:	f383 8811 	msr	BASEPRI, r3
 800126c:	f3bf 8f6f 	isb	sy
 8001270:	f3bf 8f4f 	dsb	sy
 8001274:	617b      	str	r3, [r7, #20]
    }
 8001276:	bf00      	nop
 8001278:	e7fe      	b.n	8001278 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01f      	beq.n	80012c0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	e012      	b.n	80012ac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4413      	add	r3, r2
 800128c:	7819      	ldrb	r1, [r3, #0]
 800128e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	4413      	add	r3, r2
 8001294:	3334      	adds	r3, #52	; 0x34
 8001296:	460a      	mov	r2, r1
 8001298:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b09      	cmp	r3, #9
 80012b0:	d9e9      	bls.n	8001286 <prvInitialiseNewTask+0x64>
 80012b2:	e000      	b.n	80012b6 <prvInitialiseNewTask+0x94>
            {
                break;
 80012b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012be:	e003      	b.n	80012c8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d901      	bls.n	80012d2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012ce:	2304      	movs	r3, #4
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80012d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012dc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	2200      	movs	r2, #0
 80012e2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e6:	3304      	adds	r3, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f96a 	bl	80005c2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	3318      	adds	r3, #24
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f965 	bl	80005c2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	f1c3 0205 	rsb	r2, r3, #5
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001310:	3350      	adds	r3, #80	; 0x50
 8001312:	2204      	movs	r2, #4
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f004 fbe2 	bl	8005ae0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131e:	3354      	adds	r3, #84	; 0x54
 8001320:	2201      	movs	r2, #1
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f004 fbdb 	bl	8005ae0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	68f9      	ldr	r1, [r7, #12]
 800132e:	69b8      	ldr	r0, [r7, #24]
 8001330:	f001 fabe 	bl	80028b0 <pxPortInitialiseStack>
 8001334:	4602      	mov	r2, r0
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001344:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af02      	add	r7, sp, #8
 8001356:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001358:	f001 fc54 	bl	8002c04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <prvAddNewTaskToReadyList+0xfc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a3a      	ldr	r2, [pc, #232]	; (800144c <prvAddNewTaskToReadyList+0xfc>)
 8001364:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <prvAddNewTaskToReadyList+0x100>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800136e:	4a38      	ldr	r2, [pc, #224]	; (8001450 <prvAddNewTaskToReadyList+0x100>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001374:	4b35      	ldr	r3, [pc, #212]	; (800144c <prvAddNewTaskToReadyList+0xfc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d110      	bne.n	800139e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800137c:	f000 fc5c 	bl	8001c38 <prvInitialiseTaskLists>
 8001380:	e00d      	b.n	800139e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <prvAddNewTaskToReadyList+0x104>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <prvAddNewTaskToReadyList+0x100>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	429a      	cmp	r2, r3
 8001396:	d802      	bhi.n	800139e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001398:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <prvAddNewTaskToReadyList+0x100>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <prvAddNewTaskToReadyList+0x108>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a2c      	ldr	r2, [pc, #176]	; (8001458 <prvAddNewTaskToReadyList+0x108>)
 80013a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <prvAddNewTaskToReadyList+0x108>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d016      	beq.n	80013e4 <prvAddNewTaskToReadyList+0x94>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fd45 	bl	8004e48 <SEGGER_SYSVIEW_OnTaskCreate>
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	461d      	mov	r5, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461c      	mov	r4, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	1ae3      	subs	r3, r4, r3
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	462b      	mov	r3, r5
 80013e0:	f001 ffea 	bl	80033b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fdb2 	bl	8004f50 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	2201      	movs	r2, #1
 80013f2:	409a      	lsls	r2, r3
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <prvAddNewTaskToReadyList+0x10c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <prvAddNewTaskToReadyList+0x10c>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <prvAddNewTaskToReadyList+0x110>)
 800140c:	441a      	add	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4610      	mov	r0, r2
 8001416:	f7ff f8e1 	bl	80005dc <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800141a:	f001 fc23 	bl	8002c64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <prvAddNewTaskToReadyList+0x104>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00e      	beq.n	8001444 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <prvAddNewTaskToReadyList+0x100>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <prvAddNewTaskToReadyList+0x114>)
 8001436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f3bf 8f4f 	dsb	sy
 8001440:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	200001ac 	.word	0x200001ac
 8001450:	200000d4 	.word	0x200000d4
 8001454:	200001b8 	.word	0x200001b8
 8001458:	200001c8 	.word	0x200001c8
 800145c:	200001b4 	.word	0x200001b4
 8001460:	200000d8 	.word	0x200000d8
 8001464:	e000ed04 	.word	0xe000ed04

08001468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01b      	beq.n	80014b2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <vTaskDelay+0x68>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <vTaskDelay+0x30>
        __asm volatile
 8001482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001486:	f383 8811 	msr	BASEPRI, r3
 800148a:	f3bf 8f6f 	isb	sy
 800148e:	f3bf 8f4f 	dsb	sy
 8001492:	60bb      	str	r3, [r7, #8]
    }
 8001494:	bf00      	nop
 8001496:	e7fe      	b.n	8001496 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001498:	f000 f880 	bl	800159c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	2023      	movs	r0, #35	; 0x23
 80014a0:	f002 ffd4 	bl	800444c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fe78 	bl	800219c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80014ac:	f000 f884 	bl	80015b8 <xTaskResumeAll>
 80014b0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <vTaskDelay+0x6c>)
 80014ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f3bf 8f4f 	dsb	sy
 80014c4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200001d4 	.word	0x200001d4
 80014d4:	e000ed04 	.word	0xe000ed04

080014d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <vTaskStartScheduler+0xa4>)
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	2300      	movs	r3, #0
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2300      	movs	r3, #0
 80014e8:	2282      	movs	r2, #130	; 0x82
 80014ea:	4925      	ldr	r1, [pc, #148]	; (8001580 <vTaskStartScheduler+0xa8>)
 80014ec:	4825      	ldr	r0, [pc, #148]	; (8001584 <vTaskStartScheduler+0xac>)
 80014ee:	f7ff fe57 	bl	80011a0 <xTaskCreate>
 80014f2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d102      	bne.n	8001500 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80014fa:	f000 fec7 	bl	800228c <xTimerCreateTimerTask>
 80014fe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d124      	bne.n	8001550 <vTaskStartScheduler+0x78>
        __asm volatile
 8001506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150a:	f383 8811 	msr	BASEPRI, r3
 800150e:	f3bf 8f6f 	isb	sy
 8001512:	f3bf 8f4f 	dsb	sy
 8001516:	60bb      	str	r3, [r7, #8]
    }
 8001518:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <vTaskStartScheduler+0xb0>)
 800151c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001520:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <vTaskStartScheduler+0xb4>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <vTaskStartScheduler+0xb8>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <vTaskStartScheduler+0xbc>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <vTaskStartScheduler+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d102      	bne.n	8001540 <vTaskStartScheduler+0x68>
 800153a:	f003 fc69 	bl	8004e10 <SEGGER_SYSVIEW_OnIdle>
 800153e:	e004      	b.n	800154a <vTaskStartScheduler+0x72>
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <vTaskStartScheduler+0xbc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fcc1 	bl	8004ecc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800154a:	f001 fa3b 	bl	80029c4 <xPortStartScheduler>
 800154e:	e00e      	b.n	800156e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001556:	d10a      	bne.n	800156e <vTaskStartScheduler+0x96>
        __asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	607b      	str	r3, [r7, #4]
    }
 800156a:	bf00      	nop
 800156c:	e7fe      	b.n	800156c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <vTaskStartScheduler+0xc0>)
 8001570:	681b      	ldr	r3, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001d0 	.word	0x200001d0
 8001580:	08005b34 	.word	0x08005b34
 8001584:	08001c09 	.word	0x08001c09
 8001588:	200001cc 	.word	0x200001cc
 800158c:	200001b8 	.word	0x200001b8
 8001590:	200001b0 	.word	0x200001b0
 8001594:	200000d4 	.word	0x200000d4
 8001598:	20000004 	.word	0x20000004

0800159c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <vTaskSuspendAll+0x18>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <vTaskSuspendAll+0x18>)
 80015a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	200001d4 	.word	0x200001d4

080015b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <xTaskResumeAll+0x11c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10a      	bne.n	80015e4 <xTaskResumeAll+0x2c>
        __asm volatile
 80015ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d2:	f383 8811 	msr	BASEPRI, r3
 80015d6:	f3bf 8f6f 	isb	sy
 80015da:	f3bf 8f4f 	dsb	sy
 80015de:	603b      	str	r3, [r7, #0]
    }
 80015e0:	bf00      	nop
 80015e2:	e7fe      	b.n	80015e2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80015e4:	f001 fb0e 	bl	8002c04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <xTaskResumeAll+0x11c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	4a39      	ldr	r2, [pc, #228]	; (80016d4 <xTaskResumeAll+0x11c>)
 80015f0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <xTaskResumeAll+0x11c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d165      	bne.n	80016c6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <xTaskResumeAll+0x120>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d061      	beq.n	80016c6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001602:	e032      	b.n	800166a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <xTaskResumeAll+0x124>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3318      	adds	r3, #24
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f840 	bl	8000696 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3304      	adds	r3, #4
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f83b 	bl	8000696 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fc94 	bl	8004f50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2201      	movs	r2, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <xTaskResumeAll+0x128>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4313      	orrs	r3, r2
 8001636:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <xTaskResumeAll+0x128>)
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <xTaskResumeAll+0x12c>)
 8001648:	441a      	add	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3304      	adds	r3, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4610      	mov	r0, r2
 8001652:	f7fe ffc3 	bl	80005dc <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <xTaskResumeAll+0x130>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	429a      	cmp	r2, r3
 8001662:	d302      	bcc.n	800166a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <xTaskResumeAll+0x134>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <xTaskResumeAll+0x124>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1c8      	bne.n	8001604 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001678:	f000 fb5c 	bl	8001d34 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <xTaskResumeAll+0x138>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d010      	beq.n	80016aa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001688:	f000 f858 	bl	800173c <xTaskIncrementTick>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <xTaskResumeAll+0x134>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f1      	bne.n	8001688 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <xTaskResumeAll+0x138>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <xTaskResumeAll+0x134>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <xTaskResumeAll+0x13c>)
 80016b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80016c6:	f001 facd 	bl	8002c64 <vPortExitCritical>

    return xAlreadyYielded;
 80016ca:	68bb      	ldr	r3, [r7, #8]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200001d4 	.word	0x200001d4
 80016d8:	200001ac 	.word	0x200001ac
 80016dc:	2000016c 	.word	0x2000016c
 80016e0:	200001b4 	.word	0x200001b4
 80016e4:	200000d8 	.word	0x200000d8
 80016e8:	200000d4 	.word	0x200000d4
 80016ec:	200001c0 	.word	0x200001c0
 80016f0:	200001bc 	.word	0x200001bc
 80016f4:	e000ed04 	.word	0xe000ed04

080016f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <xTaskGetTickCount+0x1c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200001b0 	.word	0x200001b0

08001718 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800171e:	f001 fb5d 	bl	8002ddc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <xTaskGetTickCountFromISR+0x20>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800172c:	683b      	ldr	r3, [r7, #0]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200001b0 	.word	0x200001b0

0800173c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001746:	4b50      	ldr	r3, [pc, #320]	; (8001888 <xTaskIncrementTick+0x14c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 8092 	bne.w	8001874 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001750:	4b4e      	ldr	r3, [pc, #312]	; (800188c <xTaskIncrementTick+0x150>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <xTaskIncrementTick+0x150>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d120      	bne.n	80017a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <xTaskIncrementTick+0x154>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <xTaskIncrementTick+0x48>
        __asm volatile
 800176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001772:	f383 8811 	msr	BASEPRI, r3
 8001776:	f3bf 8f6f 	isb	sy
 800177a:	f3bf 8f4f 	dsb	sy
 800177e:	603b      	str	r3, [r7, #0]
    }
 8001780:	bf00      	nop
 8001782:	e7fe      	b.n	8001782 <xTaskIncrementTick+0x46>
 8001784:	4b42      	ldr	r3, [pc, #264]	; (8001890 <xTaskIncrementTick+0x154>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <xTaskIncrementTick+0x158>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a40      	ldr	r2, [pc, #256]	; (8001890 <xTaskIncrementTick+0x154>)
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4a40      	ldr	r2, [pc, #256]	; (8001894 <xTaskIncrementTick+0x158>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <xTaskIncrementTick+0x15c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a3e      	ldr	r2, [pc, #248]	; (8001898 <xTaskIncrementTick+0x15c>)
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	f000 fac7 	bl	8001d34 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <xTaskIncrementTick+0x160>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d34c      	bcc.n	800184a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017b0:	4b37      	ldr	r3, [pc, #220]	; (8001890 <xTaskIncrementTick+0x154>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d104      	bne.n	80017c4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <xTaskIncrementTick+0x160>)
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c0:	601a      	str	r2, [r3, #0]
                    break;
 80017c2:	e042      	b.n	800184a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017c4:	4b32      	ldr	r3, [pc, #200]	; (8001890 <xTaskIncrementTick+0x154>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d203      	bcs.n	80017e4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80017dc:	4a2f      	ldr	r2, [pc, #188]	; (800189c <xTaskIncrementTick+0x160>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80017e2:	e032      	b.n	800184a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3304      	adds	r3, #4
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe ff54 	bl	8000696 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3318      	adds	r3, #24
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe ff4b 	bl	8000696 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fba4 	bl	8004f50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <xTaskIncrementTick+0x164>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4313      	orrs	r3, r2
 8001816:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <xTaskIncrementTick+0x164>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <xTaskIncrementTick+0x168>)
 8001828:	441a      	add	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3304      	adds	r3, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f7fe fed3 	bl	80005dc <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <xTaskIncrementTick+0x16c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	429a      	cmp	r2, r3
 8001842:	d3b5      	bcc.n	80017b0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001848:	e7b2      	b.n	80017b0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <xTaskIncrementTick+0x16c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	4914      	ldr	r1, [pc, #80]	; (80018a4 <xTaskIncrementTick+0x168>)
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d901      	bls.n	8001866 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <xTaskIncrementTick+0x170>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e004      	b.n	800187e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <xTaskIncrementTick+0x174>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <xTaskIncrementTick+0x174>)
 800187c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800187e:	697b      	ldr	r3, [r7, #20]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200001d4 	.word	0x200001d4
 800188c:	200001b0 	.word	0x200001b0
 8001890:	20000164 	.word	0x20000164
 8001894:	20000168 	.word	0x20000168
 8001898:	200001c4 	.word	0x200001c4
 800189c:	200001cc 	.word	0x200001cc
 80018a0:	200001b4 	.word	0x200001b4
 80018a4:	200000d8 	.word	0x200000d8
 80018a8:	200000d4 	.word	0x200000d4
 80018ac:	200001c0 	.word	0x200001c0
 80018b0:	200001bc 	.word	0x200001bc

080018b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <vTaskSwitchContext+0xbc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <vTaskSwitchContext+0xc0>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80018c8:	e04d      	b.n	8001966 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <vTaskSwitchContext+0xc0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <vTaskSwitchContext+0xc4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80018de:	7afb      	ldrb	r3, [r7, #11]
 80018e0:	f1c3 031f 	rsb	r3, r3, #31
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	4925      	ldr	r1, [pc, #148]	; (800197c <vTaskSwitchContext+0xc8>)
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <vTaskSwitchContext+0x5c>
        __asm volatile
 80018fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fe:	f383 8811 	msr	BASEPRI, r3
 8001902:	f3bf 8f6f 	isb	sy
 8001906:	f3bf 8f4f 	dsb	sy
 800190a:	607b      	str	r3, [r7, #4]
    }
 800190c:	bf00      	nop
 800190e:	e7fe      	b.n	800190e <vTaskSwitchContext+0x5a>
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <vTaskSwitchContext+0xc8>)
 800191c:	4413      	add	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	3308      	adds	r3, #8
 8001932:	429a      	cmp	r2, r3
 8001934:	d104      	bne.n	8001940 <vTaskSwitchContext+0x8c>
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <vTaskSwitchContext+0xcc>)
 8001948:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <vTaskSwitchContext+0xcc>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <vTaskSwitchContext+0xd0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d102      	bne.n	800195c <vTaskSwitchContext+0xa8>
 8001956:	f003 fa5b 	bl	8004e10 <SEGGER_SYSVIEW_OnIdle>
}
 800195a:	e004      	b.n	8001966 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <vTaskSwitchContext+0xcc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fab3 	bl	8004ecc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001d4 	.word	0x200001d4
 8001974:	200001c0 	.word	0x200001c0
 8001978:	200001b4 	.word	0x200001b4
 800197c:	200000d8 	.word	0x200000d8
 8001980:	200000d4 	.word	0x200000d4
 8001984:	200001d0 	.word	0x200001d0

08001988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199c:	f383 8811 	msr	BASEPRI, r3
 80019a0:	f3bf 8f6f 	isb	sy
 80019a4:	f3bf 8f4f 	dsb	sy
 80019a8:	60fb      	str	r3, [r7, #12]
    }
 80019aa:	bf00      	nop
 80019ac:	e7fe      	b.n	80019ac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <vTaskPlaceOnEventList+0x44>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3318      	adds	r3, #24
 80019b4:	4619      	mov	r1, r3
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe fe34 	bl	8000624 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80019bc:	2101      	movs	r1, #1
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f000 fbec 	bl	800219c <prvAddCurrentTaskToDelayedList>
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200000d4 	.word	0x200000d4

080019d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80019e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e6:	f383 8811 	msr	BASEPRI, r3
 80019ea:	f3bf 8f6f 	isb	sy
 80019ee:	f3bf 8f4f 	dsb	sy
 80019f2:	617b      	str	r3, [r7, #20]
    }
 80019f4:	bf00      	nop
 80019f6:	e7fe      	b.n	80019f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <vTaskPlaceOnEventListRestricted+0x58>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3318      	adds	r3, #24
 80019fe:	4619      	mov	r1, r3
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7fe fdeb 	bl	80005dc <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a10:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001a12:	2024      	movs	r0, #36	; 0x24
 8001a14:	f002 fcfc 	bl	8004410 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	68b8      	ldr	r0, [r7, #8]
 8001a1c:	f000 fbbe 	bl	800219c <prvAddCurrentTaskToDelayedList>
    }
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200000d4 	.word	0x200000d4

08001a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10a      	bne.n	8001a58 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	60fb      	str	r3, [r7, #12]
    }
 8001a54:	bf00      	nop
 8001a56:	e7fe      	b.n	8001a56 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fe1a 	bl	8000696 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <xTaskRemoveFromEventList+0xb4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d120      	bne.n	8001aac <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fe11 	bl	8000696 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 fa6a 	bl	8004f50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2201      	movs	r2, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <xTaskRemoveFromEventList+0xb8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <xTaskRemoveFromEventList+0xb8>)
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <xTaskRemoveFromEventList+0xbc>)
 8001a9c:	441a      	add	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f7fe fd99 	bl	80005dc <vListInsertEnd>
 8001aaa:	e005      	b.n	8001ab8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	3318      	adds	r3, #24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <xTaskRemoveFromEventList+0xc0>)
 8001ab4:	f7fe fd92 	bl	80005dc <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <xTaskRemoveFromEventList+0xc4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d905      	bls.n	8001ad2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <xTaskRemoveFromEventList+0xc8>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e001      	b.n	8001ad6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001ad6:	697b      	ldr	r3, [r7, #20]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200001d4 	.word	0x200001d4
 8001ae4:	200001b4 	.word	0x200001b4
 8001ae8:	200000d8 	.word	0x200000d8
 8001aec:	2000016c 	.word	0x2000016c
 8001af0:	200000d4 	.word	0x200000d4
 8001af4:	200001c0 	.word	0x200001c0

08001af8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <vTaskInternalSetTimeOutState+0x24>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <vTaskInternalSetTimeOutState+0x28>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	605a      	str	r2, [r3, #4]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	200001c4 	.word	0x200001c4
 8001b20:	200001b0 	.word	0x200001b0

08001b24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10a      	bne.n	8001b4a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b38:	f383 8811 	msr	BASEPRI, r3
 8001b3c:	f3bf 8f6f 	isb	sy
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	613b      	str	r3, [r7, #16]
    }
 8001b46:	bf00      	nop
 8001b48:	e7fe      	b.n	8001b48 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	60fb      	str	r3, [r7, #12]
    }
 8001b62:	bf00      	nop
 8001b64:	e7fe      	b.n	8001b64 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001b66:	f001 f84d 	bl	8002c04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <xTaskCheckForTimeOut+0xc4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b82:	d102      	bne.n	8001b8a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	e026      	b.n	8001bd8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <xTaskCheckForTimeOut+0xc8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d00a      	beq.n	8001bac <xTaskCheckForTimeOut+0x88>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d305      	bcc.n	8001bac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e015      	b.n	8001bd8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20b      	bcs.n	8001bce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	1ad2      	subs	r2, r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff98 	bl	8001af8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	e004      	b.n	8001bd8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001bd8:	f001 f844 	bl	8002c64 <vPortExitCritical>

    return xReturn;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200001b0 	.word	0x200001b0
 8001bec:	200001c4 	.word	0x200001c4

08001bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <vTaskMissedYield+0x14>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	200001c0 	.word	0x200001c0

08001c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c10:	f000 f852 	bl	8001cb8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <prvIdleTask+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d9f9      	bls.n	8001c10 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <prvIdleTask+0x2c>)
 8001c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c2c:	e7f0      	b.n	8001c10 <prvIdleTask+0x8>
 8001c2e:	bf00      	nop
 8001c30:	200000d8 	.word	0x200000d8
 8001c34:	e000ed04 	.word	0xe000ed04

08001c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	e00c      	b.n	8001c5e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <prvInitialiseTaskLists+0x60>)
 8001c50:	4413      	add	r3, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc95 	bl	8000582 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d9ef      	bls.n	8001c44 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c64:	480d      	ldr	r0, [pc, #52]	; (8001c9c <prvInitialiseTaskLists+0x64>)
 8001c66:	f7fe fc8c 	bl	8000582 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <prvInitialiseTaskLists+0x68>)
 8001c6c:	f7fe fc89 	bl	8000582 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <prvInitialiseTaskLists+0x6c>)
 8001c72:	f7fe fc86 	bl	8000582 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c76:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <prvInitialiseTaskLists+0x70>)
 8001c78:	f7fe fc83 	bl	8000582 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <prvInitialiseTaskLists+0x74>)
 8001c7e:	f7fe fc80 	bl	8000582 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <prvInitialiseTaskLists+0x78>)
 8001c84:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <prvInitialiseTaskLists+0x64>)
 8001c86:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <prvInitialiseTaskLists+0x7c>)
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <prvInitialiseTaskLists+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200000d8 	.word	0x200000d8
 8001c9c:	2000013c 	.word	0x2000013c
 8001ca0:	20000150 	.word	0x20000150
 8001ca4:	2000016c 	.word	0x2000016c
 8001ca8:	20000180 	.word	0x20000180
 8001cac:	20000198 	.word	0x20000198
 8001cb0:	20000164 	.word	0x20000164
 8001cb4:	20000168 	.word	0x20000168

08001cb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cbe:	e019      	b.n	8001cf4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001cc0:	f000 ffa0 	bl	8002c04 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <prvCheckTasksWaitingTermination+0x50>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fce0 	bl	8000696 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <prvCheckTasksWaitingTermination+0x54>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <prvCheckTasksWaitingTermination+0x54>)
 8001cde:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <prvCheckTasksWaitingTermination+0x58>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <prvCheckTasksWaitingTermination+0x58>)
 8001ce8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001cea:	f000 ffbb 	bl	8002c64 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f810 	bl	8001d14 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <prvCheckTasksWaitingTermination+0x58>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e1      	bne.n	8001cc0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000180 	.word	0x20000180
 8001d0c:	200001ac 	.word	0x200001ac
 8001d10:	20000194 	.word	0x20000194

08001d14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 f97b 	bl	800301c <vPortFree>
                vPortFree( pxTCB );
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f001 f978 	bl	800301c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <prvResetNextTaskUnblockTime+0x30>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <prvResetNextTaskUnblockTime+0x34>)
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d48:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d4a:	e005      	b.n	8001d58 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <prvResetNextTaskUnblockTime+0x30>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <prvResetNextTaskUnblockTime+0x34>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000164 	.word	0x20000164
 8001d68:	200001cc 	.word	0x200001cc

08001d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <xTaskGetSchedulerState+0x34>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	e008      	b.n	8001d92 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <xTaskGetSchedulerState+0x38>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	e001      	b.n	8001d92 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001d92:	687b      	ldr	r3, [r7, #4]
    }
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	200001b8 	.word	0x200001b8
 8001da4:	200001d4 	.word	0x200001d4

08001da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d068      	beq.n	8001e90 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <xTaskPriorityDisinherit+0xf4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d00a      	beq.n	8001dde <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	60fb      	str	r3, [r7, #12]
    }
 8001dda:	bf00      	nop
 8001ddc:	e7fe      	b.n	8001ddc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dea:	f383 8811 	msr	BASEPRI, r3
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	60bb      	str	r3, [r7, #8]
    }
 8001df8:	bf00      	nop
 8001dfa:	e7fe      	b.n	8001dfa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d03e      	beq.n	8001e90 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d13a      	bne.n	8001e90 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fc39 	bl	8000696 <uxListRemove>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	2201      	movs	r2, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43da      	mvns	r2, r3
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <xTaskPriorityDisinherit+0xf8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <xTaskPriorityDisinherit+0xf8>)
 8001e3e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4619      	mov	r1, r3
 8001e44:	204a      	movs	r0, #74	; 0x4a
 8001e46:	f002 fb01 	bl	800444c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	f1c3 0205 	rsb	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	2201      	movs	r2, #1
 8001e64:	409a      	lsls	r2, r3
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <xTaskPriorityDisinherit+0xf8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <xTaskPriorityDisinherit+0xf8>)
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <xTaskPriorityDisinherit+0xfc>)
 8001e7e:	441a      	add	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	3304      	adds	r3, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f7fe fba8 	bl	80005dc <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e90:	697b      	ldr	r3, [r7, #20]
    }
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200000d4 	.word	0x200000d4
 8001ea0:	200001b4 	.word	0x200001b4
 8001ea4:	200000d8 	.word	0x200000d8

08001ea8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec0:	f383 8811 	msr	BASEPRI, r3
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	613b      	str	r3, [r7, #16]
    }
 8001ece:	bf00      	nop
 8001ed0:	e7fe      	b.n	8001ed0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001ed2:	f000 fe97 	bl	8002c04 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <xTaskGenericNotifyWait+0x108>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	3354      	adds	r3, #84	; 0x54
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d022      	beq.n	8001f2e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <xTaskGenericNotifyWait+0x108>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	3214      	adds	r2, #20
 8001ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	43d2      	mvns	r2, r2
 8001ef8:	4011      	ands	r1, r2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	3214      	adds	r2, #20
 8001efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <xTaskGenericNotifyWait+0x108>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3354      	adds	r3, #84	; 0x54
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f16:	2101      	movs	r1, #1
 8001f18:	6a38      	ldr	r0, [r7, #32]
 8001f1a:	f000 f93f 	bl	800219c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <xTaskGenericNotifyWait+0x10c>)
 8001f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001f2e:	f000 fe99 	bl	8002c64 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001f32:	f000 fe67 	bl	8002c04 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	2040      	movs	r0, #64	; 0x40
 8001f44:	f002 fb8e 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <xTaskGenericNotifyWait+0x108>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	3214      	adds	r2, #20
 8001f56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <xTaskGenericNotifyWait+0x108>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	3354      	adds	r3, #84	; 0x54
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d002      	beq.n	8001f76 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e00e      	b.n	8001f94 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <xTaskGenericNotifyWait+0x108>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	3214      	adds	r2, #20
 8001f7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	4011      	ands	r1, r2
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	3214      	adds	r2, #20
 8001f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <xTaskGenericNotifyWait+0x108>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3354      	adds	r3, #84	; 0x54
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001fa2:	f000 fe5f 	bl	8002c64 <vPortExitCritical>

        return xReturn;
 8001fa6:	697b      	ldr	r3, [r7, #20]
    }
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200000d4 	.word	0x200000d4
 8001fb4:	e000ed04 	.word	0xe000ed04

08001fb8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08e      	sub	sp, #56	; 0x38
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	623b      	str	r3, [r7, #32]
    }
 8001fe2:	bf00      	nop
 8001fe4:	e7fe      	b.n	8001fe4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <xTaskGenericNotify+0x4a>
        __asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	61fb      	str	r3, [r7, #28]
    }
 8001ffe:	bf00      	nop
 8002000:	e7fe      	b.n	8002000 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002006:	f000 fdfd 	bl	8002c04 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	3214      	adds	r2, #20
 8002016:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800201e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4413      	add	r3, r2
 8002024:	3354      	adds	r3, #84	; 0x54
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800202c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	4413      	add	r3, r2
 8002032:	3354      	adds	r3, #84	; 0x54
 8002034:	2202      	movs	r2, #2
 8002036:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d83b      	bhi.n	80020b6 <xTaskGenericNotify+0xfe>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <xTaskGenericNotify+0x8c>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	080020d5 	.word	0x080020d5
 8002048:	08002059 	.word	0x08002059
 800204c:	08002075 	.word	0x08002075
 8002050:	0800208d 	.word	0x0800208d
 8002054:	0800209b 	.word	0x0800209b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	3214      	adds	r2, #20
 800205e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	ea42 0103 	orr.w	r1, r2, r3
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	3214      	adds	r2, #20
 800206e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002072:	e032      	b.n	80020da <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	3214      	adds	r2, #20
 800207a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	3214      	adds	r2, #20
 8002086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800208a:	e026      	b.n	80020da <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	3214      	adds	r2, #20
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002098:	e01f      	b.n	80020da <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d006      	beq.n	80020b0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	3214      	adds	r2, #20
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80020ae:	e014      	b.n	80020da <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80020b4:	e011      	b.n	80020da <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <xTaskGenericNotify+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <xTaskGenericNotify+0x120>
        __asm volatile
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	61bb      	str	r3, [r7, #24]
    }
 80020d0:	bf00      	nop
 80020d2:	e7fe      	b.n	80020d2 <xTaskGenericNotify+0x11a>
                    break;
 80020d4:	bf00      	nop
 80020d6:	e000      	b.n	80020da <xTaskGenericNotify+0x122>

                    break;
 80020d8:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 ffd9 	bl	8005094 <SEGGER_SYSVIEW_ShrinkId>
 80020e2:	4601      	mov	r1, r0
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	4613      	mov	r3, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	203e      	movs	r0, #62	; 0x3e
 80020f0:	f002 fab8 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80020f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d13d      	bne.n	8002178 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	3304      	adds	r3, #4
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fac8 	bl	8000696 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	4618      	mov	r0, r3
 800210a:	f002 ff21 	bl	8004f50 <SEGGER_SYSVIEW_OnTaskStartReady>
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	2201      	movs	r2, #1
 8002114:	409a      	lsls	r2, r3
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <xTaskGenericNotify+0x1d4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <xTaskGenericNotify+0x1d4>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <xTaskGenericNotify+0x1d8>)
 800212e:	441a      	add	r2, r3
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f7fe fa50 	bl	80005dc <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	617b      	str	r3, [r7, #20]
    }
 8002156:	bf00      	nop
 8002158:	e7fe      	b.n	8002158 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <xTaskGenericNotify+0x1dc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	429a      	cmp	r2, r3
 8002166:	d907      	bls.n	8002178 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <xTaskGenericNotify+0x1e0>)
 800216a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002178:	f000 fd74 	bl	8002c64 <vPortExitCritical>

        return xReturn;
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800217e:	4618      	mov	r0, r3
 8002180:	3730      	adds	r7, #48	; 0x30
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200001b0 	.word	0x200001b0
 800218c:	200001b4 	.word	0x200001b4
 8002190:	200000d8 	.word	0x200000d8
 8002194:	200000d4 	.word	0x200000d4
 8002198:	e000ed04 	.word	0xe000ed04

0800219c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <prvAddCurrentTaskToDelayedList+0xd4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3304      	adds	r3, #4
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fa6f 	bl	8000696 <uxListRemove>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	2201      	movs	r2, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <prvAddCurrentTaskToDelayedList+0xdc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4013      	ands	r3, r2
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <prvAddCurrentTaskToDelayedList+0xdc>)
 80021d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021dc:	d110      	bne.n	8002200 <prvAddCurrentTaskToDelayedList+0x64>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	211b      	movs	r1, #27
 80021ea:	4618      	mov	r0, r3
 80021ec:	f002 fef2 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3304      	adds	r3, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4820      	ldr	r0, [pc, #128]	; (800227c <prvAddCurrentTaskToDelayedList+0xe0>)
 80021fa:	f7fe f9ef 	bl	80005dc <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80021fe:	e032      	b.n	8002266 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d20f      	bcs.n	8002238 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2104      	movs	r1, #4
 800221e:	4618      	mov	r0, r3
 8002220:	f002 fed8 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3304      	adds	r3, #4
 800222e:	4619      	mov	r1, r3
 8002230:	4610      	mov	r0, r2
 8002232:	f7fe f9f7 	bl	8000624 <vListInsert>
}
 8002236:	e016      	b.n	8002266 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2104      	movs	r1, #4
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fec8 	bl	8004fd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <prvAddCurrentTaskToDelayedList+0xd8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3304      	adds	r3, #4
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe f9e7 	bl	8000624 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <prvAddCurrentTaskToDelayedList+0xec>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d202      	bcs.n	8002266 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002260:	4a09      	ldr	r2, [pc, #36]	; (8002288 <prvAddCurrentTaskToDelayedList+0xec>)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200001b0 	.word	0x200001b0
 8002274:	200000d4 	.word	0x200000d4
 8002278:	200001b4 	.word	0x200001b4
 800227c:	20000198 	.word	0x20000198
 8002280:	20000168 	.word	0x20000168
 8002284:	20000164 	.word	0x20000164
 8002288:	200001cc 	.word	0x200001cc

0800228c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002296:	f000 fad5 	bl	8002844 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <xTimerCreateTimerTask+0x54>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <xTimerCreateTimerTask+0x58>)
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	2302      	movs	r3, #2
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2300      	movs	r3, #0
 80022ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022b0:	490d      	ldr	r1, [pc, #52]	; (80022e8 <xTimerCreateTimerTask+0x5c>)
 80022b2:	480e      	ldr	r0, [pc, #56]	; (80022ec <xTimerCreateTimerTask+0x60>)
 80022b4:	f7fe ff74 	bl	80011a0 <xTaskCreate>
 80022b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	603b      	str	r3, [r7, #0]
    }
 80022d2:	bf00      	nop
 80022d4:	e7fe      	b.n	80022d4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80022d6:	687b      	ldr	r3, [r7, #4]
    }
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000208 	.word	0x20000208
 80022e4:	2000020c 	.word	0x2000020c
 80022e8:	08005b3c 	.word	0x08005b3c
 80022ec:	08002425 	.word	0x08002425

080022f0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xTimerGenericCommand+0x2e>
        __asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	623b      	str	r3, [r7, #32]
    }
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <xTimerGenericCommand+0x98>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d02a      	beq.n	800237c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b05      	cmp	r3, #5
 8002336:	dc18      	bgt.n	800236a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002338:	f7ff fd18 	bl	8001d6c <xTaskGetSchedulerState>
 800233c:	4603      	mov	r3, r0
 800233e:	2b02      	cmp	r3, #2
 8002340:	d109      	bne.n	8002356 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <xTimerGenericCommand+0x98>)
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	f107 0114 	add.w	r1, r7, #20
 800234a:	2300      	movs	r3, #0
 800234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234e:	f7fe fabd 	bl	80008cc <xQueueGenericSend>
 8002352:	6278      	str	r0, [r7, #36]	; 0x24
 8002354:	e012      	b.n	800237c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <xTimerGenericCommand+0x98>)
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	f107 0114 	add.w	r1, r7, #20
 800235e:	2300      	movs	r3, #0
 8002360:	2200      	movs	r2, #0
 8002362:	f7fe fab3 	bl	80008cc <xQueueGenericSend>
 8002366:	6278      	str	r0, [r7, #36]	; 0x24
 8002368:	e008      	b.n	800237c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <xTimerGenericCommand+0x98>)
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	f107 0114 	add.w	r1, r7, #20
 8002372:	2300      	movs	r3, #0
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	f7fe fbcf 	bl	8000b18 <xQueueGenericSendFromISR>
 800237a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800237e:	4618      	mov	r0, r3
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000208 	.word	0x20000208

0800238c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <prvProcessExpiredTimer+0x94>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f976 	bl	8000696 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d022      	beq.n	80023fe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	18d1      	adds	r1, r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	6978      	ldr	r0, [r7, #20]
 80023c6:	f000 f8d1 	bl	800256c <prvInsertTimerInActiveList>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01f      	beq.n	8002410 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80023d0:	2300      	movs	r3, #0
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2300      	movs	r3, #0
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	2100      	movs	r1, #0
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff88 	bl	80022f0 <xTimerGenericCommand>
 80023e0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d113      	bne.n	8002410 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	60fb      	str	r3, [r7, #12]
    }
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	6978      	ldr	r0, [r7, #20]
 8002416:	4798      	blx	r3
    }
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000200 	.word	0x20000200

08002424 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800242c:	f107 0308 	add.w	r3, r7, #8
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f857 	bl	80024e4 <prvGetNextExpireTime>
 8002436:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4619      	mov	r1, r3
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f803 	bl	8002448 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002442:	f000 f8d5 	bl	80025f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002446:	e7f1      	b.n	800242c <prvTimerTask+0x8>

08002448 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002452:	f7ff f8a3 	bl	800159c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f866 	bl	800252c <prvSampleTimeNow>
 8002460:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d130      	bne.n	80024ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <prvProcessTimerOrBlockTask+0x3c>
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	429a      	cmp	r2, r3
 8002474:	d806      	bhi.n	8002484 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002476:	f7ff f89f 	bl	80015b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800247a:	68f9      	ldr	r1, [r7, #12]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff85 	bl	800238c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002482:	e024      	b.n	80024ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <prvProcessTimerOrBlockTask+0x90>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <prvProcessTimerOrBlockTask+0x50>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <prvProcessTimerOrBlockTask+0x52>
 8002498:	2300      	movs	r3, #0
 800249a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <prvProcessTimerOrBlockTask+0x94>)
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fe45 	bl	8001138 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80024ae:	f7ff f883 	bl	80015b8 <xTaskResumeAll>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <prvProcessTimerOrBlockTask+0x98>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
    }
 80024c8:	e001      	b.n	80024ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80024ca:	f7ff f875 	bl	80015b8 <xTaskResumeAll>
    }
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000204 	.word	0x20000204
 80024dc:	20000208 	.word	0x20000208
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <prvGetNextExpireTime+0x44>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <prvGetNextExpireTime+0x16>
 80024f6:	2201      	movs	r2, #1
 80024f8:	e000      	b.n	80024fc <prvGetNextExpireTime+0x18>
 80024fa:	2200      	movs	r2, #0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <prvGetNextExpireTime+0x44>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e001      	b.n	8002518 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002518:	68fb      	ldr	r3, [r7, #12]
    }
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000200 	.word	0x20000200

0800252c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002534:	f7ff f8e0 	bl	80016f8 <xTaskGetTickCount>
 8002538:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <prvSampleTimeNow+0x3c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d205      	bcs.n	8002550 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002544:	f000 f91a 	bl	800277c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e002      	b.n	8002556 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <prvSampleTimeNow+0x3c>)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800255c:	68fb      	ldr	r3, [r7, #12]
    }
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000210 	.word	0x20000210

0800256c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	d812      	bhi.n	80025b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	1ad2      	subs	r2, r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	429a      	cmp	r2, r3
 800259e:	d302      	bcc.n	80025a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80025a0:	2301      	movs	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e01b      	b.n	80025de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <prvInsertTimerInActiveList+0x7c>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3304      	adds	r3, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7fe f837 	bl	8000624 <vListInsert>
 80025b6:	e012      	b.n	80025de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d206      	bcs.n	80025ce <prvInsertTimerInActiveList+0x62>
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d302      	bcc.n	80025ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e007      	b.n	80025de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <prvInsertTimerInActiveList+0x80>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3304      	adds	r3, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7fe f823 	bl	8000624 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80025de:	697b      	ldr	r3, [r7, #20]
    }
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000204 	.word	0x20000204
 80025ec:	20000200 	.word	0x20000200

080025f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80025f6:	e0ae      	b.n	8002756 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f2c0 80aa 	blt.w	8002754 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	3304      	adds	r3, #4
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe f840 	bl	8000696 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff87 	bl	800252c <prvSampleTimeNow>
 800261e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b09      	cmp	r3, #9
 8002624:	f200 8097 	bhi.w	8002756 <prvProcessReceivedCommands+0x166>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <prvProcessReceivedCommands+0x40>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002659 	.word	0x08002659
 8002634:	08002659 	.word	0x08002659
 8002638:	08002659 	.word	0x08002659
 800263c:	080026cd 	.word	0x080026cd
 8002640:	080026e1 	.word	0x080026e1
 8002644:	0800272b 	.word	0x0800272b
 8002648:	08002659 	.word	0x08002659
 800264c:	08002659 	.word	0x08002659
 8002650:	080026cd 	.word	0x080026cd
 8002654:	080026e1 	.word	0x080026e1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2da      	uxtb	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	18d1      	adds	r1, r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002678:	f7ff ff78 	bl	800256c <prvInsertTimerInActiveList>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d069      	beq.n	8002756 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002688:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05e      	beq.n	8002756 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	441a      	add	r2, r3
 80026a0:	2300      	movs	r3, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2300      	movs	r3, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026aa:	f7ff fe21 	bl	80022f0 <xTimerGenericCommand>
 80026ae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d14f      	bne.n	8002756 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	61bb      	str	r3, [r7, #24]
    }
 80026c8:	bf00      	nop
 80026ca:	e7fe      	b.n	80026ca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80026de:	e03a      	b.n	8002756 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	617b      	str	r3, [r7, #20]
    }
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	18d1      	adds	r1, r2, r3
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002724:	f7ff ff22 	bl	800256c <prvInsertTimerInActiveList>
                        break;
 8002728:	e015      	b.n	8002756 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800273a:	f000 fc6f 	bl	800301c <vPortFree>
 800273e:	e00a      	b.n	8002756 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002752:	e000      	b.n	8002756 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002754:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <prvProcessReceivedCommands+0x188>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f107 0108 	add.w	r1, r7, #8
 800275e:	2200      	movs	r2, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fa97 	bl	8000c94 <xQueueReceive>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f47f af45 	bne.w	80025f8 <prvProcessReceivedCommands+0x8>
        }
    }
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000208 	.word	0x20000208

0800277c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002782:	e048      	b.n	8002816 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <prvSwitchTimerLists+0xc0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800278e:	4b2b      	ldr	r3, [pc, #172]	; (800283c <prvSwitchTimerLists+0xc0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3304      	adds	r3, #4
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd ff7a 	bl	8000696 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d02e      	beq.n	8002816 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d90e      	bls.n	80027e8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <prvSwitchTimerLists+0xc0>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3304      	adds	r3, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7fd ff1f 	bl	8000624 <vListInsert>
 80027e6:	e016      	b.n	8002816 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2300      	movs	r3, #0
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	2100      	movs	r1, #0
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff fd7c 	bl	80022f0 <xTimerGenericCommand>
 80027f8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	603b      	str	r3, [r7, #0]
    }
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <prvSwitchTimerLists+0xc0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1b1      	bne.n	8002784 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <prvSwitchTimerLists+0xc0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <prvSwitchTimerLists+0xc4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <prvSwitchTimerLists+0xc0>)
 800282c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <prvSwitchTimerLists+0xc4>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	6013      	str	r3, [r2, #0]
    }
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000200 	.word	0x20000200
 8002840:	20000204 	.word	0x20000204

08002844 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002848:	f000 f9dc 	bl	8002c04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <prvCheckForValidListAndQueue+0x54>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11d      	bne.n	8002890 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002854:	4811      	ldr	r0, [pc, #68]	; (800289c <prvCheckForValidListAndQueue+0x58>)
 8002856:	f7fd fe94 	bl	8000582 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800285a:	4811      	ldr	r0, [pc, #68]	; (80028a0 <prvCheckForValidListAndQueue+0x5c>)
 800285c:	f7fd fe91 	bl	8000582 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <prvCheckForValidListAndQueue+0x60>)
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <prvCheckForValidListAndQueue+0x58>)
 8002864:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <prvCheckForValidListAndQueue+0x64>)
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <prvCheckForValidListAndQueue+0x5c>)
 800286a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800286c:	2200      	movs	r2, #0
 800286e:	210c      	movs	r1, #12
 8002870:	200a      	movs	r0, #10
 8002872:	f7fd ffa3 	bl	80007bc <xQueueGenericCreate>
 8002876:	4603      	mov	r3, r0
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <prvCheckForValidListAndQueue+0x54>)
 800287a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <prvCheckForValidListAndQueue+0x54>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <prvCheckForValidListAndQueue+0x54>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4908      	ldr	r1, [pc, #32]	; (80028ac <prvCheckForValidListAndQueue+0x68>)
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fc22 	bl	80010d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002890:	f000 f9e8 	bl	8002c64 <vPortExitCritical>
    }
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000208 	.word	0x20000208
 800289c:	200001d8 	.word	0x200001d8
 80028a0:	200001ec 	.word	0x200001ec
 80028a4:	20000200 	.word	0x20000200
 80028a8:	20000204 	.word	0x20000204
 80028ac:	08005b44 	.word	0x08005b44

080028b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3b04      	subs	r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b04      	subs	r3, #4
 80028ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f023 0201 	bic.w	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3b04      	subs	r3, #4
 80028de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <pxPortInitialiseStack+0x64>)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3b14      	subs	r3, #20
 80028ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3b04      	subs	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f06f 0202 	mvn.w	r2, #2
 80028fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3b20      	subs	r3, #32
 8002904:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	08002919 	.word	0x08002919

08002918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <prvTaskExitError+0x54>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292a:	d00a      	beq.n	8002942 <prvTaskExitError+0x2a>
        __asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	60fb      	str	r3, [r7, #12]
    }
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <prvTaskExitError+0x28>
        __asm volatile
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	60bb      	str	r3, [r7, #8]
    }
 8002954:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002956:	bf00      	nop
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0fc      	beq.n	8002958 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800295e:	bf00      	nop
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	20000008 	.word	0x20000008

08002970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <pxCurrentTCBConst2>)
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	6808      	ldr	r0, [r1, #0]
 8002976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297a:	f380 8809 	msr	PSP, r0
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f380 8811 	msr	BASEPRI, r0
 800298a:	4770      	bx	lr
 800298c:	f3af 8000 	nop.w

08002990 <pxCurrentTCBConst2>:
 8002990:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop

08002998 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002998:	4808      	ldr	r0, [pc, #32]	; (80029bc <prvPortStartFirstTask+0x24>)
 800299a:	6800      	ldr	r0, [r0, #0]
 800299c:	6800      	ldr	r0, [r0, #0]
 800299e:	f380 8808 	msr	MSP, r0
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f380 8814 	msr	CONTROL, r0
 80029aa:	b662      	cpsie	i
 80029ac:	b661      	cpsie	f
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	df00      	svc	0
 80029b8:	bf00      	nop
 80029ba:	0000      	.short	0x0000
 80029bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop

080029c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029ca:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <xPortStartScheduler+0x120>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a46      	ldr	r2, [pc, #280]	; (8002ae8 <xPortStartScheduler+0x124>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10a      	bne.n	80029ea <xPortStartScheduler+0x26>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	613b      	str	r3, [r7, #16]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <xPortStartScheduler+0x120>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a3f      	ldr	r2, [pc, #252]	; (8002aec <xPortStartScheduler+0x128>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10a      	bne.n	8002a0a <xPortStartScheduler+0x46>
        __asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	60fb      	str	r3, [r7, #12]
    }
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <xPortStartScheduler+0x12c>)
 8002a0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	22ff      	movs	r2, #255	; 0xff
 8002a1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <xPortStartScheduler+0x130>)
 8002a30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a38:	e009      	b.n	8002a4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d0ef      	beq.n	8002a3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d00a      	beq.n	8002a7c <xPortStartScheduler+0xb8>
        __asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	60bb      	str	r3, [r7, #8]
    }
 8002a78:	bf00      	nop
 8002a7a:	e7fe      	b.n	8002a7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <xPortStartScheduler+0x134>)
 8002a90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <xPortStartScheduler+0x138>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <xPortStartScheduler+0x138>)
 8002aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <xPortStartScheduler+0x138>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a14      	ldr	r2, [pc, #80]	; (8002afc <xPortStartScheduler+0x138>)
 8002aac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ab0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ab2:	f000 f963 	bl	8002d7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <xPortStartScheduler+0x13c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002abc:	f000 f982 	bl	8002dc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <xPortStartScheduler+0x140>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <xPortStartScheduler+0x140>)
 8002ac6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002aca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002acc:	f7ff ff64 	bl	8002998 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ad0:	f7fe fef0 	bl	80018b4 <vTaskSwitchContext>
    prvTaskExitError();
 8002ad4:	f7ff ff20 	bl	8002918 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00
 8002ae8:	410fc271 	.word	0x410fc271
 8002aec:	410fc270 	.word	0x410fc270
 8002af0:	e000e400 	.word	0xe000e400
 8002af4:	20000214 	.word	0x20000214
 8002af8:	20000218 	.word	0x20000218
 8002afc:	e000ed20 	.word	0xe000ed20
 8002b00:	20000008 	.word	0x20000008
 8002b04:	e000ef34 	.word	0xe000ef34

08002b08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <vInitPrioGroupValue+0xe4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <vInitPrioGroupValue+0xe8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10a      	bne.n	8002b2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	613b      	str	r3, [r7, #16]
    }
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <vInitPrioGroupValue+0xe4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <vInitPrioGroupValue+0xec>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10a      	bne.n	8002b4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	60fb      	str	r3, [r7, #12]
    }
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <vInitPrioGroupValue+0xf0>)
 8002b50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	22ff      	movs	r2, #255	; 0xff
 8002b5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <vInitPrioGroupValue+0xf4>)
 8002b74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002b78:	2207      	movs	r2, #7
 8002b7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b7c:	e009      	b.n	8002b92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002b86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d0ef      	beq.n	8002b7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00a      	beq.n	8002bc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	60bb      	str	r3, [r7, #8]
    }
 8002bbc:	bf00      	nop
 8002bbe:	e7fe      	b.n	8002bbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002bc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <vInitPrioGroupValue+0xf8>)
 8002bd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00
 8002bf0:	410fc271 	.word	0x410fc271
 8002bf4:	410fc270 	.word	0x410fc270
 8002bf8:	e000e400 	.word	0xe000e400
 8002bfc:	20000214 	.word	0x20000214
 8002c00:	20000218 	.word	0x20000218

08002c04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
        __asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	607b      	str	r3, [r7, #4]
    }
 8002c1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <vPortEnterCritical+0x58>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <vPortEnterCritical+0x58>)
 8002c26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <vPortEnterCritical+0x58>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10f      	bne.n	8002c50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <vPortEnterCritical+0x5c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <vPortEnterCritical+0x4c>
        __asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	603b      	str	r3, [r7, #0]
    }
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <vPortEnterCritical+0x4a>
    }
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <vPortExitCritical+0x24>
        __asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	607b      	str	r3, [r7, #4]
    }
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <vPortExitCritical+0x50>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <vPortExitCritical+0x42>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f383 8811 	msr	BASEPRI, r3
    }
 8002ca4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000008 	.word	0x20000008
	...

08002cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002cc0:	f3ef 8009 	mrs	r0, PSP
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <pxCurrentTCBConst>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f01e 0f10 	tst.w	lr, #16
 8002cd0:	bf08      	it	eq
 8002cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	6010      	str	r0, [r2, #0]
 8002cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ce4:	f380 8811 	msr	BASEPRI, r0
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f7fe fde0 	bl	80018b4 <vTaskSwitchContext>
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f380 8811 	msr	BASEPRI, r0
 8002cfc:	bc09      	pop	{r0, r3}
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	6808      	ldr	r0, [r1, #0]
 8002d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d06:	f01e 0f10 	tst.w	lr, #16
 8002d0a:	bf08      	it	eq
 8002d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d10:	f380 8809 	msr	PSP, r0
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	f3af 8000 	nop.w

08002d20 <pxCurrentTCBConst>:
 8002d20:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop

08002d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	607b      	str	r3, [r7, #4]
    }
 8002d40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002d42:	f001 ffeb 	bl	8004d1c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d46:	f7fe fcf9 	bl	800173c <xTaskIncrementTick>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002d50:	f002 f842 	bl	8004dd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <SysTick_Handler+0x50>)
 8002d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e001      	b.n	8002d62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002d5e:	f002 f81f 	bl	8004da0 <SEGGER_SYSVIEW_RecordExitISR>
 8002d62:	2300      	movs	r3, #0
 8002d64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f383 8811 	msr	BASEPRI, r3
    }
 8002d6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <vPortSetupTimerInterrupt+0x34>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <vPortSetupTimerInterrupt+0x38>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <vPortSetupTimerInterrupt+0x3c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <vPortSetupTimerInterrupt+0x40>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <vPortSetupTimerInterrupt+0x44>)
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <vPortSetupTimerInterrupt+0x34>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010
 8002db4:	e000e018 	.word	0xe000e018
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	10624dd3 	.word	0x10624dd3
 8002dc0:	e000e014 	.word	0xe000e014

08002dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002dd4 <vPortEnableVFP+0x10>
 8002dc8:	6801      	ldr	r1, [r0, #0]
 8002dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dce:	6001      	str	r1, [r0, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	0000      	.short	0x0000
 8002dd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop

08002ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002de2:	f3ef 8305 	mrs	r3, IPSR
 8002de6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d914      	bls.n	8002e18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002dee:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <vPortValidateInterruptPriority+0x70>)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <vPortValidateInterruptPriority+0x74>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	7afa      	ldrb	r2, [r7, #11]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20a      	bcs.n	8002e18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	607b      	str	r3, [r7, #4]
    }
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <vPortValidateInterruptPriority+0x78>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <vPortValidateInterruptPriority+0x7c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d90a      	bls.n	8002e3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	603b      	str	r3, [r7, #0]
    }
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <vPortValidateInterruptPriority+0x60>
    }
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000e3f0 	.word	0xe000e3f0
 8002e50:	20000214 	.word	0x20000214
 8002e54:	e000ed0c 	.word	0xe000ed0c
 8002e58:	20000218 	.word	0x20000218

08002e5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002e68:	f7fe fb98 	bl	800159c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e6c:	4b65      	ldr	r3, [pc, #404]	; (8003004 <pvPortMalloc+0x1a8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e74:	f000 f934 	bl	80030e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e78:	4b63      	ldr	r3, [pc, #396]	; (8003008 <pvPortMalloc+0x1ac>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 80a7 	bne.w	8002fd4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d02d      	beq.n	8002ee8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d227      	bcs.n	8002ee8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002e98:	2208      	movs	r2, #8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d021      	beq.n	8002eee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f023 0307 	bic.w	r3, r3, #7
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d214      	bcs.n	8002ee2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f023 0307 	bic.w	r3, r3, #7
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <pvPortMalloc+0x92>
        __asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	617b      	str	r3, [r7, #20]
    }
 8002ede:	bf00      	nop
 8002ee0:	e7fe      	b.n	8002ee0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ee6:	e002      	b.n	8002eee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	e000      	b.n	8002ef0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002eee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d06e      	beq.n	8002fd4 <pvPortMalloc+0x178>
 8002ef6:	4b45      	ldr	r3, [pc, #276]	; (800300c <pvPortMalloc+0x1b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d869      	bhi.n	8002fd4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f00:	4b43      	ldr	r3, [pc, #268]	; (8003010 <pvPortMalloc+0x1b4>)
 8002f02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f04:	4b42      	ldr	r3, [pc, #264]	; (8003010 <pvPortMalloc+0x1b4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f0a:	e004      	b.n	8002f16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d903      	bls.n	8002f28 <pvPortMalloc+0xcc>
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f1      	bne.n	8002f0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f28:	4b36      	ldr	r3, [pc, #216]	; (8003004 <pvPortMalloc+0x1a8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d050      	beq.n	8002fd4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2208      	movs	r2, #8
 8002f38:	4413      	add	r3, r2
 8002f3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	1ad2      	subs	r2, r2, r3
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d91f      	bls.n	8002f94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <pvPortMalloc+0x120>
        __asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	613b      	str	r3, [r7, #16]
    }
 8002f78:	bf00      	nop
 8002f7a:	e7fe      	b.n	8002f7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f8e:	69b8      	ldr	r0, [r7, #24]
 8002f90:	f000 f908 	bl	80031a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <pvPortMalloc+0x1b0>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	; (800300c <pvPortMalloc+0x1b0>)
 8002fa0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <pvPortMalloc+0x1b0>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <pvPortMalloc+0x1b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d203      	bcs.n	8002fb6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <pvPortMalloc+0x1b0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <pvPortMalloc+0x1b8>)
 8002fb4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <pvPortMalloc+0x1ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <pvPortMalloc+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <pvPortMalloc+0x1bc>)
 8002fd2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002fd4:	f7fe faf0 	bl	80015b8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <pvPortMalloc+0x19c>
        __asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	60fb      	str	r3, [r7, #12]
    }
 8002ff4:	bf00      	nop
 8002ff6:	e7fe      	b.n	8002ff6 <pvPortMalloc+0x19a>
    return pvReturn;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3728      	adds	r7, #40	; 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20012e24 	.word	0x20012e24
 8003008:	20012e38 	.word	0x20012e38
 800300c:	20012e28 	.word	0x20012e28
 8003010:	20012e1c 	.word	0x20012e1c
 8003014:	20012e2c 	.word	0x20012e2c
 8003018:	20012e30 	.word	0x20012e30

0800301c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d04d      	beq.n	80030ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800302e:	2308      	movs	r3, #8
 8003030:	425b      	negs	r3, r3
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4413      	add	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <vPortFree+0xb8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <vPortFree+0x44>
        __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	60fb      	str	r3, [r7, #12]
    }
 800305c:	bf00      	nop
 800305e:	e7fe      	b.n	800305e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <vPortFree+0x62>
        __asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	60bb      	str	r3, [r7, #8]
    }
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <vPortFree+0xb8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01e      	beq.n	80030ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11a      	bne.n	80030ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <vPortFree+0xb8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80030a4:	f7fe fa7a 	bl	800159c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <vPortFree+0xbc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <vPortFree+0xbc>)
 80030b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030b6:	6938      	ldr	r0, [r7, #16]
 80030b8:	f000 f874 	bl	80031a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <vPortFree+0xc0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a06      	ldr	r2, [pc, #24]	; (80030dc <vPortFree+0xc0>)
 80030c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030c6:	f7fe fa77 	bl	80015b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20012e38 	.word	0x20012e38
 80030d8:	20012e28 	.word	0x20012e28
 80030dc:	20012e34 	.word	0x20012e34

080030e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80030ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <prvHeapInit+0xac>)
 80030ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3307      	adds	r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0307 	bic.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	4a1f      	ldr	r2, [pc, #124]	; (800318c <prvHeapInit+0xac>)
 8003110:	4413      	add	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <prvHeapInit+0xb0>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <prvHeapInit+0xb0>)
 8003120:	2200      	movs	r2, #0
 8003122:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4413      	add	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800312c:	2208      	movs	r2, #8
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0307 	bic.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <prvHeapInit+0xb4>)
 8003140:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <prvHeapInit+0xb4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <prvHeapInit+0xb4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	1ad2      	subs	r2, r2, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <prvHeapInit+0xb4>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <prvHeapInit+0xb8>)
 800316e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4a09      	ldr	r2, [pc, #36]	; (800319c <prvHeapInit+0xbc>)
 8003176:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <prvHeapInit+0xc0>)
 800317a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	2000021c 	.word	0x2000021c
 8003190:	20012e1c 	.word	0x20012e1c
 8003194:	20012e24 	.word	0x20012e24
 8003198:	20012e2c 	.word	0x20012e2c
 800319c:	20012e28 	.word	0x20012e28
 80031a0:	20012e38 	.word	0x20012e38

080031a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <prvInsertBlockIntoFreeList+0xac>)
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e002      	b.n	80031b8 <prvInsertBlockIntoFreeList+0x14>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d8f7      	bhi.n	80031b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4413      	add	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d108      	bne.n	80031e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	441a      	add	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	441a      	add	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d118      	bne.n	800322c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <prvInsertBlockIntoFreeList+0xb0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d00d      	beq.n	8003222 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e008      	b.n	8003234 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <prvInsertBlockIntoFreeList+0xb0>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e003      	b.n	8003234 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d002      	beq.n	8003242 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20012e1c 	.word	0x20012e1c
 8003254:	20012e24 	.word	0x20012e24

08003258 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800325c:	4803      	ldr	r0, [pc, #12]	; (800326c <_cbSendSystemDesc+0x14>)
 800325e:	f001 fd07 	bl	8004c70 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003262:	4803      	ldr	r0, [pc, #12]	; (8003270 <_cbSendSystemDesc+0x18>)
 8003264:	f001 fd04 	bl	8004c70 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}
 800326c:	08005b4c 	.word	0x08005b4c
 8003270:	08005b7c 	.word	0x08005b7c

08003274 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <SEGGER_SYSVIEW_Conf+0x20>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SEGGER_SYSVIEW_Conf+0x20>)
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SEGGER_SYSVIEW_Conf+0x24>)
 8003282:	4a06      	ldr	r2, [pc, #24]	; (800329c <SEGGER_SYSVIEW_Conf+0x28>)
 8003284:	f001 f870 	bl	8004368 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003288:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800328c:	f001 f8b0 	bl	80043f0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000000 	.word	0x20000000
 8003298:	08003259 	.word	0x08003259
 800329c:	08005c04 	.word	0x08005c04

080032a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	e033      	b.n	8003314 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80032ac:	491e      	ldr	r1, [pc, #120]	; (8003328 <_cbSendTaskList+0x88>)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	491a      	ldr	r1, [pc, #104]	; (8003328 <_cbSendTaskList+0x88>)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3304      	adds	r3, #4
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	4c16      	ldr	r4, [pc, #88]	; (8003328 <_cbSendTaskList+0x88>)
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4423      	add	r3, r4
 80032dc:	3308      	adds	r3, #8
 80032de:	681c      	ldr	r4, [r3, #0]
 80032e0:	4d11      	ldr	r5, [pc, #68]	; (8003328 <_cbSendTaskList+0x88>)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	442b      	add	r3, r5
 80032ee:	330c      	adds	r3, #12
 80032f0:	681d      	ldr	r5, [r3, #0]
 80032f2:	4e0d      	ldr	r6, [pc, #52]	; (8003328 <_cbSendTaskList+0x88>)
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4433      	add	r3, r6
 8003300:	3310      	adds	r3, #16
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	462b      	mov	r3, r5
 8003308:	4622      	mov	r2, r4
 800330a:	f000 f8bd 	bl	8003488 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3301      	adds	r3, #1
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <_cbSendTaskList+0x8c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	429a      	cmp	r2, r3
 800331c:	d3c6      	bcc.n	80032ac <_cbSendTaskList+0xc>
  }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003328:	20012e3c 	.word	0x20012e3c
 800332c:	20012edc 	.word	0x20012edc

08003330 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003338:	f7fe f9ee 	bl	8001718 <xTaskGetTickCountFromISR>
 800333c:	4603      	mov	r3, r0
 800333e:	2200      	movs	r2, #0
 8003340:	469a      	mov	sl, r3
 8003342:	4693      	mov	fp, r2
 8003344:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	f04f 0a00 	mov.w	sl, #0
 8003354:	f04f 0b00 	mov.w	fp, #0
 8003358:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800335c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003360:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003364:	4652      	mov	r2, sl
 8003366:	465b      	mov	r3, fp
 8003368:	1a14      	subs	r4, r2, r0
 800336a:	eb63 0501 	sbc.w	r5, r3, r1
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	00ab      	lsls	r3, r5, #2
 8003378:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800337c:	00a2      	lsls	r2, r4, #2
 800337e:	4614      	mov	r4, r2
 8003380:	461d      	mov	r5, r3
 8003382:	eb14 0800 	adds.w	r8, r4, r0
 8003386:	eb45 0901 	adc.w	r9, r5, r1
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800339e:	4690      	mov	r8, r2
 80033a0:	4699      	mov	r9, r3
 80033a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80033a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80033c6:	2205      	movs	r2, #5
 80033c8:	492b      	ldr	r1, [pc, #172]	; (8003478 <SYSVIEW_AddTask+0xc0>)
 80033ca:	68b8      	ldr	r0, [r7, #8]
 80033cc:	f002 fb6a 	bl	8005aa4 <memcmp>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d04b      	beq.n	800346e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <SYSVIEW_AddTask+0xc4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b07      	cmp	r3, #7
 80033dc:	d903      	bls.n	80033e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80033de:	4828      	ldr	r0, [pc, #160]	; (8003480 <SYSVIEW_AddTask+0xc8>)
 80033e0:	f001 ff44 	bl	800526c <SEGGER_SYSVIEW_Warn>
    return;
 80033e4:	e044      	b.n	8003470 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <SYSVIEW_AddTask+0xc4>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4926      	ldr	r1, [pc, #152]	; (8003484 <SYSVIEW_AddTask+0xcc>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <SYSVIEW_AddTask+0xc4>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4921      	ldr	r1, [pc, #132]	; (8003484 <SYSVIEW_AddTask+0xcc>)
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3304      	adds	r3, #4
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <SYSVIEW_AddTask+0xc4>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	491b      	ldr	r1, [pc, #108]	; (8003484 <SYSVIEW_AddTask+0xcc>)
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3308      	adds	r3, #8
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <SYSVIEW_AddTask+0xc4>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4916      	ldr	r1, [pc, #88]	; (8003484 <SYSVIEW_AddTask+0xcc>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	330c      	adds	r3, #12
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <SYSVIEW_AddTask+0xc4>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4910      	ldr	r1, [pc, #64]	; (8003484 <SYSVIEW_AddTask+0xcc>)
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3310      	adds	r3, #16
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <SYSVIEW_AddTask+0xc4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	4a08      	ldr	r2, [pc, #32]	; (800347c <SYSVIEW_AddTask+0xc4>)
 800345a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f80e 	bl	8003488 <SYSVIEW_SendTaskInfo>
 800346c:	e000      	b.n	8003470 <SYSVIEW_AddTask+0xb8>
    return;
 800346e:	bf00      	nop

}
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	08005b8c 	.word	0x08005b8c
 800347c:	20012edc 	.word	0x20012edc
 8003480:	08005b94 	.word	0x08005b94
 8003484:	20012e3c 	.word	0x20012e3c

08003488 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	2214      	movs	r2, #20
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 fb1e 	bl	8005ae0 <memset>
  TaskInfo.TaskID     = TaskID;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fadf 	bl	8004a80 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80034c2:	bf00      	nop
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	db0b      	blt.n	80034f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <__NVIC_EnableIRQ+0x38>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2001      	movs	r0, #1
 80034ee:	fa00 f202 	lsl.w	r2, r0, r2
 80034f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000e100 	.word	0xe000e100

08003508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0a      	blt.n	8003532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	490c      	ldr	r1, [pc, #48]	; (8003554 <__NVIC_SetPriority+0x4c>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	440b      	add	r3, r1
 800352c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003530:	e00a      	b.n	8003548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <__NVIC_SetPriority+0x50>)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3b04      	subs	r3, #4
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	440b      	add	r3, r1
 8003546:	761a      	strb	r2, [r3, #24]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003562:	f001 fedf 	bl	8005324 <SEGGER_SYSVIEW_IsStarted>
 8003566:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800356e:	f001 f90b 	bl	8004788 <SEGGER_SYSVIEW_Start>
  }
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <_cbOnUARTRx+0x3c>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d806      	bhi.n	800359c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <_cbOnUARTRx+0x3c>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <_cbOnUARTRx+0x3c>)
 8003598:	701a      	strb	r2, [r3, #0]
    goto Done;
 800359a:	e009      	b.n	80035b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800359c:	f7ff ffde 	bl	800355c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <_cbOnUARTRx+0x3c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	2201      	movs	r2, #1
 80035aa:	4619      	mov	r1, r3
 80035ac:	f000 fb9a 	bl	8003ce4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80035b0:	bf00      	nop
}
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	2000000c 	.word	0x2000000c

080035bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <_cbOnUARTTx+0x5c>)
 80035c6:	785b      	ldrb	r3, [r3, #1]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d80f      	bhi.n	80035ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <_cbOnUARTTx+0x5c>)
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <_cbOnUARTTx+0x60>)
 80035d4:	5c9a      	ldrb	r2, [r3, r2]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <_cbOnUARTTx+0x5c>)
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	3301      	adds	r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <_cbOnUARTTx+0x5c>)
 80035e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80035ea:	e00f      	b.n	800360c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <_cbOnUARTTx+0x5c>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fa19 	bl	8003a2c <SEGGER_RTT_ReadUpBufferNoLock>
 80035fa:	4603      	mov	r3, r0
 80035fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	da02      	bge.n	800360a <_cbOnUARTTx+0x4e>
    r = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e000      	b.n	800360c <_cbOnUARTTx+0x50>
  }
Done:
 800360a:	bf00      	nop
  return r;
 800360c:	68fb      	ldr	r3, [r7, #12]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	2000000c 	.word	0x2000000c
 800361c:	08005c0c 	.word	0x08005c0c

08003620 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <SEGGER_UART_init+0x1c>)
 800362a:	4905      	ldr	r1, [pc, #20]	; (8003640 <SEGGER_UART_init+0x20>)
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f863 	bl	80036f8 <HIF_UART_Init>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	0800357d 	.word	0x0800357d
 8003640:	080035bd 	.word	0x080035bd

08003644 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <USART2_IRQHandler+0x80>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d011      	beq.n	800367e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <USART2_IRQHandler+0x84>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 030b 	and.w	r3, r3, #11
 8003668:	2b00      	cmp	r3, #0
 800366a:	d108      	bne.n	800367e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <USART2_IRQHandler+0x88>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <USART2_IRQHandler+0x88>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	79fa      	ldrb	r2, [r7, #7]
 800367a:	4610      	mov	r0, r2
 800367c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01a      	beq.n	80036be <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003688:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <USART2_IRQHandler+0x8c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <USART2_IRQHandler+0x8c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1dfa      	adds	r2, r7, #7
 8003696:	4610      	mov	r0, r2
 8003698:	4798      	blx	r3
 800369a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <USART2_IRQHandler+0x90>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <USART2_IRQHandler+0x90>)
 80036a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e006      	b.n	80036be <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <USART2_IRQHandler+0x80>)
 80036b2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80036b4:	79fa      	ldrb	r2, [r7, #7]
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <USART2_IRQHandler+0x84>)
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e000      	b.n	80036be <USART2_IRQHandler+0x7a>
      return;
 80036bc:	bf00      	nop
    }
  }
}
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40004400 	.word	0x40004400
 80036c8:	40004404 	.word	0x40004404
 80036cc:	20012ee0 	.word	0x20012ee0
 80036d0:	20012ee4 	.word	0x20012ee4
 80036d4:	4000440c 	.word	0x4000440c

080036d8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80036e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	4000440c 	.word	0x4000440c

080036f8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HIF_UART_Init+0xc8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a2d      	ldr	r2, [pc, #180]	; (80037c0 <HIF_UART_Init+0xc8>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003710:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <HIF_UART_Init+0xcc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2b      	ldr	r2, [pc, #172]	; (80037c4 <HIF_UART_Init+0xcc>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HIF_UART_Init+0xd0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003728:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003730:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <HIF_UART_Init+0xd0>)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HIF_UART_Init+0xd4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003744:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800374c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HIF_UART_Init+0xd4>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003754:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <HIF_UART_Init+0xd8>)
 8003756:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800375a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HIF_UART_Init+0xdc>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HIF_UART_Init+0xe0>)
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HIF_UART_Init+0xe4>)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	3301      	adds	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	d302      	bcc.n	800378e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003788:	f640 73ff 	movw	r3, #4095	; 0xfff
 800378c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	4a11      	ldr	r2, [pc, #68]	; (80037e0 <HIF_UART_Init+0xe8>)
 800379a:	b29b      	uxth	r3, r3
 800379c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800379e:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <HIF_UART_Init+0xec>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80037a4:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <HIF_UART_Init+0xf0>)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80037aa:	2106      	movs	r1, #6
 80037ac:	2026      	movs	r0, #38	; 0x26
 80037ae:	f7ff feab 	bl	8003508 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80037b2:	2026      	movs	r0, #38	; 0x26
 80037b4:	f7ff fe8a 	bl	80034cc <__NVIC_EnableIRQ>
}
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40023840 	.word	0x40023840
 80037c4:	40023830 	.word	0x40023830
 80037c8:	40020020 	.word	0x40020020
 80037cc:	40020000 	.word	0x40020000
 80037d0:	4000440c 	.word	0x4000440c
 80037d4:	40004410 	.word	0x40004410
 80037d8:	40004414 	.word	0x40004414
 80037dc:	05f5e100 	.word	0x05f5e100
 80037e0:	40004408 	.word	0x40004408
 80037e4:	20012ee0 	.word	0x20012ee0
 80037e8:	20012ee4 	.word	0x20012ee4

080037ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80037f2:	4b24      	ldr	r3, [pc, #144]	; (8003884 <_DoInit+0x98>)
 80037f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2203      	movs	r2, #3
 8003800:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <_DoInit+0x9c>)
 8003806:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a20      	ldr	r2, [pc, #128]	; (800388c <_DoInit+0xa0>)
 800380c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003814:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a17      	ldr	r2, [pc, #92]	; (8003888 <_DoInit+0x9c>)
 800382c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a17      	ldr	r2, [pc, #92]	; (8003890 <_DoInit+0xa4>)
 8003832:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2210      	movs	r2, #16
 8003838:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3307      	adds	r3, #7
 8003850:	4a10      	ldr	r2, [pc, #64]	; (8003894 <_DoInit+0xa8>)
 8003852:	6810      	ldr	r0, [r2, #0]
 8003854:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003856:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <_DoInit+0xac>)
 800385e:	6810      	ldr	r0, [r2, #0]
 8003860:	6018      	str	r0, [r3, #0]
 8003862:	8891      	ldrh	r1, [r2, #4]
 8003864:	7992      	ldrb	r2, [r2, #6]
 8003866:	8099      	strh	r1, [r3, #4]
 8003868:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800386a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003874:	f3bf 8f5f 	dmb	sy
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	20012ee8 	.word	0x20012ee8
 8003888:	08005be4 	.word	0x08005be4
 800388c:	20012f90 	.word	0x20012f90
 8003890:	20013390 	.word	0x20013390
 8003894:	08005bf0 	.word	0x08005bf0
 8003898:	08005bf4 	.word	0x08005bf4

0800389c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d905      	bls.n	80038cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ca:	e007      	b.n	80038dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1acb      	subs	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3b01      	subs	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	4293      	cmp	r3, r2
 80038e8:	bf28      	it	cs
 80038ea:	4613      	movcs	r3, r2
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4293      	cmp	r3, r2
 80038f4:	bf28      	it	cs
 80038f6:	4613      	movcs	r3, r2
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	6978      	ldr	r0, [r7, #20]
 800390a:	f002 f8db 	bl	8005ac4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800390e:	6a3a      	ldr	r2, [r7, #32]
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	4413      	add	r3, r2
 8003914:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	4413      	add	r3, r2
 800391c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	4413      	add	r3, r2
 800392c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	429a      	cmp	r2, r3
 8003936:	d101      	bne.n	800393c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800393c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1b2      	bne.n	80038b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800394c:	6a3b      	ldr	r3, [r7, #32]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3728      	adds	r7, #40	; 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003956:	b580      	push	{r7, lr}
 8003958:	b088      	sub	sp, #32
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d911      	bls.n	800399e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	6938      	ldr	r0, [r7, #16]
 800398a:	f002 f89b 	bl	8005ac4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800398e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800399c:	e01f      	b.n	80039de <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	6938      	ldr	r0, [r7, #16]
 80039b2:	f002 f887 	bl	8005ac4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	4413      	add	r3, r2
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4619      	mov	r1, r3
 80039ce:	6938      	ldr	r0, [r7, #16]
 80039d0:	f002 f878 	bl	8005ac4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039d4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	60da      	str	r2, [r3, #12]
}
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80039e6:	b480      	push	{r7}
 80039e8:	b087      	sub	sp, #28
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d808      	bhi.n	8003a14 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad2      	subs	r2, r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e004      	b.n	8003a1e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003a1e:	697b      	ldr	r3, [r7, #20]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	; 0x30
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003a38:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003a46:	f7ff fed1 	bl	80037ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4a37      	ldr	r2, [pc, #220]	; (8003b34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d92b      	bls.n	8003ad0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4293      	cmp	r3, r2
 8003a88:	bf28      	it	cs
 8003a8a:	4613      	movcs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	4413      	add	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	6939      	ldr	r1, [r7, #16]
 8003a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a9e:	f002 f811 	bl	8005ac4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4413      	add	r3, r2
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4413      	add	r3, r2
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d101      	bne.n	8003ad0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf28      	it	cs
 8003ae0:	4613      	movcs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d019      	beq.n	8003b1e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	4413      	add	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003afa:	f001 ffe3 	bl	8005ac4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4413      	add	r3, r2
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3730      	adds	r7, #48	; 0x30
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20012ee8 	.word	0x20012ee8

08003b38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b44:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <SEGGER_RTT_ReadNoLock+0x1e>
 8003b52:	f7ff fe4b 	bl	80037ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	3360      	adds	r3, #96	; 0x60
 8003b62:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b64:	4413      	add	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d92b      	bls.n	8003bdc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bf28      	it	cs
 8003b96:	4613      	movcs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	4413      	add	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003baa:	f001 ff8b 	bl	8005ac4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d101      	bne.n	8003bdc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4293      	cmp	r3, r2
 8003bea:	bf28      	it	cs
 8003bec:	4613      	movcs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d019      	beq.n	8003c2a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	4413      	add	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c06:	f001 ff5d 	bl	8005ac4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4413      	add	r3, r2
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4413      	add	r3, r2
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3730      	adds	r7, #48	; 0x30
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20012ee8 	.word	0x20012ee8

08003c44 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	3360      	adds	r3, #96	; 0x60
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003c62:	4413      	add	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d029      	beq.n	8003cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d82e      	bhi.n	8003cd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d013      	beq.n	8003ca2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003c7a:	e029      	b.n	8003cd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c7c:	6978      	ldr	r0, [r7, #20]
 8003c7e:	f7ff feb2 	bl	80039e6 <_GetAvailWriteSpace>
 8003c82:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d202      	bcs.n	8003c92 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003c90:	e021      	b.n	8003cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	69b9      	ldr	r1, [r7, #24]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff fe5b 	bl	8003956 <_WriteNoCheck>
    break;
 8003ca0:	e019      	b.n	8003cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7ff fe9f 	bl	80039e6 <_GetAvailWriteSpace>
 8003ca8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	bf28      	it	cs
 8003cb2:	4613      	movcs	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	6978      	ldr	r0, [r7, #20]
 8003cbc:	f7ff fe4b 	bl	8003956 <_WriteNoCheck>
    break;
 8003cc0:	e009      	b.n	8003cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7ff fde8 	bl	800389c <_WriteBlocking>
 8003ccc:	61f8      	str	r0, [r7, #28]
    break;
 8003cce:	e002      	b.n	8003cd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
    break;
 8003cd4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20012ee8 	.word	0x20012ee8

08003ce4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003cfe:	f7ff fd75 	bl	80037ec <_DoInit>
  SEGGER_RTT_LOCK();
 8003d02:	f3ef 8311 	mrs	r3, BASEPRI
 8003d06:	f04f 0120 	mov.w	r1, #32
 8003d0a:	f381 8811 	msr	BASEPRI, r1
 8003d0e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff ff95 	bl	8003c44 <SEGGER_RTT_WriteDownBufferNoLock>
 8003d1a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003d22:	697b      	ldr	r3, [r7, #20]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20012ee8 	.word	0x20012ee8

08003d30 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003d4c:	f7ff fd4e 	bl	80037ec <_DoInit>
  SEGGER_RTT_LOCK();
 8003d50:	f3ef 8311 	mrs	r3, BASEPRI
 8003d54:	f04f 0120 	mov.w	r1, #32
 8003d58:	f381 8811 	msr	BASEPRI, r1
 8003d5c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d5e:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003d60:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003d66:	6939      	ldr	r1, [r7, #16]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	440b      	add	r3, r1
 8003d76:	3304      	adds	r3, #4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	dbeb      	blt.n	8003d66 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003d8e:	e000      	b.n	8003d92 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003d90:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	da3f      	bge.n	8003e1c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003d9c:	6939      	ldr	r1, [r7, #16]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	4613      	mov	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	440b      	add	r3, r1
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003db0:	6939      	ldr	r1, [r7, #16]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	4613      	mov	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003dc6:	6939      	ldr	r1, [r7, #16]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3320      	adds	r3, #32
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003dda:	6939      	ldr	r1, [r7, #16]
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	4613      	mov	r3, r2
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	3328      	adds	r3, #40	; 0x28
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003dee:	6939      	ldr	r1, [r7, #16]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3324      	adds	r3, #36	; 0x24
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003e02:	6939      	ldr	r1, [r7, #16]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	440b      	add	r3, r1
 8003e10:	332c      	adds	r3, #44	; 0x2c
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e16:	f3bf 8f5f 	dmb	sy
 8003e1a:	e002      	b.n	8003e22 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e20:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003e28:	69fb      	ldr	r3, [r7, #28]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20012ee8 	.word	0x20012ee8

08003e38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e46:	4b33      	ldr	r3, [pc, #204]	; (8003f14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003e54:	f7ff fcca 	bl	80037ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e58:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003e5a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	461a      	mov	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d24d      	bcs.n	8003f04 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003e68:	f3ef 8311 	mrs	r3, BASEPRI
 8003e6c:	f04f 0120 	mov.w	r1, #32
 8003e70:	f381 8811 	msr	BASEPRI, r1
 8003e74:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d031      	beq.n	8003ee0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	3360      	adds	r3, #96	; 0x60
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3364      	adds	r3, #100	; 0x64
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3368      	adds	r3, #104	; 0x68
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003eb8:	6979      	ldr	r1, [r7, #20]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3370      	adds	r3, #112	; 0x70
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003ecc:	6979      	ldr	r1, [r7, #20]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	336c      	adds	r3, #108	; 0x6c
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003ee0:	6979      	ldr	r1, [r7, #20]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	3374      	adds	r3, #116	; 0x74
 8003ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ef4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e002      	b.n	8003f0a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f08:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20012ee8 	.word	0x20012ee8

08003f18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f28:	e002      	b.n	8003f30 <_EncodeStr+0x18>
    Len++;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f6      	bne.n	8003f2a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d901      	bls.n	8003f48 <_EncodeStr+0x30>
    Len = Limit;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2bfe      	cmp	r3, #254	; 0xfe
 8003f4c:	d806      	bhi.n	8003f5c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	60fa      	str	r2, [r7, #12]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e011      	b.n	8003f80 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	60fa      	str	r2, [r7, #12]
 8003f62:	22ff      	movs	r2, #255	; 0xff
 8003f64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	60fa      	str	r2, [r7, #12]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	0a19      	lsrs	r1, r3, #8
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	60fa      	str	r2, [r7, #12]
 8003f7c:	b2ca      	uxtb	r2, r1
 8003f7e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f84:	e00a      	b.n	8003f9c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	1c53      	adds	r3, r2, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	60f9      	str	r1, [r7, #12]
 8003f92:	7812      	ldrb	r2, [r2, #0]
 8003f94:	701a      	strb	r2, [r3, #0]
    n++;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3f0      	bcc.n	8003f86 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <_HandleIncomingPacket+0xe0>)
 8003fd4:	7e1b      	ldrb	r3, [r3, #24]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	1cfb      	adds	r3, r7, #3
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f7ff fdab 	bl	8003b38 <SEGGER_RTT_ReadNoLock>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dd54      	ble.n	8004096 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d032      	beq.n	8004058 <_HandleIncomingPacket+0x8c>
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	dc42      	bgt.n	800407c <_HandleIncomingPacket+0xb0>
 8003ff6:	2b07      	cmp	r3, #7
 8003ff8:	dc16      	bgt.n	8004028 <_HandleIncomingPacket+0x5c>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	dd3e      	ble.n	800407c <_HandleIncomingPacket+0xb0>
 8003ffe:	3b01      	subs	r3, #1
 8004000:	2b06      	cmp	r3, #6
 8004002:	d83b      	bhi.n	800407c <_HandleIncomingPacket+0xb0>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <_HandleIncomingPacket+0x40>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	0800402f 	.word	0x0800402f
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403b 	.word	0x0800403b
 8004018:	08004041 	.word	0x08004041
 800401c:	08004047 	.word	0x08004047
 8004020:	0800404d 	.word	0x0800404d
 8004024:	08004053 	.word	0x08004053
 8004028:	2b7f      	cmp	r3, #127	; 0x7f
 800402a:	d036      	beq.n	800409a <_HandleIncomingPacket+0xce>
 800402c:	e026      	b.n	800407c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800402e:	f000 fbab 	bl	8004788 <SEGGER_SYSVIEW_Start>
      break;
 8004032:	e037      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004034:	f000 fc64 	bl	8004900 <SEGGER_SYSVIEW_Stop>
      break;
 8004038:	e034      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800403a:	f000 fe3d 	bl	8004cb8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800403e:	e031      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004040:	f000 fe02 	bl	8004c48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004044:	e02e      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004046:	f000 fc81 	bl	800494c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800404a:	e02b      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800404c:	f001 f8d0 	bl	80051f0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004050:	e028      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004052:	f001 f8af 	bl	80051b4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004056:	e025      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <_HandleIncomingPacket+0xe0>)
 800405a:	7e1b      	ldrb	r3, [r3, #24]
 800405c:	4618      	mov	r0, r3
 800405e:	1cfb      	adds	r3, r7, #3
 8004060:	2201      	movs	r2, #1
 8004062:	4619      	mov	r1, r3
 8004064:	f7ff fd68 	bl	8003b38 <SEGGER_RTT_ReadNoLock>
 8004068:	4603      	mov	r3, r0
 800406a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	dd15      	ble.n	800409e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f81d 	bl	80050b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800407a:	e010      	b.n	800409e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	b25b      	sxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	da0e      	bge.n	80040a2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <_HandleIncomingPacket+0xe0>)
 8004086:	7e1b      	ldrb	r3, [r3, #24]
 8004088:	4618      	mov	r0, r3
 800408a:	1cfb      	adds	r3, r7, #3
 800408c:	2201      	movs	r2, #1
 800408e:	4619      	mov	r1, r3
 8004090:	f7ff fd52 	bl	8003b38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004094:	e005      	b.n	80040a2 <_HandleIncomingPacket+0xd6>
    }
  }
 8004096:	bf00      	nop
 8004098:	e004      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
      break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
      break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <_HandleIncomingPacket+0xd8>
      break;
 80040a2:	bf00      	nop
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	200143a8 	.word	0x200143a8

080040b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80040b6:	2301      	movs	r3, #1
 80040b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	3301      	adds	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c4:	4b32      	ldr	r3, [pc, #200]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ca:	e00b      	b.n	80040e4 <_TrySendOverflowPacket+0x34>
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	09db      	lsrs	r3, r3, #7
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	2b7f      	cmp	r3, #127	; 0x7f
 80040e8:	d8f0      	bhi.n	80040cc <_TrySendOverflowPacket+0x1c>
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <_TrySendOverflowPacket+0xe4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	e00b      	b.n	800412c <_TrySendOverflowPacket+0x7c>
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	1c59      	adds	r1, r3, #1
 800411c:	6279      	str	r1, [r7, #36]	; 0x24
 800411e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	09db      	lsrs	r3, r3, #7
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	2b7f      	cmp	r3, #127	; 0x7f
 8004130:	d8f0      	bhi.n	8004114 <_TrySendOverflowPacket+0x64>
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	627a      	str	r2, [r7, #36]	; 0x24
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 8004144:	785b      	ldrb	r3, [r3, #1]
 8004146:	4618      	mov	r0, r3
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	461a      	mov	r2, r3
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	4619      	mov	r1, r3
 8004154:	f7fc f844 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004158:	4603      	mov	r3, r0
 800415a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800415c:	f7ff fabc 	bl	80036d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e004      	b.n	8004184 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	3301      	adds	r3, #1
 8004180:	4a03      	ldr	r2, [pc, #12]	; (8004190 <_TrySendOverflowPacket+0xe0>)
 8004182:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004184:	693b      	ldr	r3, [r7, #16]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3730      	adds	r7, #48	; 0x30
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200143a8 	.word	0x200143a8
 8004194:	e0001004 	.word	0xe0001004

08004198 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80041a4:	4b6d      	ldr	r3, [pc, #436]	; (800435c <_SendPacket+0x1c4>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d010      	beq.n	80041ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80041ac:	4b6b      	ldr	r3, [pc, #428]	; (800435c <_SendPacket+0x1c4>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a5 	beq.w	8004300 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80041b6:	4b69      	ldr	r3, [pc, #420]	; (800435c <_SendPacket+0x1c4>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d109      	bne.n	80041d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80041be:	f7ff ff77 	bl	80040b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80041c2:	4b66      	ldr	r3, [pc, #408]	; (800435c <_SendPacket+0x1c4>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	f040 809c 	bne.w	8004304 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80041cc:	e001      	b.n	80041d2 <_SendPacket+0x3a>
    goto Send;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <_SendPacket+0x3c>
Send:
 80041d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b1f      	cmp	r3, #31
 80041d8:	d809      	bhi.n	80041ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80041da:	4b60      	ldr	r3, [pc, #384]	; (800435c <_SendPacket+0x1c4>)
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 808d 	bne.w	8004308 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b17      	cmp	r3, #23
 80041f2:	d807      	bhi.n	8004204 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e03d      	b.n	8004280 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b7f      	cmp	r3, #127	; 0x7f
 8004210:	d912      	bls.n	8004238 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	09da      	lsrs	r2, r3, #7
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b01      	subs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	3a01      	subs	r2, #1
 800422a:	60fa      	str	r2, [r7, #12]
 800422c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e006      	b.n	8004246 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b7f      	cmp	r3, #127	; 0x7f
 800424a:	d912      	bls.n	8004272 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	09da      	lsrs	r2, r3, #7
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3b01      	subs	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	3a01      	subs	r2, #1
 8004264:	60fa      	str	r2, [r7, #12]
 8004266:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e006      	b.n	8004280 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b01      	subs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004280:	4b37      	ldr	r3, [pc, #220]	; (8004360 <_SendPacket+0x1c8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004286:	4b35      	ldr	r3, [pc, #212]	; (800435c <_SendPacket+0x1c4>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	e00b      	b.n	80042b2 <_SendPacket+0x11a>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	6279      	str	r1, [r7, #36]	; 0x24
 80042a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	d8f0      	bhi.n	800429a <_SendPacket+0x102>
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	627a      	str	r2, [r7, #36]	; 0x24
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80042c8:	4b24      	ldr	r3, [pc, #144]	; (800435c <_SendPacket+0x1c4>)
 80042ca:	785b      	ldrb	r3, [r3, #1]
 80042cc:	4618      	mov	r0, r3
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	f7fb ff82 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042dc:	4603      	mov	r3, r0
 80042de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80042e0:	f7ff f9fa 	bl	80036d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042ea:	4a1c      	ldr	r2, [pc, #112]	; (800435c <_SendPacket+0x1c4>)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	60d3      	str	r3, [r2, #12]
 80042f0:	e00b      	b.n	800430a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80042f2:	4b1a      	ldr	r3, [pc, #104]	; (800435c <_SendPacket+0x1c4>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <_SendPacket+0x1c4>)
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e004      	b.n	800430a <_SendPacket+0x172>
    goto SendDone;
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <_SendPacket+0x172>
      goto SendDone;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <_SendPacket+0x172>
      goto SendDone;
 8004308:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <_SendPacket+0x1c4>)
 800430c:	7e1b      	ldrb	r3, [r3, #24]
 800430e:	4619      	mov	r1, r3
 8004310:	4a14      	ldr	r2, [pc, #80]	; (8004364 <_SendPacket+0x1cc>)
 8004312:	460b      	mov	r3, r1
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	440b      	add	r3, r1
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	336c      	adds	r3, #108	; 0x6c
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <_SendPacket+0x1c4>)
 8004322:	7e1b      	ldrb	r3, [r3, #24]
 8004324:	4618      	mov	r0, r3
 8004326:	490f      	ldr	r1, [pc, #60]	; (8004364 <_SendPacket+0x1cc>)
 8004328:	4603      	mov	r3, r0
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4403      	add	r3, r0
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	440b      	add	r3, r1
 8004332:	3370      	adds	r3, #112	; 0x70
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d00b      	beq.n	8004352 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <_SendPacket+0x1c4>)
 800433c:	789b      	ldrb	r3, [r3, #2]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d107      	bne.n	8004352 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <_SendPacket+0x1c4>)
 8004344:	2201      	movs	r2, #1
 8004346:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004348:	f7ff fe40 	bl	8003fcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800434c:	4b03      	ldr	r3, [pc, #12]	; (800435c <_SendPacket+0x1c4>)
 800434e:	2200      	movs	r2, #0
 8004350:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004352:	bf00      	nop
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	200143a8 	.word	0x200143a8
 8004360:	e0001004 	.word	0xe0001004
 8004364:	20012ee8 	.word	0x20012ee8

08004368 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004376:	2300      	movs	r3, #0
 8004378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800437c:	4917      	ldr	r1, [pc, #92]	; (80043dc <SEGGER_SYSVIEW_Init+0x74>)
 800437e:	4818      	ldr	r0, [pc, #96]	; (80043e0 <SEGGER_SYSVIEW_Init+0x78>)
 8004380:	f7ff fcd6 	bl	8003d30 <SEGGER_RTT_AllocUpBuffer>
 8004384:	4603      	mov	r3, r0
 8004386:	b2da      	uxtb	r2, r3
 8004388:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800438a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800438c:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800438e:	785a      	ldrb	r2, [r3, #1]
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004392:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004396:	7e1b      	ldrb	r3, [r3, #24]
 8004398:	4618      	mov	r0, r3
 800439a:	2300      	movs	r3, #0
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	2308      	movs	r3, #8
 80043a0:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <SEGGER_SYSVIEW_Init+0x80>)
 80043a2:	490f      	ldr	r1, [pc, #60]	; (80043e0 <SEGGER_SYSVIEW_Init+0x78>)
 80043a4:	f7ff fd48 	bl	8003e38 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <SEGGER_SYSVIEW_Init+0x84>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80043b4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80043b6:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80043c2:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80043c8:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	200133a0 	.word	0x200133a0
 80043e0:	08005bfc 	.word	0x08005bfc
 80043e4:	200143a8 	.word	0x200143a8
 80043e8:	200143a0 	.word	0x200143a0
 80043ec:	e0001004 	.word	0xe0001004

080043f0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6113      	str	r3, [r2, #16]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200143a8 	.word	0x200143a8

08004410 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004418:	f3ef 8311 	mrs	r3, BASEPRI
 800441c:	f04f 0120 	mov.w	r1, #32
 8004420:	f381 8811 	msr	BASEPRI, r1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	4808      	ldr	r0, [pc, #32]	; (8004448 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004428:	f7ff fdc3 	bl	8003fb2 <_PreparePacket>
 800442c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	68b8      	ldr	r0, [r7, #8]
 8004434:	f7ff feb0 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f383 8811 	msr	BASEPRI, r3
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200143d8 	.word	0x200143d8

0800444c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004456:	f3ef 8311 	mrs	r3, BASEPRI
 800445a:	f04f 0120 	mov.w	r1, #32
 800445e:	f381 8811 	msr	BASEPRI, r1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	4816      	ldr	r0, [pc, #88]	; (80044c0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004466:	f7ff fda4 	bl	8003fb2 <_PreparePacket>
 800446a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e00b      	b.n	8004492 <SEGGER_SYSVIEW_RecordU32+0x46>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	1c59      	adds	r1, r3, #1
 8004482:	61f9      	str	r1, [r7, #28]
 8004484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	09db      	lsrs	r3, r3, #7
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b7f      	cmp	r3, #127	; 0x7f
 8004496:	d8f0      	bhi.n	800447a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	6938      	ldr	r0, [r7, #16]
 80044ae:	f7ff fe73 	bl	8004198 <_SendPacket>
  RECORD_END();
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f383 8811 	msr	BASEPRI, r3
}
 80044b8:	bf00      	nop
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200143d8 	.word	0x200143d8

080044c4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80044d0:	f3ef 8311 	mrs	r3, BASEPRI
 80044d4:	f04f 0120 	mov.w	r1, #32
 80044d8:	f381 8811 	msr	BASEPRI, r1
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	4825      	ldr	r0, [pc, #148]	; (8004574 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80044e0:	f7ff fd67 	bl	8003fb2 <_PreparePacket>
 80044e4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f2:	e00b      	b.n	800450c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	09db      	lsrs	r3, r3, #7
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	2b7f      	cmp	r3, #127	; 0x7f
 8004510:	d8f0      	bhi.n	80044f4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	e00b      	b.n	8004544 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	1c59      	adds	r1, r3, #1
 8004534:	6279      	str	r1, [r7, #36]	; 0x24
 8004536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	09db      	lsrs	r3, r3, #7
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	2b7f      	cmp	r3, #127	; 0x7f
 8004548:	d8f0      	bhi.n	800452c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	627a      	str	r2, [r7, #36]	; 0x24
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	6979      	ldr	r1, [r7, #20]
 800455e:	69b8      	ldr	r0, [r7, #24]
 8004560:	f7ff fe1a 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f383 8811 	msr	BASEPRI, r3
}
 800456a:	bf00      	nop
 800456c:	3730      	adds	r7, #48	; 0x30
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200143d8 	.word	0x200143d8

08004578 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b08e      	sub	sp, #56	; 0x38
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004586:	f3ef 8311 	mrs	r3, BASEPRI
 800458a:	f04f 0120 	mov.w	r1, #32
 800458e:	f381 8811 	msr	BASEPRI, r1
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	4832      	ldr	r0, [pc, #200]	; (8004660 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004596:	f7ff fd0c 	bl	8003fb2 <_PreparePacket>
 800459a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
 80045a8:	e00b      	b.n	80045c2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b0:	1c59      	adds	r1, r3, #1
 80045b2:	6379      	str	r1, [r7, #52]	; 0x34
 80045b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	09db      	lsrs	r3, r3, #7
 80045c0:	633b      	str	r3, [r7, #48]	; 0x30
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	2b7f      	cmp	r3, #127	; 0x7f
 80045c6:	d8f0      	bhi.n	80045aa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	637a      	str	r2, [r7, #52]	; 0x34
 80045ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e0:	e00b      	b.n	80045fa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	09db      	lsrs	r3, r3, #7
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	2b7f      	cmp	r3, #127	; 0x7f
 80045fe:	d8f0      	bhi.n	80045e2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	e00b      	b.n	8004632 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	6279      	str	r1, [r7, #36]	; 0x24
 8004624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	623b      	str	r3, [r7, #32]
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	2b7f      	cmp	r3, #127	; 0x7f
 8004636:	d8f0      	bhi.n	800461a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	627a      	str	r2, [r7, #36]	; 0x24
 800463e:	6a3a      	ldr	r2, [r7, #32]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6979      	ldr	r1, [r7, #20]
 800464c:	69b8      	ldr	r0, [r7, #24]
 800464e:	f7ff fda3 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f383 8811 	msr	BASEPRI, r3
}
 8004658:	bf00      	nop
 800465a:	3738      	adds	r7, #56	; 0x38
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200143d8 	.word	0x200143d8

08004664 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b090      	sub	sp, #64	; 0x40
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004672:	f3ef 8311 	mrs	r3, BASEPRI
 8004676:	f04f 0120 	mov.w	r1, #32
 800467a:	f381 8811 	msr	BASEPRI, r1
 800467e:	61fb      	str	r3, [r7, #28]
 8004680:	4840      	ldr	r0, [pc, #256]	; (8004784 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004682:	f7ff fc96 	bl	8003fb2 <_PreparePacket>
 8004686:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38
 8004694:	e00b      	b.n	80046ae <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	b2da      	uxtb	r2, r3
 800469a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469c:	1c59      	adds	r1, r3, #1
 800469e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80046a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	09db      	lsrs	r3, r3, #7
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	2b7f      	cmp	r3, #127	; 0x7f
 80046b2:	d8f0      	bhi.n	8004696 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
 80046cc:	e00b      	b.n	80046e6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	1c59      	adds	r1, r3, #1
 80046d6:	6379      	str	r1, [r7, #52]	; 0x34
 80046d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	09db      	lsrs	r3, r3, #7
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ea:	d8f0      	bhi.n	80046ce <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80046ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	637a      	str	r2, [r7, #52]	; 0x34
 80046f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
 8004704:	e00b      	b.n	800471e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	b2da      	uxtb	r2, r3
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	1c59      	adds	r1, r3, #1
 800470e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	09db      	lsrs	r3, r3, #7
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2b7f      	cmp	r3, #127	; 0x7f
 8004722:	d8f0      	bhi.n	8004706 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
 8004738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	e00b      	b.n	8004756 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	1c59      	adds	r1, r3, #1
 8004746:	6279      	str	r1, [r7, #36]	; 0x24
 8004748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	09db      	lsrs	r3, r3, #7
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	2b7f      	cmp	r3, #127	; 0x7f
 800475a:	d8f0      	bhi.n	800473e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	627a      	str	r2, [r7, #36]	; 0x24
 8004762:	6a3a      	ldr	r2, [r7, #32]
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	6979      	ldr	r1, [r7, #20]
 8004770:	69b8      	ldr	r0, [r7, #24]
 8004772:	f7ff fd11 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f383 8811 	msr	BASEPRI, r3
}
 800477c:	bf00      	nop
 800477e:	3740      	adds	r7, #64	; 0x40
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200143d8 	.word	0x200143d8

08004788 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b08c      	sub	sp, #48	; 0x30
 800478c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800478e:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004794:	f3ef 8311 	mrs	r3, BASEPRI
 8004798:	f04f 0120 	mov.w	r1, #32
 800479c:	f381 8811 	msr	BASEPRI, r1
 80047a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80047a2:	4b54      	ldr	r3, [pc, #336]	; (80048f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	220a      	movs	r2, #10
 80047a8:	4953      	ldr	r1, [pc, #332]	; (80048f8 <SEGGER_SYSVIEW_Start+0x170>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fb fd18 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80047b6:	f7fe ff8f 	bl	80036d8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80047ba:	200a      	movs	r0, #10
 80047bc:	f7ff fe28 	bl	8004410 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80047c0:	f3ef 8311 	mrs	r3, BASEPRI
 80047c4:	f04f 0120 	mov.w	r1, #32
 80047c8:	f381 8811 	msr	BASEPRI, r1
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	484b      	ldr	r0, [pc, #300]	; (80048fc <SEGGER_SYSVIEW_Start+0x174>)
 80047d0:	f7ff fbef 	bl	8003fb2 <_PreparePacket>
 80047d4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047de:	4b45      	ldr	r3, [pc, #276]	; (80048f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e4:	e00b      	b.n	80047fe <SEGGER_SYSVIEW_Start+0x76>
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	1c59      	adds	r1, r3, #1
 80047ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	09db      	lsrs	r3, r3, #7
 80047fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	2b7f      	cmp	r3, #127	; 0x7f
 8004802:	d8f0      	bhi.n	80047e6 <SEGGER_SYSVIEW_Start+0x5e>
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	62fa      	str	r2, [r7, #44]	; 0x2c
 800480a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <SEGGER_SYSVIEW_Start+0x16c>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	e00b      	b.n	8004838 <SEGGER_SYSVIEW_Start+0xb0>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	1c59      	adds	r1, r3, #1
 8004828:	6279      	str	r1, [r7, #36]	; 0x24
 800482a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	09db      	lsrs	r3, r3, #7
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b7f      	cmp	r3, #127	; 0x7f
 800483c:	d8f0      	bhi.n	8004820 <SEGGER_SYSVIEW_Start+0x98>
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	627a      	str	r2, [r7, #36]	; 0x24
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	e00b      	b.n	8004872 <SEGGER_SYSVIEW_Start+0xea>
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	1c59      	adds	r1, r3, #1
 8004862:	61f9      	str	r1, [r7, #28]
 8004864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	09db      	lsrs	r3, r3, #7
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b7f      	cmp	r3, #127	; 0x7f
 8004876:	d8f0      	bhi.n	800485a <SEGGER_SYSVIEW_Start+0xd2>
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	61fa      	str	r2, [r7, #28]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e00b      	b.n	80048aa <SEGGER_SYSVIEW_Start+0x122>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	6179      	str	r1, [r7, #20]
 800489c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	09db      	lsrs	r3, r3, #7
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b7f      	cmp	r3, #127	; 0x7f
 80048ae:	d8f0      	bhi.n	8004892 <SEGGER_SYSVIEW_Start+0x10a>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	617a      	str	r2, [r7, #20]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80048c0:	2218      	movs	r2, #24
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fc67 	bl	8004198 <_SendPacket>
      RECORD_END();
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048d0:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80048de:	f000 f9eb 	bl	8004cb8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80048e2:	f000 f9b1 	bl	8004c48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80048e6:	f000 fc83 	bl	80051f0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80048ea:	bf00      	nop
 80048ec:	3730      	adds	r7, #48	; 0x30
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200143a8 	.word	0x200143a8
 80048f8:	08005c10 	.word	0x08005c10
 80048fc:	200143d8 	.word	0x200143d8

08004900 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004906:	f3ef 8311 	mrs	r3, BASEPRI
 800490a:	f04f 0120 	mov.w	r1, #32
 800490e:	f381 8811 	msr	BASEPRI, r1
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	480b      	ldr	r0, [pc, #44]	; (8004944 <SEGGER_SYSVIEW_Stop+0x44>)
 8004916:	f7ff fb4c 	bl	8003fb2 <_PreparePacket>
 800491a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <SEGGER_SYSVIEW_Stop+0x48>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004924:	220b      	movs	r2, #11
 8004926:	6839      	ldr	r1, [r7, #0]
 8004928:	6838      	ldr	r0, [r7, #0]
 800492a:	f7ff fc35 	bl	8004198 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <SEGGER_SYSVIEW_Stop+0x48>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f383 8811 	msr	BASEPRI, r3
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200143d8 	.word	0x200143d8
 8004948:	200143a8 	.word	0x200143a8

0800494c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004952:	f3ef 8311 	mrs	r3, BASEPRI
 8004956:	f04f 0120 	mov.w	r1, #32
 800495a:	f381 8811 	msr	BASEPRI, r1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	4845      	ldr	r0, [pc, #276]	; (8004a78 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004962:	f7ff fb26 	bl	8003fb2 <_PreparePacket>
 8004966:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004970:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
 8004976:	e00b      	b.n	8004990 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	b2da      	uxtb	r2, r3
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	09db      	lsrs	r3, r3, #7
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	2b7f      	cmp	r3, #127	; 0x7f
 8004994:	d8f0      	bhi.n	8004978 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800499c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	623b      	str	r3, [r7, #32]
 80049b0:	e00b      	b.n	80049ca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	1c59      	adds	r1, r3, #1
 80049ba:	6279      	str	r1, [r7, #36]	; 0x24
 80049bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	09db      	lsrs	r3, r3, #7
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	2b7f      	cmp	r3, #127	; 0x7f
 80049ce:	d8f0      	bhi.n	80049b2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	627a      	str	r2, [r7, #36]	; 0x24
 80049d6:	6a3a      	ldr	r2, [r7, #32]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e00b      	b.n	8004a04 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	1c59      	adds	r1, r3, #1
 80049f4:	61f9      	str	r1, [r7, #28]
 80049f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	09db      	lsrs	r3, r3, #7
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b7f      	cmp	r3, #127	; 0x7f
 8004a08:	d8f0      	bhi.n	80049ec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	61fa      	str	r2, [r7, #28]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e00b      	b.n	8004a3c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1c59      	adds	r1, r3, #1
 8004a2c:	6179      	str	r1, [r7, #20]
 8004a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a40:	d8f0      	bhi.n	8004a24 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	617a      	str	r2, [r7, #20]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a52:	2218      	movs	r2, #24
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	68b8      	ldr	r0, [r7, #8]
 8004a58:	f7ff fb9e 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a6a:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	4798      	blx	r3
  }
}
 8004a70:	bf00      	nop
 8004a72:	3730      	adds	r7, #48	; 0x30
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	200143d8 	.word	0x200143d8
 8004a7c:	200143a8 	.word	0x200143a8

08004a80 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b092      	sub	sp, #72	; 0x48
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a88:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8c:	f04f 0120 	mov.w	r1, #32
 8004a90:	f381 8811 	msr	BASEPRI, r1
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	486a      	ldr	r0, [pc, #424]	; (8004c40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a98:	f7ff fa8b 	bl	8003fb2 <_PreparePacket>
 8004a9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b66      	ldr	r3, [pc, #408]	; (8004c44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab2:	e00b      	b.n	8004acc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aba:	1c59      	adds	r1, r3, #1
 8004abc:	6479      	str	r1, [r7, #68]	; 0x44
 8004abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac8:	09db      	lsrs	r3, r3, #7
 8004aca:	643b      	str	r3, [r7, #64]	; 0x40
 8004acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ace:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad0:	d8f0      	bhi.n	8004ab4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aec:	e00b      	b.n	8004b06 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af4:	1c59      	adds	r1, r3, #1
 8004af6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	09db      	lsrs	r3, r3, #7
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0a:	d8f0      	bhi.n	8004aee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	4619      	mov	r1, r3
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff f9f7 	bl	8003f18 <_EncodeStr>
 8004b2a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004b2c:	2209      	movs	r2, #9
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	6938      	ldr	r0, [r7, #16]
 8004b32:	f7ff fb31 	bl	8004198 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30
 8004b4a:	e00b      	b.n	8004b64 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	1c59      	adds	r1, r3, #1
 8004b54:	6379      	str	r1, [r7, #52]	; 0x34
 8004b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	09db      	lsrs	r3, r3, #7
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2b7f      	cmp	r3, #127	; 0x7f
 8004b68:	d8f0      	bhi.n	8004b4c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	637a      	str	r2, [r7, #52]	; 0x34
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b84:	e00b      	b.n	8004b9e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	1c59      	adds	r1, r3, #1
 8004b8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	09db      	lsrs	r3, r3, #7
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba2:	d8f0      	bhi.n	8004b86 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	e00b      	b.n	8004bd8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	1c59      	adds	r1, r3, #1
 8004bc8:	6279      	str	r1, [r7, #36]	; 0x24
 8004bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	09db      	lsrs	r3, r3, #7
 8004bd6:	623b      	str	r3, [r7, #32]
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b7f      	cmp	r3, #127	; 0x7f
 8004bdc:	d8f0      	bhi.n	8004bc0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	627a      	str	r2, [r7, #36]	; 0x24
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e00b      	b.n	8004c10 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	61f9      	str	r1, [r7, #28]
 8004c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	09db      	lsrs	r3, r3, #7
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b7f      	cmp	r3, #127	; 0x7f
 8004c14:	d8f0      	bhi.n	8004bf8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	61fa      	str	r2, [r7, #28]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004c26:	2215      	movs	r2, #21
 8004c28:	68f9      	ldr	r1, [r7, #12]
 8004c2a:	6938      	ldr	r0, [r7, #16]
 8004c2c:	f7ff fab4 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f383 8811 	msr	BASEPRI, r3
}
 8004c36:	bf00      	nop
 8004c38:	3748      	adds	r7, #72	; 0x48
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200143d8 	.word	0x200143d8
 8004c44:	200143a8 	.word	0x200143a8

08004c48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004c5e:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4798      	blx	r3
  }
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200143a8 	.word	0x200143a8

08004c70 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c78:	f3ef 8311 	mrs	r3, BASEPRI
 8004c7c:	f04f 0120 	mov.w	r1, #32
 8004c80:	f381 8811 	msr	BASEPRI, r1
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	480b      	ldr	r0, [pc, #44]	; (8004cb4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c88:	f7ff f993 	bl	8003fb2 <_PreparePacket>
 8004c8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	6938      	ldr	r0, [r7, #16]
 8004c94:	f7ff f940 	bl	8003f18 <_EncodeStr>
 8004c98:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c9a:	220e      	movs	r2, #14
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	6938      	ldr	r0, [r7, #16]
 8004ca0:	f7ff fa7a 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f383 8811 	msr	BASEPRI, r3
}
 8004caa:	bf00      	nop
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200143d8 	.word	0x200143d8

08004cb8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01a      	beq.n	8004cfc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004cc6:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4798      	blx	r3
 8004cd8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cdc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	000a      	movs	r2, r1
 8004cec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cee:	4613      	mov	r3, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	200d      	movs	r0, #13
 8004cf6:	f7ff fbe5 	bl	80044c4 <SEGGER_SYSVIEW_RecordU32x2>
 8004cfa:	e006      	b.n	8004d0a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	200c      	movs	r0, #12
 8004d04:	f7ff fba2 	bl	800444c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd90      	pop	{r4, r7, pc}
 8004d12:	bf00      	nop
 8004d14:	200143a8 	.word	0x200143a8
 8004d18:	e0001004 	.word	0xe0001004

08004d1c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d22:	f3ef 8311 	mrs	r3, BASEPRI
 8004d26:	f04f 0120 	mov.w	r1, #32
 8004d2a:	f381 8811 	msr	BASEPRI, r1
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	4819      	ldr	r0, [pc, #100]	; (8004d98 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004d32:	f7ff f93e 	bl	8003fb2 <_PreparePacket>
 8004d36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004d3c:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d44:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	e00b      	b.n	8004d68 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	6179      	str	r1, [r7, #20]
 8004d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	09db      	lsrs	r3, r3, #7
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6c:	d8f0      	bhi.n	8004d50 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	617a      	str	r2, [r7, #20]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d7e:	2202      	movs	r2, #2
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	68b8      	ldr	r0, [r7, #8]
 8004d84:	f7ff fa08 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f383 8811 	msr	BASEPRI, r3
}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200143d8 	.word	0x200143d8
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004da6:	f3ef 8311 	mrs	r3, BASEPRI
 8004daa:	f04f 0120 	mov.w	r1, #32
 8004dae:	f381 8811 	msr	BASEPRI, r1
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	4807      	ldr	r0, [pc, #28]	; (8004dd4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004db6:	f7ff f8fc 	bl	8003fb2 <_PreparePacket>
 8004dba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6838      	ldr	r0, [r7, #0]
 8004dc2:	f7ff f9e9 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f383 8811 	msr	BASEPRI, r3
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	200143d8 	.word	0x200143d8

08004dd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dde:	f3ef 8311 	mrs	r3, BASEPRI
 8004de2:	f04f 0120 	mov.w	r1, #32
 8004de6:	f381 8811 	msr	BASEPRI, r1
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	4807      	ldr	r0, [pc, #28]	; (8004e0c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004dee:	f7ff f8e0 	bl	8003fb2 <_PreparePacket>
 8004df2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004df4:	2212      	movs	r2, #18
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	6838      	ldr	r0, [r7, #0]
 8004dfa:	f7ff f9cd 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f383 8811 	msr	BASEPRI, r3
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	200143d8 	.word	0x200143d8

08004e10 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e16:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1a:	f04f 0120 	mov.w	r1, #32
 8004e1e:	f381 8811 	msr	BASEPRI, r1
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	4807      	ldr	r0, [pc, #28]	; (8004e44 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004e26:	f7ff f8c4 	bl	8003fb2 <_PreparePacket>
 8004e2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004e2c:	2211      	movs	r2, #17
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6838      	ldr	r0, [r7, #0]
 8004e32:	f7ff f9b1 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f383 8811 	msr	BASEPRI, r3
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200143d8 	.word	0x200143d8

08004e48 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e50:	f3ef 8311 	mrs	r3, BASEPRI
 8004e54:	f04f 0120 	mov.w	r1, #32
 8004e58:	f381 8811 	msr	BASEPRI, r1
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	4819      	ldr	r0, [pc, #100]	; (8004ec4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004e60:	f7ff f8a7 	bl	8003fb2 <_PreparePacket>
 8004e64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e00b      	b.n	8004e96 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	61f9      	str	r1, [r7, #28]
 8004e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	09db      	lsrs	r3, r3, #7
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9a:	d8f0      	bhi.n	8004e7e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	61fa      	str	r2, [r7, #28]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004eac:	2208      	movs	r2, #8
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	6938      	ldr	r0, [r7, #16]
 8004eb2:	f7ff f971 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
}
 8004ebc:	bf00      	nop
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200143d8 	.word	0x200143d8
 8004ec8:	200143a8 	.word	0x200143a8

08004ecc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed8:	f04f 0120 	mov.w	r1, #32
 8004edc:	f381 8811 	msr	BASEPRI, r1
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	4819      	ldr	r0, [pc, #100]	; (8004f48 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ee4:	f7ff f865 	bl	8003fb2 <_PreparePacket>
 8004ee8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e00b      	b.n	8004f1a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	1c59      	adds	r1, r3, #1
 8004f0a:	61f9      	str	r1, [r7, #28]
 8004f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	09db      	lsrs	r3, r3, #7
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f1e:	d8f0      	bhi.n	8004f02 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	61fa      	str	r2, [r7, #28]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004f30:	2204      	movs	r2, #4
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	6938      	ldr	r0, [r7, #16]
 8004f36:	f7ff f92f 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f383 8811 	msr	BASEPRI, r3
}
 8004f40:	bf00      	nop
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	200143d8 	.word	0x200143d8
 8004f4c:	200143a8 	.word	0x200143a8

08004f50 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f58:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5c:	f04f 0120 	mov.w	r1, #32
 8004f60:	f381 8811 	msr	BASEPRI, r1
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	4819      	ldr	r0, [pc, #100]	; (8004fcc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004f68:	f7ff f823 	bl	8003fb2 <_PreparePacket>
 8004f6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	e00b      	b.n	8004f9e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	1c59      	adds	r1, r3, #1
 8004f8e:	61f9      	str	r1, [r7, #28]
 8004f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	09db      	lsrs	r3, r3, #7
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa2:	d8f0      	bhi.n	8004f86 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	61fa      	str	r2, [r7, #28]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004fb4:	2206      	movs	r2, #6
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	6938      	ldr	r0, [r7, #16]
 8004fba:	f7ff f8ed 	bl	8004198 <_SendPacket>
  RECORD_END();
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
}
 8004fc4:	bf00      	nop
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200143d8 	.word	0x200143d8
 8004fd0:	200143a8 	.word	0x200143a8

08004fd4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fde:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe2:	f04f 0120 	mov.w	r1, #32
 8004fe6:	f381 8811 	msr	BASEPRI, r1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	4827      	ldr	r0, [pc, #156]	; (800508c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004fee:	f7fe ffe0 	bl	8003fb2 <_PreparePacket>
 8004ff2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	e00b      	b.n	8005024 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	6279      	str	r1, [r7, #36]	; 0x24
 8005016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	09db      	lsrs	r3, r3, #7
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b7f      	cmp	r3, #127	; 0x7f
 8005028:	d8f0      	bhi.n	800500c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	627a      	str	r2, [r7, #36]	; 0x24
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e00b      	b.n	800505c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	1c59      	adds	r1, r3, #1
 800504c:	61f9      	str	r1, [r7, #28]
 800504e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	09db      	lsrs	r3, r3, #7
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b7f      	cmp	r3, #127	; 0x7f
 8005060:	d8f0      	bhi.n	8005044 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	61fa      	str	r2, [r7, #28]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005072:	2207      	movs	r2, #7
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	6938      	ldr	r0, [r7, #16]
 8005078:	f7ff f88e 	bl	8004198 <_SendPacket>
  RECORD_END();
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f383 8811 	msr	BASEPRI, r3
}
 8005082:	bf00      	nop
 8005084:	3728      	adds	r7, #40	; 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	200143d8 	.word	0x200143d8
 8005090:	200143a8 	.word	0x200143a8

08005094 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	1ad3      	subs	r3, r2, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	200143a8 	.word	0x200143a8

080050b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08c      	sub	sp, #48	; 0x30
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d06d      	beq.n	80051a2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80050cc:	2300      	movs	r3, #0
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d0:	e008      	b.n	80050e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	3301      	adds	r3, #1
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d3f2      	bcc.n	80050d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80050ec:	e000      	b.n	80050f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80050ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d055      	beq.n	80051a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050f6:	f3ef 8311 	mrs	r3, BASEPRI
 80050fa:	f04f 0120 	mov.w	r1, #32
 80050fe:	f381 8811 	msr	BASEPRI, r1
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	482a      	ldr	r0, [pc, #168]	; (80051b0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005106:	f7fe ff54 	bl	8003fb2 <_PreparePacket>
 800510a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	e00b      	b.n	8005132 <SEGGER_SYSVIEW_SendModule+0x7e>
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	6279      	str	r1, [r7, #36]	; 0x24
 8005124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d8f0      	bhi.n	800511a <SEGGER_SYSVIEW_SendModule+0x66>
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	627a      	str	r2, [r7, #36]	; 0x24
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e00b      	b.n	800516c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	1c59      	adds	r1, r3, #1
 800515c:	61f9      	str	r1, [r7, #28]
 800515e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	09db      	lsrs	r3, r3, #7
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b7f      	cmp	r3, #127	; 0x7f
 8005170:	d8f0      	bhi.n	8005154 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	61fa      	str	r2, [r7, #28]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	4619      	mov	r1, r3
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7fe fec4 	bl	8003f18 <_EncodeStr>
 8005190:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005192:	2216      	movs	r2, #22
 8005194:	68f9      	ldr	r1, [r7, #12]
 8005196:	6938      	ldr	r0, [r7, #16]
 8005198:	f7fe fffe 	bl	8004198 <_SendPacket>
      RECORD_END();
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80051a2:	bf00      	nop
 80051a4:	3730      	adds	r7, #48	; 0x30
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	200143d0 	.word	0x200143d0
 80051b0:	200143d8 	.word	0x200143d8

080051b4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00f      	beq.n	80051e2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f2      	bne.n	80051c8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	200143d0 	.word	0x200143d0

080051f0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80051f6:	f3ef 8311 	mrs	r3, BASEPRI
 80051fa:	f04f 0120 	mov.w	r1, #32
 80051fe:	f381 8811 	msr	BASEPRI, r1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	4817      	ldr	r0, [pc, #92]	; (8005264 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005206:	f7fe fed4 	bl	8003fb2 <_PreparePacket>
 800520a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	4b14      	ldr	r3, [pc, #80]	; (8005268 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	e00b      	b.n	8005234 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	6179      	str	r1, [r7, #20]
 8005226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	09db      	lsrs	r3, r3, #7
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b7f      	cmp	r3, #127	; 0x7f
 8005238:	d8f0      	bhi.n	800521c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	617a      	str	r2, [r7, #20]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800524a:	221b      	movs	r2, #27
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	68b8      	ldr	r0, [r7, #8]
 8005250:	f7fe ffa2 	bl	8004198 <_SendPacket>
  RECORD_END();
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f383 8811 	msr	BASEPRI, r3
}
 800525a:	bf00      	nop
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200143d8 	.word	0x200143d8
 8005268:	200143d4 	.word	0x200143d4

0800526c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005274:	f3ef 8311 	mrs	r3, BASEPRI
 8005278:	f04f 0120 	mov.w	r1, #32
 800527c:	f381 8811 	msr	BASEPRI, r1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	4827      	ldr	r0, [pc, #156]	; (8005320 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005284:	f7fe fe95 	bl	8003fb2 <_PreparePacket>
 8005288:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	f7fe fe42 	bl	8003f18 <_EncodeStr>
 8005294:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
 800529a:	2301      	movs	r3, #1
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	e00b      	b.n	80052b8 <SEGGER_SYSVIEW_Warn+0x4c>
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1c59      	adds	r1, r3, #1
 80052a8:	6279      	str	r1, [r7, #36]	; 0x24
 80052aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	09db      	lsrs	r3, r3, #7
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b7f      	cmp	r3, #127	; 0x7f
 80052bc:	d8f0      	bhi.n	80052a0 <SEGGER_SYSVIEW_Warn+0x34>
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	627a      	str	r2, [r7, #36]	; 0x24
 80052c4:	6a3a      	ldr	r2, [r7, #32]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e00b      	b.n	80052f0 <SEGGER_SYSVIEW_Warn+0x84>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	61f9      	str	r1, [r7, #28]
 80052e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	09db      	lsrs	r3, r3, #7
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b7f      	cmp	r3, #127	; 0x7f
 80052f4:	d8f0      	bhi.n	80052d8 <SEGGER_SYSVIEW_Warn+0x6c>
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	61fa      	str	r2, [r7, #28]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005306:	221a      	movs	r2, #26
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	6938      	ldr	r0, [r7, #16]
 800530c:	f7fe ff44 	bl	8004198 <_SendPacket>
  RECORD_END();
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f383 8811 	msr	BASEPRI, r3
}
 8005316:	bf00      	nop
 8005318:	3728      	adds	r7, #40	; 0x28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	200143d8 	.word	0x200143d8

08005324 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005328:	4b13      	ldr	r3, [pc, #76]	; (8005378 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800532a:	7e1b      	ldrb	r3, [r3, #24]
 800532c:	4619      	mov	r1, r3
 800532e:	4a13      	ldr	r2, [pc, #76]	; (800537c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005330:	460b      	mov	r3, r1
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	440b      	add	r3, r1
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	336c      	adds	r3, #108	; 0x6c
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005340:	7e1b      	ldrb	r3, [r3, #24]
 8005342:	4618      	mov	r0, r3
 8005344:	490d      	ldr	r1, [pc, #52]	; (800537c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005346:	4603      	mov	r3, r0
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	4403      	add	r3, r0
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	440b      	add	r3, r1
 8005350:	3370      	adds	r3, #112	; 0x70
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d00b      	beq.n	8005370 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800535a:	789b      	ldrb	r3, [r3, #2]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d107      	bne.n	8005370 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005362:	2201      	movs	r2, #1
 8005364:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005366:	f7fe fe31 	bl	8003fcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800536a:	4b03      	ldr	r3, [pc, #12]	; (8005378 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800536c:	2200      	movs	r2, #0
 800536e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005370:	4b01      	ldr	r3, [pc, #4]	; (8005378 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005372:	781b      	ldrb	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	bd80      	pop	{r7, pc}
 8005378:	200143a8 	.word	0x200143a8
 800537c:	20012ee8 	.word	0x20012ee8

08005380 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a88      	ldr	r2, [pc, #544]	; (80055b8 <GPIO_Config+0x238>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d106      	bne.n	80053a8 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800539a:	4b88      	ldr	r3, [pc, #544]	; (80055bc <GPIO_Config+0x23c>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	4a87      	ldr	r2, [pc, #540]	; (80055bc <GPIO_Config+0x23c>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	6313      	str	r3, [r2, #48]	; 0x30
 80053a6:	e03a      	b.n	800541e <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a84      	ldr	r2, [pc, #528]	; (80055c0 <GPIO_Config+0x240>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d106      	bne.n	80053c0 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80053b2:	4b82      	ldr	r3, [pc, #520]	; (80055bc <GPIO_Config+0x23c>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	4a81      	ldr	r2, [pc, #516]	; (80055bc <GPIO_Config+0x23c>)
 80053b8:	f043 0302 	orr.w	r3, r3, #2
 80053bc:	6313      	str	r3, [r2, #48]	; 0x30
 80053be:	e02e      	b.n	800541e <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a7f      	ldr	r2, [pc, #508]	; (80055c4 <GPIO_Config+0x244>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d106      	bne.n	80053d8 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80053ca:	4b7c      	ldr	r3, [pc, #496]	; (80055bc <GPIO_Config+0x23c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	4a7b      	ldr	r2, [pc, #492]	; (80055bc <GPIO_Config+0x23c>)
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	6313      	str	r3, [r2, #48]	; 0x30
 80053d6:	e022      	b.n	800541e <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7a      	ldr	r2, [pc, #488]	; (80055c8 <GPIO_Config+0x248>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d106      	bne.n	80053f0 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80053e2:	4b76      	ldr	r3, [pc, #472]	; (80055bc <GPIO_Config+0x23c>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	4a75      	ldr	r2, [pc, #468]	; (80055bc <GPIO_Config+0x23c>)
 80053e8:	f043 0308 	orr.w	r3, r3, #8
 80053ec:	6313      	str	r3, [r2, #48]	; 0x30
 80053ee:	e016      	b.n	800541e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a75      	ldr	r2, [pc, #468]	; (80055cc <GPIO_Config+0x24c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d106      	bne.n	8005408 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80053fa:	4b70      	ldr	r3, [pc, #448]	; (80055bc <GPIO_Config+0x23c>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4a6f      	ldr	r2, [pc, #444]	; (80055bc <GPIO_Config+0x23c>)
 8005400:	f043 0310 	orr.w	r3, r3, #16
 8005404:	6313      	str	r3, [r2, #48]	; 0x30
 8005406:	e00a      	b.n	800541e <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a70      	ldr	r2, [pc, #448]	; (80055d0 <GPIO_Config+0x250>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d105      	bne.n	800541e <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8005412:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <GPIO_Config+0x23c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4a69      	ldr	r2, [pc, #420]	; (80055bc <GPIO_Config+0x23c>)
 8005418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541c:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	795b      	ldrb	r3, [r3, #5]
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	791b      	ldrb	r3, [r3, #4]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	791b      	ldrb	r3, [r3, #4]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	2103      	movs	r1, #3
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	400a      	ands	r2, r1
 800544c:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	7a1b      	ldrb	r3, [r3, #8]
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	791b      	ldrb	r3, [r3, #4]
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	791b      	ldrb	r3, [r3, #4]
 8005478:	4619      	mov	r1, r3
 800547a:	2301      	movs	r3, #1
 800547c:	408b      	lsls	r3, r1
 800547e:	43db      	mvns	r3, r3
 8005480:	4619      	mov	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	400a      	ands	r2, r1
 8005488:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	799b      	ldrb	r3, [r3, #6]
 800549e:	461a      	mov	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	791b      	ldrb	r3, [r3, #4]
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	2103      	movs	r1, #3
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	4619      	mov	r1, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	400a      	ands	r2, r1
 80054c8:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	79db      	ldrb	r3, [r3, #7]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	791b      	ldrb	r3, [r3, #4]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	791b      	ldrb	r3, [r3, #4]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	2103      	movs	r1, #3
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	4619      	mov	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	400a      	ands	r2, r1
 8005508:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68d9      	ldr	r1, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	430a      	orrs	r2, r1
 8005518:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	795b      	ldrb	r3, [r3, #5]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d143      	bne.n	80055aa <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	791b      	ldrb	r3, [r3, #4]
 8005526:	2b07      	cmp	r3, #7
 8005528:	d81f      	bhi.n	800556a <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	791b      	ldrb	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	210f      	movs	r1, #15
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	400a      	ands	r2, r1
 800554a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7a5b      	ldrb	r3, [r3, #9]
 8005556:	4619      	mov	r1, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	fa01 f303 	lsl.w	r3, r1, r3
 800555e:	4619      	mov	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 8005568:	e01f      	b.n	80055aa <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	3b08      	subs	r3, #8
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557a:	210f      	movs	r1, #15
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	4619      	mov	r1, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	400a      	ands	r2, r1
 800558c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	7a5b      	ldrb	r3, [r3, #9]
 8005598:	4619      	mov	r1, r3
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40020400 	.word	0x40020400
 80055c4:	40020800 	.word	0x40020800
 80055c8:	40020c00 	.word	0x40020c00
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40021c00 	.word	0x40021c00

080055d4 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d10d      	bne.n	8005602 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699a      	ldr	r2, [r3, #24]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	791b      	ldrb	r3, [r3, #4]
 80055f0:	4619      	mov	r1, r3
 80055f2:	2301      	movs	r3, #1
 80055f4:	408b      	lsls	r3, r1
 80055f6:	4619      	mov	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8005600:	e00d      	b.n	800561e <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699a      	ldr	r2, [r3, #24]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	791b      	ldrb	r3, [r3, #4]
 800560c:	3310      	adds	r3, #16
 800560e:	2101      	movs	r1, #1
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	4619      	mov	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	619a      	str	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	791b      	ldrb	r3, [r3, #4]
 800563a:	461a      	mov	r2, r3
 800563c:	2301      	movs	r3, #1
 800563e:	4093      	lsls	r3, r2
 8005640:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4013      	ands	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	791b      	ldrb	r3, [r3, #4]
 8005656:	461a      	mov	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	40d3      	lsrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
		uint8_t state = GPIO_ReadPin (pPinState);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ffd8 	bl	800562a <GPIO_ReadPin>
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
		if (state== SET){
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d104      	bne.n	800568e <GPIOxTooglePin+0x22>
			GPIO_WritePin(pPinState, RESET);
 8005684:	2100      	movs	r1, #0
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff ffa4 	bl	80055d4 <GPIO_WritePin>
		else{
			GPIO_WritePin(pPinState, SET);
		}


}
 800568c:	e003      	b.n	8005696 <GPIOxTooglePin+0x2a>
			GPIO_WritePin(pPinState, SET);
 800568e:	2101      	movs	r1, #1
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff ff9f 	bl	80055d4 <GPIO_WritePin>
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <pwm_Config>:
 *      Author: namontoy
 */
#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a62      	ldr	r2, [pc, #392]	; (8005838 <pwm_Config+0x198>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d106      	bne.n	80056c0 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80056b2:	4b62      	ldr	r3, [pc, #392]	; (800583c <pwm_Config+0x19c>)
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	4a61      	ldr	r2, [pc, #388]	; (800583c <pwm_Config+0x19c>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6453      	str	r3, [r2, #68]	; 0x44
 80056be:	e030      	b.n	8005722 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d106      	bne.n	80056d8 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80056ca:	4b5c      	ldr	r3, [pc, #368]	; (800583c <pwm_Config+0x19c>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	4a5b      	ldr	r2, [pc, #364]	; (800583c <pwm_Config+0x19c>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	6413      	str	r3, [r2, #64]	; 0x40
 80056d6:	e024      	b.n	8005722 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a58      	ldr	r2, [pc, #352]	; (8005840 <pwm_Config+0x1a0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d106      	bne.n	80056f0 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80056e2:	4b56      	ldr	r3, [pc, #344]	; (800583c <pwm_Config+0x19c>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	4a55      	ldr	r2, [pc, #340]	; (800583c <pwm_Config+0x19c>)
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6413      	str	r3, [r2, #64]	; 0x40
 80056ee:	e018      	b.n	8005722 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a53      	ldr	r2, [pc, #332]	; (8005844 <pwm_Config+0x1a4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d106      	bne.n	8005708 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80056fa:	4b50      	ldr	r3, [pc, #320]	; (800583c <pwm_Config+0x19c>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	4a4f      	ldr	r2, [pc, #316]	; (800583c <pwm_Config+0x19c>)
 8005700:	f043 0304 	orr.w	r3, r3, #4
 8005704:	6413      	str	r3, [r2, #64]	; 0x40
 8005706:	e00c      	b.n	8005722 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4e      	ldr	r2, [pc, #312]	; (8005848 <pwm_Config+0x1a8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d106      	bne.n	8005720 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005712:	4b4a      	ldr	r3, [pc, #296]	; (800583c <pwm_Config+0x19c>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	4a49      	ldr	r2, [pc, #292]	; (800583c <pwm_Config+0x19c>)
 8005718:	f043 0308 	orr.w	r3, r3, #8
 800571c:	6413      	str	r3, [r2, #64]	; 0x40
 800571e:	e000      	b.n	8005722 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8005720:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f892 	bl	800584c <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8a3 	bl	8005874 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0210 	bic.w	r2, r2, #16
 800573c:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	791b      	ldrb	r3, [r3, #4]
 800574a:	2b03      	cmp	r3, #3
 800574c:	d86e      	bhi.n	800582c <pwm_Config+0x18c>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <pwm_Config+0xb4>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005765 	.word	0x08005765
 8005758:	08005797 	.word	0x08005797
 800575c:	080057c9 	.word	0x080057c9
 8005760:	080057fb 	.word	0x080057fb
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0203 	bic.w	r2, r2, #3
 8005772:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005782:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	619a      	str	r2, [r3, #24]


		break;
 8005794:	e04b      	b.n	800582e <pwm_Config+0x18e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057a4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699a      	ldr	r2, [r3, #24]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80057b4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c4:	619a      	str	r2, [r3, #24]

		break;
 80057c6:	e032      	b.n	800582e <pwm_Config+0x18e>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0203 	bic.w	r2, r2, #3
 80057d6:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80057e6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0208 	orr.w	r2, r2, #8
 80057f6:	61da      	str	r2, [r3, #28]

		break;
 80057f8:	e019      	b.n	800582e <pwm_Config+0x18e>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005808:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8005818:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005828:	61da      	str	r2, [r3, #28]

		break;
 800582a:	e000      	b.n	800582e <pwm_Config+0x18e>
	}

	default:{
		break;
 800582c:	bf00      	nop

	/* 6. Activamos la salida seleccionada */

	}// fin del switch-case

}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40023800 	.word	0x40023800
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40000c00 	.word	0x40000c00

0800584c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
//
//	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
//	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6892      	ldr	r2, [r2, #8]
 800585c:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	899a      	ldrh	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	791b      	ldrb	r3, [r3, #4]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d84f      	bhi.n	8005924 <setDuttyCycle+0xb0>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <setDuttyCycle+0x18>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058bf 	.word	0x080058bf
 8005894:	080058e1 	.word	0x080058e1
 8005898:	08005903 	.word	0x08005903
	case PWM_CHANNEL_1:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	89db      	ldrh	r3, [r3, #14]
 80058a0:	461a      	mov	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	899b      	ldrh	r3, [r3, #12]
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	60bb      	str	r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	4920      	ldr	r1, [pc, #128]	; (8005934 <setDuttyCycle+0xc0>)
 80058b4:	fba1 1202 	umull	r1, r2, r1, r2
 80058b8:	0952      	lsrs	r2, r2, #5
 80058ba:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80058bc:	e033      	b.n	8005926 <setDuttyCycle+0xb2>
	}

	case PWM_CHANNEL_2:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	89db      	ldrh	r3, [r3, #14]
 80058c2:	461a      	mov	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	899b      	ldrh	r3, [r3, #12]
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	60fb      	str	r3, [r7, #12]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4917      	ldr	r1, [pc, #92]	; (8005934 <setDuttyCycle+0xc0>)
 80058d6:	fba1 1202 	umull	r1, r2, r1, r2
 80058da:	0952      	lsrs	r2, r2, #5
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80058de:	e022      	b.n	8005926 <setDuttyCycle+0xb2>
	}

	case PWM_CHANNEL_3:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	89db      	ldrh	r3, [r3, #14]
 80058e4:	461a      	mov	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	899b      	ldrh	r3, [r3, #12]
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	613b      	str	r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	490f      	ldr	r1, [pc, #60]	; (8005934 <setDuttyCycle+0xc0>)
 80058f8:	fba1 1202 	umull	r1, r2, r1, r2
 80058fc:	0952      	lsrs	r2, r2, #5
 80058fe:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8005900:	e011      	b.n	8005926 <setDuttyCycle+0xb2>
	}

	case PWM_CHANNEL_4:{
		uint32_t op = (ptrPwmHandler->config.duttyCicle) * (ptrPwmHandler->config.periodo);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	89db      	ldrh	r3, [r3, #14]
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	899b      	ldrh	r3, [r3, #12]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	617b      	str	r3, [r7, #20]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4906      	ldr	r1, [pc, #24]	; (8005934 <setDuttyCycle+0xc0>)
 800591a:	fba1 1202 	umull	r1, r2, r1, r2
 800591e:	0952      	lsrs	r2, r2, #5
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8005922:	e000      	b.n	8005926 <setDuttyCycle+0xb2>
	}

	default:{
		break;
 8005924:	bf00      	nop
	}

	}// fin del switch-case

}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	51eb851f 	.word	0x51eb851f

08005938 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(void){
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0


	//Nos aseguramos que el PLL esta apagado para asi hacer la configuracion del mismo, ademas selecc
	RCC->CR &= ~(RCC_CR_PLLON);
 800593c:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005946:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8005948:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de 100MHz
	PWR->CR |= (0b11 << 14);
 8005950:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <RCC_enableMaxFrequencies+0xd8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2e      	ldr	r2, [pc, #184]	; (8005a10 <RCC_enableMaxFrequencies+0xd8>)
 8005956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800595a:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= 0;
 800595c:	4b2b      	ldr	r3, [pc, #172]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005962:	2200      	movs	r2, #0
 8005964:	605a      	str	r2, [r3, #4]

	//Montamos sobre el RCC_PLL config las subdivisiones necesarias para obtener la salida de frecuencia de reloj que deseamos
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8005966:	4b29      	ldr	r3, [pc, #164]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4a28      	ldr	r2, [pc, #160]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 800596c:	f043 0308 	orr.w	r3, r3, #8
 8005970:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005978:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800597c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800597e:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005984:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005988:	6053      	str	r3, [r2, #4]

	//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
	RCC->CR |= RCC_CR_PLLON;
 800598a:	4b20      	ldr	r3, [pc, #128]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 8005990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005994:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 8005996:	e000      	b.n	800599a <RCC_enableMaxFrequencies+0x62>
		__NOP();
 8005998:	bf00      	nop
	while (!(RCC->CR & RCC_CR_PLLRDY)){
 800599a:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f8      	beq.n	8005998 <RCC_enableMaxFrequencies+0x60>
	}

	//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
	RCC->CFGR &= ~(0b111 << 13);
 80059a6:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80059b0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b100 << 10);
 80059b2:	4b16      	ldr	r3, [pc, #88]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059bc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(0xF << 4);
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c8:	6093      	str	r3, [r2, #8]

	//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
	FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <RCC_enableMaxFrequencies+0xdc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a11      	ldr	r2, [pc, #68]	; (8005a14 <RCC_enableMaxFrequencies+0xdc>)
 80059d0:	f023 030f 	bic.w	r3, r3, #15
 80059d4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <RCC_enableMaxFrequencies+0xdc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a0e      	ldr	r2, [pc, #56]	; (8005a14 <RCC_enableMaxFrequencies+0xdc>)
 80059dc:	f043 0303 	orr.w	r3, r3, #3
 80059e0:	6013      	str	r3, [r2, #0]


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80059e2:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80059ee:	e000      	b.n	80059f2 <RCC_enableMaxFrequencies+0xba>
		__NOP();
 80059f0:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <RCC_enableMaxFrequencies+0xd4>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f8      	beq.n	80059f0 <RCC_enableMaxFrequencies+0xb8>
	}



}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40007000 	.word	0x40007000
 8005a14:	40023c00 	.word	0x40023c00

08005a18 <show_MaxFreq>:
	}

}


void show_MaxFreq (void){
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0

	//Le damos una division a la señal que pasa por MCO1 de 5 para poder leerla en el osciloscopio
	RCC->CFGR &= ~(0b111 << 24);
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <show_MaxFreq+0x40>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a0d      	ldr	r2, [pc, #52]	; (8005a58 <show_MaxFreq+0x40>)
 8005a22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a26:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b111<< 24);
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <show_MaxFreq+0x40>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <show_MaxFreq+0x40>)
 8005a2e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005a32:	6093      	str	r3, [r2, #8]

	//Configuramos la salida MCO1 para verificar el estado real del MCU y su velocidad
	RCC->CFGR &= ~(0b11 << 21);
 8005a34:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <show_MaxFreq+0x40>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <show_MaxFreq+0x40>)
 8005a3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a3e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_MCO1;
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <show_MaxFreq+0x40>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <show_MaxFreq+0x40>)
 8005a46:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8005a4a:	6093      	str	r3, [r2, #8]

}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800

08005a5c <__libc_init_array>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	4d0d      	ldr	r5, [pc, #52]	; (8005a94 <__libc_init_array+0x38>)
 8005a60:	4c0d      	ldr	r4, [pc, #52]	; (8005a98 <__libc_init_array+0x3c>)
 8005a62:	1b64      	subs	r4, r4, r5
 8005a64:	10a4      	asrs	r4, r4, #2
 8005a66:	2600      	movs	r6, #0
 8005a68:	42a6      	cmp	r6, r4
 8005a6a:	d109      	bne.n	8005a80 <__libc_init_array+0x24>
 8005a6c:	4d0b      	ldr	r5, [pc, #44]	; (8005a9c <__libc_init_array+0x40>)
 8005a6e:	4c0c      	ldr	r4, [pc, #48]	; (8005aa0 <__libc_init_array+0x44>)
 8005a70:	f000 f83e 	bl	8005af0 <_init>
 8005a74:	1b64      	subs	r4, r4, r5
 8005a76:	10a4      	asrs	r4, r4, #2
 8005a78:	2600      	movs	r6, #0
 8005a7a:	42a6      	cmp	r6, r4
 8005a7c:	d105      	bne.n	8005a8a <__libc_init_array+0x2e>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a84:	4798      	blx	r3
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7ee      	b.n	8005a68 <__libc_init_array+0xc>
 8005a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8e:	4798      	blx	r3
 8005a90:	3601      	adds	r6, #1
 8005a92:	e7f2      	b.n	8005a7a <__libc_init_array+0x1e>
 8005a94:	08005c1c 	.word	0x08005c1c
 8005a98:	08005c1c 	.word	0x08005c1c
 8005a9c:	08005c1c 	.word	0x08005c1c
 8005aa0:	08005c20 	.word	0x08005c20

08005aa4 <memcmp>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	3901      	subs	r1, #1
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4290      	cmp	r0, r2
 8005aac:	d101      	bne.n	8005ab2 <memcmp+0xe>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e005      	b.n	8005abe <memcmp+0x1a>
 8005ab2:	7803      	ldrb	r3, [r0, #0]
 8005ab4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d001      	beq.n	8005ac0 <memcmp+0x1c>
 8005abc:	1b18      	subs	r0, r3, r4
 8005abe:	bd10      	pop	{r4, pc}
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	e7f2      	b.n	8005aaa <memcmp+0x6>

08005ac4 <memcpy>:
 8005ac4:	440a      	add	r2, r1
 8005ac6:	4291      	cmp	r1, r2
 8005ac8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005acc:	d100      	bne.n	8005ad0 <memcpy+0xc>
 8005ace:	4770      	bx	lr
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ada:	4291      	cmp	r1, r2
 8005adc:	d1f9      	bne.n	8005ad2 <memcpy+0xe>
 8005ade:	bd10      	pop	{r4, pc}

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <_init>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr

08005afc <_fini>:
 8005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afe:	bf00      	nop
 8005b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b02:	bc08      	pop	{r3}
 8005b04:	469e      	mov	lr, r3
 8005b06:	4770      	bx	lr
