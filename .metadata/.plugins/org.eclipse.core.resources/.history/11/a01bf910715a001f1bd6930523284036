/*
 * Astar.c
 *
 *  Created on: Aug 13, 2024
 *      Author: juan
 */

#include "Astar.h"
#include <stdio.h>
#include <stdlib.h>


void init(AStar_distancesHandler *parameters){

	//Segundo seteamos nuetsra matriz que almacenara los datos de Gcost F cost, los costos
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]


    // Allocate memory for the matrix (Array of pointers)
    costs = (float ***)malloc(parameters->numberOfRows * sizeof(float **));
    for (int i = 0; i < parameters->numberOfRows; i++) {
    	costs[i] = (float **)malloc(parameters->numberOfColumns * sizeof(float*));
    	for (int j = 0; j < parameters->numberOfColumns; i++) {
    	    	costs[i][j] = (float *)malloc(3 * sizeof(float));
		}
    }

}



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos infoGrid
uint8_t getRows(char **matrix){

	uint8_t numRows;

	numRows = sizeof(**matrix)/sizeof(*matrix[0]);

	return numRows;
}

uint8_t getColums(char **matrix){

	uint8_t numColums;
	numColums = sizeof(*matrix[0])/sizeof(matrix[0][0]);

	return numColums;
}


char **buildMatrx(AStar_distancesHandler *parameters, char **string){

	// Matriz donde se almacenaran las filas de String donde esta la informacion de los espacios libres y los obstaculos
	char **infoGrid = (char ** ) malloc(parameters->numberOfRows * sizeof(char *));
	for (uint8_t i = 0 ; i < parameters->numberOfRows; i++){
		infoGrid [i] = (char *)malloc(parameters->numberOfColumns *sizeof(char));
	}

	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){

			infoGrid[i][j] = string[i][j];

		}
	}


	return infoGrid;
}


// Funcion liberacion de memoria de las matrices doble puntero
void freeMatrix(int **matrix, int rows) {
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}
