/*
 * MotorsDriver.h
 *
 *  Created on: Apr 9, 2024
 *      Author: juan
 */

#ifndef MOTORSDRIVER_H_
#define MOTORSDRIVER_H_

#include "stm32f4xx.h"


typedef struct
{
	float    u; 			//Respuesta de salida
	float    e0;			//Error
	float    sum; 			//Suma integral
	float    ep;   			//Error previo
	float    kp,ki,kd;      // Constantes PID
}PID_Parameters_t;


typedef struct
{
	PID_Parameters_t *pid; // Puntero a estructura PID
	uint8_t counts;        // cuentas de cada motors
	float vel;				// velocidad de cada rueda
  	float dis;    			// distancia por muestreo

}Motor_Parameters_t;


//Estructura que contiene la configuracion del motor
typedef struct
{
	uint16_t *frecuency;             //frecuencia del timer
	float  new_dutty;               //Nuevo valor de dutty a reemplazar
	float dutty;                    //dutty de pwm del motor
	uint8_t dir;                    //indica el tipo de giro

}Config_Motor_t;

//Estrutura que contienes la configuracion del motor como los handler para los diferentes perifericos para el uso del robot
typedef struct
{
	Motor_Parameters_t parametersMotor;    //Parametros del motor
	Config_Motor_t configMotor;            //Configuracion del motor
	GPIO_Handler_t *phandlerGPIOIN;        //Handler para el el pin del IN del driver del motor
	GPIO_Handler_t *phandlerGPIOEN;        //Handler para el el pin del EN del driver del motor
	PWM_Handler_t *phandlerPWM;            //Handler del pwm para el driver del motor
}Motor_Handler_t;

//Definimos las cabeceras de las funciones
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler, float newValue);
void updateFrequencyMotor(Motor_Handler_t *ptrMotorHandler, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newValue);
void updateDirMotor(Motor_Handler_t *ptrMotorHandler);
double map(double x, double in_min, double in_max, double out_min, double out_max);


#endif /* MOTORSDRIVER_H_ */
