
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f238  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  0800f3d8  0800f3d8  0001f3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc50  0800fc50  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc50  0800fc50  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc50  0800fc50  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc50  0800fc50  0001fc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc54  0800fc54  0001fc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800fc58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000131d8  200001f8  0800fe50  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200133d0  0800fe50  000233d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da07  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002635  00000000  00000000  0002dc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00030268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00030e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012817  00000000  00000000  00031990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e851  00000000  00000000  000441a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000625d3  00000000  00000000  000529f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4fcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a4  00000000  00000000  000b501c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3c0 	.word	0x0800f3c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800f3c0 	.word	0x0800f3c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08b      	sub	sp, #44	; 0x2c
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b89      	ldr	r3, [pc, #548]	; (8000ee4 <main+0x22c>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a87      	ldr	r2, [pc, #540]	; (8000ee4 <main+0x22c>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <main+0x230>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a85      	ldr	r2, [pc, #532]	; (8000ee8 <main+0x230>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	/* Primero configuramos */
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();

   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f007 ff2a 	bl	8008b34 <RCC_enableMaxFrequencies>
	inSystem ();
 8000ce0:	f000 f938 	bl	8000f54 <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4881      	ldr	r0, [pc, #516]	; (8000eec <main+0x234>)
 8000ce8:	f000 fdf2 	bl	80018d0 <calibracionGyros>
 8000cec:	ee10 3a10 	vmov	r3, s0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc41 	bl	8000578 <__aeabi_f2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	497d      	ldr	r1, [pc, #500]	; (8000ef0 <main+0x238>)
 8000cfc:	e9c1 2300 	strd	r2, r3, [r1]


	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000d00:	4b7c      	ldr	r3, [pc, #496]	; (8000ef4 <main+0x23c>)
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	22c8      	movs	r2, #200	; 0xc8
 8000d0c:	497a      	ldr	r1, [pc, #488]	; (8000ef8 <main+0x240>)
 8000d0e:	487b      	ldr	r0, [pc, #492]	; (8000efc <main+0x244>)
 8000d10:	f002 fede 	bl	8003ad0 <xTaskCreate>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a7a      	ldr	r2, [pc, #488]	; (8000f00 <main+0x248>)
 8000d18:	6013      	str	r3, [r2, #0]
					NULL,                   // parametro pasado a la tarea
					2,                      // Prioridad de la tarea
					&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d1a:	4b79      	ldr	r3, [pc, #484]	; (8000f00 <main+0x248>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00a      	beq.n	8000d38 <main+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d34:	bf00      	nop
 8000d36:	e7fe      	b.n	8000d36 <main+0x7e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,2,&xHandleTask_Print );
 8000d38:	4b72      	ldr	r3, [pc, #456]	; (8000f04 <main+0x24c>)
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	22c8      	movs	r2, #200	; 0xc8
 8000d44:	4970      	ldr	r1, [pc, #448]	; (8000f08 <main+0x250>)
 8000d46:	4871      	ldr	r0, [pc, #452]	; (8000f0c <main+0x254>)
 8000d48:	f002 fec2 	bl	8003ad0 <xTaskCreate>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a6c      	ldr	r2, [pc, #432]	; (8000f00 <main+0x248>)
 8000d50:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <main+0x248>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00a      	beq.n	8000d70 <main+0xb8>
        __asm volatile
 8000d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5e:	f383 8811 	msr	BASEPRI, r3
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	61bb      	str	r3, [r7, #24]
    }
 8000d6c:	bf00      	nop
 8000d6e:	e7fe      	b.n	8000d6e <main+0xb6>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,2,&xHandleTask_Commands );
 8000d70:	4b67      	ldr	r3, [pc, #412]	; (8000f10 <main+0x258>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2302      	movs	r3, #2
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	22c8      	movs	r2, #200	; 0xc8
 8000d7c:	4965      	ldr	r1, [pc, #404]	; (8000f14 <main+0x25c>)
 8000d7e:	4866      	ldr	r0, [pc, #408]	; (8000f18 <main+0x260>)
 8000d80:	f002 fea6 	bl	8003ad0 <xTaskCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a5e      	ldr	r2, [pc, #376]	; (8000f00 <main+0x248>)
 8000d88:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <main+0x248>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <main+0xf0>
        __asm volatile
 8000d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	617b      	str	r3, [r7, #20]
    }
 8000da4:	bf00      	nop
 8000da6:	e7fe      	b.n	8000da6 <main+0xee>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000da8:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <main+0x264>)
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2303      	movs	r3, #3
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	22c8      	movs	r2, #200	; 0xc8
 8000db4:	495a      	ldr	r1, [pc, #360]	; (8000f20 <main+0x268>)
 8000db6:	485b      	ldr	r0, [pc, #364]	; (8000f24 <main+0x26c>)
 8000db8:	f002 fe8a 	bl	8003ad0 <xTaskCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <main+0x248>)
 8000dc0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <main+0x248>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00a      	beq.n	8000de0 <main+0x128>
        __asm volatile
 8000dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	613b      	str	r3, [r7, #16]
    }
 8000ddc:	bf00      	nop
 8000dde:	e7fe      	b.n	8000dde <main+0x126>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000de0:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <main+0x270>)
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2303      	movs	r3, #3
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	22c8      	movs	r2, #200	; 0xc8
 8000dec:	494f      	ldr	r1, [pc, #316]	; (8000f2c <main+0x274>)
 8000dee:	4850      	ldr	r0, [pc, #320]	; (8000f30 <main+0x278>)
 8000df0:	f002 fe6e 	bl	8003ad0 <xTaskCreate>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a42      	ldr	r2, [pc, #264]	; (8000f00 <main+0x248>)
 8000df8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <main+0x248>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d00a      	beq.n	8000e18 <main+0x160>
        __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	60fb      	str	r3, [r7, #12]
    }
 8000e14:	bf00      	nop
 8000e16:	e7fe      	b.n	8000e16 <main+0x15e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000e18:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <main+0x27c>)
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2300      	movs	r3, #0
 8000e22:	22c8      	movs	r2, #200	; 0xc8
 8000e24:	4944      	ldr	r1, [pc, #272]	; (8000f38 <main+0x280>)
 8000e26:	4845      	ldr	r0, [pc, #276]	; (8000f3c <main+0x284>)
 8000e28:	f002 fe52 	bl	8003ad0 <xTaskCreate>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <main+0x248>)
 8000e30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e32:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <main+0x248>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d00a      	beq.n	8000e50 <main+0x198>
        __asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	60bb      	str	r3, [r7, #8]
    }
 8000e4c:	bf00      	nop
 8000e4e:	e7fe      	b.n	8000e4e <main+0x196>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(10,sizeof(char));
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	200a      	movs	r0, #10
 8000e56:	f002 f8ef 	bl	8003038 <xQueueGenericCreate>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a38      	ldr	r2, [pc, #224]	; (8000f40 <main+0x288>)
 8000e5e:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000e60:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <main+0x288>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10a      	bne.n	8000e7e <main+0x1c6>
        __asm volatile
 8000e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6c:	f383 8811 	msr	BASEPRI, r3
 8000e70:	f3bf 8f6f 	isb	sy
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	607b      	str	r3, [r7, #4]
    }
 8000e7a:	bf00      	nop
 8000e7c:	e7fe      	b.n	8000e7c <main+0x1c4>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2104      	movs	r1, #4
 8000e82:	200a      	movs	r0, #10
 8000e84:	f002 f8d8 	bl	8003038 <xQueueGenericCreate>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <main+0x28c>)
 8000e8c:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <main+0x28c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10a      	bne.n	8000eac <main+0x1f4>
        __asm volatile
 8000e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9a:	f383 8811 	msr	BASEPRI, r3
 8000e9e:	f3bf 8f6f 	isb	sy
 8000ea2:	f3bf 8f4f 	dsb	sy
 8000ea6:	603b      	str	r3, [r7, #0]
    }
 8000ea8:	bf00      	nop
 8000eaa:	e7fe      	b.n	8000eaa <main+0x1f2>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <main+0x290>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <main+0x294>)
 8000eba:	f003 fedf 	bl	8004c7c <xTimerCreate>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <main+0x298>)
 8000ec2:	6013      	str	r3, [r2, #0]
			 	 	 	 	 	 	 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <main+0x298>)
 8000ec6:	681c      	ldr	r4, [r3, #0]
 8000ec8:	f003 f844 	bl	8003f54 <xTaskGetTickCount>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f003 ff2b 	bl	8004d34 <xTimerGenericCommand>

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8000ede:	f002 ff3d 	bl	8003d5c <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000ee2:	e7fe      	b.n	8000ee2 <main+0x22a>
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	e0001000 	.word	0xe0001000
 8000eec:	200003e0 	.word	0x200003e0
 8000ef0:	200005e0 	.word	0x200005e0
 8000ef4:	20000218 	.word	0x20000218
 8000ef8:	0800f4bc 	.word	0x0800f4bc
 8000efc:	080013e1 	.word	0x080013e1
 8000f00:	20000214 	.word	0x20000214
 8000f04:	2000021c 	.word	0x2000021c
 8000f08:	0800f4c8 	.word	0x0800f4c8
 8000f0c:	0800167d 	.word	0x0800167d
 8000f10:	20000220 	.word	0x20000220
 8000f14:	0800f4d4 	.word	0x0800f4d4
 8000f18:	08001515 	.word	0x08001515
 8000f1c:	20000224 	.word	0x20000224
 8000f20:	0800f4e4 	.word	0x0800f4e4
 8000f24:	08001555 	.word	0x08001555
 8000f28:	20000228 	.word	0x20000228
 8000f2c:	0800f4f0 	.word	0x0800f4f0
 8000f30:	080015ad 	.word	0x080015ad
 8000f34:	2000022c 	.word	0x2000022c
 8000f38:	0800f4f8 	.word	0x0800f4f8
 8000f3c:	080015fd 	.word	0x080015fd
 8000f40:	20000234 	.word	0x20000234
 8000f44:	20000230 	.word	0x20000230
 8000f48:	08002c21 	.word	0x08002c21
 8000f4c:	0800f508 	.word	0x0800f508
 8000f50:	20000238 	.word	0x20000238

08000f54 <inSystem>:

	}
}


void inSystem (void){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000f58:	4baf      	ldr	r3, [pc, #700]	; (8001218 <inSystem+0x2c4>)
 8000f5a:	4ab0      	ldr	r2, [pc, #704]	; (800121c <inSystem+0x2c8>)
 8000f5c:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000f5e:	4bae      	ldr	r3, [pc, #696]	; (8001218 <inSystem+0x2c4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000f64:	4bac      	ldr	r3, [pc, #688]	; (8001218 <inSystem+0x2c4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000f6a:	4bab      	ldr	r3, [pc, #684]	; (8001218 <inSystem+0x2c4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000f70:	4ba9      	ldr	r3, [pc, #676]	; (8001218 <inSystem+0x2c4>)
 8000f72:	2205      	movs	r2, #5
 8000f74:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f76:	4ba8      	ldr	r3, [pc, #672]	; (8001218 <inSystem+0x2c4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000f7c:	4ba6      	ldr	r3, [pc, #664]	; (8001218 <inSystem+0x2c4>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000f82:	48a5      	ldr	r0, [pc, #660]	; (8001218 <inSystem+0x2c4>)
 8000f84:	f006 fbe6 	bl	8007754 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	48a3      	ldr	r0, [pc, #652]	; (8001218 <inSystem+0x2c4>)
 8000f8c:	f006 fd0c 	bl	80079a8 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000f90:	f004 fe4a 	bl	8005c28 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 8000f94:	4ba2      	ldr	r3, [pc, #648]	; (8001220 <inSystem+0x2cc>)
 8000f96:	4aa3      	ldr	r2, [pc, #652]	; (8001224 <inSystem+0x2d0>)
 8000f98:	49a3      	ldr	r1, [pc, #652]	; (8001228 <inSystem+0x2d4>)
 8000f9a:	48a4      	ldr	r0, [pc, #656]	; (800122c <inSystem+0x2d8>)
 8000f9c:	f001 fa58 	bl	8002450 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000fa0:	4ba3      	ldr	r3, [pc, #652]	; (8001230 <inSystem+0x2dc>)
 8000fa2:	4a9e      	ldr	r2, [pc, #632]	; (800121c <inSystem+0x2c8>)
 8000fa4:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fa6:	4ba2      	ldr	r3, [pc, #648]	; (8001230 <inSystem+0x2dc>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000fac:	4ba0      	ldr	r3, [pc, #640]	; (8001230 <inSystem+0x2dc>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fb2:	4b9f      	ldr	r3, [pc, #636]	; (8001230 <inSystem+0x2dc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000fb8:	4b9d      	ldr	r3, [pc, #628]	; (8001230 <inSystem+0x2dc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fbe:	4b9c      	ldr	r3, [pc, #624]	; (8001230 <inSystem+0x2dc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fc4:	4b9a      	ldr	r3, [pc, #616]	; (8001230 <inSystem+0x2dc>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8000fca:	4899      	ldr	r0, [pc, #612]	; (8001230 <inSystem+0x2dc>)
 8000fcc:	f006 fbc2 	bl	8007754 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8000fd0:	4b98      	ldr	r3, [pc, #608]	; (8001234 <inSystem+0x2e0>)
 8000fd2:	4a99      	ldr	r2, [pc, #612]	; (8001238 <inSystem+0x2e4>)
 8000fd4:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000fd6:	4b97      	ldr	r3, [pc, #604]	; (8001234 <inSystem+0x2e0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8000fdc:	4b95      	ldr	r3, [pc, #596]	; (8001234 <inSystem+0x2e0>)
 8000fde:	4a97      	ldr	r2, [pc, #604]	; (800123c <inSystem+0x2e8>)
 8000fe0:	611a      	str	r2, [r3, #16]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8000fe2:	4b94      	ldr	r3, [pc, #592]	; (8001234 <inSystem+0x2e0>)
 8000fe4:	2221      	movs	r2, #33	; 0x21
 8000fe6:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000fe8:	4b92      	ldr	r3, [pc, #584]	; (8001234 <inSystem+0x2e0>)
 8000fea:	2264      	movs	r2, #100	; 0x64
 8000fec:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000fee:	4b91      	ldr	r3, [pc, #580]	; (8001234 <inSystem+0x2e0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000ff4:	4b8f      	ldr	r3, [pc, #572]	; (8001234 <inSystem+0x2e0>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8000ffa:	488e      	ldr	r0, [pc, #568]	; (8001234 <inSystem+0x2e0>)
 8000ffc:	f007 f8c6 	bl	800818c <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001000:	488c      	ldr	r0, [pc, #560]	; (8001234 <inSystem+0x2e0>)
 8001002:	f007 f9ad 	bl	8008360 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001006:	4b8e      	ldr	r3, [pc, #568]	; (8001240 <inSystem+0x2ec>)
 8001008:	4a84      	ldr	r2, [pc, #528]	; (800121c <inSystem+0x2c8>)
 800100a:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800100c:	4b8c      	ldr	r3, [pc, #560]	; (8001240 <inSystem+0x2ec>)
 800100e:	2202      	movs	r2, #2
 8001010:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001012:	4b8b      	ldr	r3, [pc, #556]	; (8001240 <inSystem+0x2ec>)
 8001014:	2202      	movs	r2, #2
 8001016:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001018:	4b89      	ldr	r3, [pc, #548]	; (8001240 <inSystem+0x2ec>)
 800101a:	2200      	movs	r2, #0
 800101c:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800101e:	4b88      	ldr	r3, [pc, #544]	; (8001240 <inSystem+0x2ec>)
 8001020:	2201      	movs	r2, #1
 8001022:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001024:	4b86      	ldr	r3, [pc, #536]	; (8001240 <inSystem+0x2ec>)
 8001026:	2200      	movs	r2, #0
 8001028:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800102a:	4b85      	ldr	r3, [pc, #532]	; (8001240 <inSystem+0x2ec>)
 800102c:	2202      	movs	r2, #2
 800102e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8001030:	4883      	ldr	r0, [pc, #524]	; (8001240 <inSystem+0x2ec>)
 8001032:	f006 fb8f 	bl	8007754 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001036:	4b83      	ldr	r3, [pc, #524]	; (8001244 <inSystem+0x2f0>)
 8001038:	4a7f      	ldr	r2, [pc, #508]	; (8001238 <inSystem+0x2e4>)
 800103a:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 800103c:	4b81      	ldr	r3, [pc, #516]	; (8001244 <inSystem+0x2f0>)
 800103e:	2201      	movs	r2, #1
 8001040:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 8001042:	4b80      	ldr	r3, [pc, #512]	; (8001244 <inSystem+0x2f0>)
 8001044:	4a7d      	ldr	r2, [pc, #500]	; (800123c <inSystem+0x2e8>)
 8001046:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001048:	4b7e      	ldr	r3, [pc, #504]	; (8001244 <inSystem+0x2f0>)
 800104a:	2221      	movs	r2, #33	; 0x21
 800104c:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <inSystem+0x2f0>)
 8001050:	2264      	movs	r2, #100	; 0x64
 8001052:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <inSystem+0x2f0>)
 8001056:	2201      	movs	r2, #1
 8001058:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800105a:	4b7a      	ldr	r3, [pc, #488]	; (8001244 <inSystem+0x2f0>)
 800105c:	2201      	movs	r2, #1
 800105e:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 8001060:	4878      	ldr	r0, [pc, #480]	; (8001244 <inSystem+0x2f0>)
 8001062:	f007 f893 	bl	800818c <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8001066:	4877      	ldr	r0, [pc, #476]	; (8001244 <inSystem+0x2f0>)
 8001068:	f007 f97a 	bl	8008360 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 800106c:	4b76      	ldr	r3, [pc, #472]	; (8001248 <inSystem+0x2f4>)
 800106e:	4a77      	ldr	r2, [pc, #476]	; (800124c <inSystem+0x2f8>)
 8001070:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001072:	4b75      	ldr	r3, [pc, #468]	; (8001248 <inSystem+0x2f4>)
 8001074:	2200      	movs	r2, #0
 8001076:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001078:	4b73      	ldr	r3, [pc, #460]	; (8001248 <inSystem+0x2f4>)
 800107a:	2201      	movs	r2, #1
 800107c:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <inSystem+0x2f4>)
 8001080:	220a      	movs	r2, #10
 8001082:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001084:	4b70      	ldr	r3, [pc, #448]	; (8001248 <inSystem+0x2f4>)
 8001086:	2200      	movs	r2, #0
 8001088:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800108a:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <inSystem+0x2f4>)
 800108c:	2200      	movs	r2, #0
 800108e:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001090:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <inSystem+0x2f4>)
 8001092:	2202      	movs	r2, #2
 8001094:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001096:	486c      	ldr	r0, [pc, #432]	; (8001248 <inSystem+0x2f4>)
 8001098:	f006 fb5c 	bl	8007754 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 800109c:	2100      	movs	r1, #0
 800109e:	486a      	ldr	r0, [pc, #424]	; (8001248 <inSystem+0x2f4>)
 80010a0:	f006 fcad 	bl	80079fe <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80010a4:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <inSystem+0x2fc>)
 80010a6:	4a69      	ldr	r2, [pc, #420]	; (800124c <inSystem+0x2f8>)
 80010a8:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010aa:	4b69      	ldr	r3, [pc, #420]	; (8001250 <inSystem+0x2fc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010b0:	4b67      	ldr	r3, [pc, #412]	; (8001250 <inSystem+0x2fc>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80010b6:	4b66      	ldr	r3, [pc, #408]	; (8001250 <inSystem+0x2fc>)
 80010b8:	220b      	movs	r2, #11
 80010ba:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010bc:	4b64      	ldr	r3, [pc, #400]	; (8001250 <inSystem+0x2fc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <inSystem+0x2fc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010c8:	4b61      	ldr	r3, [pc, #388]	; (8001250 <inSystem+0x2fc>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 80010ce:	4860      	ldr	r0, [pc, #384]	; (8001250 <inSystem+0x2fc>)
 80010d0:	f006 fb40 	bl	8007754 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 80010d4:	2100      	movs	r1, #0
 80010d6:	485e      	ldr	r0, [pc, #376]	; (8001250 <inSystem+0x2fc>)
 80010d8:	f006 fc91 	bl	80079fe <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 80010dc:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <inSystem+0x300>)
 80010de:	4a5b      	ldr	r2, [pc, #364]	; (800124c <inSystem+0x2f8>)
 80010e0:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010e2:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <inSystem+0x300>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010e8:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <inSystem+0x300>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 80010ee:	4b59      	ldr	r3, [pc, #356]	; (8001254 <inSystem+0x300>)
 80010f0:	220c      	movs	r2, #12
 80010f2:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010f4:	4b57      	ldr	r3, [pc, #348]	; (8001254 <inSystem+0x300>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <inSystem+0x300>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001100:	4b54      	ldr	r3, [pc, #336]	; (8001254 <inSystem+0x300>)
 8001102:	2202      	movs	r2, #2
 8001104:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001106:	4853      	ldr	r0, [pc, #332]	; (8001254 <inSystem+0x300>)
 8001108:	f006 fb24 	bl	8007754 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 800110c:	2100      	movs	r1, #0
 800110e:	4851      	ldr	r0, [pc, #324]	; (8001254 <inSystem+0x300>)
 8001110:	f006 fc75 	bl	80079fe <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <inSystem+0x2d8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <inSystem+0x304>)
 800111e:	4a4f      	ldr	r2, [pc, #316]	; (800125c <inSystem+0x308>)
 8001120:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <inSystem+0x304>)
 8001124:	2200      	movs	r2, #0
 8001126:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <inSystem+0x304>)
 800112a:	2201      	movs	r2, #1
 800112c:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <inSystem+0x304>)
 8001130:	2202      	movs	r2, #2
 8001132:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <inSystem+0x304>)
 8001136:	2200      	movs	r2, #0
 8001138:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <inSystem+0x304>)
 800113c:	2200      	movs	r2, #0
 800113e:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <inSystem+0x304>)
 8001142:	2202      	movs	r2, #2
 8001144:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8001146:	4844      	ldr	r0, [pc, #272]	; (8001258 <inSystem+0x304>)
 8001148:	f006 fb04 	bl	8007754 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 800114c:	2100      	movs	r1, #0
 800114e:	4842      	ldr	r0, [pc, #264]	; (8001258 <inSystem+0x304>)
 8001150:	f006 fc55 	bl	80079fe <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <inSystem+0x2d8>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <inSystem+0x30c>)
 800115e:	4a3b      	ldr	r2, [pc, #236]	; (800124c <inSystem+0x2f8>)
 8001160:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <inSystem+0x30c>)
 8001164:	2200      	movs	r2, #0
 8001166:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <inSystem+0x30c>)
 800116a:	2200      	movs	r2, #0
 800116c:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800116e:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <inSystem+0x30c>)
 8001170:	2201      	movs	r2, #1
 8001172:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001174:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <inSystem+0x30c>)
 8001176:	2200      	movs	r2, #0
 8001178:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <inSystem+0x30c>)
 800117c:	2200      	movs	r2, #0
 800117e:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <inSystem+0x30c>)
 8001182:	2202      	movs	r2, #2
 8001184:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <inSystem+0x310>)
 8001188:	4a35      	ldr	r2, [pc, #212]	; (8001260 <inSystem+0x30c>)
 800118a:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <inSystem+0x310>)
 800118e:	2202      	movs	r2, #2
 8001190:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001192:	4834      	ldr	r0, [pc, #208]	; (8001264 <inSystem+0x310>)
 8001194:	f005 fa16 	bl	80065c4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 8001198:	2106      	movs	r1, #6
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <inSystem+0x310>)
 800119c:	f006 f8ba 	bl	8007314 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <inSystem+0x314>)
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <inSystem+0x2f8>)
 80011a4:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <inSystem+0x314>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <inSystem+0x314>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <inSystem+0x314>)
 80011b4:	2203      	movs	r2, #3
 80011b6:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <inSystem+0x314>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <inSystem+0x314>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <inSystem+0x314>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <inSystem+0x318>)
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <inSystem+0x314>)
 80011ce:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <inSystem+0x318>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 80011d6:	4825      	ldr	r0, [pc, #148]	; (800126c <inSystem+0x318>)
 80011d8:	f005 f9f4 	bl	80065c4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 80011dc:	2106      	movs	r1, #6
 80011de:	4823      	ldr	r0, [pc, #140]	; (800126c <inSystem+0x318>)
 80011e0:	f006 f898 	bl	8007314 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <inSystem+0x31c>)
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <inSystem+0x2c8>)
 80011e8:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <inSystem+0x31c>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <inSystem+0x31c>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <inSystem+0x31c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <inSystem+0x31c>)
 80011fe:	2202      	movs	r2, #2
 8001200:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <inSystem+0x31c>)
 8001204:	2200      	movs	r2, #0
 8001206:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <inSystem+0x31c>)
 800120a:	2203      	movs	r2, #3
 800120c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <inSystem+0x31c>)
 8001210:	f006 faa0 	bl	8007754 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <inSystem+0x320>)
 8001216:	e02f      	b.n	8001278 <inSystem+0x324>
 8001218:	2000023c 	.word	0x2000023c
 800121c:	40020000 	.word	0x40020000
 8001220:	2000050c 	.word	0x2000050c
 8001224:	20000528 	.word	0x20000528
 8001228:	20000590 	.word	0x20000590
 800122c:	200003f0 	.word	0x200003f0
 8001230:	20000248 	.word	0x20000248
 8001234:	20000310 	.word	0x20000310
 8001238:	40000c00 	.word	0x40000c00
 800123c:	41e00000 	.word	0x41e00000
 8001240:	20000254 	.word	0x20000254
 8001244:	20000328 	.word	0x20000328
 8001248:	20000284 	.word	0x20000284
 800124c:	40020800 	.word	0x40020800
 8001250:	20000278 	.word	0x20000278
 8001254:	2000029c 	.word	0x2000029c
 8001258:	20000290 	.word	0x20000290
 800125c:	40020c00 	.word	0x40020c00
 8001260:	200002a8 	.word	0x200002a8
 8001264:	200002d8 	.word	0x200002d8
 8001268:	200002b4 	.word	0x200002b4
 800126c:	200002e0 	.word	0x200002e0
 8001270:	2000026c 	.word	0x2000026c
 8001274:	20000260 	.word	0x20000260
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <inSystem+0x45c>)
 800127a:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <inSystem+0x460>)
 800127e:	2207      	movs	r2, #7
 8001280:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001282:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <inSystem+0x460>)
 8001284:	2202      	movs	r2, #2
 8001286:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001288:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <inSystem+0x460>)
 800128a:	2200      	movs	r2, #0
 800128c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <inSystem+0x460>)
 8001290:	2203      	movs	r2, #3
 8001292:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <inSystem+0x460>)
 8001296:	2200      	movs	r2, #0
 8001298:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <inSystem+0x460>)
 800129c:	2203      	movs	r2, #3
 800129e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80012a0:	4844      	ldr	r0, [pc, #272]	; (80013b4 <inSystem+0x460>)
 80012a2:	f006 fa57 	bl	8007754 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <inSystem+0x464>)
 80012a8:	4a44      	ldr	r2, [pc, #272]	; (80013bc <inSystem+0x468>)
 80012aa:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <inSystem+0x464>)
 80012ae:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <inSystem+0x46c>)
 80012b0:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <inSystem+0x464>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80012b8:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <inSystem+0x464>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <inSystem+0x464>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 80012c4:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <inSystem+0x464>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <inSystem+0x464>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <inSystem+0x464>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <inSystem+0x464>)
 80012d8:	2200      	movs	r2, #0
 80012da:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 80012dc:	4836      	ldr	r0, [pc, #216]	; (80013b8 <inSystem+0x464>)
 80012de:	f007 ffa5 	bl	800922c <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 80012e2:	2106      	movs	r1, #6
 80012e4:	4834      	ldr	r0, [pc, #208]	; (80013b8 <inSystem+0x464>)
 80012e6:	f008 fc47 	bl	8009b78 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <inSystem+0x470>)
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f0:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <inSystem+0x470>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <inSystem+0x470>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <inSystem+0x470>)
 8001300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001304:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <inSystem+0x470>)
 8001308:	2210      	movs	r2, #16
 800130a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800130c:	482d      	ldr	r0, [pc, #180]	; (80013c4 <inSystem+0x470>)
 800130e:	f004 fca7 	bl	8005c60 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001312:	2106      	movs	r1, #6
 8001314:	482b      	ldr	r0, [pc, #172]	; (80013c4 <inSystem+0x470>)
 8001316:	f004 fe61 	bl	8005fdc <TIM_SetPriority>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <inSystem+0x474>)
 800131c:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <inSystem+0x478>)
 800131e:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <inSystem+0x474>)
 8001322:	2204      	movs	r2, #4
 8001324:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <inSystem+0x474>)
 8001328:	2202      	movs	r2, #2
 800132a:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <inSystem+0x474>)
 800132e:	2208      	movs	r2, #8
 8001330:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <inSystem+0x474>)
 8001334:	2201      	movs	r2, #1
 8001336:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <inSystem+0x474>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <inSystem+0x474>)
 8001340:	2202      	movs	r2, #2
 8001342:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <inSystem+0x47c>)
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <inSystem+0x478>)
 8001348:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <inSystem+0x47c>)
 800134c:	2204      	movs	r2, #4
 800134e:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <inSystem+0x47c>)
 8001352:	2202      	movs	r2, #2
 8001354:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <inSystem+0x47c>)
 8001358:	2209      	movs	r2, #9
 800135a:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <inSystem+0x47c>)
 800135e:	2201      	movs	r2, #1
 8001360:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <inSystem+0x47c>)
 8001364:	2200      	movs	r2, #0
 8001366:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <inSystem+0x47c>)
 800136a:	2202      	movs	r2, #2
 800136c:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <inSystem+0x480>)
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <inSystem+0x484>)
 8001372:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <inSystem+0x480>)
 8001376:	2232      	movs	r2, #50	; 0x32
 8001378:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <inSystem+0x480>)
 800137c:	2268      	movs	r2, #104	; 0x68
 800137e:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <inSystem+0x480>)
 8001382:	2201      	movs	r2, #1
 8001384:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <inSystem+0x488>)
 8001388:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <inSystem+0x474>)
 800138a:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <inSystem+0x488>)
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <inSystem+0x47c>)
 8001390:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <inSystem+0x488>)
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <inSystem+0x480>)
 8001396:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <inSystem+0x488>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <inSystem+0x488>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <inSystem+0x488>)
 80013a6:	f006 fb8d 	bl	8007ac4 <configMPUAccel>

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40020000 	.word	0x40020000
 80013b4:	20000260 	.word	0x20000260
 80013b8:	20000340 	.word	0x20000340
 80013bc:	40004400 	.word	0x40004400
 80013c0:	02faf080 	.word	0x02faf080
 80013c4:	200002e8 	.word	0x200002e8
 80013c8:	200002c0 	.word	0x200002c0
 80013cc:	40020400 	.word	0x40020400
 80013d0:	200002cc 	.word	0x200002cc
 80013d4:	200003d4 	.word	0x200003d4
 80013d8:	40005400 	.word	0x40005400
 80013dc:	200003e0 	.word	0x200003e0

080013e0 <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "===============================================\n"
 80013e8:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <vTask_Menu+0x110>)
 80013ea:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here:";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80013ec:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <vTask_Menu+0x114>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	f107 010c 	add.w	r1, r7, #12
 80013f4:	2300      	movs	r3, #0
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	f001 fe9f 	bl	800313c <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2000      	movs	r0, #0
 800140e:	f003 f93b 	bl	8004688 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	617b      	str	r3, [r7, #20]

		// El comando recibido solo tener el largo de 1 caracter
		if(cmd->functionType != -1){
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141e:	d052      	beq.n	80014c6 <vTask_Menu+0xe6>

			switch (cmd->functionType) {
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b03      	cmp	r3, #3
 8001426:	d030      	beq.n	800148a <vTask_Menu+0xaa>
 8001428:	2b03      	cmp	r3, #3
 800142a:	dc43      	bgt.n	80014b4 <vTask_Menu+0xd4>
 800142c:	2b01      	cmp	r3, #1
 800142e:	d002      	beq.n	8001436 <vTask_Menu+0x56>
 8001430:	2b02      	cmp	r3, #2
 8001432:	d015      	beq.n	8001460 <vTask_Menu+0x80>
 8001434:	e03e      	b.n	80014b4 <vTask_Menu+0xd4>
				case 1:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <vTask_Menu+0x114>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	492d      	ldr	r1, [pc, #180]	; (80014f8 <vTask_Menu+0x118>)
 8001442:	f001 fe7b 	bl	800313c <xQueueGenericSend>
					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <vTask_Menu+0x11c>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Go, 0 ,eNoAction);
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <vTask_Menu+0x120>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	f003 f995 	bl	8004788 <xTaskGenericNotify>


					break;
 800145e:	e046      	b.n	80014ee <vTask_Menu+0x10e>
				}case 2:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <vTask_Menu+0x114>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	2300      	movs	r3, #0
 8001466:	f04f 32ff 	mov.w	r2, #4294967295
 800146a:	4923      	ldr	r1, [pc, #140]	; (80014f8 <vTask_Menu+0x118>)
 800146c:	f001 fe66 	bl	800313c <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <vTask_Menu+0x11c>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <vTask_Menu+0x124>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	f003 f980 	bl	8004788 <xTaskGenericNotify>


					break;
 8001488:	e031      	b.n	80014ee <vTask_Menu+0x10e>
				}case 3:{
					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <vTask_Menu+0x114>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	491c      	ldr	r1, [pc, #112]	; (8001508 <vTask_Menu+0x128>)
 8001496:	f001 fe51 	bl	800313c <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sMainMenu;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <vTask_Menu+0x11c>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <vTask_Menu+0x124>)
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2300      	movs	r3, #0
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	f003 f96b 	bl	8004788 <xTaskGenericNotify>



					break;
 80014b2:	e01c      	b.n	80014ee <vTask_Menu+0x10e>
				}
				default:{
					xQueueSend(xQueue_Print, &msg_option_n , portMAX_DELAY);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <vTask_Menu+0x114>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295
 80014be:	4913      	ldr	r1, [pc, #76]	; (800150c <vTask_Menu+0x12c>)
 80014c0:	f001 fe3c 	bl	800313c <xQueueGenericSend>
					continue;
 80014c4:	e013      	b.n	80014ee <vTask_Menu+0x10e>

				}
			}

		}else{
			xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <vTask_Menu+0x114>)
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	490f      	ldr	r1, [pc, #60]	; (8001510 <vTask_Menu+0x130>)
 80014d2:	f001 fe33 	bl	800313c <xQueueGenericSend>
			//Aca se deberia notificar cambiar la variable next_state y notificar
			next_state = sMainMenu;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <vTask_Menu+0x11c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <vTask_Menu+0x124>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2300      	movs	r3, #0
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	f003 f94d 	bl	8004788 <xTaskGenericNotify>
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80014ee:	e77d      	b.n	80013ec <vTask_Menu+0xc>
 80014f0:	0800f514 	.word	0x0800f514
 80014f4:	20000230 	.word	0x20000230
 80014f8:	20000004 	.word	0x20000004
 80014fc:	200004fa 	.word	0x200004fa
 8001500:	20000228 	.word	0x20000228
 8001504:	20000218 	.word	0x20000218
 8001508:	20000008 	.word	0x20000008
 800150c:	2000000c 	.word	0x2000000c
 8001510:	20000000 	.word	0x20000000

08001514 <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 8001514:	b580      	push	{r7, lr}
 8001516:	b096      	sub	sp, #88	; 0x58
 8001518:	af02      	add	r7, sp, #8
 800151a:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 800151c:	2300      	movs	r3, #0
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
	command_t cmd = {0};
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2244      	movs	r2, #68	; 0x44
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f008 fe7f 	bl	800a22c <memset>

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2000      	movs	r0, #0
 800153c:	f003 f8a4 	bl	8004688 <xTaskGenericNotifyWait>
 8001540:	64f8      	str	r0, [r7, #76]	; 0x4c

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 8001542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001544:	2b01      	cmp	r3, #1
 8001546:	d1f2      	bne.n	800152e <vTask_Commands+0x1a>

		   process_command(&cmd);
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f8ad 	bl	80016ac <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001552:	e7ec      	b.n	800152e <vTask_Commands+0x1a>

08001554 <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8
 800155a:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2300      	movs	r3, #0
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2000      	movs	r0, #0
 800156a:	f003 f88d 	bl	8004688 <xTaskGenericNotifyWait>


		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 800156e:	4809      	ldr	r0, [pc, #36]	; (8001594 <vTask_Stop+0x40>)
 8001570:	f000 ff49 	bl	8002406 <stop>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Detenemos los muestreos
 8001574:	4808      	ldr	r0, [pc, #32]	; (8001598 <vTask_Stop+0x44>)
 8001576:	f004 ffcb 	bl	8006510 <stopTimer>

		// Bajamos las banderas de movimiento alguno
		flag_Go_Straigh   = RESET;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <vTask_Stop+0x48>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <vTask_Stop+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <vTask_Stop+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <vTask_Stop+0x54>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001592:	e7e3      	b.n	800155c <vTask_Stop+0x8>
 8001594:	200003f0 	.word	0x200003f0
 8001598:	200002e8 	.word	0x200002e8
 800159c:	200004fd 	.word	0x200004fd
 80015a0:	200004fe 	.word	0x200004fe
 80015a4:	20000500 	.word	0x20000500
 80015a8:	20000501 	.word	0x20000501

080015ac <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2300      	movs	r3, #0
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	2000      	movs	r0, #0
 80015c2:	f003 f861 	bl	8004688 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <vTask_Go+0x40>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = 0;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <vTask_Go+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	705a      	strb	r2, [r3, #1]

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <vTask_Go+0x40>)
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <vTask_Go+0x44>)
 80015d8:	f000 fe2a 	bl	8002230 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <vTask_Go+0x48>)
 80015de:	f004 ff85 	bl	80064ec <startTimer>

		// Levantamos la bandera correspondiente a este comando

		flag_Go_Straigh = SET;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <vTask_Go+0x4c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015e8:	e7e4      	b.n	80015b4 <vTask_Go+0x8>
 80015ea:	bf00      	nop
 80015ec:	200004f8 	.word	0x200004f8
 80015f0:	200003f0 	.word	0x200003f0
 80015f4:	200002e8 	.word	0x200002e8
 80015f8:	200004fd 	.word	0x200004fd

080015fc <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af06      	add	r7, sp, #24
 8001602:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2000      	movs	r0, #0
 8001612:	f003 f839 	bl	8004688 <xTaskGenericNotifyWait>

		go(handler_Motor_Array,
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <vTask_Control+0x54>)
 8001618:	ed93 7b00 	vldr	d7, [r3]
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <vTask_Control+0x58>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <vTask_Control+0x5c>)
 8001626:	9304      	str	r3, [sp, #16]
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <vTask_Control+0x60>)
 800162a:	9303      	str	r3, [sp, #12]
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <vTask_Control+0x64>)
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <vTask_Control+0x68>)
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <vTask_Control+0x6c>)
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	eeb0 0a47 	vmov.f32	s0, s14
 800163c:	eef0 0a67 	vmov.f32	s1, s15
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <vTask_Control+0x70>)
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <vTask_Control+0x74>)
 8001644:	490b      	ldr	r1, [pc, #44]	; (8001674 <vTask_Control+0x78>)
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <vTask_Control+0x7c>)
 8001648:	f001 f986 	bl	8002958 <go>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800164c:	e7da      	b.n	8001604 <vTask_Control+0x8>
 800164e:	bf00      	nop
 8001650:	200005e0 	.word	0x200005e0
 8001654:	200004f8 	.word	0x200004f8
 8001658:	200004b8 	.word	0x200004b8
 800165c:	200004ff 	.word	0x200004ff
 8001660:	200004fc 	.word	0x200004fc
 8001664:	200004fb 	.word	0x200004fb
 8001668:	2000050c 	.word	0x2000050c
 800166c:	20000528 	.word	0x20000528
 8001670:	20000590 	.word	0x20000590
 8001674:	200003e0 	.word	0x200003e0
 8001678:	200003f0 	.word	0x200003f0

0800167c <vTask_Print>:

////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Print( void * pvParameters ){
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <vTask_Print+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f107 010c 	add.w	r1, r7, #12
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	4618      	mov	r0, r3
 8001692:	f001 fefb 	bl	800348c <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4619      	mov	r1, r3
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <vTask_Print+0x2c>)
 800169c:	f008 f9a6 	bl	80099ec <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80016a0:	e7f0      	b.n	8001684 <vTask_Print+0x8>
 80016a2:	bf00      	nop
 80016a4:	20000230 	.word	0x20000230
 80016a8:	20000340 	.word	0x20000340

080016ac <process_command>:
   }
}

void process_command (command_t *cmd){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f815 	bl	80016e4 <extract_command>


	if (next_state == sMainMenu){
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <process_command+0x30>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d108      	bne.n	80016d4 <process_command+0x28>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <process_command+0x34>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	2300      	movs	r3, #0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2303      	movs	r3, #3
 80016ce:	2100      	movs	r1, #0
 80016d0:	f003 f85a 	bl	8004788 <xTaskGenericNotify>
//		//Notificamos a la tarea en el estado de parada.
//		xTaskNotify(xHandleTask_Stop,0, eNoAction);
	}


}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200004fa 	.word	0x200004fa
 80016e0:	20000218 	.word	0x20000218

080016e4 <extract_command>:


int extract_command (command_t *cmd){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <extract_command+0x9c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f838 	bl	800376a <uxQueueMessagesWaiting>
 80016fa:	4603      	mov	r3, r0
 80016fc:	613b      	str	r3, [r7, #16]
	if (status == 0){
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <extract_command+0x26>
		return -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	e035      	b.n	8001776 <extract_command+0x92>
	}

	do{
		// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
		status = xQueueReceive(xQueue_InputData, &item,0);
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <extract_command+0x9c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f107 010f 	add.w	r1, r7, #15
 8001712:	2200      	movs	r2, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f001 feb9 	bl	800348c <xQueueReceive>
 800171a:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE){
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d106      	bne.n	8001730 <extract_command+0x4c>

			//vamos llenando el arreglo del comando
			cmd->payload[counter_j++] = item;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	75fa      	strb	r2, [r7, #23]
 8001728:	461a      	mov	r2, r3
 800172a:	7bf9      	ldrb	r1, [r7, #15]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	5499      	strb	r1, [r3, r2]

		}
	}while(item != '#');
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b23      	cmp	r3, #35	; 0x23
 8001734:	d1e9      	bne.n	800170a <extract_command+0x26>

	cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	2100      	movs	r1, #0
 800173c:	54d1      	strb	r1, [r2, r3]

	counter_j = 0; // Reseteamos el contador
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
	// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
//	sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

	extract_info(counter_j, cmd, data, firstParameter, secondParameter, thirdParameter);
 8001742:	7df8      	ldrb	r0, [r7, #23]
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <extract_command+0xa0>)
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <extract_command+0xa4>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <extract_command+0xa8>)
 800174e:	4a10      	ldr	r2, [pc, #64]	; (8001790 <extract_command+0xac>)
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	f001 f9ab 	bl	8002aac <extract_info>

	if (strcmp(data, "sGo") == 0){
 8001756:	490f      	ldr	r1, [pc, #60]	; (8001794 <extract_command+0xb0>)
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <extract_command+0xac>)
 800175a:	f7fe fd41 	bl	80001e0 <strcmp>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d103      	bne.n	800176c <extract_command+0x88>
		cmd->functionType = 1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
 800176a:	e003      	b.n	8001774 <extract_command+0x90>
	}else{
		cmd->functionType = -1; // Si se llega aca es porque se mando el comando incorrecto
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
	}

	return 0;
 8001774:	2300      	movs	r3, #0

}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000234 	.word	0x20000234
 8001784:	2000046c 	.word	0x2000046c
 8001788:	20000460 	.word	0x20000460
 800178c:	20000454 	.word	0x20000454
 8001790:	20000478 	.word	0x20000478
 8001794:	0800f5bc 	.word	0x0800f5bc

08001798 <callback_extInt1>:

// INTERRUPCIONES DE EXTI
void callback_extInt1(void){
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[0]->parametersMotor.counts++;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <callback_extInt1+0x1c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	791a      	ldrb	r2, [r3, #4]
 80017a2:	3201      	adds	r2, #1
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	711a      	strb	r2, [r3, #4]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200003f0 	.word	0x200003f0

080017b8 <callback_extInt3>:

void callback_extInt3(void){
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[1]->parametersMotor.counts++;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <callback_extInt3+0x1c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	791a      	ldrb	r2, [r3, #4]
 80017c2:	3201      	adds	r2, #1
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	711a      	strb	r2, [r3, #4]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200003f0 	.word	0x200003f0

080017d8 <usart2Rx_Callback>:




//Interripcion USART2
void usart2Rx_Callback(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af02      	add	r7, sp, #8

	rxData = getRxData();
 80017de:	f008 f92d 	bl	8009a3c <getRxData>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <usart2Rx_Callback+0x88>)
 80017e8:	701a      	strb	r2, [r3, #0]
//
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <usart2Rx_Callback+0x8c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 f8e7 	bl	80039c6 <xQueueIsQueueFullFromISR>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <usart2Rx_Callback+0x90>)
 80017fc:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <usart2Rx_Callback+0x90>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d007      	beq.n	8001816 <usart2Rx_Callback+0x3e>

		xQueueSendToBackFromISR(xQueue_InputData,
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <usart2Rx_Callback+0x8c>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2200      	movs	r2, #0
 800180e:	4914      	ldr	r1, [pc, #80]	; (8001860 <usart2Rx_Callback+0x88>)
 8001810:	f001 fd92 	bl	8003338 <xQueueGenericSendFromISR>
 8001814:	e011      	b.n	800183a <usart2Rx_Callback+0x62>
								NULL);

	}else{


		if (rxData == '#'){
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <usart2Rx_Callback+0x88>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b23      	cmp	r3, #35	; 0x23
 800181c:	d10d      	bne.n	800183a <usart2Rx_Callback+0x62>

			xQueueReceiveFromISR(xQueue_InputData,
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <usart2Rx_Callback+0x8c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	490e      	ldr	r1, [pc, #56]	; (8001860 <usart2Rx_Callback+0x88>)
 8001826:	4618      	mov	r0, r3
 8001828:	f001 ff10 	bl	800364c <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <usart2Rx_Callback+0x8c>)
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	2300      	movs	r3, #0
 8001832:	2200      	movs	r2, #0
 8001834:	490a      	ldr	r1, [pc, #40]	; (8001860 <usart2Rx_Callback+0x88>)
 8001836:	f001 fd7f 	bl	8003338 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (rxData == '#'){
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <usart2Rx_Callback+0x88>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b23      	cmp	r3, #35	; 0x23
 8001840:	d10a      	bne.n	8001858 <usart2Rx_Callback+0x80>
		// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
		xTaskNotifyFromISR(xHandleTask_Commands,
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <usart2Rx_Callback+0x94>)
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2300      	movs	r3, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	f003 f878 	bl	8004948 <xTaskGenericNotifyFromISR>
						   eNoAction,
						   NULL);
//		xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

	}
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000450 	.word	0x20000450
 8001864:	20000234 	.word	0x20000234
 8001868:	20000214 	.word	0x20000214
 800186c:	20000220 	.word	0x20000220

08001870 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <BasicTimer2_Callback+0x4c>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <BasicTimer2_Callback+0x50>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b29a      	uxth	r2, r3
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <BasicTimer2_Callback+0x54>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d803      	bhi.n	8001892 <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <BasicTimer2_Callback+0x58>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e005      	b.n	800189e <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <BasicTimer2_Callback+0x54>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <BasicTimer2_Callback+0x54>)
 800189c:	801a      	strh	r2, [r3, #0]
	xTaskNotifyFromISR(xHandleTask_Control,
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <BasicTimer2_Callback+0x5c>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	f003 f84a 	bl	8004948 <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200004fb 	.word	0x200004fb
 80018c0:	20000010 	.word	0x20000010
 80018c4:	20000504 	.word	0x20000504
 80018c8:	200004fc 	.word	0x200004fc
 80018cc:	2000022c 	.word	0x2000022c

080018d0 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 80018dc:	23c8      	movs	r3, #200	; 0xc8
 80018de:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]

	switch (axis) {
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d061      	beq.n	80019c0 <calibracionGyros+0xf0>
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	dc70      	bgt.n	80019e2 <calibracionGyros+0x112>
 8001900:	2b00      	cmp	r3, #0
 8001902:	d015      	beq.n	8001930 <calibracionGyros+0x60>
 8001904:	2b01      	cmp	r3, #1
 8001906:	d037      	beq.n	8001978 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001908:	e06b      	b.n	80019e2 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f006 fa64 	bl	8007dd8 <readGyro_X>
 8001910:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001914:	ed97 7a07 	vldr	s14, [r7, #28]
 8001918:	edd7 7a03 	vldr	s15, [r7, #12]
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001924:	7efb      	ldrb	r3, [r7, #27]
 8001926:	3301      	adds	r3, #1
 8001928:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 800192a:	2001      	movs	r0, #1
 800192c:	f004 fb1e 	bl	8005f6c <delay_ms>
			while (contador < numMedidas){
 8001930:	7efb      	ldrb	r3, [r7, #27]
 8001932:	b29b      	uxth	r3, r3
 8001934:	8a7a      	ldrh	r2, [r7, #18]
 8001936:	429a      	cmp	r2, r3
 8001938:	d8e7      	bhi.n	800190a <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 800193a:	8a7b      	ldrh	r3, [r7, #18]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001944:	edd7 6a07 	vldr	s13, [r7, #28]
 8001948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001950:	e048      	b.n	80019e4 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f006 fac8 	bl	8007ee8 <readGyro_Y>
 8001958:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 800195c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001960:	edd7 7a03 	vldr	s15, [r7, #12]
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 800196c:	7efb      	ldrb	r3, [r7, #27]
 800196e:	3301      	adds	r3, #1
 8001970:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001972:	2001      	movs	r0, #1
 8001974:	f004 fafa 	bl	8005f6c <delay_ms>
			while (contador < numMedidas){
 8001978:	7efb      	ldrb	r3, [r7, #27]
 800197a:	b29b      	uxth	r3, r3
 800197c:	8a7a      	ldrh	r2, [r7, #18]
 800197e:	429a      	cmp	r2, r3
 8001980:	d8e7      	bhi.n	8001952 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001982:	8a7b      	ldrh	r3, [r7, #18]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001994:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001998:	e024      	b.n	80019e4 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f006 fb2c 	bl	8007ff8 <readGyro_Z>
 80019a0:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 80019a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80019a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 80019b4:	7efb      	ldrb	r3, [r7, #27]
 80019b6:	3301      	adds	r3, #1
 80019b8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 80019ba:	2001      	movs	r0, #1
 80019bc:	f004 fad6 	bl	8005f6c <delay_ms>
			while (contador < numMedidas){
 80019c0:	7efb      	ldrb	r3, [r7, #27]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	8a7a      	ldrh	r2, [r7, #18]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d8e7      	bhi.n	800199a <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 80019ca:	8a7b      	ldrh	r3, [r7, #18]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80019d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019dc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80019e0:	e000      	b.n	80019e4 <calibracionGyros+0x114>
			break;
 80019e2:	bf00      	nop
		}
	}


	return promedio;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	ee07 3a90 	vmov	s15, r3
}
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6178      	str	r0, [r7, #20]
 80019fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a00:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a04:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f006 faf6 	bl	8007ff8 <readGyro_Z>
 8001a0c:	ee10 3a10 	vmov	r3, s0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fdb1 	bl	8000578 <__aeabi_f2d>
 8001a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a1a:	f7fe fc4d 	bl	80002b8 <__aeabi_dsub>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8f7 	bl	8000c18 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001a2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a32:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a3a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001aa0 <getAngle+0xac>
 8001a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a42:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4a:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001a4e:	69b8      	ldr	r0, [r7, #24]
 8001a50:	f7fe fd92 	bl	8000578 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <getAngle+0xb0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd88 	bl	8000578 <__aeabi_f2d>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fc25 	bl	80002bc <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f8cd 	bl	8000c18 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <getAngle+0xb0>)
 8001a82:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <getAngle+0xb4>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <getAngle+0xb8>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <getAngle+0xb8>)
 8001a94:	801a      	strh	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	447a0000 	.word	0x447a0000
 8001aa4:	200005e8 	.word	0x200005e8
 8001aa8:	200002e8 	.word	0x200002e8
 8001aac:	20000502 	.word	0x20000502

08001ab0 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	ed2d 8b02 	vpush	{d8}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001ac0:	793b      	ldrb	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 81d4 	bne.w	8001e70 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001ac8:	4bab      	ldr	r3, [pc, #684]	; (8001d78 <get_measuremets_parameters+0x2c8>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4bab      	ldr	r3, [pc, #684]	; (8001d7c <get_measuremets_parameters+0x2cc>)
 8001ad0:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001ad2:	4bab      	ldr	r3, [pc, #684]	; (8001d80 <get_measuremets_parameters+0x2d0>)
 8001ad4:	edd3 6a00 	vldr	s13, [r3]
 8001ad8:	4baa      	ldr	r3, [pc, #680]	; (8001d84 <get_measuremets_parameters+0x2d4>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae8:	4ba7      	ldr	r3, [pc, #668]	; (8001d88 <get_measuremets_parameters+0x2d8>)
 8001aea:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001aee:	4ba6      	ldr	r3, [pc, #664]	; (8001d88 <get_measuremets_parameters+0x2d8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd40 	bl	8000578 <__aeabi_f2d>
 8001af8:	a39b      	add	r3, pc, #620	; (adr r3, 8001d68 <get_measuremets_parameters+0x2b8>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fd93 	bl	8000628 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b9f      	ldr	r3, [pc, #636]	; (8001d8c <get_measuremets_parameters+0x2dc>)
 8001b10:	f7fe feb4 	bl	800087c <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001b1e:	4b98      	ldr	r3, [pc, #608]	; (8001d80 <get_measuremets_parameters+0x2d0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd28 	bl	8000578 <__aeabi_f2d>
 8001b28:	a38f      	add	r3, pc, #572	; (adr r3, 8001d68 <get_measuremets_parameters+0x2b8>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fd7b 	bl	8000628 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b93      	ldr	r3, [pc, #588]	; (8001d8c <get_measuremets_parameters+0x2dc>)
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	ec43 2b17 	vmov	d7, r2, r3
 8001b4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b50:	eef0 0a67 	vmov.f32	s1, s15
 8001b54:	f00b fadc 	bl	800d110 <sin>
 8001b58:	eeb0 8a40 	vmov.f32	s16, s0
 8001b5c:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001b60:	4b87      	ldr	r3, [pc, #540]	; (8001d80 <get_measuremets_parameters+0x2d0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fd07 	bl	8000578 <__aeabi_f2d>
 8001b6a:	a37f      	add	r3, pc, #508	; (adr r3, 8001d68 <get_measuremets_parameters+0x2b8>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd5a 	bl	8000628 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <get_measuremets_parameters+0x2dc>)
 8001b82:	f7fe fe7b 	bl	800087c <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	ec43 2b17 	vmov	d7, r2, r3
 8001b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b92:	eef0 0a67 	vmov.f32	s1, s15
 8001b96:	f00b fa1f 	bl	800cfd8 <cos>
 8001b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b9e:	eef0 7a60 	vmov.f32	s15, s1
 8001ba2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ba6:	eef0 1a67 	vmov.f32	s3, s15
 8001baa:	eeb0 0a48 	vmov.f32	s0, s16
 8001bae:	eef0 0a68 	vmov.f32	s1, s17
 8001bb2:	f00b fb05 	bl	800d1c0 <atan2>
 8001bb6:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001bba:	a36d      	add	r3, pc, #436	; (adr r3, 8001d70 <get_measuremets_parameters+0x2c0>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bd2:	f7fe fb73 	bl	80002bc <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001be6:	a360      	add	r3, pc, #384	; (adr r3, 8001d68 <get_measuremets_parameters+0x2b8>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fd1c 	bl	8000628 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <get_measuremets_parameters+0x2dc>)
 8001bfe:	f7fe fe3d 	bl	800087c <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ec43 2b17 	vmov	d7, r2, r3
 8001c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0e:	eef0 0a67 	vmov.f32	s1, s15
 8001c12:	f00b fa7d 	bl	800d110 <sin>
 8001c16:	eeb0 8a40 	vmov.f32	s16, s0
 8001c1a:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c24:	a350      	add	r3, pc, #320	; (adr r3, 8001d68 <get_measuremets_parameters+0x2b8>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fcfd 	bl	8000628 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <get_measuremets_parameters+0x2dc>)
 8001c3c:	f7fe fe1e 	bl	800087c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	ec43 2b17 	vmov	d7, r2, r3
 8001c48:	eeb0 0a47 	vmov.f32	s0, s14
 8001c4c:	eef0 0a67 	vmov.f32	s1, s15
 8001c50:	f00b f9c2 	bl	800cfd8 <cos>
 8001c54:	eeb0 7a40 	vmov.f32	s14, s0
 8001c58:	eef0 7a60 	vmov.f32	s15, s1
 8001c5c:	eeb0 1a47 	vmov.f32	s2, s14
 8001c60:	eef0 1a67 	vmov.f32	s3, s15
 8001c64:	eeb0 0a48 	vmov.f32	s0, s16
 8001c68:	eef0 0a68 	vmov.f32	s1, s17
 8001c6c:	f00b faa8 	bl	800d1c0 <atan2>
 8001c70:	eeb0 7a40 	vmov.f32	s14, s0
 8001c74:	eef0 7a60 	vmov.f32	s15, s1
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	ed93 7b02 	vldr	d7, [r3, #8]
 8001c84:	eeb0 0a47 	vmov.f32	s0, s14
 8001c88:	eef0 0a67 	vmov.f32	s1, s15
 8001c8c:	f00b fa40 	bl	800d110 <sin>
 8001c90:	eeb0 8a40 	vmov.f32	s16, s0
 8001c94:	eef0 8a60 	vmov.f32	s17, s1
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	ed93 7b02 	vldr	d7, [r3, #8]
 8001c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca2:	eef0 0a67 	vmov.f32	s1, s15
 8001ca6:	f00b f997 	bl	800cfd8 <cos>
 8001caa:	eeb0 7a40 	vmov.f32	s14, s0
 8001cae:	eef0 7a60 	vmov.f32	s15, s1
 8001cb2:	eeb0 1a47 	vmov.f32	s2, s14
 8001cb6:	eef0 1a67 	vmov.f32	s3, s15
 8001cba:	eeb0 0a48 	vmov.f32	s0, s16
 8001cbe:	eef0 0a68 	vmov.f32	s1, s17
 8001cc2:	f00b fa7d 	bl	800d1c0 <atan2>
 8001cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8001cca:	eef0 7a60 	vmov.f32	s15, s1
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 8001cd4:	797b      	ldrb	r3, [r7, #5]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d15e      	bne.n	8001d98 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <get_measuremets_parameters+0x2e0>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	791b      	ldrb	r3, [r3, #4]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0a:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <get_measuremets_parameters+0x2e4>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3304      	adds	r3, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1a:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <get_measuremets_parameters+0x2cc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d3a:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <get_measuremets_parameters+0x2cc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3304      	adds	r3, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d62:	e065      	b.n	8001e30 <get_measuremets_parameters+0x380>
 8001d64:	f3af 8000 	nop.w
 8001d68:	54442d18 	.word	0x54442d18
 8001d6c:	400921fb 	.word	0x400921fb
 8001d70:	1a63c1f8 	.word	0x1a63c1f8
 8001d74:	404ca5dc 	.word	0x404ca5dc
 8001d78:	20000502 	.word	0x20000502
 8001d7c:	20000508 	.word	0x20000508
 8001d80:	200005e8 	.word	0x200005e8
 8001d84:	20000504 	.word	0x20000504
 8001d88:	200005ec 	.word	0x200005ec
 8001d8c:	40668000 	.word	0x40668000
 8001d90:	20000014 	.word	0x20000014
 8001d94:	20000018 	.word	0x20000018

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	791b      	ldrb	r3, [r3, #4]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <get_measuremets_parameters+0x3a8>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	eef1 7a67 	vneg.f32	s15, s15
 8001db8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	791b      	ldrb	r3, [r3, #4]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <get_measuremets_parameters+0x3ac>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	eef1 7a67 	vneg.f32	s15, s15
 8001de0:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dec:	eef1 6a67 	vneg.f32	s13, s15
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <get_measuremets_parameters+0x3b0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e04:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e12:	eef1 6a67 	vneg.f32	s13, s15
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <get_measuremets_parameters+0x3b0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2c:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <get_measuremets_parameters+0x3b4>)
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <get_measuremets_parameters+0x3b8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <get_measuremets_parameters+0x3bc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
//		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 8001e56:	e1d8      	b.n	800220a <get_measuremets_parameters+0x75a>
 8001e58:	20000014 	.word	0x20000014
 8001e5c:	20000018 	.word	0x20000018
 8001e60:	20000508 	.word	0x20000508
 8001e64:	200005e8 	.word	0x200005e8
 8001e68:	20000502 	.word	0x20000502
 8001e6c:	20000504 	.word	0x20000504
	else if(operation_mode_dir.Mode == Roll)
 8001e70:	793b      	ldrb	r3, [r7, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	f040 81c8 	bne.w	8002208 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8001e78:	4bad      	ldr	r3, [pc, #692]	; (8002130 <get_measuremets_parameters+0x680>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4bad      	ldr	r3, [pc, #692]	; (8002134 <get_measuremets_parameters+0x684>)
 8001e80:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8001e82:	4bad      	ldr	r3, [pc, #692]	; (8002138 <get_measuremets_parameters+0x688>)
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	4bac      	ldr	r3, [pc, #688]	; (800213c <get_measuremets_parameters+0x68c>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e98:	4ba9      	ldr	r3, [pc, #676]	; (8002140 <get_measuremets_parameters+0x690>)
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001e9e:	4ba8      	ldr	r3, [pc, #672]	; (8002140 <get_measuremets_parameters+0x690>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb68 	bl	8000578 <__aeabi_f2d>
 8001ea8:	a39d      	add	r3, pc, #628	; (adr r3, 8002120 <get_measuremets_parameters+0x670>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f7fe fbbb 	bl	8000628 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <get_measuremets_parameters+0x694>)
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001ece:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <get_measuremets_parameters+0x688>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb50 	bl	8000578 <__aeabi_f2d>
 8001ed8:	a391      	add	r3, pc, #580	; (adr r3, 8002120 <get_measuremets_parameters+0x670>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fba3 	bl	8000628 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b95      	ldr	r3, [pc, #596]	; (8002144 <get_measuremets_parameters+0x694>)
 8001ef0:	f7fe fcc4 	bl	800087c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	ec43 2b17 	vmov	d7, r2, r3
 8001efc:	eeb0 0a47 	vmov.f32	s0, s14
 8001f00:	eef0 0a67 	vmov.f32	s1, s15
 8001f04:	f00b f904 	bl	800d110 <sin>
 8001f08:	eeb0 8a40 	vmov.f32	s16, s0
 8001f0c:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001f10:	4b89      	ldr	r3, [pc, #548]	; (8002138 <get_measuremets_parameters+0x688>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb2f 	bl	8000578 <__aeabi_f2d>
 8001f1a:	a381      	add	r3, pc, #516	; (adr r3, 8002120 <get_measuremets_parameters+0x670>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe fb82 	bl	8000628 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b84      	ldr	r3, [pc, #528]	; (8002144 <get_measuremets_parameters+0x694>)
 8001f32:	f7fe fca3 	bl	800087c <__aeabi_ddiv>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	ec43 2b17 	vmov	d7, r2, r3
 8001f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f42:	eef0 0a67 	vmov.f32	s1, s15
 8001f46:	f00b f847 	bl	800cfd8 <cos>
 8001f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4e:	eef0 7a60 	vmov.f32	s15, s1
 8001f52:	eeb0 1a47 	vmov.f32	s2, s14
 8001f56:	eef0 1a67 	vmov.f32	s3, s15
 8001f5a:	eeb0 0a48 	vmov.f32	s0, s16
 8001f5e:	eef0 0a68 	vmov.f32	s1, s17
 8001f62:	f00b f92d 	bl	800d1c0 <atan2>
 8001f66:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001f6a:	a36f      	add	r3, pc, #444	; (adr r3, 8002128 <get_measuremets_parameters+0x678>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fb5a 	bl	8000628 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f82:	f7fe f99b 	bl	80002bc <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f96:	a362      	add	r3, pc, #392	; (adr r3, 8002120 <get_measuremets_parameters+0x670>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe fb44 	bl	8000628 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b65      	ldr	r3, [pc, #404]	; (8002144 <get_measuremets_parameters+0x694>)
 8001fae:	f7fe fc65 	bl	800087c <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ec43 2b17 	vmov	d7, r2, r3
 8001fba:	eeb0 0a47 	vmov.f32	s0, s14
 8001fbe:	eef0 0a67 	vmov.f32	s1, s15
 8001fc2:	f00b f8a5 	bl	800d110 <sin>
 8001fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8001fca:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001fd4:	a352      	add	r3, pc, #328	; (adr r3, 8002120 <get_measuremets_parameters+0x670>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fb25 	bl	8000628 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b56      	ldr	r3, [pc, #344]	; (8002144 <get_measuremets_parameters+0x694>)
 8001fec:	f7fe fc46 	bl	800087c <__aeabi_ddiv>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	ec43 2b17 	vmov	d7, r2, r3
 8001ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffc:	eef0 0a67 	vmov.f32	s1, s15
 8002000:	f00a ffea 	bl	800cfd8 <cos>
 8002004:	eeb0 7a40 	vmov.f32	s14, s0
 8002008:	eef0 7a60 	vmov.f32	s15, s1
 800200c:	eeb0 1a47 	vmov.f32	s2, s14
 8002010:	eef0 1a67 	vmov.f32	s3, s15
 8002014:	eeb0 0a48 	vmov.f32	s0, s16
 8002018:	eef0 0a68 	vmov.f32	s1, s17
 800201c:	f00b f8d0 	bl	800d1c0 <atan2>
 8002020:	eeb0 7a40 	vmov.f32	s14, s0
 8002024:	eef0 7a60 	vmov.f32	s15, s1
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	ed93 7b02 	vldr	d7, [r3, #8]
 8002034:	eeb0 0a47 	vmov.f32	s0, s14
 8002038:	eef0 0a67 	vmov.f32	s1, s15
 800203c:	f00b f868 	bl	800d110 <sin>
 8002040:	eeb0 8a40 	vmov.f32	s16, s0
 8002044:	eef0 8a60 	vmov.f32	s17, s1
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	ed93 7b02 	vldr	d7, [r3, #8]
 800204e:	eeb0 0a47 	vmov.f32	s0, s14
 8002052:	eef0 0a67 	vmov.f32	s1, s15
 8002056:	f00a ffbf 	bl	800cfd8 <cos>
 800205a:	eeb0 7a40 	vmov.f32	s14, s0
 800205e:	eef0 7a60 	vmov.f32	s15, s1
 8002062:	eeb0 1a47 	vmov.f32	s2, s14
 8002066:	eef0 1a67 	vmov.f32	s3, s15
 800206a:	eeb0 0a48 	vmov.f32	s0, s16
 800206e:	eef0 0a68 	vmov.f32	s1, s17
 8002072:	f00b f8a5 	bl	800d1c0 <atan2>
 8002076:	eeb0 7a40 	vmov.f32	s14, s0
 800207a:	eef0 7a60 	vmov.f32	s15, s1
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 8002084:	797b      	ldrb	r3, [r7, #5]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d162      	bne.n	8002150 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	791b      	ldrb	r3, [r3, #4]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002098:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <get_measuremets_parameters+0x698>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3304      	adds	r3, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <get_measuremets_parameters+0x69c>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3304      	adds	r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	eef1 7a67 	vneg.f32	s15, s15
 80020ce:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <get_measuremets_parameters+0x684>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ee:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3304      	adds	r3, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80020fc:	eef1 6a67 	vneg.f32	s13, s15
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <get_measuremets_parameters+0x684>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3304      	adds	r3, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002116:	edc3 7a02 	vstr	s15, [r3, #8]
 800211a:	e061      	b.n	80021e0 <get_measuremets_parameters+0x730>
 800211c:	f3af 8000 	nop.w
 8002120:	54442d18 	.word	0x54442d18
 8002124:	400921fb 	.word	0x400921fb
 8002128:	1a63c1f8 	.word	0x1a63c1f8
 800212c:	404ca5dc 	.word	0x404ca5dc
 8002130:	20000502 	.word	0x20000502
 8002134:	20000508 	.word	0x20000508
 8002138:	200005e8 	.word	0x200005e8
 800213c:	20000504 	.word	0x20000504
 8002140:	200005ec 	.word	0x200005ec
 8002144:	40668000 	.word	0x40668000
 8002148:	20000014 	.word	0x20000014
 800214c:	20000018 	.word	0x20000018
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	791b      	ldrb	r3, [r3, #4]
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215e:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <get_measuremets_parameters+0x768>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	eef1 7a67 	vneg.f32	s15, s15
 8002170:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3304      	adds	r3, #4
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	791b      	ldrb	r3, [r3, #4]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <get_measuremets_parameters+0x76c>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3304      	adds	r3, #4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002194:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	edd3 7a03 	vldr	s15, [r3, #12]
 80021a0:	eef1 6a67 	vneg.f32	s13, s15
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <get_measuremets_parameters+0x770>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b8:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3304      	adds	r3, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <get_measuremets_parameters+0x770>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3304      	adds	r3, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021dc:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3304      	adds	r3, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <get_measuremets_parameters+0x774>)
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <get_measuremets_parameters+0x778>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <get_measuremets_parameters+0x77c>)
 8002202:	2200      	movs	r2, #0
 8002204:	801a      	strh	r2, [r3, #0]
}
 8002206:	e000      	b.n	800220a <get_measuremets_parameters+0x75a>
	else{  __NOP(); }
 8002208:	bf00      	nop
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	ecbd 8b02 	vpop	{d8}
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000014 	.word	0x20000014
 800221c:	20000018 	.word	0x20000018
 8002220:	20000508 	.word	0x20000508
 8002224:	200005e8 	.word	0x200005e8
 8002228:	20000502 	.word	0x20000502
 800222c:	20000504 	.word	0x20000504

08002230 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 800223a:	783b      	ldrb	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d120      	bne.n	8002282 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f844 	bl	80022d0 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	4618      	mov	r0, r3
 8002250:	f006 f898 	bl	8008384 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f005 fbce 	bl	80079fe <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	4618      	mov	r0, r3
 800226c:	f006 f88a 	bl	8008384 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fbbf 	bl	80079fe <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002280:	e022      	b.n	80022c8 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 8002282:	783b      	ldrb	r3, [r7, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d11f      	bne.n	80022c8 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f820 	bl	80022d0 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	4618      	mov	r0, r3
 8002298:	f006 f874 	bl	8008384 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2101      	movs	r1, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f005 fbaa 	bl	80079fe <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	4618      	mov	r0, r3
 80022b4:	f006 f866 	bl	8008384 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2101      	movs	r1, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 fb9b 	bl	80079fe <GPIO_WritePin_Afopt>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 80022da:	783b      	ldrb	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d143      	bne.n	8002368 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	7f1a      	ldrb	r2, [r3, #28]
 80022e6:	787b      	ldrb	r3, [r7, #1]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d018      	beq.n	800231e <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	787a      	ldrb	r2, [r7, #1]
 80022f2:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f005 fb76 	bl	80079fe <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	4618      	mov	r0, r3
 800231a:	f006 fbcb 	bl	8008ab4 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	7f1a      	ldrb	r2, [r3, #28]
 8002326:	787b      	ldrb	r3, [r7, #1]
 8002328:	429a      	cmp	r2, r3
 800232a:	d068      	beq.n	80023fe <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	787a      	ldrb	r2, [r7, #1]
 8002334:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6a1a      	ldr	r2, [r3, #32]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	7f1b      	ldrb	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f005 fb53 	bl	80079fe <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	4618      	mov	r0, r3
 8002362:	f006 fba7 	bl	8008ab4 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 8002366:	e04a      	b.n	80023fe <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 8002368:	783b      	ldrb	r3, [r7, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d147      	bne.n	80023fe <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	7f1a      	ldrb	r2, [r3, #28]
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	429a      	cmp	r2, r3
 8002378:	d11d      	bne.n	80023b6 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 800237a:	787b      	ldrb	r3, [r7, #1]
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2da      	uxtb	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	7f1b      	ldrb	r3, [r3, #28]
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f005 fb2a 	bl	80079fe <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 fb7f 	bl	8008ab4 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	7f1a      	ldrb	r2, [r3, #28]
 80023be:	787b      	ldrb	r3, [r7, #1]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d01c      	beq.n	80023fe <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	787a      	ldrb	r2, [r7, #1]
 80023cc:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	7f1b      	ldrb	r3, [r3, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f005 fb07 	bl	80079fe <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	4618      	mov	r0, r3
 80023fa:	f006 fb5b 	bl	8008ab4 <PWMx_Toggle>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	4618      	mov	r0, r3
 8002416:	f006 fb0d 	bl	8008a34 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f005 faeb 	bl	80079fe <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	4618      	mov	r0, r3
 8002432:	f006 faff 	bl	8008a34 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f005 fadc 	bl	80079fe <GPIO_WritePin_Afopt>


}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <int_Config_Motor>:


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler){
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a82      	ldr	r2, [pc, #520]	; (800266c <int_Config_Motor+0x21c>)
 8002462:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a81      	ldr	r2, [pc, #516]	; (8002670 <int_Config_Motor+0x220>)
 800246a:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a80      	ldr	r2, [pc, #512]	; (8002674 <int_Config_Motor+0x224>)
 8002472:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a7f      	ldr	r2, [pc, #508]	; (8002678 <int_Config_Motor+0x228>)
 800247a:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7e      	ldr	r2, [pc, #504]	; (800267c <int_Config_Motor+0x22c>)
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a71      	ldr	r2, [pc, #452]	; (8002680 <int_Config_Motor+0x230>)
 80024bc:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <int_Config_Motor+0x234>)
 80024d2:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4a6b      	ldr	r2, [pc, #428]	; (8002688 <int_Config_Motor+0x238>)
 80024da:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3304      	adds	r3, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a63      	ldr	r2, [pc, #396]	; (8002670 <int_Config_Motor+0x220>)
 80024e4:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a67      	ldr	r2, [pc, #412]	; (800268c <int_Config_Motor+0x23c>)
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3304      	adds	r3, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a66      	ldr	r2, [pc, #408]	; (8002690 <int_Config_Motor+0x240>)
 80024f8:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3304      	adds	r3, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a64      	ldr	r2, [pc, #400]	; (8002694 <int_Config_Motor+0x244>)
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3304      	adds	r3, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3304      	adds	r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3304      	adds	r3, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3304      	adds	r3, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3304      	adds	r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <int_Config_Motor+0x230>)
 8002546:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3304      	adds	r3, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3304      	adds	r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a49      	ldr	r2, [pc, #292]	; (8002684 <int_Config_Motor+0x234>)
 8002560:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002588:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	4a42      	ldr	r2, [pc, #264]	; (8002698 <int_Config_Motor+0x248>)
 800258e:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4a42      	ldr	r2, [pc, #264]	; (800269c <int_Config_Motor+0x24c>)
 8002594:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200003f8 	.word	0x200003f8
 8002670:	41e00000 	.word	0x41e00000
 8002674:	20000284 	.word	0x20000284
 8002678:	2000029c 	.word	0x2000029c
 800267c:	20000310 	.word	0x20000310
 8002680:	437a0000 	.word	0x437a0000
 8002684:	42c80000 	.word	0x42c80000
 8002688:	20000424 	.word	0x20000424
 800268c:	20000278 	.word	0x20000278
 8002690:	20000290 	.word	0x20000290
 8002694:	20000328 	.word	0x20000328
 8002698:	3dcccccd 	.word	0x3dcccccd
 800269c:	3f4ccccd 	.word	0x3f4ccccd

080026a0 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 80026ae:	4b6f      	ldr	r3, [pc, #444]	; (800286c <PID_control+0x1cc>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a6f      	ldr	r2, [pc, #444]	; (8002870 <PID_control+0x1d0>)
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c2:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002874 <PID_control+0x1d4>
 80026c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ca:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80026da:	eeb0 1a46 	vmov.f32	s2, s12
 80026de:	eef0 1a66 	vmov.f32	s3, s13
 80026e2:	eeb0 0a47 	vmov.f32	s0, s14
 80026e6:	eef0 0a67 	vmov.f32	s1, s15
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f005 fd0a 	bl	8008104 <distance_to_straight_line>
 80026f0:	ec51 0b10 	vmov	r0, r1, d0
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <PID_control+0x1d8>)
 80026fa:	f7fe f8bf 	bl	800087c <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fa87 	bl	8000c18 <__aeabi_d2f>
 800270a:	4603      	mov	r3, r0
 800270c:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 800270e:	ed97 1a04 	vldr	s2, [r7, #16]
 8002712:	eddf 0a5a 	vldr	s1, [pc, #360]	; 800287c <PID_control+0x1dc>
 8002716:	ed97 0a05 	vldr	s0, [r7, #20]
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	f000 f8bc 	bl	8002898 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <PID_control+0x1e0>)
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002730:	4b54      	ldr	r3, [pc, #336]	; (8002884 <PID_control+0x1e4>)
 8002732:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	ed93 7a00 	vldr	s14, [r3]
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <PID_control+0x1e0>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	4b50      	ldr	r3, [pc, #320]	; (8002888 <PID_control+0x1e8>)
 8002748:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <PID_control+0x1e4>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002760:	eeb0 1a47 	vmov.f32	s2, s14
 8002764:	eef0 0a67 	vmov.f32	s1, s15
 8002768:	ed97 0a05 	vldr	s0, [r7, #20]
 800276c:	4610      	mov	r0, r2
 800276e:	f000 f893 	bl	8002898 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3304      	adds	r3, #4
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <PID_control+0x1e8>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3304      	adds	r3, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	ed93 7a02 	vldr	s14, [r3, #8]
 800278a:	eeb0 1a47 	vmov.f32	s2, s14
 800278e:	eef0 0a67 	vmov.f32	s1, s15
 8002792:	ed97 0a05 	vldr	s0, [r7, #20]
 8002796:	4610      	mov	r0, r2
 8002798:	f000 f87e 	bl	8002898 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3304      	adds	r3, #4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3304      	adds	r3, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027da:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80027e6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800288c <PID_control+0x1ec>
 80027ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	db04      	blt.n	80027fe <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <PID_control+0x1f0>)
 80027fa:	615a      	str	r2, [r3, #20]
 80027fc:	e00e      	b.n	800281c <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	edd3 7a05 	vldr	s15, [r3, #20]
 8002806:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	d803      	bhi.n	800281c <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <PID_control+0x1f4>)
 800281a:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3304      	adds	r3, #4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	edd3 7a05 	vldr	s15, [r3, #20]
 8002826:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800288c <PID_control+0x1ec>
 800282a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	db05      	blt.n	8002840 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3304      	adds	r3, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a15      	ldr	r2, [pc, #84]	; (8002890 <PID_control+0x1f0>)
 800283c:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 800283e:	e011      	b.n	8002864 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3304      	adds	r3, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	edd3 7a05 	vldr	s15, [r3, #20]
 800284a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800284e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	d900      	bls.n	800285a <PID_control+0x1ba>
}
 8002858:	e004      	b.n	8002864 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3304      	adds	r3, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <PID_control+0x1f4>)
 8002862:	615a      	str	r2, [r3, #20]
}
 8002864:	bf00      	nop
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	200002e8 	.word	0x200002e8
 8002870:	20000010 	.word	0x20000010
 8002874:	447a0000 	.word	0x447a0000
 8002878:	408f4000 	.word	0x408f4000
 800287c:	00000000 	.word	0x00000000
 8002880:	200005f0 	.word	0x200005f0
 8002884:	200005f4 	.word	0x200005f4
 8002888:	200005f8 	.word	0x200005f8
 800288c:	42700000 	.word	0x42700000
 8002890:	42700000 	.word	0x42700000
 8002894:	41b80000 	.word	0x41b80000

08002898 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80028a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80028a8:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 80028ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80028b0:	edd7 7a00 	vldr	s15, [r7]
 80028b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ce:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	edd3 6a01 	vldr	s13, [r3, #4]
 80028de:	edd7 7a02 	vldr	s15, [r7, #8]
 80028e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	ed93 7a06 	vldr	s14, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	edd3 7a03 	vldr	s15, [r3, #12]
 8002916:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800291a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800291e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002926:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 800292a:	ed97 7a07 	vldr	s14, [r7, #28]
 800292e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002936:	edd7 7a05 	vldr	s15, [r7, #20]
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	60da      	str	r2, [r3, #12]
}
 800294c:	bf00      	nop
 800294e:	3724      	adds	r7, #36	; 0x24
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af02      	add	r7, sp, #8
 800295e:	6178      	str	r0, [r7, #20]
 8002960:	6139      	str	r1, [r7, #16]
 8002962:	60fa      	str	r2, [r7, #12]
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	ed97 1b00 	vldr	d1, [r7]
 8002978:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8002aa0 <go+0x148>
 800297c:	6938      	ldr	r0, [r7, #16]
 800297e:	f7ff f839 	bl	80019f4 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8002990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	6978      	ldr	r0, [r7, #20]
 8002996:	f7ff f88b 	bl	8001ab0 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d073      	beq.n	8002a96 <go+0x13e>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3304      	adds	r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80029c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80029c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029cc:	ee16 0a90 	vmov	r0, s13
 80029d0:	f7fd fdd2 	bl	8000578 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	ed93 7b04 	vldr	d7, [r3, #16]
 80029e2:	eeb0 0a47 	vmov.f32	s0, s14
 80029e6:	eef0 0a67 	vmov.f32	s1, s15
 80029ea:	f00a faf5 	bl	800cfd8 <cos>
 80029ee:	ec51 0b10 	vmov	r0, r1, d0
 80029f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f6:	f7fd fe17 	bl	8000628 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	68f9      	ldr	r1, [r7, #12]
 8002a00:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0e:	eef0 0a67 	vmov.f32	s1, s15
 8002a12:	f00a fb7d 	bl	800d110 <sin>
 8002a16:	ec51 0b10 	vmov	r0, r1, d0
 8002a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1e:	f7fd fe03 	bl	8000628 <__aeabi_dmul>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a38:	f7fd fc40 	bl	80002bc <__adddf3>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a52:	f7fd fc33 	bl	80002bc <__adddf3>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002a6c:	e9cd 2300 	strd	r2, r3, [sp]
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	490b      	ldr	r1, [pc, #44]	; (8002aa4 <go+0x14c>)
 8002a76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a78:	f008 f93a 	bl	800acf0 <siprintf>

		writeMsg(&handlerUSART, buff);
 8002a7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a7e:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <go+0x150>)
 8002a80:	f006 ffb4 	bl	80099ec <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff fe08 	bl	80026a0 <PID_control>

		*fcontrol = RESET;
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
	}
}
 8002a96:	bf00      	nop
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	00000000 	.word	0x00000000
 8002aa4:	0800f5c0 	.word	0x0800f5c0
 8002aa8:	20000340 	.word	0x20000340

08002aac <extract_info>:
void extract_info (uint8_t counter ,
		   	   	   command_t *cmd ,
				   char data[64],
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10] ){
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]

	uint8_t count_f = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]
	uint8_t count_s = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75bb      	strb	r3, [r7, #22]
	uint8_t count_t = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	757b      	strb	r3, [r7, #21]

	uint8_t len_f = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	753b      	strb	r3, [r7, #20]
	uint8_t len_s = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	74fb      	strb	r3, [r7, #19]
	uint8_t len_t = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	74bb      	strb	r3, [r7, #18]

	while (1){

		while (cmd->payload[counter] != ' '){
 8002ad4:	e009      	b.n	8002aea <extract_info+0x3e>

			data[counter] = cmd->payload[counter];
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	440b      	add	r3, r1
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	5c8a      	ldrb	r2, [r1, r2]
 8002ae2:	701a      	strb	r2, [r3, #0]

			counter++;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
		while (cmd->payload[counter] != ' '){
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d1f0      	bne.n	8002ad6 <extract_info+0x2a>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]

		if (cmd->payload[counter] == '#'){
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	2b23      	cmp	r3, #35	; 0x23
 8002b0c:	d07b      	beq.n	8002c06 <extract_info+0x15a>
			break;
		}

		count_f = counter;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	75fb      	strb	r3, [r7, #23]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8002b12:	e00c      	b.n	8002b2e <extract_info+0x82>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	7bf9      	ldrb	r1, [r7, #15]
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	1acb      	subs	r3, r1, r3
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	440b      	add	r3, r1
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	5c8a      	ldrb	r2, [r1, r2]
 8002b26:	701a      	strb	r2, [r3, #0]

			counter++;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
		while (cmd->payload[counter] != ' '){
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	5cd3      	ldrb	r3, [r2, r3]
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d1ed      	bne.n	8002b14 <extract_info+0x68>
		}

		len_f = counter - count_f; // Longitud del first parameter
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	753b      	strb	r3, [r7, #20]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	3301      	adds	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]

		if (cmd->payload[counter] == '#'){
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	2b23      	cmp	r3, #35	; 0x23
 8002b5e:	d054      	beq.n	8002c0a <extract_info+0x15e>
			break;
		}

		count_s = counter;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	75bb      	strb	r3, [r7, #22]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 8002b64:	e00c      	b.n	8002b80 <extract_info+0xd4>

			secondParameter[counter - count_s] = cmd->payload[counter];
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	7bf9      	ldrb	r1, [r7, #15]
 8002b6a:	7dbb      	ldrb	r3, [r7, #22]
 8002b6c:	1acb      	subs	r3, r1, r3
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	440b      	add	r3, r1
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	5c8a      	ldrb	r2, [r1, r2]
 8002b78:	701a      	strb	r2, [r3, #0]

			counter++;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
		while (cmd->payload[counter] != ' '){
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d1ed      	bne.n	8002b66 <extract_info+0xba>
		}

		len_s = counter - count_s; // Longitud del second parameter
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	7dbb      	ldrb	r3, [r7, #22]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	74fb      	strb	r3, [r7, #19]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	7dbb      	ldrb	r3, [r7, #22]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]

		if (cmd->payload[counter] == '#'){
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
 8002bae:	2b23      	cmp	r3, #35	; 0x23
 8002bb0:	d02d      	beq.n	8002c0e <extract_info+0x162>
			break;
		}

		count_t = counter;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	757b      	strb	r3, [r7, #21]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 8002bb6:	e00c      	b.n	8002bd2 <extract_info+0x126>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	7bf9      	ldrb	r1, [r7, #15]
 8002bbc:	7d7b      	ldrb	r3, [r7, #21]
 8002bbe:	1acb      	subs	r3, r1, r3
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	440b      	add	r3, r1
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	5c8a      	ldrb	r2, [r1, r2]
 8002bca:	701a      	strb	r2, [r3, #0]

			counter++;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
		while (cmd->payload[counter] != ' '){
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d1ed      	bne.n	8002bb8 <extract_info+0x10c>
		}

		len_t = counter - count_t; // Longitud del second parameter
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	7d7b      	ldrb	r3, [r7, #21]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	74bb      	strb	r3, [r7, #18]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	7d7b      	ldrb	r3, [r7, #21]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	4413      	add	r3, r2
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]

		if (cmd->payload[counter] == '#'){
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	2b23      	cmp	r3, #35	; 0x23
 8002c02:	d006      	beq.n	8002c12 <extract_info+0x166>
		while (cmd->payload[counter] != ' '){
 8002c04:	e771      	b.n	8002aea <extract_info+0x3e>
			break;
 8002c06:	bf00      	nop
 8002c08:	e004      	b.n	8002c14 <extract_info+0x168>
			break;
 8002c0a:	bf00      	nop
 8002c0c:	e002      	b.n	8002c14 <extract_info+0x168>
			break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <extract_info+0x168>
			break;
 8002c12:	bf00      	nop
	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////




}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <led_state_callback>:




void led_state_callback (TimerHandle_t xTimer){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <led_state_callback+0x18>)
 8002c2a:	f004 ff34 	bl	8007a96 <GPIOxTooglePin>

}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000023c 	.word	0x2000023c

08002c3c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <ITM_SendChar+0x48>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <ITM_SendChar+0x48>)
 8002c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c50:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <ITM_SendChar+0x4c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <ITM_SendChar+0x4c>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002c5e:	bf00      	nop
 8002c60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f8      	beq.n	8002c60 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002c6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	6013      	str	r3, [r2, #0]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000edfc 	.word	0xe000edfc
 8002c88:	e0000e00 	.word	0xe0000e00

08002c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
	return 1;
 8002c90:	2301      	movs	r3, #1
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <_kill>:

int _kill(int pid, int sig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ca6:	f007 fa81 	bl	800a1ac <__errno>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2216      	movs	r2, #22
 8002cae:	601a      	str	r2, [r3, #0]
	return -1;
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_exit>:

void _exit (int status)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ffe7 	bl	8002c9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cce:	e7fe      	b.n	8002cce <_exit+0x12>

08002cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e00a      	b.n	8002cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ce2:	f3af 8000 	nop.w
 8002ce6:	4601      	mov	r1, r0
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	60ba      	str	r2, [r7, #8]
 8002cee:	b2ca      	uxtb	r2, r1
 8002cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dbf0      	blt.n	8002ce2 <_read+0x12>
	}

return len;
 8002d00:	687b      	ldr	r3, [r7, #4]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e009      	b.n	8002d30 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	60ba      	str	r2, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff89 	bl	8002c3c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	dbf1      	blt.n	8002d1c <_write+0x12>
	}
	return len;
 8002d38:	687b      	ldr	r3, [r7, #4]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_close>:

int _close(int file)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
	return -1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <_isatty>:

int _isatty(int file)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	return 1;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dac:	480d      	ldr	r0, [pc, #52]	; (8002de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002db0:	f006 ff18 	bl	8009be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <LoopForever+0xe>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <LoopForever+0x16>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dda:	f007 f9ed 	bl	800a1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dde:	f7fd ff6b 	bl	8000cb8 <main>

08002de2 <LoopForever>:

LoopForever:
    b LoopForever
 8002de2:	e7fe      	b.n	8002de2 <LoopForever>
  ldr   r0, =_estack
 8002de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002df0:	0800fc58 	.word	0x0800fc58
  ldr r2, =_sbss
 8002df4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002df8:	200133d0 	.word	0x200133d0

08002dfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC_IRQHandler>

08002dfe <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f103 0208 	add.w	r2, r3, #8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f04f 32ff 	mov.w	r2, #4294967295
 8002e16:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f103 0208 	add.w	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 0208 	add.w	r2, r3, #8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d103      	bne.n	8002ec0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e00c      	b.n	8002eda <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e002      	b.n	8002ece <vListInsert+0x2e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d2f6      	bcs.n	8002ec8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6892      	ldr	r2, [r2, #8]
 8002f28:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6852      	ldr	r2, [r2, #4]
 8002f32:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d103      	bne.n	8002f46 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericReset+0x2a>
        __asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	60bb      	str	r3, [r7, #8]
    }
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002f92:	f002 fae1 	bl	8005558 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	441a      	add	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	22ff      	movs	r2, #255	; 0xff
 8002fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d114      	bne.n	8003012 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01a      	beq.n	8003026 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f913 	bl	8004220 <xTaskRemoveFromEventList>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <xQueueGenericReset+0xcc>)
 8003002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	e009      	b.n	8003026 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3310      	adds	r3, #16
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fef1 	bl	8002dfe <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff feec 	bl	8002dfe <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003026:	f002 fac7 	bl	80055b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003038:	b580      	push	{r7, lr}
 800303a:	b08c      	sub	sp, #48	; 0x30
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	4613      	mov	r3, r2
 8003044:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xQueueGenericCreate+0x2a>
        __asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	61bb      	str	r3, [r7, #24]
    }
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <xQueueGenericCreate+0x48>
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d101      	bne.n	8003084 <xQueueGenericCreate+0x4c>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <xQueueGenericCreate+0x4e>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <xQueueGenericCreate+0x68>
        __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	617b      	str	r3, [r7, #20]
    }
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80030a6:	d90a      	bls.n	80030be <xQueueGenericCreate+0x86>
        __asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	613b      	str	r3, [r7, #16]
    }
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	3350      	adds	r3, #80	; 0x50
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 fb6a 	bl	800579c <pvPortMalloc>
 80030c8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3350      	adds	r3, #80	; 0x50
 80030d8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030da:	79fa      	ldrb	r2, [r7, #7]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f805 	bl	80030f6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80030ec:	6a3b      	ldr	r3, [r7, #32]
    }
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e002      	b.n	8003118 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003124:	2101      	movs	r1, #1
 8003126:	69b8      	ldr	r0, [r7, #24]
 8003128:	f7ff ff1e 	bl	8002f68 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800314a:	2300      	movs	r3, #0
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <xQueueGenericSend+0x32>
        __asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800316a:	bf00      	nop
 800316c:	e7fe      	b.n	800316c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <xQueueGenericSend+0x40>
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <xQueueGenericSend+0x44>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <xQueueGenericSend+0x46>
 8003180:	2300      	movs	r3, #0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <xQueueGenericSend+0x60>
        __asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003198:	bf00      	nop
 800319a:	e7fe      	b.n	800319a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d103      	bne.n	80031aa <xQueueGenericSend+0x6e>
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <xQueueGenericSend+0x72>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <xQueueGenericSend+0x74>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <xQueueGenericSend+0x8e>
        __asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	623b      	str	r3, [r7, #32]
    }
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ca:	f001 f9c5 	bl	8004558 <xTaskGetSchedulerState>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <xQueueGenericSend+0x9e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <xQueueGenericSend+0xa2>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <xQueueGenericSend+0xa4>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <xQueueGenericSend+0xbe>
        __asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	61fb      	str	r3, [r7, #28]
    }
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031fa:	f002 f9ad 	bl	8005558 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <xQueueGenericSend+0xd4>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d129      	bne.n	8003264 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003216:	f000 fac6 	bl	80037a6 <prvCopyDataToQueue>
 800321a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	3324      	adds	r3, #36	; 0x24
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fff9 	bl	8004220 <xTaskRemoveFromEventList>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003234:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <xQueueGenericSend+0x1f8>)
 8003236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	e00a      	b.n	800325c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800324c:	4b39      	ldr	r3, [pc, #228]	; (8003334 <xQueueGenericSend+0x1f8>)
 800324e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800325c:	f002 f9ac 	bl	80055b8 <vPortExitCritical>
                return pdPASS;
 8003260:	2301      	movs	r3, #1
 8003262:	e063      	b.n	800332c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800326a:	f002 f9a5 	bl	80055b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800326e:	2300      	movs	r3, #0
 8003270:	e05c      	b.n	800332c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f831 	bl	80042e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003282:	2301      	movs	r3, #1
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003286:	f002 f997 	bl	80055b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800328a:	f000 fdb9 	bl	8003e00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800328e:	f002 f963 	bl	8005558 <vPortEnterCritical>
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003298:	b25b      	sxtb	r3, r3
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	d103      	bne.n	80032a8 <xQueueGenericSend+0x16c>
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d103      	bne.n	80032be <xQueueGenericSend+0x182>
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032be:	f002 f97b 	bl	80055b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032c2:	1d3a      	adds	r2, r7, #4
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 f820 	bl	8004310 <xTaskCheckForTimeOut>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d124      	bne.n	8003320 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032d8:	f000 fb5d 	bl	8003996 <prvIsQueueFull>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d018      	beq.n	8003314 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	3310      	adds	r3, #16
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff48 	bl	8004180 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80032f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f2:	f000 fae8 	bl	80038c6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80032f6:	f000 fd91 	bl	8003e1c <xTaskResumeAll>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f af7c 	bne.w	80031fa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <xQueueGenericSend+0x1f8>)
 8003304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	e772      	b.n	80031fa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003316:	f000 fad6 	bl	80038c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800331a:	f000 fd7f 	bl	8003e1c <xTaskResumeAll>
 800331e:	e76c      	b.n	80031fa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003322:	f000 fad0 	bl	80038c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003326:	f000 fd79 	bl	8003e1c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800332a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800332c:	4618      	mov	r0, r3
 800332e:	3738      	adds	r7, #56	; 0x38
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b090      	sub	sp, #64	; 0x40
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <xQueueGenericSendFromISR+0x3c>
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <xQueueGenericSendFromISR+0x40>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <xQueueGenericSendFromISR+0x42>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d103      	bne.n	80033a2 <xQueueGenericSendFromISR+0x6a>
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <xQueueGenericSendFromISR+0x6e>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <xQueueGenericSendFromISR+0x70>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	623b      	str	r3, [r7, #32]
    }
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033c2:	f002 f9ab 	bl	800571c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80033c6:	f3ef 8211 	mrs	r2, BASEPRI
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	61fa      	str	r2, [r7, #28]
 80033dc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80033de:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <xQueueGenericSendFromISR+0xbc>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d13e      	bne.n	8003472 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800340a:	f000 f9cc 	bl	80037a6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800340e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d112      	bne.n	800343e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d025      	beq.n	800346c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	3324      	adds	r3, #36	; 0x24
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fefb 	bl	8004220 <xTaskRemoveFromEventList>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01d      	beq.n	800346c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01a      	beq.n	800346c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e016      	b.n	800346c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800343e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003442:	2b7f      	cmp	r3, #127	; 0x7f
 8003444:	d10a      	bne.n	800345c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	617b      	str	r3, [r7, #20]
    }
 8003458:	bf00      	nop
 800345a:	e7fe      	b.n	800345a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800345c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003460:	3301      	adds	r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b25a      	sxtb	r2, r3
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800346c:	2301      	movs	r3, #1
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003470:	e001      	b.n	8003476 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003472:	2300      	movs	r3, #0
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003478:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003480:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003484:	4618      	mov	r0, r3
 8003486:	3740      	adds	r7, #64	; 0x40
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08c      	sub	sp, #48	; 0x30
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <xQueueReceive+0x30>
        __asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	623b      	str	r3, [r7, #32]
    }
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <xQueueReceive+0x3e>
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <xQueueReceive+0x42>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <xQueueReceive+0x44>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xQueueReceive+0x5e>
        __asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	61fb      	str	r3, [r7, #28]
    }
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ea:	f001 f835 	bl	8004558 <xTaskGetSchedulerState>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <xQueueReceive+0x6e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <xQueueReceive+0x72>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <xQueueReceive+0x74>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueReceive+0x8e>
        __asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61bb      	str	r3, [r7, #24]
    }
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800351a:	f002 f81d 	bl	8005558 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01f      	beq.n	800356a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800352e:	f000 f9a4 	bl	800387a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00f      	beq.n	8003562 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	3310      	adds	r3, #16
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fe6a 	bl	8004220 <xTaskRemoveFromEventList>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <xQueueReceive+0x1bc>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003562:	f002 f829 	bl	80055b8 <vPortExitCritical>
                return pdPASS;
 8003566:	2301      	movs	r3, #1
 8003568:	e069      	b.n	800363e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003570:	f002 f822 	bl	80055b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003574:	2300      	movs	r3, #0
 8003576:	e062      	b.n	800363e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800357e:	f107 0310 	add.w	r3, r7, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f000 feae 	bl	80042e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800358c:	f002 f814 	bl	80055b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003590:	f000 fc36 	bl	8003e00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003594:	f001 ffe0 	bl	8005558 <vPortEnterCritical>
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d103      	bne.n	80035ae <xQueueReceive+0x122>
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d103      	bne.n	80035c4 <xQueueReceive+0x138>
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c4:	f001 fff8 	bl	80055b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035c8:	1d3a      	adds	r2, r7, #4
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fe9d 	bl	8004310 <xTaskCheckForTimeOut>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d123      	bne.n	8003624 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035de:	f000 f9c4 	bl	800396a <prvIsQueueEmpty>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fdc5 	bl	8004180 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80035f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f8:	f000 f965 	bl	80038c6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80035fc:	f000 fc0e 	bl	8003e1c <xTaskResumeAll>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d189      	bne.n	800351a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <xQueueReceive+0x1bc>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	e780      	b.n	800351a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361a:	f000 f954 	bl	80038c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800361e:	f000 fbfd 	bl	8003e1c <xTaskResumeAll>
 8003622:	e77a      	b.n	800351a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003626:	f000 f94e 	bl	80038c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800362a:	f000 fbf7 	bl	8003e1c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 f99b 	bl	800396a <prvIsQueueEmpty>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	f43f af6f 	beq.w	800351a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800363c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800363e:	4618      	mov	r0, r3
 8003640:	3730      	adds	r7, #48	; 0x30
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b090      	sub	sp, #64	; 0x40
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <xQueueReceiveFromISR+0x3a>
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xQueueReceiveFromISR+0x3e>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xQueueReceiveFromISR+0x40>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036a6:	f002 f839 	bl	800571c <vPortValidateInterruptPriority>
        __asm volatile
 80036aa:	f3ef 8211 	mrs	r2, BASEPRI
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	623a      	str	r2, [r7, #32]
 80036c0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80036c2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d03e      	beq.n	8003750 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036e0:	f000 f8cb 	bl	800387a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80036ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d112      	bne.n	800371c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d025      	beq.n	800374a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fd8c 	bl	8004220 <xTaskRemoveFromEventList>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01d      	beq.n	800374a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01a      	beq.n	800374a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e016      	b.n	800374a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800371c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003720:	2b7f      	cmp	r3, #127	; 0x7f
 8003722:	d10a      	bne.n	800373a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	61bb      	str	r3, [r7, #24]
    }
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800373a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800373e:	3301      	adds	r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	b25a      	sxtb	r2, r3
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800374a:	2301      	movs	r3, #1
 800374c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374e:	e001      	b.n	8003754 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8003750:	2300      	movs	r3, #0
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003756:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f383 8811 	msr	BASEPRI, r3
    }
 800375e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003762:	4618      	mov	r0, r3
 8003764:	3740      	adds	r7, #64	; 0x40
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	60bb      	str	r3, [r7, #8]
    }
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800378e:	f001 fee3 	bl	8005558 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003798:	f001 ff0e 	bl	80055b8 <vPortExitCritical>

    return uxReturn;
 800379c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10d      	bne.n	80037e0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d14d      	bne.n	8003868 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fedf 	bl	8004594 <xTaskPriorityDisinherit>
 80037d6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	e043      	b.n	8003868 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d119      	bne.n	800381a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6858      	ldr	r0, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	461a      	mov	r2, r3
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	f006 fd0d 	bl	800a210 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	d32b      	bcc.n	8003868 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	e026      	b.n	8003868 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68d8      	ldr	r0, [r3, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	461a      	mov	r2, r3
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	f006 fcf3 	bl	800a210 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	425b      	negs	r3, r3
 8003834:	441a      	add	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d207      	bcs.n	8003856 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	425b      	negs	r3, r3
 8003850:	441a      	add	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d105      	bne.n	8003868 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	3b01      	subs	r3, #1
 8003866:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003870:	697b      	ldr	r3, [r7, #20]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d018      	beq.n	80038be <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d303      	bcc.n	80038ae <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68d9      	ldr	r1, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	461a      	mov	r2, r3
 80038b8:	6838      	ldr	r0, [r7, #0]
 80038ba:	f006 fca9 	bl	800a210 <memcpy>
    }
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80038ce:	f001 fe43 	bl	8005558 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038da:	e011      	b.n	8003900 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3324      	adds	r3, #36	; 0x24
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fc99 	bl	8004220 <xTaskRemoveFromEventList>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80038f4:	f000 fd72 	bl	80043dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003904:	2b00      	cmp	r3, #0
 8003906:	dce9      	bgt.n	80038dc <prvUnlockQueue+0x16>
 8003908:	e000      	b.n	800390c <prvUnlockQueue+0x46>
                        break;
 800390a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	22ff      	movs	r2, #255	; 0xff
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003914:	f001 fe50 	bl	80055b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003918:	f001 fe1e 	bl	8005558 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003922:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003924:	e011      	b.n	800394a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3310      	adds	r3, #16
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fc74 	bl	8004220 <xTaskRemoveFromEventList>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800393e:	f000 fd4d 	bl	80043dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	3b01      	subs	r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800394a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800394e:	2b00      	cmp	r3, #0
 8003950:	dce9      	bgt.n	8003926 <prvUnlockQueue+0x60>
 8003952:	e000      	b.n	8003956 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003954:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	22ff      	movs	r2, #255	; 0xff
 800395a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800395e:	f001 fe2b 	bl	80055b8 <vPortExitCritical>
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003972:	f001 fdf1 	bl	8005558 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800397e:	2301      	movs	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e001      	b.n	8003988 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003988:	f001 fe16 	bl	80055b8 <vPortExitCritical>

    return xReturn;
 800398c:	68fb      	ldr	r3, [r7, #12]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800399e:	f001 fddb 	bl	8005558 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d102      	bne.n	80039b4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80039ae:	2301      	movs	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e001      	b.n	80039b8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80039b8:	f001 fdfe 	bl	80055b8 <vPortExitCritical>

    return xReturn;
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80039c6:	b480      	push	{r7}
 80039c8:	b087      	sub	sp, #28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	60fb      	str	r3, [r7, #12]
    }
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d102      	bne.n	8003a00 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e001      	b.n	8003a04 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a04:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003a06:	4618      	mov	r0, r3
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e014      	b.n	8003a4e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a24:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <vQueueAddToRegistry+0x50>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <vQueueAddToRegistry+0x50>)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <vQueueAddToRegistry+0x50>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003a46:	e006      	b.n	8003a56 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b07      	cmp	r3, #7
 8003a52:	d9e7      	bls.n	8003a24 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	200005fc 	.word	0x200005fc

08003a68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003a78:	f001 fd6e 	bl	8005558 <vPortEnterCritical>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d103      	bne.n	8003a92 <vQueueWaitForMessageRestricted+0x2a>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d103      	bne.n	8003aa8 <vQueueWaitForMessageRestricted+0x40>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa8:	f001 fd86 	bl	80055b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	3324      	adds	r3, #36	; 0x24
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fb83 	bl	80041c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff feff 	bl	80038c6 <prvUnlockQueue>
    }
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 fe59 	bl	800579c <pvPortMalloc>
 8003aea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00e      	beq.n	8003b10 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003af2:	2058      	movs	r0, #88	; 0x58
 8003af4:	f001 fe52 	bl	800579c <pvPortMalloc>
 8003af8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
 8003b06:	e005      	b.n	8003b14 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f001 ff27 	bl	800595c <vPortFree>
 8003b0e:	e001      	b.n	8003b14 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f80e 	bl	8003b52 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003b36:	69f8      	ldr	r0, [r7, #28]
 8003b38:	f000 f8a2 	bl	8003c80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e002      	b.n	8003b48 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003b48:	69bb      	ldr	r3, [r7, #24]
    }
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b088      	sub	sp, #32
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	21a5      	movs	r1, #165	; 0xa5
 8003b6c:	f006 fb5e 	bl	800a22c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f023 0307 	bic.w	r3, r3, #7
 8003b88:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <prvInitialiseNewTask+0x58>
        __asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	617b      	str	r3, [r7, #20]
    }
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01f      	beq.n	8003bf0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e012      	b.n	8003bdc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	7819      	ldrb	r1, [r3, #0]
 8003bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3334      	adds	r3, #52	; 0x34
 8003bc6:	460a      	mov	r2, r1
 8003bc8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b09      	cmp	r3, #9
 8003be0:	d9e9      	bls.n	8003bb6 <prvInitialiseNewTask+0x64>
 8003be2:	e000      	b.n	8003be6 <prvInitialiseNewTask+0x94>
            {
                break;
 8003be4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bee:	e003      	b.n	8003bf8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d901      	bls.n	8003c02 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bfe:	2304      	movs	r3, #4
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2200      	movs	r2, #0
 8003c12:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	3304      	adds	r3, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff f910 	bl	8002e3e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	3318      	adds	r3, #24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f90b 	bl	8002e3e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	f1c3 0205 	rsb	r2, r3, #5
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	3350      	adds	r3, #80	; 0x50
 8003c42:	2204      	movs	r2, #4
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f006 faf0 	bl	800a22c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	3354      	adds	r3, #84	; 0x54
 8003c50:	2201      	movs	r2, #1
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f006 fae9 	bl	800a22c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	69b8      	ldr	r0, [r7, #24]
 8003c60:	f001 fb48 	bl	80052f4 <pxPortInitialiseStack>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c74:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c76:	bf00      	nop
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003c88:	f001 fc66 	bl	8005558 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <prvAddNewTaskToReadyList+0xc0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <prvAddNewTaskToReadyList+0xc0>)
 8003c94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <prvAddNewTaskToReadyList+0xc4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003c9e:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <prvAddNewTaskToReadyList+0xc4>)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ca4:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <prvAddNewTaskToReadyList+0xc0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d110      	bne.n	8003cce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003cac:	f000 fbba 	bl	8004424 <prvInitialiseTaskLists>
 8003cb0:	e00d      	b.n	8003cce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003cb2:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <prvAddNewTaskToReadyList+0xc8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <prvAddNewTaskToReadyList+0xc4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d802      	bhi.n	8003cce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <prvAddNewTaskToReadyList+0xc4>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003cce:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <prvAddNewTaskToReadyList+0xcc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <prvAddNewTaskToReadyList+0xcc>)
 8003cd6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <prvAddNewTaskToReadyList+0xcc>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <prvAddNewTaskToReadyList+0xd0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <prvAddNewTaskToReadyList+0xd0>)
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <prvAddNewTaskToReadyList+0xd4>)
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f7ff f8a5 	bl	8002e58 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003d0e:	f001 fc53 	bl	80055b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <prvAddNewTaskToReadyList+0xc8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvAddNewTaskToReadyList+0xc4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d207      	bcs.n	8003d38 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <prvAddNewTaskToReadyList+0xd8>)
 8003d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000714 	.word	0x20000714
 8003d44:	2000063c 	.word	0x2000063c
 8003d48:	20000720 	.word	0x20000720
 8003d4c:	20000730 	.word	0x20000730
 8003d50:	2000071c 	.word	0x2000071c
 8003d54:	20000640 	.word	0x20000640
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <vTaskStartScheduler+0x88>)
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	2300      	movs	r3, #0
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2282      	movs	r2, #130	; 0x82
 8003d6e:	491e      	ldr	r1, [pc, #120]	; (8003de8 <vTaskStartScheduler+0x8c>)
 8003d70:	481e      	ldr	r0, [pc, #120]	; (8003dec <vTaskStartScheduler+0x90>)
 8003d72:	f7ff fead 	bl	8003ad0 <xTaskCreate>
 8003d76:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003d7e:	f000 ff4b 	bl	8004c18 <xTimerCreateTimerTask>
 8003d82:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d116      	bne.n	8003db8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
    }
 8003d9c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <vTaskStartScheduler+0x94>)
 8003da0:	f04f 32ff 	mov.w	r2, #4294967295
 8003da4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <vTaskStartScheduler+0x98>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <vTaskStartScheduler+0x9c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003db2:	f001 fb2f 	bl	8005414 <xPortStartScheduler>
 8003db6:	e00e      	b.n	8003dd6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d10a      	bne.n	8003dd6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	607b      	str	r3, [r7, #4]
    }
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <vTaskStartScheduler+0xa0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000738 	.word	0x20000738
 8003de8:	0800f5d0 	.word	0x0800f5d0
 8003dec:	080043f5 	.word	0x080043f5
 8003df0:	20000734 	.word	0x20000734
 8003df4:	20000720 	.word	0x20000720
 8003df8:	20000718 	.word	0x20000718
 8003dfc:	2000001c 	.word	0x2000001c

08003e00 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <vTaskSuspendAll+0x18>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	4a03      	ldr	r2, [pc, #12]	; (8003e18 <vTaskSuspendAll+0x18>)
 8003e0c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	2000073c 	.word	0x2000073c

08003e1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e2a:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <xTaskResumeAll+0x114>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xTaskResumeAll+0x2c>
        __asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	603b      	str	r3, [r7, #0]
    }
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003e48:	f001 fb86 	bl	8005558 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003e4c:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <xTaskResumeAll+0x114>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	4a37      	ldr	r2, [pc, #220]	; (8003f30 <xTaskResumeAll+0x114>)
 8003e54:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <xTaskResumeAll+0x114>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d161      	bne.n	8003f22 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e5e:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <xTaskResumeAll+0x118>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d05d      	beq.n	8003f22 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e66:	e02e      	b.n	8003ec6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e68:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <xTaskResumeAll+0x11c>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3318      	adds	r3, #24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff f84c 	bl	8002f12 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f847 	bl	8002f12 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	2201      	movs	r2, #1
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <xTaskResumeAll+0x120>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <xTaskResumeAll+0x120>)
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <xTaskResumeAll+0x124>)
 8003ea4:	441a      	add	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe ffd3 	bl	8002e58 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <xTaskResumeAll+0x128>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d302      	bcc.n	8003ec6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <xTaskResumeAll+0x12c>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <xTaskResumeAll+0x11c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1cc      	bne.n	8003e68 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003ed4:	f000 fb24 	bl	8004520 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <xTaskResumeAll+0x130>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003ee4:	f000 f846 	bl	8003f74 <xTaskIncrementTick>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <xTaskResumeAll+0x12c>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f1      	bne.n	8003ee4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <xTaskResumeAll+0x130>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <xTaskResumeAll+0x12c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <xTaskResumeAll+0x134>)
 8003f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003f22:	f001 fb49 	bl	80055b8 <vPortExitCritical>

    return xAlreadyYielded;
 8003f26:	68bb      	ldr	r3, [r7, #8]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	2000073c 	.word	0x2000073c
 8003f34:	20000714 	.word	0x20000714
 8003f38:	200006d4 	.word	0x200006d4
 8003f3c:	2000071c 	.word	0x2000071c
 8003f40:	20000640 	.word	0x20000640
 8003f44:	2000063c 	.word	0x2000063c
 8003f48:	20000728 	.word	0x20000728
 8003f4c:	20000724 	.word	0x20000724
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <xTaskGetTickCount+0x1c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003f60:	687b      	ldr	r3, [r7, #4]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000718 	.word	0x20000718

08003f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f7e:	4b47      	ldr	r3, [pc, #284]	; (800409c <xTaskIncrementTick+0x128>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d17f      	bne.n	8004086 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f86:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <xTaskIncrementTick+0x12c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003f8e:	4a44      	ldr	r2, [pc, #272]	; (80040a0 <xTaskIncrementTick+0x12c>)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d120      	bne.n	8003fdc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003f9a:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <xTaskIncrementTick+0x130>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <xTaskIncrementTick+0x46>
        __asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	603b      	str	r3, [r7, #0]
    }
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xTaskIncrementTick+0x44>
 8003fba:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <xTaskIncrementTick+0x130>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <xTaskIncrementTick+0x134>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a37      	ldr	r2, [pc, #220]	; (80040a4 <xTaskIncrementTick+0x130>)
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4a37      	ldr	r2, [pc, #220]	; (80040a8 <xTaskIncrementTick+0x134>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <xTaskIncrementTick+0x138>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a35      	ldr	r2, [pc, #212]	; (80040ac <xTaskIncrementTick+0x138>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	f000 faa2 	bl	8004520 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003fdc:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <xTaskIncrementTick+0x13c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d348      	bcc.n	8004078 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <xTaskIncrementTick+0x130>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff0:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <xTaskIncrementTick+0x13c>)
 8003ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff6:	601a      	str	r2, [r3, #0]
                    break;
 8003ff8:	e03e      	b.n	8004078 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffa:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <xTaskIncrementTick+0x130>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d203      	bcs.n	800401a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004012:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <xTaskIncrementTick+0x13c>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004018:	e02e      	b.n	8004078 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3304      	adds	r3, #4
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe ff77 	bl	8002f12 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	3318      	adds	r3, #24
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe ff6e 	bl	8002f12 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	2201      	movs	r2, #1
 800403c:	409a      	lsls	r2, r3
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <xTaskIncrementTick+0x140>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <xTaskIncrementTick+0x140>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <xTaskIncrementTick+0x144>)
 8004056:	441a      	add	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f7fe fefa 	bl	8002e58 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <xTaskIncrementTick+0x148>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	429a      	cmp	r2, r3
 8004070:	d3b9      	bcc.n	8003fe6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004076:	e7b6      	b.n	8003fe6 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <xTaskIncrementTick+0x14c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e004      	b.n	8004090 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <xTaskIncrementTick+0x150>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <xTaskIncrementTick+0x150>)
 800408e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004090:	697b      	ldr	r3, [r7, #20]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000073c 	.word	0x2000073c
 80040a0:	20000718 	.word	0x20000718
 80040a4:	200006cc 	.word	0x200006cc
 80040a8:	200006d0 	.word	0x200006d0
 80040ac:	2000072c 	.word	0x2000072c
 80040b0:	20000734 	.word	0x20000734
 80040b4:	2000071c 	.word	0x2000071c
 80040b8:	20000640 	.word	0x20000640
 80040bc:	2000063c 	.word	0x2000063c
 80040c0:	20000728 	.word	0x20000728
 80040c4:	20000724 	.word	0x20000724

080040c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <vTaskSwitchContext+0xa4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <vTaskSwitchContext+0xa8>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80040dc:	e03f      	b.n	800415e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <vTaskSwitchContext+0xa8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <vTaskSwitchContext+0xac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80040f2:	7afb      	ldrb	r3, [r7, #11]
 80040f4:	f1c3 031f 	rsb	r3, r3, #31
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	491f      	ldr	r1, [pc, #124]	; (8004178 <vTaskSwitchContext+0xb0>)
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <vTaskSwitchContext+0x5c>
        __asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
    }
 8004120:	bf00      	nop
 8004122:	e7fe      	b.n	8004122 <vTaskSwitchContext+0x5a>
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <vTaskSwitchContext+0xb0>)
 8004130:	4413      	add	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3308      	adds	r3, #8
 8004146:	429a      	cmp	r2, r3
 8004148:	d104      	bne.n	8004154 <vTaskSwitchContext+0x8c>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	605a      	str	r2, [r3, #4]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <vTaskSwitchContext+0xb4>)
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	2000073c 	.word	0x2000073c
 8004170:	20000728 	.word	0x20000728
 8004174:	2000071c 	.word	0x2000071c
 8004178:	20000640 	.word	0x20000640
 800417c:	2000063c 	.word	0x2000063c

08004180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
    }
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <vTaskPlaceOnEventList+0x44>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3318      	adds	r3, #24
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fe fe76 	bl	8002ea0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041b4:	2101      	movs	r1, #1
 80041b6:	6838      	ldr	r0, [r7, #0]
 80041b8:	f000 fcc8 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	2000063c 	.word	0x2000063c

080041c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	617b      	str	r3, [r7, #20]
    }
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <vTaskPlaceOnEventListRestricted+0x54>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3318      	adds	r3, #24
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7fe fe2d 	bl	8002e58 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004204:	f04f 33ff 	mov.w	r3, #4294967295
 8004208:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	68b8      	ldr	r0, [r7, #8]
 800420e:	f000 fc9d 	bl	8004b4c <prvAddCurrentTaskToDelayedList>
    }
 8004212:	bf00      	nop
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000063c 	.word	0x2000063c

08004220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60fb      	str	r3, [r7, #12]
    }
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3318      	adds	r3, #24
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fe5e 	bl	8002f12 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <xTaskRemoveFromEventList+0xac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11c      	bne.n	8004298 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3304      	adds	r3, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fe55 	bl	8002f12 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <xTaskRemoveFromEventList+0xb0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <xTaskRemoveFromEventList+0xb0>)
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <xTaskRemoveFromEventList+0xb4>)
 8004288:	441a      	add	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3304      	adds	r3, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f7fe fde1 	bl	8002e58 <vListInsertEnd>
 8004296:	e005      	b.n	80042a4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3318      	adds	r3, #24
 800429c:	4619      	mov	r1, r3
 800429e:	480e      	ldr	r0, [pc, #56]	; (80042d8 <xTaskRemoveFromEventList+0xb8>)
 80042a0:	f7fe fdda 	bl	8002e58 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <xTaskRemoveFromEventList+0xbc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d905      	bls.n	80042be <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <xTaskRemoveFromEventList+0xc0>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e001      	b.n	80042c2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80042c2:	697b      	ldr	r3, [r7, #20]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	2000073c 	.word	0x2000073c
 80042d0:	2000071c 	.word	0x2000071c
 80042d4:	20000640 	.word	0x20000640
 80042d8:	200006d4 	.word	0x200006d4
 80042dc:	2000063c 	.word	0x2000063c
 80042e0:	20000728 	.word	0x20000728

080042e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <vTaskInternalSetTimeOutState+0x24>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <vTaskInternalSetTimeOutState+0x28>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	2000072c 	.word	0x2000072c
 800430c:	20000718 	.word	0x20000718

08004310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
    }
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
    }
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004352:	f001 f901 	bl	8005558 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <xTaskCheckForTimeOut+0xc4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d102      	bne.n	8004376 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e026      	b.n	80043c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <xTaskCheckForTimeOut+0xc8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d00a      	beq.n	8004398 <xTaskCheckForTimeOut+0x88>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	429a      	cmp	r2, r3
 800438a:	d305      	bcc.n	8004398 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e015      	b.n	80043c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d20b      	bcs.n	80043ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	1ad2      	subs	r2, r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff ff98 	bl	80042e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e004      	b.n	80043c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80043c0:	2301      	movs	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80043c4:	f001 f8f8 	bl	80055b8 <vPortExitCritical>

    return xReturn;
 80043c8:	69fb      	ldr	r3, [r7, #28]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000718 	.word	0x20000718
 80043d8:	2000072c 	.word	0x2000072c

080043dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <vTaskMissedYield+0x14>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	20000728 	.word	0x20000728

080043f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80043fc:	f000 f852 	bl	80044a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <prvIdleTask+0x28>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d9f9      	bls.n	80043fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <prvIdleTask+0x2c>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004418:	e7f0      	b.n	80043fc <prvIdleTask+0x8>
 800441a:	bf00      	nop
 800441c:	20000640 	.word	0x20000640
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	e00c      	b.n	800444a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <prvInitialiseTaskLists+0x60>)
 800443c:	4413      	add	r3, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe fcdd 	bl	8002dfe <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3301      	adds	r3, #1
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d9ef      	bls.n	8004430 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004450:	480d      	ldr	r0, [pc, #52]	; (8004488 <prvInitialiseTaskLists+0x64>)
 8004452:	f7fe fcd4 	bl	8002dfe <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004456:	480d      	ldr	r0, [pc, #52]	; (800448c <prvInitialiseTaskLists+0x68>)
 8004458:	f7fe fcd1 	bl	8002dfe <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800445c:	480c      	ldr	r0, [pc, #48]	; (8004490 <prvInitialiseTaskLists+0x6c>)
 800445e:	f7fe fcce 	bl	8002dfe <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004462:	480c      	ldr	r0, [pc, #48]	; (8004494 <prvInitialiseTaskLists+0x70>)
 8004464:	f7fe fccb 	bl	8002dfe <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004468:	480b      	ldr	r0, [pc, #44]	; (8004498 <prvInitialiseTaskLists+0x74>)
 800446a:	f7fe fcc8 	bl	8002dfe <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <prvInitialiseTaskLists+0x78>)
 8004470:	4a05      	ldr	r2, [pc, #20]	; (8004488 <prvInitialiseTaskLists+0x64>)
 8004472:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvInitialiseTaskLists+0x7c>)
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <prvInitialiseTaskLists+0x68>)
 8004478:	601a      	str	r2, [r3, #0]
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000640 	.word	0x20000640
 8004488:	200006a4 	.word	0x200006a4
 800448c:	200006b8 	.word	0x200006b8
 8004490:	200006d4 	.word	0x200006d4
 8004494:	200006e8 	.word	0x200006e8
 8004498:	20000700 	.word	0x20000700
 800449c:	200006cc 	.word	0x200006cc
 80044a0:	200006d0 	.word	0x200006d0

080044a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044aa:	e019      	b.n	80044e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80044ac:	f001 f854 	bl	8005558 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b0:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <prvCheckTasksWaitingTermination+0x50>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fd28 	bl	8002f12 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <prvCheckTasksWaitingTermination+0x54>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	4a0b      	ldr	r2, [pc, #44]	; (80044f8 <prvCheckTasksWaitingTermination+0x54>)
 80044ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <prvCheckTasksWaitingTermination+0x58>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <prvCheckTasksWaitingTermination+0x58>)
 80044d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80044d6:	f001 f86f 	bl	80055b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f810 	bl	8004500 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <prvCheckTasksWaitingTermination+0x58>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e1      	bne.n	80044ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	200006e8 	.word	0x200006e8
 80044f8:	20000714 	.word	0x20000714
 80044fc:	200006fc 	.word	0x200006fc

08004500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4618      	mov	r0, r3
 800450e:	f001 fa25 	bl	800595c <vPortFree>
                vPortFree( pxTCB );
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 fa22 	bl	800595c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvResetNextTaskUnblockTime+0x30>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <prvResetNextTaskUnblockTime+0x34>)
 8004530:	f04f 32ff 	mov.w	r2, #4294967295
 8004534:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004536:	e005      	b.n	8004544 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <prvResetNextTaskUnblockTime+0x30>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <prvResetNextTaskUnblockTime+0x34>)
 8004542:	6013      	str	r3, [r2, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	200006cc 	.word	0x200006cc
 8004554:	20000734 	.word	0x20000734

08004558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <xTaskGetSchedulerState+0x34>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004566:	2301      	movs	r3, #1
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e008      	b.n	800457e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <xTaskGetSchedulerState+0x38>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004574:	2302      	movs	r3, #2
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	e001      	b.n	800457e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800457e:	687b      	ldr	r3, [r7, #4]
    }
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	20000720 	.word	0x20000720
 8004590:	2000073c 	.word	0x2000073c

08004594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d063      	beq.n	8004672 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80045aa:	4b34      	ldr	r3, [pc, #208]	; (800467c <xTaskPriorityDisinherit+0xe8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d00a      	beq.n	80045ca <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	60fb      	str	r3, [r7, #12]
    }
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	60bb      	str	r3, [r7, #8]
    }
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	1e5a      	subs	r2, r3, #1
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d039      	beq.n	8004672 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d135      	bne.n	8004672 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3304      	adds	r3, #4
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fc81 	bl	8002f12 <uxListRemove>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43da      	mvns	r2, r3
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <xTaskPriorityDisinherit+0xec>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4013      	ands	r3, r2
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <xTaskPriorityDisinherit+0xec>)
 800462a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f1c3 0205 	rsb	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	2201      	movs	r2, #1
 8004646:	409a      	lsls	r2, r3
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <xTaskPriorityDisinherit+0xec>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <xTaskPriorityDisinherit+0xec>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <xTaskPriorityDisinherit+0xf0>)
 8004660:	441a      	add	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe fbf5 	bl	8002e58 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800466e:	2301      	movs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004672:	697b      	ldr	r3, [r7, #20]
    }
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	2000063c 	.word	0x2000063c
 8004680:	2000071c 	.word	0x2000071c
 8004684:	20000640 	.word	0x20000640

08004688 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	613b      	str	r3, [r7, #16]
    }
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80046b2:	f000 ff51 	bl	8005558 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80046b6:	4b32      	ldr	r3, [pc, #200]	; (8004780 <xTaskGenericNotifyWait+0xf8>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	3354      	adds	r3, #84	; 0x54
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d022      	beq.n	800470e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80046c8:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <xTaskGenericNotifyWait+0xf8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	3214      	adds	r2, #20
 80046d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	43d2      	mvns	r2, r2
 80046d8:	4011      	ands	r1, r2
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	3214      	adds	r2, #20
 80046de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80046e2:	4b27      	ldr	r3, [pc, #156]	; (8004780 <xTaskGenericNotifyWait+0xf8>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	3354      	adds	r3, #84	; 0x54
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046f6:	2101      	movs	r1, #1
 80046f8:	6a38      	ldr	r0, [r7, #32]
 80046fa:	f000 fa27 	bl	8004b4c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80046fe:	4b21      	ldr	r3, [pc, #132]	; (8004784 <xTaskGenericNotifyWait+0xfc>)
 8004700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800470e:	f000 ff53 	bl	80055b8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004712:	f000 ff21 	bl	8005558 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <xTaskGenericNotifyWait+0xf8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	3214      	adds	r2, #20
 8004724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800472c:	4b14      	ldr	r3, [pc, #80]	; (8004780 <xTaskGenericNotifyWait+0xf8>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	3354      	adds	r3, #84	; 0x54
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d002      	beq.n	8004744 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e00e      	b.n	8004762 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004744:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <xTaskGenericNotifyWait+0xf8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	3214      	adds	r2, #20
 800474c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	43d2      	mvns	r2, r2
 8004754:	4011      	ands	r1, r2
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	3214      	adds	r2, #20
 800475a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800475e:	2301      	movs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <xTaskGenericNotifyWait+0xf8>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	3354      	adds	r3, #84	; 0x54
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004770:	f000 ff22 	bl	80055b8 <vPortExitCritical>

        return xReturn;
 8004774:	697b      	ldr	r3, [r7, #20]
    }
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000063c 	.word	0x2000063c
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b08c      	sub	sp, #48	; 0x30
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004796:	2301      	movs	r3, #1
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <xTaskGenericNotify+0x2e>
        __asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
    }
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <xTaskGenericNotify+0x4a>
        __asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	61fb      	str	r3, [r7, #28]
    }
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80047d6:	f000 febf 	bl	8005558 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	3214      	adds	r2, #20
 80047e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4413      	add	r3, r2
 80047f4:	3354      	adds	r3, #84	; 0x54
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80047fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4413      	add	r3, r2
 8004802:	3354      	adds	r3, #84	; 0x54
 8004804:	2202      	movs	r2, #2
 8004806:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d83b      	bhi.n	8004886 <xTaskGenericNotify+0xfe>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <xTaskGenericNotify+0x8c>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	080048a5 	.word	0x080048a5
 8004818:	08004829 	.word	0x08004829
 800481c:	08004845 	.word	0x08004845
 8004820:	0800485d 	.word	0x0800485d
 8004824:	0800486b 	.word	0x0800486b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	3214      	adds	r2, #20
 800482e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	ea42 0103 	orr.w	r1, r2, r3
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	3214      	adds	r2, #20
 800483e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004842:	e032      	b.n	80048aa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	3214      	adds	r2, #20
 800484a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484e:	1c59      	adds	r1, r3, #1
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	3214      	adds	r2, #20
 8004856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800485a:	e026      	b.n	80048aa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	3214      	adds	r2, #20
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004868:	e01f      	b.n	80048aa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800486a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800486e:	2b02      	cmp	r3, #2
 8004870:	d006      	beq.n	8004880 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	3214      	adds	r2, #20
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800487e:	e014      	b.n	80048aa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004884:	e011      	b.n	80048aa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004886:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <xTaskGenericNotify+0x1ac>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <xTaskGenericNotify+0x120>
        __asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	61bb      	str	r3, [r7, #24]
    }
 80048a0:	bf00      	nop
 80048a2:	e7fe      	b.n	80048a2 <xTaskGenericNotify+0x11a>
                    break;
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <xTaskGenericNotify+0x122>

                    break;
 80048a8:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80048aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d139      	bne.n	8004926 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fb2b 	bl	8002f12 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2201      	movs	r2, #1
 80048c2:	409a      	lsls	r2, r3
 80048c4:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <xTaskGenericNotify+0x1b0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <xTaskGenericNotify+0x1b0>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <xTaskGenericNotify+0x1b4>)
 80048dc:	441a      	add	r2, r3
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fe fab7 	bl	8002e58 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <xTaskGenericNotify+0x180>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	617b      	str	r3, [r7, #20]
    }
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <xTaskGenericNotify+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	429a      	cmp	r2, r3
 8004914:	d907      	bls.n	8004926 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <xTaskGenericNotify+0x1bc>)
 8004918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004926:	f000 fe47 	bl	80055b8 <vPortExitCritical>

        return xReturn;
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800492c:	4618      	mov	r0, r3
 800492e:	3730      	adds	r7, #48	; 0x30
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000718 	.word	0x20000718
 8004938:	2000071c 	.word	0x2000071c
 800493c:	20000640 	.word	0x20000640
 8004940:	2000063c 	.word	0x2000063c
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004948:	b580      	push	{r7, lr}
 800494a:	b090      	sub	sp, #64	; 0x40
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004956:	2301      	movs	r3, #1
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004992:	f000 fec3 	bl	800571c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800499a:	f3ef 8211 	mrs	r2, BASEPRI
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	627a      	str	r2, [r7, #36]	; 0x24
 80049b0:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80049b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d006      	beq.n	80049ca <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	3214      	adds	r2, #20
 80049c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80049ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4413      	add	r3, r2
 80049d0:	3354      	adds	r3, #84	; 0x54
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80049d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	3354      	adds	r3, #84	; 0x54
 80049e0:	2202      	movs	r2, #2
 80049e2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d83b      	bhi.n	8004a62 <xTaskGenericNotifyFromISR+0x11a>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <xTaskGenericNotifyFromISR+0xa8>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a81 	.word	0x08004a81
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a39 	.word	0x08004a39
 8004a00:	08004a47 	.word	0x08004a47
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	3214      	adds	r2, #20
 8004a0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	ea42 0103 	orr.w	r1, r2, r3
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	3214      	adds	r2, #20
 8004a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a1e:	e032      	b.n	8004a86 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	3214      	adds	r2, #20
 8004a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2a:	1c59      	adds	r1, r3, #1
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	3214      	adds	r2, #20
 8004a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a36:	e026      	b.n	8004a86 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	3214      	adds	r2, #20
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a44:	e01f      	b.n	8004a86 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d006      	beq.n	8004a5c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	3214      	adds	r2, #20
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004a5a:	e014      	b.n	8004a86 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004a60:	e011      	b.n	8004a86 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004a62:	4b33      	ldr	r3, [pc, #204]	; (8004b30 <xTaskGenericNotifyFromISR+0x1e8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61fb      	str	r3, [r7, #28]
    }
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004a80:	bf00      	nop
 8004a82:	e000      	b.n	8004a86 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004a84:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004a86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d145      	bne.n	8004b1a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	61bb      	str	r3, [r7, #24]
    }
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <xTaskGenericNotifyFromISR+0x1ec>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d11c      	bne.n	8004aee <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fa2a 	bl	8002f12 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <xTaskGenericNotifyFromISR+0x1f0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	4a1a      	ldr	r2, [pc, #104]	; (8004b38 <xTaskGenericNotifyFromISR+0x1f0>)
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <xTaskGenericNotifyFromISR+0x1f4>)
 8004ade:	441a      	add	r2, r3
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f7fe f9b6 	bl	8002e58 <vListInsertEnd>
 8004aec:	e005      	b.n	8004afa <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	3318      	adds	r3, #24
 8004af2:	4619      	mov	r1, r3
 8004af4:	4812      	ldr	r0, [pc, #72]	; (8004b40 <xTaskGenericNotifyFromISR+0x1f8>)
 8004af6:	f7fe f9af 	bl	8002e58 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afe:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <xTaskGenericNotifyFromISR+0x1fc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d908      	bls.n	8004b1a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <xTaskGenericNotifyFromISR+0x200>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f383 8811 	msr	BASEPRI, r3
    }
 8004b24:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3740      	adds	r7, #64	; 0x40
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000718 	.word	0x20000718
 8004b34:	2000073c 	.word	0x2000073c
 8004b38:	2000071c 	.word	0x2000071c
 8004b3c:	20000640 	.word	0x20000640
 8004b40:	200006d4 	.word	0x200006d4
 8004b44:	2000063c 	.word	0x2000063c
 8004b48:	20000728 	.word	0x20000728

08004b4c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004b56:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b5c:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe f9d5 	bl	8002f12 <uxListRemove>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b6e:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	2201      	movs	r2, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4013      	ands	r3, r2
 8004b82:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b84:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d10a      	bne.n	8004ba4 <prvAddCurrentTaskToDelayedList+0x58>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	481a      	ldr	r0, [pc, #104]	; (8004c08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b9e:	f7fe f95b 	bl	8002e58 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004ba2:	e026      	b.n	8004bf2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d209      	bcs.n	8004bd0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bbc:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f7fe f969 	bl	8002ea0 <vListInsert>
}
 8004bce:	e010      	b.n	8004bf2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f7fe f95f 	bl	8002ea0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d202      	bcs.n	8004bf2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004bec:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6013      	str	r3, [r2, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000718 	.word	0x20000718
 8004c00:	2000063c 	.word	0x2000063c
 8004c04:	2000071c 	.word	0x2000071c
 8004c08:	20000700 	.word	0x20000700
 8004c0c:	200006d0 	.word	0x200006d0
 8004c10:	200006cc 	.word	0x200006cc
 8004c14:	20000734 	.word	0x20000734

08004c18 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004c22:	f000 fb31 	bl	8005288 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <xTimerCreateTimerTask+0x54>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004c2e:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <xTimerCreateTimerTask+0x58>)
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	2302      	movs	r3, #2
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2300      	movs	r3, #0
 8004c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c3c:	490d      	ldr	r1, [pc, #52]	; (8004c74 <xTimerCreateTimerTask+0x5c>)
 8004c3e:	480e      	ldr	r0, [pc, #56]	; (8004c78 <xTimerCreateTimerTask+0x60>)
 8004c40:	f7fe ff46 	bl	8003ad0 <xTaskCreate>
 8004c44:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	603b      	str	r3, [r7, #0]
    }
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004c62:	687b      	ldr	r3, [r7, #4]
    }
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000770 	.word	0x20000770
 8004c70:	20000774 	.word	0x20000774
 8004c74:	0800f5d8 	.word	0x0800f5d8
 8004c78:	08004e69 	.word	0x08004e69

08004c7c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004c8a:	202c      	movs	r0, #44	; 0x2c
 8004c8c:	f000 fd86 	bl	800579c <pvPortMalloc>
 8004c90:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f805 	bl	8004cbe <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004cb4:	697b      	ldr	r3, [r7, #20]
        }
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	617b      	str	r3, [r7, #20]
    }
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01e      	beq.n	8004d2c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8004cee:	f000 facb 	bl	8005288 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	6a3a      	ldr	r2, [r7, #32]
 8004d08:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe f895 	bl	8002e3e <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d008      	beq.n	8004d2c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	623b      	str	r3, [r7, #32]
    }
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004d62:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <xTimerGenericCommand+0x98>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d02a      	beq.n	8004dc0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	dc18      	bgt.n	8004dae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d7c:	f7ff fbec 	bl	8004558 <xTaskGetSchedulerState>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d109      	bne.n	8004d9a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <xTimerGenericCommand+0x98>)
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f107 0114 	add.w	r1, r7, #20
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d92:	f7fe f9d3 	bl	800313c <xQueueGenericSend>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24
 8004d98:	e012      	b.n	8004dc0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <xTimerGenericCommand+0x98>)
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	f107 0114 	add.w	r1, r7, #20
 8004da2:	2300      	movs	r3, #0
 8004da4:	2200      	movs	r2, #0
 8004da6:	f7fe f9c9 	bl	800313c <xQueueGenericSend>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24
 8004dac:	e008      	b.n	8004dc0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <xTimerGenericCommand+0x98>)
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	f107 0114 	add.w	r1, r7, #20
 8004db6:	2300      	movs	r3, #0
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	f7fe fabd 	bl	8003338 <xQueueGenericSendFromISR>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000770 	.word	0x20000770

08004dd0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dda:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <prvProcessExpiredTimer+0x94>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe f892 	bl	8002f12 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d022      	beq.n	8004e42 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	18d1      	adds	r1, r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f000 f8d1 	bl	8004fb0 <prvInsertTimerInActiveList>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01f      	beq.n	8004e54 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e14:	2300      	movs	r3, #0
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	6978      	ldr	r0, [r7, #20]
 8004e20:	f7ff ff88 	bl	8004d34 <xTimerGenericCommand>
 8004e24:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d113      	bne.n	8004e54 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
    }
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	6978      	ldr	r0, [r7, #20]
 8004e5a:	4798      	blx	r3
    }
 8004e5c:	bf00      	nop
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000768 	.word	0x20000768

08004e68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e70:	f107 0308 	add.w	r3, r7, #8
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f857 	bl	8004f28 <prvGetNextExpireTime>
 8004e7a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f803 	bl	8004e8c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004e86:	f000 f8d5 	bl	8005034 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e8a:	e7f1      	b.n	8004e70 <prvTimerTask+0x8>

08004e8c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004e96:	f7fe ffb3 	bl	8003e00 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e9a:	f107 0308 	add.w	r3, r7, #8
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f866 	bl	8004f70 <prvSampleTimeNow>
 8004ea4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d130      	bne.n	8004f0e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <prvProcessTimerOrBlockTask+0x3c>
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d806      	bhi.n	8004ec8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004eba:	f7fe ffaf 	bl	8003e1c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ff85 	bl	8004dd0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004ec6:	e024      	b.n	8004f12 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <prvProcessTimerOrBlockTask+0x90>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <prvProcessTimerOrBlockTask+0x50>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <prvProcessTimerOrBlockTask+0x52>
 8004edc:	2300      	movs	r3, #0
 8004ede:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <prvProcessTimerOrBlockTask+0x94>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	4619      	mov	r1, r3
 8004eee:	f7fe fdbb 	bl	8003a68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004ef2:	f7fe ff93 	bl	8003e1c <xTaskResumeAll>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <prvProcessTimerOrBlockTask+0x98>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	f3bf 8f6f 	isb	sy
    }
 8004f0c:	e001      	b.n	8004f12 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004f0e:	f7fe ff85 	bl	8003e1c <xTaskResumeAll>
    }
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000076c 	.word	0x2000076c
 8004f20:	20000770 	.word	0x20000770
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f30:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <prvGetNextExpireTime+0x44>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <prvGetNextExpireTime+0x16>
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	e000      	b.n	8004f40 <prvGetNextExpireTime+0x18>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <prvGetNextExpireTime+0x44>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e001      	b.n	8004f5c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
    }
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000768 	.word	0x20000768

08004f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004f78:	f7fe ffec 	bl	8003f54 <xTaskGetTickCount>
 8004f7c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <prvSampleTimeNow+0x3c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d205      	bcs.n	8004f94 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004f88:	f000 f91a 	bl	80051c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e002      	b.n	8004f9a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f9a:	4a04      	ldr	r2, [pc, #16]	; (8004fac <prvSampleTimeNow+0x3c>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
    }
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000778 	.word	0x20000778

08004fb0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d812      	bhi.n	8004ffc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	1ad2      	subs	r2, r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e01b      	b.n	8005022 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <prvInsertTimerInActiveList+0x7c>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f7fd ff53 	bl	8002ea0 <vListInsert>
 8004ffa:	e012      	b.n	8005022 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d206      	bcs.n	8005012 <prvInsertTimerInActiveList+0x62>
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e007      	b.n	8005022 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <prvInsertTimerInActiveList+0x80>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7fd ff3f 	bl	8002ea0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005022:	697b      	ldr	r3, [r7, #20]
    }
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	2000076c 	.word	0x2000076c
 8005030:	20000768 	.word	0x20000768

08005034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	; 0x30
 8005038:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800503a:	e0ae      	b.n	800519a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f2c0 80aa 	blt.w	8005198 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	3304      	adds	r3, #4
 8005054:	4618      	mov	r0, r3
 8005056:	f7fd ff5c 	bl	8002f12 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff87 	bl	8004f70 <prvSampleTimeNow>
 8005062:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b09      	cmp	r3, #9
 8005068:	f200 8097 	bhi.w	800519a <prvProcessReceivedCommands+0x166>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <prvProcessReceivedCommands+0x40>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	0800509d 	.word	0x0800509d
 8005078:	0800509d 	.word	0x0800509d
 800507c:	0800509d 	.word	0x0800509d
 8005080:	08005111 	.word	0x08005111
 8005084:	08005125 	.word	0x08005125
 8005088:	0800516f 	.word	0x0800516f
 800508c:	0800509d 	.word	0x0800509d
 8005090:	0800509d 	.word	0x0800509d
 8005094:	08005111 	.word	0x08005111
 8005098:	08005125 	.word	0x08005125
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	18d1      	adds	r1, r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050bc:	f7ff ff78 	bl	8004fb0 <prvInsertTimerInActiveList>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d069      	beq.n	800519a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050cc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05e      	beq.n	800519a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	441a      	add	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	2100      	movs	r1, #0
 80050ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ee:	f7ff fe21 	bl	8004d34 <xTimerGenericCommand>
 80050f2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d14f      	bne.n	800519a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61bb      	str	r3, [r7, #24]
    }
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005122:	e03a      	b.n	800519a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	617b      	str	r3, [r7, #20]
    }
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	18d1      	adds	r1, r2, r3
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005168:	f7ff ff22 	bl	8004fb0 <prvInsertTimerInActiveList>
                        break;
 800516c:	e015      	b.n	800519a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d103      	bne.n	8005184 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800517c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800517e:	f000 fbed 	bl	800595c <vPortFree>
 8005182:	e00a      	b.n	800519a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005196:	e000      	b.n	800519a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005198:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800519a:	4b08      	ldr	r3, [pc, #32]	; (80051bc <prvProcessReceivedCommands+0x188>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f107 0108 	add.w	r1, r7, #8
 80051a2:	2200      	movs	r2, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe f971 	bl	800348c <xQueueReceive>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f47f af45 	bne.w	800503c <prvProcessReceivedCommands+0x8>
        }
    }
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	3728      	adds	r7, #40	; 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000770 	.word	0x20000770

080051c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051c6:	e048      	b.n	800525a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051c8:	4b2d      	ldr	r3, [pc, #180]	; (8005280 <prvSwitchTimerLists+0xc0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d2:	4b2b      	ldr	r3, [pc, #172]	; (8005280 <prvSwitchTimerLists+0xc0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3304      	adds	r3, #4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd fe96 	bl	8002f12 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02e      	beq.n	800525a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	429a      	cmp	r2, r3
 800520c:	d90e      	bls.n	800522c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800521a:	4b19      	ldr	r3, [pc, #100]	; (8005280 <prvSwitchTimerLists+0xc0>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3304      	adds	r3, #4
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f7fd fe3b 	bl	8002ea0 <vListInsert>
 800522a:	e016      	b.n	800525a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800522c:	2300      	movs	r3, #0
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	2100      	movs	r1, #0
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fd7c 	bl	8004d34 <xTimerGenericCommand>
 800523c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	603b      	str	r3, [r7, #0]
    }
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <prvSwitchTimerLists+0xc0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1b1      	bne.n	80051c8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <prvSwitchTimerLists+0xc0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <prvSwitchTimerLists+0xc4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a04      	ldr	r2, [pc, #16]	; (8005280 <prvSwitchTimerLists+0xc0>)
 8005270:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005272:	4a04      	ldr	r2, [pc, #16]	; (8005284 <prvSwitchTimerLists+0xc4>)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6013      	str	r3, [r2, #0]
    }
 8005278:	bf00      	nop
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000768 	.word	0x20000768
 8005284:	2000076c 	.word	0x2000076c

08005288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800528c:	f000 f964 	bl	8005558 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005290:	4b12      	ldr	r3, [pc, #72]	; (80052dc <prvCheckForValidListAndQueue+0x54>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11d      	bne.n	80052d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005298:	4811      	ldr	r0, [pc, #68]	; (80052e0 <prvCheckForValidListAndQueue+0x58>)
 800529a:	f7fd fdb0 	bl	8002dfe <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800529e:	4811      	ldr	r0, [pc, #68]	; (80052e4 <prvCheckForValidListAndQueue+0x5c>)
 80052a0:	f7fd fdad 	bl	8002dfe <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <prvCheckForValidListAndQueue+0x60>)
 80052a6:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <prvCheckForValidListAndQueue+0x58>)
 80052a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <prvCheckForValidListAndQueue+0x64>)
 80052ac:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <prvCheckForValidListAndQueue+0x5c>)
 80052ae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80052b0:	2200      	movs	r2, #0
 80052b2:	210c      	movs	r1, #12
 80052b4:	200a      	movs	r0, #10
 80052b6:	f7fd febf 	bl	8003038 <xQueueGenericCreate>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a07      	ldr	r2, [pc, #28]	; (80052dc <prvCheckForValidListAndQueue+0x54>)
 80052be:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <prvCheckForValidListAndQueue+0x54>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <prvCheckForValidListAndQueue+0x54>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4908      	ldr	r1, [pc, #32]	; (80052f0 <prvCheckForValidListAndQueue+0x68>)
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fba0 	bl	8003a14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052d4:	f000 f970 	bl	80055b8 <vPortExitCritical>
    }
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000770 	.word	0x20000770
 80052e0:	20000740 	.word	0x20000740
 80052e4:	20000754 	.word	0x20000754
 80052e8:	20000768 	.word	0x20000768
 80052ec:	2000076c 	.word	0x2000076c
 80052f0:	0800f5e0 	.word	0x0800f5e0

080052f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b04      	subs	r3, #4
 8005304:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800530c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b04      	subs	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b04      	subs	r3, #4
 8005322:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005324:	4a0c      	ldr	r2, [pc, #48]	; (8005358 <pxPortInitialiseStack+0x64>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b14      	subs	r3, #20
 800532e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b04      	subs	r3, #4
 800533a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f06f 0202 	mvn.w	r2, #2
 8005342:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3b20      	subs	r3, #32
 8005348:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	0800535d 	.word	0x0800535d

0800535c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005366:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <prvTaskExitError+0x54>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d00a      	beq.n	8005386 <prvTaskExitError+0x2a>
        __asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	60fb      	str	r3, [r7, #12]
    }
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <prvTaskExitError+0x28>
        __asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60bb      	str	r3, [r7, #8]
    }
 8005398:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800539a:	bf00      	nop
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0fc      	beq.n	800539c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	20000020 	.word	0x20000020
	...

080053c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <pxCurrentTCBConst2>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f380 8809 	msr	PSP, r0
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	4770      	bx	lr
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst2>:
 80053e0:	2000063c 	.word	0x2000063c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80053e8:	4808      	ldr	r0, [pc, #32]	; (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
 800540a:	0000      	.short	0x0000
 800540c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop

08005414 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800541a:	4b46      	ldr	r3, [pc, #280]	; (8005534 <xPortStartScheduler+0x120>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a46      	ldr	r2, [pc, #280]	; (8005538 <xPortStartScheduler+0x124>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10a      	bne.n	800543a <xPortStartScheduler+0x26>
        __asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	613b      	str	r3, [r7, #16]
    }
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800543a:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <xPortStartScheduler+0x120>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a3f      	ldr	r2, [pc, #252]	; (800553c <xPortStartScheduler+0x128>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10a      	bne.n	800545a <xPortStartScheduler+0x46>
        __asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	60fb      	str	r3, [r7, #12]
    }
 8005456:	bf00      	nop
 8005458:	e7fe      	b.n	8005458 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800545a:	4b39      	ldr	r3, [pc, #228]	; (8005540 <xPortStartScheduler+0x12c>)
 800545c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	22ff      	movs	r2, #255	; 0xff
 800546a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <xPortStartScheduler+0x130>)
 8005480:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005482:	4b31      	ldr	r3, [pc, #196]	; (8005548 <xPortStartScheduler+0x134>)
 8005484:	2207      	movs	r2, #7
 8005486:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005488:	e009      	b.n	800549e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800548a:	4b2f      	ldr	r3, [pc, #188]	; (8005548 <xPortStartScheduler+0x134>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3b01      	subs	r3, #1
 8005490:	4a2d      	ldr	r2, [pc, #180]	; (8005548 <xPortStartScheduler+0x134>)
 8005492:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b80      	cmp	r3, #128	; 0x80
 80054a8:	d0ef      	beq.n	800548a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054aa:	4b27      	ldr	r3, [pc, #156]	; (8005548 <xPortStartScheduler+0x134>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1c3 0307 	rsb	r3, r3, #7
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00a      	beq.n	80054cc <xPortStartScheduler+0xb8>
        __asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60bb      	str	r3, [r7, #8]
    }
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <xPortStartScheduler+0x134>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <xPortStartScheduler+0x134>)
 80054d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054d6:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <xPortStartScheduler+0x134>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054de:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <xPortStartScheduler+0x134>)
 80054e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80054ea:	4b18      	ldr	r3, [pc, #96]	; (800554c <xPortStartScheduler+0x138>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a17      	ldr	r2, [pc, #92]	; (800554c <xPortStartScheduler+0x138>)
 80054f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80054f6:	4b15      	ldr	r3, [pc, #84]	; (800554c <xPortStartScheduler+0x138>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <xPortStartScheduler+0x138>)
 80054fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005500:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005502:	f000 f8db 	bl	80056bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <xPortStartScheduler+0x13c>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800550c:	f000 f8fa 	bl	8005704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005510:	4b10      	ldr	r3, [pc, #64]	; (8005554 <xPortStartScheduler+0x140>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0f      	ldr	r2, [pc, #60]	; (8005554 <xPortStartScheduler+0x140>)
 8005516:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800551a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800551c:	f7ff ff64 	bl	80053e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005520:	f7fe fdd2 	bl	80040c8 <vTaskSwitchContext>
    prvTaskExitError();
 8005524:	f7ff ff1a 	bl	800535c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	e000ed00 	.word	0xe000ed00
 8005538:	410fc271 	.word	0x410fc271
 800553c:	410fc270 	.word	0x410fc270
 8005540:	e000e400 	.word	0xe000e400
 8005544:	2000077c 	.word	0x2000077c
 8005548:	20000780 	.word	0x20000780
 800554c:	e000ed20 	.word	0xe000ed20
 8005550:	20000020 	.word	0x20000020
 8005554:	e000ef34 	.word	0xe000ef34

08005558 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
        __asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
    }
 8005570:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <vPortEnterCritical+0x58>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	4a0d      	ldr	r2, [pc, #52]	; (80055b0 <vPortEnterCritical+0x58>)
 800557a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <vPortEnterCritical+0x58>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10f      	bne.n	80055a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <vPortEnterCritical+0x5c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	603b      	str	r3, [r7, #0]
    }
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <vPortEnterCritical+0x4a>
    }
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000020 	.word	0x20000020
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80055be:	4b12      	ldr	r3, [pc, #72]	; (8005608 <vPortExitCritical+0x50>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10a      	bne.n	80055dc <vPortExitCritical+0x24>
        __asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	607b      	str	r3, [r7, #4]
    }
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <vPortExitCritical+0x50>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	4a09      	ldr	r2, [pc, #36]	; (8005608 <vPortExitCritical+0x50>)
 80055e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <vPortExitCritical+0x50>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d105      	bne.n	80055fa <vPortExitCritical+0x42>
 80055ee:	2300      	movs	r3, #0
 80055f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f383 8811 	msr	BASEPRI, r3
    }
 80055f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000020 	.word	0x20000020
 800560c:	00000000 	.word	0x00000000

08005610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005610:	f3ef 8009 	mrs	r0, PSP
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <pxCurrentTCBConst>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f01e 0f10 	tst.w	lr, #16
 8005620:	bf08      	it	eq
 8005622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005634:	f380 8811 	msr	BASEPRI, r0
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f7fe fd42 	bl	80040c8 <vTaskSwitchContext>
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f380 8811 	msr	BASEPRI, r0
 800564c:	bc09      	pop	{r0, r3}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005656:	f01e 0f10 	tst.w	lr, #16
 800565a:	bf08      	it	eq
 800565c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005660:	f380 8809 	msr	PSP, r0
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst>:
 8005670:	2000063c 	.word	0x2000063c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
        __asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
    }
 8005690:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005692:	f7fe fc6f 	bl	8003f74 <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <SysTick_Handler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
    }
 80056ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <vPortSetupTimerInterrupt+0x44>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010
 80056f4:	e000e018 	.word	0xe000e018
 80056f8:	20000024 	.word	0x20000024
 80056fc:	10624dd3 	.word	0x10624dd3
 8005700:	e000e014 	.word	0xe000e014

08005704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005714 <vPortEnableVFP+0x10>
 8005708:	6801      	ldr	r1, [r0, #0]
 800570a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800570e:	6001      	str	r1, [r0, #0]
 8005710:	4770      	bx	lr
 8005712:	0000      	.short	0x0000
 8005714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop

0800571c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005722:	f3ef 8305 	mrs	r3, IPSR
 8005726:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b0f      	cmp	r3, #15
 800572c:	d914      	bls.n	8005758 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <vPortValidateInterruptPriority+0x70>)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <vPortValidateInterruptPriority+0x74>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	7afa      	ldrb	r2, [r7, #11]
 800573e:	429a      	cmp	r2, r3
 8005740:	d20a      	bcs.n	8005758 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	607b      	str	r3, [r7, #4]
    }
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <vPortValidateInterruptPriority+0x78>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <vPortValidateInterruptPriority+0x7c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d90a      	bls.n	800577e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	603b      	str	r3, [r7, #0]
    }
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <vPortValidateInterruptPriority+0x60>
    }
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000e3f0 	.word	0xe000e3f0
 8005790:	2000077c 	.word	0x2000077c
 8005794:	e000ed0c 	.word	0xe000ed0c
 8005798:	20000780 	.word	0x20000780

0800579c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80057a8:	f7fe fb2a 	bl	8003e00 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80057ac:	4b65      	ldr	r3, [pc, #404]	; (8005944 <pvPortMalloc+0x1a8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80057b4:	f000 f934 	bl	8005a20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b8:	4b63      	ldr	r3, [pc, #396]	; (8005948 <pvPortMalloc+0x1ac>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 80a7 	bne.w	8005914 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d02d      	beq.n	8005828 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80057cc:	2208      	movs	r2, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d227      	bcs.n	8005828 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80057d8:	2208      	movs	r2, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d021      	beq.n	800582e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	3308      	adds	r3, #8
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d214      	bcs.n	8005822 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	3308      	adds	r3, #8
 8005800:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	2b00      	cmp	r3, #0
 800580a:	d010      	beq.n	800582e <pvPortMalloc+0x92>
        __asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	617b      	str	r3, [r7, #20]
    }
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005826:	e002      	b.n	800582e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	e000      	b.n	8005830 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800582e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d06e      	beq.n	8005914 <pvPortMalloc+0x178>
 8005836:	4b45      	ldr	r3, [pc, #276]	; (800594c <pvPortMalloc+0x1b0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d869      	bhi.n	8005914 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005840:	4b43      	ldr	r3, [pc, #268]	; (8005950 <pvPortMalloc+0x1b4>)
 8005842:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005844:	4b42      	ldr	r3, [pc, #264]	; (8005950 <pvPortMalloc+0x1b4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800584a:	e004      	b.n	8005856 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d903      	bls.n	8005868 <pvPortMalloc+0xcc>
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f1      	bne.n	800584c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005868:	4b36      	ldr	r3, [pc, #216]	; (8005944 <pvPortMalloc+0x1a8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586e:	429a      	cmp	r2, r3
 8005870:	d050      	beq.n	8005914 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2208      	movs	r2, #8
 8005878:	4413      	add	r3, r2
 800587a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	2308      	movs	r3, #8
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	429a      	cmp	r2, r3
 8005892:	d91f      	bls.n	80058d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4413      	add	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <pvPortMalloc+0x120>
        __asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	613b      	str	r3, [r7, #16]
    }
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	1ad2      	subs	r2, r2, r3
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058ce:	69b8      	ldr	r0, [r7, #24]
 80058d0:	f000 f908 	bl	8005ae4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058d4:	4b1d      	ldr	r3, [pc, #116]	; (800594c <pvPortMalloc+0x1b0>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	4a1b      	ldr	r2, [pc, #108]	; (800594c <pvPortMalloc+0x1b0>)
 80058e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058e2:	4b1a      	ldr	r3, [pc, #104]	; (800594c <pvPortMalloc+0x1b0>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <pvPortMalloc+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d203      	bcs.n	80058f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058ee:	4b17      	ldr	r3, [pc, #92]	; (800594c <pvPortMalloc+0x1b0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a18      	ldr	r2, [pc, #96]	; (8005954 <pvPortMalloc+0x1b8>)
 80058f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <pvPortMalloc+0x1ac>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	431a      	orrs	r2, r3
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <pvPortMalloc+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	4a11      	ldr	r2, [pc, #68]	; (8005958 <pvPortMalloc+0x1bc>)
 8005912:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005914:	f7fe fa82 	bl	8003e1c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <pvPortMalloc+0x19c>
        __asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60fb      	str	r3, [r7, #12]
    }
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <pvPortMalloc+0x19a>
    return pvReturn;
 8005938:	69fb      	ldr	r3, [r7, #28]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3728      	adds	r7, #40	; 0x28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	2001338c 	.word	0x2001338c
 8005948:	200133a0 	.word	0x200133a0
 800594c:	20013390 	.word	0x20013390
 8005950:	20013384 	.word	0x20013384
 8005954:	20013394 	.word	0x20013394
 8005958:	20013398 	.word	0x20013398

0800595c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d04d      	beq.n	8005a0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800596e:	2308      	movs	r3, #8
 8005970:	425b      	negs	r3, r3
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4413      	add	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <vPortFree+0xb8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4013      	ands	r3, r2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <vPortFree+0x44>
        __asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60fb      	str	r3, [r7, #12]
    }
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <vPortFree+0x62>
        __asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60bb      	str	r3, [r7, #8]
    }
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <vPortFree+0xb8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01e      	beq.n	8005a0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11a      	bne.n	8005a0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <vPortFree+0xb8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80059e4:	f7fe fa0c 	bl	8003e00 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <vPortFree+0xbc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4413      	add	r3, r2
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <vPortFree+0xbc>)
 80059f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059f6:	6938      	ldr	r0, [r7, #16]
 80059f8:	f000 f874 	bl	8005ae4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <vPortFree+0xc0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	4a06      	ldr	r2, [pc, #24]	; (8005a1c <vPortFree+0xc0>)
 8005a04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a06:	f7fe fa09 	bl	8003e1c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a0a:	bf00      	nop
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	200133a0 	.word	0x200133a0
 8005a18:	20013390 	.word	0x20013390
 8005a1c:	2001339c 	.word	0x2001339c

08005a20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005a2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005a2c:	4b27      	ldr	r3, [pc, #156]	; (8005acc <prvHeapInit+0xac>)
 8005a2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3307      	adds	r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <prvHeapInit+0xac>)
 8005a50:	4413      	add	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <prvHeapInit+0xb0>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <prvHeapInit+0xb0>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	4413      	add	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0307 	bic.w	r3, r3, #7
 8005a7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <prvHeapInit+0xb4>)
 8005a80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a82:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <prvHeapInit+0xb4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <prvHeapInit+0xb4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	1ad2      	subs	r2, r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <prvHeapInit+0xb4>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <prvHeapInit+0xb8>)
 8005aae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4a09      	ldr	r2, [pc, #36]	; (8005adc <prvHeapInit+0xbc>)
 8005ab6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <prvHeapInit+0xc0>)
 8005aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005abe:	601a      	str	r2, [r3, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000784 	.word	0x20000784
 8005ad0:	20013384 	.word	0x20013384
 8005ad4:	2001338c 	.word	0x2001338c
 8005ad8:	20013394 	.word	0x20013394
 8005adc:	20013390 	.word	0x20013390
 8005ae0:	200133a0 	.word	0x200133a0

08005ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aec:	4b28      	ldr	r3, [pc, #160]	; (8005b90 <prvInsertBlockIntoFreeList+0xac>)
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e002      	b.n	8005af8 <prvInsertBlockIntoFreeList+0x14>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d8f7      	bhi.n	8005af2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d108      	bne.n	8005b26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	441a      	add	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	441a      	add	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d118      	bne.n	8005b6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <prvInsertBlockIntoFreeList+0xb0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d00d      	beq.n	8005b62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e008      	b.n	8005b74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <prvInsertBlockIntoFreeList+0xb0>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e003      	b.n	8005b74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d002      	beq.n	8005b82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20013384 	.word	0x20013384
 8005b94:	2001338c 	.word	0x2001338c

08005b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db0b      	blt.n	8005bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	f003 021f 	and.w	r2, r3, #31
 8005bb0:	4907      	ldr	r1, [pc, #28]	; (8005bd0 <__NVIC_EnableIRQ+0x38>)
 8005bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	2001      	movs	r0, #1
 8005bba:	fa00 f202 	lsl.w	r2, r0, r2
 8005bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000e100 	.word	0xe000e100

08005bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	6039      	str	r1, [r7, #0]
 8005bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	db0a      	blt.n	8005bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	490c      	ldr	r1, [pc, #48]	; (8005c20 <__NVIC_SetPriority+0x4c>)
 8005bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf2:	0112      	lsls	r2, r2, #4
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bfc:	e00a      	b.n	8005c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	4908      	ldr	r1, [pc, #32]	; (8005c24 <__NVIC_SetPriority+0x50>)
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	3b04      	subs	r3, #4
 8005c0c:	0112      	lsls	r2, r2, #4
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	440b      	add	r3, r1
 8005c12:	761a      	strb	r2, [r3, #24]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	e000e100 	.word	0xe000e100
 8005c24:	e000ed00 	.word	0xe000ed00

08005c28 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <inTIM4+0x30>)
 8005c2e:	4a0b      	ldr	r2, [pc, #44]	; (8005c5c <inTIM4+0x34>)
 8005c30:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <inTIM4+0x30>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8005c38:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <inTIM4+0x30>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <inTIM4+0x30>)
 8005c40:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c44:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8005c46:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <inTIM4+0x30>)
 8005c48:	220a      	movs	r2, #10
 8005c4a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8005c4c:	4802      	ldr	r0, [pc, #8]	; (8005c58 <inTIM4+0x30>)
 8005c4e:	f000 f807 	bl	8005c60 <BasicTimer_Config>

}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200002fc 	.word	0x200002fc
 8005c5c:	40000800 	.word	0x40000800

08005c60 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c70:	b672      	cpsid	i
}
 8005c72:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a85      	ldr	r2, [pc, #532]	; (8005e90 <BasicTimer_Config+0x230>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d106      	bne.n	8005c8c <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005c7e:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <BasicTimer_Config+0x234>)
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	4a84      	ldr	r2, [pc, #528]	; (8005e94 <BasicTimer_Config+0x234>)
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	6453      	str	r3, [r2, #68]	; 0x44
 8005c8a:	e030      	b.n	8005cee <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c94:	d106      	bne.n	8005ca4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005c96:	4b7f      	ldr	r3, [pc, #508]	; (8005e94 <BasicTimer_Config+0x234>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	4a7e      	ldr	r2, [pc, #504]	; (8005e94 <BasicTimer_Config+0x234>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca2:	e024      	b.n	8005cee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a7b      	ldr	r2, [pc, #492]	; (8005e98 <BasicTimer_Config+0x238>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d106      	bne.n	8005cbc <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005cae:	4b79      	ldr	r3, [pc, #484]	; (8005e94 <BasicTimer_Config+0x234>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	4a78      	ldr	r2, [pc, #480]	; (8005e94 <BasicTimer_Config+0x234>)
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cba:	e018      	b.n	8005cee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a76      	ldr	r2, [pc, #472]	; (8005e9c <BasicTimer_Config+0x23c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d106      	bne.n	8005cd4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005cc6:	4b73      	ldr	r3, [pc, #460]	; (8005e94 <BasicTimer_Config+0x234>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	4a72      	ldr	r2, [pc, #456]	; (8005e94 <BasicTimer_Config+0x234>)
 8005ccc:	f043 0304 	orr.w	r3, r3, #4
 8005cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd2:	e00c      	b.n	8005cee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a71      	ldr	r2, [pc, #452]	; (8005ea0 <BasicTimer_Config+0x240>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d106      	bne.n	8005cec <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005cde:	4b6d      	ldr	r3, [pc, #436]	; (8005e94 <BasicTimer_Config+0x234>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	4a6c      	ldr	r2, [pc, #432]	; (8005e94 <BasicTimer_Config+0x234>)
 8005ce4:	f043 0308 	orr.w	r3, r3, #8
 8005ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cea:	e000      	b.n	8005cee <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8005cec:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cfc:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6892      	ldr	r2, [r2, #8]
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	791b      	ldrb	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 80d3 	bne.w	8005eb8 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0210 	bic.w	r2, r2, #16
 8005d20:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2ba0      	cmp	r3, #160	; 0xa0
 8005d2c:	d022      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2bc8      	cmp	r3, #200	; 0xc8
 8005d32:	d01f      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005d3a:	d01b      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005d42:	d017      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d4a:	d013      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005d52:	d00f      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005d5a:	d00b      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005d62:	d007      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8005d6a:	d003      	beq.n	8005d74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d72:	d10b      	bne.n	8005d8c <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2264      	movs	r2, #100	; 0x64
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	3a01      	subs	r2, #1
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d8a:	e07c      	b.n	8005e86 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d92:	d029      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d9a:	d025      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d020      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005dac:	d01c      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d017      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f241 7270 	movw	r2, #6000	; 0x1770
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d012      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00d      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005dd2:	d009      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f242 3228 	movw	r2, #9000	; 0x2328
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f242 7210 	movw	r2, #10000	; 0x2710
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10c      	bne.n	8005e02 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	3a01      	subs	r2, #1
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e00:	e041      	b.n	8005e86 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005e08:	d028      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d023      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f247 5230 	movw	r2, #30000	; 0x7530
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01e      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f649 4240 	movw	r2, #40000	; 0x9c40
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d019      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d014      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00f      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <BasicTimer_Config+0x244>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <BasicTimer_Config+0x248>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a17      	ldr	r2, [pc, #92]	; (8005eac <BasicTimer_Config+0x24c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <BasicTimer_Config+0x250>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d108      	bne.n	8005e6e <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	3a01      	subs	r2, #1
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e6c:	e00b      	b.n	8005e86 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <BasicTimer_Config+0x254>)
 8005e74:	fba2 2303 	umull	r2, r3, r2, r3
 8005e78:	08db      	lsrs	r3, r3, #3
 8005e7a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	3a01      	subs	r2, #1
 8005e84:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e8e:	e027      	b.n	8005ee0 <BasicTimer_Config+0x280>
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40023800 	.word	0x40023800
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	00011170 	.word	0x00011170
 8005ea8:	00013880 	.word	0x00013880
 8005eac:	00015f90 	.word	0x00015f90
 8005eb0:	000186a0 	.word	0x000186a0
 8005eb4:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0210 	orr.w	r2, r2, #16
 8005ec6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3a01      	subs	r2, #1
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7c1b      	ldrb	r3, [r3, #16]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d12d      	bne.n	8005f44 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d103      	bne.n	8005f0a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8005f02:	201c      	movs	r0, #28
 8005f04:	f7ff fe48 	bl	8005b98 <__NVIC_EnableIRQ>
 8005f08:	e024      	b.n	8005f54 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <BasicTimer_Config+0x300>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d103      	bne.n	8005f1c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8005f14:	201d      	movs	r0, #29
 8005f16:	f7ff fe3f 	bl	8005b98 <__NVIC_EnableIRQ>
 8005f1a:	e01b      	b.n	8005f54 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a10      	ldr	r2, [pc, #64]	; (8005f64 <BasicTimer_Config+0x304>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d103      	bne.n	8005f2e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8005f26:	201e      	movs	r0, #30
 8005f28:	f7ff fe36 	bl	8005b98 <__NVIC_EnableIRQ>
 8005f2c:	e012      	b.n	8005f54 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a0d      	ldr	r2, [pc, #52]	; (8005f68 <BasicTimer_Config+0x308>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d103      	bne.n	8005f40 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8005f38:	2032      	movs	r0, #50	; 0x32
 8005f3a:	f7ff fe2d 	bl	8005b98 <__NVIC_EnableIRQ>
 8005f3e:	e009      	b.n	8005f54 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8005f40:	bf00      	nop
 8005f42:	e007      	b.n	8005f54 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0201 	bic.w	r2, r2, #1
 8005f52:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f54:	b662      	cpsie	i
}
 8005f56:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00

08005f6c <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8005f76:	4818      	ldr	r0, [pc, #96]	; (8005fd8 <delay_ms+0x6c>)
 8005f78:	f000 fab8 	bl	80064ec <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	0092      	lsls	r2, r2, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8005f90:	e016      	b.n	8005fc0 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8005f92:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <delay_ms+0x6c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00f      	beq.n	8005fc0 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <delay_ms+0x6c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	89fb      	ldrh	r3, [r7, #14]
 8005fac:	4413      	add	r3, r2
 8005fae:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <delay_ms+0x6c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <delay_ms+0x6c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8005fc0:	89fa      	ldrh	r2, [r7, #14]
 8005fc2:	89bb      	ldrh	r3, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d3e4      	bcc.n	8005f92 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8005fc8:	4803      	ldr	r0, [pc, #12]	; (8005fd8 <delay_ms+0x6c>)
 8005fca:	f000 faa1 	bl	8006510 <stopTimer>
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200002fc 	.word	0x200002fc

08005fdc <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fe8:	b672      	cpsid	i
}
 8005fea:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d105      	bne.n	8006002 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	201c      	movs	r0, #28
 8005ffc:	f7ff fdea 	bl	8005bd4 <__NVIC_SetPriority>
 8006000:	e021      	b.n	8006046 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a13      	ldr	r2, [pc, #76]	; (8006054 <TIM_SetPriority+0x78>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d105      	bne.n	8006018 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	4619      	mov	r1, r3
 8006010:	201d      	movs	r0, #29
 8006012:	f7ff fddf 	bl	8005bd4 <__NVIC_SetPriority>
 8006016:	e016      	b.n	8006046 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a0e      	ldr	r2, [pc, #56]	; (8006058 <TIM_SetPriority+0x7c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d105      	bne.n	800602e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	4619      	mov	r1, r3
 8006026:	201e      	movs	r0, #30
 8006028:	f7ff fdd4 	bl	8005bd4 <__NVIC_SetPriority>
 800602c:	e00b      	b.n	8006046 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a0a      	ldr	r2, [pc, #40]	; (800605c <TIM_SetPriority+0x80>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d105      	bne.n	8006044 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	4619      	mov	r1, r3
 800603c:	2032      	movs	r0, #50	; 0x32
 800603e:	f7ff fdc9 	bl	8005bd4 <__NVIC_SetPriority>
 8006042:	e000      	b.n	8006046 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8006044:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006046:	b662      	cpsie	i
}
 8006048:	bf00      	nop
	}

	__enable_irq();

}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00

08006060 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006064:	bf00      	nop
}
 8006066:	bf00      	nop
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006074:	bf00      	nop
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006084:	bf00      	nop
}
 8006086:	bf00      	nop
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006094:	bf00      	nop
}
 8006096:	bf00      	nop
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80060a4:	bf00      	nop
}
 80060a6:	bf00      	nop
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80060b4:	bf00      	nop
}
 80060b6:	bf00      	nop
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80060c4:	bf00      	nop
}
 80060c6:	bf00      	nop
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80060d4:	bf00      	nop
}
 80060d6:	bf00      	nop
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80060e4:	bf00      	nop
}
 80060e6:	bf00      	nop
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80060f4:	bf00      	nop
}
 80060f6:	bf00      	nop
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006104:	bf00      	nop
}
 8006106:	bf00      	nop
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006114:	bf00      	nop
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006124:	bf00      	nop
}
 8006126:	bf00      	nop
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006134:	bf00      	nop
}
 8006136:	bf00      	nop
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006144:	bf00      	nop
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006154:	bf00      	nop
}
 8006156:	bf00      	nop
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006164:	bf00      	nop
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006174:	bf00      	nop
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8006184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8006192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80061a2:	f7fb fb65 	bl	8001870 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80061a6:	e066      	b.n	8006276 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80061a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80061b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061c0:	f023 0302 	bic.w	r3, r3, #2
 80061c4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80061c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80061d6:	f7ff ff5b 	bl	8006090 <Capture_TIM2_Ch1_Callback>
}
 80061da:	e04c      	b.n	8006276 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80061dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d012      	beq.n	8006210 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80061ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80061fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006208:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800620a:	f7ff ff49 	bl	80060a0 <Capture_TIM2_Ch2_Callback>
}
 800620e:	e032      	b.n	8006276 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8006210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d012      	beq.n	8006244 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800621e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006228:	f023 0308 	bic.w	r3, r3, #8
 800622c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800622e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800623c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800623e:	f7ff ff37 	bl	80060b0 <Capture_TIM2_Ch3_Callback>
}
 8006242:	e018      	b.n	8006276 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8006244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8006252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800625c:	f023 0310 	bic.w	r3, r3, #16
 8006260:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8006262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800626c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006270:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8006272:	f7ff ff25 	bl	80060c0 <Capture_TIM2_Ch4_Callback>
}
 8006276:	bf00      	nop
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8006280:	4b31      	ldr	r3, [pc, #196]	; (8006348 <TIM3_IRQHandler+0xcc>)
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800628c:	4b2e      	ldr	r3, [pc, #184]	; (8006348 <TIM3_IRQHandler+0xcc>)
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <TIM3_IRQHandler+0xcc>)
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8006298:	f7ff fee2 	bl	8006060 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800629c:	e052      	b.n	8006344 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800629e:	4b2a      	ldr	r3, [pc, #168]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80062aa:	4b27      	ldr	r3, [pc, #156]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	4a26      	ldr	r2, [pc, #152]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062b0:	f023 0302 	bic.w	r3, r3, #2
 80062b4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80062b6:	4b24      	ldr	r3, [pc, #144]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	4a23      	ldr	r2, [pc, #140]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062c0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80062c2:	f7ff ff05 	bl	80060d0 <Capture_TIM3_Ch1_Callback>
}
 80062c6:	e03d      	b.n	8006344 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80062c8:	4b1f      	ldr	r3, [pc, #124]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00e      	beq.n	80062f2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062da:	f023 0304 	bic.w	r3, r3, #4
 80062de:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80062e0:	4b19      	ldr	r3, [pc, #100]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ea:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80062ec:	f7ff fef8 	bl	80060e0 <Capture_TIM3_Ch2_Callback>
}
 80062f0:	e028      	b.n	8006344 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <TIM3_IRQHandler+0xcc>)
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80062fe:	4b12      	ldr	r3, [pc, #72]	; (8006348 <TIM3_IRQHandler+0xcc>)
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	4a11      	ldr	r2, [pc, #68]	; (8006348 <TIM3_IRQHandler+0xcc>)
 8006304:	f023 0308 	bic.w	r3, r3, #8
 8006308:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <TIM3_IRQHandler+0xcc>)
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	4a0e      	ldr	r2, [pc, #56]	; (8006348 <TIM3_IRQHandler+0xcc>)
 8006310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006314:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8006316:	f7ff feeb 	bl	80060f0 <Capture_TIM3_Ch3_Callback>
}
 800631a:	e013      	b.n	8006344 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <TIM3_IRQHandler+0xcc>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00d      	beq.n	8006344 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <TIM3_IRQHandler+0xcc>)
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	4a06      	ldr	r2, [pc, #24]	; (8006348 <TIM3_IRQHandler+0xcc>)
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8006334:	4b04      	ldr	r3, [pc, #16]	; (8006348 <TIM3_IRQHandler+0xcc>)
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	4a03      	ldr	r2, [pc, #12]	; (8006348 <TIM3_IRQHandler+0xcc>)
 800633a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800633e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8006340:	f7ff fede 	bl	8006100 <Capture_TIM3_Ch4_Callback>
}
 8006344:	bf00      	nop
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40000400 	.word	0x40000400

0800634c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8006350:	4b31      	ldr	r3, [pc, #196]	; (8006418 <TIM4_IRQHandler+0xcc>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800635c:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <TIM4_IRQHandler+0xcc>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4a2d      	ldr	r2, [pc, #180]	; (8006418 <TIM4_IRQHandler+0xcc>)
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8006368:	f7ff fe82 	bl	8006070 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800636c:	e052      	b.n	8006414 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <TIM4_IRQHandler+0xcc>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00e      	beq.n	8006398 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <TIM4_IRQHandler+0xcc>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	4a26      	ldr	r2, [pc, #152]	; (8006418 <TIM4_IRQHandler+0xcc>)
 8006380:	f023 0302 	bic.w	r3, r3, #2
 8006384:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <TIM4_IRQHandler+0xcc>)
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	4a23      	ldr	r2, [pc, #140]	; (8006418 <TIM4_IRQHandler+0xcc>)
 800638c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006390:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8006392:	f7ff febd 	bl	8006110 <Capture_TIM4_Ch1_Callback>
}
 8006396:	e03d      	b.n	8006414 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8006398:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <TIM4_IRQHandler+0xcc>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80063a4:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063aa:	f023 0304 	bic.w	r3, r3, #4
 80063ae:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	4a18      	ldr	r2, [pc, #96]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ba:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80063bc:	f7ff fec8 	bl	8006150 <Capture_TIM5_Ch2_Callback>
}
 80063c0:	e028      	b.n	8006414 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	4a11      	ldr	r2, [pc, #68]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063d4:	f023 0308 	bic.w	r3, r3, #8
 80063d8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	4a0e      	ldr	r2, [pc, #56]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80063e6:	f7ff fe9b 	bl	8006120 <Capture_TIM4_Ch3_Callback>
}
 80063ea:	e013      	b.n	8006414 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80063f8:	4b07      	ldr	r3, [pc, #28]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	4a06      	ldr	r2, [pc, #24]	; (8006418 <TIM4_IRQHandler+0xcc>)
 80063fe:	f023 0310 	bic.w	r3, r3, #16
 8006402:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <TIM4_IRQHandler+0xcc>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	4a03      	ldr	r2, [pc, #12]	; (8006418 <TIM4_IRQHandler+0xcc>)
 800640a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8006410:	f7ff fe8e 	bl	8006130 <Capture_TIM4_Ch4_Callback>
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40000800 	.word	0x40000800

0800641c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8006420:	4b31      	ldr	r3, [pc, #196]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800642c:	4b2e      	ldr	r3, [pc, #184]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	4a2d      	ldr	r2, [pc, #180]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8006438:	f7ff fe22 	bl	8006080 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800643c:	e052      	b.n	80064e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800643e:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800644a:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	4a26      	ldr	r2, [pc, #152]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006450:	f023 0302 	bic.w	r3, r3, #2
 8006454:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 800645c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006460:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8006462:	f7ff fe6d 	bl	8006140 <Capture_TIM5_Ch1_Callback>
}
 8006466:	e03d      	b.n	80064e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8006468:	4b1f      	ldr	r3, [pc, #124]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8006474:	4b1c      	ldr	r3, [pc, #112]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	4a1b      	ldr	r2, [pc, #108]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 800647a:	f023 0304 	bic.w	r3, r3, #4
 800647e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8006480:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800648a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800648c:	f7ff fe60 	bl	8006150 <Capture_TIM5_Ch2_Callback>
}
 8006490:	e028      	b.n	80064e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8006492:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00e      	beq.n	80064bc <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064a4:	f023 0308 	bic.w	r3, r3, #8
 80064a8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80064aa:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80064b6:	f7ff fe53 	bl	8006160 <Capture_TIM5_Ch3_Callback>
}
 80064ba:	e013      	b.n	80064e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00d      	beq.n	80064e4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80064c8:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	4a06      	ldr	r2, [pc, #24]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064ce:	f023 0310 	bic.w	r3, r3, #16
 80064d2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80064d4:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	4a03      	ldr	r2, [pc, #12]	; (80064e8 <TIM5_IRQHandler+0xcc>)
 80064da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064de:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80064e0:	f7ff fe46 	bl	8006170 <Capture_TIM5_Ch4_Callback>
}
 80064e4:	bf00      	nop
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40000c00 	.word	0x40000c00

080064ec <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <__NVIC_EnableIRQ>:
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db0b      	blt.n	800655e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	f003 021f 	and.w	r2, r3, #31
 800654c:	4907      	ldr	r1, [pc, #28]	; (800656c <__NVIC_EnableIRQ+0x38>)
 800654e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	2001      	movs	r0, #1
 8006556:	fa00 f202 	lsl.w	r2, r0, r2
 800655a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	e000e100 	.word	0xe000e100

08006570 <__NVIC_SetPriority>:
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	6039      	str	r1, [r7, #0]
 800657a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800657c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006580:	2b00      	cmp	r3, #0
 8006582:	db0a      	blt.n	800659a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	490c      	ldr	r1, [pc, #48]	; (80065bc <__NVIC_SetPriority+0x4c>)
 800658a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658e:	0112      	lsls	r2, r2, #4
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	440b      	add	r3, r1
 8006594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006598:	e00a      	b.n	80065b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	4908      	ldr	r1, [pc, #32]	; (80065c0 <__NVIC_SetPriority+0x50>)
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	3b04      	subs	r3, #4
 80065a8:	0112      	lsls	r2, r2, #4
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	440b      	add	r3, r1
 80065ae:	761a      	strb	r2, [r3, #24]
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	e000e100 	.word	0xe000e100
 80065c0:	e000ed00 	.word	0xe000ed00

080065c4 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f8bf 	bl	8007754 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80065d6:	4b96      	ldr	r3, [pc, #600]	; (8006830 <extInt_Config+0x26c>)
 80065d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065dc:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	791b      	ldrb	r3, [r3, #4]
 80065e4:	2b0f      	cmp	r3, #15
 80065e6:	f200 85cd 	bhi.w	8007184 <extInt_Config+0xbc0>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <extInt_Config+0x2c>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006631 	.word	0x08006631
 80065f4:	080066e7 	.word	0x080066e7
 80065f8:	0800679d 	.word	0x0800679d
 80065fc:	08006873 	.word	0x08006873
 8006600:	08006929 	.word	0x08006929
 8006604:	080069d7 	.word	0x080069d7
 8006608:	08006a9d 	.word	0x08006a9d
 800660c:	08006b45 	.word	0x08006b45
 8006610:	08006bed 	.word	0x08006bed
 8006614:	08006c95 	.word	0x08006c95
 8006618:	08006d5b 	.word	0x08006d5b
 800661c:	08006e03 	.word	0x08006e03
 8006620:	08006eab 	.word	0x08006eab
 8006624:	08006f71 	.word	0x08006f71
 8006628:	08007017 	.word	0x08007017
 800662c:	080070bf 	.word	0x080070bf
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8006630:	4b80      	ldr	r3, [pc, #512]	; (8006834 <extInt_Config+0x270>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	4a7f      	ldr	r2, [pc, #508]	; (8006834 <extInt_Config+0x270>)
 8006636:	f023 030f 	bic.w	r3, r3, #15
 800663a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a7d      	ldr	r2, [pc, #500]	; (8006838 <extInt_Config+0x274>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d105      	bne.n	8006654 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8006648:	4b7a      	ldr	r3, [pc, #488]	; (8006834 <extInt_Config+0x270>)
 800664a:	4a7a      	ldr	r2, [pc, #488]	; (8006834 <extInt_Config+0x270>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006650:	f000 bd9a 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a78      	ldr	r2, [pc, #480]	; (800683c <extInt_Config+0x278>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d107      	bne.n	8006670 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8006660:	4b74      	ldr	r3, [pc, #464]	; (8006834 <extInt_Config+0x270>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a73      	ldr	r2, [pc, #460]	; (8006834 <extInt_Config+0x270>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	6093      	str	r3, [r2, #8]
					break;
 800666c:	f000 bd8c 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a72      	ldr	r2, [pc, #456]	; (8006840 <extInt_Config+0x27c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d107      	bne.n	800668c <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800667c:	4b6d      	ldr	r3, [pc, #436]	; (8006834 <extInt_Config+0x270>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	4a6c      	ldr	r2, [pc, #432]	; (8006834 <extInt_Config+0x270>)
 8006682:	f043 0302 	orr.w	r3, r3, #2
 8006686:	6093      	str	r3, [r2, #8]
					break;
 8006688:	f000 bd7e 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a6c      	ldr	r2, [pc, #432]	; (8006844 <extInt_Config+0x280>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d107      	bne.n	80066a8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8006698:	4b66      	ldr	r3, [pc, #408]	; (8006834 <extInt_Config+0x270>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4a65      	ldr	r2, [pc, #404]	; (8006834 <extInt_Config+0x270>)
 800669e:	f043 0303 	orr.w	r3, r3, #3
 80066a2:	6093      	str	r3, [r2, #8]
					break;
 80066a4:	f000 bd70 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a66      	ldr	r2, [pc, #408]	; (8006848 <extInt_Config+0x284>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d107      	bne.n	80066c4 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80066b4:	4b5f      	ldr	r3, [pc, #380]	; (8006834 <extInt_Config+0x270>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a5e      	ldr	r2, [pc, #376]	; (8006834 <extInt_Config+0x270>)
 80066ba:	f043 0304 	orr.w	r3, r3, #4
 80066be:	6093      	str	r3, [r2, #8]
					break;
 80066c0:	f000 bd62 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a60      	ldr	r2, [pc, #384]	; (800684c <extInt_Config+0x288>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d107      	bne.n	80066e0 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80066d0:	4b58      	ldr	r3, [pc, #352]	; (8006834 <extInt_Config+0x270>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4a57      	ldr	r2, [pc, #348]	; (8006834 <extInt_Config+0x270>)
 80066d6:	f043 0307 	orr.w	r3, r3, #7
 80066da:	6093      	str	r3, [r2, #8]
					break;
 80066dc:	f000 bd54 	b.w	8007188 <extInt_Config+0xbc4>
						__NOP();
 80066e0:	bf00      	nop
					break;
 80066e2:	f000 bd51 	b.w	8007188 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80066e6:	4b53      	ldr	r3, [pc, #332]	; (8006834 <extInt_Config+0x270>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	4a52      	ldr	r2, [pc, #328]	; (8006834 <extInt_Config+0x270>)
 80066ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066f0:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a4f      	ldr	r2, [pc, #316]	; (8006838 <extInt_Config+0x274>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d105      	bne.n	800670a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80066fe:	4b4d      	ldr	r3, [pc, #308]	; (8006834 <extInt_Config+0x270>)
 8006700:	4a4c      	ldr	r2, [pc, #304]	; (8006834 <extInt_Config+0x270>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006706:	f000 bd3f 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a4a      	ldr	r2, [pc, #296]	; (800683c <extInt_Config+0x278>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d107      	bne.n	8006726 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8006716:	4b47      	ldr	r3, [pc, #284]	; (8006834 <extInt_Config+0x270>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	4a46      	ldr	r2, [pc, #280]	; (8006834 <extInt_Config+0x270>)
 800671c:	f043 0310 	orr.w	r3, r3, #16
 8006720:	6093      	str	r3, [r2, #8]
					break;
 8006722:	f000 bd31 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a44      	ldr	r2, [pc, #272]	; (8006840 <extInt_Config+0x27c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d107      	bne.n	8006742 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8006732:	4b40      	ldr	r3, [pc, #256]	; (8006834 <extInt_Config+0x270>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	4a3f      	ldr	r2, [pc, #252]	; (8006834 <extInt_Config+0x270>)
 8006738:	f043 0320 	orr.w	r3, r3, #32
 800673c:	6093      	str	r3, [r2, #8]
					break;
 800673e:	f000 bd23 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a3e      	ldr	r2, [pc, #248]	; (8006844 <extInt_Config+0x280>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d107      	bne.n	800675e <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800674e:	4b39      	ldr	r3, [pc, #228]	; (8006834 <extInt_Config+0x270>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4a38      	ldr	r2, [pc, #224]	; (8006834 <extInt_Config+0x270>)
 8006754:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006758:	6093      	str	r3, [r2, #8]
					break;
 800675a:	f000 bd15 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a38      	ldr	r2, [pc, #224]	; (8006848 <extInt_Config+0x284>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d107      	bne.n	800677a <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800676a:	4b32      	ldr	r3, [pc, #200]	; (8006834 <extInt_Config+0x270>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4a31      	ldr	r2, [pc, #196]	; (8006834 <extInt_Config+0x270>)
 8006770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006774:	6093      	str	r3, [r2, #8]
					break;
 8006776:	f000 bd07 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a32      	ldr	r2, [pc, #200]	; (800684c <extInt_Config+0x288>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d107      	bne.n	8006796 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8006786:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <extInt_Config+0x270>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4a2a      	ldr	r2, [pc, #168]	; (8006834 <extInt_Config+0x270>)
 800678c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006790:	6093      	str	r3, [r2, #8]
					break;
 8006792:	f000 bcf9 	b.w	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006796:	bf00      	nop
					break;
 8006798:	f000 bcf6 	b.w	8007188 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <extInt_Config+0x270>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	4a24      	ldr	r2, [pc, #144]	; (8006834 <extInt_Config+0x270>)
 80067a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067a6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a22      	ldr	r2, [pc, #136]	; (8006838 <extInt_Config+0x274>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d105      	bne.n	80067c0 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80067b4:	4b1f      	ldr	r3, [pc, #124]	; (8006834 <extInt_Config+0x270>)
 80067b6:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <extInt_Config+0x270>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80067bc:	f000 bce4 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1d      	ldr	r2, [pc, #116]	; (800683c <extInt_Config+0x278>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d107      	bne.n	80067dc <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <extInt_Config+0x270>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <extInt_Config+0x270>)
 80067d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d6:	6093      	str	r3, [r2, #8]
					break;
 80067d8:	f000 bcd6 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a17      	ldr	r2, [pc, #92]	; (8006840 <extInt_Config+0x27c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d107      	bne.n	80067f8 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80067e8:	4b12      	ldr	r3, [pc, #72]	; (8006834 <extInt_Config+0x270>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4a11      	ldr	r2, [pc, #68]	; (8006834 <extInt_Config+0x270>)
 80067ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f2:	6093      	str	r3, [r2, #8]
					break;
 80067f4:	f000 bcc8 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a11      	ldr	r2, [pc, #68]	; (8006844 <extInt_Config+0x280>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d107      	bne.n	8006814 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <extInt_Config+0x270>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a0a      	ldr	r2, [pc, #40]	; (8006834 <extInt_Config+0x270>)
 800680a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800680e:	6093      	str	r3, [r2, #8]
					break;
 8006810:	f000 bcba 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a0b      	ldr	r2, [pc, #44]	; (8006848 <extInt_Config+0x284>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d117      	bne.n	8006850 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <extInt_Config+0x270>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4a03      	ldr	r2, [pc, #12]	; (8006834 <extInt_Config+0x270>)
 8006826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800682a:	6093      	str	r3, [r2, #8]
					break;
 800682c:	f000 bcac 	b.w	8007188 <extInt_Config+0xbc4>
 8006830:	40023800 	.word	0x40023800
 8006834:	40013800 	.word	0x40013800
 8006838:	40020000 	.word	0x40020000
 800683c:	40020400 	.word	0x40020400
 8006840:	40020800 	.word	0x40020800
 8006844:	40020c00 	.word	0x40020c00
 8006848:	40021000 	.word	0x40021000
 800684c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a8a      	ldr	r2, [pc, #552]	; (8006a80 <extInt_Config+0x4bc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d107      	bne.n	800686c <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 800685c:	4b89      	ldr	r3, [pc, #548]	; (8006a84 <extInt_Config+0x4c0>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4a88      	ldr	r2, [pc, #544]	; (8006a84 <extInt_Config+0x4c0>)
 8006862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006866:	6093      	str	r3, [r2, #8]
					break;
 8006868:	f000 bc8e 	b.w	8007188 <extInt_Config+0xbc4>
						__NOP();
 800686c:	bf00      	nop
					break;
 800686e:	f000 bc8b 	b.w	8007188 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8006872:	4b84      	ldr	r3, [pc, #528]	; (8006a84 <extInt_Config+0x4c0>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4a83      	ldr	r2, [pc, #524]	; (8006a84 <extInt_Config+0x4c0>)
 8006878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800687c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a80      	ldr	r2, [pc, #512]	; (8006a88 <extInt_Config+0x4c4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d105      	bne.n	8006896 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800688a:	4b7e      	ldr	r3, [pc, #504]	; (8006a84 <extInt_Config+0x4c0>)
 800688c:	4a7d      	ldr	r2, [pc, #500]	; (8006a84 <extInt_Config+0x4c0>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006892:	f000 bc79 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7b      	ldr	r2, [pc, #492]	; (8006a8c <extInt_Config+0x4c8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d107      	bne.n	80068b2 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80068a2:	4b78      	ldr	r3, [pc, #480]	; (8006a84 <extInt_Config+0x4c0>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	4a77      	ldr	r2, [pc, #476]	; (8006a84 <extInt_Config+0x4c0>)
 80068a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068ac:	6093      	str	r3, [r2, #8]
					break;
 80068ae:	f000 bc6b 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a75      	ldr	r2, [pc, #468]	; (8006a90 <extInt_Config+0x4cc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d107      	bne.n	80068ce <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80068be:	4b71      	ldr	r3, [pc, #452]	; (8006a84 <extInt_Config+0x4c0>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	4a70      	ldr	r2, [pc, #448]	; (8006a84 <extInt_Config+0x4c0>)
 80068c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068c8:	6093      	str	r3, [r2, #8]
					break;
 80068ca:	f000 bc5d 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a6f      	ldr	r2, [pc, #444]	; (8006a94 <extInt_Config+0x4d0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d107      	bne.n	80068ea <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80068da:	4b6a      	ldr	r3, [pc, #424]	; (8006a84 <extInt_Config+0x4c0>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	4a69      	ldr	r2, [pc, #420]	; (8006a84 <extInt_Config+0x4c0>)
 80068e0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80068e4:	6093      	str	r3, [r2, #8]
					break;
 80068e6:	f000 bc4f 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a69      	ldr	r2, [pc, #420]	; (8006a98 <extInt_Config+0x4d4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d107      	bne.n	8006906 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80068f6:	4b63      	ldr	r3, [pc, #396]	; (8006a84 <extInt_Config+0x4c0>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	4a62      	ldr	r2, [pc, #392]	; (8006a84 <extInt_Config+0x4c0>)
 80068fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006900:	6093      	str	r3, [r2, #8]
					break;
 8006902:	f000 bc41 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a5c      	ldr	r2, [pc, #368]	; (8006a80 <extInt_Config+0x4bc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d107      	bne.n	8006922 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8006912:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <extInt_Config+0x4c0>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4a5b      	ldr	r2, [pc, #364]	; (8006a84 <extInt_Config+0x4c0>)
 8006918:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800691c:	6093      	str	r3, [r2, #8]
					break;
 800691e:	f000 bc33 	b.w	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006922:	bf00      	nop
					break;
 8006924:	f000 bc30 	b.w	8007188 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8006928:	4b56      	ldr	r3, [pc, #344]	; (8006a84 <extInt_Config+0x4c0>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4a55      	ldr	r2, [pc, #340]	; (8006a84 <extInt_Config+0x4c0>)
 800692e:	f023 030f 	bic.w	r3, r3, #15
 8006932:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a53      	ldr	r2, [pc, #332]	; (8006a88 <extInt_Config+0x4c4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d105      	bne.n	800694c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8006940:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <extInt_Config+0x4c0>)
 8006942:	4a50      	ldr	r2, [pc, #320]	; (8006a84 <extInt_Config+0x4c0>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006948:	f000 bc1e 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a4e      	ldr	r2, [pc, #312]	; (8006a8c <extInt_Config+0x4c8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d107      	bne.n	8006968 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8006958:	4b4a      	ldr	r3, [pc, #296]	; (8006a84 <extInt_Config+0x4c0>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4a49      	ldr	r2, [pc, #292]	; (8006a84 <extInt_Config+0x4c0>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	60d3      	str	r3, [r2, #12]
					break;
 8006964:	f000 bc10 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a48      	ldr	r2, [pc, #288]	; (8006a90 <extInt_Config+0x4cc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d107      	bne.n	8006984 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <extInt_Config+0x4c0>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a42      	ldr	r2, [pc, #264]	; (8006a84 <extInt_Config+0x4c0>)
 800697a:	f043 0302 	orr.w	r3, r3, #2
 800697e:	60d3      	str	r3, [r2, #12]
					break;
 8006980:	f000 bc02 	b.w	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a42      	ldr	r2, [pc, #264]	; (8006a94 <extInt_Config+0x4d0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d106      	bne.n	800699e <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8006990:	4b3c      	ldr	r3, [pc, #240]	; (8006a84 <extInt_Config+0x4c0>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a3b      	ldr	r2, [pc, #236]	; (8006a84 <extInt_Config+0x4c0>)
 8006996:	f043 0303 	orr.w	r3, r3, #3
 800699a:	60d3      	str	r3, [r2, #12]
					break;
 800699c:	e3f4      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a3c      	ldr	r2, [pc, #240]	; (8006a98 <extInt_Config+0x4d4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d106      	bne.n	80069b8 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <extInt_Config+0x4c0>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4a35      	ldr	r2, [pc, #212]	; (8006a84 <extInt_Config+0x4c0>)
 80069b0:	f043 0304 	orr.w	r3, r3, #4
 80069b4:	60d3      	str	r3, [r2, #12]
					break;
 80069b6:	e3e7      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a30      	ldr	r2, [pc, #192]	; (8006a80 <extInt_Config+0x4bc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d106      	bne.n	80069d2 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80069c4:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <extInt_Config+0x4c0>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a2e      	ldr	r2, [pc, #184]	; (8006a84 <extInt_Config+0x4c0>)
 80069ca:	f043 0307 	orr.w	r3, r3, #7
 80069ce:	60d3      	str	r3, [r2, #12]
					break;
 80069d0:	e3da      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 80069d2:	bf00      	nop
					break;
 80069d4:	e3d8      	b.n	8007188 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 80069d6:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <extInt_Config+0x4c0>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <extInt_Config+0x4c0>)
 80069dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e0:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a27      	ldr	r2, [pc, #156]	; (8006a88 <extInt_Config+0x4c4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d104      	bne.n	80069f8 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80069ee:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <extInt_Config+0x4c0>)
 80069f0:	4a24      	ldr	r2, [pc, #144]	; (8006a84 <extInt_Config+0x4c0>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80069f6:	e3c7      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a23      	ldr	r2, [pc, #140]	; (8006a8c <extInt_Config+0x4c8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d106      	bne.n	8006a12 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006a04:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <extInt_Config+0x4c0>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <extInt_Config+0x4c0>)
 8006a0a:	f043 0310 	orr.w	r3, r3, #16
 8006a0e:	60d3      	str	r3, [r2, #12]
					break;
 8006a10:	e3ba      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <extInt_Config+0x4cc>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d106      	bne.n	8006a2c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8006a1e:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <extInt_Config+0x4c0>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <extInt_Config+0x4c0>)
 8006a24:	f043 0320 	orr.w	r3, r3, #32
 8006a28:	60d3      	str	r3, [r2, #12]
					break;
 8006a2a:	e3ad      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <extInt_Config+0x4d0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d106      	bne.n	8006a46 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8006a38:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <extInt_Config+0x4c0>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <extInt_Config+0x4c0>)
 8006a3e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006a42:	60d3      	str	r3, [r2, #12]
					break;
 8006a44:	e3a0      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a12      	ldr	r2, [pc, #72]	; (8006a98 <extInt_Config+0x4d4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d106      	bne.n	8006a60 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <extInt_Config+0x4c0>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <extInt_Config+0x4c0>)
 8006a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5c:	60d3      	str	r3, [r2, #12]
					break;
 8006a5e:	e393      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <extInt_Config+0x4bc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d106      	bne.n	8006a7a <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <extInt_Config+0x4c0>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <extInt_Config+0x4c0>)
 8006a72:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006a76:	60d3      	str	r3, [r2, #12]
					break;
 8006a78:	e386      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006a7a:	bf00      	nop
					break;
 8006a7c:	e384      	b.n	8007188 <extInt_Config+0xbc4>
 8006a7e:	bf00      	nop
 8006a80:	40021c00 	.word	0x40021c00
 8006a84:	40013800 	.word	0x40013800
 8006a88:	40020000 	.word	0x40020000
 8006a8c:	40020400 	.word	0x40020400
 8006a90:	40020800 	.word	0x40020800
 8006a94:	40020c00 	.word	0x40020c00
 8006a98:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8006a9c:	4b86      	ldr	r3, [pc, #536]	; (8006cb8 <extInt_Config+0x6f4>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4a85      	ldr	r2, [pc, #532]	; (8006cb8 <extInt_Config+0x6f4>)
 8006aa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006aa6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a83      	ldr	r2, [pc, #524]	; (8006cbc <extInt_Config+0x6f8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d104      	bne.n	8006abe <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8006ab4:	4b80      	ldr	r3, [pc, #512]	; (8006cb8 <extInt_Config+0x6f4>)
 8006ab6:	4a80      	ldr	r2, [pc, #512]	; (8006cb8 <extInt_Config+0x6f4>)
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006abc:	e364      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a7e      	ldr	r2, [pc, #504]	; (8006cc0 <extInt_Config+0x6fc>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d106      	bne.n	8006ad8 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8006aca:	4b7b      	ldr	r3, [pc, #492]	; (8006cb8 <extInt_Config+0x6f4>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4a7a      	ldr	r2, [pc, #488]	; (8006cb8 <extInt_Config+0x6f4>)
 8006ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad4:	60d3      	str	r3, [r2, #12]
					break;
 8006ad6:	e357      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a79      	ldr	r2, [pc, #484]	; (8006cc4 <extInt_Config+0x700>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d106      	bne.n	8006af2 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8006ae4:	4b74      	ldr	r3, [pc, #464]	; (8006cb8 <extInt_Config+0x6f4>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a73      	ldr	r2, [pc, #460]	; (8006cb8 <extInt_Config+0x6f4>)
 8006aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aee:	60d3      	str	r3, [r2, #12]
					break;
 8006af0:	e34a      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a73      	ldr	r2, [pc, #460]	; (8006cc8 <extInt_Config+0x704>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d106      	bne.n	8006b0c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8006afe:	4b6e      	ldr	r3, [pc, #440]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4a6d      	ldr	r2, [pc, #436]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b08:	60d3      	str	r3, [r2, #12]
					break;
 8006b0a:	e33d      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6e      	ldr	r2, [pc, #440]	; (8006ccc <extInt_Config+0x708>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d106      	bne.n	8006b26 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8006b18:	4b67      	ldr	r3, [pc, #412]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4a66      	ldr	r2, [pc, #408]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b22:	60d3      	str	r3, [r2, #12]
					break;
 8006b24:	e330      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a68      	ldr	r2, [pc, #416]	; (8006cd0 <extInt_Config+0x70c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d106      	bne.n	8006b40 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8006b32:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	4a60      	ldr	r2, [pc, #384]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b38:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b3c:	60d3      	str	r3, [r2, #12]
					break;
 8006b3e:	e323      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006b40:	bf00      	nop
					break;
 8006b42:	e321      	b.n	8007188 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8006b44:	4b5c      	ldr	r3, [pc, #368]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a5b      	ldr	r2, [pc, #364]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b4e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a59      	ldr	r2, [pc, #356]	; (8006cbc <extInt_Config+0x6f8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d104      	bne.n	8006b66 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8006b5c:	4b56      	ldr	r3, [pc, #344]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b5e:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006b64:	e310      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a54      	ldr	r2, [pc, #336]	; (8006cc0 <extInt_Config+0x6fc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d106      	bne.n	8006b80 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8006b72:	4b51      	ldr	r3, [pc, #324]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	4a50      	ldr	r2, [pc, #320]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b7c:	60d3      	str	r3, [r2, #12]
					break;
 8006b7e:	e303      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a4f      	ldr	r2, [pc, #316]	; (8006cc4 <extInt_Config+0x700>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d106      	bne.n	8006b9a <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8006b8c:	4b4a      	ldr	r3, [pc, #296]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4a49      	ldr	r2, [pc, #292]	; (8006cb8 <extInt_Config+0x6f4>)
 8006b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b96:	60d3      	str	r3, [r2, #12]
					break;
 8006b98:	e2f6      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a49      	ldr	r2, [pc, #292]	; (8006cc8 <extInt_Config+0x704>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d106      	bne.n	8006bb4 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8006ba6:	4b44      	ldr	r3, [pc, #272]	; (8006cb8 <extInt_Config+0x6f4>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	4a43      	ldr	r2, [pc, #268]	; (8006cb8 <extInt_Config+0x6f4>)
 8006bac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006bb0:	60d3      	str	r3, [r2, #12]
					break;
 8006bb2:	e2e9      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a44      	ldr	r2, [pc, #272]	; (8006ccc <extInt_Config+0x708>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d106      	bne.n	8006bce <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8006bc0:	4b3d      	ldr	r3, [pc, #244]	; (8006cb8 <extInt_Config+0x6f4>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	4a3c      	ldr	r2, [pc, #240]	; (8006cb8 <extInt_Config+0x6f4>)
 8006bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bca:	60d3      	str	r3, [r2, #12]
					break;
 8006bcc:	e2dc      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a3e      	ldr	r2, [pc, #248]	; (8006cd0 <extInt_Config+0x70c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d106      	bne.n	8006be8 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8006bda:	4b37      	ldr	r3, [pc, #220]	; (8006cb8 <extInt_Config+0x6f4>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	4a36      	ldr	r2, [pc, #216]	; (8006cb8 <extInt_Config+0x6f4>)
 8006be0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006be4:	60d3      	str	r3, [r2, #12]
					break;
 8006be6:	e2cf      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006be8:	bf00      	nop
					break;
 8006bea:	e2cd      	b.n	8007188 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8006bec:	4b32      	ldr	r3, [pc, #200]	; (8006cb8 <extInt_Config+0x6f4>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	4a31      	ldr	r2, [pc, #196]	; (8006cb8 <extInt_Config+0x6f4>)
 8006bf2:	f023 030f 	bic.w	r3, r3, #15
 8006bf6:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2f      	ldr	r2, [pc, #188]	; (8006cbc <extInt_Config+0x6f8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d104      	bne.n	8006c0e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8006c04:	4b2c      	ldr	r3, [pc, #176]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c06:	4a2c      	ldr	r2, [pc, #176]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006c0c:	e2bc      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <extInt_Config+0x6fc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d106      	bne.n	8006c28 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8006c1a:	4b27      	ldr	r3, [pc, #156]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6113      	str	r3, [r2, #16]
					break;
 8006c26:	e2af      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a25      	ldr	r2, [pc, #148]	; (8006cc4 <extInt_Config+0x700>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d106      	bne.n	8006c42 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8006c34:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4a1f      	ldr	r2, [pc, #124]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c3a:	f043 0302 	orr.w	r3, r3, #2
 8006c3e:	6113      	str	r3, [r2, #16]
					break;
 8006c40:	e2a2      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1f      	ldr	r2, [pc, #124]	; (8006cc8 <extInt_Config+0x704>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d106      	bne.n	8006c5c <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8006c4e:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c54:	f043 0303 	orr.w	r3, r3, #3
 8006c58:	6113      	str	r3, [r2, #16]
					break;
 8006c5a:	e295      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1a      	ldr	r2, [pc, #104]	; (8006ccc <extInt_Config+0x708>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d106      	bne.n	8006c76 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	4a12      	ldr	r2, [pc, #72]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c6e:	f043 0304 	orr.w	r3, r3, #4
 8006c72:	6113      	str	r3, [r2, #16]
					break;
 8006c74:	e288      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <extInt_Config+0x70c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d106      	bne.n	8006c90 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	4a0c      	ldr	r2, [pc, #48]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c88:	f043 0307 	orr.w	r3, r3, #7
 8006c8c:	6113      	str	r3, [r2, #16]
					break;
 8006c8e:	e27b      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006c90:	bf00      	nop
					break;
 8006c92:	e279      	b.n	8007188 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8006c94:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	4a07      	ldr	r2, [pc, #28]	; (8006cb8 <extInt_Config+0x6f4>)
 8006c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c9e:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a05      	ldr	r2, [pc, #20]	; (8006cbc <extInt_Config+0x6f8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d113      	bne.n	8006cd4 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <extInt_Config+0x6f4>)
 8006cae:	4a02      	ldr	r2, [pc, #8]	; (8006cb8 <extInt_Config+0x6f4>)
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006cb4:	e268      	b.n	8007188 <extInt_Config+0xbc4>
 8006cb6:	bf00      	nop
 8006cb8:	40013800 	.word	0x40013800
 8006cbc:	40020000 	.word	0x40020000
 8006cc0:	40020400 	.word	0x40020400
 8006cc4:	40020800 	.word	0x40020800
 8006cc8:	40020c00 	.word	0x40020c00
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a83      	ldr	r2, [pc, #524]	; (8006ee8 <extInt_Config+0x924>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d106      	bne.n	8006cee <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8006ce0:	4b82      	ldr	r3, [pc, #520]	; (8006eec <extInt_Config+0x928>)
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	4a81      	ldr	r2, [pc, #516]	; (8006eec <extInt_Config+0x928>)
 8006ce6:	f043 0310 	orr.w	r3, r3, #16
 8006cea:	6113      	str	r3, [r2, #16]
					break;
 8006cec:	e24c      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a7e      	ldr	r2, [pc, #504]	; (8006ef0 <extInt_Config+0x92c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d106      	bne.n	8006d08 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8006cfa:	4b7c      	ldr	r3, [pc, #496]	; (8006eec <extInt_Config+0x928>)
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	4a7b      	ldr	r2, [pc, #492]	; (8006eec <extInt_Config+0x928>)
 8006d00:	f043 0320 	orr.w	r3, r3, #32
 8006d04:	6113      	str	r3, [r2, #16]
					break;
 8006d06:	e23f      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a79      	ldr	r2, [pc, #484]	; (8006ef4 <extInt_Config+0x930>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d106      	bne.n	8006d22 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006d14:	4b75      	ldr	r3, [pc, #468]	; (8006eec <extInt_Config+0x928>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	4a74      	ldr	r2, [pc, #464]	; (8006eec <extInt_Config+0x928>)
 8006d1a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006d1e:	6113      	str	r3, [r2, #16]
					break;
 8006d20:	e232      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a73      	ldr	r2, [pc, #460]	; (8006ef8 <extInt_Config+0x934>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d106      	bne.n	8006d3c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8006d2e:	4b6f      	ldr	r3, [pc, #444]	; (8006eec <extInt_Config+0x928>)
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	4a6e      	ldr	r2, [pc, #440]	; (8006eec <extInt_Config+0x928>)
 8006d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d38:	6113      	str	r3, [r2, #16]
					break;
 8006d3a:	e225      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a6e      	ldr	r2, [pc, #440]	; (8006efc <extInt_Config+0x938>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d106      	bne.n	8006d56 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8006d48:	4b68      	ldr	r3, [pc, #416]	; (8006eec <extInt_Config+0x928>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	4a67      	ldr	r2, [pc, #412]	; (8006eec <extInt_Config+0x928>)
 8006d4e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006d52:	6113      	str	r3, [r2, #16]
					break;
 8006d54:	e218      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006d56:	bf00      	nop
					break;
 8006d58:	e216      	b.n	8007188 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8006d5a:	4b64      	ldr	r3, [pc, #400]	; (8006eec <extInt_Config+0x928>)
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	4a63      	ldr	r2, [pc, #396]	; (8006eec <extInt_Config+0x928>)
 8006d60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d64:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a64      	ldr	r2, [pc, #400]	; (8006f00 <extInt_Config+0x93c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d104      	bne.n	8006d7c <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8006d72:	4b5e      	ldr	r3, [pc, #376]	; (8006eec <extInt_Config+0x928>)
 8006d74:	4a5d      	ldr	r2, [pc, #372]	; (8006eec <extInt_Config+0x928>)
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006d7a:	e205      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a59      	ldr	r2, [pc, #356]	; (8006ee8 <extInt_Config+0x924>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d106      	bne.n	8006d96 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8006d88:	4b58      	ldr	r3, [pc, #352]	; (8006eec <extInt_Config+0x928>)
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	4a57      	ldr	r2, [pc, #348]	; (8006eec <extInt_Config+0x928>)
 8006d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d92:	6113      	str	r3, [r2, #16]
					break;
 8006d94:	e1f8      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a54      	ldr	r2, [pc, #336]	; (8006ef0 <extInt_Config+0x92c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d106      	bne.n	8006db0 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8006da2:	4b52      	ldr	r3, [pc, #328]	; (8006eec <extInt_Config+0x928>)
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	4a51      	ldr	r2, [pc, #324]	; (8006eec <extInt_Config+0x928>)
 8006da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dac:	6113      	str	r3, [r2, #16]
					break;
 8006dae:	e1eb      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a4f      	ldr	r2, [pc, #316]	; (8006ef4 <extInt_Config+0x930>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d106      	bne.n	8006dca <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006dbc:	4b4b      	ldr	r3, [pc, #300]	; (8006eec <extInt_Config+0x928>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	4a4a      	ldr	r2, [pc, #296]	; (8006eec <extInt_Config+0x928>)
 8006dc2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006dc6:	6113      	str	r3, [r2, #16]
					break;
 8006dc8:	e1de      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a49      	ldr	r2, [pc, #292]	; (8006ef8 <extInt_Config+0x934>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d106      	bne.n	8006de4 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006dd6:	4b45      	ldr	r3, [pc, #276]	; (8006eec <extInt_Config+0x928>)
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	4a44      	ldr	r2, [pc, #272]	; (8006eec <extInt_Config+0x928>)
 8006ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006de0:	6113      	str	r3, [r2, #16]
					break;
 8006de2:	e1d1      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a44      	ldr	r2, [pc, #272]	; (8006efc <extInt_Config+0x938>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d106      	bne.n	8006dfe <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8006df0:	4b3e      	ldr	r3, [pc, #248]	; (8006eec <extInt_Config+0x928>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	4a3d      	ldr	r2, [pc, #244]	; (8006eec <extInt_Config+0x928>)
 8006df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dfa:	6113      	str	r3, [r2, #16]
					break;
 8006dfc:	e1c4      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006dfe:	bf00      	nop
					break;
 8006e00:	e1c2      	b.n	8007188 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8006e02:	4b3a      	ldr	r3, [pc, #232]	; (8006eec <extInt_Config+0x928>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	4a39      	ldr	r2, [pc, #228]	; (8006eec <extInt_Config+0x928>)
 8006e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a3a      	ldr	r2, [pc, #232]	; (8006f00 <extInt_Config+0x93c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d104      	bne.n	8006e24 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8006e1a:	4b34      	ldr	r3, [pc, #208]	; (8006eec <extInt_Config+0x928>)
 8006e1c:	4a33      	ldr	r2, [pc, #204]	; (8006eec <extInt_Config+0x928>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006e22:	e1b1      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a2f      	ldr	r2, [pc, #188]	; (8006ee8 <extInt_Config+0x924>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d106      	bne.n	8006e3e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8006e30:	4b2e      	ldr	r3, [pc, #184]	; (8006eec <extInt_Config+0x928>)
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	4a2d      	ldr	r2, [pc, #180]	; (8006eec <extInt_Config+0x928>)
 8006e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e3a:	6113      	str	r3, [r2, #16]
					break;
 8006e3c:	e1a4      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2a      	ldr	r2, [pc, #168]	; (8006ef0 <extInt_Config+0x92c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d106      	bne.n	8006e58 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8006e4a:	4b28      	ldr	r3, [pc, #160]	; (8006eec <extInt_Config+0x928>)
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	4a27      	ldr	r2, [pc, #156]	; (8006eec <extInt_Config+0x928>)
 8006e50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e54:	6113      	str	r3, [r2, #16]
					break;
 8006e56:	e197      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a25      	ldr	r2, [pc, #148]	; (8006ef4 <extInt_Config+0x930>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d106      	bne.n	8006e72 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8006e64:	4b21      	ldr	r3, [pc, #132]	; (8006eec <extInt_Config+0x928>)
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	4a20      	ldr	r2, [pc, #128]	; (8006eec <extInt_Config+0x928>)
 8006e6a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006e6e:	6113      	str	r3, [r2, #16]
					break;
 8006e70:	e18a      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1f      	ldr	r2, [pc, #124]	; (8006ef8 <extInt_Config+0x934>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d106      	bne.n	8006e8c <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <extInt_Config+0x928>)
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	4a1a      	ldr	r2, [pc, #104]	; (8006eec <extInt_Config+0x928>)
 8006e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e88:	6113      	str	r3, [r2, #16]
					break;
 8006e8a:	e17d      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1a      	ldr	r2, [pc, #104]	; (8006efc <extInt_Config+0x938>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d106      	bne.n	8006ea6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <extInt_Config+0x928>)
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	4a13      	ldr	r2, [pc, #76]	; (8006eec <extInt_Config+0x928>)
 8006e9e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006ea2:	6113      	str	r3, [r2, #16]
					break;
 8006ea4:	e170      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006ea6:	bf00      	nop
					break;
 8006ea8:	e16e      	b.n	8007188 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <extInt_Config+0x928>)
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	4a0f      	ldr	r2, [pc, #60]	; (8006eec <extInt_Config+0x928>)
 8006eb0:	f023 030f 	bic.w	r3, r3, #15
 8006eb4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a10      	ldr	r2, [pc, #64]	; (8006f00 <extInt_Config+0x93c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d104      	bne.n	8006ecc <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <extInt_Config+0x928>)
 8006ec4:	4a09      	ldr	r2, [pc, #36]	; (8006eec <extInt_Config+0x928>)
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8006eca:	e15d      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a05      	ldr	r2, [pc, #20]	; (8006ee8 <extInt_Config+0x924>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d115      	bne.n	8006f04 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006ed8:	4b04      	ldr	r3, [pc, #16]	; (8006eec <extInt_Config+0x928>)
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	4a03      	ldr	r2, [pc, #12]	; (8006eec <extInt_Config+0x928>)
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	6153      	str	r3, [r2, #20]
					break;
 8006ee4:	e150      	b.n	8007188 <extInt_Config+0xbc4>
 8006ee6:	bf00      	nop
 8006ee8:	40020400 	.word	0x40020400
 8006eec:	40013800 	.word	0x40013800
 8006ef0:	40020800 	.word	0x40020800
 8006ef4:	40020c00 	.word	0x40020c00
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	40021c00 	.word	0x40021c00
 8006f00:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a89      	ldr	r2, [pc, #548]	; (8007130 <extInt_Config+0xb6c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d106      	bne.n	8006f1e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8006f10:	4b88      	ldr	r3, [pc, #544]	; (8007134 <extInt_Config+0xb70>)
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	4a87      	ldr	r2, [pc, #540]	; (8007134 <extInt_Config+0xb70>)
 8006f16:	f043 0302 	orr.w	r3, r3, #2
 8006f1a:	6153      	str	r3, [r2, #20]
					break;
 8006f1c:	e134      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a84      	ldr	r2, [pc, #528]	; (8007138 <extInt_Config+0xb74>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d106      	bne.n	8006f38 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8006f2a:	4b82      	ldr	r3, [pc, #520]	; (8007134 <extInt_Config+0xb70>)
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	4a81      	ldr	r2, [pc, #516]	; (8007134 <extInt_Config+0xb70>)
 8006f30:	f043 0303 	orr.w	r3, r3, #3
 8006f34:	6153      	str	r3, [r2, #20]
					break;
 8006f36:	e127      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a7f      	ldr	r2, [pc, #508]	; (800713c <extInt_Config+0xb78>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d106      	bne.n	8006f52 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8006f44:	4b7b      	ldr	r3, [pc, #492]	; (8007134 <extInt_Config+0xb70>)
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	4a7a      	ldr	r2, [pc, #488]	; (8007134 <extInt_Config+0xb70>)
 8006f4a:	f043 0304 	orr.w	r3, r3, #4
 8006f4e:	6153      	str	r3, [r2, #20]
					break;
 8006f50:	e11a      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a79      	ldr	r2, [pc, #484]	; (8007140 <extInt_Config+0xb7c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d106      	bne.n	8006f6c <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8006f5e:	4b75      	ldr	r3, [pc, #468]	; (8007134 <extInt_Config+0xb70>)
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	4a74      	ldr	r2, [pc, #464]	; (8007134 <extInt_Config+0xb70>)
 8006f64:	f043 0307 	orr.w	r3, r3, #7
 8006f68:	6153      	str	r3, [r2, #20]
					break;
 8006f6a:	e10d      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 8006f6c:	bf00      	nop
					break;
 8006f6e:	e10b      	b.n	8007188 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8006f70:	4b70      	ldr	r3, [pc, #448]	; (8007134 <extInt_Config+0xb70>)
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	4a6f      	ldr	r2, [pc, #444]	; (8007134 <extInt_Config+0xb70>)
 8006f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f7a:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a70      	ldr	r2, [pc, #448]	; (8007144 <extInt_Config+0xb80>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d104      	bne.n	8006f92 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006f88:	4b6a      	ldr	r3, [pc, #424]	; (8007134 <extInt_Config+0xb70>)
 8006f8a:	4a6a      	ldr	r2, [pc, #424]	; (8007134 <extInt_Config+0xb70>)
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	6153      	str	r3, [r2, #20]
 8006f90:	e041      	b.n	8007016 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a6b      	ldr	r2, [pc, #428]	; (8007148 <extInt_Config+0xb84>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d106      	bne.n	8006fac <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8006f9e:	4b65      	ldr	r3, [pc, #404]	; (8007134 <extInt_Config+0xb70>)
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	4a64      	ldr	r2, [pc, #400]	; (8007134 <extInt_Config+0xb70>)
 8006fa4:	f043 0310 	orr.w	r3, r3, #16
 8006fa8:	6153      	str	r3, [r2, #20]
 8006faa:	e034      	b.n	8007016 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a5f      	ldr	r2, [pc, #380]	; (8007130 <extInt_Config+0xb6c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d106      	bne.n	8006fc6 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006fb8:	4b5e      	ldr	r3, [pc, #376]	; (8007134 <extInt_Config+0xb70>)
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	4a5d      	ldr	r2, [pc, #372]	; (8007134 <extInt_Config+0xb70>)
 8006fbe:	f043 0320 	orr.w	r3, r3, #32
 8006fc2:	6153      	str	r3, [r2, #20]
 8006fc4:	e027      	b.n	8007016 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a5a      	ldr	r2, [pc, #360]	; (8007138 <extInt_Config+0xb74>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d106      	bne.n	8006fe0 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006fd2:	4b58      	ldr	r3, [pc, #352]	; (8007134 <extInt_Config+0xb70>)
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	4a57      	ldr	r2, [pc, #348]	; (8007134 <extInt_Config+0xb70>)
 8006fd8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006fdc:	6153      	str	r3, [r2, #20]
 8006fde:	e01a      	b.n	8007016 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a55      	ldr	r2, [pc, #340]	; (800713c <extInt_Config+0xb78>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d106      	bne.n	8006ffa <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8006fec:	4b51      	ldr	r3, [pc, #324]	; (8007134 <extInt_Config+0xb70>)
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	4a50      	ldr	r2, [pc, #320]	; (8007134 <extInt_Config+0xb70>)
 8006ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff6:	6153      	str	r3, [r2, #20]
 8006ff8:	e00d      	b.n	8007016 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a4f      	ldr	r2, [pc, #316]	; (8007140 <extInt_Config+0xb7c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d106      	bne.n	8007014 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8007006:	4b4b      	ldr	r3, [pc, #300]	; (8007134 <extInt_Config+0xb70>)
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	4a4a      	ldr	r2, [pc, #296]	; (8007134 <extInt_Config+0xb70>)
 800700c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007010:	6153      	str	r3, [r2, #20]
 8007012:	e000      	b.n	8007016 <extInt_Config+0xa52>

					} else {
						__NOP();
 8007014:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8007016:	4b47      	ldr	r3, [pc, #284]	; (8007134 <extInt_Config+0xb70>)
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4a46      	ldr	r2, [pc, #280]	; (8007134 <extInt_Config+0xb70>)
 800701c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007020:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a46      	ldr	r2, [pc, #280]	; (8007144 <extInt_Config+0xb80>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d104      	bne.n	8007038 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800702e:	4b41      	ldr	r3, [pc, #260]	; (8007134 <extInt_Config+0xb70>)
 8007030:	4a40      	ldr	r2, [pc, #256]	; (8007134 <extInt_Config+0xb70>)
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8007036:	e0a7      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a42      	ldr	r2, [pc, #264]	; (8007148 <extInt_Config+0xb84>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d106      	bne.n	8007052 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8007044:	4b3b      	ldr	r3, [pc, #236]	; (8007134 <extInt_Config+0xb70>)
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	4a3a      	ldr	r2, [pc, #232]	; (8007134 <extInt_Config+0xb70>)
 800704a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704e:	6153      	str	r3, [r2, #20]
					break;
 8007050:	e09a      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a35      	ldr	r2, [pc, #212]	; (8007130 <extInt_Config+0xb6c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d106      	bne.n	800706c <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800705e:	4b35      	ldr	r3, [pc, #212]	; (8007134 <extInt_Config+0xb70>)
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4a34      	ldr	r2, [pc, #208]	; (8007134 <extInt_Config+0xb70>)
 8007064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007068:	6153      	str	r3, [r2, #20]
					break;
 800706a:	e08d      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a31      	ldr	r2, [pc, #196]	; (8007138 <extInt_Config+0xb74>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d106      	bne.n	8007086 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8007078:	4b2e      	ldr	r3, [pc, #184]	; (8007134 <extInt_Config+0xb70>)
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <extInt_Config+0xb70>)
 800707e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007082:	6153      	str	r3, [r2, #20]
					break;
 8007084:	e080      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2b      	ldr	r2, [pc, #172]	; (800713c <extInt_Config+0xb78>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d106      	bne.n	80070a0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8007092:	4b28      	ldr	r3, [pc, #160]	; (8007134 <extInt_Config+0xb70>)
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4a27      	ldr	r2, [pc, #156]	; (8007134 <extInt_Config+0xb70>)
 8007098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800709c:	6153      	str	r3, [r2, #20]
					break;
 800709e:	e073      	b.n	8007188 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a26      	ldr	r2, [pc, #152]	; (8007140 <extInt_Config+0xb7c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d106      	bne.n	80070ba <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80070ac:	4b21      	ldr	r3, [pc, #132]	; (8007134 <extInt_Config+0xb70>)
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	4a20      	ldr	r2, [pc, #128]	; (8007134 <extInt_Config+0xb70>)
 80070b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070b6:	6153      	str	r3, [r2, #20]
					break;
 80070b8:	e066      	b.n	8007188 <extInt_Config+0xbc4>
						__NOP();
 80070ba:	bf00      	nop
					break;
 80070bc:	e064      	b.n	8007188 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 80070be:	4b1d      	ldr	r3, [pc, #116]	; (8007134 <extInt_Config+0xb70>)
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	4a1c      	ldr	r2, [pc, #112]	; (8007134 <extInt_Config+0xb70>)
 80070c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070c8:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1c      	ldr	r2, [pc, #112]	; (8007144 <extInt_Config+0xb80>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d104      	bne.n	80070e0 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 80070d6:	4b17      	ldr	r3, [pc, #92]	; (8007134 <extInt_Config+0xb70>)
 80070d8:	4a16      	ldr	r2, [pc, #88]	; (8007134 <extInt_Config+0xb70>)
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 80070de:	e053      	b.n	8007188 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <extInt_Config+0xb84>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d106      	bne.n	80070fa <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 80070ec:	4b11      	ldr	r3, [pc, #68]	; (8007134 <extInt_Config+0xb70>)
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	4a10      	ldr	r2, [pc, #64]	; (8007134 <extInt_Config+0xb70>)
 80070f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070f6:	6153      	str	r3, [r2, #20]
						break;
 80070f8:	e046      	b.n	8007188 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0b      	ldr	r2, [pc, #44]	; (8007130 <extInt_Config+0xb6c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d106      	bne.n	8007114 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8007106:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <extInt_Config+0xb70>)
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <extInt_Config+0xb70>)
 800710c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007110:	6153      	str	r3, [r2, #20]
						break;
 8007112:	e039      	b.n	8007188 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a07      	ldr	r2, [pc, #28]	; (8007138 <extInt_Config+0xb74>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d115      	bne.n	800714c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <extInt_Config+0xb70>)
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	4a03      	ldr	r2, [pc, #12]	; (8007134 <extInt_Config+0xb70>)
 8007126:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800712a:	6153      	str	r3, [r2, #20]
						break;
 800712c:	e02c      	b.n	8007188 <extInt_Config+0xbc4>
 800712e:	bf00      	nop
 8007130:	40020800 	.word	0x40020800
 8007134:	40013800 	.word	0x40013800
 8007138:	40020c00 	.word	0x40020c00
 800713c:	40021000 	.word	0x40021000
 8007140:	40021c00 	.word	0x40021c00
 8007144:	40020000 	.word	0x40020000
 8007148:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a6c      	ldr	r2, [pc, #432]	; (8007304 <extInt_Config+0xd40>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d106      	bne.n	8007166 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8007158:	4b6b      	ldr	r3, [pc, #428]	; (8007308 <extInt_Config+0xd44>)
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	4a6a      	ldr	r2, [pc, #424]	; (8007308 <extInt_Config+0xd44>)
 800715e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007162:	6153      	str	r3, [r2, #20]
						break;
 8007164:	e010      	b.n	8007188 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a67      	ldr	r2, [pc, #412]	; (800730c <extInt_Config+0xd48>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d106      	bne.n	8007180 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8007172:	4b65      	ldr	r3, [pc, #404]	; (8007308 <extInt_Config+0xd44>)
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	4a64      	ldr	r2, [pc, #400]	; (8007308 <extInt_Config+0xd44>)
 8007178:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800717c:	6153      	str	r3, [r2, #20]
						break;
 800717e:	e003      	b.n	8007188 <extInt_Config+0xbc4>
							__NOP();
 8007180:	bf00      	nop
						break;
 8007182:	e001      	b.n	8007188 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8007184:	bf00      	nop
						break;
 8007186:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	791b      	ldrb	r3, [r3, #4]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d020      	beq.n	80071d2 <extInt_Config+0xc0e>
 8007190:	2b02      	cmp	r3, #2
 8007192:	dc37      	bgt.n	8007204 <extInt_Config+0xc40>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <extInt_Config+0xbda>
 8007198:	2b01      	cmp	r3, #1
 800719a:	d00d      	beq.n	80071b8 <extInt_Config+0xbf4>
 800719c:	e032      	b.n	8007204 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800719e:	4b5c      	ldr	r3, [pc, #368]	; (8007310 <extInt_Config+0xd4c>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	7912      	ldrb	r2, [r2, #4]
 80071a8:	4611      	mov	r1, r2
 80071aa:	2201      	movs	r2, #1
 80071ac:	408a      	lsls	r2, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	4a57      	ldr	r2, [pc, #348]	; (8007310 <extInt_Config+0xd4c>)
 80071b2:	430b      	orrs	r3, r1
 80071b4:	60d3      	str	r3, [r2, #12]

		break;
 80071b6:	e027      	b.n	8007208 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80071b8:	4b55      	ldr	r3, [pc, #340]	; (8007310 <extInt_Config+0xd4c>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	7912      	ldrb	r2, [r2, #4]
 80071c2:	4611      	mov	r1, r2
 80071c4:	2201      	movs	r2, #1
 80071c6:	408a      	lsls	r2, r1
 80071c8:	4611      	mov	r1, r2
 80071ca:	4a51      	ldr	r2, [pc, #324]	; (8007310 <extInt_Config+0xd4c>)
 80071cc:	430b      	orrs	r3, r1
 80071ce:	6093      	str	r3, [r2, #8]

		break;
 80071d0:	e01a      	b.n	8007208 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80071d2:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <extInt_Config+0xd4c>)
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	7912      	ldrb	r2, [r2, #4]
 80071dc:	4611      	mov	r1, r2
 80071de:	2201      	movs	r2, #1
 80071e0:	408a      	lsls	r2, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	4a4a      	ldr	r2, [pc, #296]	; (8007310 <extInt_Config+0xd4c>)
 80071e6:	430b      	orrs	r3, r1
 80071e8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80071ea:	4b49      	ldr	r3, [pc, #292]	; (8007310 <extInt_Config+0xd4c>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	7912      	ldrb	r2, [r2, #4]
 80071f4:	4611      	mov	r1, r2
 80071f6:	2201      	movs	r2, #1
 80071f8:	408a      	lsls	r2, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	4a44      	ldr	r2, [pc, #272]	; (8007310 <extInt_Config+0xd4c>)
 80071fe:	430b      	orrs	r3, r1
 8007200:	6093      	str	r3, [r2, #8]

		break;
 8007202:	e001      	b.n	8007208 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8007204:	bf00      	nop
		break;
 8007206:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007208:	b672      	cpsid	i
}
 800720a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800720c:	4b40      	ldr	r3, [pc, #256]	; (8007310 <extInt_Config+0xd4c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	7912      	ldrb	r2, [r2, #4]
 8007216:	4611      	mov	r1, r2
 8007218:	2201      	movs	r2, #1
 800721a:	408a      	lsls	r2, r1
 800721c:	4611      	mov	r1, r2
 800721e:	4a3c      	ldr	r2, [pc, #240]	; (8007310 <extInt_Config+0xd4c>)
 8007220:	430b      	orrs	r3, r1
 8007222:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	791b      	ldrb	r3, [r3, #4]
 800722a:	2b0f      	cmp	r3, #15
 800722c:	d862      	bhi.n	80072f4 <extInt_Config+0xd30>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <extInt_Config+0xc70>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007275 	.word	0x08007275
 8007238:	0800727d 	.word	0x0800727d
 800723c:	08007285 	.word	0x08007285
 8007240:	0800728d 	.word	0x0800728d
 8007244:	08007295 	.word	0x08007295
 8007248:	0800729d 	.word	0x0800729d
 800724c:	080072a5 	.word	0x080072a5
 8007250:	080072ad 	.word	0x080072ad
 8007254:	080072b5 	.word	0x080072b5
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072c5 	.word	0x080072c5
 8007260:	080072cd 	.word	0x080072cd
 8007264:	080072d5 	.word	0x080072d5
 8007268:	080072dd 	.word	0x080072dd
 800726c:	080072e5 	.word	0x080072e5
 8007270:	080072ed 	.word	0x080072ed
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8007274:	2006      	movs	r0, #6
 8007276:	f7ff f95d 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 800727a:	e03d      	b.n	80072f8 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800727c:	2007      	movs	r0, #7
 800727e:	f7ff f959 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 8007282:	e039      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8007284:	2008      	movs	r0, #8
 8007286:	f7ff f955 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 800728a:	e035      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800728c:	2009      	movs	r0, #9
 800728e:	f7ff f951 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 8007292:	e031      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8007294:	200a      	movs	r0, #10
 8007296:	f7ff f94d 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 800729a:	e02d      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800729c:	2017      	movs	r0, #23
 800729e:	f7ff f949 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072a2:	e029      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80072a4:	2017      	movs	r0, #23
 80072a6:	f7ff f945 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072aa:	e025      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80072ac:	2017      	movs	r0, #23
 80072ae:	f7ff f941 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072b2:	e021      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80072b4:	2017      	movs	r0, #23
 80072b6:	f7ff f93d 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072ba:	e01d      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80072bc:	2017      	movs	r0, #23
 80072be:	f7ff f939 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072c2:	e019      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072c4:	2028      	movs	r0, #40	; 0x28
 80072c6:	f7ff f935 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072ca:	e015      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072cc:	2028      	movs	r0, #40	; 0x28
 80072ce:	f7ff f931 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072d2:	e011      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072d4:	2028      	movs	r0, #40	; 0x28
 80072d6:	f7ff f92d 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072da:	e00d      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072dc:	2028      	movs	r0, #40	; 0x28
 80072de:	f7ff f929 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072e2:	e009      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072e4:	2028      	movs	r0, #40	; 0x28
 80072e6:	f7ff f925 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072ea:	e005      	b.n	80072f8 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80072ec:	2028      	movs	r0, #40	; 0x28
 80072ee:	f7ff f921 	bl	8006534 <__NVIC_EnableIRQ>
			break;
 80072f2:	e001      	b.n	80072f8 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 80072f4:	bf00      	nop
			break;
 80072f6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80072f8:	b662      	cpsie	i
}
 80072fa:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40021000 	.word	0x40021000
 8007308:	40013800 	.word	0x40013800
 800730c:	40021c00 	.word	0x40021c00
 8007310:	40013c00 	.word	0x40013c00

08007314 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8007320:	b672      	cpsid	i
}
 8007322:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	791b      	ldrb	r3, [r3, #4]
 800732a:	2b0f      	cmp	r3, #15
 800732c:	f200 8084 	bhi.w	8007438 <exti_Set_Priority+0x124>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <exti_Set_Priority+0x24>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	08007379 	.word	0x08007379
 800733c:	08007385 	.word	0x08007385
 8007340:	08007391 	.word	0x08007391
 8007344:	0800739d 	.word	0x0800739d
 8007348:	080073a9 	.word	0x080073a9
 800734c:	080073b5 	.word	0x080073b5
 8007350:	080073c1 	.word	0x080073c1
 8007354:	080073cd 	.word	0x080073cd
 8007358:	080073d9 	.word	0x080073d9
 800735c:	080073e5 	.word	0x080073e5
 8007360:	080073f1 	.word	0x080073f1
 8007364:	080073fd 	.word	0x080073fd
 8007368:	08007409 	.word	0x08007409
 800736c:	08007415 	.word	0x08007415
 8007370:	08007421 	.word	0x08007421
 8007374:	0800742d 	.word	0x0800742d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	4619      	mov	r1, r3
 800737c:	2006      	movs	r0, #6
 800737e:	f7ff f8f7 	bl	8006570 <__NVIC_SetPriority>
				break;
 8007382:	e05b      	b.n	800743c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	4619      	mov	r1, r3
 8007388:	2007      	movs	r0, #7
 800738a:	f7ff f8f1 	bl	8006570 <__NVIC_SetPriority>
				break;
 800738e:	e055      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	4619      	mov	r1, r3
 8007394:	2008      	movs	r0, #8
 8007396:	f7ff f8eb 	bl	8006570 <__NVIC_SetPriority>
				break;
 800739a:	e04f      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	4619      	mov	r1, r3
 80073a0:	2009      	movs	r0, #9
 80073a2:	f7ff f8e5 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073a6:	e049      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	4619      	mov	r1, r3
 80073ac:	200a      	movs	r0, #10
 80073ae:	f7ff f8df 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073b2:	e043      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	4619      	mov	r1, r3
 80073b8:	2017      	movs	r0, #23
 80073ba:	f7ff f8d9 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073be:	e03d      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	4619      	mov	r1, r3
 80073c4:	2017      	movs	r0, #23
 80073c6:	f7ff f8d3 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073ca:	e037      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	4619      	mov	r1, r3
 80073d0:	2017      	movs	r0, #23
 80073d2:	f7ff f8cd 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073d6:	e031      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	4619      	mov	r1, r3
 80073dc:	2017      	movs	r0, #23
 80073de:	f7ff f8c7 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073e2:	e02b      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	4619      	mov	r1, r3
 80073e8:	2017      	movs	r0, #23
 80073ea:	f7ff f8c1 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073ee:	e025      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	4619      	mov	r1, r3
 80073f4:	2028      	movs	r0, #40	; 0x28
 80073f6:	f7ff f8bb 	bl	8006570 <__NVIC_SetPriority>
				break;
 80073fa:	e01f      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	4619      	mov	r1, r3
 8007400:	2028      	movs	r0, #40	; 0x28
 8007402:	f7ff f8b5 	bl	8006570 <__NVIC_SetPriority>
				break;
 8007406:	e019      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	4619      	mov	r1, r3
 800740c:	2028      	movs	r0, #40	; 0x28
 800740e:	f7ff f8af 	bl	8006570 <__NVIC_SetPriority>
				break;
 8007412:	e013      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	4619      	mov	r1, r3
 8007418:	2028      	movs	r0, #40	; 0x28
 800741a:	f7ff f8a9 	bl	8006570 <__NVIC_SetPriority>
				break;
 800741e:	e00d      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	4619      	mov	r1, r3
 8007424:	2028      	movs	r0, #40	; 0x28
 8007426:	f7ff f8a3 	bl	8006570 <__NVIC_SetPriority>
				break;
 800742a:	e007      	b.n	800743c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	4619      	mov	r1, r3
 8007430:	2028      	movs	r0, #40	; 0x28
 8007432:	f7ff f89d 	bl	8006570 <__NVIC_SetPriority>
				break;
 8007436:	e001      	b.n	800743c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 8007438:	bf00      	nop
				break;
 800743a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800743c:	b662      	cpsie	i
}
 800743e:	bf00      	nop

		}

	__enable_irq();

}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
	__NOP();
 800744c:	bf00      	nop
}
 800744e:	bf00      	nop
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
	__NOP();
 800745c:	bf00      	nop
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
	__NOP();
 800746c:	bf00      	nop
}
 800746e:	bf00      	nop
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
	__NOP();
 800747c:	bf00      	nop
}
 800747e:	bf00      	nop
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
	__NOP();
 800748c:	bf00      	nop
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
	__NOP();
 800749c:	bf00      	nop
}
 800749e:	bf00      	nop
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
	__NOP();
 80074ac:	bf00      	nop
}
 80074ae:	bf00      	nop
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
	__NOP();
 80074bc:	bf00      	nop
}
 80074be:	bf00      	nop
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
	__NOP();
 80074cc:	bf00      	nop
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
	__NOP();
 80074dc:	bf00      	nop
}
 80074de:	bf00      	nop
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
	__NOP();
 80074ec:	bf00      	nop
}
 80074ee:	bf00      	nop
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
	__NOP();
 80074fc:	bf00      	nop
}
 80074fe:	bf00      	nop
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
	__NOP();
 800750c:	bf00      	nop
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
	__NOP();
 800751c:	bf00      	nop
}
 800751e:	bf00      	nop
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <EXTI0_IRQHandler+0x24>)
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <EXTI0_IRQHandler+0x24>)
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	4a03      	ldr	r2, [pc, #12]	; (800754c <EXTI0_IRQHandler+0x24>)
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8007544:	f7ff ff80 	bl	8007448 <callback_extInt0>
	}
}
 8007548:	bf00      	nop
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40013c00 	.word	0x40013c00

08007550 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8007554:	4b07      	ldr	r3, [pc, #28]	; (8007574 <EXTI1_IRQHandler+0x24>)
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d007      	beq.n	8007570 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8007560:	4b04      	ldr	r3, [pc, #16]	; (8007574 <EXTI1_IRQHandler+0x24>)
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	4a03      	ldr	r2, [pc, #12]	; (8007574 <EXTI1_IRQHandler+0x24>)
 8007566:	f043 0302 	orr.w	r3, r3, #2
 800756a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800756c:	f7fa f914 	bl	8001798 <callback_extInt1>
	}
}
 8007570:	bf00      	nop
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40013c00 	.word	0x40013c00

08007578 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800757c:	4b07      	ldr	r3, [pc, #28]	; (800759c <EXTI2_IRQHandler+0x24>)
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8007588:	4b04      	ldr	r3, [pc, #16]	; (800759c <EXTI2_IRQHandler+0x24>)
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	4a03      	ldr	r2, [pc, #12]	; (800759c <EXTI2_IRQHandler+0x24>)
 800758e:	f043 0304 	orr.w	r3, r3, #4
 8007592:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8007594:	f7ff ff60 	bl	8007458 <callback_extInt2>
	}
}
 8007598:	bf00      	nop
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40013c00 	.word	0x40013c00

080075a0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <EXTI3_IRQHandler+0x24>)
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <EXTI3_IRQHandler+0x24>)
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	4a03      	ldr	r2, [pc, #12]	; (80075c4 <EXTI3_IRQHandler+0x24>)
 80075b6:	f043 0308 	orr.w	r3, r3, #8
 80075ba:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 80075bc:	f7fa f8fc 	bl	80017b8 <callback_extInt3>
	}
}
 80075c0:	bf00      	nop
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40013c00 	.word	0x40013c00

080075c8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 80075cc:	4b07      	ldr	r3, [pc, #28]	; (80075ec <EXTI4_IRQHandler+0x24>)
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f003 0310 	and.w	r3, r3, #16
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 80075d8:	4b04      	ldr	r3, [pc, #16]	; (80075ec <EXTI4_IRQHandler+0x24>)
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4a03      	ldr	r2, [pc, #12]	; (80075ec <EXTI4_IRQHandler+0x24>)
 80075de:	f043 0310 	orr.w	r3, r3, #16
 80075e2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 80075e4:	f7ff ff40 	bl	8007468 <callback_extInt4>
	}
}
 80075e8:	bf00      	nop
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40013c00 	.word	0x40013c00

080075f0 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 80075f4:	4b26      	ldr	r3, [pc, #152]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8007600:	4b23      	ldr	r3, [pc, #140]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	4a22      	ldr	r2, [pc, #136]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007606:	f043 0320 	orr.w	r3, r3, #32
 800760a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800760c:	f7ff ff34 	bl	8007478 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8007610:	e03c      	b.n	800768c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8007612:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	d008      	beq.n	8007630 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800761e:	4b1c      	ldr	r3, [pc, #112]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007628:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800762a:	f7ff ff2d 	bl	8007488 <callback_extInt6>
}
 800762e:	e02d      	b.n	800768c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8007630:	4b17      	ldr	r3, [pc, #92]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800763c:	4b14      	ldr	r3, [pc, #80]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	4a13      	ldr	r2, [pc, #76]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007646:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8007648:	f7ff ff26 	bl	8007498 <callback_extInt7>
}
 800764c:	e01e      	b.n	800768c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800764e:	4b10      	ldr	r3, [pc, #64]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800765a:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	4a0c      	ldr	r2, [pc, #48]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 8007660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007664:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8007666:	f7ff ff1f 	bl	80074a8 <callback_extInt8>
}
 800766a:	e00f      	b.n	800768c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800766c:	4b08      	ldr	r3, [pc, #32]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <EXTI9_5_IRQHandler+0xa0>)
 800767e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007682:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8007684:	f7ff ff18 	bl	80074b8 <callback_extInt9>
}
 8007688:	e000      	b.n	800768c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800768a:	bf00      	nop
}
 800768c:	bf00      	nop
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40013c00 	.word	0x40013c00

08007694 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8007698:	4b2d      	ldr	r3, [pc, #180]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 80076a4:	4b2a      	ldr	r3, [pc, #168]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	4a29      	ldr	r2, [pc, #164]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076ae:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 80076b0:	f7ff ff0a 	bl	80074c8 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 80076b4:	e049      	b.n	800774a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 80076b6:	4b26      	ldr	r3, [pc, #152]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 80076c2:	4b23      	ldr	r3, [pc, #140]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	4a22      	ldr	r2, [pc, #136]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076cc:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 80076ce:	f7ff ff03 	bl	80074d8 <callback_extInt11>
}
 80076d2:	e03a      	b.n	800774a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 80076d4:	4b1e      	ldr	r3, [pc, #120]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 80076e0:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	4a1a      	ldr	r2, [pc, #104]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076ea:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 80076ec:	f7ff fefc 	bl	80074e8 <callback_extInt12>
}
 80076f0:	e02b      	b.n	800774a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80076fe:	4b14      	ldr	r3, [pc, #80]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	4a13      	ldr	r2, [pc, #76]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 8007704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007708:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800770a:	f7ff fef5 	bl	80074f8 <callback_extInt13>
}
 800770e:	e01c      	b.n	800774a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d008      	beq.n	800772e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800771c:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	4a0b      	ldr	r2, [pc, #44]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 8007722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007726:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8007728:	f7ff feee 	bl	8007508 <callback_extInt14>
}
 800772c:	e00d      	b.n	800774a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800772e:	4b08      	ldr	r3, [pc, #32]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	4a04      	ldr	r2, [pc, #16]	; (8007750 <EXTI15_10_IRQHandler+0xbc>)
 8007740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007744:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8007746:	f7ff fee7 	bl	8007518 <callback_extInt15>
}
 800774a:	bf00      	nop
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40013c00 	.word	0x40013c00

08007754 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a88      	ldr	r2, [pc, #544]	; (800798c <GPIO_Config+0x238>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d106      	bne.n	800777c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800776e:	4b88      	ldr	r3, [pc, #544]	; (8007990 <GPIO_Config+0x23c>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	4a87      	ldr	r2, [pc, #540]	; (8007990 <GPIO_Config+0x23c>)
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	6313      	str	r3, [r2, #48]	; 0x30
 800777a:	e03a      	b.n	80077f2 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a84      	ldr	r2, [pc, #528]	; (8007994 <GPIO_Config+0x240>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d106      	bne.n	8007794 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8007786:	4b82      	ldr	r3, [pc, #520]	; (8007990 <GPIO_Config+0x23c>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	4a81      	ldr	r2, [pc, #516]	; (8007990 <GPIO_Config+0x23c>)
 800778c:	f043 0302 	orr.w	r3, r3, #2
 8007790:	6313      	str	r3, [r2, #48]	; 0x30
 8007792:	e02e      	b.n	80077f2 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a7f      	ldr	r2, [pc, #508]	; (8007998 <GPIO_Config+0x244>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d106      	bne.n	80077ac <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800779e:	4b7c      	ldr	r3, [pc, #496]	; (8007990 <GPIO_Config+0x23c>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	4a7b      	ldr	r2, [pc, #492]	; (8007990 <GPIO_Config+0x23c>)
 80077a4:	f043 0304 	orr.w	r3, r3, #4
 80077a8:	6313      	str	r3, [r2, #48]	; 0x30
 80077aa:	e022      	b.n	80077f2 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a7a      	ldr	r2, [pc, #488]	; (800799c <GPIO_Config+0x248>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d106      	bne.n	80077c4 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80077b6:	4b76      	ldr	r3, [pc, #472]	; (8007990 <GPIO_Config+0x23c>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	4a75      	ldr	r2, [pc, #468]	; (8007990 <GPIO_Config+0x23c>)
 80077bc:	f043 0308 	orr.w	r3, r3, #8
 80077c0:	6313      	str	r3, [r2, #48]	; 0x30
 80077c2:	e016      	b.n	80077f2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a75      	ldr	r2, [pc, #468]	; (80079a0 <GPIO_Config+0x24c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d106      	bne.n	80077dc <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80077ce:	4b70      	ldr	r3, [pc, #448]	; (8007990 <GPIO_Config+0x23c>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	4a6f      	ldr	r2, [pc, #444]	; (8007990 <GPIO_Config+0x23c>)
 80077d4:	f043 0310 	orr.w	r3, r3, #16
 80077d8:	6313      	str	r3, [r2, #48]	; 0x30
 80077da:	e00a      	b.n	80077f2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a70      	ldr	r2, [pc, #448]	; (80079a4 <GPIO_Config+0x250>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d105      	bne.n	80077f2 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80077e6:	4b6a      	ldr	r3, [pc, #424]	; (8007990 <GPIO_Config+0x23c>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	4a69      	ldr	r2, [pc, #420]	; (8007990 <GPIO_Config+0x23c>)
 80077ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f0:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d143      	bne.n	8007882 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	2b07      	cmp	r3, #7
 8007800:	d81f      	bhi.n	8007842 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	791b      	ldrb	r3, [r3, #4]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6a1a      	ldr	r2, [r3, #32]
 8007810:	210f      	movs	r1, #15
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	fa01 f303 	lsl.w	r3, r1, r3
 8007818:	43db      	mvns	r3, r3
 800781a:	4619      	mov	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	400a      	ands	r2, r1
 8007822:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6a1a      	ldr	r2, [r3, #32]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7a5b      	ldrb	r3, [r3, #9]
 800782e:	4619      	mov	r1, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	fa01 f303 	lsl.w	r3, r1, r3
 8007836:	4619      	mov	r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	621a      	str	r2, [r3, #32]
 8007840:	e01f      	b.n	8007882 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	3b08      	subs	r3, #8
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007852:	210f      	movs	r1, #15
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	fa01 f303 	lsl.w	r3, r1, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	400a      	ands	r2, r1
 8007864:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7a5b      	ldrb	r3, [r3, #9]
 8007870:	4619      	mov	r1, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	fa01 f303 	lsl.w	r3, r1, r3
 8007878:	4619      	mov	r1, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	795b      	ldrb	r3, [r3, #5]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	791b      	ldrb	r3, [r3, #4]
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	2103      	movs	r1, #3
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	43db      	mvns	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	400a      	ands	r2, r1
 80078b0:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6819      	ldr	r1, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	430a      	orrs	r2, r1
 80078c0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7a1b      	ldrb	r3, [r3, #8]
 80078c6:	461a      	mov	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	791b      	ldrb	r3, [r3, #4]
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	791b      	ldrb	r3, [r3, #4]
 80078dc:	4619      	mov	r1, r3
 80078de:	2301      	movs	r3, #1
 80078e0:	408b      	lsls	r3, r1
 80078e2:	43db      	mvns	r3, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	400a      	ands	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6859      	ldr	r1, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	799b      	ldrb	r3, [r3, #6]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	791b      	ldrb	r3, [r3, #4]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	791b      	ldrb	r3, [r3, #4]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	2103      	movs	r1, #3
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	43db      	mvns	r3, r3
 8007924:	4619      	mov	r1, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	400a      	ands	r2, r1
 800792c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6899      	ldr	r1, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	430a      	orrs	r2, r1
 800793c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	79db      	ldrb	r3, [r3, #7]
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	791b      	ldrb	r3, [r3, #4]
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	791b      	ldrb	r3, [r3, #4]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	2103      	movs	r1, #3
 800795e:	fa01 f303 	lsl.w	r3, r1, r3
 8007962:	43db      	mvns	r3, r3
 8007964:	4619      	mov	r1, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	400a      	ands	r2, r1
 800796c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68d9      	ldr	r1, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	430a      	orrs	r2, r1
 800797c:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40020000 	.word	0x40020000
 8007990:	40023800 	.word	0x40023800
 8007994:	40020400 	.word	0x40020400
 8007998:	40020800 	.word	0x40020800
 800799c:	40020c00 	.word	0x40020c00
 80079a0:	40021000 	.word	0x40021000
 80079a4:	40021c00 	.word	0x40021c00

080079a8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d10d      	bne.n	80079d6 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699a      	ldr	r2, [r3, #24]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	791b      	ldrb	r3, [r3, #4]
 80079c4:	4619      	mov	r1, r3
 80079c6:	2301      	movs	r3, #1
 80079c8:	408b      	lsls	r3, r1
 80079ca:	4619      	mov	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 80079d4:	e00d      	b.n	80079f2 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	699a      	ldr	r2, [r3, #24]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	3310      	adds	r3, #16
 80079e2:	2101      	movs	r1, #1
 80079e4:	fa01 f303 	lsl.w	r3, r1, r3
 80079e8:	4619      	mov	r1, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	619a      	str	r2, [r3, #24]
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10d      	bne.n	8007a2c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	791b      	ldrb	r3, [r3, #4]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	408b      	lsls	r3, r1
 8007a20:	4619      	mov	r1, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8007a2a:	e00d      	b.n	8007a48 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	791b      	ldrb	r3, [r3, #4]
 8007a36:	3310      	adds	r3, #16
 8007a38:	2101      	movs	r1, #1
 8007a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3e:	4619      	mov	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	619a      	str	r2, [r3, #24]
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	791b      	ldrb	r3, [r3, #4]
 8007a64:	461a      	mov	r2, r3
 8007a66:	2301      	movs	r3, #1
 8007a68:	4093      	lsls	r3, r2
 8007a6a:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8007a74:	897b      	ldrh	r3, [r7, #10]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	461a      	mov	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	40d3      	lsrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8007a88:	68fb      	ldr	r3, [r7, #12]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff ffd8 	bl	8007a54 <GPIO_ReadPin>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bf0c      	ite	eq
 8007aae:	2301      	moveq	r3, #1
 8007ab0:	2300      	movne	r3, #0
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff ff76 	bl	80079a8 <GPIO_WritePin>
}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff fe3b 	bl	8007754 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff fe36 	bl	8007754 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f002 f90b 	bl	8009d08 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8007af2:	e004      	b.n	8007afe <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f94f 	bl	8007d98 <WHOIAM>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f7      	beq.n	8007af4 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8007b04:	216b      	movs	r1, #107	; 0x6b
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f8f1 	bl	8007cee <readData>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	461a      	mov	r2, r3
 8007b18:	216b      	movs	r1, #107	; 0x6b
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f89c 	bl	8007c58 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8007b20:	216b      	movs	r1, #107	; 0x6b
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f8e3 	bl	8007cee <readData>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8007b2c:	211c      	movs	r1, #28
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8dd 	bl	8007cee <readData>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	f023 0318 	bic.w	r3, r3, #24
 8007b3e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d833      	bhi.n	8007bb0 <configMPUAccel+0xec>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <configMPUAccel+0x8c>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b61 	.word	0x08007b61
 8007b54:	08007b6f 	.word	0x08007b6f
 8007b58:	08007b85 	.word	0x08007b85
 8007b5c:	08007b9b 	.word	0x08007b9b
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	461a      	mov	r2, r3
 8007b64:	211c      	movs	r1, #28
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f876 	bl	8007c58 <writeData>


				break;
 8007b6c:	e021      	b.n	8007bb2 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	f043 0308 	orr.w	r3, r3, #8
 8007b74:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	211c      	movs	r1, #28
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f86b 	bl	8007c58 <writeData>


				break;
 8007b82:	e016      	b.n	8007bb2 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f043 0310 	orr.w	r3, r3, #16
 8007b8a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	211c      	movs	r1, #28
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f860 	bl	8007c58 <writeData>


				break;
 8007b98:	e00b      	b.n	8007bb2 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	f043 0318 	orr.w	r3, r3, #24
 8007ba0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	211c      	movs	r1, #28
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f855 	bl	8007c58 <writeData>


				break;
 8007bae:	e000      	b.n	8007bb2 <configMPUAccel+0xee>
			}default:{
				break;
 8007bb0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8007bb2:	211c      	movs	r1, #28
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f89a 	bl	8007cee <readData>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8007bbe:	211b      	movs	r1, #27
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f894 	bl	8007cee <readData>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	f023 0318 	bic.w	r3, r3, #24
 8007bd0:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d832      	bhi.n	8007c40 <configMPUAccel+0x17c>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <configMPUAccel+0x11c>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007bff 	.word	0x08007bff
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	08007c2b 	.word	0x08007c2b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	211b      	movs	r1, #27
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f82e 	bl	8007c58 <writeData>


				break;
 8007bfc:	e021      	b.n	8007c42 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	f043 0308 	orr.w	r3, r3, #8
 8007c04:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	211b      	movs	r1, #27
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f823 	bl	8007c58 <writeData>


				break;
 8007c12:	e016      	b.n	8007c42 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	f043 0310 	orr.w	r3, r3, #16
 8007c1a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	211b      	movs	r1, #27
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f818 	bl	8007c58 <writeData>


				break;
 8007c28:	e00b      	b.n	8007c42 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	f043 0318 	orr.w	r3, r3, #24
 8007c30:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	461a      	mov	r2, r3
 8007c36:	211b      	movs	r1, #27
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f80d 	bl	8007c58 <writeData>


				break;
 8007c3e:	e000      	b.n	8007c42 <configMPUAccel+0x17e>
			}default:{
				break;
 8007c40:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 8007c42:	211b      	movs	r1, #27
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f852 	bl	8007cee <readData>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73bb      	strb	r3, [r7, #14]


}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop

08007c58 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
 8007c64:	4613      	mov	r3, r2
 8007c66:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c7a:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 f9b1 	bl	8009fe8 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68d8      	ldr	r0, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	791b      	ldrb	r3, [r3, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	4619      	mov	r1, r3
 8007c94:	f002 fa13 	bl	800a0be <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f002 fa34 	bl	800a10e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007ca6:	e000      	b.n	8007caa <writeData+0x52>
		__NOP();
 8007ca8:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1f6      	bne.n	8007ca8 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	78ba      	ldrb	r2, [r7, #2]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f002 fa3d 	bl	800a142 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007cc8:	e000      	b.n	8007ccc <writeData+0x74>
		__NOP();
 8007cca:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f6      	bne.n	8007cca <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f002 f96f 	bl	8009fc4 <i2c_stopTransaction>



}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d10:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f002 f966 	bl	8009fe8 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68d8      	ldr	r0, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	791b      	ldrb	r3, [r3, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	4619      	mov	r1, r3
 8007d2a:	f002 f9c8 	bl	800a0be <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	4611      	mov	r1, r2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f002 f9e9 	bl	800a10e <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007d3c:	e000      	b.n	8007d40 <readData+0x52>
		__NOP();
 8007d3e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1f6      	bne.n	8007d3e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f002 f978 	bl	800a04a <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68d8      	ldr	r0, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	791b      	ldrb	r3, [r3, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	4619      	mov	r1, r3
 8007d68:	f002 f9a9 	bl	800a0be <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f002 f992 	bl	800a09a <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f002 f922 	bl	8009fc4 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 f9f6 	bl	800a176 <i2c_readDataByte>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8007da8:	2175      	movs	r1, #117	; 0x75
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff ff9f 	bl	8007cee <readData>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007dba:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bf14      	ite	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8007dce:	7bbb      	ldrb	r3, [r7, #14]

}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8007df8:	2143      	movs	r1, #67	; 0x43
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff ff77 	bl	8007cee <readData>
 8007e00:	4603      	mov	r3, r0
 8007e02:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8007e04:	2144      	movs	r1, #68	; 0x44
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff ff71 	bl	8007cee <readData>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8007e10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	b21a      	sxth	r2, r3
 8007e18:	89bb      	ldrh	r3, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d846      	bhi.n	8007eb4 <readGyro_X+0xdc>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <readGyro_X+0x54>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e3d 	.word	0x08007e3d
 8007e30:	08007e5b 	.word	0x08007e5b
 8007e34:	08007e79 	.word	0x08007e79
 8007e38:	08007e97 	.word	0x08007e97
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8007e3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7f8 fb87 	bl	8000554 <__aeabi_i2d>
 8007e46:	a325      	add	r3, pc, #148	; (adr r3, 8007edc <readGyro_X+0x104>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f7f8 fd16 	bl	800087c <__aeabi_ddiv>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007e58:	e02d      	b.n	8007eb6 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8007e5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f8 fb78 	bl	8000554 <__aeabi_i2d>
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	4b19      	ldr	r3, [pc, #100]	; (8007ed0 <readGyro_X+0xf8>)
 8007e6a:	f7f8 fd07 	bl	800087c <__aeabi_ddiv>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007e76:	e01e      	b.n	8007eb6 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8007e78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f8 fb69 	bl	8000554 <__aeabi_i2d>
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	4b13      	ldr	r3, [pc, #76]	; (8007ed4 <readGyro_X+0xfc>)
 8007e88:	f7f8 fcf8 	bl	800087c <__aeabi_ddiv>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007e94:	e00f      	b.n	8007eb6 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8007e96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f8 fb5a 	bl	8000554 <__aeabi_i2d>
 8007ea0:	f04f 0200 	mov.w	r2, #0
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <readGyro_X+0x100>)
 8007ea6:	f7f8 fce9 	bl	800087c <__aeabi_ddiv>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007eb2:	e000      	b.n	8007eb6 <readGyro_X+0xde>
		}default:{
			break;
 8007eb4:	bf00      	nop
		}

	}

	return GYROX_R;
 8007eb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eba:	f7f8 fead 	bl	8000c18 <__aeabi_d2f>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	ee07 3a90 	vmov	s15, r3

}
 8007ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40508000 	.word	0x40508000
 8007ed4:	40408000 	.word	0x40408000
 8007ed8:	40300000 	.word	0x40300000
 8007edc:	00000000 	.word	0x00000000
 8007ee0:	40606000 	.word	0x40606000
 8007ee4:	00000000 	.word	0x00000000

08007ee8 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8007f08:	2145      	movs	r1, #69	; 0x45
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff feef 	bl	8007cee <readData>
 8007f10:	4603      	mov	r3, r0
 8007f12:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8007f14:	2146      	movs	r1, #70	; 0x46
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff fee9 	bl	8007cee <readData>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8007f20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	b21a      	sxth	r2, r3
 8007f28:	89bb      	ldrh	r3, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	785b      	ldrb	r3, [r3, #1]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d846      	bhi.n	8007fc4 <readGyro_Y+0xdc>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <readGyro_Y+0x54>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f89 	.word	0x08007f89
 8007f48:	08007fa7 	.word	0x08007fa7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8007f4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7f8 faff 	bl	8000554 <__aeabi_i2d>
 8007f56:	a325      	add	r3, pc, #148	; (adr r3, 8007fec <readGyro_Y+0x104>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 fc8e 	bl	800087c <__aeabi_ddiv>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007f68:	e02d      	b.n	8007fc6 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8007f6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f8 faf0 	bl	8000554 <__aeabi_i2d>
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <readGyro_Y+0xf8>)
 8007f7a:	f7f8 fc7f 	bl	800087c <__aeabi_ddiv>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007f86:	e01e      	b.n	8007fc6 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8007f88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7f8 fae1 	bl	8000554 <__aeabi_i2d>
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <readGyro_Y+0xfc>)
 8007f98:	f7f8 fc70 	bl	800087c <__aeabi_ddiv>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007fa4:	e00f      	b.n	8007fc6 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8007fa6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7f8 fad2 	bl	8000554 <__aeabi_i2d>
 8007fb0:	f04f 0200 	mov.w	r2, #0
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <readGyro_Y+0x100>)
 8007fb6:	f7f8 fc61 	bl	800087c <__aeabi_ddiv>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8007fc2:	e000      	b.n	8007fc6 <readGyro_Y+0xde>
		}default:{
			break;
 8007fc4:	bf00      	nop
		}

	}

	return GYROY_R;
 8007fc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fca:	f7f8 fe25 	bl	8000c18 <__aeabi_d2f>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	ee07 3a90 	vmov	s15, r3

}
 8007fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40508000 	.word	0x40508000
 8007fe4:	40408000 	.word	0x40408000
 8007fe8:	40300000 	.word	0x40300000
 8007fec:	00000000 	.word	0x00000000
 8007ff0:	40606000 	.word	0x40606000
 8007ff4:	00000000 	.word	0x00000000

08007ff8 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	f04f 0300 	mov.w	r3, #0
 8008014:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8008018:	2147      	movs	r1, #71	; 0x47
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff fe67 	bl	8007cee <readData>
 8008020:	4603      	mov	r3, r0
 8008022:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8008024:	2148      	movs	r1, #72	; 0x48
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fe61 	bl	8007cee <readData>
 800802c:	4603      	mov	r3, r0
 800802e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8008030:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b21a      	sxth	r2, r3
 8008038:	89bb      	ldrh	r3, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d846      	bhi.n	80080d4 <readGyro_Z+0xdc>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <readGyro_Z+0x54>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	0800805d 	.word	0x0800805d
 8008050:	0800807b 	.word	0x0800807b
 8008054:	08008099 	.word	0x08008099
 8008058:	080080b7 	.word	0x080080b7
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 800805c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008060:	4618      	mov	r0, r3
 8008062:	f7f8 fa77 	bl	8000554 <__aeabi_i2d>
 8008066:	a325      	add	r3, pc, #148	; (adr r3, 80080fc <readGyro_Z+0x104>)
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f7f8 fc06 	bl	800087c <__aeabi_ddiv>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008078:	e02d      	b.n	80080d6 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 800807a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800807e:	4618      	mov	r0, r3
 8008080:	f7f8 fa68 	bl	8000554 <__aeabi_i2d>
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	4b19      	ldr	r3, [pc, #100]	; (80080f0 <readGyro_Z+0xf8>)
 800808a:	f7f8 fbf7 	bl	800087c <__aeabi_ddiv>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008096:	e01e      	b.n	80080d6 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8008098:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800809c:	4618      	mov	r0, r3
 800809e:	f7f8 fa59 	bl	8000554 <__aeabi_i2d>
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <readGyro_Z+0xfc>)
 80080a8:	f7f8 fbe8 	bl	800087c <__aeabi_ddiv>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80080b4:	e00f      	b.n	80080d6 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 80080b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7f8 fa4a 	bl	8000554 <__aeabi_i2d>
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <readGyro_Z+0x100>)
 80080c6:	f7f8 fbd9 	bl	800087c <__aeabi_ddiv>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80080d2:	e000      	b.n	80080d6 <readGyro_Z+0xde>
		}default:{
			break;
 80080d4:	bf00      	nop
		}

	}

	return GYROZ_R;
 80080d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080da:	f7f8 fd9d 	bl	8000c18 <__aeabi_d2f>
 80080de:	4603      	mov	r3, r0
 80080e0:	ee07 3a90 	vmov	s15, r3

}
 80080e4:	eeb0 0a67 	vmov.f32	s0, s15
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	40508000 	.word	0x40508000
 80080f4:	40408000 	.word	0x40408000
 80080f8:	40300000 	.word	0x40300000
 80080fc:	00000000 	.word	0x00000000
 8008100:	40606000 	.word	0x40606000

08008104 <distance_to_straight_line>:
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
}

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008104:	b5b0      	push	{r4, r5, r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af00      	add	r7, sp, #0
 800810a:	6178      	str	r0, [r7, #20]
 800810c:	ed87 0b02 	vstr	d0, [r7, #8]
 8008110:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800811a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800811e:	f7f8 fa83 	bl	8000628 <__aeabi_dmul>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4614      	mov	r4, r2
 8008128:	461d      	mov	r5, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008134:	f7f8 fa78 	bl	8000628 <__aeabi_dmul>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 f8bc 	bl	80002bc <__adddf3>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4610      	mov	r0, r2
 800814a:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008152:	f7f8 f8b3 	bl	80002bc <__adddf3>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4610      	mov	r0, r2
 800815c:	4619      	mov	r1, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f7f8 fb8a 	bl	800087c <__aeabi_ddiv>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800816c:	4611      	mov	r1, r2
 800816e:	61b9      	str	r1, [r7, #24]
 8008170:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008174:	61fb      	str	r3, [r7, #28]

	return distance;
 8008176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800817a:	ec43 2b17 	vmov	d7, r2, r3
}
 800817e:	eeb0 0a47 	vmov.f32	s0, s14
 8008182:	eef0 0a67 	vmov.f32	s1, s15
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bdb0      	pop	{r4, r5, r7, pc}

0800818c <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a6c      	ldr	r2, [pc, #432]	; (800834c <pwm_Config+0x1c0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d106      	bne.n	80081ac <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800819e:	4b6c      	ldr	r3, [pc, #432]	; (8008350 <pwm_Config+0x1c4>)
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	4a6b      	ldr	r2, [pc, #428]	; (8008350 <pwm_Config+0x1c4>)
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	6453      	str	r3, [r2, #68]	; 0x44
 80081aa:	e030      	b.n	800820e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b4:	d106      	bne.n	80081c4 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80081b6:	4b66      	ldr	r3, [pc, #408]	; (8008350 <pwm_Config+0x1c4>)
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	4a65      	ldr	r2, [pc, #404]	; (8008350 <pwm_Config+0x1c4>)
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	6413      	str	r3, [r2, #64]	; 0x40
 80081c2:	e024      	b.n	800820e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a62      	ldr	r2, [pc, #392]	; (8008354 <pwm_Config+0x1c8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d106      	bne.n	80081dc <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80081ce:	4b60      	ldr	r3, [pc, #384]	; (8008350 <pwm_Config+0x1c4>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	4a5f      	ldr	r2, [pc, #380]	; (8008350 <pwm_Config+0x1c4>)
 80081d4:	f043 0302 	orr.w	r3, r3, #2
 80081d8:	6413      	str	r3, [r2, #64]	; 0x40
 80081da:	e018      	b.n	800820e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a5d      	ldr	r2, [pc, #372]	; (8008358 <pwm_Config+0x1cc>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d106      	bne.n	80081f4 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80081e6:	4b5a      	ldr	r3, [pc, #360]	; (8008350 <pwm_Config+0x1c4>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	4a59      	ldr	r2, [pc, #356]	; (8008350 <pwm_Config+0x1c4>)
 80081ec:	f043 0304 	orr.w	r3, r3, #4
 80081f0:	6413      	str	r3, [r2, #64]	; 0x40
 80081f2:	e00c      	b.n	800820e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a58      	ldr	r2, [pc, #352]	; (800835c <pwm_Config+0x1d0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d106      	bne.n	800820c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80081fe:	4b54      	ldr	r3, [pc, #336]	; (8008350 <pwm_Config+0x1c4>)
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	4a53      	ldr	r2, [pc, #332]	; (8008350 <pwm_Config+0x1c4>)
 8008204:	f043 0308 	orr.w	r3, r3, #8
 8008208:	6413      	str	r3, [r2, #64]	; 0x40
 800820a:	e000      	b.n	800820e <pwm_Config+0x82>
	}
	else{
		__NOP();
 800820c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800821c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	7d5b      	ldrb	r3, [r3, #21]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f930 	bl	800848c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fa3f 	bl	80086b0 <setDuttyCycle>
 8008232:	e005      	b.n	8008240 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f929 	bl	800848c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fb10 	bl	8008860 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0210 	bic.w	r2, r2, #16
 800824e:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2200      	movs	r2, #0
 8008256:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	791b      	ldrb	r3, [r3, #4]
 800825c:	2b03      	cmp	r3, #3
 800825e:	d86f      	bhi.n	8008340 <pwm_Config+0x1b4>
 8008260:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <pwm_Config+0xdc>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	08008279 	.word	0x08008279
 800826c:	080082ab 	.word	0x080082ab
 8008270:	080082dd 	.word	0x080082dd
 8008274:	0800830f 	.word	0x0800830f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0203 	bic.w	r2, r2, #3
 8008286:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008296:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0208 	orr.w	r2, r2, #8
 80082a6:	619a      	str	r2, [r3, #24]


		break;
 80082a8:	e04b      	b.n	8008342 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80082b8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80082c8:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699a      	ldr	r2, [r3, #24]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082d8:	619a      	str	r2, [r3, #24]

		break;
 80082da:	e032      	b.n	8008342 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69da      	ldr	r2, [r3, #28]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0203 	bic.w	r2, r2, #3
 80082ea:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69da      	ldr	r2, [r3, #28]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80082fa:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0208 	orr.w	r2, r2, #8
 800830a:	61da      	str	r2, [r3, #28]

		break;
 800830c:	e019      	b.n	8008342 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800831c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800832c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69da      	ldr	r2, [r3, #28]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800833c:	61da      	str	r2, [r3, #28]

		break;
 800833e:	e000      	b.n	8008342 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8008340:	bf00      	nop
	}// fin del switch-case




}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40010000 	.word	0x40010000
 8008350:	40023800 	.word	0x40023800
 8008354:	40000400 	.word	0x40000400
 8008358:	40000800 	.word	0x40000800
 800835c:	40000c00 	.word	0x40000c00

08008360 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a3d      	ldr	r2, [pc, #244]	; (8008488 <enableOutput+0x104>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d13a      	bne.n	800840c <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083a4:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	791b      	ldrb	r3, [r3, #4]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d862      	bhi.n	8008474 <enableOutput+0xf0>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <enableOutput+0x30>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083d7 	.word	0x080083d7
 80083bc:	080083e9 	.word	0x080083e9
 80083c0:	080083fb 	.word	0x080083fb
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6a1a      	ldr	r2, [r3, #32]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f042 0201 	orr.w	r2, r2, #1
 80083d2:	621a      	str	r2, [r3, #32]

				break;
 80083d4:	e051      	b.n	800847a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f042 0210 	orr.w	r2, r2, #16
 80083e4:	621a      	str	r2, [r3, #32]

				break;
 80083e6:	e048      	b.n	800847a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6a1a      	ldr	r2, [r3, #32]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083f6:	621a      	str	r2, [r3, #32]

				break;
 80083f8:	e03f      	b.n	800847a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6a1a      	ldr	r2, [r3, #32]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008408:	621a      	str	r2, [r3, #32]

				break;
 800840a:	e036      	b.n	800847a <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	791b      	ldrb	r3, [r3, #4]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d831      	bhi.n	8008478 <enableOutput+0xf4>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <enableOutput+0x98>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	0800842d 	.word	0x0800842d
 8008420:	0800843f 	.word	0x0800843f
 8008424:	08008451 	.word	0x08008451
 8008428:	08008463 	.word	0x08008463
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6a1a      	ldr	r2, [r3, #32]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	621a      	str	r2, [r3, #32]

				break;
 800843c:	e01d      	b.n	800847a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0210 	orr.w	r2, r2, #16
 800844c:	621a      	str	r2, [r3, #32]

				break;
 800844e:	e014      	b.n	800847a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a1a      	ldr	r2, [r3, #32]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800845e:	621a      	str	r2, [r3, #32]

				break;
 8008460:	e00b      	b.n	800847a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008470:	621a      	str	r2, [r3, #32]

				break;
 8008472:	e002      	b.n	800847a <enableOutput+0xf6>
				break;
 8008474:	bf00      	nop
 8008476:	e000      	b.n	800847a <enableOutput+0xf6>
			}

			default: {
				break;
 8008478:	bf00      	nop
			}

		}
	}
	return SET;
 800847a:	2301      	movs	r3, #1
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	40010000 	.word	0x40010000

0800848c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6892      	ldr	r2, [r2, #8]
 80084a0:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d01a      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b14      	cmp	r3, #20
 80084b2:	d017      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b1e      	cmp	r3, #30
 80084b8:	d014      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b28      	cmp	r3, #40	; 0x28
 80084be:	d011      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b32      	cmp	r3, #50	; 0x32
 80084c4:	d00e      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b3c      	cmp	r3, #60	; 0x3c
 80084ca:	d00b      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b46      	cmp	r3, #70	; 0x46
 80084d0:	d008      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	d005      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b5a      	cmp	r3, #90	; 0x5a
 80084dc:	d002      	beq.n	80084e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b64      	cmp	r3, #100	; 0x64
 80084e2:	d111      	bne.n	8008508 <setFrequency+0x7c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	899b      	ldrh	r3, [r3, #12]
 80084e8:	461a      	mov	r2, r3
 80084ea:	0152      	lsls	r2, r2, #5
 80084ec:	1ad2      	subs	r2, r2, r3
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	4b68      	ldr	r3, [pc, #416]	; (8008698 <setFrequency+0x20c>)
 80084f8:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80084fa:	4b67      	ldr	r3, [pc, #412]	; (8008698 <setFrequency+0x20c>)
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	1e5a      	subs	r2, r3, #1
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	62da      	str	r2, [r3, #44]	; 0x2c
 8008506:	e0c0      	b.n	800868a <setFrequency+0x1fe>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2ba0      	cmp	r3, #160	; 0xa0
 800850c:	d022      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2bc8      	cmp	r3, #200	; 0xc8
 8008512:	d01f      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800851a:	d01b      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008522:	d017      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800852a:	d013      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008532:	d00f      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800853a:	d00b      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008542:	d007      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800854a:	d003      	beq.n	8008554 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008552:	d114      	bne.n	800857e <setFrequency+0xf2>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	899b      	ldrh	r3, [r3, #12]
 8008558:	461a      	mov	r2, r3
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	4413      	add	r3, r2
 800855e:	461a      	mov	r2, r3
 8008560:	0091      	lsls	r1, r2, #2
 8008562:	461a      	mov	r2, r3
 8008564:	460b      	mov	r3, r1
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	b29a      	uxth	r2, r3
 800856c:	4b4a      	ldr	r3, [pc, #296]	; (8008698 <setFrequency+0x20c>)
 800856e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008570:	4b49      	ldr	r3, [pc, #292]	; (8008698 <setFrequency+0x20c>)
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	62da      	str	r2, [r3, #44]	; 0x2c
 800857c:	e085      	b.n	800868a <setFrequency+0x1fe>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008584:	d029      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800858c:	d025      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_30MHz_100us)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008594:	4293      	cmp	r3, r2
 8008596:	d020      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800859e:	d01c      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_50MHz_100us)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d017      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_60MHz_100us)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f241 7270 	movw	r2, #6000	; 0x1770
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d012      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_70MHz_100us)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00d      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_80MHz_100us)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80085c4:	d009      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_90MHz_100us)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f242 3228 	movw	r2, #9000	; 0x2328
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d004      	beq.n	80085da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d10f      	bne.n	80085fa <setFrequency+0x16e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	899b      	ldrh	r3, [r3, #12]
 80085de:	461a      	mov	r2, r3
 80085e0:	0092      	lsls	r2, r2, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	4b2b      	ldr	r3, [pc, #172]	; (8008698 <setFrequency+0x20c>)
 80085ea:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80085ec:	4b2a      	ldr	r3, [pc, #168]	; (8008698 <setFrequency+0x20c>)
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	1e5a      	subs	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80085f8:	e047      	b.n	800868a <setFrequency+0x1fe>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008600:	d028      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008608:	4293      	cmp	r3, r2
 800860a:	d023      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f247 5230 	movw	r2, #30000	; 0x7530
 8008612:	4293      	cmp	r3, r2
 8008614:	d01e      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f649 4240 	movw	r2, #40000	; 0x9c40
 800861c:	4293      	cmp	r3, r2
 800861e:	d019      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008626:	4293      	cmp	r3, r2
 8008628:	d014      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008630:	4293      	cmp	r3, r2
 8008632:	d00f      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4a19      	ldr	r2, [pc, #100]	; (800869c <setFrequency+0x210>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00b      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4a18      	ldr	r2, [pc, #96]	; (80086a0 <setFrequency+0x214>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d007      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <setFrequency+0x218>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <setFrequency+0x21c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d10a      	bne.n	800866a <setFrequency+0x1de>

		periodo = ptrPwmHandler->config.periodo;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	899a      	ldrh	r2, [r3, #12]
 8008658:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <setFrequency+0x20c>)
 800865a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <setFrequency+0x20c>)
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	1e5a      	subs	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	62da      	str	r2, [r3, #44]	; 0x2c
 8008668:	e00f      	b.n	800868a <setFrequency+0x1fe>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	899b      	ldrh	r3, [r3, #12]
 800866e:	4a0f      	ldr	r2, [pc, #60]	; (80086ac <setFrequency+0x220>)
 8008670:	fba2 2303 	umull	r2, r3, r2, r3
 8008674:	091b      	lsrs	r3, r3, #4
 8008676:	b29a      	uxth	r2, r3
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <setFrequency+0x20c>)
 800867a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <setFrequency+0x20c>)
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	1e5a      	subs	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	200133a4 	.word	0x200133a4
 800869c:	00011170 	.word	0x00011170
 80086a0:	00013880 	.word	0x00013880
 80086a4:	00015f90 	.word	0x00015f90
 80086a8:	000186a0 	.word	0x000186a0
 80086ac:	cccccccd 	.word	0xcccccccd

080086b0 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80086b0:	b590      	push	{r4, r7, lr}
 80086b2:	b08b      	sub	sp, #44	; 0x2c
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	791b      	ldrb	r3, [r3, #4]
 80086bc:	2b03      	cmp	r3, #3
 80086be:	f200 80c3 	bhi.w	8008848 <setDuttyCycle+0x198>
 80086c2:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <setDuttyCycle+0x18>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086d9 	.word	0x080086d9
 80086cc:	08008735 	.word	0x08008735
 80086d0:	08008791 	.word	0x08008791
 80086d4:	080087ed 	.word	0x080087ed
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	ed93 7a04 	vldr	s14, [r3, #16]
 80086de:	4b5d      	ldr	r3, [pc, #372]	; (8008854 <setDuttyCycle+0x1a4>)
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ee:	ee17 0a90 	vmov	r0, s15
 80086f2:	f7f7 ff41 	bl	8000578 <__aeabi_f2d>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 80086fe:	f04f 0200 	mov.w	r2, #0
 8008702:	4b55      	ldr	r3, [pc, #340]	; (8008858 <setDuttyCycle+0x1a8>)
 8008704:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008708:	f7f8 f8b8 	bl	800087c <__aeabi_ddiv>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4610      	mov	r0, r2
 8008712:	4619      	mov	r1, r3
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	4b50      	ldr	r3, [pc, #320]	; (800885c <setDuttyCycle+0x1ac>)
 800871a:	f7f7 fdcd 	bl	80002b8 <__aeabi_dsub>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4610      	mov	r0, r2
 8008724:	4619      	mov	r1, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681c      	ldr	r4, [r3, #0]
 800872a:	f7f8 fa55 	bl	8000bd8 <__aeabi_d2uiz>
 800872e:	4603      	mov	r3, r0
 8008730:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008732:	e08a      	b.n	800884a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	ed93 7a04 	vldr	s14, [r3, #16]
 800873a:	4b46      	ldr	r3, [pc, #280]	; (8008854 <setDuttyCycle+0x1a4>)
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874a:	ee17 0a90 	vmov	r0, s15
 800874e:	f7f7 ff13 	bl	8000578 <__aeabi_f2d>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800875a:	f04f 0200 	mov.w	r2, #0
 800875e:	4b3e      	ldr	r3, [pc, #248]	; (8008858 <setDuttyCycle+0x1a8>)
 8008760:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008764:	f7f8 f88a 	bl	800087c <__aeabi_ddiv>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4610      	mov	r0, r2
 800876e:	4619      	mov	r1, r3
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	4b39      	ldr	r3, [pc, #228]	; (800885c <setDuttyCycle+0x1ac>)
 8008776:	f7f7 fd9f 	bl	80002b8 <__aeabi_dsub>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4610      	mov	r0, r2
 8008780:	4619      	mov	r1, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681c      	ldr	r4, [r3, #0]
 8008786:	f7f8 fa27 	bl	8000bd8 <__aeabi_d2uiz>
 800878a:	4603      	mov	r3, r0
 800878c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800878e:	e05c      	b.n	800884a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	ed93 7a04 	vldr	s14, [r3, #16]
 8008796:	4b2f      	ldr	r3, [pc, #188]	; (8008854 <setDuttyCycle+0x1a4>)
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a6:	ee17 0a90 	vmov	r0, s15
 80087aa:	f7f7 fee5 	bl	8000578 <__aeabi_f2d>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	4b27      	ldr	r3, [pc, #156]	; (8008858 <setDuttyCycle+0x1a8>)
 80087bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087c0:	f7f8 f85c 	bl	800087c <__aeabi_ddiv>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4610      	mov	r0, r2
 80087ca:	4619      	mov	r1, r3
 80087cc:	f04f 0200 	mov.w	r2, #0
 80087d0:	4b22      	ldr	r3, [pc, #136]	; (800885c <setDuttyCycle+0x1ac>)
 80087d2:	f7f7 fd71 	bl	80002b8 <__aeabi_dsub>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4610      	mov	r0, r2
 80087dc:	4619      	mov	r1, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681c      	ldr	r4, [r3, #0]
 80087e2:	f7f8 f9f9 	bl	8000bd8 <__aeabi_d2uiz>
 80087e6:	4603      	mov	r3, r0
 80087e8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80087ea:	e02e      	b.n	800884a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80087f2:	4b18      	ldr	r3, [pc, #96]	; (8008854 <setDuttyCycle+0x1a4>)
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008802:	ee17 0a90 	vmov	r0, s15
 8008806:	f7f7 feb7 	bl	8000578 <__aeabi_f2d>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <setDuttyCycle+0x1a8>)
 8008818:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800881c:	f7f8 f82e 	bl	800087c <__aeabi_ddiv>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4610      	mov	r0, r2
 8008826:	4619      	mov	r1, r3
 8008828:	f04f 0200 	mov.w	r2, #0
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <setDuttyCycle+0x1ac>)
 800882e:	f7f7 fd43 	bl	80002b8 <__aeabi_dsub>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681c      	ldr	r4, [r3, #0]
 800883e:	f7f8 f9cb 	bl	8000bd8 <__aeabi_d2uiz>
 8008842:	4603      	mov	r3, r0
 8008844:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008846:	e000      	b.n	800884a <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8008848:	bf00      	nop
	}

	}// fin del switch-case

}
 800884a:	bf00      	nop
 800884c:	372c      	adds	r7, #44	; 0x2c
 800884e:	46bd      	mov	sp, r7
 8008850:	bd90      	pop	{r4, r7, pc}
 8008852:	bf00      	nop
 8008854:	200133a4 	.word	0x200133a4
 8008858:	40590000 	.word	0x40590000
 800885c:	3ff00000 	.word	0x3ff00000

08008860 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b08b      	sub	sp, #44	; 0x2c
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	791b      	ldrb	r3, [r3, #4]
 800886c:	2b03      	cmp	r3, #3
 800886e:	f200 80d3 	bhi.w	8008a18 <setDuttyCycleAfOpt+0x1b8>
 8008872:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <setDuttyCycleAfOpt+0x18>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	08008889 	.word	0x08008889
 800887c:	080088ed 	.word	0x080088ed
 8008880:	08008951 	.word	0x08008951
 8008884:	080089b5 	.word	0x080089b5
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	edd3 7a04 	vldr	s15, [r3, #16]
 800888e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8008a24 <setDuttyCycleAfOpt+0x1c4>
 8008892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008896:	4b64      	ldr	r3, [pc, #400]	; (8008a28 <setDuttyCycleAfOpt+0x1c8>)
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a6:	ee17 0a90 	vmov	r0, s15
 80088aa:	f7f7 fe65 	bl	8000578 <__aeabi_f2d>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 80088b6:	f04f 0200 	mov.w	r2, #0
 80088ba:	4b5c      	ldr	r3, [pc, #368]	; (8008a2c <setDuttyCycleAfOpt+0x1cc>)
 80088bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088c0:	f7f7 ffdc 	bl	800087c <__aeabi_ddiv>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4610      	mov	r0, r2
 80088ca:	4619      	mov	r1, r3
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	4b57      	ldr	r3, [pc, #348]	; (8008a30 <setDuttyCycleAfOpt+0x1d0>)
 80088d2:	f7f7 fcf1 	bl	80002b8 <__aeabi_dsub>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681c      	ldr	r4, [r3, #0]
 80088e2:	f7f8 f979 	bl	8000bd8 <__aeabi_d2uiz>
 80088e6:	4603      	mov	r3, r0
 80088e8:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80088ea:	e096      	b.n	8008a1a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80088f2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008a24 <setDuttyCycleAfOpt+0x1c4>
 80088f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088fa:	4b4b      	ldr	r3, [pc, #300]	; (8008a28 <setDuttyCycleAfOpt+0x1c8>)
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890a:	ee17 0a90 	vmov	r0, s15
 800890e:	f7f7 fe33 	bl	8000578 <__aeabi_f2d>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 800891a:	f04f 0200 	mov.w	r2, #0
 800891e:	4b43      	ldr	r3, [pc, #268]	; (8008a2c <setDuttyCycleAfOpt+0x1cc>)
 8008920:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008924:	f7f7 ffaa 	bl	800087c <__aeabi_ddiv>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4610      	mov	r0, r2
 800892e:	4619      	mov	r1, r3
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	4b3e      	ldr	r3, [pc, #248]	; (8008a30 <setDuttyCycleAfOpt+0x1d0>)
 8008936:	f7f7 fcbf 	bl	80002b8 <__aeabi_dsub>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681c      	ldr	r4, [r3, #0]
 8008946:	f7f8 f947 	bl	8000bd8 <__aeabi_d2uiz>
 800894a:	4603      	mov	r3, r0
 800894c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800894e:	e064      	b.n	8008a1a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	edd3 7a04 	vldr	s15, [r3, #16]
 8008956:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008a24 <setDuttyCycleAfOpt+0x1c4>
 800895a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800895e:	4b32      	ldr	r3, [pc, #200]	; (8008a28 <setDuttyCycleAfOpt+0x1c8>)
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	ee17 0a90 	vmov	r0, s15
 8008972:	f7f7 fe01 	bl	8000578 <__aeabi_f2d>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	4b2a      	ldr	r3, [pc, #168]	; (8008a2c <setDuttyCycleAfOpt+0x1cc>)
 8008984:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008988:	f7f7 ff78 	bl	800087c <__aeabi_ddiv>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4610      	mov	r0, r2
 8008992:	4619      	mov	r1, r3
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <setDuttyCycleAfOpt+0x1d0>)
 800899a:	f7f7 fc8d 	bl	80002b8 <__aeabi_dsub>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4610      	mov	r0, r2
 80089a4:	4619      	mov	r1, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681c      	ldr	r4, [r3, #0]
 80089aa:	f7f8 f915 	bl	8000bd8 <__aeabi_d2uiz>
 80089ae:	4603      	mov	r3, r0
 80089b0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80089b2:	e032      	b.n	8008a1a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80089ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008a24 <setDuttyCycleAfOpt+0x1c4>
 80089be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089c2:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <setDuttyCycleAfOpt+0x1c8>)
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d2:	ee17 0a90 	vmov	r0, s15
 80089d6:	f7f7 fdcf 	bl	8000578 <__aeabi_f2d>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <setDuttyCycleAfOpt+0x1cc>)
 80089e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80089ec:	f7f7 ff46 	bl	800087c <__aeabi_ddiv>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4610      	mov	r0, r2
 80089f6:	4619      	mov	r1, r3
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <setDuttyCycleAfOpt+0x1d0>)
 80089fe:	f7f7 fc5b 	bl	80002b8 <__aeabi_dsub>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4610      	mov	r0, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681c      	ldr	r4, [r3, #0]
 8008a0e:	f7f8 f8e3 	bl	8000bd8 <__aeabi_d2uiz>
 8008a12:	4603      	mov	r3, r0
 8008a14:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008a16:	e000      	b.n	8008a1a <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8008a18:	bf00      	nop
	}

	}// fin del switch-case


}
 8008a1a:	bf00      	nop
 8008a1c:	372c      	adds	r7, #44	; 0x2c
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd90      	pop	{r4, r7, pc}
 8008a22:	bf00      	nop
 8008a24:	42c80000 	.word	0x42c80000
 8008a28:	200133a4 	.word	0x200133a4
 8008a2c:	40590000 	.word	0x40590000
 8008a30:	3ff00000 	.word	0x3ff00000

08008a34 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	791b      	ldrb	r3, [r3, #4]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d82f      	bhi.n	8008aa4 <disableOutput+0x70>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <disableOutput+0x18>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a6f 	.word	0x08008a6f
 8008a54:	08008a81 	.word	0x08008a81
 8008a58:	08008a93 	.word	0x08008a93
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0201 	bic.w	r2, r2, #1
 8008a6a:	621a      	str	r2, [r3, #32]

			break;
 8008a6c:	e01b      	b.n	8008aa6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6a1a      	ldr	r2, [r3, #32]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0210 	bic.w	r2, r2, #16
 8008a7c:	621a      	str	r2, [r3, #32]

			break;
 8008a7e:	e012      	b.n	8008aa6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6a1a      	ldr	r2, [r3, #32]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a8e:	621a      	str	r2, [r3, #32]

			break;
 8008a90:	e009      	b.n	8008aa6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6a1a      	ldr	r2, [r3, #32]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008aa0:	621a      	str	r2, [r3, #32]

			break;
 8008aa2:	e000      	b.n	8008aa6 <disableOutput+0x72>
		}

		default: {
			break;
 8008aa4:	bf00      	nop
		}
		}

	return RESET;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d82f      	bhi.n	8008b24 <PWMx_Toggle+0x70>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <PWMx_Toggle+0x18>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008add 	.word	0x08008add
 8008ad0:	08008aef 	.word	0x08008aef
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b13 	.word	0x08008b13
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6a1a      	ldr	r2, [r3, #32]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f082 0202 	eor.w	r2, r2, #2
 8008aea:	621a      	str	r2, [r3, #32]

				break;
 8008aec:	e01b      	b.n	8008b26 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6a1a      	ldr	r2, [r3, #32]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f082 0220 	eor.w	r2, r2, #32
 8008afc:	621a      	str	r2, [r3, #32]

				break;
 8008afe:	e012      	b.n	8008b26 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8008b0e:	621a      	str	r2, [r3, #32]

				break;
 8008b10:	e009      	b.n	8008b26 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8008b20:	621a      	str	r2, [r3, #32]

				break;
 8008b22:	e000      	b.n	8008b26 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 8008b24:	bf00      	nop
			}
			}


}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop

08008b34 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8008b3e:	4b92      	ldr	r3, [pc, #584]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a91      	ldr	r2, [pc, #580]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b48:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008b4a:	4b8f      	ldr	r3, [pc, #572]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b50:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8008b52:	4b8e      	ldr	r3, [pc, #568]	; (8008d8c <RCC_enableMaxFrequencies+0x258>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a8d      	ldr	r2, [pc, #564]	; (8008d8c <RCC_enableMaxFrequencies+0x258>)
 8008b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b5c:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8008b5e:	4b8a      	ldr	r3, [pc, #552]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	4a89      	ldr	r2, [pc, #548]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008b64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008b68:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	f200 82fc 	bhi.w	800916a <RCC_enableMaxFrequencies+0x636>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <RCC_enableMaxFrequencies+0x44>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008c3f 	.word	0x08008c3f
 8008b80:	08008ce1 	.word	0x08008ce1
 8008b84:	08008d95 	.word	0x08008d95
 8008b88:	08008e37 	.word	0x08008e37
 8008b8c:	08008ed9 	.word	0x08008ed9
 8008b90:	08008f85 	.word	0x08008f85
 8008b94:	08009027 	.word	0x08009027
 8008b98:	080090c9 	.word	0x080090c9
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008b9c:	4b7a      	ldr	r3, [pc, #488]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4a79      	ldr	r2, [pc, #484]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ba6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008ba8:	4b77      	ldr	r3, [pc, #476]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4a76      	ldr	r2, [pc, #472]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bae:	f043 0310 	orr.w	r3, r3, #16
 8008bb2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008bb4:	4b74      	ldr	r3, [pc, #464]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	4a73      	ldr	r2, [pc, #460]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008bc4:	4b70      	ldr	r3, [pc, #448]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a6f      	ldr	r2, [pc, #444]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bca:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008bce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008bd0:	4b6d      	ldr	r3, [pc, #436]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4a6c      	ldr	r2, [pc, #432]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008bda:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008bdc:	4b6a      	ldr	r3, [pc, #424]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a69      	ldr	r2, [pc, #420]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008be6:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008be8:	4b67      	ldr	r3, [pc, #412]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	4a66      	ldr	r2, [pc, #408]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bf2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008bf4:	4b64      	ldr	r3, [pc, #400]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	4a63      	ldr	r2, [pc, #396]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008bfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bfe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008c00:	4b61      	ldr	r3, [pc, #388]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	4a60      	ldr	r2, [pc, #384]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c0a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008c0c:	4b5e      	ldr	r3, [pc, #376]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a5d      	ldr	r2, [pc, #372]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c16:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008c18:	e000      	b.n	8008c1c <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8008c1a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008c1c:	4b5a      	ldr	r3, [pc, #360]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0f8      	beq.n	8008c1a <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008c28:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a58      	ldr	r2, [pc, #352]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008c2e:	f023 030f 	bic.w	r3, r3, #15
 8008c32:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008c34:	4b56      	ldr	r3, [pc, #344]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008c36:	4a56      	ldr	r2, [pc, #344]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6013      	str	r3, [r2, #0]

			break;
 8008c3c:	e296      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008c3e:	4b52      	ldr	r3, [pc, #328]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4a51      	ldr	r2, [pc, #324]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c48:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008c4a:	4b4f      	ldr	r3, [pc, #316]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4a4e      	ldr	r2, [pc, #312]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c50:	f043 0310 	orr.w	r3, r3, #16
 8008c54:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008c56:	4b4c      	ldr	r3, [pc, #304]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4a4b      	ldr	r2, [pc, #300]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c64:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008c66:	4b48      	ldr	r3, [pc, #288]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4a47      	ldr	r2, [pc, #284]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c6c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008c70:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008c72:	4b45      	ldr	r3, [pc, #276]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	4a44      	ldr	r2, [pc, #272]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008c7c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8008c7e:	4b42      	ldr	r3, [pc, #264]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	4a41      	ldr	r2, [pc, #260]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c88:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008c8a:	4b3f      	ldr	r3, [pc, #252]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	4a3e      	ldr	r2, [pc, #248]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c94:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008c96:	4b3c      	ldr	r3, [pc, #240]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	4a3b      	ldr	r2, [pc, #236]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ca0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008ca2:	4b39      	ldr	r3, [pc, #228]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	4a38      	ldr	r2, [pc, #224]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cac:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008cae:	4b36      	ldr	r3, [pc, #216]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a35      	ldr	r2, [pc, #212]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cb8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008cba:	e000      	b.n	8008cbe <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8008cbc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008cbe:	4b32      	ldr	r3, [pc, #200]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0f8      	beq.n	8008cbc <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008cca:	4b31      	ldr	r3, [pc, #196]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a30      	ldr	r2, [pc, #192]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008cd0:	f023 030f 	bic.w	r3, r3, #15
 8008cd4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008cd6:	4b2e      	ldr	r3, [pc, #184]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008cd8:	4a2d      	ldr	r2, [pc, #180]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6013      	str	r3, [r2, #0]

			break;
 8008cde:	e245      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008ce0:	4b29      	ldr	r3, [pc, #164]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4a28      	ldr	r2, [pc, #160]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008cec:	4b26      	ldr	r3, [pc, #152]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	4a25      	ldr	r2, [pc, #148]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008cf2:	f043 0310 	orr.w	r3, r3, #16
 8008cf6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008cf8:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a22      	ldr	r2, [pc, #136]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008cfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8008d08:	4b1f      	ldr	r3, [pc, #124]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	4a1e      	ldr	r2, [pc, #120]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d0e:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8008d12:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008d14:	4b1c      	ldr	r3, [pc, #112]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	4a1b      	ldr	r2, [pc, #108]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008d1e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008d20:	4b19      	ldr	r3, [pc, #100]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	4a18      	ldr	r2, [pc, #96]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d2a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008d2c:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	4a15      	ldr	r2, [pc, #84]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d36:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008d38:	4b13      	ldr	r3, [pc, #76]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	4a12      	ldr	r2, [pc, #72]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d42:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008d44:	4b10      	ldr	r3, [pc, #64]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	4a0f      	ldr	r2, [pc, #60]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d4e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008d50:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a0c      	ldr	r2, [pc, #48]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d5a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008d5c:	e000      	b.n	8008d60 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8008d5e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008d60:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <RCC_enableMaxFrequencies+0x254>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0f8      	beq.n	8008d5e <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008d6c:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a07      	ldr	r2, [pc, #28]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008d72:	f023 030f 	bic.w	r3, r3, #15
 8008d76:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a04      	ldr	r2, [pc, #16]	; (8008d90 <RCC_enableMaxFrequencies+0x25c>)
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	6013      	str	r3, [r2, #0]


			break;
 8008d84:	e1f2      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
 8008d86:	bf00      	nop
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	40007000 	.word	0x40007000
 8008d90:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008d94:	4b79      	ldr	r3, [pc, #484]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	4a78      	ldr	r2, [pc, #480]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d9e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008da0:	4b76      	ldr	r3, [pc, #472]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	4a75      	ldr	r2, [pc, #468]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008da6:	f043 0310 	orr.w	r3, r3, #16
 8008daa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008dac:	4b73      	ldr	r3, [pc, #460]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a72      	ldr	r2, [pc, #456]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008db2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8008dbc:	4b6f      	ldr	r3, [pc, #444]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	4a6e      	ldr	r2, [pc, #440]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dc2:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8008dc6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008dc8:	4b6c      	ldr	r3, [pc, #432]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	4a6b      	ldr	r2, [pc, #428]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008dd2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008dd4:	4b69      	ldr	r3, [pc, #420]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dd6:	4a69      	ldr	r2, [pc, #420]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008ddc:	4b67      	ldr	r3, [pc, #412]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	4a66      	ldr	r2, [pc, #408]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008de8:	4b64      	ldr	r3, [pc, #400]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	4a63      	ldr	r2, [pc, #396]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008df2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008df4:	4b61      	ldr	r3, [pc, #388]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	4a60      	ldr	r2, [pc, #384]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dfe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008e00:	4b5e      	ldr	r3, [pc, #376]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a5d      	ldr	r2, [pc, #372]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e0a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008e0c:	e000      	b.n	8008e10 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8008e0e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008e10:	4b5a      	ldr	r3, [pc, #360]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0f8      	beq.n	8008e0e <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008e1c:	4b58      	ldr	r3, [pc, #352]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a57      	ldr	r2, [pc, #348]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008e22:	f023 030f 	bic.w	r3, r3, #15
 8008e26:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008e28:	4b55      	ldr	r3, [pc, #340]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a54      	ldr	r2, [pc, #336]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	6013      	str	r3, [r2, #0]

			break;
 8008e34:	e19a      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008e36:	4b51      	ldr	r3, [pc, #324]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	4a50      	ldr	r2, [pc, #320]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e40:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008e42:	4b4e      	ldr	r3, [pc, #312]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	4a4d      	ldr	r2, [pc, #308]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e48:	f043 0310 	orr.w	r3, r3, #16
 8008e4c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008e4e:	4b4b      	ldr	r3, [pc, #300]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	4a4a      	ldr	r2, [pc, #296]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e54:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008e5e:	4b47      	ldr	r3, [pc, #284]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	4a46      	ldr	r2, [pc, #280]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e64:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008e68:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008e6a:	4b44      	ldr	r3, [pc, #272]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	4a43      	ldr	r2, [pc, #268]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e70:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008e74:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008e76:	4b41      	ldr	r3, [pc, #260]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e78:	4a40      	ldr	r2, [pc, #256]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008e7e:	4b3f      	ldr	r3, [pc, #252]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	4a3e      	ldr	r2, [pc, #248]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e88:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008e8a:	4b3c      	ldr	r3, [pc, #240]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	4a3b      	ldr	r2, [pc, #236]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e94:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008e96:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	4a38      	ldr	r2, [pc, #224]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ea0:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008ea2:	4b36      	ldr	r3, [pc, #216]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a35      	ldr	r2, [pc, #212]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eac:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008eae:	e000      	b.n	8008eb2 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8008eb0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008eb2:	4b32      	ldr	r3, [pc, #200]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f8      	beq.n	8008eb0 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008ebe:	4b30      	ldr	r3, [pc, #192]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a2f      	ldr	r2, [pc, #188]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008ec4:	f023 030f 	bic.w	r3, r3, #15
 8008ec8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008eca:	4b2d      	ldr	r3, [pc, #180]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a2c      	ldr	r2, [pc, #176]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008ed0:	f043 0301 	orr.w	r3, r3, #1
 8008ed4:	6013      	str	r3, [r2, #0]

			break;
 8008ed6:	e149      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008ed8:	4b28      	ldr	r3, [pc, #160]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	4a27      	ldr	r2, [pc, #156]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ee2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008ee4:	4b25      	ldr	r3, [pc, #148]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	4a24      	ldr	r2, [pc, #144]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008eea:	f043 0310 	orr.w	r3, r3, #16
 8008eee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008ef0:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	4a21      	ldr	r2, [pc, #132]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008ef6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f06:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8008f0a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008f0c:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	4a1a      	ldr	r2, [pc, #104]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008f16:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008f18:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f1a:	4a18      	ldr	r2, [pc, #96]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008f20:	4b16      	ldr	r3, [pc, #88]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	4a15      	ldr	r2, [pc, #84]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f2a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008f2c:	4b13      	ldr	r3, [pc, #76]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	4a12      	ldr	r2, [pc, #72]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f36:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008f38:	4b10      	ldr	r3, [pc, #64]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	4a0f      	ldr	r2, [pc, #60]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f42:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008f44:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a0c      	ldr	r2, [pc, #48]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f4e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f50:	e000      	b.n	8008f54 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8008f52:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f54:	4b09      	ldr	r3, [pc, #36]	; (8008f7c <RCC_enableMaxFrequencies+0x448>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0f8      	beq.n	8008f52 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008f60:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a06      	ldr	r2, [pc, #24]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008f66:	f023 030f 	bic.w	r3, r3, #15
 8008f6a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8008f6c:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a03      	ldr	r2, [pc, #12]	; (8008f80 <RCC_enableMaxFrequencies+0x44c>)
 8008f72:	f043 0302 	orr.w	r3, r3, #2
 8008f76:	6013      	str	r3, [r2, #0]

			break;
 8008f78:	e0f8      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
 8008f7a:	bf00      	nop
 8008f7c:	40023800 	.word	0x40023800
 8008f80:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008f84:	4b83      	ldr	r3, [pc, #524]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	4a82      	ldr	r2, [pc, #520]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008f90:	4b80      	ldr	r3, [pc, #512]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4a7f      	ldr	r2, [pc, #508]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008f96:	f043 0310 	orr.w	r3, r3, #16
 8008f9a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008f9c:	4b7d      	ldr	r3, [pc, #500]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a7c      	ldr	r2, [pc, #496]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008faa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8008fac:	4b79      	ldr	r3, [pc, #484]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a78      	ldr	r2, [pc, #480]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fb2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008fb6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008fb8:	4b76      	ldr	r3, [pc, #472]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	4a75      	ldr	r2, [pc, #468]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008fc2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008fc4:	4b73      	ldr	r3, [pc, #460]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fc6:	4a73      	ldr	r2, [pc, #460]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008fcc:	4b71      	ldr	r3, [pc, #452]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	4a70      	ldr	r2, [pc, #448]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008fd8:	4b6e      	ldr	r3, [pc, #440]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4a6d      	ldr	r2, [pc, #436]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fe2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8008fe4:	4b6b      	ldr	r3, [pc, #428]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	4a6a      	ldr	r2, [pc, #424]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fee:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008ff0:	4b68      	ldr	r3, [pc, #416]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a67      	ldr	r2, [pc, #412]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8008ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ffa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008ffc:	e000      	b.n	8009000 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8008ffe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009000:	4b64      	ldr	r3, [pc, #400]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0f8      	beq.n	8008ffe <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800900c:	4b62      	ldr	r3, [pc, #392]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a61      	ldr	r2, [pc, #388]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 8009012:	f023 030f 	bic.w	r3, r3, #15
 8009016:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009018:	4b5f      	ldr	r3, [pc, #380]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a5e      	ldr	r2, [pc, #376]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 800901e:	f043 0302 	orr.w	r3, r3, #2
 8009022:	6013      	str	r3, [r2, #0]

			break;
 8009024:	e0a2      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009026:	4b5b      	ldr	r3, [pc, #364]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	4a5a      	ldr	r2, [pc, #360]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800902c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009030:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009032:	4b58      	ldr	r3, [pc, #352]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	4a57      	ldr	r2, [pc, #348]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009038:	f043 0310 	orr.w	r3, r3, #16
 800903c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800903e:	4b55      	ldr	r3, [pc, #340]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4a54      	ldr	r2, [pc, #336]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009044:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800904c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800904e:	4b51      	ldr	r3, [pc, #324]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	4a50      	ldr	r2, [pc, #320]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009054:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8009058:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800905a:	4b4e      	ldr	r3, [pc, #312]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	4a4d      	ldr	r2, [pc, #308]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009060:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009064:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009066:	4b4b      	ldr	r3, [pc, #300]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009068:	4a4a      	ldr	r2, [pc, #296]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800906e:	4b49      	ldr	r3, [pc, #292]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	4a48      	ldr	r2, [pc, #288]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009078:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800907a:	4b46      	ldr	r3, [pc, #280]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	4a45      	ldr	r2, [pc, #276]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009084:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009086:	4b43      	ldr	r3, [pc, #268]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	4a42      	ldr	r2, [pc, #264]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800908c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009090:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009092:	4b40      	ldr	r3, [pc, #256]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a3f      	ldr	r2, [pc, #252]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800909c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800909e:	e000      	b.n	80090a2 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 80090a0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80090a2:	4b3c      	ldr	r3, [pc, #240]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0f8      	beq.n	80090a0 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80090ae:	4b3a      	ldr	r3, [pc, #232]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a39      	ldr	r2, [pc, #228]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 80090b4:	f023 030f 	bic.w	r3, r3, #15
 80090b8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80090ba:	4b37      	ldr	r3, [pc, #220]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a36      	ldr	r2, [pc, #216]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 80090c0:	f043 0302 	orr.w	r3, r3, #2
 80090c4:	6013      	str	r3, [r2, #0]

			break;
 80090c6:	e051      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80090c8:	4b32      	ldr	r3, [pc, #200]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4a31      	ldr	r2, [pc, #196]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 80090d4:	4b2f      	ldr	r3, [pc, #188]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	4a2e      	ldr	r2, [pc, #184]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090da:	f043 0308 	orr.w	r3, r3, #8
 80090de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80090e0:	4b2c      	ldr	r3, [pc, #176]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a2b      	ldr	r2, [pc, #172]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80090ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80090f0:	4b28      	ldr	r3, [pc, #160]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4a27      	ldr	r2, [pc, #156]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090f6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80090fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80090fc:	4b25      	ldr	r3, [pc, #148]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	4a24      	ldr	r2, [pc, #144]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009102:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009106:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009108:	4b22      	ldr	r3, [pc, #136]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800910a:	4a22      	ldr	r2, [pc, #136]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009110:	4b20      	ldr	r3, [pc, #128]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	4a1f      	ldr	r2, [pc, #124]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800911a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800911c:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	4a1c      	ldr	r2, [pc, #112]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009126:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009128:	4b1a      	ldr	r3, [pc, #104]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	4a19      	ldr	r2, [pc, #100]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800912e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009132:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009134:	4b17      	ldr	r3, [pc, #92]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a16      	ldr	r2, [pc, #88]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800913a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800913e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009140:	e000      	b.n	8009144 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8009142:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009144:	4b13      	ldr	r3, [pc, #76]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0f8      	beq.n	8009142 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009150:	4b11      	ldr	r3, [pc, #68]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a10      	ldr	r2, [pc, #64]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 8009156:	f023 030f 	bic.w	r3, r3, #15
 800915a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800915c:	4b0e      	ldr	r3, [pc, #56]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a0d      	ldr	r2, [pc, #52]	; (8009198 <RCC_enableMaxFrequencies+0x664>)
 8009162:	f043 0303 	orr.w	r3, r3, #3
 8009166:	6013      	str	r3, [r2, #0]

			break;
 8009168:	e000      	b.n	800916c <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800916a:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800916c:	4b09      	ldr	r3, [pc, #36]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4a08      	ldr	r2, [pc, #32]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 8009172:	f043 0302 	orr.w	r3, r3, #2
 8009176:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009178:	e000      	b.n	800917c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800917a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <RCC_enableMaxFrequencies+0x660>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0308 	and.w	r3, r3, #8
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0f8      	beq.n	800917a <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8009188:	f000 fd3e 	bl	8009c08 <SystemCoreClockUpdate>

}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	40023800 	.word	0x40023800
 8009198:	40023c00 	.word	0x40023c00

0800919c <__NVIC_EnableIRQ>:
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	db0b      	blt.n	80091c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	f003 021f 	and.w	r2, r3, #31
 80091b4:	4907      	ldr	r1, [pc, #28]	; (80091d4 <__NVIC_EnableIRQ+0x38>)
 80091b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ba:	095b      	lsrs	r3, r3, #5
 80091bc:	2001      	movs	r0, #1
 80091be:	fa00 f202 	lsl.w	r2, r0, r2
 80091c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	e000e100 	.word	0xe000e100

080091d8 <__NVIC_SetPriority>:
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	6039      	str	r1, [r7, #0]
 80091e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	db0a      	blt.n	8009202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	490c      	ldr	r1, [pc, #48]	; (8009224 <__NVIC_SetPriority+0x4c>)
 80091f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091f6:	0112      	lsls	r2, r2, #4
 80091f8:	b2d2      	uxtb	r2, r2
 80091fa:	440b      	add	r3, r1
 80091fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009200:	e00a      	b.n	8009218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	b2da      	uxtb	r2, r3
 8009206:	4908      	ldr	r1, [pc, #32]	; (8009228 <__NVIC_SetPriority+0x50>)
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	3b04      	subs	r3, #4
 8009210:	0112      	lsls	r2, r2, #4
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	440b      	add	r3, r1
 8009216:	761a      	strb	r2, [r3, #24]
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	e000e100 	.word	0xe000e100
 8009228:	e000ed00 	.word	0xe000ed00

0800922c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 800922c:	b590      	push	{r4, r7, lr}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009234:	b672      	cpsid	i
}
 8009236:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a8f      	ldr	r2, [pc, #572]	; (800947c <USART_Config+0x250>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d106      	bne.n	8009250 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8009242:	4b8f      	ldr	r3, [pc, #572]	; (8009480 <USART_Config+0x254>)
 8009244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009246:	4a8e      	ldr	r2, [pc, #568]	; (8009480 <USART_Config+0x254>)
 8009248:	f043 0310 	orr.w	r3, r3, #16
 800924c:	6453      	str	r3, [r2, #68]	; 0x44
 800924e:	e018      	b.n	8009282 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a8b      	ldr	r2, [pc, #556]	; (8009484 <USART_Config+0x258>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d106      	bne.n	8009268 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800925a:	4b89      	ldr	r3, [pc, #548]	; (8009480 <USART_Config+0x254>)
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	4a88      	ldr	r2, [pc, #544]	; (8009480 <USART_Config+0x254>)
 8009260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009264:	6413      	str	r3, [r2, #64]	; 0x40
 8009266:	e00c      	b.n	8009282 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a86      	ldr	r2, [pc, #536]	; (8009488 <USART_Config+0x25c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d106      	bne.n	8009280 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8009272:	4b83      	ldr	r3, [pc, #524]	; (8009480 <USART_Config+0x254>)
 8009274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009276:	4a82      	ldr	r2, [pc, #520]	; (8009480 <USART_Config+0x254>)
 8009278:	f043 0320 	orr.w	r3, r3, #32
 800927c:	6453      	str	r3, [r2, #68]	; 0x44
 800927e:	e000      	b.n	8009282 <USART_Config+0x56>
	}
	else{
		__NOP();
 8009280:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2200      	movs	r2, #0
 8009288:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2200      	movs	r2, #0
 8009290:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	7a5b      	ldrb	r3, [r3, #9]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d025      	beq.n	80092e6 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7a5b      	ldrb	r3, [r3, #9]
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d110      	bne.n	80092c4 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80092b0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68da      	ldr	r2, [r3, #12]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092c0:	60da      	str	r2, [r3, #12]
 80092c2:	e018      	b.n	80092f6 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092d2:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092e2:	60da      	str	r2, [r3, #12]
 80092e4:	e007      	b.n	80092f6 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f4:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7a1b      	ldrb	r3, [r3, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d108      	bne.n	8009310 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800930c:	60da      	str	r2, [r3, #12]
 800930e:	e007      	b.n	8009320 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800931e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7a9b      	ldrb	r3, [r3, #10]
 8009324:	2b03      	cmp	r3, #3
 8009326:	d82f      	bhi.n	8009388 <USART_Config+0x15c>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USART_Config+0x104>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009341 	.word	0x08009341
 8009334:	08009353 	.word	0x08009353
 8009338:	08009365 	.word	0x08009365
 800933c:	08009377 	.word	0x08009377
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691a      	ldr	r2, [r3, #16]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800934e:	611a      	str	r2, [r3, #16]
			break;
 8009350:	e023      	b.n	800939a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	691a      	ldr	r2, [r3, #16]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009360:	611a      	str	r2, [r3, #16]
			break;
 8009362:	e01a      	b.n	800939a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691a      	ldr	r2, [r3, #16]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009372:	611a      	str	r2, [r3, #16]
			break;
 8009374:	e011      	b.n	800939a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009384:	611a      	str	r2, [r3, #16]
			break;
 8009386:	e008      	b.n	800939a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009396:	611a      	str	r2, [r3, #16]
			break;
 8009398:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681c      	ldr	r4, [r3, #0]
 80093a2:	4611      	mov	r1, r2
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f8cb 	bl	8009540 <brrCalculus>
 80093aa:	4603      	mov	r3, r0
 80093ac:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	799b      	ldrb	r3, [r3, #6]
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d82e      	bhi.n	8009414 <USART_Config+0x1e8>
 80093b6:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <USART_Config+0x190>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	080093df 	.word	0x080093df
 80093c4:	080093f1 	.word	0x080093f1
 80093c8:	08009403 	.word	0x08009403
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0208 	orr.w	r2, r2, #8
 80093da:	60da      	str	r2, [r3, #12]
			break;
 80093dc:	e023      	b.n	8009426 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68da      	ldr	r2, [r3, #12]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 0204 	orr.w	r2, r2, #4
 80093ec:	60da      	str	r2, [r3, #12]
			break;
 80093ee:	e01a      	b.n	8009426 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f042 020c 	orr.w	r2, r2, #12
 80093fe:	60da      	str	r2, [r3, #12]
			break;
 8009400:	e011      	b.n	8009426 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 020c 	bic.w	r2, r2, #12
 8009410:	60da      	str	r2, [r3, #12]
			break;
 8009412:	e008      	b.n	8009426 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 020c 	bic.w	r2, r2, #12
 8009422:	60da      	str	r2, [r3, #12]
			break;
 8009424:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	799b      	ldrb	r3, [r3, #6]
 800942a:	2b03      	cmp	r3, #3
 800942c:	d008      	beq.n	8009440 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800943c:	60da      	str	r2, [r3, #12]
 800943e:	e007      	b.n	8009450 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800944e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	795b      	ldrb	r3, [r3, #5]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d12d      	bne.n	80094b4 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0220 	orr.w	r2, r2, #32
 8009466:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a03      	ldr	r2, [pc, #12]	; (800947c <USART_Config+0x250>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d10c      	bne.n	800948c <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009472:	2025      	movs	r0, #37	; 0x25
 8009474:	f7ff fe92 	bl	800919c <__NVIC_EnableIRQ>
 8009478:	e024      	b.n	80094c4 <USART_Config+0x298>
 800947a:	bf00      	nop
 800947c:	40011000 	.word	0x40011000
 8009480:	40023800 	.word	0x40023800
 8009484:	40004400 	.word	0x40004400
 8009488:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a28      	ldr	r2, [pc, #160]	; (8009534 <USART_Config+0x308>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d103      	bne.n	800949e <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009496:	2026      	movs	r0, #38	; 0x26
 8009498:	f7ff fe80 	bl	800919c <__NVIC_EnableIRQ>
 800949c:	e012      	b.n	80094c4 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a25      	ldr	r2, [pc, #148]	; (8009538 <USART_Config+0x30c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d103      	bne.n	80094b0 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80094a8:	2047      	movs	r0, #71	; 0x47
 80094aa:	f7ff fe77 	bl	800919c <__NVIC_EnableIRQ>
 80094ae:	e009      	b.n	80094c4 <USART_Config+0x298>
		}
		else{
				__NOP();
 80094b0:	bf00      	nop
 80094b2:	e007      	b.n	80094c4 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 0220 	bic.w	r2, r2, #32
 80094c2:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	791b      	ldrb	r3, [r3, #4]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d124      	bne.n	8009516 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094da:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <USART_Config+0x310>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d103      	bne.n	80094ee <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80094e6:	2025      	movs	r0, #37	; 0x25
 80094e8:	f7ff fe58 	bl	800919c <__NVIC_EnableIRQ>
 80094ec:	e01b      	b.n	8009526 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a10      	ldr	r2, [pc, #64]	; (8009534 <USART_Config+0x308>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d103      	bne.n	8009500 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 80094f8:	2026      	movs	r0, #38	; 0x26
 80094fa:	f7ff fe4f 	bl	800919c <__NVIC_EnableIRQ>
 80094fe:	e012      	b.n	8009526 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a0c      	ldr	r2, [pc, #48]	; (8009538 <USART_Config+0x30c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d103      	bne.n	8009512 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800950a:	2047      	movs	r0, #71	; 0x47
 800950c:	f7ff fe46 	bl	800919c <__NVIC_EnableIRQ>
 8009510:	e009      	b.n	8009526 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 8009512:	bf00      	nop
 8009514:	e007      	b.n	8009526 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009524:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009526:	b662      	cpsie	i
}
 8009528:	bf00      	nop
	}

	__enable_irq();
}
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	bd90      	pop	{r4, r7, pc}
 8009532:	bf00      	nop
 8009534:	40004400 	.word	0x40004400
 8009538:	40011400 	.word	0x40011400
 800953c:	40011000 	.word	0x40011000

08009540 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8009540:	b5b0      	push	{r4, r5, r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	79db      	ldrb	r3, [r3, #7]
 800954e:	2b03      	cmp	r3, #3
 8009550:	f200 8217 	bhi.w	8009982 <brrCalculus+0x442>
 8009554:	a201      	add	r2, pc, #4	; (adr r2, 800955c <brrCalculus+0x1c>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	0800956d 	.word	0x0800956d
 8009560:	08009667 	.word	0x08009667
 8009564:	08009781 	.word	0x08009781
 8009568:	08009889 	.word	0x08009889

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800956c:	4980      	ldr	r1, [pc, #512]	; (8009770 <brrCalculus+0x230>)
 800956e:	a37c      	add	r3, pc, #496	; (adr r3, 8009760 <brrCalculus+0x220>)
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009582:	ee17 0a90 	vmov	r0, s15
 8009586:	f7f6 fff7 	bl	8000578 <__aeabi_f2d>
 800958a:	4b79      	ldr	r3, [pc, #484]	; (8009770 <brrCalculus+0x230>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f7 f84a 	bl	8000628 <__aeabi_dmul>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4975      	ldr	r1, [pc, #468]	; (8009770 <brrCalculus+0x230>)
 800959a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800959e:	4b74      	ldr	r3, [pc, #464]	; (8009770 <brrCalculus+0x230>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	4610      	mov	r0, r2
 80095a6:	4619      	mov	r1, r3
 80095a8:	f7f7 faee 	bl	8000b88 <__aeabi_d2iz>
 80095ac:	4603      	mov	r3, r0
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	4b70      	ldr	r3, [pc, #448]	; (8009774 <brrCalculus+0x234>)
 80095b2:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80095b4:	4b6e      	ldr	r3, [pc, #440]	; (8009770 <brrCalculus+0x230>)
 80095b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80095ba:	4b6d      	ldr	r3, [pc, #436]	; (8009770 <brrCalculus+0x230>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	4610      	mov	r0, r2
 80095c2:	4619      	mov	r1, r3
 80095c4:	f7f7 fae0 	bl	8000b88 <__aeabi_d2iz>
 80095c8:	4603      	mov	r3, r0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f6 ffc2 	bl	8000554 <__aeabi_i2d>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f6 fe6e 	bl	80002b8 <__aeabi_dsub>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4610      	mov	r0, r2
 80095e2:	4619      	mov	r1, r3
 80095e4:	f7f7 fb18 	bl	8000c18 <__aeabi_d2f>
 80095e8:	4603      	mov	r3, r0
 80095ea:	4a63      	ldr	r2, [pc, #396]	; (8009778 <brrCalculus+0x238>)
 80095ec:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80095ee:	4b62      	ldr	r3, [pc, #392]	; (8009778 <brrCalculus+0x238>)
 80095f0:	edd3 7a00 	vldr	s15, [r3]
 80095f4:	2004      	movs	r0, #4
 80095f6:	eeb0 0a67 	vmov.f32	s0, s15
 80095fa:	f000 fa6d 	bl	8009ad8 <roundToNDecimals>
 80095fe:	eef0 7a40 	vmov.f32	s15, s0
 8009602:	4b5d      	ldr	r3, [pc, #372]	; (8009778 <brrCalculus+0x238>)
 8009604:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009608:	4b5b      	ldr	r3, [pc, #364]	; (8009778 <brrCalculus+0x238>)
 800960a:	edd3 7a00 	vldr	s15, [r3]
 800960e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009616:	4b58      	ldr	r3, [pc, #352]	; (8009778 <brrCalculus+0x238>)
 8009618:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800961c:	4b56      	ldr	r3, [pc, #344]	; (8009778 <brrCalculus+0x238>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4618      	mov	r0, r3
 8009622:	f7f6 ffa9 	bl	8000578 <__aeabi_f2d>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	ec43 2b10 	vmov	d0, r2, r3
 800962e:	f003 fd27 	bl	800d080 <round>
 8009632:	ec53 2b10 	vmov	r2, r3, d0
 8009636:	4610      	mov	r0, r2
 8009638:	4619      	mov	r1, r3
 800963a:	f7f7 faed 	bl	8000c18 <__aeabi_d2f>
 800963e:	4603      	mov	r3, r0
 8009640:	4a4d      	ldr	r2, [pc, #308]	; (8009778 <brrCalculus+0x238>)
 8009642:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009644:	4b4b      	ldr	r3, [pc, #300]	; (8009774 <brrCalculus+0x234>)
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	b29a      	uxth	r2, r3
 800964c:	4b4a      	ldr	r3, [pc, #296]	; (8009778 <brrCalculus+0x238>)
 800964e:	edd3 7a00 	vldr	s15, [r3]
 8009652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009656:	ee17 3a90 	vmov	r3, s15
 800965a:	b29b      	uxth	r3, r3
 800965c:	4313      	orrs	r3, r2
 800965e:	b29a      	uxth	r2, r3
 8009660:	4b46      	ldr	r3, [pc, #280]	; (800977c <brrCalculus+0x23c>)
 8009662:	801a      	strh	r2, [r3, #0]


		break;
 8009664:	e18f      	b.n	8009986 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8009666:	4942      	ldr	r1, [pc, #264]	; (8009770 <brrCalculus+0x230>)
 8009668:	a33f      	add	r3, pc, #252	; (adr r3, 8009768 <brrCalculus+0x228>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967c:	ee17 0a90 	vmov	r0, s15
 8009680:	f7f6 ff7a 	bl	8000578 <__aeabi_f2d>
 8009684:	4b3a      	ldr	r3, [pc, #232]	; (8009770 <brrCalculus+0x230>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 ffcd 	bl	8000628 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4937      	ldr	r1, [pc, #220]	; (8009770 <brrCalculus+0x230>)
 8009694:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009698:	4b35      	ldr	r3, [pc, #212]	; (8009770 <brrCalculus+0x230>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	4610      	mov	r0, r2
 80096a0:	4619      	mov	r1, r3
 80096a2:	f7f7 fa71 	bl	8000b88 <__aeabi_d2iz>
 80096a6:	4603      	mov	r3, r0
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	4b32      	ldr	r3, [pc, #200]	; (8009774 <brrCalculus+0x234>)
 80096ac:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80096ae:	4b30      	ldr	r3, [pc, #192]	; (8009770 <brrCalculus+0x230>)
 80096b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80096b4:	4b2e      	ldr	r3, [pc, #184]	; (8009770 <brrCalculus+0x230>)
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	4610      	mov	r0, r2
 80096bc:	4619      	mov	r1, r3
 80096be:	f7f7 fa63 	bl	8000b88 <__aeabi_d2iz>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f6 ff45 	bl	8000554 <__aeabi_i2d>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	4620      	mov	r0, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	f7f6 fdf1 	bl	80002b8 <__aeabi_dsub>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4610      	mov	r0, r2
 80096dc:	4619      	mov	r1, r3
 80096de:	f7f7 fa9b 	bl	8000c18 <__aeabi_d2f>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4a24      	ldr	r2, [pc, #144]	; (8009778 <brrCalculus+0x238>)
 80096e6:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 80096e8:	4b23      	ldr	r3, [pc, #140]	; (8009778 <brrCalculus+0x238>)
 80096ea:	edd3 7a00 	vldr	s15, [r3]
 80096ee:	2004      	movs	r0, #4
 80096f0:	eeb0 0a67 	vmov.f32	s0, s15
 80096f4:	f000 f9f0 	bl	8009ad8 <roundToNDecimals>
 80096f8:	eef0 7a40 	vmov.f32	s15, s0
 80096fc:	4b1e      	ldr	r3, [pc, #120]	; (8009778 <brrCalculus+0x238>)
 80096fe:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009702:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <brrCalculus+0x238>)
 8009704:	edd3 7a00 	vldr	s15, [r3]
 8009708:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800970c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <brrCalculus+0x238>)
 8009712:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009716:	4b18      	ldr	r3, [pc, #96]	; (8009778 <brrCalculus+0x238>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4618      	mov	r0, r3
 800971c:	f7f6 ff2c 	bl	8000578 <__aeabi_f2d>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	ec43 2b10 	vmov	d0, r2, r3
 8009728:	f003 fcaa 	bl	800d080 <round>
 800972c:	ec53 2b10 	vmov	r2, r3, d0
 8009730:	4610      	mov	r0, r2
 8009732:	4619      	mov	r1, r3
 8009734:	f7f7 fa70 	bl	8000c18 <__aeabi_d2f>
 8009738:	4603      	mov	r3, r0
 800973a:	4a0f      	ldr	r2, [pc, #60]	; (8009778 <brrCalculus+0x238>)
 800973c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800973e:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <brrCalculus+0x234>)
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	b29a      	uxth	r2, r3
 8009746:	4b0c      	ldr	r3, [pc, #48]	; (8009778 <brrCalculus+0x238>)
 8009748:	edd3 7a00 	vldr	s15, [r3]
 800974c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009750:	ee17 3a90 	vmov	r3, s15
 8009754:	b29b      	uxth	r3, r3
 8009756:	4313      	orrs	r3, r2
 8009758:	b29a      	uxth	r2, r3
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <brrCalculus+0x23c>)
 800975c:	801a      	strh	r2, [r3, #0]


		break;
 800975e:	e112      	b.n	8009986 <brrCalculus+0x446>
 8009760:	b4e81b4f 	.word	0xb4e81b4f
 8009764:	3edb4e81 	.word	0x3edb4e81
 8009768:	b4e81b4f 	.word	0xb4e81b4f
 800976c:	3ecb4e81 	.word	0x3ecb4e81
 8009770:	200133b0 	.word	0x200133b0
 8009774:	200133a8 	.word	0x200133a8
 8009778:	200133ac 	.word	0x200133ac
 800977c:	200133a6 	.word	0x200133a6
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8009780:	4989      	ldr	r1, [pc, #548]	; (80099a8 <brrCalculus+0x468>)
 8009782:	a385      	add	r3, pc, #532	; (adr r3, 8009998 <brrCalculus+0x458>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009796:	ee17 0a90 	vmov	r0, s15
 800979a:	f7f6 feed 	bl	8000578 <__aeabi_f2d>
 800979e:	4b82      	ldr	r3, [pc, #520]	; (80099a8 <brrCalculus+0x468>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 ff40 	bl	8000628 <__aeabi_dmul>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	497e      	ldr	r1, [pc, #504]	; (80099a8 <brrCalculus+0x468>)
 80097ae:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80097b2:	4b7d      	ldr	r3, [pc, #500]	; (80099a8 <brrCalculus+0x468>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	4610      	mov	r0, r2
 80097ba:	4619      	mov	r1, r3
 80097bc:	f7f7 f9e4 	bl	8000b88 <__aeabi_d2iz>
 80097c0:	4603      	mov	r3, r0
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	4b79      	ldr	r3, [pc, #484]	; (80099ac <brrCalculus+0x46c>)
 80097c6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80097c8:	4b77      	ldr	r3, [pc, #476]	; (80099a8 <brrCalculus+0x468>)
 80097ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80097ce:	4b76      	ldr	r3, [pc, #472]	; (80099a8 <brrCalculus+0x468>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	4610      	mov	r0, r2
 80097d6:	4619      	mov	r1, r3
 80097d8:	f7f7 f9d6 	bl	8000b88 <__aeabi_d2iz>
 80097dc:	4603      	mov	r3, r0
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f6 feb8 	bl	8000554 <__aeabi_i2d>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4620      	mov	r0, r4
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7f6 fd64 	bl	80002b8 <__aeabi_dsub>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	f7f7 fa0e 	bl	8000c18 <__aeabi_d2f>
 80097fc:	4603      	mov	r3, r0
 80097fe:	4a6c      	ldr	r2, [pc, #432]	; (80099b0 <brrCalculus+0x470>)
 8009800:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009802:	4b6b      	ldr	r3, [pc, #428]	; (80099b0 <brrCalculus+0x470>)
 8009804:	edd3 7a00 	vldr	s15, [r3]
 8009808:	2004      	movs	r0, #4
 800980a:	eeb0 0a67 	vmov.f32	s0, s15
 800980e:	f000 f963 	bl	8009ad8 <roundToNDecimals>
 8009812:	eef0 7a40 	vmov.f32	s15, s0
 8009816:	4b66      	ldr	r3, [pc, #408]	; (80099b0 <brrCalculus+0x470>)
 8009818:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800981c:	4b64      	ldr	r3, [pc, #400]	; (80099b0 <brrCalculus+0x470>)
 800981e:	edd3 7a00 	vldr	s15, [r3]
 8009822:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800982a:	4b61      	ldr	r3, [pc, #388]	; (80099b0 <brrCalculus+0x470>)
 800982c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009830:	4b5f      	ldr	r3, [pc, #380]	; (80099b0 <brrCalculus+0x470>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f7f6 fe9f 	bl	8000578 <__aeabi_f2d>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	ec43 2b10 	vmov	d0, r2, r3
 8009842:	f003 fc1d 	bl	800d080 <round>
 8009846:	ec51 0b10 	vmov	r0, r1, d0
 800984a:	f04f 0200 	mov.w	r2, #0
 800984e:	4b59      	ldr	r3, [pc, #356]	; (80099b4 <brrCalculus+0x474>)
 8009850:	f7f6 fd34 	bl	80002bc <__adddf3>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4610      	mov	r0, r2
 800985a:	4619      	mov	r1, r3
 800985c:	f7f7 f9dc 	bl	8000c18 <__aeabi_d2f>
 8009860:	4603      	mov	r3, r0
 8009862:	4a53      	ldr	r2, [pc, #332]	; (80099b0 <brrCalculus+0x470>)
 8009864:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009866:	4b51      	ldr	r3, [pc, #324]	; (80099ac <brrCalculus+0x46c>)
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	b29a      	uxth	r2, r3
 800986e:	4b50      	ldr	r3, [pc, #320]	; (80099b0 <brrCalculus+0x470>)
 8009870:	edd3 7a00 	vldr	s15, [r3]
 8009874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009878:	ee17 3a90 	vmov	r3, s15
 800987c:	b29b      	uxth	r3, r3
 800987e:	4313      	orrs	r3, r2
 8009880:	b29a      	uxth	r2, r3
 8009882:	4b4d      	ldr	r3, [pc, #308]	; (80099b8 <brrCalculus+0x478>)
 8009884:	801a      	strh	r2, [r3, #0]


		break;
 8009886:	e07e      	b.n	8009986 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8009888:	4947      	ldr	r1, [pc, #284]	; (80099a8 <brrCalculus+0x468>)
 800988a:	a345      	add	r3, pc, #276	; (adr r3, 80099a0 <brrCalculus+0x460>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	ee17 0a90 	vmov	r0, s15
 80098a2:	f7f6 fe69 	bl	8000578 <__aeabi_f2d>
 80098a6:	4b40      	ldr	r3, [pc, #256]	; (80099a8 <brrCalculus+0x468>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 febc 	bl	8000628 <__aeabi_dmul>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	493c      	ldr	r1, [pc, #240]	; (80099a8 <brrCalculus+0x468>)
 80098b6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80098ba:	4b3b      	ldr	r3, [pc, #236]	; (80099a8 <brrCalculus+0x468>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	4610      	mov	r0, r2
 80098c2:	4619      	mov	r1, r3
 80098c4:	f7f7 f960 	bl	8000b88 <__aeabi_d2iz>
 80098c8:	4603      	mov	r3, r0
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	4b37      	ldr	r3, [pc, #220]	; (80099ac <brrCalculus+0x46c>)
 80098ce:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80098d0:	4b35      	ldr	r3, [pc, #212]	; (80099a8 <brrCalculus+0x468>)
 80098d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80098d6:	4b34      	ldr	r3, [pc, #208]	; (80099a8 <brrCalculus+0x468>)
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	4610      	mov	r0, r2
 80098de:	4619      	mov	r1, r3
 80098e0:	f7f7 f952 	bl	8000b88 <__aeabi_d2iz>
 80098e4:	4603      	mov	r3, r0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f6 fe34 	bl	8000554 <__aeabi_i2d>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	4620      	mov	r0, r4
 80098f2:	4629      	mov	r1, r5
 80098f4:	f7f6 fce0 	bl	80002b8 <__aeabi_dsub>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4610      	mov	r0, r2
 80098fe:	4619      	mov	r1, r3
 8009900:	f7f7 f98a 	bl	8000c18 <__aeabi_d2f>
 8009904:	4603      	mov	r3, r0
 8009906:	4a2a      	ldr	r2, [pc, #168]	; (80099b0 <brrCalculus+0x470>)
 8009908:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800990a:	4b29      	ldr	r3, [pc, #164]	; (80099b0 <brrCalculus+0x470>)
 800990c:	edd3 7a00 	vldr	s15, [r3]
 8009910:	2004      	movs	r0, #4
 8009912:	eeb0 0a67 	vmov.f32	s0, s15
 8009916:	f000 f8df 	bl	8009ad8 <roundToNDecimals>
 800991a:	eef0 7a40 	vmov.f32	s15, s0
 800991e:	4b24      	ldr	r3, [pc, #144]	; (80099b0 <brrCalculus+0x470>)
 8009920:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009924:	4b22      	ldr	r3, [pc, #136]	; (80099b0 <brrCalculus+0x470>)
 8009926:	edd3 7a00 	vldr	s15, [r3]
 800992a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800992e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009932:	4b1f      	ldr	r3, [pc, #124]	; (80099b0 <brrCalculus+0x470>)
 8009934:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009938:	4b1d      	ldr	r3, [pc, #116]	; (80099b0 <brrCalculus+0x470>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4618      	mov	r0, r3
 800993e:	f7f6 fe1b 	bl	8000578 <__aeabi_f2d>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	ec43 2b10 	vmov	d0, r2, r3
 800994a:	f003 fb99 	bl	800d080 <round>
 800994e:	ec53 2b10 	vmov	r2, r3, d0
 8009952:	4610      	mov	r0, r2
 8009954:	4619      	mov	r1, r3
 8009956:	f7f7 f95f 	bl	8000c18 <__aeabi_d2f>
 800995a:	4603      	mov	r3, r0
 800995c:	4a14      	ldr	r2, [pc, #80]	; (80099b0 <brrCalculus+0x470>)
 800995e:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009960:	4b12      	ldr	r3, [pc, #72]	; (80099ac <brrCalculus+0x46c>)
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	b29a      	uxth	r2, r3
 8009968:	4b11      	ldr	r3, [pc, #68]	; (80099b0 <brrCalculus+0x470>)
 800996a:	edd3 7a00 	vldr	s15, [r3]
 800996e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009972:	ee17 3a90 	vmov	r3, s15
 8009976:	b29b      	uxth	r3, r3
 8009978:	4313      	orrs	r3, r2
 800997a:	b29a      	uxth	r2, r3
 800997c:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <brrCalculus+0x478>)
 800997e:	801a      	strh	r2, [r3, #0]


		break;
 8009980:	e001      	b.n	8009986 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8009982:	bf00      	nop
		break;
 8009984:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8009986:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <brrCalculus+0x478>)
 8009988:	881b      	ldrh	r3, [r3, #0]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bdb0      	pop	{r4, r5, r7, pc}
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	789abcdf 	.word	0x789abcdf
 800999c:	3ec23456 	.word	0x3ec23456
 80099a0:	789abcdf 	.word	0x789abcdf
 80099a4:	3ea23456 	.word	0x3ea23456
 80099a8:	200133b0 	.word	0x200133b0
 80099ac:	200133a8 	.word	0x200133a8
 80099b0:	200133ac 	.word	0x200133ac
 80099b4:	3ff00000 	.word	0x3ff00000
 80099b8:	200133a6 	.word	0x200133a6

080099bc <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80099c6:	e000      	b.n	80099ca <writeChar+0xe>
		__NOP();
 80099c8:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0f7      	beq.n	80099c8 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	605a      	str	r2, [r3, #4]

}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 80099f6:	e008      	b.n	8009a0a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff ffdc 	bl	80099bc <writeChar>
		msgToSend ++ ;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	3301      	adds	r3, #1
 8009a08:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1f2      	bne.n	80099f8 <writeMsg+0xc>
	}
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
	__NOP();
 8009a20:	bf00      	nop
}
 8009a22:	bf00      	nop
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
	__NOP();
 8009a30:	bf00      	nop
}
 8009a32:	bf00      	nop
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
	return auxRxData;
 8009a40:	4b03      	ldr	r3, [pc, #12]	; (8009a50 <getRxData+0x14>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	200133b8 	.word	0x200133b8

08009a54 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <USART2_IRQHandler+0x24>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0320 	and.w	r3, r3, #32
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d006      	beq.n	8009a72 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8009a64:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <USART2_IRQHandler+0x24>)
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <USART2_IRQHandler+0x28>)
 8009a6c:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8009a6e:	f7f7 feb3 	bl	80017d8 <usart2Rx_Callback>
	}

}
 8009a72:	bf00      	nop
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	40004400 	.word	0x40004400
 8009a7c:	200133b8 	.word	0x200133b8

08009a80 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <USART1_IRQHandler+0x24>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d006      	beq.n	8009a9e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8009a90:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <USART1_IRQHandler+0x24>)
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <USART1_IRQHandler+0x28>)
 8009a98:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8009a9a:	f7ff ffbf 	bl	8009a1c <usart1Rx_Callback>
	}
}
 8009a9e:	bf00      	nop
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	40011000 	.word	0x40011000
 8009aa8:	200133b8 	.word	0x200133b8

08009aac <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <USART6_IRQHandler+0x24>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d006      	beq.n	8009aca <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8009abc:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <USART6_IRQHandler+0x24>)
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	4b04      	ldr	r3, [pc, #16]	; (8009ad4 <USART6_IRQHandler+0x28>)
 8009ac4:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8009ac6:	f7ff ffb1 	bl	8009a2c <usart6Rx_Callback>
	}

}
 8009aca:	bf00      	nop
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	40011400 	.word	0x40011400
 8009ad4:	200133b8 	.word	0x200133b8

08009ad8 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	ed87 0a01 	vstr	s0, [r7, #4]
 8009ae2:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8009ae4:	6838      	ldr	r0, [r7, #0]
 8009ae6:	f7f6 fd35 	bl	8000554 <__aeabi_i2d>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	ec43 2b11 	vmov	d1, r2, r3
 8009af2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009b70 <roundToNDecimals+0x98>
 8009af6:	f003 fb65 	bl	800d1c4 <pow>
 8009afa:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7f6 fd3a 	bl	8000578 <__aeabi_f2d>
 8009b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b08:	f7f6 fd8e 	bl	8000628 <__aeabi_dmul>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4610      	mov	r0, r2
 8009b12:	4619      	mov	r1, r3
 8009b14:	f7f7 f880 	bl	8000c18 <__aeabi_d2f>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	607b      	str	r3, [r7, #4]

    number = round(number);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7f6 fd2b 	bl	8000578 <__aeabi_f2d>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	ec43 2b10 	vmov	d0, r2, r3
 8009b2a:	f003 faa9 	bl	800d080 <round>
 8009b2e:	ec53 2b10 	vmov	r2, r3, d0
 8009b32:	4610      	mov	r0, r2
 8009b34:	4619      	mov	r1, r3
 8009b36:	f7f7 f86f 	bl	8000c18 <__aeabi_d2f>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	607b      	str	r3, [r7, #4]

    number /= factor;
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7f6 fd1a 	bl	8000578 <__aeabi_f2d>
 8009b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b48:	f7f6 fe98 	bl	800087c <__aeabi_ddiv>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4610      	mov	r0, r2
 8009b52:	4619      	mov	r1, r3
 8009b54:	f7f7 f860 	bl	8000c18 <__aeabi_d2f>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	607b      	str	r3, [r7, #4]

    return number;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	ee07 3a90 	vmov	s15, r3
}
 8009b62:	eeb0 0a67 	vmov.f32	s0, s15
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	f3af 8000 	nop.w
 8009b70:	00000000 	.word	0x00000000
 8009b74:	40240000 	.word	0x40240000

08009b78 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b84:	b672      	cpsid	i
}
 8009b86:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a12      	ldr	r2, [pc, #72]	; (8009bd8 <usart_Set_Priority+0x60>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d105      	bne.n	8009b9e <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 8009b92:	78fb      	ldrb	r3, [r7, #3]
 8009b94:	4619      	mov	r1, r3
 8009b96:	2025      	movs	r0, #37	; 0x25
 8009b98:	f7ff fb1e 	bl	80091d8 <__NVIC_SetPriority>
 8009b9c:	e016      	b.n	8009bcc <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <usart_Set_Priority+0x64>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d105      	bne.n	8009bb4 <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	4619      	mov	r1, r3
 8009bac:	2026      	movs	r0, #38	; 0x26
 8009bae:	f7ff fb13 	bl	80091d8 <__NVIC_SetPriority>
 8009bb2:	e00b      	b.n	8009bcc <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a09      	ldr	r2, [pc, #36]	; (8009be0 <usart_Set_Priority+0x68>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d105      	bne.n	8009bca <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 8009bbe:	78fb      	ldrb	r3, [r7, #3]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	2047      	movs	r0, #71	; 0x47
 8009bc4:	f7ff fb08 	bl	80091d8 <__NVIC_SetPriority>
 8009bc8:	e000      	b.n	8009bcc <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 8009bca:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009bcc:	b662      	cpsie	i
}
 8009bce:	bf00      	nop



	__enable_irq();

}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	40011000 	.word	0x40011000
 8009bdc:	40004400 	.word	0x40004400
 8009be0:	40011400 	.word	0x40011400

08009be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009be4:	b480      	push	{r7}
 8009be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009be8:	4b06      	ldr	r3, [pc, #24]	; (8009c04 <SystemInit+0x20>)
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bee:	4a05      	ldr	r2, [pc, #20]	; (8009c04 <SystemInit+0x20>)
 8009bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009bf8:	bf00      	nop
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	e000ed00 	.word	0xe000ed00

08009c08 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	2302      	movs	r3, #2
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60bb      	str	r3, [r7, #8]
 8009c1e:	2302      	movs	r3, #2
 8009c20:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009c22:	4b34      	ldr	r3, [pc, #208]	; (8009cf4 <SystemCoreClockUpdate+0xec>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f003 030c 	and.w	r3, r3, #12
 8009c2a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d011      	beq.n	8009c56 <SystemCoreClockUpdate+0x4e>
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	d844      	bhi.n	8009cc2 <SystemCoreClockUpdate+0xba>
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <SystemCoreClockUpdate+0x3e>
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d004      	beq.n	8009c4e <SystemCoreClockUpdate+0x46>
 8009c44:	e03d      	b.n	8009cc2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8009c46:	4b2c      	ldr	r3, [pc, #176]	; (8009cf8 <SystemCoreClockUpdate+0xf0>)
 8009c48:	4a2c      	ldr	r2, [pc, #176]	; (8009cfc <SystemCoreClockUpdate+0xf4>)
 8009c4a:	601a      	str	r2, [r3, #0]
      break;
 8009c4c:	e03d      	b.n	8009cca <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8009c4e:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <SystemCoreClockUpdate+0xf0>)
 8009c50:	4a2b      	ldr	r2, [pc, #172]	; (8009d00 <SystemCoreClockUpdate+0xf8>)
 8009c52:	601a      	str	r2, [r3, #0]
      break;
 8009c54:	e039      	b.n	8009cca <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8009c56:	4b27      	ldr	r3, [pc, #156]	; (8009cf4 <SystemCoreClockUpdate+0xec>)
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	0d9b      	lsrs	r3, r3, #22
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <SystemCoreClockUpdate+0xec>)
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c6a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00c      	beq.n	8009c8c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009c72:	4a23      	ldr	r2, [pc, #140]	; (8009d00 <SystemCoreClockUpdate+0xf8>)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7a:	4a1e      	ldr	r2, [pc, #120]	; (8009cf4 <SystemCoreClockUpdate+0xec>)
 8009c7c:	6852      	ldr	r2, [r2, #4]
 8009c7e:	0992      	lsrs	r2, r2, #6
 8009c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c84:	fb02 f303 	mul.w	r3, r2, r3
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	e00b      	b.n	8009ca4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009c8c:	4a1b      	ldr	r2, [pc, #108]	; (8009cfc <SystemCoreClockUpdate+0xf4>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c94:	4a17      	ldr	r2, [pc, #92]	; (8009cf4 <SystemCoreClockUpdate+0xec>)
 8009c96:	6852      	ldr	r2, [r2, #4]
 8009c98:	0992      	lsrs	r2, r2, #6
 8009c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ca2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8009ca4:	4b13      	ldr	r3, [pc, #76]	; (8009cf4 <SystemCoreClockUpdate+0xec>)
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	0c1b      	lsrs	r3, r3, #16
 8009caa:	f003 0303 	and.w	r3, r3, #3
 8009cae:	3301      	adds	r3, #1
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbc:	4a0e      	ldr	r2, [pc, #56]	; (8009cf8 <SystemCoreClockUpdate+0xf0>)
 8009cbe:	6013      	str	r3, [r2, #0]
      break;
 8009cc0:	e003      	b.n	8009cca <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <SystemCoreClockUpdate+0xf0>)
 8009cc4:	4a0d      	ldr	r2, [pc, #52]	; (8009cfc <SystemCoreClockUpdate+0xf4>)
 8009cc6:	601a      	str	r2, [r3, #0]
      break;
 8009cc8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8009cca:	4b0a      	ldr	r3, [pc, #40]	; (8009cf4 <SystemCoreClockUpdate+0xec>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	091b      	lsrs	r3, r3, #4
 8009cd0:	f003 030f 	and.w	r3, r3, #15
 8009cd4:	4a0b      	ldr	r2, [pc, #44]	; (8009d04 <SystemCoreClockUpdate+0xfc>)
 8009cd6:	5cd3      	ldrb	r3, [r2, r3]
 8009cd8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8009cda:	4b07      	ldr	r3, [pc, #28]	; (8009cf8 <SystemCoreClockUpdate+0xf0>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce4:	4a04      	ldr	r2, [pc, #16]	; (8009cf8 <SystemCoreClockUpdate+0xf0>)
 8009ce6:	6013      	str	r3, [r2, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	20000024 	.word	0x20000024
 8009cfc:	00f42400 	.word	0x00f42400
 8009d00:	017d7840 	.word	0x017d7840
 8009d04:	0800f5e8 	.word	0x0800f5e8

08009d08 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a89      	ldr	r2, [pc, #548]	; (8009f3c <i2c_config+0x234>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d106      	bne.n	8009d28 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8009d1a:	4b89      	ldr	r3, [pc, #548]	; (8009f40 <i2c_config+0x238>)
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	4a88      	ldr	r2, [pc, #544]	; (8009f40 <i2c_config+0x238>)
 8009d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d24:	6413      	str	r3, [r2, #64]	; 0x40
 8009d26:	e016      	b.n	8009d56 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a85      	ldr	r2, [pc, #532]	; (8009f44 <i2c_config+0x23c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d106      	bne.n	8009d40 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8009d32:	4b83      	ldr	r3, [pc, #524]	; (8009f40 <i2c_config+0x238>)
 8009d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d36:	4a82      	ldr	r2, [pc, #520]	; (8009f40 <i2c_config+0x238>)
 8009d38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8009d3e:	e00a      	b.n	8009d56 <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a80      	ldr	r2, [pc, #512]	; (8009f48 <i2c_config+0x240>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d105      	bne.n	8009d56 <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8009d4a:	4b7d      	ldr	r3, [pc, #500]	; (8009f40 <i2c_config+0x238>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	4a7c      	ldr	r2, [pc, #496]	; (8009f40 <i2c_config+0x238>)
 8009d50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d54:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 0201 	bic.w	r2, r2, #1
 8009d64:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009d66:	e000      	b.n	8009d6a <i2c_config+0x62>
		__NOP();
 8009d68:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1f7      	bne.n	8009d68 <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d86:	601a      	str	r2, [r3, #0]

	__NOP();
 8009d88:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d98:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009da8:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	79db      	ldrb	r3, [r3, #7]
 8009dae:	2b10      	cmp	r3, #16
 8009db0:	d108      	bne.n	8009dc4 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0210 	orr.w	r2, r2, #16
 8009dc0:	605a      	str	r2, [r3, #4]
 8009dc2:	e018      	b.n	8009df6 <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	79db      	ldrb	r3, [r3, #7]
 8009dc8:	2b19      	cmp	r3, #25
 8009dca:	d108      	bne.n	8009dde <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0219 	orr.w	r2, r2, #25
 8009dda:	605a      	str	r2, [r3, #4]
 8009ddc:	e00b      	b.n	8009df6 <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	79db      	ldrb	r3, [r3, #7]
 8009de2:	2b32      	cmp	r3, #50	; 0x32
 8009de4:	d107      	bne.n	8009df6 <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8009df4:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	795b      	ldrb	r3, [r3, #5]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d15c      	bne.n	8009ec8 <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69da      	ldr	r2, [r3, #28]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e1c:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	79db      	ldrb	r3, [r3, #7]
 8009e22:	2b32      	cmp	r3, #50	; 0x32
 8009e24:	d03f      	beq.n	8009ea6 <i2c_config+0x19e>
 8009e26:	2b32      	cmp	r3, #50	; 0x32
 8009e28:	f300 80b2 	bgt.w	8009f90 <i2c_config+0x288>
 8009e2c:	2b19      	cmp	r3, #25
 8009e2e:	d029      	beq.n	8009e84 <i2c_config+0x17c>
 8009e30:	2b19      	cmp	r3, #25
 8009e32:	f300 80ad 	bgt.w	8009f90 <i2c_config+0x288>
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d002      	beq.n	8009e40 <i2c_config+0x138>
 8009e3a:	2b10      	cmp	r3, #16
 8009e3c:	d011      	beq.n	8009e62 <i2c_config+0x15a>


				break;
			}default:{

				break;
 8009e3e:	e0a7      	b.n	8009f90 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69da      	ldr	r2, [r3, #28]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0214 	orr.w	r2, r2, #20
 8009e4e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6a1a      	ldr	r2, [r3, #32]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0205 	orr.w	r2, r2, #5
 8009e5e:	621a      	str	r2, [r3, #32]
				break;
 8009e60:	e099      	b.n	8009f96 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69da      	ldr	r2, [r3, #28]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8009e70:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6a1a      	ldr	r2, [r3, #32]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f042 0211 	orr.w	r2, r2, #17
 8009e80:	621a      	str	r2, [r3, #32]
				break;
 8009e82:	e088      	b.n	8009f96 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	69da      	ldr	r2, [r3, #28]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8009e92:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a1a      	ldr	r2, [r3, #32]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0215 	orr.w	r2, r2, #21
 8009ea2:	621a      	str	r2, [r3, #32]
				break;
 8009ea4:	e077      	b.n	8009f96 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69da      	ldr	r2, [r3, #28]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8009eb4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6a1a      	ldr	r2, [r3, #32]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8009ec4:	621a      	str	r2, [r3, #32]
				break;
 8009ec6:	e066      	b.n	8009f96 <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69da      	ldr	r2, [r3, #28]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ed6:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	79db      	ldrb	r3, [r3, #7]
 8009edc:	2b32      	cmp	r3, #50	; 0x32
 8009ede:	d046      	beq.n	8009f6e <i2c_config+0x266>
 8009ee0:	2b32      	cmp	r3, #50	; 0x32
 8009ee2:	dc57      	bgt.n	8009f94 <i2c_config+0x28c>
 8009ee4:	2b19      	cmp	r3, #25
 8009ee6:	d031      	beq.n	8009f4c <i2c_config+0x244>
 8009ee8:	2b19      	cmp	r3, #25
 8009eea:	dc53      	bgt.n	8009f94 <i2c_config+0x28c>
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d002      	beq.n	8009ef6 <i2c_config+0x1ee>
 8009ef0:	2b10      	cmp	r3, #16
 8009ef2:	d011      	beq.n	8009f18 <i2c_config+0x210>


				break;
			}default:{

				break;
 8009ef4:	e04e      	b.n	8009f94 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69da      	ldr	r2, [r3, #28]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0203 	orr.w	r2, r2, #3
 8009f04:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6a1a      	ldr	r2, [r3, #32]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f042 0202 	orr.w	r2, r2, #2
 8009f14:	621a      	str	r2, [r3, #32]
				break;
 8009f16:	e03e      	b.n	8009f96 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69da      	ldr	r2, [r3, #28]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f042 020d 	orr.w	r2, r2, #13
 8009f26:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6a1a      	ldr	r2, [r3, #32]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0206 	orr.w	r2, r2, #6
 8009f36:	621a      	str	r2, [r3, #32]
				break;
 8009f38:	e02d      	b.n	8009f96 <i2c_config+0x28e>
 8009f3a:	bf00      	nop
 8009f3c:	40005400 	.word	0x40005400
 8009f40:	40023800 	.word	0x40023800
 8009f44:	40005800 	.word	0x40005800
 8009f48:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	69da      	ldr	r2, [r3, #28]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0215 	orr.w	r2, r2, #21
 8009f5a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6a1a      	ldr	r2, [r3, #32]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0208 	orr.w	r2, r2, #8
 8009f6a:	621a      	str	r2, [r3, #32]
				break;
 8009f6c:	e013      	b.n	8009f96 <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69da      	ldr	r2, [r3, #28]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8009f7c:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6a1a      	ldr	r2, [r3, #32]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f042 0210 	orr.w	r2, r2, #16
 8009f8c:	621a      	str	r2, [r3, #32]
				break;
 8009f8e:	e002      	b.n	8009f96 <i2c_config+0x28e>
				break;
 8009f90:	bf00      	nop
 8009f92:	e002      	b.n	8009f9a <i2c_config+0x292>
				break;
 8009f94:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009f96:	e000      	b.n	8009f9a <i2c_config+0x292>
		__NOP();
 8009f98:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f7      	bne.n	8009f98 <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f042 0201 	orr.w	r2, r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]


}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fda:	601a      	str	r2, [r3, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7a1b      	ldrb	r3, [r3, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a006:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a008:	e000      	b.n	800a00c <i2c_startTransaction+0x24>
		__NOP();
 800a00a:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1f7      	bne.n	800a00a <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a028:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a02a:	e000      	b.n	800a02e <i2c_startTransaction+0x46>
		__NOP();
 800a02c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0f7      	beq.n	800a02c <i2c_startTransaction+0x44>
	}
}
 800a03c:	bf00      	nop
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7a1b      	ldrb	r3, [r3, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d007      	beq.n	800a06a <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a068:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a078:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a07a:	e000      	b.n	800a07e <i2c_reStartTransaction+0x34>
		__NOP();
 800a07c:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d0f7      	beq.n	800a07c <i2c_reStartTransaction+0x32>
	}
}
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0b0:	601a      	str	r2, [r3, #0]
}
 800a0b2:	bf00      	nop
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800a0be:	b480      	push	{r7}
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	70fb      	strb	r3, [r7, #3]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	005a      	lsls	r2, r3, #1
 800a0d6:	78bb      	ldrb	r3, [r7, #2]
 800a0d8:	431a      	orrs	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a0e0:	e000      	b.n	800a0e4 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800a0e2:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d0f7      	beq.n	800a0e2 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	73fb      	strb	r3, [r7, #15]

}
 800a102:	bf00      	nop
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a122:	e000      	b.n	800a126 <i2c_sendMemoryAddress+0x18>
		__NOP();
 800a124:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0f7      	beq.n	800a124 <i2c_sendMemoryAddress+0x16>
	}
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	78fa      	ldrb	r2, [r7, #3]
 800a154:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a156:	e000      	b.n	800a15a <i2c_sendDataByte+0x18>
		__NOP();
 800a158:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0f7      	beq.n	800a158 <i2c_sendDataByte+0x16>
	}
}
 800a168:	bf00      	nop
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a17e:	e000      	b.n	800a182 <i2c_readDataByte+0xc>
		__NOP();
 800a180:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d0f7      	beq.n	800a180 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	799b      	ldrb	r3, [r3, #6]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <__errno>:
 800a1ac:	4b01      	ldr	r3, [pc, #4]	; (800a1b4 <__errno+0x8>)
 800a1ae:	6818      	ldr	r0, [r3, #0]
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	20000028 	.word	0x20000028

0800a1b8 <__libc_init_array>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	4d0d      	ldr	r5, [pc, #52]	; (800a1f0 <__libc_init_array+0x38>)
 800a1bc:	4c0d      	ldr	r4, [pc, #52]	; (800a1f4 <__libc_init_array+0x3c>)
 800a1be:	1b64      	subs	r4, r4, r5
 800a1c0:	10a4      	asrs	r4, r4, #2
 800a1c2:	2600      	movs	r6, #0
 800a1c4:	42a6      	cmp	r6, r4
 800a1c6:	d109      	bne.n	800a1dc <__libc_init_array+0x24>
 800a1c8:	4d0b      	ldr	r5, [pc, #44]	; (800a1f8 <__libc_init_array+0x40>)
 800a1ca:	4c0c      	ldr	r4, [pc, #48]	; (800a1fc <__libc_init_array+0x44>)
 800a1cc:	f005 f8f8 	bl	800f3c0 <_init>
 800a1d0:	1b64      	subs	r4, r4, r5
 800a1d2:	10a4      	asrs	r4, r4, #2
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	42a6      	cmp	r6, r4
 800a1d8:	d105      	bne.n	800a1e6 <__libc_init_array+0x2e>
 800a1da:	bd70      	pop	{r4, r5, r6, pc}
 800a1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e0:	4798      	blx	r3
 800a1e2:	3601      	adds	r6, #1
 800a1e4:	e7ee      	b.n	800a1c4 <__libc_init_array+0xc>
 800a1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ea:	4798      	blx	r3
 800a1ec:	3601      	adds	r6, #1
 800a1ee:	e7f2      	b.n	800a1d6 <__libc_init_array+0x1e>
 800a1f0:	0800fc50 	.word	0x0800fc50
 800a1f4:	0800fc50 	.word	0x0800fc50
 800a1f8:	0800fc50 	.word	0x0800fc50
 800a1fc:	0800fc54 	.word	0x0800fc54

0800a200 <malloc>:
 800a200:	4b02      	ldr	r3, [pc, #8]	; (800a20c <malloc+0xc>)
 800a202:	4601      	mov	r1, r0
 800a204:	6818      	ldr	r0, [r3, #0]
 800a206:	f000 b885 	b.w	800a314 <_malloc_r>
 800a20a:	bf00      	nop
 800a20c:	20000028 	.word	0x20000028

0800a210 <memcpy>:
 800a210:	440a      	add	r2, r1
 800a212:	4291      	cmp	r1, r2
 800a214:	f100 33ff 	add.w	r3, r0, #4294967295
 800a218:	d100      	bne.n	800a21c <memcpy+0xc>
 800a21a:	4770      	bx	lr
 800a21c:	b510      	push	{r4, lr}
 800a21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a226:	4291      	cmp	r1, r2
 800a228:	d1f9      	bne.n	800a21e <memcpy+0xe>
 800a22a:	bd10      	pop	{r4, pc}

0800a22c <memset>:
 800a22c:	4402      	add	r2, r0
 800a22e:	4603      	mov	r3, r0
 800a230:	4293      	cmp	r3, r2
 800a232:	d100      	bne.n	800a236 <memset+0xa>
 800a234:	4770      	bx	lr
 800a236:	f803 1b01 	strb.w	r1, [r3], #1
 800a23a:	e7f9      	b.n	800a230 <memset+0x4>

0800a23c <_free_r>:
 800a23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a23e:	2900      	cmp	r1, #0
 800a240:	d044      	beq.n	800a2cc <_free_r+0x90>
 800a242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a246:	9001      	str	r0, [sp, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f1a1 0404 	sub.w	r4, r1, #4
 800a24e:	bfb8      	it	lt
 800a250:	18e4      	addlt	r4, r4, r3
 800a252:	f001 fbeb 	bl	800ba2c <__malloc_lock>
 800a256:	4a1e      	ldr	r2, [pc, #120]	; (800a2d0 <_free_r+0x94>)
 800a258:	9801      	ldr	r0, [sp, #4]
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	b933      	cbnz	r3, 800a26c <_free_r+0x30>
 800a25e:	6063      	str	r3, [r4, #4]
 800a260:	6014      	str	r4, [r2, #0]
 800a262:	b003      	add	sp, #12
 800a264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a268:	f001 bbe6 	b.w	800ba38 <__malloc_unlock>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d908      	bls.n	800a282 <_free_r+0x46>
 800a270:	6825      	ldr	r5, [r4, #0]
 800a272:	1961      	adds	r1, r4, r5
 800a274:	428b      	cmp	r3, r1
 800a276:	bf01      	itttt	eq
 800a278:	6819      	ldreq	r1, [r3, #0]
 800a27a:	685b      	ldreq	r3, [r3, #4]
 800a27c:	1949      	addeq	r1, r1, r5
 800a27e:	6021      	streq	r1, [r4, #0]
 800a280:	e7ed      	b.n	800a25e <_free_r+0x22>
 800a282:	461a      	mov	r2, r3
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b10b      	cbz	r3, 800a28c <_free_r+0x50>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d9fa      	bls.n	800a282 <_free_r+0x46>
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	1855      	adds	r5, r2, r1
 800a290:	42a5      	cmp	r5, r4
 800a292:	d10b      	bne.n	800a2ac <_free_r+0x70>
 800a294:	6824      	ldr	r4, [r4, #0]
 800a296:	4421      	add	r1, r4
 800a298:	1854      	adds	r4, r2, r1
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	6011      	str	r1, [r2, #0]
 800a29e:	d1e0      	bne.n	800a262 <_free_r+0x26>
 800a2a0:	681c      	ldr	r4, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	6053      	str	r3, [r2, #4]
 800a2a6:	4421      	add	r1, r4
 800a2a8:	6011      	str	r1, [r2, #0]
 800a2aa:	e7da      	b.n	800a262 <_free_r+0x26>
 800a2ac:	d902      	bls.n	800a2b4 <_free_r+0x78>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	e7d6      	b.n	800a262 <_free_r+0x26>
 800a2b4:	6825      	ldr	r5, [r4, #0]
 800a2b6:	1961      	adds	r1, r4, r5
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf04      	itt	eq
 800a2bc:	6819      	ldreq	r1, [r3, #0]
 800a2be:	685b      	ldreq	r3, [r3, #4]
 800a2c0:	6063      	str	r3, [r4, #4]
 800a2c2:	bf04      	itt	eq
 800a2c4:	1949      	addeq	r1, r1, r5
 800a2c6:	6021      	streq	r1, [r4, #0]
 800a2c8:	6054      	str	r4, [r2, #4]
 800a2ca:	e7ca      	b.n	800a262 <_free_r+0x26>
 800a2cc:	b003      	add	sp, #12
 800a2ce:	bd30      	pop	{r4, r5, pc}
 800a2d0:	200133bc 	.word	0x200133bc

0800a2d4 <sbrk_aligned>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	4e0e      	ldr	r6, [pc, #56]	; (800a310 <sbrk_aligned+0x3c>)
 800a2d8:	460c      	mov	r4, r1
 800a2da:	6831      	ldr	r1, [r6, #0]
 800a2dc:	4605      	mov	r5, r0
 800a2de:	b911      	cbnz	r1, 800a2e6 <sbrk_aligned+0x12>
 800a2e0:	f000 fcf6 	bl	800acd0 <_sbrk_r>
 800a2e4:	6030      	str	r0, [r6, #0]
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 fcf1 	bl	800acd0 <_sbrk_r>
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	d00a      	beq.n	800a308 <sbrk_aligned+0x34>
 800a2f2:	1cc4      	adds	r4, r0, #3
 800a2f4:	f024 0403 	bic.w	r4, r4, #3
 800a2f8:	42a0      	cmp	r0, r4
 800a2fa:	d007      	beq.n	800a30c <sbrk_aligned+0x38>
 800a2fc:	1a21      	subs	r1, r4, r0
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 fce6 	bl	800acd0 <_sbrk_r>
 800a304:	3001      	adds	r0, #1
 800a306:	d101      	bne.n	800a30c <sbrk_aligned+0x38>
 800a308:	f04f 34ff 	mov.w	r4, #4294967295
 800a30c:	4620      	mov	r0, r4
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	200133c0 	.word	0x200133c0

0800a314 <_malloc_r>:
 800a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a318:	1ccd      	adds	r5, r1, #3
 800a31a:	f025 0503 	bic.w	r5, r5, #3
 800a31e:	3508      	adds	r5, #8
 800a320:	2d0c      	cmp	r5, #12
 800a322:	bf38      	it	cc
 800a324:	250c      	movcc	r5, #12
 800a326:	2d00      	cmp	r5, #0
 800a328:	4607      	mov	r7, r0
 800a32a:	db01      	blt.n	800a330 <_malloc_r+0x1c>
 800a32c:	42a9      	cmp	r1, r5
 800a32e:	d905      	bls.n	800a33c <_malloc_r+0x28>
 800a330:	230c      	movs	r3, #12
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	2600      	movs	r6, #0
 800a336:	4630      	mov	r0, r6
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	4e2e      	ldr	r6, [pc, #184]	; (800a3f8 <_malloc_r+0xe4>)
 800a33e:	f001 fb75 	bl	800ba2c <__malloc_lock>
 800a342:	6833      	ldr	r3, [r6, #0]
 800a344:	461c      	mov	r4, r3
 800a346:	bb34      	cbnz	r4, 800a396 <_malloc_r+0x82>
 800a348:	4629      	mov	r1, r5
 800a34a:	4638      	mov	r0, r7
 800a34c:	f7ff ffc2 	bl	800a2d4 <sbrk_aligned>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	4604      	mov	r4, r0
 800a354:	d14d      	bne.n	800a3f2 <_malloc_r+0xde>
 800a356:	6834      	ldr	r4, [r6, #0]
 800a358:	4626      	mov	r6, r4
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	d140      	bne.n	800a3e0 <_malloc_r+0xcc>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	4631      	mov	r1, r6
 800a362:	4638      	mov	r0, r7
 800a364:	eb04 0803 	add.w	r8, r4, r3
 800a368:	f000 fcb2 	bl	800acd0 <_sbrk_r>
 800a36c:	4580      	cmp	r8, r0
 800a36e:	d13a      	bne.n	800a3e6 <_malloc_r+0xd2>
 800a370:	6821      	ldr	r1, [r4, #0]
 800a372:	3503      	adds	r5, #3
 800a374:	1a6d      	subs	r5, r5, r1
 800a376:	f025 0503 	bic.w	r5, r5, #3
 800a37a:	3508      	adds	r5, #8
 800a37c:	2d0c      	cmp	r5, #12
 800a37e:	bf38      	it	cc
 800a380:	250c      	movcc	r5, #12
 800a382:	4629      	mov	r1, r5
 800a384:	4638      	mov	r0, r7
 800a386:	f7ff ffa5 	bl	800a2d4 <sbrk_aligned>
 800a38a:	3001      	adds	r0, #1
 800a38c:	d02b      	beq.n	800a3e6 <_malloc_r+0xd2>
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	442b      	add	r3, r5
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	e00e      	b.n	800a3b4 <_malloc_r+0xa0>
 800a396:	6822      	ldr	r2, [r4, #0]
 800a398:	1b52      	subs	r2, r2, r5
 800a39a:	d41e      	bmi.n	800a3da <_malloc_r+0xc6>
 800a39c:	2a0b      	cmp	r2, #11
 800a39e:	d916      	bls.n	800a3ce <_malloc_r+0xba>
 800a3a0:	1961      	adds	r1, r4, r5
 800a3a2:	42a3      	cmp	r3, r4
 800a3a4:	6025      	str	r5, [r4, #0]
 800a3a6:	bf18      	it	ne
 800a3a8:	6059      	strne	r1, [r3, #4]
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	bf08      	it	eq
 800a3ae:	6031      	streq	r1, [r6, #0]
 800a3b0:	5162      	str	r2, [r4, r5]
 800a3b2:	604b      	str	r3, [r1, #4]
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f104 060b 	add.w	r6, r4, #11
 800a3ba:	f001 fb3d 	bl	800ba38 <__malloc_unlock>
 800a3be:	f026 0607 	bic.w	r6, r6, #7
 800a3c2:	1d23      	adds	r3, r4, #4
 800a3c4:	1af2      	subs	r2, r6, r3
 800a3c6:	d0b6      	beq.n	800a336 <_malloc_r+0x22>
 800a3c8:	1b9b      	subs	r3, r3, r6
 800a3ca:	50a3      	str	r3, [r4, r2]
 800a3cc:	e7b3      	b.n	800a336 <_malloc_r+0x22>
 800a3ce:	6862      	ldr	r2, [r4, #4]
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	bf0c      	ite	eq
 800a3d4:	6032      	streq	r2, [r6, #0]
 800a3d6:	605a      	strne	r2, [r3, #4]
 800a3d8:	e7ec      	b.n	800a3b4 <_malloc_r+0xa0>
 800a3da:	4623      	mov	r3, r4
 800a3dc:	6864      	ldr	r4, [r4, #4]
 800a3de:	e7b2      	b.n	800a346 <_malloc_r+0x32>
 800a3e0:	4634      	mov	r4, r6
 800a3e2:	6876      	ldr	r6, [r6, #4]
 800a3e4:	e7b9      	b.n	800a35a <_malloc_r+0x46>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	603b      	str	r3, [r7, #0]
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	f001 fb24 	bl	800ba38 <__malloc_unlock>
 800a3f0:	e7a1      	b.n	800a336 <_malloc_r+0x22>
 800a3f2:	6025      	str	r5, [r4, #0]
 800a3f4:	e7de      	b.n	800a3b4 <_malloc_r+0xa0>
 800a3f6:	bf00      	nop
 800a3f8:	200133bc 	.word	0x200133bc

0800a3fc <__cvt>:
 800a3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a400:	ec55 4b10 	vmov	r4, r5, d0
 800a404:	2d00      	cmp	r5, #0
 800a406:	460e      	mov	r6, r1
 800a408:	4619      	mov	r1, r3
 800a40a:	462b      	mov	r3, r5
 800a40c:	bfbb      	ittet	lt
 800a40e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a412:	461d      	movlt	r5, r3
 800a414:	2300      	movge	r3, #0
 800a416:	232d      	movlt	r3, #45	; 0x2d
 800a418:	700b      	strb	r3, [r1, #0]
 800a41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a41c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a420:	4691      	mov	r9, r2
 800a422:	f023 0820 	bic.w	r8, r3, #32
 800a426:	bfbc      	itt	lt
 800a428:	4622      	movlt	r2, r4
 800a42a:	4614      	movlt	r4, r2
 800a42c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a430:	d005      	beq.n	800a43e <__cvt+0x42>
 800a432:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a436:	d100      	bne.n	800a43a <__cvt+0x3e>
 800a438:	3601      	adds	r6, #1
 800a43a:	2102      	movs	r1, #2
 800a43c:	e000      	b.n	800a440 <__cvt+0x44>
 800a43e:	2103      	movs	r1, #3
 800a440:	ab03      	add	r3, sp, #12
 800a442:	9301      	str	r3, [sp, #4]
 800a444:	ab02      	add	r3, sp, #8
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	ec45 4b10 	vmov	d0, r4, r5
 800a44c:	4653      	mov	r3, sl
 800a44e:	4632      	mov	r2, r6
 800a450:	f000 fcfa 	bl	800ae48 <_dtoa_r>
 800a454:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a458:	4607      	mov	r7, r0
 800a45a:	d102      	bne.n	800a462 <__cvt+0x66>
 800a45c:	f019 0f01 	tst.w	r9, #1
 800a460:	d022      	beq.n	800a4a8 <__cvt+0xac>
 800a462:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a466:	eb07 0906 	add.w	r9, r7, r6
 800a46a:	d110      	bne.n	800a48e <__cvt+0x92>
 800a46c:	783b      	ldrb	r3, [r7, #0]
 800a46e:	2b30      	cmp	r3, #48	; 0x30
 800a470:	d10a      	bne.n	800a488 <__cvt+0x8c>
 800a472:	2200      	movs	r2, #0
 800a474:	2300      	movs	r3, #0
 800a476:	4620      	mov	r0, r4
 800a478:	4629      	mov	r1, r5
 800a47a:	f7f6 fb3d 	bl	8000af8 <__aeabi_dcmpeq>
 800a47e:	b918      	cbnz	r0, 800a488 <__cvt+0x8c>
 800a480:	f1c6 0601 	rsb	r6, r6, #1
 800a484:	f8ca 6000 	str.w	r6, [sl]
 800a488:	f8da 3000 	ldr.w	r3, [sl]
 800a48c:	4499      	add	r9, r3
 800a48e:	2200      	movs	r2, #0
 800a490:	2300      	movs	r3, #0
 800a492:	4620      	mov	r0, r4
 800a494:	4629      	mov	r1, r5
 800a496:	f7f6 fb2f 	bl	8000af8 <__aeabi_dcmpeq>
 800a49a:	b108      	cbz	r0, 800a4a0 <__cvt+0xa4>
 800a49c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4a0:	2230      	movs	r2, #48	; 0x30
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	454b      	cmp	r3, r9
 800a4a6:	d307      	bcc.n	800a4b8 <__cvt+0xbc>
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ac:	1bdb      	subs	r3, r3, r7
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	b004      	add	sp, #16
 800a4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b8:	1c59      	adds	r1, r3, #1
 800a4ba:	9103      	str	r1, [sp, #12]
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e7f0      	b.n	800a4a2 <__cvt+0xa6>

0800a4c0 <__exponent>:
 800a4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	bfb8      	it	lt
 800a4c8:	4249      	neglt	r1, r1
 800a4ca:	f803 2b02 	strb.w	r2, [r3], #2
 800a4ce:	bfb4      	ite	lt
 800a4d0:	222d      	movlt	r2, #45	; 0x2d
 800a4d2:	222b      	movge	r2, #43	; 0x2b
 800a4d4:	2909      	cmp	r1, #9
 800a4d6:	7042      	strb	r2, [r0, #1]
 800a4d8:	dd2a      	ble.n	800a530 <__exponent+0x70>
 800a4da:	f10d 0407 	add.w	r4, sp, #7
 800a4de:	46a4      	mov	ip, r4
 800a4e0:	270a      	movs	r7, #10
 800a4e2:	46a6      	mov	lr, r4
 800a4e4:	460a      	mov	r2, r1
 800a4e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a4ea:	fb07 1516 	mls	r5, r7, r6, r1
 800a4ee:	3530      	adds	r5, #48	; 0x30
 800a4f0:	2a63      	cmp	r2, #99	; 0x63
 800a4f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a4f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	dcf1      	bgt.n	800a4e2 <__exponent+0x22>
 800a4fe:	3130      	adds	r1, #48	; 0x30
 800a500:	f1ae 0502 	sub.w	r5, lr, #2
 800a504:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a508:	1c44      	adds	r4, r0, #1
 800a50a:	4629      	mov	r1, r5
 800a50c:	4561      	cmp	r1, ip
 800a50e:	d30a      	bcc.n	800a526 <__exponent+0x66>
 800a510:	f10d 0209 	add.w	r2, sp, #9
 800a514:	eba2 020e 	sub.w	r2, r2, lr
 800a518:	4565      	cmp	r5, ip
 800a51a:	bf88      	it	hi
 800a51c:	2200      	movhi	r2, #0
 800a51e:	4413      	add	r3, r2
 800a520:	1a18      	subs	r0, r3, r0
 800a522:	b003      	add	sp, #12
 800a524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a52a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a52e:	e7ed      	b.n	800a50c <__exponent+0x4c>
 800a530:	2330      	movs	r3, #48	; 0x30
 800a532:	3130      	adds	r1, #48	; 0x30
 800a534:	7083      	strb	r3, [r0, #2]
 800a536:	70c1      	strb	r1, [r0, #3]
 800a538:	1d03      	adds	r3, r0, #4
 800a53a:	e7f1      	b.n	800a520 <__exponent+0x60>

0800a53c <_printf_float>:
 800a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a540:	ed2d 8b02 	vpush	{d8}
 800a544:	b08d      	sub	sp, #52	; 0x34
 800a546:	460c      	mov	r4, r1
 800a548:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a54c:	4616      	mov	r6, r2
 800a54e:	461f      	mov	r7, r3
 800a550:	4605      	mov	r5, r0
 800a552:	f001 fa67 	bl	800ba24 <_localeconv_r>
 800a556:	f8d0 a000 	ldr.w	sl, [r0]
 800a55a:	4650      	mov	r0, sl
 800a55c:	f7f5 fe4a 	bl	80001f4 <strlen>
 800a560:	2300      	movs	r3, #0
 800a562:	930a      	str	r3, [sp, #40]	; 0x28
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	9305      	str	r3, [sp, #20]
 800a568:	f8d8 3000 	ldr.w	r3, [r8]
 800a56c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a570:	3307      	adds	r3, #7
 800a572:	f023 0307 	bic.w	r3, r3, #7
 800a576:	f103 0208 	add.w	r2, r3, #8
 800a57a:	f8c8 2000 	str.w	r2, [r8]
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a586:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a58a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a58e:	9307      	str	r3, [sp, #28]
 800a590:	f8cd 8018 	str.w	r8, [sp, #24]
 800a594:	ee08 0a10 	vmov	s16, r0
 800a598:	4b9f      	ldr	r3, [pc, #636]	; (800a818 <_printf_float+0x2dc>)
 800a59a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a59e:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a2:	f7f6 fadb 	bl	8000b5c <__aeabi_dcmpun>
 800a5a6:	bb88      	cbnz	r0, 800a60c <_printf_float+0xd0>
 800a5a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5ac:	4b9a      	ldr	r3, [pc, #616]	; (800a818 <_printf_float+0x2dc>)
 800a5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b2:	f7f6 fab5 	bl	8000b20 <__aeabi_dcmple>
 800a5b6:	bb48      	cbnz	r0, 800a60c <_printf_float+0xd0>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4640      	mov	r0, r8
 800a5be:	4649      	mov	r1, r9
 800a5c0:	f7f6 faa4 	bl	8000b0c <__aeabi_dcmplt>
 800a5c4:	b110      	cbz	r0, 800a5cc <_printf_float+0x90>
 800a5c6:	232d      	movs	r3, #45	; 0x2d
 800a5c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5cc:	4b93      	ldr	r3, [pc, #588]	; (800a81c <_printf_float+0x2e0>)
 800a5ce:	4894      	ldr	r0, [pc, #592]	; (800a820 <_printf_float+0x2e4>)
 800a5d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5d4:	bf94      	ite	ls
 800a5d6:	4698      	movls	r8, r3
 800a5d8:	4680      	movhi	r8, r0
 800a5da:	2303      	movs	r3, #3
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	9b05      	ldr	r3, [sp, #20]
 800a5e0:	f023 0204 	bic.w	r2, r3, #4
 800a5e4:	6022      	str	r2, [r4, #0]
 800a5e6:	f04f 0900 	mov.w	r9, #0
 800a5ea:	9700      	str	r7, [sp, #0]
 800a5ec:	4633      	mov	r3, r6
 800a5ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	f000 f9d8 	bl	800a9a8 <_printf_common>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f040 8090 	bne.w	800a71e <_printf_float+0x1e2>
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a602:	b00d      	add	sp, #52	; 0x34
 800a604:	ecbd 8b02 	vpop	{d8}
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	4642      	mov	r2, r8
 800a60e:	464b      	mov	r3, r9
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f6 faa2 	bl	8000b5c <__aeabi_dcmpun>
 800a618:	b140      	cbz	r0, 800a62c <_printf_float+0xf0>
 800a61a:	464b      	mov	r3, r9
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	bfbc      	itt	lt
 800a620:	232d      	movlt	r3, #45	; 0x2d
 800a622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a626:	487f      	ldr	r0, [pc, #508]	; (800a824 <_printf_float+0x2e8>)
 800a628:	4b7f      	ldr	r3, [pc, #508]	; (800a828 <_printf_float+0x2ec>)
 800a62a:	e7d1      	b.n	800a5d0 <_printf_float+0x94>
 800a62c:	6863      	ldr	r3, [r4, #4]
 800a62e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a632:	9206      	str	r2, [sp, #24]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	d13f      	bne.n	800a6b8 <_printf_float+0x17c>
 800a638:	2306      	movs	r3, #6
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	9b05      	ldr	r3, [sp, #20]
 800a63e:	6861      	ldr	r1, [r4, #4]
 800a640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a644:	2300      	movs	r3, #0
 800a646:	9303      	str	r3, [sp, #12]
 800a648:	ab0a      	add	r3, sp, #40	; 0x28
 800a64a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a64e:	ab09      	add	r3, sp, #36	; 0x24
 800a650:	ec49 8b10 	vmov	d0, r8, r9
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	6022      	str	r2, [r4, #0]
 800a658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a65c:	4628      	mov	r0, r5
 800a65e:	f7ff fecd 	bl	800a3fc <__cvt>
 800a662:	9b06      	ldr	r3, [sp, #24]
 800a664:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a666:	2b47      	cmp	r3, #71	; 0x47
 800a668:	4680      	mov	r8, r0
 800a66a:	d108      	bne.n	800a67e <_printf_float+0x142>
 800a66c:	1cc8      	adds	r0, r1, #3
 800a66e:	db02      	blt.n	800a676 <_printf_float+0x13a>
 800a670:	6863      	ldr	r3, [r4, #4]
 800a672:	4299      	cmp	r1, r3
 800a674:	dd41      	ble.n	800a6fa <_printf_float+0x1be>
 800a676:	f1ab 0b02 	sub.w	fp, fp, #2
 800a67a:	fa5f fb8b 	uxtb.w	fp, fp
 800a67e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a682:	d820      	bhi.n	800a6c6 <_printf_float+0x18a>
 800a684:	3901      	subs	r1, #1
 800a686:	465a      	mov	r2, fp
 800a688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a68c:	9109      	str	r1, [sp, #36]	; 0x24
 800a68e:	f7ff ff17 	bl	800a4c0 <__exponent>
 800a692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a694:	1813      	adds	r3, r2, r0
 800a696:	2a01      	cmp	r2, #1
 800a698:	4681      	mov	r9, r0
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	dc02      	bgt.n	800a6a4 <_printf_float+0x168>
 800a69e:	6822      	ldr	r2, [r4, #0]
 800a6a0:	07d2      	lsls	r2, r2, #31
 800a6a2:	d501      	bpl.n	800a6a8 <_printf_float+0x16c>
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d09c      	beq.n	800a5ea <_printf_float+0xae>
 800a6b0:	232d      	movs	r3, #45	; 0x2d
 800a6b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6b6:	e798      	b.n	800a5ea <_printf_float+0xae>
 800a6b8:	9a06      	ldr	r2, [sp, #24]
 800a6ba:	2a47      	cmp	r2, #71	; 0x47
 800a6bc:	d1be      	bne.n	800a63c <_printf_float+0x100>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1bc      	bne.n	800a63c <_printf_float+0x100>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e7b9      	b.n	800a63a <_printf_float+0xfe>
 800a6c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6ca:	d118      	bne.n	800a6fe <_printf_float+0x1c2>
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	6863      	ldr	r3, [r4, #4]
 800a6d0:	dd0b      	ble.n	800a6ea <_printf_float+0x1ae>
 800a6d2:	6121      	str	r1, [r4, #16]
 800a6d4:	b913      	cbnz	r3, 800a6dc <_printf_float+0x1a0>
 800a6d6:	6822      	ldr	r2, [r4, #0]
 800a6d8:	07d0      	lsls	r0, r2, #31
 800a6da:	d502      	bpl.n	800a6e2 <_printf_float+0x1a6>
 800a6dc:	3301      	adds	r3, #1
 800a6de:	440b      	add	r3, r1
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6e4:	f04f 0900 	mov.w	r9, #0
 800a6e8:	e7de      	b.n	800a6a8 <_printf_float+0x16c>
 800a6ea:	b913      	cbnz	r3, 800a6f2 <_printf_float+0x1b6>
 800a6ec:	6822      	ldr	r2, [r4, #0]
 800a6ee:	07d2      	lsls	r2, r2, #31
 800a6f0:	d501      	bpl.n	800a6f6 <_printf_float+0x1ba>
 800a6f2:	3302      	adds	r3, #2
 800a6f4:	e7f4      	b.n	800a6e0 <_printf_float+0x1a4>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7f2      	b.n	800a6e0 <_printf_float+0x1a4>
 800a6fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a700:	4299      	cmp	r1, r3
 800a702:	db05      	blt.n	800a710 <_printf_float+0x1d4>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	6121      	str	r1, [r4, #16]
 800a708:	07d8      	lsls	r0, r3, #31
 800a70a:	d5ea      	bpl.n	800a6e2 <_printf_float+0x1a6>
 800a70c:	1c4b      	adds	r3, r1, #1
 800a70e:	e7e7      	b.n	800a6e0 <_printf_float+0x1a4>
 800a710:	2900      	cmp	r1, #0
 800a712:	bfd4      	ite	le
 800a714:	f1c1 0202 	rsble	r2, r1, #2
 800a718:	2201      	movgt	r2, #1
 800a71a:	4413      	add	r3, r2
 800a71c:	e7e0      	b.n	800a6e0 <_printf_float+0x1a4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	055a      	lsls	r2, r3, #21
 800a722:	d407      	bmi.n	800a734 <_printf_float+0x1f8>
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	4642      	mov	r2, r8
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	d12c      	bne.n	800a78c <_printf_float+0x250>
 800a732:	e764      	b.n	800a5fe <_printf_float+0xc2>
 800a734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a738:	f240 80e0 	bls.w	800a8fc <_printf_float+0x3c0>
 800a73c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a740:	2200      	movs	r2, #0
 800a742:	2300      	movs	r3, #0
 800a744:	f7f6 f9d8 	bl	8000af8 <__aeabi_dcmpeq>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d034      	beq.n	800a7b6 <_printf_float+0x27a>
 800a74c:	4a37      	ldr	r2, [pc, #220]	; (800a82c <_printf_float+0x2f0>)
 800a74e:	2301      	movs	r3, #1
 800a750:	4631      	mov	r1, r6
 800a752:	4628      	mov	r0, r5
 800a754:	47b8      	blx	r7
 800a756:	3001      	adds	r0, #1
 800a758:	f43f af51 	beq.w	800a5fe <_printf_float+0xc2>
 800a75c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a760:	429a      	cmp	r2, r3
 800a762:	db02      	blt.n	800a76a <_printf_float+0x22e>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	07d8      	lsls	r0, r3, #31
 800a768:	d510      	bpl.n	800a78c <_printf_float+0x250>
 800a76a:	ee18 3a10 	vmov	r3, s16
 800a76e:	4652      	mov	r2, sl
 800a770:	4631      	mov	r1, r6
 800a772:	4628      	mov	r0, r5
 800a774:	47b8      	blx	r7
 800a776:	3001      	adds	r0, #1
 800a778:	f43f af41 	beq.w	800a5fe <_printf_float+0xc2>
 800a77c:	f04f 0800 	mov.w	r8, #0
 800a780:	f104 091a 	add.w	r9, r4, #26
 800a784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a786:	3b01      	subs	r3, #1
 800a788:	4543      	cmp	r3, r8
 800a78a:	dc09      	bgt.n	800a7a0 <_printf_float+0x264>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	079b      	lsls	r3, r3, #30
 800a790:	f100 8105 	bmi.w	800a99e <_printf_float+0x462>
 800a794:	68e0      	ldr	r0, [r4, #12]
 800a796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a798:	4298      	cmp	r0, r3
 800a79a:	bfb8      	it	lt
 800a79c:	4618      	movlt	r0, r3
 800a79e:	e730      	b.n	800a602 <_printf_float+0xc6>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	464a      	mov	r2, r9
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	47b8      	blx	r7
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	f43f af27 	beq.w	800a5fe <_printf_float+0xc2>
 800a7b0:	f108 0801 	add.w	r8, r8, #1
 800a7b4:	e7e6      	b.n	800a784 <_printf_float+0x248>
 800a7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dc39      	bgt.n	800a830 <_printf_float+0x2f4>
 800a7bc:	4a1b      	ldr	r2, [pc, #108]	; (800a82c <_printf_float+0x2f0>)
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f af19 	beq.w	800a5fe <_printf_float+0xc2>
 800a7cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	d102      	bne.n	800a7da <_printf_float+0x29e>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	07d9      	lsls	r1, r3, #31
 800a7d8:	d5d8      	bpl.n	800a78c <_printf_float+0x250>
 800a7da:	ee18 3a10 	vmov	r3, s16
 800a7de:	4652      	mov	r2, sl
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	47b8      	blx	r7
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f43f af09 	beq.w	800a5fe <_printf_float+0xc2>
 800a7ec:	f04f 0900 	mov.w	r9, #0
 800a7f0:	f104 0a1a 	add.w	sl, r4, #26
 800a7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f6:	425b      	negs	r3, r3
 800a7f8:	454b      	cmp	r3, r9
 800a7fa:	dc01      	bgt.n	800a800 <_printf_float+0x2c4>
 800a7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fe:	e792      	b.n	800a726 <_printf_float+0x1ea>
 800a800:	2301      	movs	r3, #1
 800a802:	4652      	mov	r2, sl
 800a804:	4631      	mov	r1, r6
 800a806:	4628      	mov	r0, r5
 800a808:	47b8      	blx	r7
 800a80a:	3001      	adds	r0, #1
 800a80c:	f43f aef7 	beq.w	800a5fe <_printf_float+0xc2>
 800a810:	f109 0901 	add.w	r9, r9, #1
 800a814:	e7ee      	b.n	800a7f4 <_printf_float+0x2b8>
 800a816:	bf00      	nop
 800a818:	7fefffff 	.word	0x7fefffff
 800a81c:	0800f5fc 	.word	0x0800f5fc
 800a820:	0800f600 	.word	0x0800f600
 800a824:	0800f608 	.word	0x0800f608
 800a828:	0800f604 	.word	0x0800f604
 800a82c:	0800f60c 	.word	0x0800f60c
 800a830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a834:	429a      	cmp	r2, r3
 800a836:	bfa8      	it	ge
 800a838:	461a      	movge	r2, r3
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	4691      	mov	r9, r2
 800a83e:	dc37      	bgt.n	800a8b0 <_printf_float+0x374>
 800a840:	f04f 0b00 	mov.w	fp, #0
 800a844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a848:	f104 021a 	add.w	r2, r4, #26
 800a84c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	eba3 0309 	sub.w	r3, r3, r9
 800a854:	455b      	cmp	r3, fp
 800a856:	dc33      	bgt.n	800a8c0 <_printf_float+0x384>
 800a858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a85c:	429a      	cmp	r2, r3
 800a85e:	db3b      	blt.n	800a8d8 <_printf_float+0x39c>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	07da      	lsls	r2, r3, #31
 800a864:	d438      	bmi.n	800a8d8 <_printf_float+0x39c>
 800a866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a868:	9a05      	ldr	r2, [sp, #20]
 800a86a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a86c:	1a9a      	subs	r2, r3, r2
 800a86e:	eba3 0901 	sub.w	r9, r3, r1
 800a872:	4591      	cmp	r9, r2
 800a874:	bfa8      	it	ge
 800a876:	4691      	movge	r9, r2
 800a878:	f1b9 0f00 	cmp.w	r9, #0
 800a87c:	dc35      	bgt.n	800a8ea <_printf_float+0x3ae>
 800a87e:	f04f 0800 	mov.w	r8, #0
 800a882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a886:	f104 0a1a 	add.w	sl, r4, #26
 800a88a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	eba3 0309 	sub.w	r3, r3, r9
 800a894:	4543      	cmp	r3, r8
 800a896:	f77f af79 	ble.w	800a78c <_printf_float+0x250>
 800a89a:	2301      	movs	r3, #1
 800a89c:	4652      	mov	r2, sl
 800a89e:	4631      	mov	r1, r6
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b8      	blx	r7
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	f43f aeaa 	beq.w	800a5fe <_printf_float+0xc2>
 800a8aa:	f108 0801 	add.w	r8, r8, #1
 800a8ae:	e7ec      	b.n	800a88a <_printf_float+0x34e>
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4642      	mov	r2, r8
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b8      	blx	r7
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	d1c0      	bne.n	800a840 <_printf_float+0x304>
 800a8be:	e69e      	b.n	800a5fe <_printf_float+0xc2>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	9205      	str	r2, [sp, #20]
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f43f ae97 	beq.w	800a5fe <_printf_float+0xc2>
 800a8d0:	9a05      	ldr	r2, [sp, #20]
 800a8d2:	f10b 0b01 	add.w	fp, fp, #1
 800a8d6:	e7b9      	b.n	800a84c <_printf_float+0x310>
 800a8d8:	ee18 3a10 	vmov	r3, s16
 800a8dc:	4652      	mov	r2, sl
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d1be      	bne.n	800a866 <_printf_float+0x32a>
 800a8e8:	e689      	b.n	800a5fe <_printf_float+0xc2>
 800a8ea:	9a05      	ldr	r2, [sp, #20]
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	4442      	add	r2, r8
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	47b8      	blx	r7
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d1c1      	bne.n	800a87e <_printf_float+0x342>
 800a8fa:	e680      	b.n	800a5fe <_printf_float+0xc2>
 800a8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8fe:	2a01      	cmp	r2, #1
 800a900:	dc01      	bgt.n	800a906 <_printf_float+0x3ca>
 800a902:	07db      	lsls	r3, r3, #31
 800a904:	d538      	bpl.n	800a978 <_printf_float+0x43c>
 800a906:	2301      	movs	r3, #1
 800a908:	4642      	mov	r2, r8
 800a90a:	4631      	mov	r1, r6
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b8      	blx	r7
 800a910:	3001      	adds	r0, #1
 800a912:	f43f ae74 	beq.w	800a5fe <_printf_float+0xc2>
 800a916:	ee18 3a10 	vmov	r3, s16
 800a91a:	4652      	mov	r2, sl
 800a91c:	4631      	mov	r1, r6
 800a91e:	4628      	mov	r0, r5
 800a920:	47b8      	blx	r7
 800a922:	3001      	adds	r0, #1
 800a924:	f43f ae6b 	beq.w	800a5fe <_printf_float+0xc2>
 800a928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a92c:	2200      	movs	r2, #0
 800a92e:	2300      	movs	r3, #0
 800a930:	f7f6 f8e2 	bl	8000af8 <__aeabi_dcmpeq>
 800a934:	b9d8      	cbnz	r0, 800a96e <_printf_float+0x432>
 800a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a938:	f108 0201 	add.w	r2, r8, #1
 800a93c:	3b01      	subs	r3, #1
 800a93e:	4631      	mov	r1, r6
 800a940:	4628      	mov	r0, r5
 800a942:	47b8      	blx	r7
 800a944:	3001      	adds	r0, #1
 800a946:	d10e      	bne.n	800a966 <_printf_float+0x42a>
 800a948:	e659      	b.n	800a5fe <_printf_float+0xc2>
 800a94a:	2301      	movs	r3, #1
 800a94c:	4652      	mov	r2, sl
 800a94e:	4631      	mov	r1, r6
 800a950:	4628      	mov	r0, r5
 800a952:	47b8      	blx	r7
 800a954:	3001      	adds	r0, #1
 800a956:	f43f ae52 	beq.w	800a5fe <_printf_float+0xc2>
 800a95a:	f108 0801 	add.w	r8, r8, #1
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	3b01      	subs	r3, #1
 800a962:	4543      	cmp	r3, r8
 800a964:	dcf1      	bgt.n	800a94a <_printf_float+0x40e>
 800a966:	464b      	mov	r3, r9
 800a968:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a96c:	e6dc      	b.n	800a728 <_printf_float+0x1ec>
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	f104 0a1a 	add.w	sl, r4, #26
 800a976:	e7f2      	b.n	800a95e <_printf_float+0x422>
 800a978:	2301      	movs	r3, #1
 800a97a:	4642      	mov	r2, r8
 800a97c:	e7df      	b.n	800a93e <_printf_float+0x402>
 800a97e:	2301      	movs	r3, #1
 800a980:	464a      	mov	r2, r9
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	47b8      	blx	r7
 800a988:	3001      	adds	r0, #1
 800a98a:	f43f ae38 	beq.w	800a5fe <_printf_float+0xc2>
 800a98e:	f108 0801 	add.w	r8, r8, #1
 800a992:	68e3      	ldr	r3, [r4, #12]
 800a994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	4543      	cmp	r3, r8
 800a99a:	dcf0      	bgt.n	800a97e <_printf_float+0x442>
 800a99c:	e6fa      	b.n	800a794 <_printf_float+0x258>
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	f104 0919 	add.w	r9, r4, #25
 800a9a6:	e7f4      	b.n	800a992 <_printf_float+0x456>

0800a9a8 <_printf_common>:
 800a9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	4699      	mov	r9, r3
 800a9b0:	688a      	ldr	r2, [r1, #8]
 800a9b2:	690b      	ldr	r3, [r1, #16]
 800a9b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	bfb8      	it	lt
 800a9bc:	4613      	movlt	r3, r2
 800a9be:	6033      	str	r3, [r6, #0]
 800a9c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	b10a      	cbz	r2, 800a9ce <_printf_common+0x26>
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	6033      	str	r3, [r6, #0]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	0699      	lsls	r1, r3, #26
 800a9d2:	bf42      	ittt	mi
 800a9d4:	6833      	ldrmi	r3, [r6, #0]
 800a9d6:	3302      	addmi	r3, #2
 800a9d8:	6033      	strmi	r3, [r6, #0]
 800a9da:	6825      	ldr	r5, [r4, #0]
 800a9dc:	f015 0506 	ands.w	r5, r5, #6
 800a9e0:	d106      	bne.n	800a9f0 <_printf_common+0x48>
 800a9e2:	f104 0a19 	add.w	sl, r4, #25
 800a9e6:	68e3      	ldr	r3, [r4, #12]
 800a9e8:	6832      	ldr	r2, [r6, #0]
 800a9ea:	1a9b      	subs	r3, r3, r2
 800a9ec:	42ab      	cmp	r3, r5
 800a9ee:	dc26      	bgt.n	800aa3e <_printf_common+0x96>
 800a9f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9f4:	1e13      	subs	r3, r2, #0
 800a9f6:	6822      	ldr	r2, [r4, #0]
 800a9f8:	bf18      	it	ne
 800a9fa:	2301      	movne	r3, #1
 800a9fc:	0692      	lsls	r2, r2, #26
 800a9fe:	d42b      	bmi.n	800aa58 <_printf_common+0xb0>
 800aa00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa04:	4649      	mov	r1, r9
 800aa06:	4638      	mov	r0, r7
 800aa08:	47c0      	blx	r8
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d01e      	beq.n	800aa4c <_printf_common+0xa4>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	68e5      	ldr	r5, [r4, #12]
 800aa12:	6832      	ldr	r2, [r6, #0]
 800aa14:	f003 0306 	and.w	r3, r3, #6
 800aa18:	2b04      	cmp	r3, #4
 800aa1a:	bf08      	it	eq
 800aa1c:	1aad      	subeq	r5, r5, r2
 800aa1e:	68a3      	ldr	r3, [r4, #8]
 800aa20:	6922      	ldr	r2, [r4, #16]
 800aa22:	bf0c      	ite	eq
 800aa24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa28:	2500      	movne	r5, #0
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	bfc4      	itt	gt
 800aa2e:	1a9b      	subgt	r3, r3, r2
 800aa30:	18ed      	addgt	r5, r5, r3
 800aa32:	2600      	movs	r6, #0
 800aa34:	341a      	adds	r4, #26
 800aa36:	42b5      	cmp	r5, r6
 800aa38:	d11a      	bne.n	800aa70 <_printf_common+0xc8>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	e008      	b.n	800aa50 <_printf_common+0xa8>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	4649      	mov	r1, r9
 800aa44:	4638      	mov	r0, r7
 800aa46:	47c0      	blx	r8
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d103      	bne.n	800aa54 <_printf_common+0xac>
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa54:	3501      	adds	r5, #1
 800aa56:	e7c6      	b.n	800a9e6 <_printf_common+0x3e>
 800aa58:	18e1      	adds	r1, r4, r3
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	2030      	movs	r0, #48	; 0x30
 800aa5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa62:	4422      	add	r2, r4
 800aa64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	e7c7      	b.n	800aa00 <_printf_common+0x58>
 800aa70:	2301      	movs	r3, #1
 800aa72:	4622      	mov	r2, r4
 800aa74:	4649      	mov	r1, r9
 800aa76:	4638      	mov	r0, r7
 800aa78:	47c0      	blx	r8
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	d0e6      	beq.n	800aa4c <_printf_common+0xa4>
 800aa7e:	3601      	adds	r6, #1
 800aa80:	e7d9      	b.n	800aa36 <_printf_common+0x8e>
	...

0800aa84 <_printf_i>:
 800aa84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa88:	7e0f      	ldrb	r7, [r1, #24]
 800aa8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa8c:	2f78      	cmp	r7, #120	; 0x78
 800aa8e:	4691      	mov	r9, r2
 800aa90:	4680      	mov	r8, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	469a      	mov	sl, r3
 800aa96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa9a:	d807      	bhi.n	800aaac <_printf_i+0x28>
 800aa9c:	2f62      	cmp	r7, #98	; 0x62
 800aa9e:	d80a      	bhi.n	800aab6 <_printf_i+0x32>
 800aaa0:	2f00      	cmp	r7, #0
 800aaa2:	f000 80d8 	beq.w	800ac56 <_printf_i+0x1d2>
 800aaa6:	2f58      	cmp	r7, #88	; 0x58
 800aaa8:	f000 80a3 	beq.w	800abf2 <_printf_i+0x16e>
 800aaac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aab4:	e03a      	b.n	800ab2c <_printf_i+0xa8>
 800aab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaba:	2b15      	cmp	r3, #21
 800aabc:	d8f6      	bhi.n	800aaac <_printf_i+0x28>
 800aabe:	a101      	add	r1, pc, #4	; (adr r1, 800aac4 <_printf_i+0x40>)
 800aac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aac4:	0800ab1d 	.word	0x0800ab1d
 800aac8:	0800ab31 	.word	0x0800ab31
 800aacc:	0800aaad 	.word	0x0800aaad
 800aad0:	0800aaad 	.word	0x0800aaad
 800aad4:	0800aaad 	.word	0x0800aaad
 800aad8:	0800aaad 	.word	0x0800aaad
 800aadc:	0800ab31 	.word	0x0800ab31
 800aae0:	0800aaad 	.word	0x0800aaad
 800aae4:	0800aaad 	.word	0x0800aaad
 800aae8:	0800aaad 	.word	0x0800aaad
 800aaec:	0800aaad 	.word	0x0800aaad
 800aaf0:	0800ac3d 	.word	0x0800ac3d
 800aaf4:	0800ab61 	.word	0x0800ab61
 800aaf8:	0800ac1f 	.word	0x0800ac1f
 800aafc:	0800aaad 	.word	0x0800aaad
 800ab00:	0800aaad 	.word	0x0800aaad
 800ab04:	0800ac5f 	.word	0x0800ac5f
 800ab08:	0800aaad 	.word	0x0800aaad
 800ab0c:	0800ab61 	.word	0x0800ab61
 800ab10:	0800aaad 	.word	0x0800aaad
 800ab14:	0800aaad 	.word	0x0800aaad
 800ab18:	0800ac27 	.word	0x0800ac27
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	1d1a      	adds	r2, r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	602a      	str	r2, [r5, #0]
 800ab24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e0a3      	b.n	800ac78 <_printf_i+0x1f4>
 800ab30:	6820      	ldr	r0, [r4, #0]
 800ab32:	6829      	ldr	r1, [r5, #0]
 800ab34:	0606      	lsls	r6, r0, #24
 800ab36:	f101 0304 	add.w	r3, r1, #4
 800ab3a:	d50a      	bpl.n	800ab52 <_printf_i+0xce>
 800ab3c:	680e      	ldr	r6, [r1, #0]
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	2e00      	cmp	r6, #0
 800ab42:	da03      	bge.n	800ab4c <_printf_i+0xc8>
 800ab44:	232d      	movs	r3, #45	; 0x2d
 800ab46:	4276      	negs	r6, r6
 800ab48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab4c:	485e      	ldr	r0, [pc, #376]	; (800acc8 <_printf_i+0x244>)
 800ab4e:	230a      	movs	r3, #10
 800ab50:	e019      	b.n	800ab86 <_printf_i+0x102>
 800ab52:	680e      	ldr	r6, [r1, #0]
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab5a:	bf18      	it	ne
 800ab5c:	b236      	sxthne	r6, r6
 800ab5e:	e7ef      	b.n	800ab40 <_printf_i+0xbc>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	6820      	ldr	r0, [r4, #0]
 800ab64:	1d19      	adds	r1, r3, #4
 800ab66:	6029      	str	r1, [r5, #0]
 800ab68:	0601      	lsls	r1, r0, #24
 800ab6a:	d501      	bpl.n	800ab70 <_printf_i+0xec>
 800ab6c:	681e      	ldr	r6, [r3, #0]
 800ab6e:	e002      	b.n	800ab76 <_printf_i+0xf2>
 800ab70:	0646      	lsls	r6, r0, #25
 800ab72:	d5fb      	bpl.n	800ab6c <_printf_i+0xe8>
 800ab74:	881e      	ldrh	r6, [r3, #0]
 800ab76:	4854      	ldr	r0, [pc, #336]	; (800acc8 <_printf_i+0x244>)
 800ab78:	2f6f      	cmp	r7, #111	; 0x6f
 800ab7a:	bf0c      	ite	eq
 800ab7c:	2308      	moveq	r3, #8
 800ab7e:	230a      	movne	r3, #10
 800ab80:	2100      	movs	r1, #0
 800ab82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab86:	6865      	ldr	r5, [r4, #4]
 800ab88:	60a5      	str	r5, [r4, #8]
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	bfa2      	ittt	ge
 800ab8e:	6821      	ldrge	r1, [r4, #0]
 800ab90:	f021 0104 	bicge.w	r1, r1, #4
 800ab94:	6021      	strge	r1, [r4, #0]
 800ab96:	b90e      	cbnz	r6, 800ab9c <_printf_i+0x118>
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	d04d      	beq.n	800ac38 <_printf_i+0x1b4>
 800ab9c:	4615      	mov	r5, r2
 800ab9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aba2:	fb03 6711 	mls	r7, r3, r1, r6
 800aba6:	5dc7      	ldrb	r7, [r0, r7]
 800aba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abac:	4637      	mov	r7, r6
 800abae:	42bb      	cmp	r3, r7
 800abb0:	460e      	mov	r6, r1
 800abb2:	d9f4      	bls.n	800ab9e <_printf_i+0x11a>
 800abb4:	2b08      	cmp	r3, #8
 800abb6:	d10b      	bne.n	800abd0 <_printf_i+0x14c>
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	07de      	lsls	r6, r3, #31
 800abbc:	d508      	bpl.n	800abd0 <_printf_i+0x14c>
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	6861      	ldr	r1, [r4, #4]
 800abc2:	4299      	cmp	r1, r3
 800abc4:	bfde      	ittt	le
 800abc6:	2330      	movle	r3, #48	; 0x30
 800abc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abd0:	1b52      	subs	r2, r2, r5
 800abd2:	6122      	str	r2, [r4, #16]
 800abd4:	f8cd a000 	str.w	sl, [sp]
 800abd8:	464b      	mov	r3, r9
 800abda:	aa03      	add	r2, sp, #12
 800abdc:	4621      	mov	r1, r4
 800abde:	4640      	mov	r0, r8
 800abe0:	f7ff fee2 	bl	800a9a8 <_printf_common>
 800abe4:	3001      	adds	r0, #1
 800abe6:	d14c      	bne.n	800ac82 <_printf_i+0x1fe>
 800abe8:	f04f 30ff 	mov.w	r0, #4294967295
 800abec:	b004      	add	sp, #16
 800abee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf2:	4835      	ldr	r0, [pc, #212]	; (800acc8 <_printf_i+0x244>)
 800abf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abf8:	6829      	ldr	r1, [r5, #0]
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac00:	6029      	str	r1, [r5, #0]
 800ac02:	061d      	lsls	r5, r3, #24
 800ac04:	d514      	bpl.n	800ac30 <_printf_i+0x1ac>
 800ac06:	07df      	lsls	r7, r3, #31
 800ac08:	bf44      	itt	mi
 800ac0a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac0e:	6023      	strmi	r3, [r4, #0]
 800ac10:	b91e      	cbnz	r6, 800ac1a <_printf_i+0x196>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	f023 0320 	bic.w	r3, r3, #32
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	e7b0      	b.n	800ab80 <_printf_i+0xfc>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	f043 0320 	orr.w	r3, r3, #32
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	2378      	movs	r3, #120	; 0x78
 800ac28:	4828      	ldr	r0, [pc, #160]	; (800accc <_printf_i+0x248>)
 800ac2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac2e:	e7e3      	b.n	800abf8 <_printf_i+0x174>
 800ac30:	0659      	lsls	r1, r3, #25
 800ac32:	bf48      	it	mi
 800ac34:	b2b6      	uxthmi	r6, r6
 800ac36:	e7e6      	b.n	800ac06 <_printf_i+0x182>
 800ac38:	4615      	mov	r5, r2
 800ac3a:	e7bb      	b.n	800abb4 <_printf_i+0x130>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	6826      	ldr	r6, [r4, #0]
 800ac40:	6961      	ldr	r1, [r4, #20]
 800ac42:	1d18      	adds	r0, r3, #4
 800ac44:	6028      	str	r0, [r5, #0]
 800ac46:	0635      	lsls	r5, r6, #24
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	d501      	bpl.n	800ac50 <_printf_i+0x1cc>
 800ac4c:	6019      	str	r1, [r3, #0]
 800ac4e:	e002      	b.n	800ac56 <_printf_i+0x1d2>
 800ac50:	0670      	lsls	r0, r6, #25
 800ac52:	d5fb      	bpl.n	800ac4c <_printf_i+0x1c8>
 800ac54:	8019      	strh	r1, [r3, #0]
 800ac56:	2300      	movs	r3, #0
 800ac58:	6123      	str	r3, [r4, #16]
 800ac5a:	4615      	mov	r5, r2
 800ac5c:	e7ba      	b.n	800abd4 <_printf_i+0x150>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	1d1a      	adds	r2, r3, #4
 800ac62:	602a      	str	r2, [r5, #0]
 800ac64:	681d      	ldr	r5, [r3, #0]
 800ac66:	6862      	ldr	r2, [r4, #4]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f7f5 fad0 	bl	8000210 <memchr>
 800ac70:	b108      	cbz	r0, 800ac76 <_printf_i+0x1f2>
 800ac72:	1b40      	subs	r0, r0, r5
 800ac74:	6060      	str	r0, [r4, #4]
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	6123      	str	r3, [r4, #16]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac80:	e7a8      	b.n	800abd4 <_printf_i+0x150>
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	462a      	mov	r2, r5
 800ac86:	4649      	mov	r1, r9
 800ac88:	4640      	mov	r0, r8
 800ac8a:	47d0      	blx	sl
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	d0ab      	beq.n	800abe8 <_printf_i+0x164>
 800ac90:	6823      	ldr	r3, [r4, #0]
 800ac92:	079b      	lsls	r3, r3, #30
 800ac94:	d413      	bmi.n	800acbe <_printf_i+0x23a>
 800ac96:	68e0      	ldr	r0, [r4, #12]
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	4298      	cmp	r0, r3
 800ac9c:	bfb8      	it	lt
 800ac9e:	4618      	movlt	r0, r3
 800aca0:	e7a4      	b.n	800abec <_printf_i+0x168>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4632      	mov	r2, r6
 800aca6:	4649      	mov	r1, r9
 800aca8:	4640      	mov	r0, r8
 800acaa:	47d0      	blx	sl
 800acac:	3001      	adds	r0, #1
 800acae:	d09b      	beq.n	800abe8 <_printf_i+0x164>
 800acb0:	3501      	adds	r5, #1
 800acb2:	68e3      	ldr	r3, [r4, #12]
 800acb4:	9903      	ldr	r1, [sp, #12]
 800acb6:	1a5b      	subs	r3, r3, r1
 800acb8:	42ab      	cmp	r3, r5
 800acba:	dcf2      	bgt.n	800aca2 <_printf_i+0x21e>
 800acbc:	e7eb      	b.n	800ac96 <_printf_i+0x212>
 800acbe:	2500      	movs	r5, #0
 800acc0:	f104 0619 	add.w	r6, r4, #25
 800acc4:	e7f5      	b.n	800acb2 <_printf_i+0x22e>
 800acc6:	bf00      	nop
 800acc8:	0800f60e 	.word	0x0800f60e
 800accc:	0800f61f 	.word	0x0800f61f

0800acd0 <_sbrk_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d06      	ldr	r5, [pc, #24]	; (800acec <_sbrk_r+0x1c>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f004 fb62 	bl	800f3a4 <_sbrk>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_sbrk_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_sbrk_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	200133c4 	.word	0x200133c4

0800acf0 <siprintf>:
 800acf0:	b40e      	push	{r1, r2, r3}
 800acf2:	b500      	push	{lr}
 800acf4:	b09c      	sub	sp, #112	; 0x70
 800acf6:	ab1d      	add	r3, sp, #116	; 0x74
 800acf8:	9002      	str	r0, [sp, #8]
 800acfa:	9006      	str	r0, [sp, #24]
 800acfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad00:	4809      	ldr	r0, [pc, #36]	; (800ad28 <siprintf+0x38>)
 800ad02:	9107      	str	r1, [sp, #28]
 800ad04:	9104      	str	r1, [sp, #16]
 800ad06:	4909      	ldr	r1, [pc, #36]	; (800ad2c <siprintf+0x3c>)
 800ad08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0c:	9105      	str	r1, [sp, #20]
 800ad0e:	6800      	ldr	r0, [r0, #0]
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	a902      	add	r1, sp, #8
 800ad14:	f001 fa8c 	bl	800c230 <_svfiprintf_r>
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	b01c      	add	sp, #112	; 0x70
 800ad20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad24:	b003      	add	sp, #12
 800ad26:	4770      	bx	lr
 800ad28:	20000028 	.word	0x20000028
 800ad2c:	ffff0208 	.word	0xffff0208

0800ad30 <quorem>:
 800ad30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	6903      	ldr	r3, [r0, #16]
 800ad36:	690c      	ldr	r4, [r1, #16]
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	f2c0 8081 	blt.w	800ae42 <quorem+0x112>
 800ad40:	3c01      	subs	r4, #1
 800ad42:	f101 0814 	add.w	r8, r1, #20
 800ad46:	f100 0514 	add.w	r5, r0, #20
 800ad4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad64:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad68:	d331      	bcc.n	800adce <quorem+0x9e>
 800ad6a:	f04f 0e00 	mov.w	lr, #0
 800ad6e:	4640      	mov	r0, r8
 800ad70:	46ac      	mov	ip, r5
 800ad72:	46f2      	mov	sl, lr
 800ad74:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad78:	b293      	uxth	r3, r2
 800ad7a:	fb06 e303 	mla	r3, r6, r3, lr
 800ad7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	ebaa 0303 	sub.w	r3, sl, r3
 800ad88:	f8dc a000 	ldr.w	sl, [ip]
 800ad8c:	0c12      	lsrs	r2, r2, #16
 800ad8e:	fa13 f38a 	uxtah	r3, r3, sl
 800ad92:	fb06 e202 	mla	r2, r6, r2, lr
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	9b00      	ldr	r3, [sp, #0]
 800ad9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad9e:	b292      	uxth	r2, r2
 800ada0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ada4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ada8:	f8bd 3000 	ldrh.w	r3, [sp]
 800adac:	4581      	cmp	r9, r0
 800adae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adb2:	f84c 3b04 	str.w	r3, [ip], #4
 800adb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adba:	d2db      	bcs.n	800ad74 <quorem+0x44>
 800adbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800adc0:	b92b      	cbnz	r3, 800adce <quorem+0x9e>
 800adc2:	9b01      	ldr	r3, [sp, #4]
 800adc4:	3b04      	subs	r3, #4
 800adc6:	429d      	cmp	r5, r3
 800adc8:	461a      	mov	r2, r3
 800adca:	d32e      	bcc.n	800ae2a <quorem+0xfa>
 800adcc:	613c      	str	r4, [r7, #16]
 800adce:	4638      	mov	r0, r7
 800add0:	f001 f8ba 	bl	800bf48 <__mcmp>
 800add4:	2800      	cmp	r0, #0
 800add6:	db24      	blt.n	800ae22 <quorem+0xf2>
 800add8:	3601      	adds	r6, #1
 800adda:	4628      	mov	r0, r5
 800addc:	f04f 0c00 	mov.w	ip, #0
 800ade0:	f858 2b04 	ldr.w	r2, [r8], #4
 800ade4:	f8d0 e000 	ldr.w	lr, [r0]
 800ade8:	b293      	uxth	r3, r2
 800adea:	ebac 0303 	sub.w	r3, ip, r3
 800adee:	0c12      	lsrs	r2, r2, #16
 800adf0:	fa13 f38e 	uxtah	r3, r3, lr
 800adf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800adf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae02:	45c1      	cmp	r9, r8
 800ae04:	f840 3b04 	str.w	r3, [r0], #4
 800ae08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae0c:	d2e8      	bcs.n	800ade0 <quorem+0xb0>
 800ae0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae16:	b922      	cbnz	r2, 800ae22 <quorem+0xf2>
 800ae18:	3b04      	subs	r3, #4
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	d30a      	bcc.n	800ae36 <quorem+0x106>
 800ae20:	613c      	str	r4, [r7, #16]
 800ae22:	4630      	mov	r0, r6
 800ae24:	b003      	add	sp, #12
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	d1cc      	bne.n	800adcc <quorem+0x9c>
 800ae32:	3c01      	subs	r4, #1
 800ae34:	e7c7      	b.n	800adc6 <quorem+0x96>
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	3b04      	subs	r3, #4
 800ae3a:	2a00      	cmp	r2, #0
 800ae3c:	d1f0      	bne.n	800ae20 <quorem+0xf0>
 800ae3e:	3c01      	subs	r4, #1
 800ae40:	e7eb      	b.n	800ae1a <quorem+0xea>
 800ae42:	2000      	movs	r0, #0
 800ae44:	e7ee      	b.n	800ae24 <quorem+0xf4>
	...

0800ae48 <_dtoa_r>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	ed2d 8b04 	vpush	{d8-d9}
 800ae50:	ec57 6b10 	vmov	r6, r7, d0
 800ae54:	b093      	sub	sp, #76	; 0x4c
 800ae56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae5c:	9106      	str	r1, [sp, #24]
 800ae5e:	ee10 aa10 	vmov	sl, s0
 800ae62:	4604      	mov	r4, r0
 800ae64:	9209      	str	r2, [sp, #36]	; 0x24
 800ae66:	930c      	str	r3, [sp, #48]	; 0x30
 800ae68:	46bb      	mov	fp, r7
 800ae6a:	b975      	cbnz	r5, 800ae8a <_dtoa_r+0x42>
 800ae6c:	2010      	movs	r0, #16
 800ae6e:	f7ff f9c7 	bl	800a200 <malloc>
 800ae72:	4602      	mov	r2, r0
 800ae74:	6260      	str	r0, [r4, #36]	; 0x24
 800ae76:	b920      	cbnz	r0, 800ae82 <_dtoa_r+0x3a>
 800ae78:	4ba7      	ldr	r3, [pc, #668]	; (800b118 <_dtoa_r+0x2d0>)
 800ae7a:	21ea      	movs	r1, #234	; 0xea
 800ae7c:	48a7      	ldr	r0, [pc, #668]	; (800b11c <_dtoa_r+0x2d4>)
 800ae7e:	f001 fad7 	bl	800c430 <__assert_func>
 800ae82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae86:	6005      	str	r5, [r0, #0]
 800ae88:	60c5      	str	r5, [r0, #12]
 800ae8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae8c:	6819      	ldr	r1, [r3, #0]
 800ae8e:	b151      	cbz	r1, 800aea6 <_dtoa_r+0x5e>
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	604a      	str	r2, [r1, #4]
 800ae94:	2301      	movs	r3, #1
 800ae96:	4093      	lsls	r3, r2
 800ae98:	608b      	str	r3, [r1, #8]
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 fe12 	bl	800bac4 <_Bfree>
 800aea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	1e3b      	subs	r3, r7, #0
 800aea8:	bfaa      	itet	ge
 800aeaa:	2300      	movge	r3, #0
 800aeac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aeb0:	f8c8 3000 	strge.w	r3, [r8]
 800aeb4:	4b9a      	ldr	r3, [pc, #616]	; (800b120 <_dtoa_r+0x2d8>)
 800aeb6:	bfbc      	itt	lt
 800aeb8:	2201      	movlt	r2, #1
 800aeba:	f8c8 2000 	strlt.w	r2, [r8]
 800aebe:	ea33 030b 	bics.w	r3, r3, fp
 800aec2:	d11b      	bne.n	800aefc <_dtoa_r+0xb4>
 800aec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aec6:	f242 730f 	movw	r3, #9999	; 0x270f
 800aeca:	6013      	str	r3, [r2, #0]
 800aecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aed0:	4333      	orrs	r3, r6
 800aed2:	f000 8592 	beq.w	800b9fa <_dtoa_r+0xbb2>
 800aed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed8:	b963      	cbnz	r3, 800aef4 <_dtoa_r+0xac>
 800aeda:	4b92      	ldr	r3, [pc, #584]	; (800b124 <_dtoa_r+0x2dc>)
 800aedc:	e022      	b.n	800af24 <_dtoa_r+0xdc>
 800aede:	4b92      	ldr	r3, [pc, #584]	; (800b128 <_dtoa_r+0x2e0>)
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	3308      	adds	r3, #8
 800aee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	9801      	ldr	r0, [sp, #4]
 800aeea:	b013      	add	sp, #76	; 0x4c
 800aeec:	ecbd 8b04 	vpop	{d8-d9}
 800aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef4:	4b8b      	ldr	r3, [pc, #556]	; (800b124 <_dtoa_r+0x2dc>)
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	3303      	adds	r3, #3
 800aefa:	e7f3      	b.n	800aee4 <_dtoa_r+0x9c>
 800aefc:	2200      	movs	r2, #0
 800aefe:	2300      	movs	r3, #0
 800af00:	4650      	mov	r0, sl
 800af02:	4659      	mov	r1, fp
 800af04:	f7f5 fdf8 	bl	8000af8 <__aeabi_dcmpeq>
 800af08:	ec4b ab19 	vmov	d9, sl, fp
 800af0c:	4680      	mov	r8, r0
 800af0e:	b158      	cbz	r0, 800af28 <_dtoa_r+0xe0>
 800af10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af12:	2301      	movs	r3, #1
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 856b 	beq.w	800b9f4 <_dtoa_r+0xbac>
 800af1e:	4883      	ldr	r0, [pc, #524]	; (800b12c <_dtoa_r+0x2e4>)
 800af20:	6018      	str	r0, [r3, #0]
 800af22:	1e43      	subs	r3, r0, #1
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	e7df      	b.n	800aee8 <_dtoa_r+0xa0>
 800af28:	ec4b ab10 	vmov	d0, sl, fp
 800af2c:	aa10      	add	r2, sp, #64	; 0x40
 800af2e:	a911      	add	r1, sp, #68	; 0x44
 800af30:	4620      	mov	r0, r4
 800af32:	f001 f8af 	bl	800c094 <__d2b>
 800af36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af3a:	ee08 0a10 	vmov	s16, r0
 800af3e:	2d00      	cmp	r5, #0
 800af40:	f000 8084 	beq.w	800b04c <_dtoa_r+0x204>
 800af44:	ee19 3a90 	vmov	r3, s19
 800af48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af50:	4656      	mov	r6, sl
 800af52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af5e:	4b74      	ldr	r3, [pc, #464]	; (800b130 <_dtoa_r+0x2e8>)
 800af60:	2200      	movs	r2, #0
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	f7f5 f9a7 	bl	80002b8 <__aeabi_dsub>
 800af6a:	a365      	add	r3, pc, #404	; (adr r3, 800b100 <_dtoa_r+0x2b8>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 fb5a 	bl	8000628 <__aeabi_dmul>
 800af74:	a364      	add	r3, pc, #400	; (adr r3, 800b108 <_dtoa_r+0x2c0>)
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	f7f5 f99f 	bl	80002bc <__adddf3>
 800af7e:	4606      	mov	r6, r0
 800af80:	4628      	mov	r0, r5
 800af82:	460f      	mov	r7, r1
 800af84:	f7f5 fae6 	bl	8000554 <__aeabi_i2d>
 800af88:	a361      	add	r3, pc, #388	; (adr r3, 800b110 <_dtoa_r+0x2c8>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 fb4b 	bl	8000628 <__aeabi_dmul>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4630      	mov	r0, r6
 800af98:	4639      	mov	r1, r7
 800af9a:	f7f5 f98f 	bl	80002bc <__adddf3>
 800af9e:	4606      	mov	r6, r0
 800afa0:	460f      	mov	r7, r1
 800afa2:	f7f5 fdf1 	bl	8000b88 <__aeabi_d2iz>
 800afa6:	2200      	movs	r2, #0
 800afa8:	9000      	str	r0, [sp, #0]
 800afaa:	2300      	movs	r3, #0
 800afac:	4630      	mov	r0, r6
 800afae:	4639      	mov	r1, r7
 800afb0:	f7f5 fdac 	bl	8000b0c <__aeabi_dcmplt>
 800afb4:	b150      	cbz	r0, 800afcc <_dtoa_r+0x184>
 800afb6:	9800      	ldr	r0, [sp, #0]
 800afb8:	f7f5 facc 	bl	8000554 <__aeabi_i2d>
 800afbc:	4632      	mov	r2, r6
 800afbe:	463b      	mov	r3, r7
 800afc0:	f7f5 fd9a 	bl	8000af8 <__aeabi_dcmpeq>
 800afc4:	b910      	cbnz	r0, 800afcc <_dtoa_r+0x184>
 800afc6:	9b00      	ldr	r3, [sp, #0]
 800afc8:	3b01      	subs	r3, #1
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	2b16      	cmp	r3, #22
 800afd0:	d85a      	bhi.n	800b088 <_dtoa_r+0x240>
 800afd2:	9a00      	ldr	r2, [sp, #0]
 800afd4:	4b57      	ldr	r3, [pc, #348]	; (800b134 <_dtoa_r+0x2ec>)
 800afd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	ec51 0b19 	vmov	r0, r1, d9
 800afe2:	f7f5 fd93 	bl	8000b0c <__aeabi_dcmplt>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d050      	beq.n	800b08c <_dtoa_r+0x244>
 800afea:	9b00      	ldr	r3, [sp, #0]
 800afec:	3b01      	subs	r3, #1
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	2300      	movs	r3, #0
 800aff2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aff6:	1b5d      	subs	r5, r3, r5
 800aff8:	1e6b      	subs	r3, r5, #1
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	bf45      	ittet	mi
 800affe:	f1c5 0301 	rsbmi	r3, r5, #1
 800b002:	9304      	strmi	r3, [sp, #16]
 800b004:	2300      	movpl	r3, #0
 800b006:	2300      	movmi	r3, #0
 800b008:	bf4c      	ite	mi
 800b00a:	9305      	strmi	r3, [sp, #20]
 800b00c:	9304      	strpl	r3, [sp, #16]
 800b00e:	9b00      	ldr	r3, [sp, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db3d      	blt.n	800b090 <_dtoa_r+0x248>
 800b014:	9b05      	ldr	r3, [sp, #20]
 800b016:	9a00      	ldr	r2, [sp, #0]
 800b018:	920a      	str	r2, [sp, #40]	; 0x28
 800b01a:	4413      	add	r3, r2
 800b01c:	9305      	str	r3, [sp, #20]
 800b01e:	2300      	movs	r3, #0
 800b020:	9307      	str	r3, [sp, #28]
 800b022:	9b06      	ldr	r3, [sp, #24]
 800b024:	2b09      	cmp	r3, #9
 800b026:	f200 8089 	bhi.w	800b13c <_dtoa_r+0x2f4>
 800b02a:	2b05      	cmp	r3, #5
 800b02c:	bfc4      	itt	gt
 800b02e:	3b04      	subgt	r3, #4
 800b030:	9306      	strgt	r3, [sp, #24]
 800b032:	9b06      	ldr	r3, [sp, #24]
 800b034:	f1a3 0302 	sub.w	r3, r3, #2
 800b038:	bfcc      	ite	gt
 800b03a:	2500      	movgt	r5, #0
 800b03c:	2501      	movle	r5, #1
 800b03e:	2b03      	cmp	r3, #3
 800b040:	f200 8087 	bhi.w	800b152 <_dtoa_r+0x30a>
 800b044:	e8df f003 	tbb	[pc, r3]
 800b048:	59383a2d 	.word	0x59383a2d
 800b04c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b050:	441d      	add	r5, r3
 800b052:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b056:	2b20      	cmp	r3, #32
 800b058:	bfc1      	itttt	gt
 800b05a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b05e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b062:	fa0b f303 	lslgt.w	r3, fp, r3
 800b066:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b06a:	bfda      	itte	le
 800b06c:	f1c3 0320 	rsble	r3, r3, #32
 800b070:	fa06 f003 	lslle.w	r0, r6, r3
 800b074:	4318      	orrgt	r0, r3
 800b076:	f7f5 fa5d 	bl	8000534 <__aeabi_ui2d>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4606      	mov	r6, r0
 800b07e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b082:	3d01      	subs	r5, #1
 800b084:	930e      	str	r3, [sp, #56]	; 0x38
 800b086:	e76a      	b.n	800af5e <_dtoa_r+0x116>
 800b088:	2301      	movs	r3, #1
 800b08a:	e7b2      	b.n	800aff2 <_dtoa_r+0x1aa>
 800b08c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b08e:	e7b1      	b.n	800aff4 <_dtoa_r+0x1ac>
 800b090:	9b04      	ldr	r3, [sp, #16]
 800b092:	9a00      	ldr	r2, [sp, #0]
 800b094:	1a9b      	subs	r3, r3, r2
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	4253      	negs	r3, r2
 800b09a:	9307      	str	r3, [sp, #28]
 800b09c:	2300      	movs	r3, #0
 800b09e:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a0:	e7bf      	b.n	800b022 <_dtoa_r+0x1da>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9308      	str	r3, [sp, #32]
 800b0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dc55      	bgt.n	800b158 <_dtoa_r+0x310>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b0b6:	e00c      	b.n	800b0d2 <_dtoa_r+0x28a>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e7f3      	b.n	800b0a4 <_dtoa_r+0x25c>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c0:	9308      	str	r3, [sp, #32]
 800b0c2:	9b00      	ldr	r3, [sp, #0]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	9302      	str	r3, [sp, #8]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	bfb8      	it	lt
 800b0d0:	2301      	movlt	r3, #1
 800b0d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	6042      	str	r2, [r0, #4]
 800b0d8:	2204      	movs	r2, #4
 800b0da:	f102 0614 	add.w	r6, r2, #20
 800b0de:	429e      	cmp	r6, r3
 800b0e0:	6841      	ldr	r1, [r0, #4]
 800b0e2:	d93d      	bls.n	800b160 <_dtoa_r+0x318>
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f000 fcad 	bl	800ba44 <_Balloc>
 800b0ea:	9001      	str	r0, [sp, #4]
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d13b      	bne.n	800b168 <_dtoa_r+0x320>
 800b0f0:	4b11      	ldr	r3, [pc, #68]	; (800b138 <_dtoa_r+0x2f0>)
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0f8:	e6c0      	b.n	800ae7c <_dtoa_r+0x34>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e7df      	b.n	800b0be <_dtoa_r+0x276>
 800b0fe:	bf00      	nop
 800b100:	636f4361 	.word	0x636f4361
 800b104:	3fd287a7 	.word	0x3fd287a7
 800b108:	8b60c8b3 	.word	0x8b60c8b3
 800b10c:	3fc68a28 	.word	0x3fc68a28
 800b110:	509f79fb 	.word	0x509f79fb
 800b114:	3fd34413 	.word	0x3fd34413
 800b118:	0800f63d 	.word	0x0800f63d
 800b11c:	0800f654 	.word	0x0800f654
 800b120:	7ff00000 	.word	0x7ff00000
 800b124:	0800f639 	.word	0x0800f639
 800b128:	0800f630 	.word	0x0800f630
 800b12c:	0800f60d 	.word	0x0800f60d
 800b130:	3ff80000 	.word	0x3ff80000
 800b134:	0800f748 	.word	0x0800f748
 800b138:	0800f6af 	.word	0x0800f6af
 800b13c:	2501      	movs	r5, #1
 800b13e:	2300      	movs	r3, #0
 800b140:	9306      	str	r3, [sp, #24]
 800b142:	9508      	str	r5, [sp, #32]
 800b144:	f04f 33ff 	mov.w	r3, #4294967295
 800b148:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b14c:	2200      	movs	r2, #0
 800b14e:	2312      	movs	r3, #18
 800b150:	e7b0      	b.n	800b0b4 <_dtoa_r+0x26c>
 800b152:	2301      	movs	r3, #1
 800b154:	9308      	str	r3, [sp, #32]
 800b156:	e7f5      	b.n	800b144 <_dtoa_r+0x2fc>
 800b158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b15e:	e7b8      	b.n	800b0d2 <_dtoa_r+0x28a>
 800b160:	3101      	adds	r1, #1
 800b162:	6041      	str	r1, [r0, #4]
 800b164:	0052      	lsls	r2, r2, #1
 800b166:	e7b8      	b.n	800b0da <_dtoa_r+0x292>
 800b168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b16a:	9a01      	ldr	r2, [sp, #4]
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	2b0e      	cmp	r3, #14
 800b172:	f200 809d 	bhi.w	800b2b0 <_dtoa_r+0x468>
 800b176:	2d00      	cmp	r5, #0
 800b178:	f000 809a 	beq.w	800b2b0 <_dtoa_r+0x468>
 800b17c:	9b00      	ldr	r3, [sp, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dd32      	ble.n	800b1e8 <_dtoa_r+0x3a0>
 800b182:	4ab7      	ldr	r2, [pc, #732]	; (800b460 <_dtoa_r+0x618>)
 800b184:	f003 030f 	and.w	r3, r3, #15
 800b188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b18c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b190:	9b00      	ldr	r3, [sp, #0]
 800b192:	05d8      	lsls	r0, r3, #23
 800b194:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b198:	d516      	bpl.n	800b1c8 <_dtoa_r+0x380>
 800b19a:	4bb2      	ldr	r3, [pc, #712]	; (800b464 <_dtoa_r+0x61c>)
 800b19c:	ec51 0b19 	vmov	r0, r1, d9
 800b1a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1a4:	f7f5 fb6a 	bl	800087c <__aeabi_ddiv>
 800b1a8:	f007 070f 	and.w	r7, r7, #15
 800b1ac:	4682      	mov	sl, r0
 800b1ae:	468b      	mov	fp, r1
 800b1b0:	2503      	movs	r5, #3
 800b1b2:	4eac      	ldr	r6, [pc, #688]	; (800b464 <_dtoa_r+0x61c>)
 800b1b4:	b957      	cbnz	r7, 800b1cc <_dtoa_r+0x384>
 800b1b6:	4642      	mov	r2, r8
 800b1b8:	464b      	mov	r3, r9
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	4659      	mov	r1, fp
 800b1be:	f7f5 fb5d 	bl	800087c <__aeabi_ddiv>
 800b1c2:	4682      	mov	sl, r0
 800b1c4:	468b      	mov	fp, r1
 800b1c6:	e028      	b.n	800b21a <_dtoa_r+0x3d2>
 800b1c8:	2502      	movs	r5, #2
 800b1ca:	e7f2      	b.n	800b1b2 <_dtoa_r+0x36a>
 800b1cc:	07f9      	lsls	r1, r7, #31
 800b1ce:	d508      	bpl.n	800b1e2 <_dtoa_r+0x39a>
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1d8:	f7f5 fa26 	bl	8000628 <__aeabi_dmul>
 800b1dc:	3501      	adds	r5, #1
 800b1de:	4680      	mov	r8, r0
 800b1e0:	4689      	mov	r9, r1
 800b1e2:	107f      	asrs	r7, r7, #1
 800b1e4:	3608      	adds	r6, #8
 800b1e6:	e7e5      	b.n	800b1b4 <_dtoa_r+0x36c>
 800b1e8:	f000 809b 	beq.w	800b322 <_dtoa_r+0x4da>
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	4f9d      	ldr	r7, [pc, #628]	; (800b464 <_dtoa_r+0x61c>)
 800b1f0:	425e      	negs	r6, r3
 800b1f2:	4b9b      	ldr	r3, [pc, #620]	; (800b460 <_dtoa_r+0x618>)
 800b1f4:	f006 020f 	and.w	r2, r6, #15
 800b1f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	ec51 0b19 	vmov	r0, r1, d9
 800b204:	f7f5 fa10 	bl	8000628 <__aeabi_dmul>
 800b208:	1136      	asrs	r6, r6, #4
 800b20a:	4682      	mov	sl, r0
 800b20c:	468b      	mov	fp, r1
 800b20e:	2300      	movs	r3, #0
 800b210:	2502      	movs	r5, #2
 800b212:	2e00      	cmp	r6, #0
 800b214:	d17a      	bne.n	800b30c <_dtoa_r+0x4c4>
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1d3      	bne.n	800b1c2 <_dtoa_r+0x37a>
 800b21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 8082 	beq.w	800b326 <_dtoa_r+0x4de>
 800b222:	4b91      	ldr	r3, [pc, #580]	; (800b468 <_dtoa_r+0x620>)
 800b224:	2200      	movs	r2, #0
 800b226:	4650      	mov	r0, sl
 800b228:	4659      	mov	r1, fp
 800b22a:	f7f5 fc6f 	bl	8000b0c <__aeabi_dcmplt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d079      	beq.n	800b326 <_dtoa_r+0x4de>
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d076      	beq.n	800b326 <_dtoa_r+0x4de>
 800b238:	9b02      	ldr	r3, [sp, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	dd36      	ble.n	800b2ac <_dtoa_r+0x464>
 800b23e:	9b00      	ldr	r3, [sp, #0]
 800b240:	4650      	mov	r0, sl
 800b242:	4659      	mov	r1, fp
 800b244:	1e5f      	subs	r7, r3, #1
 800b246:	2200      	movs	r2, #0
 800b248:	4b88      	ldr	r3, [pc, #544]	; (800b46c <_dtoa_r+0x624>)
 800b24a:	f7f5 f9ed 	bl	8000628 <__aeabi_dmul>
 800b24e:	9e02      	ldr	r6, [sp, #8]
 800b250:	4682      	mov	sl, r0
 800b252:	468b      	mov	fp, r1
 800b254:	3501      	adds	r5, #1
 800b256:	4628      	mov	r0, r5
 800b258:	f7f5 f97c 	bl	8000554 <__aeabi_i2d>
 800b25c:	4652      	mov	r2, sl
 800b25e:	465b      	mov	r3, fp
 800b260:	f7f5 f9e2 	bl	8000628 <__aeabi_dmul>
 800b264:	4b82      	ldr	r3, [pc, #520]	; (800b470 <_dtoa_r+0x628>)
 800b266:	2200      	movs	r2, #0
 800b268:	f7f5 f828 	bl	80002bc <__adddf3>
 800b26c:	46d0      	mov	r8, sl
 800b26e:	46d9      	mov	r9, fp
 800b270:	4682      	mov	sl, r0
 800b272:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b276:	2e00      	cmp	r6, #0
 800b278:	d158      	bne.n	800b32c <_dtoa_r+0x4e4>
 800b27a:	4b7e      	ldr	r3, [pc, #504]	; (800b474 <_dtoa_r+0x62c>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	4640      	mov	r0, r8
 800b280:	4649      	mov	r1, r9
 800b282:	f7f5 f819 	bl	80002b8 <__aeabi_dsub>
 800b286:	4652      	mov	r2, sl
 800b288:	465b      	mov	r3, fp
 800b28a:	4680      	mov	r8, r0
 800b28c:	4689      	mov	r9, r1
 800b28e:	f7f5 fc5b 	bl	8000b48 <__aeabi_dcmpgt>
 800b292:	2800      	cmp	r0, #0
 800b294:	f040 8295 	bne.w	800b7c2 <_dtoa_r+0x97a>
 800b298:	4652      	mov	r2, sl
 800b29a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	f7f5 fc33 	bl	8000b0c <__aeabi_dcmplt>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f040 8289 	bne.w	800b7be <_dtoa_r+0x976>
 800b2ac:	ec5b ab19 	vmov	sl, fp, d9
 800b2b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f2c0 8148 	blt.w	800b548 <_dtoa_r+0x700>
 800b2b8:	9a00      	ldr	r2, [sp, #0]
 800b2ba:	2a0e      	cmp	r2, #14
 800b2bc:	f300 8144 	bgt.w	800b548 <_dtoa_r+0x700>
 800b2c0:	4b67      	ldr	r3, [pc, #412]	; (800b460 <_dtoa_r+0x618>)
 800b2c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f280 80d5 	bge.w	800b47c <_dtoa_r+0x634>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f300 80d1 	bgt.w	800b47c <_dtoa_r+0x634>
 800b2da:	f040 826f 	bne.w	800b7bc <_dtoa_r+0x974>
 800b2de:	4b65      	ldr	r3, [pc, #404]	; (800b474 <_dtoa_r+0x62c>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	f7f5 f99f 	bl	8000628 <__aeabi_dmul>
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	465b      	mov	r3, fp
 800b2ee:	f7f5 fc21 	bl	8000b34 <__aeabi_dcmpge>
 800b2f2:	9e03      	ldr	r6, [sp, #12]
 800b2f4:	4637      	mov	r7, r6
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f040 8245 	bne.w	800b786 <_dtoa_r+0x93e>
 800b2fc:	9d01      	ldr	r5, [sp, #4]
 800b2fe:	2331      	movs	r3, #49	; 0x31
 800b300:	f805 3b01 	strb.w	r3, [r5], #1
 800b304:	9b00      	ldr	r3, [sp, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	e240      	b.n	800b78e <_dtoa_r+0x946>
 800b30c:	07f2      	lsls	r2, r6, #31
 800b30e:	d505      	bpl.n	800b31c <_dtoa_r+0x4d4>
 800b310:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b314:	f7f5 f988 	bl	8000628 <__aeabi_dmul>
 800b318:	3501      	adds	r5, #1
 800b31a:	2301      	movs	r3, #1
 800b31c:	1076      	asrs	r6, r6, #1
 800b31e:	3708      	adds	r7, #8
 800b320:	e777      	b.n	800b212 <_dtoa_r+0x3ca>
 800b322:	2502      	movs	r5, #2
 800b324:	e779      	b.n	800b21a <_dtoa_r+0x3d2>
 800b326:	9f00      	ldr	r7, [sp, #0]
 800b328:	9e03      	ldr	r6, [sp, #12]
 800b32a:	e794      	b.n	800b256 <_dtoa_r+0x40e>
 800b32c:	9901      	ldr	r1, [sp, #4]
 800b32e:	4b4c      	ldr	r3, [pc, #304]	; (800b460 <_dtoa_r+0x618>)
 800b330:	4431      	add	r1, r6
 800b332:	910d      	str	r1, [sp, #52]	; 0x34
 800b334:	9908      	ldr	r1, [sp, #32]
 800b336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b33a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b33e:	2900      	cmp	r1, #0
 800b340:	d043      	beq.n	800b3ca <_dtoa_r+0x582>
 800b342:	494d      	ldr	r1, [pc, #308]	; (800b478 <_dtoa_r+0x630>)
 800b344:	2000      	movs	r0, #0
 800b346:	f7f5 fa99 	bl	800087c <__aeabi_ddiv>
 800b34a:	4652      	mov	r2, sl
 800b34c:	465b      	mov	r3, fp
 800b34e:	f7f4 ffb3 	bl	80002b8 <__aeabi_dsub>
 800b352:	9d01      	ldr	r5, [sp, #4]
 800b354:	4682      	mov	sl, r0
 800b356:	468b      	mov	fp, r1
 800b358:	4649      	mov	r1, r9
 800b35a:	4640      	mov	r0, r8
 800b35c:	f7f5 fc14 	bl	8000b88 <__aeabi_d2iz>
 800b360:	4606      	mov	r6, r0
 800b362:	f7f5 f8f7 	bl	8000554 <__aeabi_i2d>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4640      	mov	r0, r8
 800b36c:	4649      	mov	r1, r9
 800b36e:	f7f4 ffa3 	bl	80002b8 <__aeabi_dsub>
 800b372:	3630      	adds	r6, #48	; 0x30
 800b374:	f805 6b01 	strb.w	r6, [r5], #1
 800b378:	4652      	mov	r2, sl
 800b37a:	465b      	mov	r3, fp
 800b37c:	4680      	mov	r8, r0
 800b37e:	4689      	mov	r9, r1
 800b380:	f7f5 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 800b384:	2800      	cmp	r0, #0
 800b386:	d163      	bne.n	800b450 <_dtoa_r+0x608>
 800b388:	4642      	mov	r2, r8
 800b38a:	464b      	mov	r3, r9
 800b38c:	4936      	ldr	r1, [pc, #216]	; (800b468 <_dtoa_r+0x620>)
 800b38e:	2000      	movs	r0, #0
 800b390:	f7f4 ff92 	bl	80002b8 <__aeabi_dsub>
 800b394:	4652      	mov	r2, sl
 800b396:	465b      	mov	r3, fp
 800b398:	f7f5 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	f040 80b5 	bne.w	800b50c <_dtoa_r+0x6c4>
 800b3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3a4:	429d      	cmp	r5, r3
 800b3a6:	d081      	beq.n	800b2ac <_dtoa_r+0x464>
 800b3a8:	4b30      	ldr	r3, [pc, #192]	; (800b46c <_dtoa_r+0x624>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	4659      	mov	r1, fp
 800b3b0:	f7f5 f93a 	bl	8000628 <__aeabi_dmul>
 800b3b4:	4b2d      	ldr	r3, [pc, #180]	; (800b46c <_dtoa_r+0x624>)
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	468b      	mov	fp, r1
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	4649      	mov	r1, r9
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f7f5 f932 	bl	8000628 <__aeabi_dmul>
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	4689      	mov	r9, r1
 800b3c8:	e7c6      	b.n	800b358 <_dtoa_r+0x510>
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	4659      	mov	r1, fp
 800b3ce:	f7f5 f92b 	bl	8000628 <__aeabi_dmul>
 800b3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3d4:	9d01      	ldr	r5, [sp, #4]
 800b3d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3d8:	4682      	mov	sl, r0
 800b3da:	468b      	mov	fp, r1
 800b3dc:	4649      	mov	r1, r9
 800b3de:	4640      	mov	r0, r8
 800b3e0:	f7f5 fbd2 	bl	8000b88 <__aeabi_d2iz>
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	f7f5 f8b5 	bl	8000554 <__aeabi_i2d>
 800b3ea:	3630      	adds	r6, #48	; 0x30
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	f7f4 ff60 	bl	80002b8 <__aeabi_dsub>
 800b3f8:	f805 6b01 	strb.w	r6, [r5], #1
 800b3fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fe:	429d      	cmp	r5, r3
 800b400:	4680      	mov	r8, r0
 800b402:	4689      	mov	r9, r1
 800b404:	f04f 0200 	mov.w	r2, #0
 800b408:	d124      	bne.n	800b454 <_dtoa_r+0x60c>
 800b40a:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <_dtoa_r+0x630>)
 800b40c:	4650      	mov	r0, sl
 800b40e:	4659      	mov	r1, fp
 800b410:	f7f4 ff54 	bl	80002bc <__adddf3>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4640      	mov	r0, r8
 800b41a:	4649      	mov	r1, r9
 800b41c:	f7f5 fb94 	bl	8000b48 <__aeabi_dcmpgt>
 800b420:	2800      	cmp	r0, #0
 800b422:	d173      	bne.n	800b50c <_dtoa_r+0x6c4>
 800b424:	4652      	mov	r2, sl
 800b426:	465b      	mov	r3, fp
 800b428:	4913      	ldr	r1, [pc, #76]	; (800b478 <_dtoa_r+0x630>)
 800b42a:	2000      	movs	r0, #0
 800b42c:	f7f4 ff44 	bl	80002b8 <__aeabi_dsub>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4640      	mov	r0, r8
 800b436:	4649      	mov	r1, r9
 800b438:	f7f5 fb68 	bl	8000b0c <__aeabi_dcmplt>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f43f af35 	beq.w	800b2ac <_dtoa_r+0x464>
 800b442:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b444:	1e6b      	subs	r3, r5, #1
 800b446:	930f      	str	r3, [sp, #60]	; 0x3c
 800b448:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b44c:	2b30      	cmp	r3, #48	; 0x30
 800b44e:	d0f8      	beq.n	800b442 <_dtoa_r+0x5fa>
 800b450:	9700      	str	r7, [sp, #0]
 800b452:	e049      	b.n	800b4e8 <_dtoa_r+0x6a0>
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <_dtoa_r+0x624>)
 800b456:	f7f5 f8e7 	bl	8000628 <__aeabi_dmul>
 800b45a:	4680      	mov	r8, r0
 800b45c:	4689      	mov	r9, r1
 800b45e:	e7bd      	b.n	800b3dc <_dtoa_r+0x594>
 800b460:	0800f748 	.word	0x0800f748
 800b464:	0800f720 	.word	0x0800f720
 800b468:	3ff00000 	.word	0x3ff00000
 800b46c:	40240000 	.word	0x40240000
 800b470:	401c0000 	.word	0x401c0000
 800b474:	40140000 	.word	0x40140000
 800b478:	3fe00000 	.word	0x3fe00000
 800b47c:	9d01      	ldr	r5, [sp, #4]
 800b47e:	4656      	mov	r6, sl
 800b480:	465f      	mov	r7, fp
 800b482:	4642      	mov	r2, r8
 800b484:	464b      	mov	r3, r9
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f5 f9f7 	bl	800087c <__aeabi_ddiv>
 800b48e:	f7f5 fb7b 	bl	8000b88 <__aeabi_d2iz>
 800b492:	4682      	mov	sl, r0
 800b494:	f7f5 f85e 	bl	8000554 <__aeabi_i2d>
 800b498:	4642      	mov	r2, r8
 800b49a:	464b      	mov	r3, r9
 800b49c:	f7f5 f8c4 	bl	8000628 <__aeabi_dmul>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b4ac:	f7f4 ff04 	bl	80002b8 <__aeabi_dsub>
 800b4b0:	f805 6b01 	strb.w	r6, [r5], #1
 800b4b4:	9e01      	ldr	r6, [sp, #4]
 800b4b6:	9f03      	ldr	r7, [sp, #12]
 800b4b8:	1bae      	subs	r6, r5, r6
 800b4ba:	42b7      	cmp	r7, r6
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	d135      	bne.n	800b52e <_dtoa_r+0x6e6>
 800b4c2:	f7f4 fefb 	bl	80002bc <__adddf3>
 800b4c6:	4642      	mov	r2, r8
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	f7f5 fb3b 	bl	8000b48 <__aeabi_dcmpgt>
 800b4d2:	b9d0      	cbnz	r0, 800b50a <_dtoa_r+0x6c2>
 800b4d4:	4642      	mov	r2, r8
 800b4d6:	464b      	mov	r3, r9
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f5 fb0c 	bl	8000af8 <__aeabi_dcmpeq>
 800b4e0:	b110      	cbz	r0, 800b4e8 <_dtoa_r+0x6a0>
 800b4e2:	f01a 0f01 	tst.w	sl, #1
 800b4e6:	d110      	bne.n	800b50a <_dtoa_r+0x6c2>
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	ee18 1a10 	vmov	r1, s16
 800b4ee:	f000 fae9 	bl	800bac4 <_Bfree>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9800      	ldr	r0, [sp, #0]
 800b4f6:	702b      	strb	r3, [r5, #0]
 800b4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	6018      	str	r0, [r3, #0]
 800b4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b500:	2b00      	cmp	r3, #0
 800b502:	f43f acf1 	beq.w	800aee8 <_dtoa_r+0xa0>
 800b506:	601d      	str	r5, [r3, #0]
 800b508:	e4ee      	b.n	800aee8 <_dtoa_r+0xa0>
 800b50a:	9f00      	ldr	r7, [sp, #0]
 800b50c:	462b      	mov	r3, r5
 800b50e:	461d      	mov	r5, r3
 800b510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b514:	2a39      	cmp	r2, #57	; 0x39
 800b516:	d106      	bne.n	800b526 <_dtoa_r+0x6de>
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d1f7      	bne.n	800b50e <_dtoa_r+0x6c6>
 800b51e:	9901      	ldr	r1, [sp, #4]
 800b520:	2230      	movs	r2, #48	; 0x30
 800b522:	3701      	adds	r7, #1
 800b524:	700a      	strb	r2, [r1, #0]
 800b526:	781a      	ldrb	r2, [r3, #0]
 800b528:	3201      	adds	r2, #1
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	e790      	b.n	800b450 <_dtoa_r+0x608>
 800b52e:	4ba6      	ldr	r3, [pc, #664]	; (800b7c8 <_dtoa_r+0x980>)
 800b530:	2200      	movs	r2, #0
 800b532:	f7f5 f879 	bl	8000628 <__aeabi_dmul>
 800b536:	2200      	movs	r2, #0
 800b538:	2300      	movs	r3, #0
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	f7f5 fadb 	bl	8000af8 <__aeabi_dcmpeq>
 800b542:	2800      	cmp	r0, #0
 800b544:	d09d      	beq.n	800b482 <_dtoa_r+0x63a>
 800b546:	e7cf      	b.n	800b4e8 <_dtoa_r+0x6a0>
 800b548:	9a08      	ldr	r2, [sp, #32]
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	f000 80d7 	beq.w	800b6fe <_dtoa_r+0x8b6>
 800b550:	9a06      	ldr	r2, [sp, #24]
 800b552:	2a01      	cmp	r2, #1
 800b554:	f300 80ba 	bgt.w	800b6cc <_dtoa_r+0x884>
 800b558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	f000 80b2 	beq.w	800b6c4 <_dtoa_r+0x87c>
 800b560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b564:	9e07      	ldr	r6, [sp, #28]
 800b566:	9d04      	ldr	r5, [sp, #16]
 800b568:	9a04      	ldr	r2, [sp, #16]
 800b56a:	441a      	add	r2, r3
 800b56c:	9204      	str	r2, [sp, #16]
 800b56e:	9a05      	ldr	r2, [sp, #20]
 800b570:	2101      	movs	r1, #1
 800b572:	441a      	add	r2, r3
 800b574:	4620      	mov	r0, r4
 800b576:	9205      	str	r2, [sp, #20]
 800b578:	f000 fb5c 	bl	800bc34 <__i2b>
 800b57c:	4607      	mov	r7, r0
 800b57e:	2d00      	cmp	r5, #0
 800b580:	dd0c      	ble.n	800b59c <_dtoa_r+0x754>
 800b582:	9b05      	ldr	r3, [sp, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	dd09      	ble.n	800b59c <_dtoa_r+0x754>
 800b588:	42ab      	cmp	r3, r5
 800b58a:	9a04      	ldr	r2, [sp, #16]
 800b58c:	bfa8      	it	ge
 800b58e:	462b      	movge	r3, r5
 800b590:	1ad2      	subs	r2, r2, r3
 800b592:	9204      	str	r2, [sp, #16]
 800b594:	9a05      	ldr	r2, [sp, #20]
 800b596:	1aed      	subs	r5, r5, r3
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	9b07      	ldr	r3, [sp, #28]
 800b59e:	b31b      	cbz	r3, 800b5e8 <_dtoa_r+0x7a0>
 800b5a0:	9b08      	ldr	r3, [sp, #32]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 80af 	beq.w	800b706 <_dtoa_r+0x8be>
 800b5a8:	2e00      	cmp	r6, #0
 800b5aa:	dd13      	ble.n	800b5d4 <_dtoa_r+0x78c>
 800b5ac:	4639      	mov	r1, r7
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 fbff 	bl	800bdb4 <__pow5mult>
 800b5b6:	ee18 2a10 	vmov	r2, s16
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	4607      	mov	r7, r0
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 fb4e 	bl	800bc60 <__multiply>
 800b5c4:	ee18 1a10 	vmov	r1, s16
 800b5c8:	4680      	mov	r8, r0
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 fa7a 	bl	800bac4 <_Bfree>
 800b5d0:	ee08 8a10 	vmov	s16, r8
 800b5d4:	9b07      	ldr	r3, [sp, #28]
 800b5d6:	1b9a      	subs	r2, r3, r6
 800b5d8:	d006      	beq.n	800b5e8 <_dtoa_r+0x7a0>
 800b5da:	ee18 1a10 	vmov	r1, s16
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 fbe8 	bl	800bdb4 <__pow5mult>
 800b5e4:	ee08 0a10 	vmov	s16, r0
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fb22 	bl	800bc34 <__i2b>
 800b5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	4606      	mov	r6, r0
 800b5f6:	f340 8088 	ble.w	800b70a <_dtoa_r+0x8c2>
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fbd8 	bl	800bdb4 <__pow5mult>
 800b604:	9b06      	ldr	r3, [sp, #24]
 800b606:	2b01      	cmp	r3, #1
 800b608:	4606      	mov	r6, r0
 800b60a:	f340 8081 	ble.w	800b710 <_dtoa_r+0x8c8>
 800b60e:	f04f 0800 	mov.w	r8, #0
 800b612:	6933      	ldr	r3, [r6, #16]
 800b614:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b618:	6918      	ldr	r0, [r3, #16]
 800b61a:	f000 fabb 	bl	800bb94 <__hi0bits>
 800b61e:	f1c0 0020 	rsb	r0, r0, #32
 800b622:	9b05      	ldr	r3, [sp, #20]
 800b624:	4418      	add	r0, r3
 800b626:	f010 001f 	ands.w	r0, r0, #31
 800b62a:	f000 8092 	beq.w	800b752 <_dtoa_r+0x90a>
 800b62e:	f1c0 0320 	rsb	r3, r0, #32
 800b632:	2b04      	cmp	r3, #4
 800b634:	f340 808a 	ble.w	800b74c <_dtoa_r+0x904>
 800b638:	f1c0 001c 	rsb	r0, r0, #28
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	4403      	add	r3, r0
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	9b05      	ldr	r3, [sp, #20]
 800b644:	4403      	add	r3, r0
 800b646:	4405      	add	r5, r0
 800b648:	9305      	str	r3, [sp, #20]
 800b64a:	9b04      	ldr	r3, [sp, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	dd07      	ble.n	800b660 <_dtoa_r+0x818>
 800b650:	ee18 1a10 	vmov	r1, s16
 800b654:	461a      	mov	r2, r3
 800b656:	4620      	mov	r0, r4
 800b658:	f000 fc06 	bl	800be68 <__lshift>
 800b65c:	ee08 0a10 	vmov	s16, r0
 800b660:	9b05      	ldr	r3, [sp, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	dd05      	ble.n	800b672 <_dtoa_r+0x82a>
 800b666:	4631      	mov	r1, r6
 800b668:	461a      	mov	r2, r3
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 fbfc 	bl	800be68 <__lshift>
 800b670:	4606      	mov	r6, r0
 800b672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b674:	2b00      	cmp	r3, #0
 800b676:	d06e      	beq.n	800b756 <_dtoa_r+0x90e>
 800b678:	ee18 0a10 	vmov	r0, s16
 800b67c:	4631      	mov	r1, r6
 800b67e:	f000 fc63 	bl	800bf48 <__mcmp>
 800b682:	2800      	cmp	r0, #0
 800b684:	da67      	bge.n	800b756 <_dtoa_r+0x90e>
 800b686:	9b00      	ldr	r3, [sp, #0]
 800b688:	3b01      	subs	r3, #1
 800b68a:	ee18 1a10 	vmov	r1, s16
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	220a      	movs	r2, #10
 800b692:	2300      	movs	r3, #0
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fa37 	bl	800bb08 <__multadd>
 800b69a:	9b08      	ldr	r3, [sp, #32]
 800b69c:	ee08 0a10 	vmov	s16, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f000 81b1 	beq.w	800ba08 <_dtoa_r+0xbc0>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	220a      	movs	r2, #10
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 fa2b 	bl	800bb08 <__multadd>
 800b6b2:	9b02      	ldr	r3, [sp, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	f300 808e 	bgt.w	800b7d8 <_dtoa_r+0x990>
 800b6bc:	9b06      	ldr	r3, [sp, #24]
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	dc51      	bgt.n	800b766 <_dtoa_r+0x91e>
 800b6c2:	e089      	b.n	800b7d8 <_dtoa_r+0x990>
 800b6c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6ca:	e74b      	b.n	800b564 <_dtoa_r+0x71c>
 800b6cc:	9b03      	ldr	r3, [sp, #12]
 800b6ce:	1e5e      	subs	r6, r3, #1
 800b6d0:	9b07      	ldr	r3, [sp, #28]
 800b6d2:	42b3      	cmp	r3, r6
 800b6d4:	bfbf      	itttt	lt
 800b6d6:	9b07      	ldrlt	r3, [sp, #28]
 800b6d8:	9607      	strlt	r6, [sp, #28]
 800b6da:	1af2      	sublt	r2, r6, r3
 800b6dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b6de:	bfb6      	itet	lt
 800b6e0:	189b      	addlt	r3, r3, r2
 800b6e2:	1b9e      	subge	r6, r3, r6
 800b6e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	bfb8      	it	lt
 800b6ea:	2600      	movlt	r6, #0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bfb7      	itett	lt
 800b6f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b6f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b6f8:	1a9d      	sublt	r5, r3, r2
 800b6fa:	2300      	movlt	r3, #0
 800b6fc:	e734      	b.n	800b568 <_dtoa_r+0x720>
 800b6fe:	9e07      	ldr	r6, [sp, #28]
 800b700:	9d04      	ldr	r5, [sp, #16]
 800b702:	9f08      	ldr	r7, [sp, #32]
 800b704:	e73b      	b.n	800b57e <_dtoa_r+0x736>
 800b706:	9a07      	ldr	r2, [sp, #28]
 800b708:	e767      	b.n	800b5da <_dtoa_r+0x792>
 800b70a:	9b06      	ldr	r3, [sp, #24]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	dc18      	bgt.n	800b742 <_dtoa_r+0x8fa>
 800b710:	f1ba 0f00 	cmp.w	sl, #0
 800b714:	d115      	bne.n	800b742 <_dtoa_r+0x8fa>
 800b716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b71a:	b993      	cbnz	r3, 800b742 <_dtoa_r+0x8fa>
 800b71c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b720:	0d1b      	lsrs	r3, r3, #20
 800b722:	051b      	lsls	r3, r3, #20
 800b724:	b183      	cbz	r3, 800b748 <_dtoa_r+0x900>
 800b726:	9b04      	ldr	r3, [sp, #16]
 800b728:	3301      	adds	r3, #1
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	9b05      	ldr	r3, [sp, #20]
 800b72e:	3301      	adds	r3, #1
 800b730:	9305      	str	r3, [sp, #20]
 800b732:	f04f 0801 	mov.w	r8, #1
 800b736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f47f af6a 	bne.w	800b612 <_dtoa_r+0x7ca>
 800b73e:	2001      	movs	r0, #1
 800b740:	e76f      	b.n	800b622 <_dtoa_r+0x7da>
 800b742:	f04f 0800 	mov.w	r8, #0
 800b746:	e7f6      	b.n	800b736 <_dtoa_r+0x8ee>
 800b748:	4698      	mov	r8, r3
 800b74a:	e7f4      	b.n	800b736 <_dtoa_r+0x8ee>
 800b74c:	f43f af7d 	beq.w	800b64a <_dtoa_r+0x802>
 800b750:	4618      	mov	r0, r3
 800b752:	301c      	adds	r0, #28
 800b754:	e772      	b.n	800b63c <_dtoa_r+0x7f4>
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dc37      	bgt.n	800b7cc <_dtoa_r+0x984>
 800b75c:	9b06      	ldr	r3, [sp, #24]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	dd34      	ble.n	800b7cc <_dtoa_r+0x984>
 800b762:	9b03      	ldr	r3, [sp, #12]
 800b764:	9302      	str	r3, [sp, #8]
 800b766:	9b02      	ldr	r3, [sp, #8]
 800b768:	b96b      	cbnz	r3, 800b786 <_dtoa_r+0x93e>
 800b76a:	4631      	mov	r1, r6
 800b76c:	2205      	movs	r2, #5
 800b76e:	4620      	mov	r0, r4
 800b770:	f000 f9ca 	bl	800bb08 <__multadd>
 800b774:	4601      	mov	r1, r0
 800b776:	4606      	mov	r6, r0
 800b778:	ee18 0a10 	vmov	r0, s16
 800b77c:	f000 fbe4 	bl	800bf48 <__mcmp>
 800b780:	2800      	cmp	r0, #0
 800b782:	f73f adbb 	bgt.w	800b2fc <_dtoa_r+0x4b4>
 800b786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b788:	9d01      	ldr	r5, [sp, #4]
 800b78a:	43db      	mvns	r3, r3
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	f04f 0800 	mov.w	r8, #0
 800b792:	4631      	mov	r1, r6
 800b794:	4620      	mov	r0, r4
 800b796:	f000 f995 	bl	800bac4 <_Bfree>
 800b79a:	2f00      	cmp	r7, #0
 800b79c:	f43f aea4 	beq.w	800b4e8 <_dtoa_r+0x6a0>
 800b7a0:	f1b8 0f00 	cmp.w	r8, #0
 800b7a4:	d005      	beq.n	800b7b2 <_dtoa_r+0x96a>
 800b7a6:	45b8      	cmp	r8, r7
 800b7a8:	d003      	beq.n	800b7b2 <_dtoa_r+0x96a>
 800b7aa:	4641      	mov	r1, r8
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 f989 	bl	800bac4 <_Bfree>
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 f985 	bl	800bac4 <_Bfree>
 800b7ba:	e695      	b.n	800b4e8 <_dtoa_r+0x6a0>
 800b7bc:	2600      	movs	r6, #0
 800b7be:	4637      	mov	r7, r6
 800b7c0:	e7e1      	b.n	800b786 <_dtoa_r+0x93e>
 800b7c2:	9700      	str	r7, [sp, #0]
 800b7c4:	4637      	mov	r7, r6
 800b7c6:	e599      	b.n	800b2fc <_dtoa_r+0x4b4>
 800b7c8:	40240000 	.word	0x40240000
 800b7cc:	9b08      	ldr	r3, [sp, #32]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 80ca 	beq.w	800b968 <_dtoa_r+0xb20>
 800b7d4:	9b03      	ldr	r3, [sp, #12]
 800b7d6:	9302      	str	r3, [sp, #8]
 800b7d8:	2d00      	cmp	r5, #0
 800b7da:	dd05      	ble.n	800b7e8 <_dtoa_r+0x9a0>
 800b7dc:	4639      	mov	r1, r7
 800b7de:	462a      	mov	r2, r5
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 fb41 	bl	800be68 <__lshift>
 800b7e6:	4607      	mov	r7, r0
 800b7e8:	f1b8 0f00 	cmp.w	r8, #0
 800b7ec:	d05b      	beq.n	800b8a6 <_dtoa_r+0xa5e>
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 f927 	bl	800ba44 <_Balloc>
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	b928      	cbnz	r0, 800b806 <_dtoa_r+0x9be>
 800b7fa:	4b87      	ldr	r3, [pc, #540]	; (800ba18 <_dtoa_r+0xbd0>)
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b802:	f7ff bb3b 	b.w	800ae7c <_dtoa_r+0x34>
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	3202      	adds	r2, #2
 800b80a:	0092      	lsls	r2, r2, #2
 800b80c:	f107 010c 	add.w	r1, r7, #12
 800b810:	300c      	adds	r0, #12
 800b812:	f7fe fcfd 	bl	800a210 <memcpy>
 800b816:	2201      	movs	r2, #1
 800b818:	4629      	mov	r1, r5
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 fb24 	bl	800be68 <__lshift>
 800b820:	9b01      	ldr	r3, [sp, #4]
 800b822:	f103 0901 	add.w	r9, r3, #1
 800b826:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b82a:	4413      	add	r3, r2
 800b82c:	9305      	str	r3, [sp, #20]
 800b82e:	f00a 0301 	and.w	r3, sl, #1
 800b832:	46b8      	mov	r8, r7
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	4607      	mov	r7, r0
 800b838:	4631      	mov	r1, r6
 800b83a:	ee18 0a10 	vmov	r0, s16
 800b83e:	f7ff fa77 	bl	800ad30 <quorem>
 800b842:	4641      	mov	r1, r8
 800b844:	9002      	str	r0, [sp, #8]
 800b846:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b84a:	ee18 0a10 	vmov	r0, s16
 800b84e:	f000 fb7b 	bl	800bf48 <__mcmp>
 800b852:	463a      	mov	r2, r7
 800b854:	9003      	str	r0, [sp, #12]
 800b856:	4631      	mov	r1, r6
 800b858:	4620      	mov	r0, r4
 800b85a:	f000 fb91 	bl	800bf80 <__mdiff>
 800b85e:	68c2      	ldr	r2, [r0, #12]
 800b860:	f109 3bff 	add.w	fp, r9, #4294967295
 800b864:	4605      	mov	r5, r0
 800b866:	bb02      	cbnz	r2, 800b8aa <_dtoa_r+0xa62>
 800b868:	4601      	mov	r1, r0
 800b86a:	ee18 0a10 	vmov	r0, s16
 800b86e:	f000 fb6b 	bl	800bf48 <__mcmp>
 800b872:	4602      	mov	r2, r0
 800b874:	4629      	mov	r1, r5
 800b876:	4620      	mov	r0, r4
 800b878:	9207      	str	r2, [sp, #28]
 800b87a:	f000 f923 	bl	800bac4 <_Bfree>
 800b87e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b882:	ea43 0102 	orr.w	r1, r3, r2
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	430b      	orrs	r3, r1
 800b88a:	464d      	mov	r5, r9
 800b88c:	d10f      	bne.n	800b8ae <_dtoa_r+0xa66>
 800b88e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b892:	d02a      	beq.n	800b8ea <_dtoa_r+0xaa2>
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	dd02      	ble.n	800b8a0 <_dtoa_r+0xa58>
 800b89a:	9b02      	ldr	r3, [sp, #8]
 800b89c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b8a0:	f88b a000 	strb.w	sl, [fp]
 800b8a4:	e775      	b.n	800b792 <_dtoa_r+0x94a>
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	e7ba      	b.n	800b820 <_dtoa_r+0x9d8>
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	e7e2      	b.n	800b874 <_dtoa_r+0xa2c>
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	db04      	blt.n	800b8be <_dtoa_r+0xa76>
 800b8b4:	9906      	ldr	r1, [sp, #24]
 800b8b6:	430b      	orrs	r3, r1
 800b8b8:	9904      	ldr	r1, [sp, #16]
 800b8ba:	430b      	orrs	r3, r1
 800b8bc:	d122      	bne.n	800b904 <_dtoa_r+0xabc>
 800b8be:	2a00      	cmp	r2, #0
 800b8c0:	ddee      	ble.n	800b8a0 <_dtoa_r+0xa58>
 800b8c2:	ee18 1a10 	vmov	r1, s16
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 facd 	bl	800be68 <__lshift>
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	ee08 0a10 	vmov	s16, r0
 800b8d4:	f000 fb38 	bl	800bf48 <__mcmp>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	dc03      	bgt.n	800b8e4 <_dtoa_r+0xa9c>
 800b8dc:	d1e0      	bne.n	800b8a0 <_dtoa_r+0xa58>
 800b8de:	f01a 0f01 	tst.w	sl, #1
 800b8e2:	d0dd      	beq.n	800b8a0 <_dtoa_r+0xa58>
 800b8e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8e8:	d1d7      	bne.n	800b89a <_dtoa_r+0xa52>
 800b8ea:	2339      	movs	r3, #57	; 0x39
 800b8ec:	f88b 3000 	strb.w	r3, [fp]
 800b8f0:	462b      	mov	r3, r5
 800b8f2:	461d      	mov	r5, r3
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8fa:	2a39      	cmp	r2, #57	; 0x39
 800b8fc:	d071      	beq.n	800b9e2 <_dtoa_r+0xb9a>
 800b8fe:	3201      	adds	r2, #1
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	e746      	b.n	800b792 <_dtoa_r+0x94a>
 800b904:	2a00      	cmp	r2, #0
 800b906:	dd07      	ble.n	800b918 <_dtoa_r+0xad0>
 800b908:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b90c:	d0ed      	beq.n	800b8ea <_dtoa_r+0xaa2>
 800b90e:	f10a 0301 	add.w	r3, sl, #1
 800b912:	f88b 3000 	strb.w	r3, [fp]
 800b916:	e73c      	b.n	800b792 <_dtoa_r+0x94a>
 800b918:	9b05      	ldr	r3, [sp, #20]
 800b91a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b91e:	4599      	cmp	r9, r3
 800b920:	d047      	beq.n	800b9b2 <_dtoa_r+0xb6a>
 800b922:	ee18 1a10 	vmov	r1, s16
 800b926:	2300      	movs	r3, #0
 800b928:	220a      	movs	r2, #10
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 f8ec 	bl	800bb08 <__multadd>
 800b930:	45b8      	cmp	r8, r7
 800b932:	ee08 0a10 	vmov	s16, r0
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	f04f 020a 	mov.w	r2, #10
 800b93e:	4641      	mov	r1, r8
 800b940:	4620      	mov	r0, r4
 800b942:	d106      	bne.n	800b952 <_dtoa_r+0xb0a>
 800b944:	f000 f8e0 	bl	800bb08 <__multadd>
 800b948:	4680      	mov	r8, r0
 800b94a:	4607      	mov	r7, r0
 800b94c:	f109 0901 	add.w	r9, r9, #1
 800b950:	e772      	b.n	800b838 <_dtoa_r+0x9f0>
 800b952:	f000 f8d9 	bl	800bb08 <__multadd>
 800b956:	4639      	mov	r1, r7
 800b958:	4680      	mov	r8, r0
 800b95a:	2300      	movs	r3, #0
 800b95c:	220a      	movs	r2, #10
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 f8d2 	bl	800bb08 <__multadd>
 800b964:	4607      	mov	r7, r0
 800b966:	e7f1      	b.n	800b94c <_dtoa_r+0xb04>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	9302      	str	r3, [sp, #8]
 800b96c:	9d01      	ldr	r5, [sp, #4]
 800b96e:	ee18 0a10 	vmov	r0, s16
 800b972:	4631      	mov	r1, r6
 800b974:	f7ff f9dc 	bl	800ad30 <quorem>
 800b978:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	f805 ab01 	strb.w	sl, [r5], #1
 800b982:	1aea      	subs	r2, r5, r3
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	4293      	cmp	r3, r2
 800b988:	dd09      	ble.n	800b99e <_dtoa_r+0xb56>
 800b98a:	ee18 1a10 	vmov	r1, s16
 800b98e:	2300      	movs	r3, #0
 800b990:	220a      	movs	r2, #10
 800b992:	4620      	mov	r0, r4
 800b994:	f000 f8b8 	bl	800bb08 <__multadd>
 800b998:	ee08 0a10 	vmov	s16, r0
 800b99c:	e7e7      	b.n	800b96e <_dtoa_r+0xb26>
 800b99e:	9b02      	ldr	r3, [sp, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bfc8      	it	gt
 800b9a4:	461d      	movgt	r5, r3
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	bfd8      	it	le
 800b9aa:	2501      	movle	r5, #1
 800b9ac:	441d      	add	r5, r3
 800b9ae:	f04f 0800 	mov.w	r8, #0
 800b9b2:	ee18 1a10 	vmov	r1, s16
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fa55 	bl	800be68 <__lshift>
 800b9be:	4631      	mov	r1, r6
 800b9c0:	ee08 0a10 	vmov	s16, r0
 800b9c4:	f000 fac0 	bl	800bf48 <__mcmp>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	dc91      	bgt.n	800b8f0 <_dtoa_r+0xaa8>
 800b9cc:	d102      	bne.n	800b9d4 <_dtoa_r+0xb8c>
 800b9ce:	f01a 0f01 	tst.w	sl, #1
 800b9d2:	d18d      	bne.n	800b8f0 <_dtoa_r+0xaa8>
 800b9d4:	462b      	mov	r3, r5
 800b9d6:	461d      	mov	r5, r3
 800b9d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9dc:	2a30      	cmp	r2, #48	; 0x30
 800b9de:	d0fa      	beq.n	800b9d6 <_dtoa_r+0xb8e>
 800b9e0:	e6d7      	b.n	800b792 <_dtoa_r+0x94a>
 800b9e2:	9a01      	ldr	r2, [sp, #4]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d184      	bne.n	800b8f2 <_dtoa_r+0xaaa>
 800b9e8:	9b00      	ldr	r3, [sp, #0]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	2331      	movs	r3, #49	; 0x31
 800b9f0:	7013      	strb	r3, [r2, #0]
 800b9f2:	e6ce      	b.n	800b792 <_dtoa_r+0x94a>
 800b9f4:	4b09      	ldr	r3, [pc, #36]	; (800ba1c <_dtoa_r+0xbd4>)
 800b9f6:	f7ff ba95 	b.w	800af24 <_dtoa_r+0xdc>
 800b9fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f47f aa6e 	bne.w	800aede <_dtoa_r+0x96>
 800ba02:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <_dtoa_r+0xbd8>)
 800ba04:	f7ff ba8e 	b.w	800af24 <_dtoa_r+0xdc>
 800ba08:	9b02      	ldr	r3, [sp, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	dcae      	bgt.n	800b96c <_dtoa_r+0xb24>
 800ba0e:	9b06      	ldr	r3, [sp, #24]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	f73f aea8 	bgt.w	800b766 <_dtoa_r+0x91e>
 800ba16:	e7a9      	b.n	800b96c <_dtoa_r+0xb24>
 800ba18:	0800f6af 	.word	0x0800f6af
 800ba1c:	0800f60c 	.word	0x0800f60c
 800ba20:	0800f630 	.word	0x0800f630

0800ba24 <_localeconv_r>:
 800ba24:	4800      	ldr	r0, [pc, #0]	; (800ba28 <_localeconv_r+0x4>)
 800ba26:	4770      	bx	lr
 800ba28:	2000017c 	.word	0x2000017c

0800ba2c <__malloc_lock>:
 800ba2c:	4801      	ldr	r0, [pc, #4]	; (800ba34 <__malloc_lock+0x8>)
 800ba2e:	f000 bd30 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800ba32:	bf00      	nop
 800ba34:	200133c8 	.word	0x200133c8

0800ba38 <__malloc_unlock>:
 800ba38:	4801      	ldr	r0, [pc, #4]	; (800ba40 <__malloc_unlock+0x8>)
 800ba3a:	f000 bd2b 	b.w	800c494 <__retarget_lock_release_recursive>
 800ba3e:	bf00      	nop
 800ba40:	200133c8 	.word	0x200133c8

0800ba44 <_Balloc>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba48:	4604      	mov	r4, r0
 800ba4a:	460d      	mov	r5, r1
 800ba4c:	b976      	cbnz	r6, 800ba6c <_Balloc+0x28>
 800ba4e:	2010      	movs	r0, #16
 800ba50:	f7fe fbd6 	bl	800a200 <malloc>
 800ba54:	4602      	mov	r2, r0
 800ba56:	6260      	str	r0, [r4, #36]	; 0x24
 800ba58:	b920      	cbnz	r0, 800ba64 <_Balloc+0x20>
 800ba5a:	4b18      	ldr	r3, [pc, #96]	; (800babc <_Balloc+0x78>)
 800ba5c:	4818      	ldr	r0, [pc, #96]	; (800bac0 <_Balloc+0x7c>)
 800ba5e:	2166      	movs	r1, #102	; 0x66
 800ba60:	f000 fce6 	bl	800c430 <__assert_func>
 800ba64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba68:	6006      	str	r6, [r0, #0]
 800ba6a:	60c6      	str	r6, [r0, #12]
 800ba6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba6e:	68f3      	ldr	r3, [r6, #12]
 800ba70:	b183      	cbz	r3, 800ba94 <_Balloc+0x50>
 800ba72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba7a:	b9b8      	cbnz	r0, 800baac <_Balloc+0x68>
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba82:	1d72      	adds	r2, r6, #5
 800ba84:	0092      	lsls	r2, r2, #2
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fb60 	bl	800c14c <_calloc_r>
 800ba8c:	b160      	cbz	r0, 800baa8 <_Balloc+0x64>
 800ba8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba92:	e00e      	b.n	800bab2 <_Balloc+0x6e>
 800ba94:	2221      	movs	r2, #33	; 0x21
 800ba96:	2104      	movs	r1, #4
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fb57 	bl	800c14c <_calloc_r>
 800ba9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa0:	60f0      	str	r0, [r6, #12]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e4      	bne.n	800ba72 <_Balloc+0x2e>
 800baa8:	2000      	movs	r0, #0
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	6802      	ldr	r2, [r0, #0]
 800baae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bab2:	2300      	movs	r3, #0
 800bab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bab8:	e7f7      	b.n	800baaa <_Balloc+0x66>
 800baba:	bf00      	nop
 800babc:	0800f63d 	.word	0x0800f63d
 800bac0:	0800f6c0 	.word	0x0800f6c0

0800bac4 <_Bfree>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bac8:	4605      	mov	r5, r0
 800baca:	460c      	mov	r4, r1
 800bacc:	b976      	cbnz	r6, 800baec <_Bfree+0x28>
 800bace:	2010      	movs	r0, #16
 800bad0:	f7fe fb96 	bl	800a200 <malloc>
 800bad4:	4602      	mov	r2, r0
 800bad6:	6268      	str	r0, [r5, #36]	; 0x24
 800bad8:	b920      	cbnz	r0, 800bae4 <_Bfree+0x20>
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <_Bfree+0x3c>)
 800badc:	4809      	ldr	r0, [pc, #36]	; (800bb04 <_Bfree+0x40>)
 800bade:	218a      	movs	r1, #138	; 0x8a
 800bae0:	f000 fca6 	bl	800c430 <__assert_func>
 800bae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bae8:	6006      	str	r6, [r0, #0]
 800baea:	60c6      	str	r6, [r0, #12]
 800baec:	b13c      	cbz	r4, 800bafe <_Bfree+0x3a>
 800baee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800baf0:	6862      	ldr	r2, [r4, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baf8:	6021      	str	r1, [r4, #0]
 800bafa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	0800f63d 	.word	0x0800f63d
 800bb04:	0800f6c0 	.word	0x0800f6c0

0800bb08 <__multadd>:
 800bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	690d      	ldr	r5, [r1, #16]
 800bb0e:	4607      	mov	r7, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	461e      	mov	r6, r3
 800bb14:	f101 0c14 	add.w	ip, r1, #20
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb1e:	b299      	uxth	r1, r3
 800bb20:	fb02 6101 	mla	r1, r2, r1, r6
 800bb24:	0c1e      	lsrs	r6, r3, #16
 800bb26:	0c0b      	lsrs	r3, r1, #16
 800bb28:	fb02 3306 	mla	r3, r2, r6, r3
 800bb2c:	b289      	uxth	r1, r1
 800bb2e:	3001      	adds	r0, #1
 800bb30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb34:	4285      	cmp	r5, r0
 800bb36:	f84c 1b04 	str.w	r1, [ip], #4
 800bb3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb3e:	dcec      	bgt.n	800bb1a <__multadd+0x12>
 800bb40:	b30e      	cbz	r6, 800bb86 <__multadd+0x7e>
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	42ab      	cmp	r3, r5
 800bb46:	dc19      	bgt.n	800bb7c <__multadd+0x74>
 800bb48:	6861      	ldr	r1, [r4, #4]
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	3101      	adds	r1, #1
 800bb4e:	f7ff ff79 	bl	800ba44 <_Balloc>
 800bb52:	4680      	mov	r8, r0
 800bb54:	b928      	cbnz	r0, 800bb62 <__multadd+0x5a>
 800bb56:	4602      	mov	r2, r0
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <__multadd+0x84>)
 800bb5a:	480d      	ldr	r0, [pc, #52]	; (800bb90 <__multadd+0x88>)
 800bb5c:	21b5      	movs	r1, #181	; 0xb5
 800bb5e:	f000 fc67 	bl	800c430 <__assert_func>
 800bb62:	6922      	ldr	r2, [r4, #16]
 800bb64:	3202      	adds	r2, #2
 800bb66:	f104 010c 	add.w	r1, r4, #12
 800bb6a:	0092      	lsls	r2, r2, #2
 800bb6c:	300c      	adds	r0, #12
 800bb6e:	f7fe fb4f 	bl	800a210 <memcpy>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff ffa5 	bl	800bac4 <_Bfree>
 800bb7a:	4644      	mov	r4, r8
 800bb7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb80:	3501      	adds	r5, #1
 800bb82:	615e      	str	r6, [r3, #20]
 800bb84:	6125      	str	r5, [r4, #16]
 800bb86:	4620      	mov	r0, r4
 800bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8c:	0800f6af 	.word	0x0800f6af
 800bb90:	0800f6c0 	.word	0x0800f6c0

0800bb94 <__hi0bits>:
 800bb94:	0c03      	lsrs	r3, r0, #16
 800bb96:	041b      	lsls	r3, r3, #16
 800bb98:	b9d3      	cbnz	r3, 800bbd0 <__hi0bits+0x3c>
 800bb9a:	0400      	lsls	r0, r0, #16
 800bb9c:	2310      	movs	r3, #16
 800bb9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bba2:	bf04      	itt	eq
 800bba4:	0200      	lsleq	r0, r0, #8
 800bba6:	3308      	addeq	r3, #8
 800bba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbac:	bf04      	itt	eq
 800bbae:	0100      	lsleq	r0, r0, #4
 800bbb0:	3304      	addeq	r3, #4
 800bbb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbb6:	bf04      	itt	eq
 800bbb8:	0080      	lsleq	r0, r0, #2
 800bbba:	3302      	addeq	r3, #2
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	db05      	blt.n	800bbcc <__hi0bits+0x38>
 800bbc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbc4:	f103 0301 	add.w	r3, r3, #1
 800bbc8:	bf08      	it	eq
 800bbca:	2320      	moveq	r3, #32
 800bbcc:	4618      	mov	r0, r3
 800bbce:	4770      	bx	lr
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	e7e4      	b.n	800bb9e <__hi0bits+0xa>

0800bbd4 <__lo0bits>:
 800bbd4:	6803      	ldr	r3, [r0, #0]
 800bbd6:	f013 0207 	ands.w	r2, r3, #7
 800bbda:	4601      	mov	r1, r0
 800bbdc:	d00b      	beq.n	800bbf6 <__lo0bits+0x22>
 800bbde:	07da      	lsls	r2, r3, #31
 800bbe0:	d423      	bmi.n	800bc2a <__lo0bits+0x56>
 800bbe2:	0798      	lsls	r0, r3, #30
 800bbe4:	bf49      	itett	mi
 800bbe6:	085b      	lsrmi	r3, r3, #1
 800bbe8:	089b      	lsrpl	r3, r3, #2
 800bbea:	2001      	movmi	r0, #1
 800bbec:	600b      	strmi	r3, [r1, #0]
 800bbee:	bf5c      	itt	pl
 800bbf0:	600b      	strpl	r3, [r1, #0]
 800bbf2:	2002      	movpl	r0, #2
 800bbf4:	4770      	bx	lr
 800bbf6:	b298      	uxth	r0, r3
 800bbf8:	b9a8      	cbnz	r0, 800bc26 <__lo0bits+0x52>
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	2010      	movs	r0, #16
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	b90a      	cbnz	r2, 800bc06 <__lo0bits+0x32>
 800bc02:	3008      	adds	r0, #8
 800bc04:	0a1b      	lsrs	r3, r3, #8
 800bc06:	071a      	lsls	r2, r3, #28
 800bc08:	bf04      	itt	eq
 800bc0a:	091b      	lsreq	r3, r3, #4
 800bc0c:	3004      	addeq	r0, #4
 800bc0e:	079a      	lsls	r2, r3, #30
 800bc10:	bf04      	itt	eq
 800bc12:	089b      	lsreq	r3, r3, #2
 800bc14:	3002      	addeq	r0, #2
 800bc16:	07da      	lsls	r2, r3, #31
 800bc18:	d403      	bmi.n	800bc22 <__lo0bits+0x4e>
 800bc1a:	085b      	lsrs	r3, r3, #1
 800bc1c:	f100 0001 	add.w	r0, r0, #1
 800bc20:	d005      	beq.n	800bc2e <__lo0bits+0x5a>
 800bc22:	600b      	str	r3, [r1, #0]
 800bc24:	4770      	bx	lr
 800bc26:	4610      	mov	r0, r2
 800bc28:	e7e9      	b.n	800bbfe <__lo0bits+0x2a>
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	4770      	bx	lr
 800bc2e:	2020      	movs	r0, #32
 800bc30:	4770      	bx	lr
	...

0800bc34 <__i2b>:
 800bc34:	b510      	push	{r4, lr}
 800bc36:	460c      	mov	r4, r1
 800bc38:	2101      	movs	r1, #1
 800bc3a:	f7ff ff03 	bl	800ba44 <_Balloc>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	b928      	cbnz	r0, 800bc4e <__i2b+0x1a>
 800bc42:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <__i2b+0x24>)
 800bc44:	4805      	ldr	r0, [pc, #20]	; (800bc5c <__i2b+0x28>)
 800bc46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc4a:	f000 fbf1 	bl	800c430 <__assert_func>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	6144      	str	r4, [r0, #20]
 800bc52:	6103      	str	r3, [r0, #16]
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	bf00      	nop
 800bc58:	0800f6af 	.word	0x0800f6af
 800bc5c:	0800f6c0 	.word	0x0800f6c0

0800bc60 <__multiply>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	4691      	mov	r9, r2
 800bc66:	690a      	ldr	r2, [r1, #16]
 800bc68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	bfb8      	it	lt
 800bc70:	460b      	movlt	r3, r1
 800bc72:	460c      	mov	r4, r1
 800bc74:	bfbc      	itt	lt
 800bc76:	464c      	movlt	r4, r9
 800bc78:	4699      	movlt	r9, r3
 800bc7a:	6927      	ldr	r7, [r4, #16]
 800bc7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc80:	68a3      	ldr	r3, [r4, #8]
 800bc82:	6861      	ldr	r1, [r4, #4]
 800bc84:	eb07 060a 	add.w	r6, r7, sl
 800bc88:	42b3      	cmp	r3, r6
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	bfb8      	it	lt
 800bc8e:	3101      	addlt	r1, #1
 800bc90:	f7ff fed8 	bl	800ba44 <_Balloc>
 800bc94:	b930      	cbnz	r0, 800bca4 <__multiply+0x44>
 800bc96:	4602      	mov	r2, r0
 800bc98:	4b44      	ldr	r3, [pc, #272]	; (800bdac <__multiply+0x14c>)
 800bc9a:	4845      	ldr	r0, [pc, #276]	; (800bdb0 <__multiply+0x150>)
 800bc9c:	f240 115d 	movw	r1, #349	; 0x15d
 800bca0:	f000 fbc6 	bl	800c430 <__assert_func>
 800bca4:	f100 0514 	add.w	r5, r0, #20
 800bca8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcac:	462b      	mov	r3, r5
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4543      	cmp	r3, r8
 800bcb2:	d321      	bcc.n	800bcf8 <__multiply+0x98>
 800bcb4:	f104 0314 	add.w	r3, r4, #20
 800bcb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcbc:	f109 0314 	add.w	r3, r9, #20
 800bcc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcc4:	9202      	str	r2, [sp, #8]
 800bcc6:	1b3a      	subs	r2, r7, r4
 800bcc8:	3a15      	subs	r2, #21
 800bcca:	f022 0203 	bic.w	r2, r2, #3
 800bcce:	3204      	adds	r2, #4
 800bcd0:	f104 0115 	add.w	r1, r4, #21
 800bcd4:	428f      	cmp	r7, r1
 800bcd6:	bf38      	it	cc
 800bcd8:	2204      	movcc	r2, #4
 800bcda:	9201      	str	r2, [sp, #4]
 800bcdc:	9a02      	ldr	r2, [sp, #8]
 800bcde:	9303      	str	r3, [sp, #12]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d80c      	bhi.n	800bcfe <__multiply+0x9e>
 800bce4:	2e00      	cmp	r6, #0
 800bce6:	dd03      	ble.n	800bcf0 <__multiply+0x90>
 800bce8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d05a      	beq.n	800bda6 <__multiply+0x146>
 800bcf0:	6106      	str	r6, [r0, #16]
 800bcf2:	b005      	add	sp, #20
 800bcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf8:	f843 2b04 	str.w	r2, [r3], #4
 800bcfc:	e7d8      	b.n	800bcb0 <__multiply+0x50>
 800bcfe:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd02:	f1ba 0f00 	cmp.w	sl, #0
 800bd06:	d024      	beq.n	800bd52 <__multiply+0xf2>
 800bd08:	f104 0e14 	add.w	lr, r4, #20
 800bd0c:	46a9      	mov	r9, r5
 800bd0e:	f04f 0c00 	mov.w	ip, #0
 800bd12:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd16:	f8d9 1000 	ldr.w	r1, [r9]
 800bd1a:	fa1f fb82 	uxth.w	fp, r2
 800bd1e:	b289      	uxth	r1, r1
 800bd20:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd28:	f8d9 2000 	ldr.w	r2, [r9]
 800bd2c:	4461      	add	r1, ip
 800bd2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd32:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd3a:	b289      	uxth	r1, r1
 800bd3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd40:	4577      	cmp	r7, lr
 800bd42:	f849 1b04 	str.w	r1, [r9], #4
 800bd46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd4a:	d8e2      	bhi.n	800bd12 <__multiply+0xb2>
 800bd4c:	9a01      	ldr	r2, [sp, #4]
 800bd4e:	f845 c002 	str.w	ip, [r5, r2]
 800bd52:	9a03      	ldr	r2, [sp, #12]
 800bd54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	f1b9 0f00 	cmp.w	r9, #0
 800bd5e:	d020      	beq.n	800bda2 <__multiply+0x142>
 800bd60:	6829      	ldr	r1, [r5, #0]
 800bd62:	f104 0c14 	add.w	ip, r4, #20
 800bd66:	46ae      	mov	lr, r5
 800bd68:	f04f 0a00 	mov.w	sl, #0
 800bd6c:	f8bc b000 	ldrh.w	fp, [ip]
 800bd70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd74:	fb09 220b 	mla	r2, r9, fp, r2
 800bd78:	4492      	add	sl, r2
 800bd7a:	b289      	uxth	r1, r1
 800bd7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bd80:	f84e 1b04 	str.w	r1, [lr], #4
 800bd84:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd88:	f8be 1000 	ldrh.w	r1, [lr]
 800bd8c:	0c12      	lsrs	r2, r2, #16
 800bd8e:	fb09 1102 	mla	r1, r9, r2, r1
 800bd92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bd96:	4567      	cmp	r7, ip
 800bd98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd9c:	d8e6      	bhi.n	800bd6c <__multiply+0x10c>
 800bd9e:	9a01      	ldr	r2, [sp, #4]
 800bda0:	50a9      	str	r1, [r5, r2]
 800bda2:	3504      	adds	r5, #4
 800bda4:	e79a      	b.n	800bcdc <__multiply+0x7c>
 800bda6:	3e01      	subs	r6, #1
 800bda8:	e79c      	b.n	800bce4 <__multiply+0x84>
 800bdaa:	bf00      	nop
 800bdac:	0800f6af 	.word	0x0800f6af
 800bdb0:	0800f6c0 	.word	0x0800f6c0

0800bdb4 <__pow5mult>:
 800bdb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb8:	4615      	mov	r5, r2
 800bdba:	f012 0203 	ands.w	r2, r2, #3
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	460f      	mov	r7, r1
 800bdc2:	d007      	beq.n	800bdd4 <__pow5mult+0x20>
 800bdc4:	4c25      	ldr	r4, [pc, #148]	; (800be5c <__pow5mult+0xa8>)
 800bdc6:	3a01      	subs	r2, #1
 800bdc8:	2300      	movs	r3, #0
 800bdca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdce:	f7ff fe9b 	bl	800bb08 <__multadd>
 800bdd2:	4607      	mov	r7, r0
 800bdd4:	10ad      	asrs	r5, r5, #2
 800bdd6:	d03d      	beq.n	800be54 <__pow5mult+0xa0>
 800bdd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdda:	b97c      	cbnz	r4, 800bdfc <__pow5mult+0x48>
 800bddc:	2010      	movs	r0, #16
 800bdde:	f7fe fa0f 	bl	800a200 <malloc>
 800bde2:	4602      	mov	r2, r0
 800bde4:	6270      	str	r0, [r6, #36]	; 0x24
 800bde6:	b928      	cbnz	r0, 800bdf4 <__pow5mult+0x40>
 800bde8:	4b1d      	ldr	r3, [pc, #116]	; (800be60 <__pow5mult+0xac>)
 800bdea:	481e      	ldr	r0, [pc, #120]	; (800be64 <__pow5mult+0xb0>)
 800bdec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bdf0:	f000 fb1e 	bl	800c430 <__assert_func>
 800bdf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdf8:	6004      	str	r4, [r0, #0]
 800bdfa:	60c4      	str	r4, [r0, #12]
 800bdfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be04:	b94c      	cbnz	r4, 800be1a <__pow5mult+0x66>
 800be06:	f240 2171 	movw	r1, #625	; 0x271
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7ff ff12 	bl	800bc34 <__i2b>
 800be10:	2300      	movs	r3, #0
 800be12:	f8c8 0008 	str.w	r0, [r8, #8]
 800be16:	4604      	mov	r4, r0
 800be18:	6003      	str	r3, [r0, #0]
 800be1a:	f04f 0900 	mov.w	r9, #0
 800be1e:	07eb      	lsls	r3, r5, #31
 800be20:	d50a      	bpl.n	800be38 <__pow5mult+0x84>
 800be22:	4639      	mov	r1, r7
 800be24:	4622      	mov	r2, r4
 800be26:	4630      	mov	r0, r6
 800be28:	f7ff ff1a 	bl	800bc60 <__multiply>
 800be2c:	4639      	mov	r1, r7
 800be2e:	4680      	mov	r8, r0
 800be30:	4630      	mov	r0, r6
 800be32:	f7ff fe47 	bl	800bac4 <_Bfree>
 800be36:	4647      	mov	r7, r8
 800be38:	106d      	asrs	r5, r5, #1
 800be3a:	d00b      	beq.n	800be54 <__pow5mult+0xa0>
 800be3c:	6820      	ldr	r0, [r4, #0]
 800be3e:	b938      	cbnz	r0, 800be50 <__pow5mult+0x9c>
 800be40:	4622      	mov	r2, r4
 800be42:	4621      	mov	r1, r4
 800be44:	4630      	mov	r0, r6
 800be46:	f7ff ff0b 	bl	800bc60 <__multiply>
 800be4a:	6020      	str	r0, [r4, #0]
 800be4c:	f8c0 9000 	str.w	r9, [r0]
 800be50:	4604      	mov	r4, r0
 800be52:	e7e4      	b.n	800be1e <__pow5mult+0x6a>
 800be54:	4638      	mov	r0, r7
 800be56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be5a:	bf00      	nop
 800be5c:	0800f810 	.word	0x0800f810
 800be60:	0800f63d 	.word	0x0800f63d
 800be64:	0800f6c0 	.word	0x0800f6c0

0800be68 <__lshift>:
 800be68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be6c:	460c      	mov	r4, r1
 800be6e:	6849      	ldr	r1, [r1, #4]
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be76:	68a3      	ldr	r3, [r4, #8]
 800be78:	4607      	mov	r7, r0
 800be7a:	4691      	mov	r9, r2
 800be7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be80:	f108 0601 	add.w	r6, r8, #1
 800be84:	42b3      	cmp	r3, r6
 800be86:	db0b      	blt.n	800bea0 <__lshift+0x38>
 800be88:	4638      	mov	r0, r7
 800be8a:	f7ff fddb 	bl	800ba44 <_Balloc>
 800be8e:	4605      	mov	r5, r0
 800be90:	b948      	cbnz	r0, 800bea6 <__lshift+0x3e>
 800be92:	4602      	mov	r2, r0
 800be94:	4b2a      	ldr	r3, [pc, #168]	; (800bf40 <__lshift+0xd8>)
 800be96:	482b      	ldr	r0, [pc, #172]	; (800bf44 <__lshift+0xdc>)
 800be98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be9c:	f000 fac8 	bl	800c430 <__assert_func>
 800bea0:	3101      	adds	r1, #1
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	e7ee      	b.n	800be84 <__lshift+0x1c>
 800bea6:	2300      	movs	r3, #0
 800bea8:	f100 0114 	add.w	r1, r0, #20
 800beac:	f100 0210 	add.w	r2, r0, #16
 800beb0:	4618      	mov	r0, r3
 800beb2:	4553      	cmp	r3, sl
 800beb4:	db37      	blt.n	800bf26 <__lshift+0xbe>
 800beb6:	6920      	ldr	r0, [r4, #16]
 800beb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bebc:	f104 0314 	add.w	r3, r4, #20
 800bec0:	f019 091f 	ands.w	r9, r9, #31
 800bec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bec8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800becc:	d02f      	beq.n	800bf2e <__lshift+0xc6>
 800bece:	f1c9 0e20 	rsb	lr, r9, #32
 800bed2:	468a      	mov	sl, r1
 800bed4:	f04f 0c00 	mov.w	ip, #0
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	fa02 f209 	lsl.w	r2, r2, r9
 800bede:	ea42 020c 	orr.w	r2, r2, ip
 800bee2:	f84a 2b04 	str.w	r2, [sl], #4
 800bee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beea:	4298      	cmp	r0, r3
 800beec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bef0:	d8f2      	bhi.n	800bed8 <__lshift+0x70>
 800bef2:	1b03      	subs	r3, r0, r4
 800bef4:	3b15      	subs	r3, #21
 800bef6:	f023 0303 	bic.w	r3, r3, #3
 800befa:	3304      	adds	r3, #4
 800befc:	f104 0215 	add.w	r2, r4, #21
 800bf00:	4290      	cmp	r0, r2
 800bf02:	bf38      	it	cc
 800bf04:	2304      	movcc	r3, #4
 800bf06:	f841 c003 	str.w	ip, [r1, r3]
 800bf0a:	f1bc 0f00 	cmp.w	ip, #0
 800bf0e:	d001      	beq.n	800bf14 <__lshift+0xac>
 800bf10:	f108 0602 	add.w	r6, r8, #2
 800bf14:	3e01      	subs	r6, #1
 800bf16:	4638      	mov	r0, r7
 800bf18:	612e      	str	r6, [r5, #16]
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	f7ff fdd2 	bl	800bac4 <_Bfree>
 800bf20:	4628      	mov	r0, r5
 800bf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf26:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	e7c1      	b.n	800beb2 <__lshift+0x4a>
 800bf2e:	3904      	subs	r1, #4
 800bf30:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf34:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf38:	4298      	cmp	r0, r3
 800bf3a:	d8f9      	bhi.n	800bf30 <__lshift+0xc8>
 800bf3c:	e7ea      	b.n	800bf14 <__lshift+0xac>
 800bf3e:	bf00      	nop
 800bf40:	0800f6af 	.word	0x0800f6af
 800bf44:	0800f6c0 	.word	0x0800f6c0

0800bf48 <__mcmp>:
 800bf48:	b530      	push	{r4, r5, lr}
 800bf4a:	6902      	ldr	r2, [r0, #16]
 800bf4c:	690c      	ldr	r4, [r1, #16]
 800bf4e:	1b12      	subs	r2, r2, r4
 800bf50:	d10e      	bne.n	800bf70 <__mcmp+0x28>
 800bf52:	f100 0314 	add.w	r3, r0, #20
 800bf56:	3114      	adds	r1, #20
 800bf58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf68:	42a5      	cmp	r5, r4
 800bf6a:	d003      	beq.n	800bf74 <__mcmp+0x2c>
 800bf6c:	d305      	bcc.n	800bf7a <__mcmp+0x32>
 800bf6e:	2201      	movs	r2, #1
 800bf70:	4610      	mov	r0, r2
 800bf72:	bd30      	pop	{r4, r5, pc}
 800bf74:	4283      	cmp	r3, r0
 800bf76:	d3f3      	bcc.n	800bf60 <__mcmp+0x18>
 800bf78:	e7fa      	b.n	800bf70 <__mcmp+0x28>
 800bf7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf7e:	e7f7      	b.n	800bf70 <__mcmp+0x28>

0800bf80 <__mdiff>:
 800bf80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	460c      	mov	r4, r1
 800bf86:	4606      	mov	r6, r0
 800bf88:	4611      	mov	r1, r2
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	4690      	mov	r8, r2
 800bf8e:	f7ff ffdb 	bl	800bf48 <__mcmp>
 800bf92:	1e05      	subs	r5, r0, #0
 800bf94:	d110      	bne.n	800bfb8 <__mdiff+0x38>
 800bf96:	4629      	mov	r1, r5
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7ff fd53 	bl	800ba44 <_Balloc>
 800bf9e:	b930      	cbnz	r0, 800bfae <__mdiff+0x2e>
 800bfa0:	4b3a      	ldr	r3, [pc, #232]	; (800c08c <__mdiff+0x10c>)
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	f240 2132 	movw	r1, #562	; 0x232
 800bfa8:	4839      	ldr	r0, [pc, #228]	; (800c090 <__mdiff+0x110>)
 800bfaa:	f000 fa41 	bl	800c430 <__assert_func>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	bfa4      	itt	ge
 800bfba:	4643      	movge	r3, r8
 800bfbc:	46a0      	movge	r8, r4
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfc4:	bfa6      	itte	ge
 800bfc6:	461c      	movge	r4, r3
 800bfc8:	2500      	movge	r5, #0
 800bfca:	2501      	movlt	r5, #1
 800bfcc:	f7ff fd3a 	bl	800ba44 <_Balloc>
 800bfd0:	b920      	cbnz	r0, 800bfdc <__mdiff+0x5c>
 800bfd2:	4b2e      	ldr	r3, [pc, #184]	; (800c08c <__mdiff+0x10c>)
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfda:	e7e5      	b.n	800bfa8 <__mdiff+0x28>
 800bfdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bfe0:	6926      	ldr	r6, [r4, #16]
 800bfe2:	60c5      	str	r5, [r0, #12]
 800bfe4:	f104 0914 	add.w	r9, r4, #20
 800bfe8:	f108 0514 	add.w	r5, r8, #20
 800bfec:	f100 0e14 	add.w	lr, r0, #20
 800bff0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bff4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bff8:	f108 0210 	add.w	r2, r8, #16
 800bffc:	46f2      	mov	sl, lr
 800bffe:	2100      	movs	r1, #0
 800c000:	f859 3b04 	ldr.w	r3, [r9], #4
 800c004:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c008:	fa1f f883 	uxth.w	r8, r3
 800c00c:	fa11 f18b 	uxtah	r1, r1, fp
 800c010:	0c1b      	lsrs	r3, r3, #16
 800c012:	eba1 0808 	sub.w	r8, r1, r8
 800c016:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c01a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c01e:	fa1f f888 	uxth.w	r8, r8
 800c022:	1419      	asrs	r1, r3, #16
 800c024:	454e      	cmp	r6, r9
 800c026:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c02a:	f84a 3b04 	str.w	r3, [sl], #4
 800c02e:	d8e7      	bhi.n	800c000 <__mdiff+0x80>
 800c030:	1b33      	subs	r3, r6, r4
 800c032:	3b15      	subs	r3, #21
 800c034:	f023 0303 	bic.w	r3, r3, #3
 800c038:	3304      	adds	r3, #4
 800c03a:	3415      	adds	r4, #21
 800c03c:	42a6      	cmp	r6, r4
 800c03e:	bf38      	it	cc
 800c040:	2304      	movcc	r3, #4
 800c042:	441d      	add	r5, r3
 800c044:	4473      	add	r3, lr
 800c046:	469e      	mov	lr, r3
 800c048:	462e      	mov	r6, r5
 800c04a:	4566      	cmp	r6, ip
 800c04c:	d30e      	bcc.n	800c06c <__mdiff+0xec>
 800c04e:	f10c 0203 	add.w	r2, ip, #3
 800c052:	1b52      	subs	r2, r2, r5
 800c054:	f022 0203 	bic.w	r2, r2, #3
 800c058:	3d03      	subs	r5, #3
 800c05a:	45ac      	cmp	ip, r5
 800c05c:	bf38      	it	cc
 800c05e:	2200      	movcc	r2, #0
 800c060:	441a      	add	r2, r3
 800c062:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c066:	b17b      	cbz	r3, 800c088 <__mdiff+0x108>
 800c068:	6107      	str	r7, [r0, #16]
 800c06a:	e7a3      	b.n	800bfb4 <__mdiff+0x34>
 800c06c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c070:	fa11 f288 	uxtah	r2, r1, r8
 800c074:	1414      	asrs	r4, r2, #16
 800c076:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c07a:	b292      	uxth	r2, r2
 800c07c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c080:	f84e 2b04 	str.w	r2, [lr], #4
 800c084:	1421      	asrs	r1, r4, #16
 800c086:	e7e0      	b.n	800c04a <__mdiff+0xca>
 800c088:	3f01      	subs	r7, #1
 800c08a:	e7ea      	b.n	800c062 <__mdiff+0xe2>
 800c08c:	0800f6af 	.word	0x0800f6af
 800c090:	0800f6c0 	.word	0x0800f6c0

0800c094 <__d2b>:
 800c094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c098:	4689      	mov	r9, r1
 800c09a:	2101      	movs	r1, #1
 800c09c:	ec57 6b10 	vmov	r6, r7, d0
 800c0a0:	4690      	mov	r8, r2
 800c0a2:	f7ff fccf 	bl	800ba44 <_Balloc>
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	b930      	cbnz	r0, 800c0b8 <__d2b+0x24>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4b25      	ldr	r3, [pc, #148]	; (800c144 <__d2b+0xb0>)
 800c0ae:	4826      	ldr	r0, [pc, #152]	; (800c148 <__d2b+0xb4>)
 800c0b0:	f240 310a 	movw	r1, #778	; 0x30a
 800c0b4:	f000 f9bc 	bl	800c430 <__assert_func>
 800c0b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0c0:	bb35      	cbnz	r5, 800c110 <__d2b+0x7c>
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	d028      	beq.n	800c11a <__d2b+0x86>
 800c0c8:	4668      	mov	r0, sp
 800c0ca:	9600      	str	r6, [sp, #0]
 800c0cc:	f7ff fd82 	bl	800bbd4 <__lo0bits>
 800c0d0:	9900      	ldr	r1, [sp, #0]
 800c0d2:	b300      	cbz	r0, 800c116 <__d2b+0x82>
 800c0d4:	9a01      	ldr	r2, [sp, #4]
 800c0d6:	f1c0 0320 	rsb	r3, r0, #32
 800c0da:	fa02 f303 	lsl.w	r3, r2, r3
 800c0de:	430b      	orrs	r3, r1
 800c0e0:	40c2      	lsrs	r2, r0
 800c0e2:	6163      	str	r3, [r4, #20]
 800c0e4:	9201      	str	r2, [sp, #4]
 800c0e6:	9b01      	ldr	r3, [sp, #4]
 800c0e8:	61a3      	str	r3, [r4, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	bf14      	ite	ne
 800c0ee:	2202      	movne	r2, #2
 800c0f0:	2201      	moveq	r2, #1
 800c0f2:	6122      	str	r2, [r4, #16]
 800c0f4:	b1d5      	cbz	r5, 800c12c <__d2b+0x98>
 800c0f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0fa:	4405      	add	r5, r0
 800c0fc:	f8c9 5000 	str.w	r5, [r9]
 800c100:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c104:	f8c8 0000 	str.w	r0, [r8]
 800c108:	4620      	mov	r0, r4
 800c10a:	b003      	add	sp, #12
 800c10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c114:	e7d5      	b.n	800c0c2 <__d2b+0x2e>
 800c116:	6161      	str	r1, [r4, #20]
 800c118:	e7e5      	b.n	800c0e6 <__d2b+0x52>
 800c11a:	a801      	add	r0, sp, #4
 800c11c:	f7ff fd5a 	bl	800bbd4 <__lo0bits>
 800c120:	9b01      	ldr	r3, [sp, #4]
 800c122:	6163      	str	r3, [r4, #20]
 800c124:	2201      	movs	r2, #1
 800c126:	6122      	str	r2, [r4, #16]
 800c128:	3020      	adds	r0, #32
 800c12a:	e7e3      	b.n	800c0f4 <__d2b+0x60>
 800c12c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c130:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c134:	f8c9 0000 	str.w	r0, [r9]
 800c138:	6918      	ldr	r0, [r3, #16]
 800c13a:	f7ff fd2b 	bl	800bb94 <__hi0bits>
 800c13e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c142:	e7df      	b.n	800c104 <__d2b+0x70>
 800c144:	0800f6af 	.word	0x0800f6af
 800c148:	0800f6c0 	.word	0x0800f6c0

0800c14c <_calloc_r>:
 800c14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c14e:	fba1 2402 	umull	r2, r4, r1, r2
 800c152:	b94c      	cbnz	r4, 800c168 <_calloc_r+0x1c>
 800c154:	4611      	mov	r1, r2
 800c156:	9201      	str	r2, [sp, #4]
 800c158:	f7fe f8dc 	bl	800a314 <_malloc_r>
 800c15c:	9a01      	ldr	r2, [sp, #4]
 800c15e:	4605      	mov	r5, r0
 800c160:	b930      	cbnz	r0, 800c170 <_calloc_r+0x24>
 800c162:	4628      	mov	r0, r5
 800c164:	b003      	add	sp, #12
 800c166:	bd30      	pop	{r4, r5, pc}
 800c168:	220c      	movs	r2, #12
 800c16a:	6002      	str	r2, [r0, #0]
 800c16c:	2500      	movs	r5, #0
 800c16e:	e7f8      	b.n	800c162 <_calloc_r+0x16>
 800c170:	4621      	mov	r1, r4
 800c172:	f7fe f85b 	bl	800a22c <memset>
 800c176:	e7f4      	b.n	800c162 <_calloc_r+0x16>

0800c178 <__ssputs_r>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	688e      	ldr	r6, [r1, #8]
 800c17e:	429e      	cmp	r6, r3
 800c180:	4682      	mov	sl, r0
 800c182:	460c      	mov	r4, r1
 800c184:	4690      	mov	r8, r2
 800c186:	461f      	mov	r7, r3
 800c188:	d838      	bhi.n	800c1fc <__ssputs_r+0x84>
 800c18a:	898a      	ldrh	r2, [r1, #12]
 800c18c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c190:	d032      	beq.n	800c1f8 <__ssputs_r+0x80>
 800c192:	6825      	ldr	r5, [r4, #0]
 800c194:	6909      	ldr	r1, [r1, #16]
 800c196:	eba5 0901 	sub.w	r9, r5, r1
 800c19a:	6965      	ldr	r5, [r4, #20]
 800c19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	444b      	add	r3, r9
 800c1a8:	106d      	asrs	r5, r5, #1
 800c1aa:	429d      	cmp	r5, r3
 800c1ac:	bf38      	it	cc
 800c1ae:	461d      	movcc	r5, r3
 800c1b0:	0553      	lsls	r3, r2, #21
 800c1b2:	d531      	bpl.n	800c218 <__ssputs_r+0xa0>
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7fe f8ad 	bl	800a314 <_malloc_r>
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	b950      	cbnz	r0, 800c1d4 <__ssputs_r+0x5c>
 800c1be:	230c      	movs	r3, #12
 800c1c0:	f8ca 3000 	str.w	r3, [sl]
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d4:	6921      	ldr	r1, [r4, #16]
 800c1d6:	464a      	mov	r2, r9
 800c1d8:	f7fe f81a 	bl	800a210 <memcpy>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	6126      	str	r6, [r4, #16]
 800c1ea:	6165      	str	r5, [r4, #20]
 800c1ec:	444e      	add	r6, r9
 800c1ee:	eba5 0509 	sub.w	r5, r5, r9
 800c1f2:	6026      	str	r6, [r4, #0]
 800c1f4:	60a5      	str	r5, [r4, #8]
 800c1f6:	463e      	mov	r6, r7
 800c1f8:	42be      	cmp	r6, r7
 800c1fa:	d900      	bls.n	800c1fe <__ssputs_r+0x86>
 800c1fc:	463e      	mov	r6, r7
 800c1fe:	6820      	ldr	r0, [r4, #0]
 800c200:	4632      	mov	r2, r6
 800c202:	4641      	mov	r1, r8
 800c204:	f000 f959 	bl	800c4ba <memmove>
 800c208:	68a3      	ldr	r3, [r4, #8]
 800c20a:	1b9b      	subs	r3, r3, r6
 800c20c:	60a3      	str	r3, [r4, #8]
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	4433      	add	r3, r6
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	2000      	movs	r0, #0
 800c216:	e7db      	b.n	800c1d0 <__ssputs_r+0x58>
 800c218:	462a      	mov	r2, r5
 800c21a:	f000 f968 	bl	800c4ee <_realloc_r>
 800c21e:	4606      	mov	r6, r0
 800c220:	2800      	cmp	r0, #0
 800c222:	d1e1      	bne.n	800c1e8 <__ssputs_r+0x70>
 800c224:	6921      	ldr	r1, [r4, #16]
 800c226:	4650      	mov	r0, sl
 800c228:	f7fe f808 	bl	800a23c <_free_r>
 800c22c:	e7c7      	b.n	800c1be <__ssputs_r+0x46>
	...

0800c230 <_svfiprintf_r>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	4698      	mov	r8, r3
 800c236:	898b      	ldrh	r3, [r1, #12]
 800c238:	061b      	lsls	r3, r3, #24
 800c23a:	b09d      	sub	sp, #116	; 0x74
 800c23c:	4607      	mov	r7, r0
 800c23e:	460d      	mov	r5, r1
 800c240:	4614      	mov	r4, r2
 800c242:	d50e      	bpl.n	800c262 <_svfiprintf_r+0x32>
 800c244:	690b      	ldr	r3, [r1, #16]
 800c246:	b963      	cbnz	r3, 800c262 <_svfiprintf_r+0x32>
 800c248:	2140      	movs	r1, #64	; 0x40
 800c24a:	f7fe f863 	bl	800a314 <_malloc_r>
 800c24e:	6028      	str	r0, [r5, #0]
 800c250:	6128      	str	r0, [r5, #16]
 800c252:	b920      	cbnz	r0, 800c25e <_svfiprintf_r+0x2e>
 800c254:	230c      	movs	r3, #12
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	e0d1      	b.n	800c402 <_svfiprintf_r+0x1d2>
 800c25e:	2340      	movs	r3, #64	; 0x40
 800c260:	616b      	str	r3, [r5, #20]
 800c262:	2300      	movs	r3, #0
 800c264:	9309      	str	r3, [sp, #36]	; 0x24
 800c266:	2320      	movs	r3, #32
 800c268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c270:	2330      	movs	r3, #48	; 0x30
 800c272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c41c <_svfiprintf_r+0x1ec>
 800c276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c27a:	f04f 0901 	mov.w	r9, #1
 800c27e:	4623      	mov	r3, r4
 800c280:	469a      	mov	sl, r3
 800c282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c286:	b10a      	cbz	r2, 800c28c <_svfiprintf_r+0x5c>
 800c288:	2a25      	cmp	r2, #37	; 0x25
 800c28a:	d1f9      	bne.n	800c280 <_svfiprintf_r+0x50>
 800c28c:	ebba 0b04 	subs.w	fp, sl, r4
 800c290:	d00b      	beq.n	800c2aa <_svfiprintf_r+0x7a>
 800c292:	465b      	mov	r3, fp
 800c294:	4622      	mov	r2, r4
 800c296:	4629      	mov	r1, r5
 800c298:	4638      	mov	r0, r7
 800c29a:	f7ff ff6d 	bl	800c178 <__ssputs_r>
 800c29e:	3001      	adds	r0, #1
 800c2a0:	f000 80aa 	beq.w	800c3f8 <_svfiprintf_r+0x1c8>
 800c2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2a6:	445a      	add	r2, fp
 800c2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 80a2 	beq.w	800c3f8 <_svfiprintf_r+0x1c8>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2be:	f10a 0a01 	add.w	sl, sl, #1
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	9307      	str	r3, [sp, #28]
 800c2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c2cc:	4654      	mov	r4, sl
 800c2ce:	2205      	movs	r2, #5
 800c2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d4:	4851      	ldr	r0, [pc, #324]	; (800c41c <_svfiprintf_r+0x1ec>)
 800c2d6:	f7f3 ff9b 	bl	8000210 <memchr>
 800c2da:	9a04      	ldr	r2, [sp, #16]
 800c2dc:	b9d8      	cbnz	r0, 800c316 <_svfiprintf_r+0xe6>
 800c2de:	06d0      	lsls	r0, r2, #27
 800c2e0:	bf44      	itt	mi
 800c2e2:	2320      	movmi	r3, #32
 800c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e8:	0711      	lsls	r1, r2, #28
 800c2ea:	bf44      	itt	mi
 800c2ec:	232b      	movmi	r3, #43	; 0x2b
 800c2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f8:	d015      	beq.n	800c326 <_svfiprintf_r+0xf6>
 800c2fa:	9a07      	ldr	r2, [sp, #28]
 800c2fc:	4654      	mov	r4, sl
 800c2fe:	2000      	movs	r0, #0
 800c300:	f04f 0c0a 	mov.w	ip, #10
 800c304:	4621      	mov	r1, r4
 800c306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c30a:	3b30      	subs	r3, #48	; 0x30
 800c30c:	2b09      	cmp	r3, #9
 800c30e:	d94e      	bls.n	800c3ae <_svfiprintf_r+0x17e>
 800c310:	b1b0      	cbz	r0, 800c340 <_svfiprintf_r+0x110>
 800c312:	9207      	str	r2, [sp, #28]
 800c314:	e014      	b.n	800c340 <_svfiprintf_r+0x110>
 800c316:	eba0 0308 	sub.w	r3, r0, r8
 800c31a:	fa09 f303 	lsl.w	r3, r9, r3
 800c31e:	4313      	orrs	r3, r2
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	46a2      	mov	sl, r4
 800c324:	e7d2      	b.n	800c2cc <_svfiprintf_r+0x9c>
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	1d19      	adds	r1, r3, #4
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	9103      	str	r1, [sp, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	bfbb      	ittet	lt
 800c332:	425b      	neglt	r3, r3
 800c334:	f042 0202 	orrlt.w	r2, r2, #2
 800c338:	9307      	strge	r3, [sp, #28]
 800c33a:	9307      	strlt	r3, [sp, #28]
 800c33c:	bfb8      	it	lt
 800c33e:	9204      	strlt	r2, [sp, #16]
 800c340:	7823      	ldrb	r3, [r4, #0]
 800c342:	2b2e      	cmp	r3, #46	; 0x2e
 800c344:	d10c      	bne.n	800c360 <_svfiprintf_r+0x130>
 800c346:	7863      	ldrb	r3, [r4, #1]
 800c348:	2b2a      	cmp	r3, #42	; 0x2a
 800c34a:	d135      	bne.n	800c3b8 <_svfiprintf_r+0x188>
 800c34c:	9b03      	ldr	r3, [sp, #12]
 800c34e:	1d1a      	adds	r2, r3, #4
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	9203      	str	r2, [sp, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	bfb8      	it	lt
 800c358:	f04f 33ff 	movlt.w	r3, #4294967295
 800c35c:	3402      	adds	r4, #2
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c42c <_svfiprintf_r+0x1fc>
 800c364:	7821      	ldrb	r1, [r4, #0]
 800c366:	2203      	movs	r2, #3
 800c368:	4650      	mov	r0, sl
 800c36a:	f7f3 ff51 	bl	8000210 <memchr>
 800c36e:	b140      	cbz	r0, 800c382 <_svfiprintf_r+0x152>
 800c370:	2340      	movs	r3, #64	; 0x40
 800c372:	eba0 000a 	sub.w	r0, r0, sl
 800c376:	fa03 f000 	lsl.w	r0, r3, r0
 800c37a:	9b04      	ldr	r3, [sp, #16]
 800c37c:	4303      	orrs	r3, r0
 800c37e:	3401      	adds	r4, #1
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c386:	4826      	ldr	r0, [pc, #152]	; (800c420 <_svfiprintf_r+0x1f0>)
 800c388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c38c:	2206      	movs	r2, #6
 800c38e:	f7f3 ff3f 	bl	8000210 <memchr>
 800c392:	2800      	cmp	r0, #0
 800c394:	d038      	beq.n	800c408 <_svfiprintf_r+0x1d8>
 800c396:	4b23      	ldr	r3, [pc, #140]	; (800c424 <_svfiprintf_r+0x1f4>)
 800c398:	bb1b      	cbnz	r3, 800c3e2 <_svfiprintf_r+0x1b2>
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	3307      	adds	r3, #7
 800c39e:	f023 0307 	bic.w	r3, r3, #7
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a8:	4433      	add	r3, r6
 800c3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ac:	e767      	b.n	800c27e <_svfiprintf_r+0x4e>
 800c3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	e7a5      	b.n	800c304 <_svfiprintf_r+0xd4>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	3401      	adds	r4, #1
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f04f 0c0a 	mov.w	ip, #10
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ca:	3a30      	subs	r2, #48	; 0x30
 800c3cc:	2a09      	cmp	r2, #9
 800c3ce:	d903      	bls.n	800c3d8 <_svfiprintf_r+0x1a8>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0c5      	beq.n	800c360 <_svfiprintf_r+0x130>
 800c3d4:	9105      	str	r1, [sp, #20]
 800c3d6:	e7c3      	b.n	800c360 <_svfiprintf_r+0x130>
 800c3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3dc:	4604      	mov	r4, r0
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e7f0      	b.n	800c3c4 <_svfiprintf_r+0x194>
 800c3e2:	ab03      	add	r3, sp, #12
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	462a      	mov	r2, r5
 800c3e8:	4b0f      	ldr	r3, [pc, #60]	; (800c428 <_svfiprintf_r+0x1f8>)
 800c3ea:	a904      	add	r1, sp, #16
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7fe f8a5 	bl	800a53c <_printf_float>
 800c3f2:	1c42      	adds	r2, r0, #1
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	d1d6      	bne.n	800c3a6 <_svfiprintf_r+0x176>
 800c3f8:	89ab      	ldrh	r3, [r5, #12]
 800c3fa:	065b      	lsls	r3, r3, #25
 800c3fc:	f53f af2c 	bmi.w	800c258 <_svfiprintf_r+0x28>
 800c400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c402:	b01d      	add	sp, #116	; 0x74
 800c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c408:	ab03      	add	r3, sp, #12
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	462a      	mov	r2, r5
 800c40e:	4b06      	ldr	r3, [pc, #24]	; (800c428 <_svfiprintf_r+0x1f8>)
 800c410:	a904      	add	r1, sp, #16
 800c412:	4638      	mov	r0, r7
 800c414:	f7fe fb36 	bl	800aa84 <_printf_i>
 800c418:	e7eb      	b.n	800c3f2 <_svfiprintf_r+0x1c2>
 800c41a:	bf00      	nop
 800c41c:	0800f81c 	.word	0x0800f81c
 800c420:	0800f826 	.word	0x0800f826
 800c424:	0800a53d 	.word	0x0800a53d
 800c428:	0800c179 	.word	0x0800c179
 800c42c:	0800f822 	.word	0x0800f822

0800c430 <__assert_func>:
 800c430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c432:	4614      	mov	r4, r2
 800c434:	461a      	mov	r2, r3
 800c436:	4b09      	ldr	r3, [pc, #36]	; (800c45c <__assert_func+0x2c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4605      	mov	r5, r0
 800c43c:	68d8      	ldr	r0, [r3, #12]
 800c43e:	b14c      	cbz	r4, 800c454 <__assert_func+0x24>
 800c440:	4b07      	ldr	r3, [pc, #28]	; (800c460 <__assert_func+0x30>)
 800c442:	9100      	str	r1, [sp, #0]
 800c444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c448:	4906      	ldr	r1, [pc, #24]	; (800c464 <__assert_func+0x34>)
 800c44a:	462b      	mov	r3, r5
 800c44c:	f000 f80e 	bl	800c46c <fiprintf>
 800c450:	f000 faa4 	bl	800c99c <abort>
 800c454:	4b04      	ldr	r3, [pc, #16]	; (800c468 <__assert_func+0x38>)
 800c456:	461c      	mov	r4, r3
 800c458:	e7f3      	b.n	800c442 <__assert_func+0x12>
 800c45a:	bf00      	nop
 800c45c:	20000028 	.word	0x20000028
 800c460:	0800f82d 	.word	0x0800f82d
 800c464:	0800f83a 	.word	0x0800f83a
 800c468:	0800f868 	.word	0x0800f868

0800c46c <fiprintf>:
 800c46c:	b40e      	push	{r1, r2, r3}
 800c46e:	b503      	push	{r0, r1, lr}
 800c470:	4601      	mov	r1, r0
 800c472:	ab03      	add	r3, sp, #12
 800c474:	4805      	ldr	r0, [pc, #20]	; (800c48c <fiprintf+0x20>)
 800c476:	f853 2b04 	ldr.w	r2, [r3], #4
 800c47a:	6800      	ldr	r0, [r0, #0]
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	f000 f88f 	bl	800c5a0 <_vfiprintf_r>
 800c482:	b002      	add	sp, #8
 800c484:	f85d eb04 	ldr.w	lr, [sp], #4
 800c488:	b003      	add	sp, #12
 800c48a:	4770      	bx	lr
 800c48c:	20000028 	.word	0x20000028

0800c490 <__retarget_lock_init_recursive>:
 800c490:	4770      	bx	lr

0800c492 <__retarget_lock_acquire_recursive>:
 800c492:	4770      	bx	lr

0800c494 <__retarget_lock_release_recursive>:
 800c494:	4770      	bx	lr

0800c496 <__ascii_mbtowc>:
 800c496:	b082      	sub	sp, #8
 800c498:	b901      	cbnz	r1, 800c49c <__ascii_mbtowc+0x6>
 800c49a:	a901      	add	r1, sp, #4
 800c49c:	b142      	cbz	r2, 800c4b0 <__ascii_mbtowc+0x1a>
 800c49e:	b14b      	cbz	r3, 800c4b4 <__ascii_mbtowc+0x1e>
 800c4a0:	7813      	ldrb	r3, [r2, #0]
 800c4a2:	600b      	str	r3, [r1, #0]
 800c4a4:	7812      	ldrb	r2, [r2, #0]
 800c4a6:	1e10      	subs	r0, r2, #0
 800c4a8:	bf18      	it	ne
 800c4aa:	2001      	movne	r0, #1
 800c4ac:	b002      	add	sp, #8
 800c4ae:	4770      	bx	lr
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	e7fb      	b.n	800c4ac <__ascii_mbtowc+0x16>
 800c4b4:	f06f 0001 	mvn.w	r0, #1
 800c4b8:	e7f8      	b.n	800c4ac <__ascii_mbtowc+0x16>

0800c4ba <memmove>:
 800c4ba:	4288      	cmp	r0, r1
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	eb01 0402 	add.w	r4, r1, r2
 800c4c2:	d902      	bls.n	800c4ca <memmove+0x10>
 800c4c4:	4284      	cmp	r4, r0
 800c4c6:	4623      	mov	r3, r4
 800c4c8:	d807      	bhi.n	800c4da <memmove+0x20>
 800c4ca:	1e43      	subs	r3, r0, #1
 800c4cc:	42a1      	cmp	r1, r4
 800c4ce:	d008      	beq.n	800c4e2 <memmove+0x28>
 800c4d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4d8:	e7f8      	b.n	800c4cc <memmove+0x12>
 800c4da:	4402      	add	r2, r0
 800c4dc:	4601      	mov	r1, r0
 800c4de:	428a      	cmp	r2, r1
 800c4e0:	d100      	bne.n	800c4e4 <memmove+0x2a>
 800c4e2:	bd10      	pop	{r4, pc}
 800c4e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4ec:	e7f7      	b.n	800c4de <memmove+0x24>

0800c4ee <_realloc_r>:
 800c4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f2:	4680      	mov	r8, r0
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	460e      	mov	r6, r1
 800c4f8:	b921      	cbnz	r1, 800c504 <_realloc_r+0x16>
 800c4fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fe:	4611      	mov	r1, r2
 800c500:	f7fd bf08 	b.w	800a314 <_malloc_r>
 800c504:	b92a      	cbnz	r2, 800c512 <_realloc_r+0x24>
 800c506:	f7fd fe99 	bl	800a23c <_free_r>
 800c50a:	4625      	mov	r5, r4
 800c50c:	4628      	mov	r0, r5
 800c50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c512:	f000 fc67 	bl	800cde4 <_malloc_usable_size_r>
 800c516:	4284      	cmp	r4, r0
 800c518:	4607      	mov	r7, r0
 800c51a:	d802      	bhi.n	800c522 <_realloc_r+0x34>
 800c51c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c520:	d812      	bhi.n	800c548 <_realloc_r+0x5a>
 800c522:	4621      	mov	r1, r4
 800c524:	4640      	mov	r0, r8
 800c526:	f7fd fef5 	bl	800a314 <_malloc_r>
 800c52a:	4605      	mov	r5, r0
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d0ed      	beq.n	800c50c <_realloc_r+0x1e>
 800c530:	42bc      	cmp	r4, r7
 800c532:	4622      	mov	r2, r4
 800c534:	4631      	mov	r1, r6
 800c536:	bf28      	it	cs
 800c538:	463a      	movcs	r2, r7
 800c53a:	f7fd fe69 	bl	800a210 <memcpy>
 800c53e:	4631      	mov	r1, r6
 800c540:	4640      	mov	r0, r8
 800c542:	f7fd fe7b 	bl	800a23c <_free_r>
 800c546:	e7e1      	b.n	800c50c <_realloc_r+0x1e>
 800c548:	4635      	mov	r5, r6
 800c54a:	e7df      	b.n	800c50c <_realloc_r+0x1e>

0800c54c <__sfputc_r>:
 800c54c:	6893      	ldr	r3, [r2, #8]
 800c54e:	3b01      	subs	r3, #1
 800c550:	2b00      	cmp	r3, #0
 800c552:	b410      	push	{r4}
 800c554:	6093      	str	r3, [r2, #8]
 800c556:	da08      	bge.n	800c56a <__sfputc_r+0x1e>
 800c558:	6994      	ldr	r4, [r2, #24]
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	db01      	blt.n	800c562 <__sfputc_r+0x16>
 800c55e:	290a      	cmp	r1, #10
 800c560:	d103      	bne.n	800c56a <__sfputc_r+0x1e>
 800c562:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c566:	f000 b94b 	b.w	800c800 <__swbuf_r>
 800c56a:	6813      	ldr	r3, [r2, #0]
 800c56c:	1c58      	adds	r0, r3, #1
 800c56e:	6010      	str	r0, [r2, #0]
 800c570:	7019      	strb	r1, [r3, #0]
 800c572:	4608      	mov	r0, r1
 800c574:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <__sfputs_r>:
 800c57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57c:	4606      	mov	r6, r0
 800c57e:	460f      	mov	r7, r1
 800c580:	4614      	mov	r4, r2
 800c582:	18d5      	adds	r5, r2, r3
 800c584:	42ac      	cmp	r4, r5
 800c586:	d101      	bne.n	800c58c <__sfputs_r+0x12>
 800c588:	2000      	movs	r0, #0
 800c58a:	e007      	b.n	800c59c <__sfputs_r+0x22>
 800c58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c590:	463a      	mov	r2, r7
 800c592:	4630      	mov	r0, r6
 800c594:	f7ff ffda 	bl	800c54c <__sfputc_r>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	d1f3      	bne.n	800c584 <__sfputs_r+0xa>
 800c59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5a0 <_vfiprintf_r>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	460d      	mov	r5, r1
 800c5a6:	b09d      	sub	sp, #116	; 0x74
 800c5a8:	4614      	mov	r4, r2
 800c5aa:	4698      	mov	r8, r3
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	b118      	cbz	r0, 800c5b8 <_vfiprintf_r+0x18>
 800c5b0:	6983      	ldr	r3, [r0, #24]
 800c5b2:	b90b      	cbnz	r3, 800c5b8 <_vfiprintf_r+0x18>
 800c5b4:	f000 fb14 	bl	800cbe0 <__sinit>
 800c5b8:	4b89      	ldr	r3, [pc, #548]	; (800c7e0 <_vfiprintf_r+0x240>)
 800c5ba:	429d      	cmp	r5, r3
 800c5bc:	d11b      	bne.n	800c5f6 <_vfiprintf_r+0x56>
 800c5be:	6875      	ldr	r5, [r6, #4]
 800c5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5c2:	07d9      	lsls	r1, r3, #31
 800c5c4:	d405      	bmi.n	800c5d2 <_vfiprintf_r+0x32>
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	059a      	lsls	r2, r3, #22
 800c5ca:	d402      	bmi.n	800c5d2 <_vfiprintf_r+0x32>
 800c5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ce:	f7ff ff60 	bl	800c492 <__retarget_lock_acquire_recursive>
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	071b      	lsls	r3, r3, #28
 800c5d6:	d501      	bpl.n	800c5dc <_vfiprintf_r+0x3c>
 800c5d8:	692b      	ldr	r3, [r5, #16]
 800c5da:	b9eb      	cbnz	r3, 800c618 <_vfiprintf_r+0x78>
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f000 f96e 	bl	800c8c0 <__swsetup_r>
 800c5e4:	b1c0      	cbz	r0, 800c618 <_vfiprintf_r+0x78>
 800c5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5e8:	07dc      	lsls	r4, r3, #31
 800c5ea:	d50e      	bpl.n	800c60a <_vfiprintf_r+0x6a>
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	b01d      	add	sp, #116	; 0x74
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	4b7b      	ldr	r3, [pc, #492]	; (800c7e4 <_vfiprintf_r+0x244>)
 800c5f8:	429d      	cmp	r5, r3
 800c5fa:	d101      	bne.n	800c600 <_vfiprintf_r+0x60>
 800c5fc:	68b5      	ldr	r5, [r6, #8]
 800c5fe:	e7df      	b.n	800c5c0 <_vfiprintf_r+0x20>
 800c600:	4b79      	ldr	r3, [pc, #484]	; (800c7e8 <_vfiprintf_r+0x248>)
 800c602:	429d      	cmp	r5, r3
 800c604:	bf08      	it	eq
 800c606:	68f5      	ldreq	r5, [r6, #12]
 800c608:	e7da      	b.n	800c5c0 <_vfiprintf_r+0x20>
 800c60a:	89ab      	ldrh	r3, [r5, #12]
 800c60c:	0598      	lsls	r0, r3, #22
 800c60e:	d4ed      	bmi.n	800c5ec <_vfiprintf_r+0x4c>
 800c610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c612:	f7ff ff3f 	bl	800c494 <__retarget_lock_release_recursive>
 800c616:	e7e9      	b.n	800c5ec <_vfiprintf_r+0x4c>
 800c618:	2300      	movs	r3, #0
 800c61a:	9309      	str	r3, [sp, #36]	; 0x24
 800c61c:	2320      	movs	r3, #32
 800c61e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c622:	f8cd 800c 	str.w	r8, [sp, #12]
 800c626:	2330      	movs	r3, #48	; 0x30
 800c628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7ec <_vfiprintf_r+0x24c>
 800c62c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c630:	f04f 0901 	mov.w	r9, #1
 800c634:	4623      	mov	r3, r4
 800c636:	469a      	mov	sl, r3
 800c638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c63c:	b10a      	cbz	r2, 800c642 <_vfiprintf_r+0xa2>
 800c63e:	2a25      	cmp	r2, #37	; 0x25
 800c640:	d1f9      	bne.n	800c636 <_vfiprintf_r+0x96>
 800c642:	ebba 0b04 	subs.w	fp, sl, r4
 800c646:	d00b      	beq.n	800c660 <_vfiprintf_r+0xc0>
 800c648:	465b      	mov	r3, fp
 800c64a:	4622      	mov	r2, r4
 800c64c:	4629      	mov	r1, r5
 800c64e:	4630      	mov	r0, r6
 800c650:	f7ff ff93 	bl	800c57a <__sfputs_r>
 800c654:	3001      	adds	r0, #1
 800c656:	f000 80aa 	beq.w	800c7ae <_vfiprintf_r+0x20e>
 800c65a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c65c:	445a      	add	r2, fp
 800c65e:	9209      	str	r2, [sp, #36]	; 0x24
 800c660:	f89a 3000 	ldrb.w	r3, [sl]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80a2 	beq.w	800c7ae <_vfiprintf_r+0x20e>
 800c66a:	2300      	movs	r3, #0
 800c66c:	f04f 32ff 	mov.w	r2, #4294967295
 800c670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c674:	f10a 0a01 	add.w	sl, sl, #1
 800c678:	9304      	str	r3, [sp, #16]
 800c67a:	9307      	str	r3, [sp, #28]
 800c67c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c680:	931a      	str	r3, [sp, #104]	; 0x68
 800c682:	4654      	mov	r4, sl
 800c684:	2205      	movs	r2, #5
 800c686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68a:	4858      	ldr	r0, [pc, #352]	; (800c7ec <_vfiprintf_r+0x24c>)
 800c68c:	f7f3 fdc0 	bl	8000210 <memchr>
 800c690:	9a04      	ldr	r2, [sp, #16]
 800c692:	b9d8      	cbnz	r0, 800c6cc <_vfiprintf_r+0x12c>
 800c694:	06d1      	lsls	r1, r2, #27
 800c696:	bf44      	itt	mi
 800c698:	2320      	movmi	r3, #32
 800c69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69e:	0713      	lsls	r3, r2, #28
 800c6a0:	bf44      	itt	mi
 800c6a2:	232b      	movmi	r3, #43	; 0x2b
 800c6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ac:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ae:	d015      	beq.n	800c6dc <_vfiprintf_r+0x13c>
 800c6b0:	9a07      	ldr	r2, [sp, #28]
 800c6b2:	4654      	mov	r4, sl
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	f04f 0c0a 	mov.w	ip, #10
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6c0:	3b30      	subs	r3, #48	; 0x30
 800c6c2:	2b09      	cmp	r3, #9
 800c6c4:	d94e      	bls.n	800c764 <_vfiprintf_r+0x1c4>
 800c6c6:	b1b0      	cbz	r0, 800c6f6 <_vfiprintf_r+0x156>
 800c6c8:	9207      	str	r2, [sp, #28]
 800c6ca:	e014      	b.n	800c6f6 <_vfiprintf_r+0x156>
 800c6cc:	eba0 0308 	sub.w	r3, r0, r8
 800c6d0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	9304      	str	r3, [sp, #16]
 800c6d8:	46a2      	mov	sl, r4
 800c6da:	e7d2      	b.n	800c682 <_vfiprintf_r+0xe2>
 800c6dc:	9b03      	ldr	r3, [sp, #12]
 800c6de:	1d19      	adds	r1, r3, #4
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	9103      	str	r1, [sp, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	bfbb      	ittet	lt
 800c6e8:	425b      	neglt	r3, r3
 800c6ea:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ee:	9307      	strge	r3, [sp, #28]
 800c6f0:	9307      	strlt	r3, [sp, #28]
 800c6f2:	bfb8      	it	lt
 800c6f4:	9204      	strlt	r2, [sp, #16]
 800c6f6:	7823      	ldrb	r3, [r4, #0]
 800c6f8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6fa:	d10c      	bne.n	800c716 <_vfiprintf_r+0x176>
 800c6fc:	7863      	ldrb	r3, [r4, #1]
 800c6fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c700:	d135      	bne.n	800c76e <_vfiprintf_r+0x1ce>
 800c702:	9b03      	ldr	r3, [sp, #12]
 800c704:	1d1a      	adds	r2, r3, #4
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	9203      	str	r2, [sp, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	bfb8      	it	lt
 800c70e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c712:	3402      	adds	r4, #2
 800c714:	9305      	str	r3, [sp, #20]
 800c716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7fc <_vfiprintf_r+0x25c>
 800c71a:	7821      	ldrb	r1, [r4, #0]
 800c71c:	2203      	movs	r2, #3
 800c71e:	4650      	mov	r0, sl
 800c720:	f7f3 fd76 	bl	8000210 <memchr>
 800c724:	b140      	cbz	r0, 800c738 <_vfiprintf_r+0x198>
 800c726:	2340      	movs	r3, #64	; 0x40
 800c728:	eba0 000a 	sub.w	r0, r0, sl
 800c72c:	fa03 f000 	lsl.w	r0, r3, r0
 800c730:	9b04      	ldr	r3, [sp, #16]
 800c732:	4303      	orrs	r3, r0
 800c734:	3401      	adds	r4, #1
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c73c:	482c      	ldr	r0, [pc, #176]	; (800c7f0 <_vfiprintf_r+0x250>)
 800c73e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c742:	2206      	movs	r2, #6
 800c744:	f7f3 fd64 	bl	8000210 <memchr>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d03f      	beq.n	800c7cc <_vfiprintf_r+0x22c>
 800c74c:	4b29      	ldr	r3, [pc, #164]	; (800c7f4 <_vfiprintf_r+0x254>)
 800c74e:	bb1b      	cbnz	r3, 800c798 <_vfiprintf_r+0x1f8>
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	3307      	adds	r3, #7
 800c754:	f023 0307 	bic.w	r3, r3, #7
 800c758:	3308      	adds	r3, #8
 800c75a:	9303      	str	r3, [sp, #12]
 800c75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75e:	443b      	add	r3, r7
 800c760:	9309      	str	r3, [sp, #36]	; 0x24
 800c762:	e767      	b.n	800c634 <_vfiprintf_r+0x94>
 800c764:	fb0c 3202 	mla	r2, ip, r2, r3
 800c768:	460c      	mov	r4, r1
 800c76a:	2001      	movs	r0, #1
 800c76c:	e7a5      	b.n	800c6ba <_vfiprintf_r+0x11a>
 800c76e:	2300      	movs	r3, #0
 800c770:	3401      	adds	r4, #1
 800c772:	9305      	str	r3, [sp, #20]
 800c774:	4619      	mov	r1, r3
 800c776:	f04f 0c0a 	mov.w	ip, #10
 800c77a:	4620      	mov	r0, r4
 800c77c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c780:	3a30      	subs	r2, #48	; 0x30
 800c782:	2a09      	cmp	r2, #9
 800c784:	d903      	bls.n	800c78e <_vfiprintf_r+0x1ee>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0c5      	beq.n	800c716 <_vfiprintf_r+0x176>
 800c78a:	9105      	str	r1, [sp, #20]
 800c78c:	e7c3      	b.n	800c716 <_vfiprintf_r+0x176>
 800c78e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c792:	4604      	mov	r4, r0
 800c794:	2301      	movs	r3, #1
 800c796:	e7f0      	b.n	800c77a <_vfiprintf_r+0x1da>
 800c798:	ab03      	add	r3, sp, #12
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	462a      	mov	r2, r5
 800c79e:	4b16      	ldr	r3, [pc, #88]	; (800c7f8 <_vfiprintf_r+0x258>)
 800c7a0:	a904      	add	r1, sp, #16
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7fd feca 	bl	800a53c <_printf_float>
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	1c78      	adds	r0, r7, #1
 800c7ac:	d1d6      	bne.n	800c75c <_vfiprintf_r+0x1bc>
 800c7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7b0:	07d9      	lsls	r1, r3, #31
 800c7b2:	d405      	bmi.n	800c7c0 <_vfiprintf_r+0x220>
 800c7b4:	89ab      	ldrh	r3, [r5, #12]
 800c7b6:	059a      	lsls	r2, r3, #22
 800c7b8:	d402      	bmi.n	800c7c0 <_vfiprintf_r+0x220>
 800c7ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7bc:	f7ff fe6a 	bl	800c494 <__retarget_lock_release_recursive>
 800c7c0:	89ab      	ldrh	r3, [r5, #12]
 800c7c2:	065b      	lsls	r3, r3, #25
 800c7c4:	f53f af12 	bmi.w	800c5ec <_vfiprintf_r+0x4c>
 800c7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ca:	e711      	b.n	800c5f0 <_vfiprintf_r+0x50>
 800c7cc:	ab03      	add	r3, sp, #12
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	462a      	mov	r2, r5
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <_vfiprintf_r+0x258>)
 800c7d4:	a904      	add	r1, sp, #16
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f7fe f954 	bl	800aa84 <_printf_i>
 800c7dc:	e7e4      	b.n	800c7a8 <_vfiprintf_r+0x208>
 800c7de:	bf00      	nop
 800c7e0:	0800f994 	.word	0x0800f994
 800c7e4:	0800f9b4 	.word	0x0800f9b4
 800c7e8:	0800f974 	.word	0x0800f974
 800c7ec:	0800f81c 	.word	0x0800f81c
 800c7f0:	0800f826 	.word	0x0800f826
 800c7f4:	0800a53d 	.word	0x0800a53d
 800c7f8:	0800c57b 	.word	0x0800c57b
 800c7fc:	0800f822 	.word	0x0800f822

0800c800 <__swbuf_r>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	460e      	mov	r6, r1
 800c804:	4614      	mov	r4, r2
 800c806:	4605      	mov	r5, r0
 800c808:	b118      	cbz	r0, 800c812 <__swbuf_r+0x12>
 800c80a:	6983      	ldr	r3, [r0, #24]
 800c80c:	b90b      	cbnz	r3, 800c812 <__swbuf_r+0x12>
 800c80e:	f000 f9e7 	bl	800cbe0 <__sinit>
 800c812:	4b21      	ldr	r3, [pc, #132]	; (800c898 <__swbuf_r+0x98>)
 800c814:	429c      	cmp	r4, r3
 800c816:	d12b      	bne.n	800c870 <__swbuf_r+0x70>
 800c818:	686c      	ldr	r4, [r5, #4]
 800c81a:	69a3      	ldr	r3, [r4, #24]
 800c81c:	60a3      	str	r3, [r4, #8]
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	071a      	lsls	r2, r3, #28
 800c822:	d52f      	bpl.n	800c884 <__swbuf_r+0x84>
 800c824:	6923      	ldr	r3, [r4, #16]
 800c826:	b36b      	cbz	r3, 800c884 <__swbuf_r+0x84>
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	6820      	ldr	r0, [r4, #0]
 800c82c:	1ac0      	subs	r0, r0, r3
 800c82e:	6963      	ldr	r3, [r4, #20]
 800c830:	b2f6      	uxtb	r6, r6
 800c832:	4283      	cmp	r3, r0
 800c834:	4637      	mov	r7, r6
 800c836:	dc04      	bgt.n	800c842 <__swbuf_r+0x42>
 800c838:	4621      	mov	r1, r4
 800c83a:	4628      	mov	r0, r5
 800c83c:	f000 f93c 	bl	800cab8 <_fflush_r>
 800c840:	bb30      	cbnz	r0, 800c890 <__swbuf_r+0x90>
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	3b01      	subs	r3, #1
 800c846:	60a3      	str	r3, [r4, #8]
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	6022      	str	r2, [r4, #0]
 800c84e:	701e      	strb	r6, [r3, #0]
 800c850:	6963      	ldr	r3, [r4, #20]
 800c852:	3001      	adds	r0, #1
 800c854:	4283      	cmp	r3, r0
 800c856:	d004      	beq.n	800c862 <__swbuf_r+0x62>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	07db      	lsls	r3, r3, #31
 800c85c:	d506      	bpl.n	800c86c <__swbuf_r+0x6c>
 800c85e:	2e0a      	cmp	r6, #10
 800c860:	d104      	bne.n	800c86c <__swbuf_r+0x6c>
 800c862:	4621      	mov	r1, r4
 800c864:	4628      	mov	r0, r5
 800c866:	f000 f927 	bl	800cab8 <_fflush_r>
 800c86a:	b988      	cbnz	r0, 800c890 <__swbuf_r+0x90>
 800c86c:	4638      	mov	r0, r7
 800c86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c870:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <__swbuf_r+0x9c>)
 800c872:	429c      	cmp	r4, r3
 800c874:	d101      	bne.n	800c87a <__swbuf_r+0x7a>
 800c876:	68ac      	ldr	r4, [r5, #8]
 800c878:	e7cf      	b.n	800c81a <__swbuf_r+0x1a>
 800c87a:	4b09      	ldr	r3, [pc, #36]	; (800c8a0 <__swbuf_r+0xa0>)
 800c87c:	429c      	cmp	r4, r3
 800c87e:	bf08      	it	eq
 800c880:	68ec      	ldreq	r4, [r5, #12]
 800c882:	e7ca      	b.n	800c81a <__swbuf_r+0x1a>
 800c884:	4621      	mov	r1, r4
 800c886:	4628      	mov	r0, r5
 800c888:	f000 f81a 	bl	800c8c0 <__swsetup_r>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0cb      	beq.n	800c828 <__swbuf_r+0x28>
 800c890:	f04f 37ff 	mov.w	r7, #4294967295
 800c894:	e7ea      	b.n	800c86c <__swbuf_r+0x6c>
 800c896:	bf00      	nop
 800c898:	0800f994 	.word	0x0800f994
 800c89c:	0800f9b4 	.word	0x0800f9b4
 800c8a0:	0800f974 	.word	0x0800f974

0800c8a4 <__ascii_wctomb>:
 800c8a4:	b149      	cbz	r1, 800c8ba <__ascii_wctomb+0x16>
 800c8a6:	2aff      	cmp	r2, #255	; 0xff
 800c8a8:	bf85      	ittet	hi
 800c8aa:	238a      	movhi	r3, #138	; 0x8a
 800c8ac:	6003      	strhi	r3, [r0, #0]
 800c8ae:	700a      	strbls	r2, [r1, #0]
 800c8b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8b4:	bf98      	it	ls
 800c8b6:	2001      	movls	r0, #1
 800c8b8:	4770      	bx	lr
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	4770      	bx	lr
	...

0800c8c0 <__swsetup_r>:
 800c8c0:	4b32      	ldr	r3, [pc, #200]	; (800c98c <__swsetup_r+0xcc>)
 800c8c2:	b570      	push	{r4, r5, r6, lr}
 800c8c4:	681d      	ldr	r5, [r3, #0]
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	b125      	cbz	r5, 800c8d6 <__swsetup_r+0x16>
 800c8cc:	69ab      	ldr	r3, [r5, #24]
 800c8ce:	b913      	cbnz	r3, 800c8d6 <__swsetup_r+0x16>
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	f000 f985 	bl	800cbe0 <__sinit>
 800c8d6:	4b2e      	ldr	r3, [pc, #184]	; (800c990 <__swsetup_r+0xd0>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	d10f      	bne.n	800c8fc <__swsetup_r+0x3c>
 800c8dc:	686c      	ldr	r4, [r5, #4]
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8e4:	0719      	lsls	r1, r3, #28
 800c8e6:	d42c      	bmi.n	800c942 <__swsetup_r+0x82>
 800c8e8:	06dd      	lsls	r5, r3, #27
 800c8ea:	d411      	bmi.n	800c910 <__swsetup_r+0x50>
 800c8ec:	2309      	movs	r3, #9
 800c8ee:	6033      	str	r3, [r6, #0]
 800c8f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8f4:	81a3      	strh	r3, [r4, #12]
 800c8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fa:	e03e      	b.n	800c97a <__swsetup_r+0xba>
 800c8fc:	4b25      	ldr	r3, [pc, #148]	; (800c994 <__swsetup_r+0xd4>)
 800c8fe:	429c      	cmp	r4, r3
 800c900:	d101      	bne.n	800c906 <__swsetup_r+0x46>
 800c902:	68ac      	ldr	r4, [r5, #8]
 800c904:	e7eb      	b.n	800c8de <__swsetup_r+0x1e>
 800c906:	4b24      	ldr	r3, [pc, #144]	; (800c998 <__swsetup_r+0xd8>)
 800c908:	429c      	cmp	r4, r3
 800c90a:	bf08      	it	eq
 800c90c:	68ec      	ldreq	r4, [r5, #12]
 800c90e:	e7e6      	b.n	800c8de <__swsetup_r+0x1e>
 800c910:	0758      	lsls	r0, r3, #29
 800c912:	d512      	bpl.n	800c93a <__swsetup_r+0x7a>
 800c914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c916:	b141      	cbz	r1, 800c92a <__swsetup_r+0x6a>
 800c918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c91c:	4299      	cmp	r1, r3
 800c91e:	d002      	beq.n	800c926 <__swsetup_r+0x66>
 800c920:	4630      	mov	r0, r6
 800c922:	f7fd fc8b 	bl	800a23c <_free_r>
 800c926:	2300      	movs	r3, #0
 800c928:	6363      	str	r3, [r4, #52]	; 0x34
 800c92a:	89a3      	ldrh	r3, [r4, #12]
 800c92c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c930:	81a3      	strh	r3, [r4, #12]
 800c932:	2300      	movs	r3, #0
 800c934:	6063      	str	r3, [r4, #4]
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	89a3      	ldrh	r3, [r4, #12]
 800c93c:	f043 0308 	orr.w	r3, r3, #8
 800c940:	81a3      	strh	r3, [r4, #12]
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	b94b      	cbnz	r3, 800c95a <__swsetup_r+0x9a>
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c94c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c950:	d003      	beq.n	800c95a <__swsetup_r+0x9a>
 800c952:	4621      	mov	r1, r4
 800c954:	4630      	mov	r0, r6
 800c956:	f000 fa05 	bl	800cd64 <__smakebuf_r>
 800c95a:	89a0      	ldrh	r0, [r4, #12]
 800c95c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c960:	f010 0301 	ands.w	r3, r0, #1
 800c964:	d00a      	beq.n	800c97c <__swsetup_r+0xbc>
 800c966:	2300      	movs	r3, #0
 800c968:	60a3      	str	r3, [r4, #8]
 800c96a:	6963      	ldr	r3, [r4, #20]
 800c96c:	425b      	negs	r3, r3
 800c96e:	61a3      	str	r3, [r4, #24]
 800c970:	6923      	ldr	r3, [r4, #16]
 800c972:	b943      	cbnz	r3, 800c986 <__swsetup_r+0xc6>
 800c974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c978:	d1ba      	bne.n	800c8f0 <__swsetup_r+0x30>
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	0781      	lsls	r1, r0, #30
 800c97e:	bf58      	it	pl
 800c980:	6963      	ldrpl	r3, [r4, #20]
 800c982:	60a3      	str	r3, [r4, #8]
 800c984:	e7f4      	b.n	800c970 <__swsetup_r+0xb0>
 800c986:	2000      	movs	r0, #0
 800c988:	e7f7      	b.n	800c97a <__swsetup_r+0xba>
 800c98a:	bf00      	nop
 800c98c:	20000028 	.word	0x20000028
 800c990:	0800f994 	.word	0x0800f994
 800c994:	0800f9b4 	.word	0x0800f9b4
 800c998:	0800f974 	.word	0x0800f974

0800c99c <abort>:
 800c99c:	b508      	push	{r3, lr}
 800c99e:	2006      	movs	r0, #6
 800c9a0:	f000 fa50 	bl	800ce44 <raise>
 800c9a4:	2001      	movs	r0, #1
 800c9a6:	f7f6 f989 	bl	8002cbc <_exit>
	...

0800c9ac <__sflush_r>:
 800c9ac:	898a      	ldrh	r2, [r1, #12]
 800c9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	0710      	lsls	r0, r2, #28
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	d458      	bmi.n	800ca6c <__sflush_r+0xc0>
 800c9ba:	684b      	ldr	r3, [r1, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	dc05      	bgt.n	800c9cc <__sflush_r+0x20>
 800c9c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dc02      	bgt.n	800c9cc <__sflush_r+0x20>
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	d0f9      	beq.n	800c9c6 <__sflush_r+0x1a>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9d8:	682f      	ldr	r7, [r5, #0]
 800c9da:	602b      	str	r3, [r5, #0]
 800c9dc:	d032      	beq.n	800ca44 <__sflush_r+0x98>
 800c9de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	075a      	lsls	r2, r3, #29
 800c9e4:	d505      	bpl.n	800c9f2 <__sflush_r+0x46>
 800c9e6:	6863      	ldr	r3, [r4, #4]
 800c9e8:	1ac0      	subs	r0, r0, r3
 800c9ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9ec:	b10b      	cbz	r3, 800c9f2 <__sflush_r+0x46>
 800c9ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9f0:	1ac0      	subs	r0, r0, r3
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9f8:	6a21      	ldr	r1, [r4, #32]
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	47b0      	blx	r6
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	d106      	bne.n	800ca12 <__sflush_r+0x66>
 800ca04:	6829      	ldr	r1, [r5, #0]
 800ca06:	291d      	cmp	r1, #29
 800ca08:	d82c      	bhi.n	800ca64 <__sflush_r+0xb8>
 800ca0a:	4a2a      	ldr	r2, [pc, #168]	; (800cab4 <__sflush_r+0x108>)
 800ca0c:	40ca      	lsrs	r2, r1
 800ca0e:	07d6      	lsls	r6, r2, #31
 800ca10:	d528      	bpl.n	800ca64 <__sflush_r+0xb8>
 800ca12:	2200      	movs	r2, #0
 800ca14:	6062      	str	r2, [r4, #4]
 800ca16:	04d9      	lsls	r1, r3, #19
 800ca18:	6922      	ldr	r2, [r4, #16]
 800ca1a:	6022      	str	r2, [r4, #0]
 800ca1c:	d504      	bpl.n	800ca28 <__sflush_r+0x7c>
 800ca1e:	1c42      	adds	r2, r0, #1
 800ca20:	d101      	bne.n	800ca26 <__sflush_r+0x7a>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	b903      	cbnz	r3, 800ca28 <__sflush_r+0x7c>
 800ca26:	6560      	str	r0, [r4, #84]	; 0x54
 800ca28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca2a:	602f      	str	r7, [r5, #0]
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d0ca      	beq.n	800c9c6 <__sflush_r+0x1a>
 800ca30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca34:	4299      	cmp	r1, r3
 800ca36:	d002      	beq.n	800ca3e <__sflush_r+0x92>
 800ca38:	4628      	mov	r0, r5
 800ca3a:	f7fd fbff 	bl	800a23c <_free_r>
 800ca3e:	2000      	movs	r0, #0
 800ca40:	6360      	str	r0, [r4, #52]	; 0x34
 800ca42:	e7c1      	b.n	800c9c8 <__sflush_r+0x1c>
 800ca44:	6a21      	ldr	r1, [r4, #32]
 800ca46:	2301      	movs	r3, #1
 800ca48:	4628      	mov	r0, r5
 800ca4a:	47b0      	blx	r6
 800ca4c:	1c41      	adds	r1, r0, #1
 800ca4e:	d1c7      	bne.n	800c9e0 <__sflush_r+0x34>
 800ca50:	682b      	ldr	r3, [r5, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d0c4      	beq.n	800c9e0 <__sflush_r+0x34>
 800ca56:	2b1d      	cmp	r3, #29
 800ca58:	d001      	beq.n	800ca5e <__sflush_r+0xb2>
 800ca5a:	2b16      	cmp	r3, #22
 800ca5c:	d101      	bne.n	800ca62 <__sflush_r+0xb6>
 800ca5e:	602f      	str	r7, [r5, #0]
 800ca60:	e7b1      	b.n	800c9c6 <__sflush_r+0x1a>
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca68:	81a3      	strh	r3, [r4, #12]
 800ca6a:	e7ad      	b.n	800c9c8 <__sflush_r+0x1c>
 800ca6c:	690f      	ldr	r7, [r1, #16]
 800ca6e:	2f00      	cmp	r7, #0
 800ca70:	d0a9      	beq.n	800c9c6 <__sflush_r+0x1a>
 800ca72:	0793      	lsls	r3, r2, #30
 800ca74:	680e      	ldr	r6, [r1, #0]
 800ca76:	bf08      	it	eq
 800ca78:	694b      	ldreq	r3, [r1, #20]
 800ca7a:	600f      	str	r7, [r1, #0]
 800ca7c:	bf18      	it	ne
 800ca7e:	2300      	movne	r3, #0
 800ca80:	eba6 0807 	sub.w	r8, r6, r7
 800ca84:	608b      	str	r3, [r1, #8]
 800ca86:	f1b8 0f00 	cmp.w	r8, #0
 800ca8a:	dd9c      	ble.n	800c9c6 <__sflush_r+0x1a>
 800ca8c:	6a21      	ldr	r1, [r4, #32]
 800ca8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca90:	4643      	mov	r3, r8
 800ca92:	463a      	mov	r2, r7
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b0      	blx	r6
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	dc06      	bgt.n	800caaa <__sflush_r+0xfe>
 800ca9c:	89a3      	ldrh	r3, [r4, #12]
 800ca9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caa2:	81a3      	strh	r3, [r4, #12]
 800caa4:	f04f 30ff 	mov.w	r0, #4294967295
 800caa8:	e78e      	b.n	800c9c8 <__sflush_r+0x1c>
 800caaa:	4407      	add	r7, r0
 800caac:	eba8 0800 	sub.w	r8, r8, r0
 800cab0:	e7e9      	b.n	800ca86 <__sflush_r+0xda>
 800cab2:	bf00      	nop
 800cab4:	20400001 	.word	0x20400001

0800cab8 <_fflush_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	690b      	ldr	r3, [r1, #16]
 800cabc:	4605      	mov	r5, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	b913      	cbnz	r3, 800cac8 <_fflush_r+0x10>
 800cac2:	2500      	movs	r5, #0
 800cac4:	4628      	mov	r0, r5
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	b118      	cbz	r0, 800cad2 <_fflush_r+0x1a>
 800caca:	6983      	ldr	r3, [r0, #24]
 800cacc:	b90b      	cbnz	r3, 800cad2 <_fflush_r+0x1a>
 800cace:	f000 f887 	bl	800cbe0 <__sinit>
 800cad2:	4b14      	ldr	r3, [pc, #80]	; (800cb24 <_fflush_r+0x6c>)
 800cad4:	429c      	cmp	r4, r3
 800cad6:	d11b      	bne.n	800cb10 <_fflush_r+0x58>
 800cad8:	686c      	ldr	r4, [r5, #4]
 800cada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0ef      	beq.n	800cac2 <_fflush_r+0xa>
 800cae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cae4:	07d0      	lsls	r0, r2, #31
 800cae6:	d404      	bmi.n	800caf2 <_fflush_r+0x3a>
 800cae8:	0599      	lsls	r1, r3, #22
 800caea:	d402      	bmi.n	800caf2 <_fflush_r+0x3a>
 800caec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caee:	f7ff fcd0 	bl	800c492 <__retarget_lock_acquire_recursive>
 800caf2:	4628      	mov	r0, r5
 800caf4:	4621      	mov	r1, r4
 800caf6:	f7ff ff59 	bl	800c9ac <__sflush_r>
 800cafa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cafc:	07da      	lsls	r2, r3, #31
 800cafe:	4605      	mov	r5, r0
 800cb00:	d4e0      	bmi.n	800cac4 <_fflush_r+0xc>
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	059b      	lsls	r3, r3, #22
 800cb06:	d4dd      	bmi.n	800cac4 <_fflush_r+0xc>
 800cb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb0a:	f7ff fcc3 	bl	800c494 <__retarget_lock_release_recursive>
 800cb0e:	e7d9      	b.n	800cac4 <_fflush_r+0xc>
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <_fflush_r+0x70>)
 800cb12:	429c      	cmp	r4, r3
 800cb14:	d101      	bne.n	800cb1a <_fflush_r+0x62>
 800cb16:	68ac      	ldr	r4, [r5, #8]
 800cb18:	e7df      	b.n	800cada <_fflush_r+0x22>
 800cb1a:	4b04      	ldr	r3, [pc, #16]	; (800cb2c <_fflush_r+0x74>)
 800cb1c:	429c      	cmp	r4, r3
 800cb1e:	bf08      	it	eq
 800cb20:	68ec      	ldreq	r4, [r5, #12]
 800cb22:	e7da      	b.n	800cada <_fflush_r+0x22>
 800cb24:	0800f994 	.word	0x0800f994
 800cb28:	0800f9b4 	.word	0x0800f9b4
 800cb2c:	0800f974 	.word	0x0800f974

0800cb30 <std>:
 800cb30:	2300      	movs	r3, #0
 800cb32:	b510      	push	{r4, lr}
 800cb34:	4604      	mov	r4, r0
 800cb36:	e9c0 3300 	strd	r3, r3, [r0]
 800cb3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb3e:	6083      	str	r3, [r0, #8]
 800cb40:	8181      	strh	r1, [r0, #12]
 800cb42:	6643      	str	r3, [r0, #100]	; 0x64
 800cb44:	81c2      	strh	r2, [r0, #14]
 800cb46:	6183      	str	r3, [r0, #24]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	2208      	movs	r2, #8
 800cb4c:	305c      	adds	r0, #92	; 0x5c
 800cb4e:	f7fd fb6d 	bl	800a22c <memset>
 800cb52:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <std+0x38>)
 800cb54:	6263      	str	r3, [r4, #36]	; 0x24
 800cb56:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <std+0x3c>)
 800cb58:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb5a:	4b05      	ldr	r3, [pc, #20]	; (800cb70 <std+0x40>)
 800cb5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb5e:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <std+0x44>)
 800cb60:	6224      	str	r4, [r4, #32]
 800cb62:	6323      	str	r3, [r4, #48]	; 0x30
 800cb64:	bd10      	pop	{r4, pc}
 800cb66:	bf00      	nop
 800cb68:	0800ce7d 	.word	0x0800ce7d
 800cb6c:	0800ce9f 	.word	0x0800ce9f
 800cb70:	0800ced7 	.word	0x0800ced7
 800cb74:	0800cefb 	.word	0x0800cefb

0800cb78 <_cleanup_r>:
 800cb78:	4901      	ldr	r1, [pc, #4]	; (800cb80 <_cleanup_r+0x8>)
 800cb7a:	f000 b8af 	b.w	800ccdc <_fwalk_reent>
 800cb7e:	bf00      	nop
 800cb80:	0800cab9 	.word	0x0800cab9

0800cb84 <__sfmoreglue>:
 800cb84:	b570      	push	{r4, r5, r6, lr}
 800cb86:	2268      	movs	r2, #104	; 0x68
 800cb88:	1e4d      	subs	r5, r1, #1
 800cb8a:	4355      	muls	r5, r2
 800cb8c:	460e      	mov	r6, r1
 800cb8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb92:	f7fd fbbf 	bl	800a314 <_malloc_r>
 800cb96:	4604      	mov	r4, r0
 800cb98:	b140      	cbz	r0, 800cbac <__sfmoreglue+0x28>
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	e9c0 1600 	strd	r1, r6, [r0]
 800cba0:	300c      	adds	r0, #12
 800cba2:	60a0      	str	r0, [r4, #8]
 800cba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cba8:	f7fd fb40 	bl	800a22c <memset>
 800cbac:	4620      	mov	r0, r4
 800cbae:	bd70      	pop	{r4, r5, r6, pc}

0800cbb0 <__sfp_lock_acquire>:
 800cbb0:	4801      	ldr	r0, [pc, #4]	; (800cbb8 <__sfp_lock_acquire+0x8>)
 800cbb2:	f7ff bc6e 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800cbb6:	bf00      	nop
 800cbb8:	200133c9 	.word	0x200133c9

0800cbbc <__sfp_lock_release>:
 800cbbc:	4801      	ldr	r0, [pc, #4]	; (800cbc4 <__sfp_lock_release+0x8>)
 800cbbe:	f7ff bc69 	b.w	800c494 <__retarget_lock_release_recursive>
 800cbc2:	bf00      	nop
 800cbc4:	200133c9 	.word	0x200133c9

0800cbc8 <__sinit_lock_acquire>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__sinit_lock_acquire+0x8>)
 800cbca:	f7ff bc62 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800cbce:	bf00      	nop
 800cbd0:	200133ca 	.word	0x200133ca

0800cbd4 <__sinit_lock_release>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__sinit_lock_release+0x8>)
 800cbd6:	f7ff bc5d 	b.w	800c494 <__retarget_lock_release_recursive>
 800cbda:	bf00      	nop
 800cbdc:	200133ca 	.word	0x200133ca

0800cbe0 <__sinit>:
 800cbe0:	b510      	push	{r4, lr}
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	f7ff fff0 	bl	800cbc8 <__sinit_lock_acquire>
 800cbe8:	69a3      	ldr	r3, [r4, #24]
 800cbea:	b11b      	cbz	r3, 800cbf4 <__sinit+0x14>
 800cbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbf0:	f7ff bff0 	b.w	800cbd4 <__sinit_lock_release>
 800cbf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbf8:	6523      	str	r3, [r4, #80]	; 0x50
 800cbfa:	4b13      	ldr	r3, [pc, #76]	; (800cc48 <__sinit+0x68>)
 800cbfc:	4a13      	ldr	r2, [pc, #76]	; (800cc4c <__sinit+0x6c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc02:	42a3      	cmp	r3, r4
 800cc04:	bf04      	itt	eq
 800cc06:	2301      	moveq	r3, #1
 800cc08:	61a3      	streq	r3, [r4, #24]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f000 f820 	bl	800cc50 <__sfp>
 800cc10:	6060      	str	r0, [r4, #4]
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 f81c 	bl	800cc50 <__sfp>
 800cc18:	60a0      	str	r0, [r4, #8]
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 f818 	bl	800cc50 <__sfp>
 800cc20:	2200      	movs	r2, #0
 800cc22:	60e0      	str	r0, [r4, #12]
 800cc24:	2104      	movs	r1, #4
 800cc26:	6860      	ldr	r0, [r4, #4]
 800cc28:	f7ff ff82 	bl	800cb30 <std>
 800cc2c:	68a0      	ldr	r0, [r4, #8]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	2109      	movs	r1, #9
 800cc32:	f7ff ff7d 	bl	800cb30 <std>
 800cc36:	68e0      	ldr	r0, [r4, #12]
 800cc38:	2202      	movs	r2, #2
 800cc3a:	2112      	movs	r1, #18
 800cc3c:	f7ff ff78 	bl	800cb30 <std>
 800cc40:	2301      	movs	r3, #1
 800cc42:	61a3      	str	r3, [r4, #24]
 800cc44:	e7d2      	b.n	800cbec <__sinit+0xc>
 800cc46:	bf00      	nop
 800cc48:	0800f5f8 	.word	0x0800f5f8
 800cc4c:	0800cb79 	.word	0x0800cb79

0800cc50 <__sfp>:
 800cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc52:	4607      	mov	r7, r0
 800cc54:	f7ff ffac 	bl	800cbb0 <__sfp_lock_acquire>
 800cc58:	4b1e      	ldr	r3, [pc, #120]	; (800ccd4 <__sfp+0x84>)
 800cc5a:	681e      	ldr	r6, [r3, #0]
 800cc5c:	69b3      	ldr	r3, [r6, #24]
 800cc5e:	b913      	cbnz	r3, 800cc66 <__sfp+0x16>
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7ff ffbd 	bl	800cbe0 <__sinit>
 800cc66:	3648      	adds	r6, #72	; 0x48
 800cc68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	d503      	bpl.n	800cc78 <__sfp+0x28>
 800cc70:	6833      	ldr	r3, [r6, #0]
 800cc72:	b30b      	cbz	r3, 800ccb8 <__sfp+0x68>
 800cc74:	6836      	ldr	r6, [r6, #0]
 800cc76:	e7f7      	b.n	800cc68 <__sfp+0x18>
 800cc78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc7c:	b9d5      	cbnz	r5, 800ccb4 <__sfp+0x64>
 800cc7e:	4b16      	ldr	r3, [pc, #88]	; (800ccd8 <__sfp+0x88>)
 800cc80:	60e3      	str	r3, [r4, #12]
 800cc82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc86:	6665      	str	r5, [r4, #100]	; 0x64
 800cc88:	f7ff fc02 	bl	800c490 <__retarget_lock_init_recursive>
 800cc8c:	f7ff ff96 	bl	800cbbc <__sfp_lock_release>
 800cc90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc98:	6025      	str	r5, [r4, #0]
 800cc9a:	61a5      	str	r5, [r4, #24]
 800cc9c:	2208      	movs	r2, #8
 800cc9e:	4629      	mov	r1, r5
 800cca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cca4:	f7fd fac2 	bl	800a22c <memset>
 800cca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb4:	3468      	adds	r4, #104	; 0x68
 800ccb6:	e7d9      	b.n	800cc6c <__sfp+0x1c>
 800ccb8:	2104      	movs	r1, #4
 800ccba:	4638      	mov	r0, r7
 800ccbc:	f7ff ff62 	bl	800cb84 <__sfmoreglue>
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	6030      	str	r0, [r6, #0]
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d1d5      	bne.n	800cc74 <__sfp+0x24>
 800ccc8:	f7ff ff78 	bl	800cbbc <__sfp_lock_release>
 800cccc:	230c      	movs	r3, #12
 800ccce:	603b      	str	r3, [r7, #0]
 800ccd0:	e7ee      	b.n	800ccb0 <__sfp+0x60>
 800ccd2:	bf00      	nop
 800ccd4:	0800f5f8 	.word	0x0800f5f8
 800ccd8:	ffff0001 	.word	0xffff0001

0800ccdc <_fwalk_reent>:
 800ccdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cce0:	4606      	mov	r6, r0
 800cce2:	4688      	mov	r8, r1
 800cce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cce8:	2700      	movs	r7, #0
 800ccea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccee:	f1b9 0901 	subs.w	r9, r9, #1
 800ccf2:	d505      	bpl.n	800cd00 <_fwalk_reent+0x24>
 800ccf4:	6824      	ldr	r4, [r4, #0]
 800ccf6:	2c00      	cmp	r4, #0
 800ccf8:	d1f7      	bne.n	800ccea <_fwalk_reent+0xe>
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd00:	89ab      	ldrh	r3, [r5, #12]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d907      	bls.n	800cd16 <_fwalk_reent+0x3a>
 800cd06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	d003      	beq.n	800cd16 <_fwalk_reent+0x3a>
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4630      	mov	r0, r6
 800cd12:	47c0      	blx	r8
 800cd14:	4307      	orrs	r7, r0
 800cd16:	3568      	adds	r5, #104	; 0x68
 800cd18:	e7e9      	b.n	800ccee <_fwalk_reent+0x12>

0800cd1a <__swhatbuf_r>:
 800cd1a:	b570      	push	{r4, r5, r6, lr}
 800cd1c:	460e      	mov	r6, r1
 800cd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd22:	2900      	cmp	r1, #0
 800cd24:	b096      	sub	sp, #88	; 0x58
 800cd26:	4614      	mov	r4, r2
 800cd28:	461d      	mov	r5, r3
 800cd2a:	da08      	bge.n	800cd3e <__swhatbuf_r+0x24>
 800cd2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	602a      	str	r2, [r5, #0]
 800cd34:	061a      	lsls	r2, r3, #24
 800cd36:	d410      	bmi.n	800cd5a <__swhatbuf_r+0x40>
 800cd38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd3c:	e00e      	b.n	800cd5c <__swhatbuf_r+0x42>
 800cd3e:	466a      	mov	r2, sp
 800cd40:	f000 f902 	bl	800cf48 <_fstat_r>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	dbf1      	blt.n	800cd2c <__swhatbuf_r+0x12>
 800cd48:	9a01      	ldr	r2, [sp, #4]
 800cd4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd52:	425a      	negs	r2, r3
 800cd54:	415a      	adcs	r2, r3
 800cd56:	602a      	str	r2, [r5, #0]
 800cd58:	e7ee      	b.n	800cd38 <__swhatbuf_r+0x1e>
 800cd5a:	2340      	movs	r3, #64	; 0x40
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	6023      	str	r3, [r4, #0]
 800cd60:	b016      	add	sp, #88	; 0x58
 800cd62:	bd70      	pop	{r4, r5, r6, pc}

0800cd64 <__smakebuf_r>:
 800cd64:	898b      	ldrh	r3, [r1, #12]
 800cd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd68:	079d      	lsls	r5, r3, #30
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	d507      	bpl.n	800cd80 <__smakebuf_r+0x1c>
 800cd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	6123      	str	r3, [r4, #16]
 800cd78:	2301      	movs	r3, #1
 800cd7a:	6163      	str	r3, [r4, #20]
 800cd7c:	b002      	add	sp, #8
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	ab01      	add	r3, sp, #4
 800cd82:	466a      	mov	r2, sp
 800cd84:	f7ff ffc9 	bl	800cd1a <__swhatbuf_r>
 800cd88:	9900      	ldr	r1, [sp, #0]
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f7fd fac1 	bl	800a314 <_malloc_r>
 800cd92:	b948      	cbnz	r0, 800cda8 <__smakebuf_r+0x44>
 800cd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd98:	059a      	lsls	r2, r3, #22
 800cd9a:	d4ef      	bmi.n	800cd7c <__smakebuf_r+0x18>
 800cd9c:	f023 0303 	bic.w	r3, r3, #3
 800cda0:	f043 0302 	orr.w	r3, r3, #2
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	e7e3      	b.n	800cd70 <__smakebuf_r+0xc>
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <__smakebuf_r+0x7c>)
 800cdaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	6020      	str	r0, [r4, #0]
 800cdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb4:	81a3      	strh	r3, [r4, #12]
 800cdb6:	9b00      	ldr	r3, [sp, #0]
 800cdb8:	6163      	str	r3, [r4, #20]
 800cdba:	9b01      	ldr	r3, [sp, #4]
 800cdbc:	6120      	str	r0, [r4, #16]
 800cdbe:	b15b      	cbz	r3, 800cdd8 <__smakebuf_r+0x74>
 800cdc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f000 f8d1 	bl	800cf6c <_isatty_r>
 800cdca:	b128      	cbz	r0, 800cdd8 <__smakebuf_r+0x74>
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	f023 0303 	bic.w	r3, r3, #3
 800cdd2:	f043 0301 	orr.w	r3, r3, #1
 800cdd6:	81a3      	strh	r3, [r4, #12]
 800cdd8:	89a0      	ldrh	r0, [r4, #12]
 800cdda:	4305      	orrs	r5, r0
 800cddc:	81a5      	strh	r5, [r4, #12]
 800cdde:	e7cd      	b.n	800cd7c <__smakebuf_r+0x18>
 800cde0:	0800cb79 	.word	0x0800cb79

0800cde4 <_malloc_usable_size_r>:
 800cde4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cde8:	1f18      	subs	r0, r3, #4
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bfbc      	itt	lt
 800cdee:	580b      	ldrlt	r3, [r1, r0]
 800cdf0:	18c0      	addlt	r0, r0, r3
 800cdf2:	4770      	bx	lr

0800cdf4 <_raise_r>:
 800cdf4:	291f      	cmp	r1, #31
 800cdf6:	b538      	push	{r3, r4, r5, lr}
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	460d      	mov	r5, r1
 800cdfc:	d904      	bls.n	800ce08 <_raise_r+0x14>
 800cdfe:	2316      	movs	r3, #22
 800ce00:	6003      	str	r3, [r0, #0]
 800ce02:	f04f 30ff 	mov.w	r0, #4294967295
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce0a:	b112      	cbz	r2, 800ce12 <_raise_r+0x1e>
 800ce0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce10:	b94b      	cbnz	r3, 800ce26 <_raise_r+0x32>
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 f830 	bl	800ce78 <_getpid_r>
 800ce18:	462a      	mov	r2, r5
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce22:	f000 b817 	b.w	800ce54 <_kill_r>
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d00a      	beq.n	800ce40 <_raise_r+0x4c>
 800ce2a:	1c59      	adds	r1, r3, #1
 800ce2c:	d103      	bne.n	800ce36 <_raise_r+0x42>
 800ce2e:	2316      	movs	r3, #22
 800ce30:	6003      	str	r3, [r0, #0]
 800ce32:	2001      	movs	r0, #1
 800ce34:	e7e7      	b.n	800ce06 <_raise_r+0x12>
 800ce36:	2400      	movs	r4, #0
 800ce38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	4798      	blx	r3
 800ce40:	2000      	movs	r0, #0
 800ce42:	e7e0      	b.n	800ce06 <_raise_r+0x12>

0800ce44 <raise>:
 800ce44:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <raise+0xc>)
 800ce46:	4601      	mov	r1, r0
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f7ff bfd3 	b.w	800cdf4 <_raise_r>
 800ce4e:	bf00      	nop
 800ce50:	20000028 	.word	0x20000028

0800ce54 <_kill_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d07      	ldr	r5, [pc, #28]	; (800ce74 <_kill_r+0x20>)
 800ce58:	2300      	movs	r3, #0
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	4611      	mov	r1, r2
 800ce60:	602b      	str	r3, [r5, #0]
 800ce62:	f7f5 ff1b 	bl	8002c9c <_kill>
 800ce66:	1c43      	adds	r3, r0, #1
 800ce68:	d102      	bne.n	800ce70 <_kill_r+0x1c>
 800ce6a:	682b      	ldr	r3, [r5, #0]
 800ce6c:	b103      	cbz	r3, 800ce70 <_kill_r+0x1c>
 800ce6e:	6023      	str	r3, [r4, #0]
 800ce70:	bd38      	pop	{r3, r4, r5, pc}
 800ce72:	bf00      	nop
 800ce74:	200133c4 	.word	0x200133c4

0800ce78 <_getpid_r>:
 800ce78:	f7f5 bf08 	b.w	8002c8c <_getpid>

0800ce7c <__sread>:
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	460c      	mov	r4, r1
 800ce80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce84:	f000 f894 	bl	800cfb0 <_read_r>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	bfab      	itete	ge
 800ce8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce90:	181b      	addge	r3, r3, r0
 800ce92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce96:	bfac      	ite	ge
 800ce98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce9a:	81a3      	strhlt	r3, [r4, #12]
 800ce9c:	bd10      	pop	{r4, pc}

0800ce9e <__swrite>:
 800ce9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea2:	461f      	mov	r7, r3
 800cea4:	898b      	ldrh	r3, [r1, #12]
 800cea6:	05db      	lsls	r3, r3, #23
 800cea8:	4605      	mov	r5, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	4616      	mov	r6, r2
 800ceae:	d505      	bpl.n	800cebc <__swrite+0x1e>
 800ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f000 f868 	bl	800cf8c <_lseek_r>
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cec6:	81a3      	strh	r3, [r4, #12]
 800cec8:	4632      	mov	r2, r6
 800ceca:	463b      	mov	r3, r7
 800cecc:	4628      	mov	r0, r5
 800cece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ced2:	f000 b817 	b.w	800cf04 <_write_r>

0800ced6 <__sseek>:
 800ced6:	b510      	push	{r4, lr}
 800ced8:	460c      	mov	r4, r1
 800ceda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cede:	f000 f855 	bl	800cf8c <_lseek_r>
 800cee2:	1c43      	adds	r3, r0, #1
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	bf15      	itete	ne
 800cee8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cef2:	81a3      	strheq	r3, [r4, #12]
 800cef4:	bf18      	it	ne
 800cef6:	81a3      	strhne	r3, [r4, #12]
 800cef8:	bd10      	pop	{r4, pc}

0800cefa <__sclose>:
 800cefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefe:	f000 b813 	b.w	800cf28 <_close_r>
	...

0800cf04 <_write_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4d07      	ldr	r5, [pc, #28]	; (800cf24 <_write_r+0x20>)
 800cf08:	4604      	mov	r4, r0
 800cf0a:	4608      	mov	r0, r1
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	2200      	movs	r2, #0
 800cf10:	602a      	str	r2, [r5, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	f7f5 fef9 	bl	8002d0a <_write>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_write_r+0x1e>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_write_r+0x1e>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	200133c4 	.word	0x200133c4

0800cf28 <_close_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4d06      	ldr	r5, [pc, #24]	; (800cf44 <_close_r+0x1c>)
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	4604      	mov	r4, r0
 800cf30:	4608      	mov	r0, r1
 800cf32:	602b      	str	r3, [r5, #0]
 800cf34:	f7f5 ff05 	bl	8002d42 <_close>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_close_r+0x1a>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_close_r+0x1a>
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	200133c4 	.word	0x200133c4

0800cf48 <_fstat_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4d07      	ldr	r5, [pc, #28]	; (800cf68 <_fstat_r+0x20>)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4604      	mov	r4, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	4611      	mov	r1, r2
 800cf54:	602b      	str	r3, [r5, #0]
 800cf56:	f7f5 ff00 	bl	8002d5a <_fstat>
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	d102      	bne.n	800cf64 <_fstat_r+0x1c>
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	b103      	cbz	r3, 800cf64 <_fstat_r+0x1c>
 800cf62:	6023      	str	r3, [r4, #0]
 800cf64:	bd38      	pop	{r3, r4, r5, pc}
 800cf66:	bf00      	nop
 800cf68:	200133c4 	.word	0x200133c4

0800cf6c <_isatty_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d06      	ldr	r5, [pc, #24]	; (800cf88 <_isatty_r+0x1c>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	602b      	str	r3, [r5, #0]
 800cf78:	f7f5 feff 	bl	8002d7a <_isatty>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d102      	bne.n	800cf86 <_isatty_r+0x1a>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	b103      	cbz	r3, 800cf86 <_isatty_r+0x1a>
 800cf84:	6023      	str	r3, [r4, #0]
 800cf86:	bd38      	pop	{r3, r4, r5, pc}
 800cf88:	200133c4 	.word	0x200133c4

0800cf8c <_lseek_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	4d07      	ldr	r5, [pc, #28]	; (800cfac <_lseek_r+0x20>)
 800cf90:	4604      	mov	r4, r0
 800cf92:	4608      	mov	r0, r1
 800cf94:	4611      	mov	r1, r2
 800cf96:	2200      	movs	r2, #0
 800cf98:	602a      	str	r2, [r5, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f7f5 fef8 	bl	8002d90 <_lseek>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d102      	bne.n	800cfaa <_lseek_r+0x1e>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	b103      	cbz	r3, 800cfaa <_lseek_r+0x1e>
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	200133c4 	.word	0x200133c4

0800cfb0 <_read_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d07      	ldr	r5, [pc, #28]	; (800cfd0 <_read_r+0x20>)
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	4611      	mov	r1, r2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	602a      	str	r2, [r5, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f7f5 fe86 	bl	8002cd0 <_read>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	d102      	bne.n	800cfce <_read_r+0x1e>
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	b103      	cbz	r3, 800cfce <_read_r+0x1e>
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
 800cfd0:	200133c4 	.word	0x200133c4
 800cfd4:	00000000 	.word	0x00000000

0800cfd8 <cos>:
 800cfd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfda:	ec53 2b10 	vmov	r2, r3, d0
 800cfde:	4826      	ldr	r0, [pc, #152]	; (800d078 <cos+0xa0>)
 800cfe0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cfe4:	4281      	cmp	r1, r0
 800cfe6:	dc06      	bgt.n	800cff6 <cos+0x1e>
 800cfe8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d070 <cos+0x98>
 800cfec:	b005      	add	sp, #20
 800cfee:	f85d eb04 	ldr.w	lr, [sp], #4
 800cff2:	f001 ba15 	b.w	800e420 <__kernel_cos>
 800cff6:	4821      	ldr	r0, [pc, #132]	; (800d07c <cos+0xa4>)
 800cff8:	4281      	cmp	r1, r0
 800cffa:	dd09      	ble.n	800d010 <cos+0x38>
 800cffc:	ee10 0a10 	vmov	r0, s0
 800d000:	4619      	mov	r1, r3
 800d002:	f7f3 f959 	bl	80002b8 <__aeabi_dsub>
 800d006:	ec41 0b10 	vmov	d0, r0, r1
 800d00a:	b005      	add	sp, #20
 800d00c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d010:	4668      	mov	r0, sp
 800d012:	f000 ff45 	bl	800dea0 <__ieee754_rem_pio2>
 800d016:	f000 0003 	and.w	r0, r0, #3
 800d01a:	2801      	cmp	r0, #1
 800d01c:	d00b      	beq.n	800d036 <cos+0x5e>
 800d01e:	2802      	cmp	r0, #2
 800d020:	d016      	beq.n	800d050 <cos+0x78>
 800d022:	b9e0      	cbnz	r0, 800d05e <cos+0x86>
 800d024:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d028:	ed9d 0b00 	vldr	d0, [sp]
 800d02c:	f001 f9f8 	bl	800e420 <__kernel_cos>
 800d030:	ec51 0b10 	vmov	r0, r1, d0
 800d034:	e7e7      	b.n	800d006 <cos+0x2e>
 800d036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d03a:	ed9d 0b00 	vldr	d0, [sp]
 800d03e:	f001 fe07 	bl	800ec50 <__kernel_sin>
 800d042:	ec53 2b10 	vmov	r2, r3, d0
 800d046:	ee10 0a10 	vmov	r0, s0
 800d04a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d04e:	e7da      	b.n	800d006 <cos+0x2e>
 800d050:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d054:	ed9d 0b00 	vldr	d0, [sp]
 800d058:	f001 f9e2 	bl	800e420 <__kernel_cos>
 800d05c:	e7f1      	b.n	800d042 <cos+0x6a>
 800d05e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d062:	ed9d 0b00 	vldr	d0, [sp]
 800d066:	2001      	movs	r0, #1
 800d068:	f001 fdf2 	bl	800ec50 <__kernel_sin>
 800d06c:	e7e0      	b.n	800d030 <cos+0x58>
 800d06e:	bf00      	nop
	...
 800d078:	3fe921fb 	.word	0x3fe921fb
 800d07c:	7fefffff 	.word	0x7fefffff

0800d080 <round>:
 800d080:	ec51 0b10 	vmov	r0, r1, d0
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d08a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d08e:	2c13      	cmp	r4, #19
 800d090:	ee10 2a10 	vmov	r2, s0
 800d094:	460b      	mov	r3, r1
 800d096:	dc19      	bgt.n	800d0cc <round+0x4c>
 800d098:	2c00      	cmp	r4, #0
 800d09a:	da09      	bge.n	800d0b0 <round+0x30>
 800d09c:	3401      	adds	r4, #1
 800d09e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d0a2:	d103      	bne.n	800d0ac <round+0x2c>
 800d0a4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d0a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	e028      	b.n	800d102 <round+0x82>
 800d0b0:	4d15      	ldr	r5, [pc, #84]	; (800d108 <round+0x88>)
 800d0b2:	4125      	asrs	r5, r4
 800d0b4:	ea01 0605 	and.w	r6, r1, r5
 800d0b8:	4332      	orrs	r2, r6
 800d0ba:	d00e      	beq.n	800d0da <round+0x5a>
 800d0bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d0c0:	fa42 f404 	asr.w	r4, r2, r4
 800d0c4:	4423      	add	r3, r4
 800d0c6:	ea23 0305 	bic.w	r3, r3, r5
 800d0ca:	e7ef      	b.n	800d0ac <round+0x2c>
 800d0cc:	2c33      	cmp	r4, #51	; 0x33
 800d0ce:	dd07      	ble.n	800d0e0 <round+0x60>
 800d0d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d0d4:	d101      	bne.n	800d0da <round+0x5a>
 800d0d6:	f7f3 f8f1 	bl	80002bc <__adddf3>
 800d0da:	ec41 0b10 	vmov	d0, r0, r1
 800d0de:	bd70      	pop	{r4, r5, r6, pc}
 800d0e0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d0e4:	f04f 35ff 	mov.w	r5, #4294967295
 800d0e8:	40f5      	lsrs	r5, r6
 800d0ea:	4228      	tst	r0, r5
 800d0ec:	d0f5      	beq.n	800d0da <round+0x5a>
 800d0ee:	2101      	movs	r1, #1
 800d0f0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d0f4:	fa01 f404 	lsl.w	r4, r1, r4
 800d0f8:	1912      	adds	r2, r2, r4
 800d0fa:	bf28      	it	cs
 800d0fc:	185b      	addcs	r3, r3, r1
 800d0fe:	ea22 0205 	bic.w	r2, r2, r5
 800d102:	4619      	mov	r1, r3
 800d104:	4610      	mov	r0, r2
 800d106:	e7e8      	b.n	800d0da <round+0x5a>
 800d108:	000fffff 	.word	0x000fffff
 800d10c:	00000000 	.word	0x00000000

0800d110 <sin>:
 800d110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d112:	ec53 2b10 	vmov	r2, r3, d0
 800d116:	4828      	ldr	r0, [pc, #160]	; (800d1b8 <sin+0xa8>)
 800d118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d11c:	4281      	cmp	r1, r0
 800d11e:	dc07      	bgt.n	800d130 <sin+0x20>
 800d120:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d1b0 <sin+0xa0>
 800d124:	2000      	movs	r0, #0
 800d126:	b005      	add	sp, #20
 800d128:	f85d eb04 	ldr.w	lr, [sp], #4
 800d12c:	f001 bd90 	b.w	800ec50 <__kernel_sin>
 800d130:	4822      	ldr	r0, [pc, #136]	; (800d1bc <sin+0xac>)
 800d132:	4281      	cmp	r1, r0
 800d134:	dd09      	ble.n	800d14a <sin+0x3a>
 800d136:	ee10 0a10 	vmov	r0, s0
 800d13a:	4619      	mov	r1, r3
 800d13c:	f7f3 f8bc 	bl	80002b8 <__aeabi_dsub>
 800d140:	ec41 0b10 	vmov	d0, r0, r1
 800d144:	b005      	add	sp, #20
 800d146:	f85d fb04 	ldr.w	pc, [sp], #4
 800d14a:	4668      	mov	r0, sp
 800d14c:	f000 fea8 	bl	800dea0 <__ieee754_rem_pio2>
 800d150:	f000 0003 	and.w	r0, r0, #3
 800d154:	2801      	cmp	r0, #1
 800d156:	d00c      	beq.n	800d172 <sin+0x62>
 800d158:	2802      	cmp	r0, #2
 800d15a:	d011      	beq.n	800d180 <sin+0x70>
 800d15c:	b9f0      	cbnz	r0, 800d19c <sin+0x8c>
 800d15e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d162:	ed9d 0b00 	vldr	d0, [sp]
 800d166:	2001      	movs	r0, #1
 800d168:	f001 fd72 	bl	800ec50 <__kernel_sin>
 800d16c:	ec51 0b10 	vmov	r0, r1, d0
 800d170:	e7e6      	b.n	800d140 <sin+0x30>
 800d172:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d176:	ed9d 0b00 	vldr	d0, [sp]
 800d17a:	f001 f951 	bl	800e420 <__kernel_cos>
 800d17e:	e7f5      	b.n	800d16c <sin+0x5c>
 800d180:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d184:	ed9d 0b00 	vldr	d0, [sp]
 800d188:	2001      	movs	r0, #1
 800d18a:	f001 fd61 	bl	800ec50 <__kernel_sin>
 800d18e:	ec53 2b10 	vmov	r2, r3, d0
 800d192:	ee10 0a10 	vmov	r0, s0
 800d196:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d19a:	e7d1      	b.n	800d140 <sin+0x30>
 800d19c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1a0:	ed9d 0b00 	vldr	d0, [sp]
 800d1a4:	f001 f93c 	bl	800e420 <__kernel_cos>
 800d1a8:	e7f1      	b.n	800d18e <sin+0x7e>
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w
	...
 800d1b8:	3fe921fb 	.word	0x3fe921fb
 800d1bc:	7fefffff 	.word	0x7fefffff

0800d1c0 <atan2>:
 800d1c0:	f000 b872 	b.w	800d2a8 <__ieee754_atan2>

0800d1c4 <pow>:
 800d1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c6:	ed2d 8b02 	vpush	{d8}
 800d1ca:	eeb0 8a40 	vmov.f32	s16, s0
 800d1ce:	eef0 8a60 	vmov.f32	s17, s1
 800d1d2:	ec55 4b11 	vmov	r4, r5, d1
 800d1d6:	f000 f933 	bl	800d440 <__ieee754_pow>
 800d1da:	4622      	mov	r2, r4
 800d1dc:	462b      	mov	r3, r5
 800d1de:	4620      	mov	r0, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	ec57 6b10 	vmov	r6, r7, d0
 800d1e6:	f7f3 fcb9 	bl	8000b5c <__aeabi_dcmpun>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d13b      	bne.n	800d266 <pow+0xa2>
 800d1ee:	ec51 0b18 	vmov	r0, r1, d8
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f7f3 fc7f 	bl	8000af8 <__aeabi_dcmpeq>
 800d1fa:	b1b8      	cbz	r0, 800d22c <pow+0x68>
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2300      	movs	r3, #0
 800d200:	4620      	mov	r0, r4
 800d202:	4629      	mov	r1, r5
 800d204:	f7f3 fc78 	bl	8000af8 <__aeabi_dcmpeq>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d146      	bne.n	800d29a <pow+0xd6>
 800d20c:	ec45 4b10 	vmov	d0, r4, r5
 800d210:	f001 ffb7 	bl	800f182 <finite>
 800d214:	b338      	cbz	r0, 800d266 <pow+0xa2>
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	4620      	mov	r0, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	f7f3 fc75 	bl	8000b0c <__aeabi_dcmplt>
 800d222:	b300      	cbz	r0, 800d266 <pow+0xa2>
 800d224:	f7fc ffc2 	bl	800a1ac <__errno>
 800d228:	2322      	movs	r3, #34	; 0x22
 800d22a:	e01b      	b.n	800d264 <pow+0xa0>
 800d22c:	ec47 6b10 	vmov	d0, r6, r7
 800d230:	f001 ffa7 	bl	800f182 <finite>
 800d234:	b9e0      	cbnz	r0, 800d270 <pow+0xac>
 800d236:	eeb0 0a48 	vmov.f32	s0, s16
 800d23a:	eef0 0a68 	vmov.f32	s1, s17
 800d23e:	f001 ffa0 	bl	800f182 <finite>
 800d242:	b1a8      	cbz	r0, 800d270 <pow+0xac>
 800d244:	ec45 4b10 	vmov	d0, r4, r5
 800d248:	f001 ff9b 	bl	800f182 <finite>
 800d24c:	b180      	cbz	r0, 800d270 <pow+0xac>
 800d24e:	4632      	mov	r2, r6
 800d250:	463b      	mov	r3, r7
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 fc81 	bl	8000b5c <__aeabi_dcmpun>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d0e2      	beq.n	800d224 <pow+0x60>
 800d25e:	f7fc ffa5 	bl	800a1ac <__errno>
 800d262:	2321      	movs	r3, #33	; 0x21
 800d264:	6003      	str	r3, [r0, #0]
 800d266:	ecbd 8b02 	vpop	{d8}
 800d26a:	ec47 6b10 	vmov	d0, r6, r7
 800d26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d270:	2200      	movs	r2, #0
 800d272:	2300      	movs	r3, #0
 800d274:	4630      	mov	r0, r6
 800d276:	4639      	mov	r1, r7
 800d278:	f7f3 fc3e 	bl	8000af8 <__aeabi_dcmpeq>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d0f2      	beq.n	800d266 <pow+0xa2>
 800d280:	eeb0 0a48 	vmov.f32	s0, s16
 800d284:	eef0 0a68 	vmov.f32	s1, s17
 800d288:	f001 ff7b 	bl	800f182 <finite>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d0ea      	beq.n	800d266 <pow+0xa2>
 800d290:	ec45 4b10 	vmov	d0, r4, r5
 800d294:	f001 ff75 	bl	800f182 <finite>
 800d298:	e7c3      	b.n	800d222 <pow+0x5e>
 800d29a:	4f01      	ldr	r7, [pc, #4]	; (800d2a0 <pow+0xdc>)
 800d29c:	2600      	movs	r6, #0
 800d29e:	e7e2      	b.n	800d266 <pow+0xa2>
 800d2a0:	3ff00000 	.word	0x3ff00000
 800d2a4:	00000000 	.word	0x00000000

0800d2a8 <__ieee754_atan2>:
 800d2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ac:	ec57 6b11 	vmov	r6, r7, d1
 800d2b0:	4273      	negs	r3, r6
 800d2b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d438 <__ieee754_atan2+0x190>
 800d2b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d2ba:	4333      	orrs	r3, r6
 800d2bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d2c0:	4573      	cmp	r3, lr
 800d2c2:	ec51 0b10 	vmov	r0, r1, d0
 800d2c6:	ee11 8a10 	vmov	r8, s2
 800d2ca:	d80a      	bhi.n	800d2e2 <__ieee754_atan2+0x3a>
 800d2cc:	4244      	negs	r4, r0
 800d2ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2d2:	4304      	orrs	r4, r0
 800d2d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d2d8:	4574      	cmp	r4, lr
 800d2da:	ee10 9a10 	vmov	r9, s0
 800d2de:	468c      	mov	ip, r1
 800d2e0:	d907      	bls.n	800d2f2 <__ieee754_atan2+0x4a>
 800d2e2:	4632      	mov	r2, r6
 800d2e4:	463b      	mov	r3, r7
 800d2e6:	f7f2 ffe9 	bl	80002bc <__adddf3>
 800d2ea:	ec41 0b10 	vmov	d0, r0, r1
 800d2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d2f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d2fa:	4334      	orrs	r4, r6
 800d2fc:	d103      	bne.n	800d306 <__ieee754_atan2+0x5e>
 800d2fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d302:	f001 bd95 	b.w	800ee30 <atan>
 800d306:	17bc      	asrs	r4, r7, #30
 800d308:	f004 0402 	and.w	r4, r4, #2
 800d30c:	ea53 0909 	orrs.w	r9, r3, r9
 800d310:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d314:	d107      	bne.n	800d326 <__ieee754_atan2+0x7e>
 800d316:	2c02      	cmp	r4, #2
 800d318:	d060      	beq.n	800d3dc <__ieee754_atan2+0x134>
 800d31a:	2c03      	cmp	r4, #3
 800d31c:	d1e5      	bne.n	800d2ea <__ieee754_atan2+0x42>
 800d31e:	a142      	add	r1, pc, #264	; (adr r1, 800d428 <__ieee754_atan2+0x180>)
 800d320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d324:	e7e1      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d326:	ea52 0808 	orrs.w	r8, r2, r8
 800d32a:	d106      	bne.n	800d33a <__ieee754_atan2+0x92>
 800d32c:	f1bc 0f00 	cmp.w	ip, #0
 800d330:	da5f      	bge.n	800d3f2 <__ieee754_atan2+0x14a>
 800d332:	a13f      	add	r1, pc, #252	; (adr r1, 800d430 <__ieee754_atan2+0x188>)
 800d334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d338:	e7d7      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d33a:	4572      	cmp	r2, lr
 800d33c:	d10f      	bne.n	800d35e <__ieee754_atan2+0xb6>
 800d33e:	4293      	cmp	r3, r2
 800d340:	f104 34ff 	add.w	r4, r4, #4294967295
 800d344:	d107      	bne.n	800d356 <__ieee754_atan2+0xae>
 800d346:	2c02      	cmp	r4, #2
 800d348:	d84c      	bhi.n	800d3e4 <__ieee754_atan2+0x13c>
 800d34a:	4b35      	ldr	r3, [pc, #212]	; (800d420 <__ieee754_atan2+0x178>)
 800d34c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d350:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d354:	e7c9      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d356:	2c02      	cmp	r4, #2
 800d358:	d848      	bhi.n	800d3ec <__ieee754_atan2+0x144>
 800d35a:	4b32      	ldr	r3, [pc, #200]	; (800d424 <__ieee754_atan2+0x17c>)
 800d35c:	e7f6      	b.n	800d34c <__ieee754_atan2+0xa4>
 800d35e:	4573      	cmp	r3, lr
 800d360:	d0e4      	beq.n	800d32c <__ieee754_atan2+0x84>
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d368:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d36c:	da1e      	bge.n	800d3ac <__ieee754_atan2+0x104>
 800d36e:	2f00      	cmp	r7, #0
 800d370:	da01      	bge.n	800d376 <__ieee754_atan2+0xce>
 800d372:	323c      	adds	r2, #60	; 0x3c
 800d374:	db1e      	blt.n	800d3b4 <__ieee754_atan2+0x10c>
 800d376:	4632      	mov	r2, r6
 800d378:	463b      	mov	r3, r7
 800d37a:	f7f3 fa7f 	bl	800087c <__aeabi_ddiv>
 800d37e:	ec41 0b10 	vmov	d0, r0, r1
 800d382:	f001 fef5 	bl	800f170 <fabs>
 800d386:	f001 fd53 	bl	800ee30 <atan>
 800d38a:	ec51 0b10 	vmov	r0, r1, d0
 800d38e:	2c01      	cmp	r4, #1
 800d390:	d013      	beq.n	800d3ba <__ieee754_atan2+0x112>
 800d392:	2c02      	cmp	r4, #2
 800d394:	d015      	beq.n	800d3c2 <__ieee754_atan2+0x11a>
 800d396:	2c00      	cmp	r4, #0
 800d398:	d0a7      	beq.n	800d2ea <__ieee754_atan2+0x42>
 800d39a:	a319      	add	r3, pc, #100	; (adr r3, 800d400 <__ieee754_atan2+0x158>)
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	f7f2 ff8a 	bl	80002b8 <__aeabi_dsub>
 800d3a4:	a318      	add	r3, pc, #96	; (adr r3, 800d408 <__ieee754_atan2+0x160>)
 800d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3aa:	e014      	b.n	800d3d6 <__ieee754_atan2+0x12e>
 800d3ac:	a118      	add	r1, pc, #96	; (adr r1, 800d410 <__ieee754_atan2+0x168>)
 800d3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3b2:	e7ec      	b.n	800d38e <__ieee754_atan2+0xe6>
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	e7e9      	b.n	800d38e <__ieee754_atan2+0xe6>
 800d3ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3be:	4619      	mov	r1, r3
 800d3c0:	e793      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d3c2:	a30f      	add	r3, pc, #60	; (adr r3, 800d400 <__ieee754_atan2+0x158>)
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f7f2 ff76 	bl	80002b8 <__aeabi_dsub>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	a10d      	add	r1, pc, #52	; (adr r1, 800d408 <__ieee754_atan2+0x160>)
 800d3d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3d6:	f7f2 ff6f 	bl	80002b8 <__aeabi_dsub>
 800d3da:	e786      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d3dc:	a10a      	add	r1, pc, #40	; (adr r1, 800d408 <__ieee754_atan2+0x160>)
 800d3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3e2:	e782      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d3e4:	a10c      	add	r1, pc, #48	; (adr r1, 800d418 <__ieee754_atan2+0x170>)
 800d3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3ea:	e77e      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	e77b      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d3f2:	a107      	add	r1, pc, #28	; (adr r1, 800d410 <__ieee754_atan2+0x168>)
 800d3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3f8:	e777      	b.n	800d2ea <__ieee754_atan2+0x42>
 800d3fa:	bf00      	nop
 800d3fc:	f3af 8000 	nop.w
 800d400:	33145c07 	.word	0x33145c07
 800d404:	3ca1a626 	.word	0x3ca1a626
 800d408:	54442d18 	.word	0x54442d18
 800d40c:	400921fb 	.word	0x400921fb
 800d410:	54442d18 	.word	0x54442d18
 800d414:	3ff921fb 	.word	0x3ff921fb
 800d418:	54442d18 	.word	0x54442d18
 800d41c:	3fe921fb 	.word	0x3fe921fb
 800d420:	0800f9d8 	.word	0x0800f9d8
 800d424:	0800f9f0 	.word	0x0800f9f0
 800d428:	54442d18 	.word	0x54442d18
 800d42c:	c00921fb 	.word	0xc00921fb
 800d430:	54442d18 	.word	0x54442d18
 800d434:	bff921fb 	.word	0xbff921fb
 800d438:	7ff00000 	.word	0x7ff00000
 800d43c:	00000000 	.word	0x00000000

0800d440 <__ieee754_pow>:
 800d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	ed2d 8b06 	vpush	{d8-d10}
 800d448:	b089      	sub	sp, #36	; 0x24
 800d44a:	ed8d 1b00 	vstr	d1, [sp]
 800d44e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d452:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d456:	ea58 0102 	orrs.w	r1, r8, r2
 800d45a:	ec57 6b10 	vmov	r6, r7, d0
 800d45e:	d115      	bne.n	800d48c <__ieee754_pow+0x4c>
 800d460:	19b3      	adds	r3, r6, r6
 800d462:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d466:	4152      	adcs	r2, r2
 800d468:	4299      	cmp	r1, r3
 800d46a:	4b89      	ldr	r3, [pc, #548]	; (800d690 <__ieee754_pow+0x250>)
 800d46c:	4193      	sbcs	r3, r2
 800d46e:	f080 84d2 	bcs.w	800de16 <__ieee754_pow+0x9d6>
 800d472:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d476:	4630      	mov	r0, r6
 800d478:	4639      	mov	r1, r7
 800d47a:	f7f2 ff1f 	bl	80002bc <__adddf3>
 800d47e:	ec41 0b10 	vmov	d0, r0, r1
 800d482:	b009      	add	sp, #36	; 0x24
 800d484:	ecbd 8b06 	vpop	{d8-d10}
 800d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	4b81      	ldr	r3, [pc, #516]	; (800d694 <__ieee754_pow+0x254>)
 800d48e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d492:	429c      	cmp	r4, r3
 800d494:	ee10 aa10 	vmov	sl, s0
 800d498:	463d      	mov	r5, r7
 800d49a:	dc06      	bgt.n	800d4aa <__ieee754_pow+0x6a>
 800d49c:	d101      	bne.n	800d4a2 <__ieee754_pow+0x62>
 800d49e:	2e00      	cmp	r6, #0
 800d4a0:	d1e7      	bne.n	800d472 <__ieee754_pow+0x32>
 800d4a2:	4598      	cmp	r8, r3
 800d4a4:	dc01      	bgt.n	800d4aa <__ieee754_pow+0x6a>
 800d4a6:	d10f      	bne.n	800d4c8 <__ieee754_pow+0x88>
 800d4a8:	b172      	cbz	r2, 800d4c8 <__ieee754_pow+0x88>
 800d4aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d4ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d4b2:	ea55 050a 	orrs.w	r5, r5, sl
 800d4b6:	d1dc      	bne.n	800d472 <__ieee754_pow+0x32>
 800d4b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4bc:	18db      	adds	r3, r3, r3
 800d4be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d4c2:	4152      	adcs	r2, r2
 800d4c4:	429d      	cmp	r5, r3
 800d4c6:	e7d0      	b.n	800d46a <__ieee754_pow+0x2a>
 800d4c8:	2d00      	cmp	r5, #0
 800d4ca:	da3b      	bge.n	800d544 <__ieee754_pow+0x104>
 800d4cc:	4b72      	ldr	r3, [pc, #456]	; (800d698 <__ieee754_pow+0x258>)
 800d4ce:	4598      	cmp	r8, r3
 800d4d0:	dc51      	bgt.n	800d576 <__ieee754_pow+0x136>
 800d4d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d4d6:	4598      	cmp	r8, r3
 800d4d8:	f340 84ac 	ble.w	800de34 <__ieee754_pow+0x9f4>
 800d4dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d4e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4e4:	2b14      	cmp	r3, #20
 800d4e6:	dd0f      	ble.n	800d508 <__ieee754_pow+0xc8>
 800d4e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d4ec:	fa22 f103 	lsr.w	r1, r2, r3
 800d4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	f040 849d 	bne.w	800de34 <__ieee754_pow+0x9f4>
 800d4fa:	f001 0101 	and.w	r1, r1, #1
 800d4fe:	f1c1 0302 	rsb	r3, r1, #2
 800d502:	9304      	str	r3, [sp, #16]
 800d504:	b182      	cbz	r2, 800d528 <__ieee754_pow+0xe8>
 800d506:	e05f      	b.n	800d5c8 <__ieee754_pow+0x188>
 800d508:	2a00      	cmp	r2, #0
 800d50a:	d15b      	bne.n	800d5c4 <__ieee754_pow+0x184>
 800d50c:	f1c3 0314 	rsb	r3, r3, #20
 800d510:	fa48 f103 	asr.w	r1, r8, r3
 800d514:	fa01 f303 	lsl.w	r3, r1, r3
 800d518:	4543      	cmp	r3, r8
 800d51a:	f040 8488 	bne.w	800de2e <__ieee754_pow+0x9ee>
 800d51e:	f001 0101 	and.w	r1, r1, #1
 800d522:	f1c1 0302 	rsb	r3, r1, #2
 800d526:	9304      	str	r3, [sp, #16]
 800d528:	4b5c      	ldr	r3, [pc, #368]	; (800d69c <__ieee754_pow+0x25c>)
 800d52a:	4598      	cmp	r8, r3
 800d52c:	d132      	bne.n	800d594 <__ieee754_pow+0x154>
 800d52e:	f1b9 0f00 	cmp.w	r9, #0
 800d532:	f280 8478 	bge.w	800de26 <__ieee754_pow+0x9e6>
 800d536:	4959      	ldr	r1, [pc, #356]	; (800d69c <__ieee754_pow+0x25c>)
 800d538:	4632      	mov	r2, r6
 800d53a:	463b      	mov	r3, r7
 800d53c:	2000      	movs	r0, #0
 800d53e:	f7f3 f99d 	bl	800087c <__aeabi_ddiv>
 800d542:	e79c      	b.n	800d47e <__ieee754_pow+0x3e>
 800d544:	2300      	movs	r3, #0
 800d546:	9304      	str	r3, [sp, #16]
 800d548:	2a00      	cmp	r2, #0
 800d54a:	d13d      	bne.n	800d5c8 <__ieee754_pow+0x188>
 800d54c:	4b51      	ldr	r3, [pc, #324]	; (800d694 <__ieee754_pow+0x254>)
 800d54e:	4598      	cmp	r8, r3
 800d550:	d1ea      	bne.n	800d528 <__ieee754_pow+0xe8>
 800d552:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d556:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d55a:	ea53 030a 	orrs.w	r3, r3, sl
 800d55e:	f000 845a 	beq.w	800de16 <__ieee754_pow+0x9d6>
 800d562:	4b4f      	ldr	r3, [pc, #316]	; (800d6a0 <__ieee754_pow+0x260>)
 800d564:	429c      	cmp	r4, r3
 800d566:	dd08      	ble.n	800d57a <__ieee754_pow+0x13a>
 800d568:	f1b9 0f00 	cmp.w	r9, #0
 800d56c:	f2c0 8457 	blt.w	800de1e <__ieee754_pow+0x9de>
 800d570:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d574:	e783      	b.n	800d47e <__ieee754_pow+0x3e>
 800d576:	2302      	movs	r3, #2
 800d578:	e7e5      	b.n	800d546 <__ieee754_pow+0x106>
 800d57a:	f1b9 0f00 	cmp.w	r9, #0
 800d57e:	f04f 0000 	mov.w	r0, #0
 800d582:	f04f 0100 	mov.w	r1, #0
 800d586:	f6bf af7a 	bge.w	800d47e <__ieee754_pow+0x3e>
 800d58a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d58e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d592:	e774      	b.n	800d47e <__ieee754_pow+0x3e>
 800d594:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d598:	d106      	bne.n	800d5a8 <__ieee754_pow+0x168>
 800d59a:	4632      	mov	r2, r6
 800d59c:	463b      	mov	r3, r7
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f3 f841 	bl	8000628 <__aeabi_dmul>
 800d5a6:	e76a      	b.n	800d47e <__ieee754_pow+0x3e>
 800d5a8:	4b3e      	ldr	r3, [pc, #248]	; (800d6a4 <__ieee754_pow+0x264>)
 800d5aa:	4599      	cmp	r9, r3
 800d5ac:	d10c      	bne.n	800d5c8 <__ieee754_pow+0x188>
 800d5ae:	2d00      	cmp	r5, #0
 800d5b0:	db0a      	blt.n	800d5c8 <__ieee754_pow+0x188>
 800d5b2:	ec47 6b10 	vmov	d0, r6, r7
 800d5b6:	b009      	add	sp, #36	; 0x24
 800d5b8:	ecbd 8b06 	vpop	{d8-d10}
 800d5bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c0:	f000 be7a 	b.w	800e2b8 <__ieee754_sqrt>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	9304      	str	r3, [sp, #16]
 800d5c8:	ec47 6b10 	vmov	d0, r6, r7
 800d5cc:	f001 fdd0 	bl	800f170 <fabs>
 800d5d0:	ec51 0b10 	vmov	r0, r1, d0
 800d5d4:	f1ba 0f00 	cmp.w	sl, #0
 800d5d8:	d129      	bne.n	800d62e <__ieee754_pow+0x1ee>
 800d5da:	b124      	cbz	r4, 800d5e6 <__ieee754_pow+0x1a6>
 800d5dc:	4b2f      	ldr	r3, [pc, #188]	; (800d69c <__ieee754_pow+0x25c>)
 800d5de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d123      	bne.n	800d62e <__ieee754_pow+0x1ee>
 800d5e6:	f1b9 0f00 	cmp.w	r9, #0
 800d5ea:	da05      	bge.n	800d5f8 <__ieee754_pow+0x1b8>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	492a      	ldr	r1, [pc, #168]	; (800d69c <__ieee754_pow+0x25c>)
 800d5f4:	f7f3 f942 	bl	800087c <__aeabi_ddiv>
 800d5f8:	2d00      	cmp	r5, #0
 800d5fa:	f6bf af40 	bge.w	800d47e <__ieee754_pow+0x3e>
 800d5fe:	9b04      	ldr	r3, [sp, #16]
 800d600:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d604:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d608:	4323      	orrs	r3, r4
 800d60a:	d108      	bne.n	800d61e <__ieee754_pow+0x1de>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4610      	mov	r0, r2
 800d612:	4619      	mov	r1, r3
 800d614:	f7f2 fe50 	bl	80002b8 <__aeabi_dsub>
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	e78f      	b.n	800d53e <__ieee754_pow+0xfe>
 800d61e:	9b04      	ldr	r3, [sp, #16]
 800d620:	2b01      	cmp	r3, #1
 800d622:	f47f af2c 	bne.w	800d47e <__ieee754_pow+0x3e>
 800d626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d62a:	4619      	mov	r1, r3
 800d62c:	e727      	b.n	800d47e <__ieee754_pow+0x3e>
 800d62e:	0feb      	lsrs	r3, r5, #31
 800d630:	3b01      	subs	r3, #1
 800d632:	9306      	str	r3, [sp, #24]
 800d634:	9a06      	ldr	r2, [sp, #24]
 800d636:	9b04      	ldr	r3, [sp, #16]
 800d638:	4313      	orrs	r3, r2
 800d63a:	d102      	bne.n	800d642 <__ieee754_pow+0x202>
 800d63c:	4632      	mov	r2, r6
 800d63e:	463b      	mov	r3, r7
 800d640:	e7e6      	b.n	800d610 <__ieee754_pow+0x1d0>
 800d642:	4b19      	ldr	r3, [pc, #100]	; (800d6a8 <__ieee754_pow+0x268>)
 800d644:	4598      	cmp	r8, r3
 800d646:	f340 80fb 	ble.w	800d840 <__ieee754_pow+0x400>
 800d64a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d64e:	4598      	cmp	r8, r3
 800d650:	4b13      	ldr	r3, [pc, #76]	; (800d6a0 <__ieee754_pow+0x260>)
 800d652:	dd0c      	ble.n	800d66e <__ieee754_pow+0x22e>
 800d654:	429c      	cmp	r4, r3
 800d656:	dc0f      	bgt.n	800d678 <__ieee754_pow+0x238>
 800d658:	f1b9 0f00 	cmp.w	r9, #0
 800d65c:	da0f      	bge.n	800d67e <__ieee754_pow+0x23e>
 800d65e:	2000      	movs	r0, #0
 800d660:	b009      	add	sp, #36	; 0x24
 800d662:	ecbd 8b06 	vpop	{d8-d10}
 800d666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66a:	f001 bbd6 	b.w	800ee1a <__math_oflow>
 800d66e:	429c      	cmp	r4, r3
 800d670:	dbf2      	blt.n	800d658 <__ieee754_pow+0x218>
 800d672:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <__ieee754_pow+0x25c>)
 800d674:	429c      	cmp	r4, r3
 800d676:	dd19      	ble.n	800d6ac <__ieee754_pow+0x26c>
 800d678:	f1b9 0f00 	cmp.w	r9, #0
 800d67c:	dcef      	bgt.n	800d65e <__ieee754_pow+0x21e>
 800d67e:	2000      	movs	r0, #0
 800d680:	b009      	add	sp, #36	; 0x24
 800d682:	ecbd 8b06 	vpop	{d8-d10}
 800d686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	f001 bbbd 	b.w	800ee08 <__math_uflow>
 800d68e:	bf00      	nop
 800d690:	fff00000 	.word	0xfff00000
 800d694:	7ff00000 	.word	0x7ff00000
 800d698:	433fffff 	.word	0x433fffff
 800d69c:	3ff00000 	.word	0x3ff00000
 800d6a0:	3fefffff 	.word	0x3fefffff
 800d6a4:	3fe00000 	.word	0x3fe00000
 800d6a8:	41e00000 	.word	0x41e00000
 800d6ac:	4b60      	ldr	r3, [pc, #384]	; (800d830 <__ieee754_pow+0x3f0>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f7f2 fe02 	bl	80002b8 <__aeabi_dsub>
 800d6b4:	a354      	add	r3, pc, #336	; (adr r3, 800d808 <__ieee754_pow+0x3c8>)
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	460d      	mov	r5, r1
 800d6be:	f7f2 ffb3 	bl	8000628 <__aeabi_dmul>
 800d6c2:	a353      	add	r3, pc, #332	; (adr r3, 800d810 <__ieee754_pow+0x3d0>)
 800d6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c8:	4606      	mov	r6, r0
 800d6ca:	460f      	mov	r7, r1
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	f7f2 ffaa 	bl	8000628 <__aeabi_dmul>
 800d6d4:	4b57      	ldr	r3, [pc, #348]	; (800d834 <__ieee754_pow+0x3f4>)
 800d6d6:	4682      	mov	sl, r0
 800d6d8:	468b      	mov	fp, r1
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4620      	mov	r0, r4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f7f2 ffa2 	bl	8000628 <__aeabi_dmul>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	a14b      	add	r1, pc, #300	; (adr r1, 800d818 <__ieee754_pow+0x3d8>)
 800d6ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ee:	f7f2 fde3 	bl	80002b8 <__aeabi_dsub>
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	462b      	mov	r3, r5
 800d6f6:	f7f2 ff97 	bl	8000628 <__aeabi_dmul>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	2000      	movs	r0, #0
 800d700:	494d      	ldr	r1, [pc, #308]	; (800d838 <__ieee754_pow+0x3f8>)
 800d702:	f7f2 fdd9 	bl	80002b8 <__aeabi_dsub>
 800d706:	4622      	mov	r2, r4
 800d708:	4680      	mov	r8, r0
 800d70a:	4689      	mov	r9, r1
 800d70c:	462b      	mov	r3, r5
 800d70e:	4620      	mov	r0, r4
 800d710:	4629      	mov	r1, r5
 800d712:	f7f2 ff89 	bl	8000628 <__aeabi_dmul>
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	4640      	mov	r0, r8
 800d71c:	4649      	mov	r1, r9
 800d71e:	f7f2 ff83 	bl	8000628 <__aeabi_dmul>
 800d722:	a33f      	add	r3, pc, #252	; (adr r3, 800d820 <__ieee754_pow+0x3e0>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	f7f2 ff7e 	bl	8000628 <__aeabi_dmul>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4650      	mov	r0, sl
 800d732:	4659      	mov	r1, fp
 800d734:	f7f2 fdc0 	bl	80002b8 <__aeabi_dsub>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4680      	mov	r8, r0
 800d73e:	4689      	mov	r9, r1
 800d740:	4630      	mov	r0, r6
 800d742:	4639      	mov	r1, r7
 800d744:	f7f2 fdba 	bl	80002bc <__adddf3>
 800d748:	2000      	movs	r0, #0
 800d74a:	4632      	mov	r2, r6
 800d74c:	463b      	mov	r3, r7
 800d74e:	4604      	mov	r4, r0
 800d750:	460d      	mov	r5, r1
 800d752:	f7f2 fdb1 	bl	80002b8 <__aeabi_dsub>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4640      	mov	r0, r8
 800d75c:	4649      	mov	r1, r9
 800d75e:	f7f2 fdab 	bl	80002b8 <__aeabi_dsub>
 800d762:	9b04      	ldr	r3, [sp, #16]
 800d764:	9a06      	ldr	r2, [sp, #24]
 800d766:	3b01      	subs	r3, #1
 800d768:	4313      	orrs	r3, r2
 800d76a:	4682      	mov	sl, r0
 800d76c:	468b      	mov	fp, r1
 800d76e:	f040 81e7 	bne.w	800db40 <__ieee754_pow+0x700>
 800d772:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d828 <__ieee754_pow+0x3e8>
 800d776:	eeb0 8a47 	vmov.f32	s16, s14
 800d77a:	eef0 8a67 	vmov.f32	s17, s15
 800d77e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d782:	2600      	movs	r6, #0
 800d784:	4632      	mov	r2, r6
 800d786:	463b      	mov	r3, r7
 800d788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d78c:	f7f2 fd94 	bl	80002b8 <__aeabi_dsub>
 800d790:	4622      	mov	r2, r4
 800d792:	462b      	mov	r3, r5
 800d794:	f7f2 ff48 	bl	8000628 <__aeabi_dmul>
 800d798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d79c:	4680      	mov	r8, r0
 800d79e:	4689      	mov	r9, r1
 800d7a0:	4650      	mov	r0, sl
 800d7a2:	4659      	mov	r1, fp
 800d7a4:	f7f2 ff40 	bl	8000628 <__aeabi_dmul>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	4649      	mov	r1, r9
 800d7b0:	f7f2 fd84 	bl	80002bc <__adddf3>
 800d7b4:	4632      	mov	r2, r6
 800d7b6:	463b      	mov	r3, r7
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	4689      	mov	r9, r1
 800d7bc:	4620      	mov	r0, r4
 800d7be:	4629      	mov	r1, r5
 800d7c0:	f7f2 ff32 	bl	8000628 <__aeabi_dmul>
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	460d      	mov	r5, r1
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	4649      	mov	r1, r9
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	f7f2 fd74 	bl	80002bc <__adddf3>
 800d7d4:	4b19      	ldr	r3, [pc, #100]	; (800d83c <__ieee754_pow+0x3fc>)
 800d7d6:	4299      	cmp	r1, r3
 800d7d8:	ec45 4b19 	vmov	d9, r4, r5
 800d7dc:	4606      	mov	r6, r0
 800d7de:	460f      	mov	r7, r1
 800d7e0:	468b      	mov	fp, r1
 800d7e2:	f340 82f1 	ble.w	800ddc8 <__ieee754_pow+0x988>
 800d7e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d7ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d7ee:	4303      	orrs	r3, r0
 800d7f0:	f000 81e4 	beq.w	800dbbc <__ieee754_pow+0x77c>
 800d7f4:	ec51 0b18 	vmov	r0, r1, d8
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f7f3 f986 	bl	8000b0c <__aeabi_dcmplt>
 800d800:	3800      	subs	r0, #0
 800d802:	bf18      	it	ne
 800d804:	2001      	movne	r0, #1
 800d806:	e72b      	b.n	800d660 <__ieee754_pow+0x220>
 800d808:	60000000 	.word	0x60000000
 800d80c:	3ff71547 	.word	0x3ff71547
 800d810:	f85ddf44 	.word	0xf85ddf44
 800d814:	3e54ae0b 	.word	0x3e54ae0b
 800d818:	55555555 	.word	0x55555555
 800d81c:	3fd55555 	.word	0x3fd55555
 800d820:	652b82fe 	.word	0x652b82fe
 800d824:	3ff71547 	.word	0x3ff71547
 800d828:	00000000 	.word	0x00000000
 800d82c:	bff00000 	.word	0xbff00000
 800d830:	3ff00000 	.word	0x3ff00000
 800d834:	3fd00000 	.word	0x3fd00000
 800d838:	3fe00000 	.word	0x3fe00000
 800d83c:	408fffff 	.word	0x408fffff
 800d840:	4bd5      	ldr	r3, [pc, #852]	; (800db98 <__ieee754_pow+0x758>)
 800d842:	402b      	ands	r3, r5
 800d844:	2200      	movs	r2, #0
 800d846:	b92b      	cbnz	r3, 800d854 <__ieee754_pow+0x414>
 800d848:	4bd4      	ldr	r3, [pc, #848]	; (800db9c <__ieee754_pow+0x75c>)
 800d84a:	f7f2 feed 	bl	8000628 <__aeabi_dmul>
 800d84e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d852:	460c      	mov	r4, r1
 800d854:	1523      	asrs	r3, r4, #20
 800d856:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d85a:	4413      	add	r3, r2
 800d85c:	9305      	str	r3, [sp, #20]
 800d85e:	4bd0      	ldr	r3, [pc, #832]	; (800dba0 <__ieee754_pow+0x760>)
 800d860:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d864:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d868:	429c      	cmp	r4, r3
 800d86a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d86e:	dd08      	ble.n	800d882 <__ieee754_pow+0x442>
 800d870:	4bcc      	ldr	r3, [pc, #816]	; (800dba4 <__ieee754_pow+0x764>)
 800d872:	429c      	cmp	r4, r3
 800d874:	f340 8162 	ble.w	800db3c <__ieee754_pow+0x6fc>
 800d878:	9b05      	ldr	r3, [sp, #20]
 800d87a:	3301      	adds	r3, #1
 800d87c:	9305      	str	r3, [sp, #20]
 800d87e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d882:	2400      	movs	r4, #0
 800d884:	00e3      	lsls	r3, r4, #3
 800d886:	9307      	str	r3, [sp, #28]
 800d888:	4bc7      	ldr	r3, [pc, #796]	; (800dba8 <__ieee754_pow+0x768>)
 800d88a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d88e:	ed93 7b00 	vldr	d7, [r3]
 800d892:	4629      	mov	r1, r5
 800d894:	ec53 2b17 	vmov	r2, r3, d7
 800d898:	eeb0 9a47 	vmov.f32	s18, s14
 800d89c:	eef0 9a67 	vmov.f32	s19, s15
 800d8a0:	4682      	mov	sl, r0
 800d8a2:	f7f2 fd09 	bl	80002b8 <__aeabi_dsub>
 800d8a6:	4652      	mov	r2, sl
 800d8a8:	4606      	mov	r6, r0
 800d8aa:	460f      	mov	r7, r1
 800d8ac:	462b      	mov	r3, r5
 800d8ae:	ec51 0b19 	vmov	r0, r1, d9
 800d8b2:	f7f2 fd03 	bl	80002bc <__adddf3>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	49bb      	ldr	r1, [pc, #748]	; (800dbac <__ieee754_pow+0x76c>)
 800d8be:	f7f2 ffdd 	bl	800087c <__aeabi_ddiv>
 800d8c2:	ec41 0b1a 	vmov	d10, r0, r1
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f2 feab 	bl	8000628 <__aeabi_dmul>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8d8:	9302      	str	r3, [sp, #8]
 800d8da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d8de:	46ab      	mov	fp, r5
 800d8e0:	106d      	asrs	r5, r5, #1
 800d8e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d8e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d8ea:	ec41 0b18 	vmov	d8, r0, r1
 800d8ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	4640      	mov	r0, r8
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	4614      	mov	r4, r2
 800d8fa:	461d      	mov	r5, r3
 800d8fc:	f7f2 fe94 	bl	8000628 <__aeabi_dmul>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4630      	mov	r0, r6
 800d906:	4639      	mov	r1, r7
 800d908:	f7f2 fcd6 	bl	80002b8 <__aeabi_dsub>
 800d90c:	ec53 2b19 	vmov	r2, r3, d9
 800d910:	4606      	mov	r6, r0
 800d912:	460f      	mov	r7, r1
 800d914:	4620      	mov	r0, r4
 800d916:	4629      	mov	r1, r5
 800d918:	f7f2 fcce 	bl	80002b8 <__aeabi_dsub>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	4650      	mov	r0, sl
 800d922:	4659      	mov	r1, fp
 800d924:	f7f2 fcc8 	bl	80002b8 <__aeabi_dsub>
 800d928:	4642      	mov	r2, r8
 800d92a:	464b      	mov	r3, r9
 800d92c:	f7f2 fe7c 	bl	8000628 <__aeabi_dmul>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	4630      	mov	r0, r6
 800d936:	4639      	mov	r1, r7
 800d938:	f7f2 fcbe 	bl	80002b8 <__aeabi_dsub>
 800d93c:	ec53 2b1a 	vmov	r2, r3, d10
 800d940:	f7f2 fe72 	bl	8000628 <__aeabi_dmul>
 800d944:	ec53 2b18 	vmov	r2, r3, d8
 800d948:	ec41 0b19 	vmov	d9, r0, r1
 800d94c:	ec51 0b18 	vmov	r0, r1, d8
 800d950:	f7f2 fe6a 	bl	8000628 <__aeabi_dmul>
 800d954:	a37c      	add	r3, pc, #496	; (adr r3, 800db48 <__ieee754_pow+0x708>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	4604      	mov	r4, r0
 800d95c:	460d      	mov	r5, r1
 800d95e:	f7f2 fe63 	bl	8000628 <__aeabi_dmul>
 800d962:	a37b      	add	r3, pc, #492	; (adr r3, 800db50 <__ieee754_pow+0x710>)
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	f7f2 fca8 	bl	80002bc <__adddf3>
 800d96c:	4622      	mov	r2, r4
 800d96e:	462b      	mov	r3, r5
 800d970:	f7f2 fe5a 	bl	8000628 <__aeabi_dmul>
 800d974:	a378      	add	r3, pc, #480	; (adr r3, 800db58 <__ieee754_pow+0x718>)
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	f7f2 fc9f 	bl	80002bc <__adddf3>
 800d97e:	4622      	mov	r2, r4
 800d980:	462b      	mov	r3, r5
 800d982:	f7f2 fe51 	bl	8000628 <__aeabi_dmul>
 800d986:	a376      	add	r3, pc, #472	; (adr r3, 800db60 <__ieee754_pow+0x720>)
 800d988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98c:	f7f2 fc96 	bl	80002bc <__adddf3>
 800d990:	4622      	mov	r2, r4
 800d992:	462b      	mov	r3, r5
 800d994:	f7f2 fe48 	bl	8000628 <__aeabi_dmul>
 800d998:	a373      	add	r3, pc, #460	; (adr r3, 800db68 <__ieee754_pow+0x728>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	f7f2 fc8d 	bl	80002bc <__adddf3>
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	462b      	mov	r3, r5
 800d9a6:	f7f2 fe3f 	bl	8000628 <__aeabi_dmul>
 800d9aa:	a371      	add	r3, pc, #452	; (adr r3, 800db70 <__ieee754_pow+0x730>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	f7f2 fc84 	bl	80002bc <__adddf3>
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	460f      	mov	r7, r1
 800d9ba:	462b      	mov	r3, r5
 800d9bc:	4620      	mov	r0, r4
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7f2 fe32 	bl	8000628 <__aeabi_dmul>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	f7f2 fe2c 	bl	8000628 <__aeabi_dmul>
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	460d      	mov	r5, r1
 800d9d6:	464b      	mov	r3, r9
 800d9d8:	ec51 0b18 	vmov	r0, r1, d8
 800d9dc:	f7f2 fc6e 	bl	80002bc <__adddf3>
 800d9e0:	ec53 2b19 	vmov	r2, r3, d9
 800d9e4:	f7f2 fe20 	bl	8000628 <__aeabi_dmul>
 800d9e8:	4622      	mov	r2, r4
 800d9ea:	462b      	mov	r3, r5
 800d9ec:	f7f2 fc66 	bl	80002bc <__adddf3>
 800d9f0:	4642      	mov	r2, r8
 800d9f2:	4682      	mov	sl, r0
 800d9f4:	468b      	mov	fp, r1
 800d9f6:	464b      	mov	r3, r9
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	f7f2 fe14 	bl	8000628 <__aeabi_dmul>
 800da00:	4b6b      	ldr	r3, [pc, #428]	; (800dbb0 <__ieee754_pow+0x770>)
 800da02:	2200      	movs	r2, #0
 800da04:	4606      	mov	r6, r0
 800da06:	460f      	mov	r7, r1
 800da08:	f7f2 fc58 	bl	80002bc <__adddf3>
 800da0c:	4652      	mov	r2, sl
 800da0e:	465b      	mov	r3, fp
 800da10:	f7f2 fc54 	bl	80002bc <__adddf3>
 800da14:	2000      	movs	r0, #0
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	4640      	mov	r0, r8
 800da20:	4649      	mov	r1, r9
 800da22:	f7f2 fe01 	bl	8000628 <__aeabi_dmul>
 800da26:	4b62      	ldr	r3, [pc, #392]	; (800dbb0 <__ieee754_pow+0x770>)
 800da28:	4680      	mov	r8, r0
 800da2a:	4689      	mov	r9, r1
 800da2c:	2200      	movs	r2, #0
 800da2e:	4620      	mov	r0, r4
 800da30:	4629      	mov	r1, r5
 800da32:	f7f2 fc41 	bl	80002b8 <__aeabi_dsub>
 800da36:	4632      	mov	r2, r6
 800da38:	463b      	mov	r3, r7
 800da3a:	f7f2 fc3d 	bl	80002b8 <__aeabi_dsub>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	4650      	mov	r0, sl
 800da44:	4659      	mov	r1, fp
 800da46:	f7f2 fc37 	bl	80002b8 <__aeabi_dsub>
 800da4a:	ec53 2b18 	vmov	r2, r3, d8
 800da4e:	f7f2 fdeb 	bl	8000628 <__aeabi_dmul>
 800da52:	4622      	mov	r2, r4
 800da54:	4606      	mov	r6, r0
 800da56:	460f      	mov	r7, r1
 800da58:	462b      	mov	r3, r5
 800da5a:	ec51 0b19 	vmov	r0, r1, d9
 800da5e:	f7f2 fde3 	bl	8000628 <__aeabi_dmul>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4630      	mov	r0, r6
 800da68:	4639      	mov	r1, r7
 800da6a:	f7f2 fc27 	bl	80002bc <__adddf3>
 800da6e:	4606      	mov	r6, r0
 800da70:	460f      	mov	r7, r1
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4640      	mov	r0, r8
 800da78:	4649      	mov	r1, r9
 800da7a:	f7f2 fc1f 	bl	80002bc <__adddf3>
 800da7e:	a33e      	add	r3, pc, #248	; (adr r3, 800db78 <__ieee754_pow+0x738>)
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	2000      	movs	r0, #0
 800da86:	4604      	mov	r4, r0
 800da88:	460d      	mov	r5, r1
 800da8a:	f7f2 fdcd 	bl	8000628 <__aeabi_dmul>
 800da8e:	4642      	mov	r2, r8
 800da90:	ec41 0b18 	vmov	d8, r0, r1
 800da94:	464b      	mov	r3, r9
 800da96:	4620      	mov	r0, r4
 800da98:	4629      	mov	r1, r5
 800da9a:	f7f2 fc0d 	bl	80002b8 <__aeabi_dsub>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	4630      	mov	r0, r6
 800daa4:	4639      	mov	r1, r7
 800daa6:	f7f2 fc07 	bl	80002b8 <__aeabi_dsub>
 800daaa:	a335      	add	r3, pc, #212	; (adr r3, 800db80 <__ieee754_pow+0x740>)
 800daac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab0:	f7f2 fdba 	bl	8000628 <__aeabi_dmul>
 800dab4:	a334      	add	r3, pc, #208	; (adr r3, 800db88 <__ieee754_pow+0x748>)
 800dab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daba:	4606      	mov	r6, r0
 800dabc:	460f      	mov	r7, r1
 800dabe:	4620      	mov	r0, r4
 800dac0:	4629      	mov	r1, r5
 800dac2:	f7f2 fdb1 	bl	8000628 <__aeabi_dmul>
 800dac6:	4602      	mov	r2, r0
 800dac8:	460b      	mov	r3, r1
 800daca:	4630      	mov	r0, r6
 800dacc:	4639      	mov	r1, r7
 800dace:	f7f2 fbf5 	bl	80002bc <__adddf3>
 800dad2:	9a07      	ldr	r2, [sp, #28]
 800dad4:	4b37      	ldr	r3, [pc, #220]	; (800dbb4 <__ieee754_pow+0x774>)
 800dad6:	4413      	add	r3, r2
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	f7f2 fbee 	bl	80002bc <__adddf3>
 800dae0:	4682      	mov	sl, r0
 800dae2:	9805      	ldr	r0, [sp, #20]
 800dae4:	468b      	mov	fp, r1
 800dae6:	f7f2 fd35 	bl	8000554 <__aeabi_i2d>
 800daea:	9a07      	ldr	r2, [sp, #28]
 800daec:	4b32      	ldr	r3, [pc, #200]	; (800dbb8 <__ieee754_pow+0x778>)
 800daee:	4413      	add	r3, r2
 800daf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800daf4:	4606      	mov	r6, r0
 800daf6:	460f      	mov	r7, r1
 800daf8:	4652      	mov	r2, sl
 800dafa:	465b      	mov	r3, fp
 800dafc:	ec51 0b18 	vmov	r0, r1, d8
 800db00:	f7f2 fbdc 	bl	80002bc <__adddf3>
 800db04:	4642      	mov	r2, r8
 800db06:	464b      	mov	r3, r9
 800db08:	f7f2 fbd8 	bl	80002bc <__adddf3>
 800db0c:	4632      	mov	r2, r6
 800db0e:	463b      	mov	r3, r7
 800db10:	f7f2 fbd4 	bl	80002bc <__adddf3>
 800db14:	2000      	movs	r0, #0
 800db16:	4632      	mov	r2, r6
 800db18:	463b      	mov	r3, r7
 800db1a:	4604      	mov	r4, r0
 800db1c:	460d      	mov	r5, r1
 800db1e:	f7f2 fbcb 	bl	80002b8 <__aeabi_dsub>
 800db22:	4642      	mov	r2, r8
 800db24:	464b      	mov	r3, r9
 800db26:	f7f2 fbc7 	bl	80002b8 <__aeabi_dsub>
 800db2a:	ec53 2b18 	vmov	r2, r3, d8
 800db2e:	f7f2 fbc3 	bl	80002b8 <__aeabi_dsub>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	4650      	mov	r0, sl
 800db38:	4659      	mov	r1, fp
 800db3a:	e610      	b.n	800d75e <__ieee754_pow+0x31e>
 800db3c:	2401      	movs	r4, #1
 800db3e:	e6a1      	b.n	800d884 <__ieee754_pow+0x444>
 800db40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800db90 <__ieee754_pow+0x750>
 800db44:	e617      	b.n	800d776 <__ieee754_pow+0x336>
 800db46:	bf00      	nop
 800db48:	4a454eef 	.word	0x4a454eef
 800db4c:	3fca7e28 	.word	0x3fca7e28
 800db50:	93c9db65 	.word	0x93c9db65
 800db54:	3fcd864a 	.word	0x3fcd864a
 800db58:	a91d4101 	.word	0xa91d4101
 800db5c:	3fd17460 	.word	0x3fd17460
 800db60:	518f264d 	.word	0x518f264d
 800db64:	3fd55555 	.word	0x3fd55555
 800db68:	db6fabff 	.word	0xdb6fabff
 800db6c:	3fdb6db6 	.word	0x3fdb6db6
 800db70:	33333303 	.word	0x33333303
 800db74:	3fe33333 	.word	0x3fe33333
 800db78:	e0000000 	.word	0xe0000000
 800db7c:	3feec709 	.word	0x3feec709
 800db80:	dc3a03fd 	.word	0xdc3a03fd
 800db84:	3feec709 	.word	0x3feec709
 800db88:	145b01f5 	.word	0x145b01f5
 800db8c:	be3e2fe0 	.word	0xbe3e2fe0
 800db90:	00000000 	.word	0x00000000
 800db94:	3ff00000 	.word	0x3ff00000
 800db98:	7ff00000 	.word	0x7ff00000
 800db9c:	43400000 	.word	0x43400000
 800dba0:	0003988e 	.word	0x0003988e
 800dba4:	000bb679 	.word	0x000bb679
 800dba8:	0800fa08 	.word	0x0800fa08
 800dbac:	3ff00000 	.word	0x3ff00000
 800dbb0:	40080000 	.word	0x40080000
 800dbb4:	0800fa28 	.word	0x0800fa28
 800dbb8:	0800fa18 	.word	0x0800fa18
 800dbbc:	a3b5      	add	r3, pc, #724	; (adr r3, 800de94 <__ieee754_pow+0xa54>)
 800dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	f7f2 fb79 	bl	80002bc <__adddf3>
 800dbca:	4622      	mov	r2, r4
 800dbcc:	ec41 0b1a 	vmov	d10, r0, r1
 800dbd0:	462b      	mov	r3, r5
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	4639      	mov	r1, r7
 800dbd6:	f7f2 fb6f 	bl	80002b8 <__aeabi_dsub>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	460b      	mov	r3, r1
 800dbde:	ec51 0b1a 	vmov	r0, r1, d10
 800dbe2:	f7f2 ffb1 	bl	8000b48 <__aeabi_dcmpgt>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	f47f ae04 	bne.w	800d7f4 <__ieee754_pow+0x3b4>
 800dbec:	4aa4      	ldr	r2, [pc, #656]	; (800de80 <__ieee754_pow+0xa40>)
 800dbee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	f340 8108 	ble.w	800de08 <__ieee754_pow+0x9c8>
 800dbf8:	151b      	asrs	r3, r3, #20
 800dbfa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dbfe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dc02:	fa4a f303 	asr.w	r3, sl, r3
 800dc06:	445b      	add	r3, fp
 800dc08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dc0c:	4e9d      	ldr	r6, [pc, #628]	; (800de84 <__ieee754_pow+0xa44>)
 800dc0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dc12:	4116      	asrs	r6, r2
 800dc14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dc18:	2000      	movs	r0, #0
 800dc1a:	ea23 0106 	bic.w	r1, r3, r6
 800dc1e:	f1c2 0214 	rsb	r2, r2, #20
 800dc22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dc26:	fa4a fa02 	asr.w	sl, sl, r2
 800dc2a:	f1bb 0f00 	cmp.w	fp, #0
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	4620      	mov	r0, r4
 800dc34:	4629      	mov	r1, r5
 800dc36:	bfb8      	it	lt
 800dc38:	f1ca 0a00 	rsblt	sl, sl, #0
 800dc3c:	f7f2 fb3c 	bl	80002b8 <__aeabi_dsub>
 800dc40:	ec41 0b19 	vmov	d9, r0, r1
 800dc44:	4642      	mov	r2, r8
 800dc46:	464b      	mov	r3, r9
 800dc48:	ec51 0b19 	vmov	r0, r1, d9
 800dc4c:	f7f2 fb36 	bl	80002bc <__adddf3>
 800dc50:	a37b      	add	r3, pc, #492	; (adr r3, 800de40 <__ieee754_pow+0xa00>)
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	2000      	movs	r0, #0
 800dc58:	4604      	mov	r4, r0
 800dc5a:	460d      	mov	r5, r1
 800dc5c:	f7f2 fce4 	bl	8000628 <__aeabi_dmul>
 800dc60:	ec53 2b19 	vmov	r2, r3, d9
 800dc64:	4606      	mov	r6, r0
 800dc66:	460f      	mov	r7, r1
 800dc68:	4620      	mov	r0, r4
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	f7f2 fb24 	bl	80002b8 <__aeabi_dsub>
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4640      	mov	r0, r8
 800dc76:	4649      	mov	r1, r9
 800dc78:	f7f2 fb1e 	bl	80002b8 <__aeabi_dsub>
 800dc7c:	a372      	add	r3, pc, #456	; (adr r3, 800de48 <__ieee754_pow+0xa08>)
 800dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc82:	f7f2 fcd1 	bl	8000628 <__aeabi_dmul>
 800dc86:	a372      	add	r3, pc, #456	; (adr r3, 800de50 <__ieee754_pow+0xa10>)
 800dc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8c:	4680      	mov	r8, r0
 800dc8e:	4689      	mov	r9, r1
 800dc90:	4620      	mov	r0, r4
 800dc92:	4629      	mov	r1, r5
 800dc94:	f7f2 fcc8 	bl	8000628 <__aeabi_dmul>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4640      	mov	r0, r8
 800dc9e:	4649      	mov	r1, r9
 800dca0:	f7f2 fb0c 	bl	80002bc <__adddf3>
 800dca4:	4604      	mov	r4, r0
 800dca6:	460d      	mov	r5, r1
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	4630      	mov	r0, r6
 800dcae:	4639      	mov	r1, r7
 800dcb0:	f7f2 fb04 	bl	80002bc <__adddf3>
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	463b      	mov	r3, r7
 800dcb8:	4680      	mov	r8, r0
 800dcba:	4689      	mov	r9, r1
 800dcbc:	f7f2 fafc 	bl	80002b8 <__aeabi_dsub>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	f7f2 faf6 	bl	80002b8 <__aeabi_dsub>
 800dccc:	4642      	mov	r2, r8
 800dcce:	4606      	mov	r6, r0
 800dcd0:	460f      	mov	r7, r1
 800dcd2:	464b      	mov	r3, r9
 800dcd4:	4640      	mov	r0, r8
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	f7f2 fca6 	bl	8000628 <__aeabi_dmul>
 800dcdc:	a35e      	add	r3, pc, #376	; (adr r3, 800de58 <__ieee754_pow+0xa18>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	4604      	mov	r4, r0
 800dce4:	460d      	mov	r5, r1
 800dce6:	f7f2 fc9f 	bl	8000628 <__aeabi_dmul>
 800dcea:	a35d      	add	r3, pc, #372	; (adr r3, 800de60 <__ieee754_pow+0xa20>)
 800dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf0:	f7f2 fae2 	bl	80002b8 <__aeabi_dsub>
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	462b      	mov	r3, r5
 800dcf8:	f7f2 fc96 	bl	8000628 <__aeabi_dmul>
 800dcfc:	a35a      	add	r3, pc, #360	; (adr r3, 800de68 <__ieee754_pow+0xa28>)
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f7f2 fadb 	bl	80002bc <__adddf3>
 800dd06:	4622      	mov	r2, r4
 800dd08:	462b      	mov	r3, r5
 800dd0a:	f7f2 fc8d 	bl	8000628 <__aeabi_dmul>
 800dd0e:	a358      	add	r3, pc, #352	; (adr r3, 800de70 <__ieee754_pow+0xa30>)
 800dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd14:	f7f2 fad0 	bl	80002b8 <__aeabi_dsub>
 800dd18:	4622      	mov	r2, r4
 800dd1a:	462b      	mov	r3, r5
 800dd1c:	f7f2 fc84 	bl	8000628 <__aeabi_dmul>
 800dd20:	a355      	add	r3, pc, #340	; (adr r3, 800de78 <__ieee754_pow+0xa38>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	f7f2 fac9 	bl	80002bc <__adddf3>
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	462b      	mov	r3, r5
 800dd2e:	f7f2 fc7b 	bl	8000628 <__aeabi_dmul>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4640      	mov	r0, r8
 800dd38:	4649      	mov	r1, r9
 800dd3a:	f7f2 fabd 	bl	80002b8 <__aeabi_dsub>
 800dd3e:	4604      	mov	r4, r0
 800dd40:	460d      	mov	r5, r1
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4640      	mov	r0, r8
 800dd48:	4649      	mov	r1, r9
 800dd4a:	f7f2 fc6d 	bl	8000628 <__aeabi_dmul>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	ec41 0b19 	vmov	d9, r0, r1
 800dd54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd58:	4620      	mov	r0, r4
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	f7f2 faac 	bl	80002b8 <__aeabi_dsub>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	ec51 0b19 	vmov	r0, r1, d9
 800dd68:	f7f2 fd88 	bl	800087c <__aeabi_ddiv>
 800dd6c:	4632      	mov	r2, r6
 800dd6e:	4604      	mov	r4, r0
 800dd70:	460d      	mov	r5, r1
 800dd72:	463b      	mov	r3, r7
 800dd74:	4640      	mov	r0, r8
 800dd76:	4649      	mov	r1, r9
 800dd78:	f7f2 fc56 	bl	8000628 <__aeabi_dmul>
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	463b      	mov	r3, r7
 800dd80:	f7f2 fa9c 	bl	80002bc <__adddf3>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4620      	mov	r0, r4
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	f7f2 fa94 	bl	80002b8 <__aeabi_dsub>
 800dd90:	4642      	mov	r2, r8
 800dd92:	464b      	mov	r3, r9
 800dd94:	f7f2 fa90 	bl	80002b8 <__aeabi_dsub>
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	493a      	ldr	r1, [pc, #232]	; (800de88 <__ieee754_pow+0xa48>)
 800dd9e:	2000      	movs	r0, #0
 800dda0:	f7f2 fa8a 	bl	80002b8 <__aeabi_dsub>
 800dda4:	ec41 0b10 	vmov	d0, r0, r1
 800dda8:	ee10 3a90 	vmov	r3, s1
 800ddac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ddb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddb4:	da2b      	bge.n	800de0e <__ieee754_pow+0x9ce>
 800ddb6:	4650      	mov	r0, sl
 800ddb8:	f001 fa6e 	bl	800f298 <scalbn>
 800ddbc:	ec51 0b10 	vmov	r0, r1, d0
 800ddc0:	ec53 2b18 	vmov	r2, r3, d8
 800ddc4:	f7ff bbed 	b.w	800d5a2 <__ieee754_pow+0x162>
 800ddc8:	4b30      	ldr	r3, [pc, #192]	; (800de8c <__ieee754_pow+0xa4c>)
 800ddca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ddce:	429e      	cmp	r6, r3
 800ddd0:	f77f af0c 	ble.w	800dbec <__ieee754_pow+0x7ac>
 800ddd4:	4b2e      	ldr	r3, [pc, #184]	; (800de90 <__ieee754_pow+0xa50>)
 800ddd6:	440b      	add	r3, r1
 800ddd8:	4303      	orrs	r3, r0
 800ddda:	d009      	beq.n	800ddf0 <__ieee754_pow+0x9b0>
 800dddc:	ec51 0b18 	vmov	r0, r1, d8
 800dde0:	2200      	movs	r2, #0
 800dde2:	2300      	movs	r3, #0
 800dde4:	f7f2 fe92 	bl	8000b0c <__aeabi_dcmplt>
 800dde8:	3800      	subs	r0, #0
 800ddea:	bf18      	it	ne
 800ddec:	2001      	movne	r0, #1
 800ddee:	e447      	b.n	800d680 <__ieee754_pow+0x240>
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	f7f2 fa60 	bl	80002b8 <__aeabi_dsub>
 800ddf8:	4642      	mov	r2, r8
 800ddfa:	464b      	mov	r3, r9
 800ddfc:	f7f2 fe9a 	bl	8000b34 <__aeabi_dcmpge>
 800de00:	2800      	cmp	r0, #0
 800de02:	f43f aef3 	beq.w	800dbec <__ieee754_pow+0x7ac>
 800de06:	e7e9      	b.n	800dddc <__ieee754_pow+0x99c>
 800de08:	f04f 0a00 	mov.w	sl, #0
 800de0c:	e71a      	b.n	800dc44 <__ieee754_pow+0x804>
 800de0e:	ec51 0b10 	vmov	r0, r1, d0
 800de12:	4619      	mov	r1, r3
 800de14:	e7d4      	b.n	800ddc0 <__ieee754_pow+0x980>
 800de16:	491c      	ldr	r1, [pc, #112]	; (800de88 <__ieee754_pow+0xa48>)
 800de18:	2000      	movs	r0, #0
 800de1a:	f7ff bb30 	b.w	800d47e <__ieee754_pow+0x3e>
 800de1e:	2000      	movs	r0, #0
 800de20:	2100      	movs	r1, #0
 800de22:	f7ff bb2c 	b.w	800d47e <__ieee754_pow+0x3e>
 800de26:	4630      	mov	r0, r6
 800de28:	4639      	mov	r1, r7
 800de2a:	f7ff bb28 	b.w	800d47e <__ieee754_pow+0x3e>
 800de2e:	9204      	str	r2, [sp, #16]
 800de30:	f7ff bb7a 	b.w	800d528 <__ieee754_pow+0xe8>
 800de34:	2300      	movs	r3, #0
 800de36:	f7ff bb64 	b.w	800d502 <__ieee754_pow+0xc2>
 800de3a:	bf00      	nop
 800de3c:	f3af 8000 	nop.w
 800de40:	00000000 	.word	0x00000000
 800de44:	3fe62e43 	.word	0x3fe62e43
 800de48:	fefa39ef 	.word	0xfefa39ef
 800de4c:	3fe62e42 	.word	0x3fe62e42
 800de50:	0ca86c39 	.word	0x0ca86c39
 800de54:	be205c61 	.word	0xbe205c61
 800de58:	72bea4d0 	.word	0x72bea4d0
 800de5c:	3e663769 	.word	0x3e663769
 800de60:	c5d26bf1 	.word	0xc5d26bf1
 800de64:	3ebbbd41 	.word	0x3ebbbd41
 800de68:	af25de2c 	.word	0xaf25de2c
 800de6c:	3f11566a 	.word	0x3f11566a
 800de70:	16bebd93 	.word	0x16bebd93
 800de74:	3f66c16c 	.word	0x3f66c16c
 800de78:	5555553e 	.word	0x5555553e
 800de7c:	3fc55555 	.word	0x3fc55555
 800de80:	3fe00000 	.word	0x3fe00000
 800de84:	000fffff 	.word	0x000fffff
 800de88:	3ff00000 	.word	0x3ff00000
 800de8c:	4090cbff 	.word	0x4090cbff
 800de90:	3f6f3400 	.word	0x3f6f3400
 800de94:	652b82fe 	.word	0x652b82fe
 800de98:	3c971547 	.word	0x3c971547
 800de9c:	00000000 	.word	0x00000000

0800dea0 <__ieee754_rem_pio2>:
 800dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	ed2d 8b02 	vpush	{d8}
 800dea8:	ec55 4b10 	vmov	r4, r5, d0
 800deac:	4bca      	ldr	r3, [pc, #808]	; (800e1d8 <__ieee754_rem_pio2+0x338>)
 800deae:	b08b      	sub	sp, #44	; 0x2c
 800deb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800deb4:	4598      	cmp	r8, r3
 800deb6:	4682      	mov	sl, r0
 800deb8:	9502      	str	r5, [sp, #8]
 800deba:	dc08      	bgt.n	800dece <__ieee754_rem_pio2+0x2e>
 800debc:	2200      	movs	r2, #0
 800debe:	2300      	movs	r3, #0
 800dec0:	ed80 0b00 	vstr	d0, [r0]
 800dec4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dec8:	f04f 0b00 	mov.w	fp, #0
 800decc:	e028      	b.n	800df20 <__ieee754_rem_pio2+0x80>
 800dece:	4bc3      	ldr	r3, [pc, #780]	; (800e1dc <__ieee754_rem_pio2+0x33c>)
 800ded0:	4598      	cmp	r8, r3
 800ded2:	dc78      	bgt.n	800dfc6 <__ieee754_rem_pio2+0x126>
 800ded4:	9b02      	ldr	r3, [sp, #8]
 800ded6:	4ec2      	ldr	r6, [pc, #776]	; (800e1e0 <__ieee754_rem_pio2+0x340>)
 800ded8:	2b00      	cmp	r3, #0
 800deda:	ee10 0a10 	vmov	r0, s0
 800dede:	a3b0      	add	r3, pc, #704	; (adr r3, 800e1a0 <__ieee754_rem_pio2+0x300>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	4629      	mov	r1, r5
 800dee6:	dd39      	ble.n	800df5c <__ieee754_rem_pio2+0xbc>
 800dee8:	f7f2 f9e6 	bl	80002b8 <__aeabi_dsub>
 800deec:	45b0      	cmp	r8, r6
 800deee:	4604      	mov	r4, r0
 800def0:	460d      	mov	r5, r1
 800def2:	d01b      	beq.n	800df2c <__ieee754_rem_pio2+0x8c>
 800def4:	a3ac      	add	r3, pc, #688	; (adr r3, 800e1a8 <__ieee754_rem_pio2+0x308>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	f7f2 f9dd 	bl	80002b8 <__aeabi_dsub>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	e9ca 2300 	strd	r2, r3, [sl]
 800df06:	4620      	mov	r0, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	f7f2 f9d5 	bl	80002b8 <__aeabi_dsub>
 800df0e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e1a8 <__ieee754_rem_pio2+0x308>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	f7f2 f9d0 	bl	80002b8 <__aeabi_dsub>
 800df18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df1c:	f04f 0b01 	mov.w	fp, #1
 800df20:	4658      	mov	r0, fp
 800df22:	b00b      	add	sp, #44	; 0x2c
 800df24:	ecbd 8b02 	vpop	{d8}
 800df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1b0 <__ieee754_rem_pio2+0x310>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f9c1 	bl	80002b8 <__aeabi_dsub>
 800df36:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x318>)
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	4604      	mov	r4, r0
 800df3e:	460d      	mov	r5, r1
 800df40:	f7f2 f9ba 	bl	80002b8 <__aeabi_dsub>
 800df44:	4602      	mov	r2, r0
 800df46:	460b      	mov	r3, r1
 800df48:	e9ca 2300 	strd	r2, r3, [sl]
 800df4c:	4620      	mov	r0, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	f7f2 f9b2 	bl	80002b8 <__aeabi_dsub>
 800df54:	a398      	add	r3, pc, #608	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x318>)
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	e7db      	b.n	800df14 <__ieee754_rem_pio2+0x74>
 800df5c:	f7f2 f9ae 	bl	80002bc <__adddf3>
 800df60:	45b0      	cmp	r8, r6
 800df62:	4604      	mov	r4, r0
 800df64:	460d      	mov	r5, r1
 800df66:	d016      	beq.n	800df96 <__ieee754_rem_pio2+0xf6>
 800df68:	a38f      	add	r3, pc, #572	; (adr r3, 800e1a8 <__ieee754_rem_pio2+0x308>)
 800df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6e:	f7f2 f9a5 	bl	80002bc <__adddf3>
 800df72:	4602      	mov	r2, r0
 800df74:	460b      	mov	r3, r1
 800df76:	e9ca 2300 	strd	r2, r3, [sl]
 800df7a:	4620      	mov	r0, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	f7f2 f99b 	bl	80002b8 <__aeabi_dsub>
 800df82:	a389      	add	r3, pc, #548	; (adr r3, 800e1a8 <__ieee754_rem_pio2+0x308>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	f7f2 f998 	bl	80002bc <__adddf3>
 800df8c:	f04f 3bff 	mov.w	fp, #4294967295
 800df90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df94:	e7c4      	b.n	800df20 <__ieee754_rem_pio2+0x80>
 800df96:	a386      	add	r3, pc, #536	; (adr r3, 800e1b0 <__ieee754_rem_pio2+0x310>)
 800df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9c:	f7f2 f98e 	bl	80002bc <__adddf3>
 800dfa0:	a385      	add	r3, pc, #532	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x318>)
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	f7f2 f987 	bl	80002bc <__adddf3>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	e9ca 2300 	strd	r2, r3, [sl]
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7f2 f97d 	bl	80002b8 <__aeabi_dsub>
 800dfbe:	a37e      	add	r3, pc, #504	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x318>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	e7e0      	b.n	800df88 <__ieee754_rem_pio2+0xe8>
 800dfc6:	4b87      	ldr	r3, [pc, #540]	; (800e1e4 <__ieee754_rem_pio2+0x344>)
 800dfc8:	4598      	cmp	r8, r3
 800dfca:	f300 80d9 	bgt.w	800e180 <__ieee754_rem_pio2+0x2e0>
 800dfce:	f001 f8cf 	bl	800f170 <fabs>
 800dfd2:	ec55 4b10 	vmov	r4, r5, d0
 800dfd6:	ee10 0a10 	vmov	r0, s0
 800dfda:	a379      	add	r3, pc, #484	; (adr r3, 800e1c0 <__ieee754_rem_pio2+0x320>)
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	f7f2 fb21 	bl	8000628 <__aeabi_dmul>
 800dfe6:	4b80      	ldr	r3, [pc, #512]	; (800e1e8 <__ieee754_rem_pio2+0x348>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f7f2 f967 	bl	80002bc <__adddf3>
 800dfee:	f7f2 fdcb 	bl	8000b88 <__aeabi_d2iz>
 800dff2:	4683      	mov	fp, r0
 800dff4:	f7f2 faae 	bl	8000554 <__aeabi_i2d>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	ec43 2b18 	vmov	d8, r2, r3
 800e000:	a367      	add	r3, pc, #412	; (adr r3, 800e1a0 <__ieee754_rem_pio2+0x300>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	f7f2 fb0f 	bl	8000628 <__aeabi_dmul>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4620      	mov	r0, r4
 800e010:	4629      	mov	r1, r5
 800e012:	f7f2 f951 	bl	80002b8 <__aeabi_dsub>
 800e016:	a364      	add	r3, pc, #400	; (adr r3, 800e1a8 <__ieee754_rem_pio2+0x308>)
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	4606      	mov	r6, r0
 800e01e:	460f      	mov	r7, r1
 800e020:	ec51 0b18 	vmov	r0, r1, d8
 800e024:	f7f2 fb00 	bl	8000628 <__aeabi_dmul>
 800e028:	f1bb 0f1f 	cmp.w	fp, #31
 800e02c:	4604      	mov	r4, r0
 800e02e:	460d      	mov	r5, r1
 800e030:	dc0d      	bgt.n	800e04e <__ieee754_rem_pio2+0x1ae>
 800e032:	4b6e      	ldr	r3, [pc, #440]	; (800e1ec <__ieee754_rem_pio2+0x34c>)
 800e034:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e03c:	4543      	cmp	r3, r8
 800e03e:	d006      	beq.n	800e04e <__ieee754_rem_pio2+0x1ae>
 800e040:	4622      	mov	r2, r4
 800e042:	462b      	mov	r3, r5
 800e044:	4630      	mov	r0, r6
 800e046:	4639      	mov	r1, r7
 800e048:	f7f2 f936 	bl	80002b8 <__aeabi_dsub>
 800e04c:	e00f      	b.n	800e06e <__ieee754_rem_pio2+0x1ce>
 800e04e:	462b      	mov	r3, r5
 800e050:	4622      	mov	r2, r4
 800e052:	4630      	mov	r0, r6
 800e054:	4639      	mov	r1, r7
 800e056:	f7f2 f92f 	bl	80002b8 <__aeabi_dsub>
 800e05a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e05e:	9303      	str	r3, [sp, #12]
 800e060:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e064:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e068:	f1b8 0f10 	cmp.w	r8, #16
 800e06c:	dc02      	bgt.n	800e074 <__ieee754_rem_pio2+0x1d4>
 800e06e:	e9ca 0100 	strd	r0, r1, [sl]
 800e072:	e039      	b.n	800e0e8 <__ieee754_rem_pio2+0x248>
 800e074:	a34e      	add	r3, pc, #312	; (adr r3, 800e1b0 <__ieee754_rem_pio2+0x310>)
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	ec51 0b18 	vmov	r0, r1, d8
 800e07e:	f7f2 fad3 	bl	8000628 <__aeabi_dmul>
 800e082:	4604      	mov	r4, r0
 800e084:	460d      	mov	r5, r1
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	4630      	mov	r0, r6
 800e08c:	4639      	mov	r1, r7
 800e08e:	f7f2 f913 	bl	80002b8 <__aeabi_dsub>
 800e092:	4602      	mov	r2, r0
 800e094:	460b      	mov	r3, r1
 800e096:	4680      	mov	r8, r0
 800e098:	4689      	mov	r9, r1
 800e09a:	4630      	mov	r0, r6
 800e09c:	4639      	mov	r1, r7
 800e09e:	f7f2 f90b 	bl	80002b8 <__aeabi_dsub>
 800e0a2:	4622      	mov	r2, r4
 800e0a4:	462b      	mov	r3, r5
 800e0a6:	f7f2 f907 	bl	80002b8 <__aeabi_dsub>
 800e0aa:	a343      	add	r3, pc, #268	; (adr r3, 800e1b8 <__ieee754_rem_pio2+0x318>)
 800e0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	460d      	mov	r5, r1
 800e0b4:	ec51 0b18 	vmov	r0, r1, d8
 800e0b8:	f7f2 fab6 	bl	8000628 <__aeabi_dmul>
 800e0bc:	4622      	mov	r2, r4
 800e0be:	462b      	mov	r3, r5
 800e0c0:	f7f2 f8fa 	bl	80002b8 <__aeabi_dsub>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	460d      	mov	r5, r1
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	4649      	mov	r1, r9
 800e0d0:	f7f2 f8f2 	bl	80002b8 <__aeabi_dsub>
 800e0d4:	9a03      	ldr	r2, [sp, #12]
 800e0d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	2b31      	cmp	r3, #49	; 0x31
 800e0de:	dc24      	bgt.n	800e12a <__ieee754_rem_pio2+0x28a>
 800e0e0:	e9ca 0100 	strd	r0, r1, [sl]
 800e0e4:	4646      	mov	r6, r8
 800e0e6:	464f      	mov	r7, r9
 800e0e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	4642      	mov	r2, r8
 800e0f0:	464b      	mov	r3, r9
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	f7f2 f8e0 	bl	80002b8 <__aeabi_dsub>
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	4622      	mov	r2, r4
 800e0fc:	f7f2 f8dc 	bl	80002b8 <__aeabi_dsub>
 800e100:	9b02      	ldr	r3, [sp, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e108:	f6bf af0a 	bge.w	800df20 <__ieee754_rem_pio2+0x80>
 800e10c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e110:	f8ca 3004 	str.w	r3, [sl, #4]
 800e114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e118:	f8ca 8000 	str.w	r8, [sl]
 800e11c:	f8ca 0008 	str.w	r0, [sl, #8]
 800e120:	f8ca 300c 	str.w	r3, [sl, #12]
 800e124:	f1cb 0b00 	rsb	fp, fp, #0
 800e128:	e6fa      	b.n	800df20 <__ieee754_rem_pio2+0x80>
 800e12a:	a327      	add	r3, pc, #156	; (adr r3, 800e1c8 <__ieee754_rem_pio2+0x328>)
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	ec51 0b18 	vmov	r0, r1, d8
 800e134:	f7f2 fa78 	bl	8000628 <__aeabi_dmul>
 800e138:	4604      	mov	r4, r0
 800e13a:	460d      	mov	r5, r1
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	4640      	mov	r0, r8
 800e142:	4649      	mov	r1, r9
 800e144:	f7f2 f8b8 	bl	80002b8 <__aeabi_dsub>
 800e148:	4602      	mov	r2, r0
 800e14a:	460b      	mov	r3, r1
 800e14c:	4606      	mov	r6, r0
 800e14e:	460f      	mov	r7, r1
 800e150:	4640      	mov	r0, r8
 800e152:	4649      	mov	r1, r9
 800e154:	f7f2 f8b0 	bl	80002b8 <__aeabi_dsub>
 800e158:	4622      	mov	r2, r4
 800e15a:	462b      	mov	r3, r5
 800e15c:	f7f2 f8ac 	bl	80002b8 <__aeabi_dsub>
 800e160:	a31b      	add	r3, pc, #108	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x330>)
 800e162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e166:	4604      	mov	r4, r0
 800e168:	460d      	mov	r5, r1
 800e16a:	ec51 0b18 	vmov	r0, r1, d8
 800e16e:	f7f2 fa5b 	bl	8000628 <__aeabi_dmul>
 800e172:	4622      	mov	r2, r4
 800e174:	462b      	mov	r3, r5
 800e176:	f7f2 f89f 	bl	80002b8 <__aeabi_dsub>
 800e17a:	4604      	mov	r4, r0
 800e17c:	460d      	mov	r5, r1
 800e17e:	e75f      	b.n	800e040 <__ieee754_rem_pio2+0x1a0>
 800e180:	4b1b      	ldr	r3, [pc, #108]	; (800e1f0 <__ieee754_rem_pio2+0x350>)
 800e182:	4598      	cmp	r8, r3
 800e184:	dd36      	ble.n	800e1f4 <__ieee754_rem_pio2+0x354>
 800e186:	ee10 2a10 	vmov	r2, s0
 800e18a:	462b      	mov	r3, r5
 800e18c:	4620      	mov	r0, r4
 800e18e:	4629      	mov	r1, r5
 800e190:	f7f2 f892 	bl	80002b8 <__aeabi_dsub>
 800e194:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e198:	e9ca 0100 	strd	r0, r1, [sl]
 800e19c:	e694      	b.n	800dec8 <__ieee754_rem_pio2+0x28>
 800e19e:	bf00      	nop
 800e1a0:	54400000 	.word	0x54400000
 800e1a4:	3ff921fb 	.word	0x3ff921fb
 800e1a8:	1a626331 	.word	0x1a626331
 800e1ac:	3dd0b461 	.word	0x3dd0b461
 800e1b0:	1a600000 	.word	0x1a600000
 800e1b4:	3dd0b461 	.word	0x3dd0b461
 800e1b8:	2e037073 	.word	0x2e037073
 800e1bc:	3ba3198a 	.word	0x3ba3198a
 800e1c0:	6dc9c883 	.word	0x6dc9c883
 800e1c4:	3fe45f30 	.word	0x3fe45f30
 800e1c8:	2e000000 	.word	0x2e000000
 800e1cc:	3ba3198a 	.word	0x3ba3198a
 800e1d0:	252049c1 	.word	0x252049c1
 800e1d4:	397b839a 	.word	0x397b839a
 800e1d8:	3fe921fb 	.word	0x3fe921fb
 800e1dc:	4002d97b 	.word	0x4002d97b
 800e1e0:	3ff921fb 	.word	0x3ff921fb
 800e1e4:	413921fb 	.word	0x413921fb
 800e1e8:	3fe00000 	.word	0x3fe00000
 800e1ec:	0800fa38 	.word	0x0800fa38
 800e1f0:	7fefffff 	.word	0x7fefffff
 800e1f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e1f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e1fc:	ee10 0a10 	vmov	r0, s0
 800e200:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e204:	ee10 6a10 	vmov	r6, s0
 800e208:	460f      	mov	r7, r1
 800e20a:	f7f2 fcbd 	bl	8000b88 <__aeabi_d2iz>
 800e20e:	f7f2 f9a1 	bl	8000554 <__aeabi_i2d>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	4630      	mov	r0, r6
 800e218:	4639      	mov	r1, r7
 800e21a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e21e:	f7f2 f84b 	bl	80002b8 <__aeabi_dsub>
 800e222:	4b23      	ldr	r3, [pc, #140]	; (800e2b0 <__ieee754_rem_pio2+0x410>)
 800e224:	2200      	movs	r2, #0
 800e226:	f7f2 f9ff 	bl	8000628 <__aeabi_dmul>
 800e22a:	460f      	mov	r7, r1
 800e22c:	4606      	mov	r6, r0
 800e22e:	f7f2 fcab 	bl	8000b88 <__aeabi_d2iz>
 800e232:	f7f2 f98f 	bl	8000554 <__aeabi_i2d>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4630      	mov	r0, r6
 800e23c:	4639      	mov	r1, r7
 800e23e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e242:	f7f2 f839 	bl	80002b8 <__aeabi_dsub>
 800e246:	4b1a      	ldr	r3, [pc, #104]	; (800e2b0 <__ieee754_rem_pio2+0x410>)
 800e248:	2200      	movs	r2, #0
 800e24a:	f7f2 f9ed 	bl	8000628 <__aeabi_dmul>
 800e24e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e252:	ad04      	add	r5, sp, #16
 800e254:	f04f 0803 	mov.w	r8, #3
 800e258:	46a9      	mov	r9, r5
 800e25a:	2600      	movs	r6, #0
 800e25c:	2700      	movs	r7, #0
 800e25e:	4632      	mov	r2, r6
 800e260:	463b      	mov	r3, r7
 800e262:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e266:	46c3      	mov	fp, r8
 800e268:	3d08      	subs	r5, #8
 800e26a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e26e:	f7f2 fc43 	bl	8000af8 <__aeabi_dcmpeq>
 800e272:	2800      	cmp	r0, #0
 800e274:	d1f3      	bne.n	800e25e <__ieee754_rem_pio2+0x3be>
 800e276:	4b0f      	ldr	r3, [pc, #60]	; (800e2b4 <__ieee754_rem_pio2+0x414>)
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	2302      	movs	r3, #2
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	4622      	mov	r2, r4
 800e280:	465b      	mov	r3, fp
 800e282:	4651      	mov	r1, sl
 800e284:	4648      	mov	r0, r9
 800e286:	f000 f993 	bl	800e5b0 <__kernel_rem_pio2>
 800e28a:	9b02      	ldr	r3, [sp, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	4683      	mov	fp, r0
 800e290:	f6bf ae46 	bge.w	800df20 <__ieee754_rem_pio2+0x80>
 800e294:	e9da 2100 	ldrd	r2, r1, [sl]
 800e298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e29c:	e9ca 2300 	strd	r2, r3, [sl]
 800e2a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e2a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e2ac:	e73a      	b.n	800e124 <__ieee754_rem_pio2+0x284>
 800e2ae:	bf00      	nop
 800e2b0:	41700000 	.word	0x41700000
 800e2b4:	0800fab8 	.word	0x0800fab8

0800e2b8 <__ieee754_sqrt>:
 800e2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2bc:	ec55 4b10 	vmov	r4, r5, d0
 800e2c0:	4e55      	ldr	r6, [pc, #340]	; (800e418 <__ieee754_sqrt+0x160>)
 800e2c2:	43ae      	bics	r6, r5
 800e2c4:	ee10 0a10 	vmov	r0, s0
 800e2c8:	ee10 3a10 	vmov	r3, s0
 800e2cc:	462a      	mov	r2, r5
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	d110      	bne.n	800e2f4 <__ieee754_sqrt+0x3c>
 800e2d2:	ee10 2a10 	vmov	r2, s0
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	f7f2 f9a6 	bl	8000628 <__aeabi_dmul>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	4629      	mov	r1, r5
 800e2e4:	f7f1 ffea 	bl	80002bc <__adddf3>
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	ec45 4b10 	vmov	d0, r4, r5
 800e2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f4:	2d00      	cmp	r5, #0
 800e2f6:	dc10      	bgt.n	800e31a <__ieee754_sqrt+0x62>
 800e2f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e2fc:	4330      	orrs	r0, r6
 800e2fe:	d0f5      	beq.n	800e2ec <__ieee754_sqrt+0x34>
 800e300:	b15d      	cbz	r5, 800e31a <__ieee754_sqrt+0x62>
 800e302:	ee10 2a10 	vmov	r2, s0
 800e306:	462b      	mov	r3, r5
 800e308:	ee10 0a10 	vmov	r0, s0
 800e30c:	f7f1 ffd4 	bl	80002b8 <__aeabi_dsub>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	f7f2 fab2 	bl	800087c <__aeabi_ddiv>
 800e318:	e7e6      	b.n	800e2e8 <__ieee754_sqrt+0x30>
 800e31a:	1512      	asrs	r2, r2, #20
 800e31c:	d074      	beq.n	800e408 <__ieee754_sqrt+0x150>
 800e31e:	07d4      	lsls	r4, r2, #31
 800e320:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e324:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e328:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e32c:	bf5e      	ittt	pl
 800e32e:	0fda      	lsrpl	r2, r3, #31
 800e330:	005b      	lslpl	r3, r3, #1
 800e332:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e336:	2400      	movs	r4, #0
 800e338:	0fda      	lsrs	r2, r3, #31
 800e33a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e33e:	107f      	asrs	r7, r7, #1
 800e340:	005b      	lsls	r3, r3, #1
 800e342:	2516      	movs	r5, #22
 800e344:	4620      	mov	r0, r4
 800e346:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e34a:	1886      	adds	r6, r0, r2
 800e34c:	428e      	cmp	r6, r1
 800e34e:	bfde      	ittt	le
 800e350:	1b89      	suble	r1, r1, r6
 800e352:	18b0      	addle	r0, r6, r2
 800e354:	18a4      	addle	r4, r4, r2
 800e356:	0049      	lsls	r1, r1, #1
 800e358:	3d01      	subs	r5, #1
 800e35a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e35e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e362:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e366:	d1f0      	bne.n	800e34a <__ieee754_sqrt+0x92>
 800e368:	462a      	mov	r2, r5
 800e36a:	f04f 0e20 	mov.w	lr, #32
 800e36e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e372:	4281      	cmp	r1, r0
 800e374:	eb06 0c05 	add.w	ip, r6, r5
 800e378:	dc02      	bgt.n	800e380 <__ieee754_sqrt+0xc8>
 800e37a:	d113      	bne.n	800e3a4 <__ieee754_sqrt+0xec>
 800e37c:	459c      	cmp	ip, r3
 800e37e:	d811      	bhi.n	800e3a4 <__ieee754_sqrt+0xec>
 800e380:	f1bc 0f00 	cmp.w	ip, #0
 800e384:	eb0c 0506 	add.w	r5, ip, r6
 800e388:	da43      	bge.n	800e412 <__ieee754_sqrt+0x15a>
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	db41      	blt.n	800e412 <__ieee754_sqrt+0x15a>
 800e38e:	f100 0801 	add.w	r8, r0, #1
 800e392:	1a09      	subs	r1, r1, r0
 800e394:	459c      	cmp	ip, r3
 800e396:	bf88      	it	hi
 800e398:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e39c:	eba3 030c 	sub.w	r3, r3, ip
 800e3a0:	4432      	add	r2, r6
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e3a8:	f1be 0e01 	subs.w	lr, lr, #1
 800e3ac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e3b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e3b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e3b8:	d1db      	bne.n	800e372 <__ieee754_sqrt+0xba>
 800e3ba:	430b      	orrs	r3, r1
 800e3bc:	d006      	beq.n	800e3cc <__ieee754_sqrt+0x114>
 800e3be:	1c50      	adds	r0, r2, #1
 800e3c0:	bf13      	iteet	ne
 800e3c2:	3201      	addne	r2, #1
 800e3c4:	3401      	addeq	r4, #1
 800e3c6:	4672      	moveq	r2, lr
 800e3c8:	f022 0201 	bicne.w	r2, r2, #1
 800e3cc:	1063      	asrs	r3, r4, #1
 800e3ce:	0852      	lsrs	r2, r2, #1
 800e3d0:	07e1      	lsls	r1, r4, #31
 800e3d2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e3d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e3da:	bf48      	it	mi
 800e3dc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e3e0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	e781      	b.n	800e2ec <__ieee754_sqrt+0x34>
 800e3e8:	0ad9      	lsrs	r1, r3, #11
 800e3ea:	3815      	subs	r0, #21
 800e3ec:	055b      	lsls	r3, r3, #21
 800e3ee:	2900      	cmp	r1, #0
 800e3f0:	d0fa      	beq.n	800e3e8 <__ieee754_sqrt+0x130>
 800e3f2:	02cd      	lsls	r5, r1, #11
 800e3f4:	d50a      	bpl.n	800e40c <__ieee754_sqrt+0x154>
 800e3f6:	f1c2 0420 	rsb	r4, r2, #32
 800e3fa:	fa23 f404 	lsr.w	r4, r3, r4
 800e3fe:	1e55      	subs	r5, r2, #1
 800e400:	4093      	lsls	r3, r2
 800e402:	4321      	orrs	r1, r4
 800e404:	1b42      	subs	r2, r0, r5
 800e406:	e78a      	b.n	800e31e <__ieee754_sqrt+0x66>
 800e408:	4610      	mov	r0, r2
 800e40a:	e7f0      	b.n	800e3ee <__ieee754_sqrt+0x136>
 800e40c:	0049      	lsls	r1, r1, #1
 800e40e:	3201      	adds	r2, #1
 800e410:	e7ef      	b.n	800e3f2 <__ieee754_sqrt+0x13a>
 800e412:	4680      	mov	r8, r0
 800e414:	e7bd      	b.n	800e392 <__ieee754_sqrt+0xda>
 800e416:	bf00      	nop
 800e418:	7ff00000 	.word	0x7ff00000
 800e41c:	00000000 	.word	0x00000000

0800e420 <__kernel_cos>:
 800e420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	ec57 6b10 	vmov	r6, r7, d0
 800e428:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e42c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e430:	ed8d 1b00 	vstr	d1, [sp]
 800e434:	da07      	bge.n	800e446 <__kernel_cos+0x26>
 800e436:	ee10 0a10 	vmov	r0, s0
 800e43a:	4639      	mov	r1, r7
 800e43c:	f7f2 fba4 	bl	8000b88 <__aeabi_d2iz>
 800e440:	2800      	cmp	r0, #0
 800e442:	f000 8088 	beq.w	800e556 <__kernel_cos+0x136>
 800e446:	4632      	mov	r2, r6
 800e448:	463b      	mov	r3, r7
 800e44a:	4630      	mov	r0, r6
 800e44c:	4639      	mov	r1, r7
 800e44e:	f7f2 f8eb 	bl	8000628 <__aeabi_dmul>
 800e452:	4b51      	ldr	r3, [pc, #324]	; (800e598 <__kernel_cos+0x178>)
 800e454:	2200      	movs	r2, #0
 800e456:	4604      	mov	r4, r0
 800e458:	460d      	mov	r5, r1
 800e45a:	f7f2 f8e5 	bl	8000628 <__aeabi_dmul>
 800e45e:	a340      	add	r3, pc, #256	; (adr r3, 800e560 <__kernel_cos+0x140>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	4682      	mov	sl, r0
 800e466:	468b      	mov	fp, r1
 800e468:	4620      	mov	r0, r4
 800e46a:	4629      	mov	r1, r5
 800e46c:	f7f2 f8dc 	bl	8000628 <__aeabi_dmul>
 800e470:	a33d      	add	r3, pc, #244	; (adr r3, 800e568 <__kernel_cos+0x148>)
 800e472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e476:	f7f1 ff21 	bl	80002bc <__adddf3>
 800e47a:	4622      	mov	r2, r4
 800e47c:	462b      	mov	r3, r5
 800e47e:	f7f2 f8d3 	bl	8000628 <__aeabi_dmul>
 800e482:	a33b      	add	r3, pc, #236	; (adr r3, 800e570 <__kernel_cos+0x150>)
 800e484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e488:	f7f1 ff16 	bl	80002b8 <__aeabi_dsub>
 800e48c:	4622      	mov	r2, r4
 800e48e:	462b      	mov	r3, r5
 800e490:	f7f2 f8ca 	bl	8000628 <__aeabi_dmul>
 800e494:	a338      	add	r3, pc, #224	; (adr r3, 800e578 <__kernel_cos+0x158>)
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	f7f1 ff0f 	bl	80002bc <__adddf3>
 800e49e:	4622      	mov	r2, r4
 800e4a0:	462b      	mov	r3, r5
 800e4a2:	f7f2 f8c1 	bl	8000628 <__aeabi_dmul>
 800e4a6:	a336      	add	r3, pc, #216	; (adr r3, 800e580 <__kernel_cos+0x160>)
 800e4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ac:	f7f1 ff04 	bl	80002b8 <__aeabi_dsub>
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	462b      	mov	r3, r5
 800e4b4:	f7f2 f8b8 	bl	8000628 <__aeabi_dmul>
 800e4b8:	a333      	add	r3, pc, #204	; (adr r3, 800e588 <__kernel_cos+0x168>)
 800e4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4be:	f7f1 fefd 	bl	80002bc <__adddf3>
 800e4c2:	4622      	mov	r2, r4
 800e4c4:	462b      	mov	r3, r5
 800e4c6:	f7f2 f8af 	bl	8000628 <__aeabi_dmul>
 800e4ca:	4622      	mov	r2, r4
 800e4cc:	462b      	mov	r3, r5
 800e4ce:	f7f2 f8ab 	bl	8000628 <__aeabi_dmul>
 800e4d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	460d      	mov	r5, r1
 800e4da:	4630      	mov	r0, r6
 800e4dc:	4639      	mov	r1, r7
 800e4de:	f7f2 f8a3 	bl	8000628 <__aeabi_dmul>
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7f1 fee5 	bl	80002b8 <__aeabi_dsub>
 800e4ee:	4b2b      	ldr	r3, [pc, #172]	; (800e59c <__kernel_cos+0x17c>)
 800e4f0:	4598      	cmp	r8, r3
 800e4f2:	4606      	mov	r6, r0
 800e4f4:	460f      	mov	r7, r1
 800e4f6:	dc10      	bgt.n	800e51a <__kernel_cos+0xfa>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	4650      	mov	r0, sl
 800e4fe:	4659      	mov	r1, fp
 800e500:	f7f1 feda 	bl	80002b8 <__aeabi_dsub>
 800e504:	460b      	mov	r3, r1
 800e506:	4926      	ldr	r1, [pc, #152]	; (800e5a0 <__kernel_cos+0x180>)
 800e508:	4602      	mov	r2, r0
 800e50a:	2000      	movs	r0, #0
 800e50c:	f7f1 fed4 	bl	80002b8 <__aeabi_dsub>
 800e510:	ec41 0b10 	vmov	d0, r0, r1
 800e514:	b003      	add	sp, #12
 800e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51a:	4b22      	ldr	r3, [pc, #136]	; (800e5a4 <__kernel_cos+0x184>)
 800e51c:	4920      	ldr	r1, [pc, #128]	; (800e5a0 <__kernel_cos+0x180>)
 800e51e:	4598      	cmp	r8, r3
 800e520:	bfcc      	ite	gt
 800e522:	4d21      	ldrgt	r5, [pc, #132]	; (800e5a8 <__kernel_cos+0x188>)
 800e524:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e528:	2400      	movs	r4, #0
 800e52a:	4622      	mov	r2, r4
 800e52c:	462b      	mov	r3, r5
 800e52e:	2000      	movs	r0, #0
 800e530:	f7f1 fec2 	bl	80002b8 <__aeabi_dsub>
 800e534:	4622      	mov	r2, r4
 800e536:	4680      	mov	r8, r0
 800e538:	4689      	mov	r9, r1
 800e53a:	462b      	mov	r3, r5
 800e53c:	4650      	mov	r0, sl
 800e53e:	4659      	mov	r1, fp
 800e540:	f7f1 feba 	bl	80002b8 <__aeabi_dsub>
 800e544:	4632      	mov	r2, r6
 800e546:	463b      	mov	r3, r7
 800e548:	f7f1 feb6 	bl	80002b8 <__aeabi_dsub>
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	4640      	mov	r0, r8
 800e552:	4649      	mov	r1, r9
 800e554:	e7da      	b.n	800e50c <__kernel_cos+0xec>
 800e556:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e590 <__kernel_cos+0x170>
 800e55a:	e7db      	b.n	800e514 <__kernel_cos+0xf4>
 800e55c:	f3af 8000 	nop.w
 800e560:	be8838d4 	.word	0xbe8838d4
 800e564:	bda8fae9 	.word	0xbda8fae9
 800e568:	bdb4b1c4 	.word	0xbdb4b1c4
 800e56c:	3e21ee9e 	.word	0x3e21ee9e
 800e570:	809c52ad 	.word	0x809c52ad
 800e574:	3e927e4f 	.word	0x3e927e4f
 800e578:	19cb1590 	.word	0x19cb1590
 800e57c:	3efa01a0 	.word	0x3efa01a0
 800e580:	16c15177 	.word	0x16c15177
 800e584:	3f56c16c 	.word	0x3f56c16c
 800e588:	5555554c 	.word	0x5555554c
 800e58c:	3fa55555 	.word	0x3fa55555
 800e590:	00000000 	.word	0x00000000
 800e594:	3ff00000 	.word	0x3ff00000
 800e598:	3fe00000 	.word	0x3fe00000
 800e59c:	3fd33332 	.word	0x3fd33332
 800e5a0:	3ff00000 	.word	0x3ff00000
 800e5a4:	3fe90000 	.word	0x3fe90000
 800e5a8:	3fd20000 	.word	0x3fd20000
 800e5ac:	00000000 	.word	0x00000000

0800e5b0 <__kernel_rem_pio2>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	ed2d 8b02 	vpush	{d8}
 800e5b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e5bc:	f112 0f14 	cmn.w	r2, #20
 800e5c0:	9308      	str	r3, [sp, #32]
 800e5c2:	9101      	str	r1, [sp, #4]
 800e5c4:	4bc4      	ldr	r3, [pc, #784]	; (800e8d8 <__kernel_rem_pio2+0x328>)
 800e5c6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e5c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e5ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5ce:	9302      	str	r3, [sp, #8]
 800e5d0:	9b08      	ldr	r3, [sp, #32]
 800e5d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e5d6:	bfa8      	it	ge
 800e5d8:	1ed4      	subge	r4, r2, #3
 800e5da:	9306      	str	r3, [sp, #24]
 800e5dc:	bfb2      	itee	lt
 800e5de:	2400      	movlt	r4, #0
 800e5e0:	2318      	movge	r3, #24
 800e5e2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e5e6:	f06f 0317 	mvn.w	r3, #23
 800e5ea:	fb04 3303 	mla	r3, r4, r3, r3
 800e5ee:	eb03 0a02 	add.w	sl, r3, r2
 800e5f2:	9b02      	ldr	r3, [sp, #8]
 800e5f4:	9a06      	ldr	r2, [sp, #24]
 800e5f6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e8c8 <__kernel_rem_pio2+0x318>
 800e5fa:	eb03 0802 	add.w	r8, r3, r2
 800e5fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e600:	1aa7      	subs	r7, r4, r2
 800e602:	ae22      	add	r6, sp, #136	; 0x88
 800e604:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e608:	2500      	movs	r5, #0
 800e60a:	4545      	cmp	r5, r8
 800e60c:	dd13      	ble.n	800e636 <__kernel_rem_pio2+0x86>
 800e60e:	9b08      	ldr	r3, [sp, #32]
 800e610:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e8c8 <__kernel_rem_pio2+0x318>
 800e614:	aa22      	add	r2, sp, #136	; 0x88
 800e616:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e61a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e61e:	f04f 0800 	mov.w	r8, #0
 800e622:	9b02      	ldr	r3, [sp, #8]
 800e624:	4598      	cmp	r8, r3
 800e626:	dc2f      	bgt.n	800e688 <__kernel_rem_pio2+0xd8>
 800e628:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e62c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e630:	462f      	mov	r7, r5
 800e632:	2600      	movs	r6, #0
 800e634:	e01b      	b.n	800e66e <__kernel_rem_pio2+0xbe>
 800e636:	42ef      	cmn	r7, r5
 800e638:	d407      	bmi.n	800e64a <__kernel_rem_pio2+0x9a>
 800e63a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e63e:	f7f1 ff89 	bl	8000554 <__aeabi_i2d>
 800e642:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e646:	3501      	adds	r5, #1
 800e648:	e7df      	b.n	800e60a <__kernel_rem_pio2+0x5a>
 800e64a:	ec51 0b18 	vmov	r0, r1, d8
 800e64e:	e7f8      	b.n	800e642 <__kernel_rem_pio2+0x92>
 800e650:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e654:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e658:	f7f1 ffe6 	bl	8000628 <__aeabi_dmul>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e664:	f7f1 fe2a 	bl	80002bc <__adddf3>
 800e668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e66c:	3601      	adds	r6, #1
 800e66e:	9b06      	ldr	r3, [sp, #24]
 800e670:	429e      	cmp	r6, r3
 800e672:	f1a7 0708 	sub.w	r7, r7, #8
 800e676:	ddeb      	ble.n	800e650 <__kernel_rem_pio2+0xa0>
 800e678:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e67c:	f108 0801 	add.w	r8, r8, #1
 800e680:	ecab 7b02 	vstmia	fp!, {d7}
 800e684:	3508      	adds	r5, #8
 800e686:	e7cc      	b.n	800e622 <__kernel_rem_pio2+0x72>
 800e688:	9b02      	ldr	r3, [sp, #8]
 800e68a:	aa0e      	add	r2, sp, #56	; 0x38
 800e68c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e690:	930d      	str	r3, [sp, #52]	; 0x34
 800e692:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e694:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e698:	9c02      	ldr	r4, [sp, #8]
 800e69a:	930c      	str	r3, [sp, #48]	; 0x30
 800e69c:	00e3      	lsls	r3, r4, #3
 800e69e:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a0:	ab9a      	add	r3, sp, #616	; 0x268
 800e6a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e6aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e6ae:	ab72      	add	r3, sp, #456	; 0x1c8
 800e6b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e6b4:	46c3      	mov	fp, r8
 800e6b6:	46a1      	mov	r9, r4
 800e6b8:	f1b9 0f00 	cmp.w	r9, #0
 800e6bc:	f1a5 0508 	sub.w	r5, r5, #8
 800e6c0:	dc77      	bgt.n	800e7b2 <__kernel_rem_pio2+0x202>
 800e6c2:	ec47 6b10 	vmov	d0, r6, r7
 800e6c6:	4650      	mov	r0, sl
 800e6c8:	f000 fde6 	bl	800f298 <scalbn>
 800e6cc:	ec57 6b10 	vmov	r6, r7, d0
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e6d6:	ee10 0a10 	vmov	r0, s0
 800e6da:	4639      	mov	r1, r7
 800e6dc:	f7f1 ffa4 	bl	8000628 <__aeabi_dmul>
 800e6e0:	ec41 0b10 	vmov	d0, r0, r1
 800e6e4:	f000 fd58 	bl	800f198 <floor>
 800e6e8:	4b7c      	ldr	r3, [pc, #496]	; (800e8dc <__kernel_rem_pio2+0x32c>)
 800e6ea:	ec51 0b10 	vmov	r0, r1, d0
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f7f1 ff9a 	bl	8000628 <__aeabi_dmul>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	f7f1 fddc 	bl	80002b8 <__aeabi_dsub>
 800e700:	460f      	mov	r7, r1
 800e702:	4606      	mov	r6, r0
 800e704:	f7f2 fa40 	bl	8000b88 <__aeabi_d2iz>
 800e708:	9004      	str	r0, [sp, #16]
 800e70a:	f7f1 ff23 	bl	8000554 <__aeabi_i2d>
 800e70e:	4602      	mov	r2, r0
 800e710:	460b      	mov	r3, r1
 800e712:	4630      	mov	r0, r6
 800e714:	4639      	mov	r1, r7
 800e716:	f7f1 fdcf 	bl	80002b8 <__aeabi_dsub>
 800e71a:	f1ba 0f00 	cmp.w	sl, #0
 800e71e:	4606      	mov	r6, r0
 800e720:	460f      	mov	r7, r1
 800e722:	dd6d      	ble.n	800e800 <__kernel_rem_pio2+0x250>
 800e724:	1e62      	subs	r2, r4, #1
 800e726:	ab0e      	add	r3, sp, #56	; 0x38
 800e728:	9d04      	ldr	r5, [sp, #16]
 800e72a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e72e:	f1ca 0118 	rsb	r1, sl, #24
 800e732:	fa40 f301 	asr.w	r3, r0, r1
 800e736:	441d      	add	r5, r3
 800e738:	408b      	lsls	r3, r1
 800e73a:	1ac0      	subs	r0, r0, r3
 800e73c:	ab0e      	add	r3, sp, #56	; 0x38
 800e73e:	9504      	str	r5, [sp, #16]
 800e740:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e744:	f1ca 0317 	rsb	r3, sl, #23
 800e748:	fa40 fb03 	asr.w	fp, r0, r3
 800e74c:	f1bb 0f00 	cmp.w	fp, #0
 800e750:	dd65      	ble.n	800e81e <__kernel_rem_pio2+0x26e>
 800e752:	9b04      	ldr	r3, [sp, #16]
 800e754:	2200      	movs	r2, #0
 800e756:	3301      	adds	r3, #1
 800e758:	9304      	str	r3, [sp, #16]
 800e75a:	4615      	mov	r5, r2
 800e75c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e760:	4294      	cmp	r4, r2
 800e762:	f300 809c 	bgt.w	800e89e <__kernel_rem_pio2+0x2ee>
 800e766:	f1ba 0f00 	cmp.w	sl, #0
 800e76a:	dd07      	ble.n	800e77c <__kernel_rem_pio2+0x1cc>
 800e76c:	f1ba 0f01 	cmp.w	sl, #1
 800e770:	f000 80c0 	beq.w	800e8f4 <__kernel_rem_pio2+0x344>
 800e774:	f1ba 0f02 	cmp.w	sl, #2
 800e778:	f000 80c6 	beq.w	800e908 <__kernel_rem_pio2+0x358>
 800e77c:	f1bb 0f02 	cmp.w	fp, #2
 800e780:	d14d      	bne.n	800e81e <__kernel_rem_pio2+0x26e>
 800e782:	4632      	mov	r2, r6
 800e784:	463b      	mov	r3, r7
 800e786:	4956      	ldr	r1, [pc, #344]	; (800e8e0 <__kernel_rem_pio2+0x330>)
 800e788:	2000      	movs	r0, #0
 800e78a:	f7f1 fd95 	bl	80002b8 <__aeabi_dsub>
 800e78e:	4606      	mov	r6, r0
 800e790:	460f      	mov	r7, r1
 800e792:	2d00      	cmp	r5, #0
 800e794:	d043      	beq.n	800e81e <__kernel_rem_pio2+0x26e>
 800e796:	4650      	mov	r0, sl
 800e798:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e8d0 <__kernel_rem_pio2+0x320>
 800e79c:	f000 fd7c 	bl	800f298 <scalbn>
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	ec53 2b10 	vmov	r2, r3, d0
 800e7a8:	f7f1 fd86 	bl	80002b8 <__aeabi_dsub>
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	460f      	mov	r7, r1
 800e7b0:	e035      	b.n	800e81e <__kernel_rem_pio2+0x26e>
 800e7b2:	4b4c      	ldr	r3, [pc, #304]	; (800e8e4 <__kernel_rem_pio2+0x334>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	4639      	mov	r1, r7
 800e7ba:	f7f1 ff35 	bl	8000628 <__aeabi_dmul>
 800e7be:	f7f2 f9e3 	bl	8000b88 <__aeabi_d2iz>
 800e7c2:	f7f1 fec7 	bl	8000554 <__aeabi_i2d>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	ec43 2b18 	vmov	d8, r2, r3
 800e7ce:	4b46      	ldr	r3, [pc, #280]	; (800e8e8 <__kernel_rem_pio2+0x338>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f7f1 ff29 	bl	8000628 <__aeabi_dmul>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	4630      	mov	r0, r6
 800e7dc:	4639      	mov	r1, r7
 800e7de:	f7f1 fd6b 	bl	80002b8 <__aeabi_dsub>
 800e7e2:	f7f2 f9d1 	bl	8000b88 <__aeabi_d2iz>
 800e7e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7ea:	f84b 0b04 	str.w	r0, [fp], #4
 800e7ee:	ec51 0b18 	vmov	r0, r1, d8
 800e7f2:	f7f1 fd63 	bl	80002bc <__adddf3>
 800e7f6:	f109 39ff 	add.w	r9, r9, #4294967295
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	460f      	mov	r7, r1
 800e7fe:	e75b      	b.n	800e6b8 <__kernel_rem_pio2+0x108>
 800e800:	d106      	bne.n	800e810 <__kernel_rem_pio2+0x260>
 800e802:	1e63      	subs	r3, r4, #1
 800e804:	aa0e      	add	r2, sp, #56	; 0x38
 800e806:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e80a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e80e:	e79d      	b.n	800e74c <__kernel_rem_pio2+0x19c>
 800e810:	4b36      	ldr	r3, [pc, #216]	; (800e8ec <__kernel_rem_pio2+0x33c>)
 800e812:	2200      	movs	r2, #0
 800e814:	f7f2 f98e 	bl	8000b34 <__aeabi_dcmpge>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d13d      	bne.n	800e898 <__kernel_rem_pio2+0x2e8>
 800e81c:	4683      	mov	fp, r0
 800e81e:	2200      	movs	r2, #0
 800e820:	2300      	movs	r3, #0
 800e822:	4630      	mov	r0, r6
 800e824:	4639      	mov	r1, r7
 800e826:	f7f2 f967 	bl	8000af8 <__aeabi_dcmpeq>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	f000 80c0 	beq.w	800e9b0 <__kernel_rem_pio2+0x400>
 800e830:	1e65      	subs	r5, r4, #1
 800e832:	462b      	mov	r3, r5
 800e834:	2200      	movs	r2, #0
 800e836:	9902      	ldr	r1, [sp, #8]
 800e838:	428b      	cmp	r3, r1
 800e83a:	da6c      	bge.n	800e916 <__kernel_rem_pio2+0x366>
 800e83c:	2a00      	cmp	r2, #0
 800e83e:	f000 8089 	beq.w	800e954 <__kernel_rem_pio2+0x3a4>
 800e842:	ab0e      	add	r3, sp, #56	; 0x38
 800e844:	f1aa 0a18 	sub.w	sl, sl, #24
 800e848:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 80ad 	beq.w	800e9ac <__kernel_rem_pio2+0x3fc>
 800e852:	4650      	mov	r0, sl
 800e854:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e8d0 <__kernel_rem_pio2+0x320>
 800e858:	f000 fd1e 	bl	800f298 <scalbn>
 800e85c:	ab9a      	add	r3, sp, #616	; 0x268
 800e85e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e862:	ec57 6b10 	vmov	r6, r7, d0
 800e866:	00ec      	lsls	r4, r5, #3
 800e868:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e86c:	46aa      	mov	sl, r5
 800e86e:	f1ba 0f00 	cmp.w	sl, #0
 800e872:	f280 80d6 	bge.w	800ea22 <__kernel_rem_pio2+0x472>
 800e876:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e8c8 <__kernel_rem_pio2+0x318>
 800e87a:	462e      	mov	r6, r5
 800e87c:	2e00      	cmp	r6, #0
 800e87e:	f2c0 8104 	blt.w	800ea8a <__kernel_rem_pio2+0x4da>
 800e882:	ab72      	add	r3, sp, #456	; 0x1c8
 800e884:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e888:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e8f0 <__kernel_rem_pio2+0x340>
 800e88c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e890:	f04f 0800 	mov.w	r8, #0
 800e894:	1baf      	subs	r7, r5, r6
 800e896:	e0ea      	b.n	800ea6e <__kernel_rem_pio2+0x4be>
 800e898:	f04f 0b02 	mov.w	fp, #2
 800e89c:	e759      	b.n	800e752 <__kernel_rem_pio2+0x1a2>
 800e89e:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a2:	b955      	cbnz	r5, 800e8ba <__kernel_rem_pio2+0x30a>
 800e8a4:	b123      	cbz	r3, 800e8b0 <__kernel_rem_pio2+0x300>
 800e8a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e8aa:	f8c8 3000 	str.w	r3, [r8]
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	3201      	adds	r2, #1
 800e8b2:	f108 0804 	add.w	r8, r8, #4
 800e8b6:	461d      	mov	r5, r3
 800e8b8:	e752      	b.n	800e760 <__kernel_rem_pio2+0x1b0>
 800e8ba:	1acb      	subs	r3, r1, r3
 800e8bc:	f8c8 3000 	str.w	r3, [r8]
 800e8c0:	462b      	mov	r3, r5
 800e8c2:	e7f5      	b.n	800e8b0 <__kernel_rem_pio2+0x300>
 800e8c4:	f3af 8000 	nop.w
	...
 800e8d4:	3ff00000 	.word	0x3ff00000
 800e8d8:	0800fc00 	.word	0x0800fc00
 800e8dc:	40200000 	.word	0x40200000
 800e8e0:	3ff00000 	.word	0x3ff00000
 800e8e4:	3e700000 	.word	0x3e700000
 800e8e8:	41700000 	.word	0x41700000
 800e8ec:	3fe00000 	.word	0x3fe00000
 800e8f0:	0800fbc0 	.word	0x0800fbc0
 800e8f4:	1e62      	subs	r2, r4, #1
 800e8f6:	ab0e      	add	r3, sp, #56	; 0x38
 800e8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e900:	a90e      	add	r1, sp, #56	; 0x38
 800e902:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e906:	e739      	b.n	800e77c <__kernel_rem_pio2+0x1cc>
 800e908:	1e62      	subs	r2, r4, #1
 800e90a:	ab0e      	add	r3, sp, #56	; 0x38
 800e90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e910:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e914:	e7f4      	b.n	800e900 <__kernel_rem_pio2+0x350>
 800e916:	a90e      	add	r1, sp, #56	; 0x38
 800e918:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e91c:	3b01      	subs	r3, #1
 800e91e:	430a      	orrs	r2, r1
 800e920:	e789      	b.n	800e836 <__kernel_rem_pio2+0x286>
 800e922:	3301      	adds	r3, #1
 800e924:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e928:	2900      	cmp	r1, #0
 800e92a:	d0fa      	beq.n	800e922 <__kernel_rem_pio2+0x372>
 800e92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e92e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e932:	446a      	add	r2, sp
 800e934:	3a98      	subs	r2, #152	; 0x98
 800e936:	920a      	str	r2, [sp, #40]	; 0x28
 800e938:	9a08      	ldr	r2, [sp, #32]
 800e93a:	18e3      	adds	r3, r4, r3
 800e93c:	18a5      	adds	r5, r4, r2
 800e93e:	aa22      	add	r2, sp, #136	; 0x88
 800e940:	f104 0801 	add.w	r8, r4, #1
 800e944:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e948:	9304      	str	r3, [sp, #16]
 800e94a:	9b04      	ldr	r3, [sp, #16]
 800e94c:	4543      	cmp	r3, r8
 800e94e:	da04      	bge.n	800e95a <__kernel_rem_pio2+0x3aa>
 800e950:	461c      	mov	r4, r3
 800e952:	e6a3      	b.n	800e69c <__kernel_rem_pio2+0xec>
 800e954:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e956:	2301      	movs	r3, #1
 800e958:	e7e4      	b.n	800e924 <__kernel_rem_pio2+0x374>
 800e95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e95c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e960:	f7f1 fdf8 	bl	8000554 <__aeabi_i2d>
 800e964:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e96a:	46ab      	mov	fp, r5
 800e96c:	461c      	mov	r4, r3
 800e96e:	f04f 0900 	mov.w	r9, #0
 800e972:	2600      	movs	r6, #0
 800e974:	2700      	movs	r7, #0
 800e976:	9b06      	ldr	r3, [sp, #24]
 800e978:	4599      	cmp	r9, r3
 800e97a:	dd06      	ble.n	800e98a <__kernel_rem_pio2+0x3da>
 800e97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e97e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e982:	f108 0801 	add.w	r8, r8, #1
 800e986:	930a      	str	r3, [sp, #40]	; 0x28
 800e988:	e7df      	b.n	800e94a <__kernel_rem_pio2+0x39a>
 800e98a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e98e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e992:	f7f1 fe49 	bl	8000628 <__aeabi_dmul>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	4630      	mov	r0, r6
 800e99c:	4639      	mov	r1, r7
 800e99e:	f7f1 fc8d 	bl	80002bc <__adddf3>
 800e9a2:	f109 0901 	add.w	r9, r9, #1
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	460f      	mov	r7, r1
 800e9aa:	e7e4      	b.n	800e976 <__kernel_rem_pio2+0x3c6>
 800e9ac:	3d01      	subs	r5, #1
 800e9ae:	e748      	b.n	800e842 <__kernel_rem_pio2+0x292>
 800e9b0:	ec47 6b10 	vmov	d0, r6, r7
 800e9b4:	f1ca 0000 	rsb	r0, sl, #0
 800e9b8:	f000 fc6e 	bl	800f298 <scalbn>
 800e9bc:	ec57 6b10 	vmov	r6, r7, d0
 800e9c0:	4ba0      	ldr	r3, [pc, #640]	; (800ec44 <__kernel_rem_pio2+0x694>)
 800e9c2:	ee10 0a10 	vmov	r0, s0
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	f7f2 f8b3 	bl	8000b34 <__aeabi_dcmpge>
 800e9ce:	b1f8      	cbz	r0, 800ea10 <__kernel_rem_pio2+0x460>
 800e9d0:	4b9d      	ldr	r3, [pc, #628]	; (800ec48 <__kernel_rem_pio2+0x698>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	f7f1 fe26 	bl	8000628 <__aeabi_dmul>
 800e9dc:	f7f2 f8d4 	bl	8000b88 <__aeabi_d2iz>
 800e9e0:	4680      	mov	r8, r0
 800e9e2:	f7f1 fdb7 	bl	8000554 <__aeabi_i2d>
 800e9e6:	4b97      	ldr	r3, [pc, #604]	; (800ec44 <__kernel_rem_pio2+0x694>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f7f1 fe1d 	bl	8000628 <__aeabi_dmul>
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	4639      	mov	r1, r7
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f7f1 fc5f 	bl	80002b8 <__aeabi_dsub>
 800e9fa:	f7f2 f8c5 	bl	8000b88 <__aeabi_d2iz>
 800e9fe:	1c65      	adds	r5, r4, #1
 800ea00:	ab0e      	add	r3, sp, #56	; 0x38
 800ea02:	f10a 0a18 	add.w	sl, sl, #24
 800ea06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ea0a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ea0e:	e720      	b.n	800e852 <__kernel_rem_pio2+0x2a2>
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f2 f8b8 	bl	8000b88 <__aeabi_d2iz>
 800ea18:	ab0e      	add	r3, sp, #56	; 0x38
 800ea1a:	4625      	mov	r5, r4
 800ea1c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ea20:	e717      	b.n	800e852 <__kernel_rem_pio2+0x2a2>
 800ea22:	ab0e      	add	r3, sp, #56	; 0x38
 800ea24:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ea28:	f7f1 fd94 	bl	8000554 <__aeabi_i2d>
 800ea2c:	4632      	mov	r2, r6
 800ea2e:	463b      	mov	r3, r7
 800ea30:	f7f1 fdfa 	bl	8000628 <__aeabi_dmul>
 800ea34:	4b84      	ldr	r3, [pc, #528]	; (800ec48 <__kernel_rem_pio2+0x698>)
 800ea36:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	4639      	mov	r1, r7
 800ea40:	f7f1 fdf2 	bl	8000628 <__aeabi_dmul>
 800ea44:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea48:	4606      	mov	r6, r0
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	e70f      	b.n	800e86e <__kernel_rem_pio2+0x2be>
 800ea4e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ea52:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ea56:	f7f1 fde7 	bl	8000628 <__aeabi_dmul>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea62:	f7f1 fc2b 	bl	80002bc <__adddf3>
 800ea66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea6a:	f108 0801 	add.w	r8, r8, #1
 800ea6e:	9b02      	ldr	r3, [sp, #8]
 800ea70:	4598      	cmp	r8, r3
 800ea72:	dc01      	bgt.n	800ea78 <__kernel_rem_pio2+0x4c8>
 800ea74:	45b8      	cmp	r8, r7
 800ea76:	ddea      	ble.n	800ea4e <__kernel_rem_pio2+0x49e>
 800ea78:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ea7c:	ab4a      	add	r3, sp, #296	; 0x128
 800ea7e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ea82:	ed87 7b00 	vstr	d7, [r7]
 800ea86:	3e01      	subs	r6, #1
 800ea88:	e6f8      	b.n	800e87c <__kernel_rem_pio2+0x2cc>
 800ea8a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	dc0b      	bgt.n	800eaa8 <__kernel_rem_pio2+0x4f8>
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	dc35      	bgt.n	800eb00 <__kernel_rem_pio2+0x550>
 800ea94:	d059      	beq.n	800eb4a <__kernel_rem_pio2+0x59a>
 800ea96:	9b04      	ldr	r3, [sp, #16]
 800ea98:	f003 0007 	and.w	r0, r3, #7
 800ea9c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800eaa0:	ecbd 8b02 	vpop	{d8}
 800eaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	d1f3      	bne.n	800ea96 <__kernel_rem_pio2+0x4e6>
 800eaae:	ab4a      	add	r3, sp, #296	; 0x128
 800eab0:	4423      	add	r3, r4
 800eab2:	9306      	str	r3, [sp, #24]
 800eab4:	461c      	mov	r4, r3
 800eab6:	469a      	mov	sl, r3
 800eab8:	9502      	str	r5, [sp, #8]
 800eaba:	9b02      	ldr	r3, [sp, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f1aa 0a08 	sub.w	sl, sl, #8
 800eac2:	dc6b      	bgt.n	800eb9c <__kernel_rem_pio2+0x5ec>
 800eac4:	46aa      	mov	sl, r5
 800eac6:	f1ba 0f01 	cmp.w	sl, #1
 800eaca:	f1a4 0408 	sub.w	r4, r4, #8
 800eace:	f300 8085 	bgt.w	800ebdc <__kernel_rem_pio2+0x62c>
 800ead2:	9c06      	ldr	r4, [sp, #24]
 800ead4:	2000      	movs	r0, #0
 800ead6:	3408      	adds	r4, #8
 800ead8:	2100      	movs	r1, #0
 800eada:	2d01      	cmp	r5, #1
 800eadc:	f300 809d 	bgt.w	800ec1a <__kernel_rem_pio2+0x66a>
 800eae0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800eae4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800eae8:	f1bb 0f00 	cmp.w	fp, #0
 800eaec:	f040 809b 	bne.w	800ec26 <__kernel_rem_pio2+0x676>
 800eaf0:	9b01      	ldr	r3, [sp, #4]
 800eaf2:	e9c3 5600 	strd	r5, r6, [r3]
 800eaf6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800eafa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800eafe:	e7ca      	b.n	800ea96 <__kernel_rem_pio2+0x4e6>
 800eb00:	3408      	adds	r4, #8
 800eb02:	ab4a      	add	r3, sp, #296	; 0x128
 800eb04:	441c      	add	r4, r3
 800eb06:	462e      	mov	r6, r5
 800eb08:	2000      	movs	r0, #0
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	2e00      	cmp	r6, #0
 800eb0e:	da36      	bge.n	800eb7e <__kernel_rem_pio2+0x5ce>
 800eb10:	f1bb 0f00 	cmp.w	fp, #0
 800eb14:	d039      	beq.n	800eb8a <__kernel_rem_pio2+0x5da>
 800eb16:	4602      	mov	r2, r0
 800eb18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb1c:	9c01      	ldr	r4, [sp, #4]
 800eb1e:	e9c4 2300 	strd	r2, r3, [r4]
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800eb2a:	f7f1 fbc5 	bl	80002b8 <__aeabi_dsub>
 800eb2e:	ae4c      	add	r6, sp, #304	; 0x130
 800eb30:	2401      	movs	r4, #1
 800eb32:	42a5      	cmp	r5, r4
 800eb34:	da2c      	bge.n	800eb90 <__kernel_rem_pio2+0x5e0>
 800eb36:	f1bb 0f00 	cmp.w	fp, #0
 800eb3a:	d002      	beq.n	800eb42 <__kernel_rem_pio2+0x592>
 800eb3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb40:	4619      	mov	r1, r3
 800eb42:	9b01      	ldr	r3, [sp, #4]
 800eb44:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eb48:	e7a5      	b.n	800ea96 <__kernel_rem_pio2+0x4e6>
 800eb4a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800eb4e:	eb0d 0403 	add.w	r4, sp, r3
 800eb52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800eb56:	2000      	movs	r0, #0
 800eb58:	2100      	movs	r1, #0
 800eb5a:	2d00      	cmp	r5, #0
 800eb5c:	da09      	bge.n	800eb72 <__kernel_rem_pio2+0x5c2>
 800eb5e:	f1bb 0f00 	cmp.w	fp, #0
 800eb62:	d002      	beq.n	800eb6a <__kernel_rem_pio2+0x5ba>
 800eb64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb68:	4619      	mov	r1, r3
 800eb6a:	9b01      	ldr	r3, [sp, #4]
 800eb6c:	e9c3 0100 	strd	r0, r1, [r3]
 800eb70:	e791      	b.n	800ea96 <__kernel_rem_pio2+0x4e6>
 800eb72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb76:	f7f1 fba1 	bl	80002bc <__adddf3>
 800eb7a:	3d01      	subs	r5, #1
 800eb7c:	e7ed      	b.n	800eb5a <__kernel_rem_pio2+0x5aa>
 800eb7e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb82:	f7f1 fb9b 	bl	80002bc <__adddf3>
 800eb86:	3e01      	subs	r6, #1
 800eb88:	e7c0      	b.n	800eb0c <__kernel_rem_pio2+0x55c>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	e7c5      	b.n	800eb1c <__kernel_rem_pio2+0x56c>
 800eb90:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800eb94:	f7f1 fb92 	bl	80002bc <__adddf3>
 800eb98:	3401      	adds	r4, #1
 800eb9a:	e7ca      	b.n	800eb32 <__kernel_rem_pio2+0x582>
 800eb9c:	e9da 8900 	ldrd	r8, r9, [sl]
 800eba0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800eba4:	9b02      	ldr	r3, [sp, #8]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	9302      	str	r3, [sp, #8]
 800ebaa:	4632      	mov	r2, r6
 800ebac:	463b      	mov	r3, r7
 800ebae:	4640      	mov	r0, r8
 800ebb0:	4649      	mov	r1, r9
 800ebb2:	f7f1 fb83 	bl	80002bc <__adddf3>
 800ebb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ebba:	4602      	mov	r2, r0
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	f7f1 fb79 	bl	80002b8 <__aeabi_dsub>
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	463b      	mov	r3, r7
 800ebca:	f7f1 fb77 	bl	80002bc <__adddf3>
 800ebce:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ebd2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ebd6:	ed8a 7b00 	vstr	d7, [sl]
 800ebda:	e76e      	b.n	800eaba <__kernel_rem_pio2+0x50a>
 800ebdc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ebe0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4632      	mov	r2, r6
 800ebe8:	463b      	mov	r3, r7
 800ebea:	4649      	mov	r1, r9
 800ebec:	f7f1 fb66 	bl	80002bc <__adddf3>
 800ebf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	4649      	mov	r1, r9
 800ebfc:	f7f1 fb5c 	bl	80002b8 <__aeabi_dsub>
 800ec00:	4632      	mov	r2, r6
 800ec02:	463b      	mov	r3, r7
 800ec04:	f7f1 fb5a 	bl	80002bc <__adddf3>
 800ec08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec10:	ed84 7b00 	vstr	d7, [r4]
 800ec14:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec18:	e755      	b.n	800eac6 <__kernel_rem_pio2+0x516>
 800ec1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ec1e:	f7f1 fb4d 	bl	80002bc <__adddf3>
 800ec22:	3d01      	subs	r5, #1
 800ec24:	e759      	b.n	800eada <__kernel_rem_pio2+0x52a>
 800ec26:	9b01      	ldr	r3, [sp, #4]
 800ec28:	9a01      	ldr	r2, [sp, #4]
 800ec2a:	601d      	str	r5, [r3, #0]
 800ec2c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ec30:	605c      	str	r4, [r3, #4]
 800ec32:	609f      	str	r7, [r3, #8]
 800ec34:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ec38:	60d3      	str	r3, [r2, #12]
 800ec3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec3e:	6110      	str	r0, [r2, #16]
 800ec40:	6153      	str	r3, [r2, #20]
 800ec42:	e728      	b.n	800ea96 <__kernel_rem_pio2+0x4e6>
 800ec44:	41700000 	.word	0x41700000
 800ec48:	3e700000 	.word	0x3e700000
 800ec4c:	00000000 	.word	0x00000000

0800ec50 <__kernel_sin>:
 800ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	ed2d 8b04 	vpush	{d8-d9}
 800ec58:	eeb0 8a41 	vmov.f32	s16, s2
 800ec5c:	eef0 8a61 	vmov.f32	s17, s3
 800ec60:	ec55 4b10 	vmov	r4, r5, d0
 800ec64:	b083      	sub	sp, #12
 800ec66:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ec6a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ec6e:	9001      	str	r0, [sp, #4]
 800ec70:	da06      	bge.n	800ec80 <__kernel_sin+0x30>
 800ec72:	ee10 0a10 	vmov	r0, s0
 800ec76:	4629      	mov	r1, r5
 800ec78:	f7f1 ff86 	bl	8000b88 <__aeabi_d2iz>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d051      	beq.n	800ed24 <__kernel_sin+0xd4>
 800ec80:	4622      	mov	r2, r4
 800ec82:	462b      	mov	r3, r5
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 fcce 	bl	8000628 <__aeabi_dmul>
 800ec8c:	4682      	mov	sl, r0
 800ec8e:	468b      	mov	fp, r1
 800ec90:	4602      	mov	r2, r0
 800ec92:	460b      	mov	r3, r1
 800ec94:	4620      	mov	r0, r4
 800ec96:	4629      	mov	r1, r5
 800ec98:	f7f1 fcc6 	bl	8000628 <__aeabi_dmul>
 800ec9c:	a341      	add	r3, pc, #260	; (adr r3, 800eda4 <__kernel_sin+0x154>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	4680      	mov	r8, r0
 800eca4:	4689      	mov	r9, r1
 800eca6:	4650      	mov	r0, sl
 800eca8:	4659      	mov	r1, fp
 800ecaa:	f7f1 fcbd 	bl	8000628 <__aeabi_dmul>
 800ecae:	a33f      	add	r3, pc, #252	; (adr r3, 800edac <__kernel_sin+0x15c>)
 800ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb4:	f7f1 fb00 	bl	80002b8 <__aeabi_dsub>
 800ecb8:	4652      	mov	r2, sl
 800ecba:	465b      	mov	r3, fp
 800ecbc:	f7f1 fcb4 	bl	8000628 <__aeabi_dmul>
 800ecc0:	a33c      	add	r3, pc, #240	; (adr r3, 800edb4 <__kernel_sin+0x164>)
 800ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc6:	f7f1 faf9 	bl	80002bc <__adddf3>
 800ecca:	4652      	mov	r2, sl
 800eccc:	465b      	mov	r3, fp
 800ecce:	f7f1 fcab 	bl	8000628 <__aeabi_dmul>
 800ecd2:	a33a      	add	r3, pc, #232	; (adr r3, 800edbc <__kernel_sin+0x16c>)
 800ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd8:	f7f1 faee 	bl	80002b8 <__aeabi_dsub>
 800ecdc:	4652      	mov	r2, sl
 800ecde:	465b      	mov	r3, fp
 800ece0:	f7f1 fca2 	bl	8000628 <__aeabi_dmul>
 800ece4:	a337      	add	r3, pc, #220	; (adr r3, 800edc4 <__kernel_sin+0x174>)
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	f7f1 fae7 	bl	80002bc <__adddf3>
 800ecee:	9b01      	ldr	r3, [sp, #4]
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	b9eb      	cbnz	r3, 800ed32 <__kernel_sin+0xe2>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	4650      	mov	r0, sl
 800ecfc:	4659      	mov	r1, fp
 800ecfe:	f7f1 fc93 	bl	8000628 <__aeabi_dmul>
 800ed02:	a325      	add	r3, pc, #148	; (adr r3, 800ed98 <__kernel_sin+0x148>)
 800ed04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed08:	f7f1 fad6 	bl	80002b8 <__aeabi_dsub>
 800ed0c:	4642      	mov	r2, r8
 800ed0e:	464b      	mov	r3, r9
 800ed10:	f7f1 fc8a 	bl	8000628 <__aeabi_dmul>
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	4620      	mov	r0, r4
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	f7f1 face 	bl	80002bc <__adddf3>
 800ed20:	4604      	mov	r4, r0
 800ed22:	460d      	mov	r5, r1
 800ed24:	ec45 4b10 	vmov	d0, r4, r5
 800ed28:	b003      	add	sp, #12
 800ed2a:	ecbd 8b04 	vpop	{d8-d9}
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	4b1b      	ldr	r3, [pc, #108]	; (800eda0 <__kernel_sin+0x150>)
 800ed34:	ec51 0b18 	vmov	r0, r1, d8
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f7f1 fc75 	bl	8000628 <__aeabi_dmul>
 800ed3e:	4632      	mov	r2, r6
 800ed40:	ec41 0b19 	vmov	d9, r0, r1
 800ed44:	463b      	mov	r3, r7
 800ed46:	4640      	mov	r0, r8
 800ed48:	4649      	mov	r1, r9
 800ed4a:	f7f1 fc6d 	bl	8000628 <__aeabi_dmul>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	460b      	mov	r3, r1
 800ed52:	ec51 0b19 	vmov	r0, r1, d9
 800ed56:	f7f1 faaf 	bl	80002b8 <__aeabi_dsub>
 800ed5a:	4652      	mov	r2, sl
 800ed5c:	465b      	mov	r3, fp
 800ed5e:	f7f1 fc63 	bl	8000628 <__aeabi_dmul>
 800ed62:	ec53 2b18 	vmov	r2, r3, d8
 800ed66:	f7f1 faa7 	bl	80002b8 <__aeabi_dsub>
 800ed6a:	a30b      	add	r3, pc, #44	; (adr r3, 800ed98 <__kernel_sin+0x148>)
 800ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed70:	4606      	mov	r6, r0
 800ed72:	460f      	mov	r7, r1
 800ed74:	4640      	mov	r0, r8
 800ed76:	4649      	mov	r1, r9
 800ed78:	f7f1 fc56 	bl	8000628 <__aeabi_dmul>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 fa9a 	bl	80002bc <__adddf3>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	4629      	mov	r1, r5
 800ed90:	f7f1 fa92 	bl	80002b8 <__aeabi_dsub>
 800ed94:	e7c4      	b.n	800ed20 <__kernel_sin+0xd0>
 800ed96:	bf00      	nop
 800ed98:	55555549 	.word	0x55555549
 800ed9c:	3fc55555 	.word	0x3fc55555
 800eda0:	3fe00000 	.word	0x3fe00000
 800eda4:	5acfd57c 	.word	0x5acfd57c
 800eda8:	3de5d93a 	.word	0x3de5d93a
 800edac:	8a2b9ceb 	.word	0x8a2b9ceb
 800edb0:	3e5ae5e6 	.word	0x3e5ae5e6
 800edb4:	57b1fe7d 	.word	0x57b1fe7d
 800edb8:	3ec71de3 	.word	0x3ec71de3
 800edbc:	19c161d5 	.word	0x19c161d5
 800edc0:	3f2a01a0 	.word	0x3f2a01a0
 800edc4:	1110f8a6 	.word	0x1110f8a6
 800edc8:	3f811111 	.word	0x3f811111

0800edcc <with_errno>:
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	4604      	mov	r4, r0
 800edd0:	460d      	mov	r5, r1
 800edd2:	4616      	mov	r6, r2
 800edd4:	f7fb f9ea 	bl	800a1ac <__errno>
 800edd8:	4629      	mov	r1, r5
 800edda:	6006      	str	r6, [r0, #0]
 800eddc:	4620      	mov	r0, r4
 800edde:	bd70      	pop	{r4, r5, r6, pc}

0800ede0 <xflow>:
 800ede0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ede2:	4614      	mov	r4, r2
 800ede4:	461d      	mov	r5, r3
 800ede6:	b108      	cbz	r0, 800edec <xflow+0xc>
 800ede8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800edec:	e9cd 2300 	strd	r2, r3, [sp]
 800edf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edf4:	4620      	mov	r0, r4
 800edf6:	4629      	mov	r1, r5
 800edf8:	f7f1 fc16 	bl	8000628 <__aeabi_dmul>
 800edfc:	2222      	movs	r2, #34	; 0x22
 800edfe:	b003      	add	sp, #12
 800ee00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee04:	f7ff bfe2 	b.w	800edcc <with_errno>

0800ee08 <__math_uflow>:
 800ee08:	b508      	push	{r3, lr}
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ee10:	f7ff ffe6 	bl	800ede0 <xflow>
 800ee14:	ec41 0b10 	vmov	d0, r0, r1
 800ee18:	bd08      	pop	{r3, pc}

0800ee1a <__math_oflow>:
 800ee1a:	b508      	push	{r3, lr}
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ee22:	f7ff ffdd 	bl	800ede0 <xflow>
 800ee26:	ec41 0b10 	vmov	d0, r0, r1
 800ee2a:	bd08      	pop	{r3, pc}
 800ee2c:	0000      	movs	r0, r0
	...

0800ee30 <atan>:
 800ee30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	ec55 4b10 	vmov	r4, r5, d0
 800ee38:	4bc3      	ldr	r3, [pc, #780]	; (800f148 <atan+0x318>)
 800ee3a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ee3e:	429e      	cmp	r6, r3
 800ee40:	46ab      	mov	fp, r5
 800ee42:	dd18      	ble.n	800ee76 <atan+0x46>
 800ee44:	4bc1      	ldr	r3, [pc, #772]	; (800f14c <atan+0x31c>)
 800ee46:	429e      	cmp	r6, r3
 800ee48:	dc01      	bgt.n	800ee4e <atan+0x1e>
 800ee4a:	d109      	bne.n	800ee60 <atan+0x30>
 800ee4c:	b144      	cbz	r4, 800ee60 <atan+0x30>
 800ee4e:	4622      	mov	r2, r4
 800ee50:	462b      	mov	r3, r5
 800ee52:	4620      	mov	r0, r4
 800ee54:	4629      	mov	r1, r5
 800ee56:	f7f1 fa31 	bl	80002bc <__adddf3>
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	460d      	mov	r5, r1
 800ee5e:	e006      	b.n	800ee6e <atan+0x3e>
 800ee60:	f1bb 0f00 	cmp.w	fp, #0
 800ee64:	f300 8131 	bgt.w	800f0ca <atan+0x29a>
 800ee68:	a59b      	add	r5, pc, #620	; (adr r5, 800f0d8 <atan+0x2a8>)
 800ee6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ee6e:	ec45 4b10 	vmov	d0, r4, r5
 800ee72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee76:	4bb6      	ldr	r3, [pc, #728]	; (800f150 <atan+0x320>)
 800ee78:	429e      	cmp	r6, r3
 800ee7a:	dc14      	bgt.n	800eea6 <atan+0x76>
 800ee7c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ee80:	429e      	cmp	r6, r3
 800ee82:	dc0d      	bgt.n	800eea0 <atan+0x70>
 800ee84:	a396      	add	r3, pc, #600	; (adr r3, 800f0e0 <atan+0x2b0>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	ee10 0a10 	vmov	r0, s0
 800ee8e:	4629      	mov	r1, r5
 800ee90:	f7f1 fa14 	bl	80002bc <__adddf3>
 800ee94:	4baf      	ldr	r3, [pc, #700]	; (800f154 <atan+0x324>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	f7f1 fe56 	bl	8000b48 <__aeabi_dcmpgt>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d1e6      	bne.n	800ee6e <atan+0x3e>
 800eea0:	f04f 3aff 	mov.w	sl, #4294967295
 800eea4:	e02b      	b.n	800eefe <atan+0xce>
 800eea6:	f000 f963 	bl	800f170 <fabs>
 800eeaa:	4bab      	ldr	r3, [pc, #684]	; (800f158 <atan+0x328>)
 800eeac:	429e      	cmp	r6, r3
 800eeae:	ec55 4b10 	vmov	r4, r5, d0
 800eeb2:	f300 80bf 	bgt.w	800f034 <atan+0x204>
 800eeb6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eeba:	429e      	cmp	r6, r3
 800eebc:	f300 80a0 	bgt.w	800f000 <atan+0x1d0>
 800eec0:	ee10 2a10 	vmov	r2, s0
 800eec4:	ee10 0a10 	vmov	r0, s0
 800eec8:	462b      	mov	r3, r5
 800eeca:	4629      	mov	r1, r5
 800eecc:	f7f1 f9f6 	bl	80002bc <__adddf3>
 800eed0:	4ba0      	ldr	r3, [pc, #640]	; (800f154 <atan+0x324>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	f7f1 f9f0 	bl	80002b8 <__aeabi_dsub>
 800eed8:	2200      	movs	r2, #0
 800eeda:	4606      	mov	r6, r0
 800eedc:	460f      	mov	r7, r1
 800eede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eee2:	4620      	mov	r0, r4
 800eee4:	4629      	mov	r1, r5
 800eee6:	f7f1 f9e9 	bl	80002bc <__adddf3>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4630      	mov	r0, r6
 800eef0:	4639      	mov	r1, r7
 800eef2:	f7f1 fcc3 	bl	800087c <__aeabi_ddiv>
 800eef6:	f04f 0a00 	mov.w	sl, #0
 800eefa:	4604      	mov	r4, r0
 800eefc:	460d      	mov	r5, r1
 800eefe:	4622      	mov	r2, r4
 800ef00:	462b      	mov	r3, r5
 800ef02:	4620      	mov	r0, r4
 800ef04:	4629      	mov	r1, r5
 800ef06:	f7f1 fb8f 	bl	8000628 <__aeabi_dmul>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4680      	mov	r8, r0
 800ef10:	4689      	mov	r9, r1
 800ef12:	f7f1 fb89 	bl	8000628 <__aeabi_dmul>
 800ef16:	a374      	add	r3, pc, #464	; (adr r3, 800f0e8 <atan+0x2b8>)
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	4606      	mov	r6, r0
 800ef1e:	460f      	mov	r7, r1
 800ef20:	f7f1 fb82 	bl	8000628 <__aeabi_dmul>
 800ef24:	a372      	add	r3, pc, #456	; (adr r3, 800f0f0 <atan+0x2c0>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	f7f1 f9c7 	bl	80002bc <__adddf3>
 800ef2e:	4632      	mov	r2, r6
 800ef30:	463b      	mov	r3, r7
 800ef32:	f7f1 fb79 	bl	8000628 <__aeabi_dmul>
 800ef36:	a370      	add	r3, pc, #448	; (adr r3, 800f0f8 <atan+0x2c8>)
 800ef38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3c:	f7f1 f9be 	bl	80002bc <__adddf3>
 800ef40:	4632      	mov	r2, r6
 800ef42:	463b      	mov	r3, r7
 800ef44:	f7f1 fb70 	bl	8000628 <__aeabi_dmul>
 800ef48:	a36d      	add	r3, pc, #436	; (adr r3, 800f100 <atan+0x2d0>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	f7f1 f9b5 	bl	80002bc <__adddf3>
 800ef52:	4632      	mov	r2, r6
 800ef54:	463b      	mov	r3, r7
 800ef56:	f7f1 fb67 	bl	8000628 <__aeabi_dmul>
 800ef5a:	a36b      	add	r3, pc, #428	; (adr r3, 800f108 <atan+0x2d8>)
 800ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef60:	f7f1 f9ac 	bl	80002bc <__adddf3>
 800ef64:	4632      	mov	r2, r6
 800ef66:	463b      	mov	r3, r7
 800ef68:	f7f1 fb5e 	bl	8000628 <__aeabi_dmul>
 800ef6c:	a368      	add	r3, pc, #416	; (adr r3, 800f110 <atan+0x2e0>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	f7f1 f9a3 	bl	80002bc <__adddf3>
 800ef76:	4642      	mov	r2, r8
 800ef78:	464b      	mov	r3, r9
 800ef7a:	f7f1 fb55 	bl	8000628 <__aeabi_dmul>
 800ef7e:	a366      	add	r3, pc, #408	; (adr r3, 800f118 <atan+0x2e8>)
 800ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef84:	4680      	mov	r8, r0
 800ef86:	4689      	mov	r9, r1
 800ef88:	4630      	mov	r0, r6
 800ef8a:	4639      	mov	r1, r7
 800ef8c:	f7f1 fb4c 	bl	8000628 <__aeabi_dmul>
 800ef90:	a363      	add	r3, pc, #396	; (adr r3, 800f120 <atan+0x2f0>)
 800ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef96:	f7f1 f98f 	bl	80002b8 <__aeabi_dsub>
 800ef9a:	4632      	mov	r2, r6
 800ef9c:	463b      	mov	r3, r7
 800ef9e:	f7f1 fb43 	bl	8000628 <__aeabi_dmul>
 800efa2:	a361      	add	r3, pc, #388	; (adr r3, 800f128 <atan+0x2f8>)
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	f7f1 f986 	bl	80002b8 <__aeabi_dsub>
 800efac:	4632      	mov	r2, r6
 800efae:	463b      	mov	r3, r7
 800efb0:	f7f1 fb3a 	bl	8000628 <__aeabi_dmul>
 800efb4:	a35e      	add	r3, pc, #376	; (adr r3, 800f130 <atan+0x300>)
 800efb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efba:	f7f1 f97d 	bl	80002b8 <__aeabi_dsub>
 800efbe:	4632      	mov	r2, r6
 800efc0:	463b      	mov	r3, r7
 800efc2:	f7f1 fb31 	bl	8000628 <__aeabi_dmul>
 800efc6:	a35c      	add	r3, pc, #368	; (adr r3, 800f138 <atan+0x308>)
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	f7f1 f974 	bl	80002b8 <__aeabi_dsub>
 800efd0:	4632      	mov	r2, r6
 800efd2:	463b      	mov	r3, r7
 800efd4:	f7f1 fb28 	bl	8000628 <__aeabi_dmul>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	4640      	mov	r0, r8
 800efde:	4649      	mov	r1, r9
 800efe0:	f7f1 f96c 	bl	80002bc <__adddf3>
 800efe4:	4622      	mov	r2, r4
 800efe6:	462b      	mov	r3, r5
 800efe8:	f7f1 fb1e 	bl	8000628 <__aeabi_dmul>
 800efec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	d14b      	bne.n	800f08e <atan+0x25e>
 800eff6:	4620      	mov	r0, r4
 800eff8:	4629      	mov	r1, r5
 800effa:	f7f1 f95d 	bl	80002b8 <__aeabi_dsub>
 800effe:	e72c      	b.n	800ee5a <atan+0x2a>
 800f000:	ee10 0a10 	vmov	r0, s0
 800f004:	4b53      	ldr	r3, [pc, #332]	; (800f154 <atan+0x324>)
 800f006:	2200      	movs	r2, #0
 800f008:	4629      	mov	r1, r5
 800f00a:	f7f1 f955 	bl	80002b8 <__aeabi_dsub>
 800f00e:	4b51      	ldr	r3, [pc, #324]	; (800f154 <atan+0x324>)
 800f010:	4606      	mov	r6, r0
 800f012:	460f      	mov	r7, r1
 800f014:	2200      	movs	r2, #0
 800f016:	4620      	mov	r0, r4
 800f018:	4629      	mov	r1, r5
 800f01a:	f7f1 f94f 	bl	80002bc <__adddf3>
 800f01e:	4602      	mov	r2, r0
 800f020:	460b      	mov	r3, r1
 800f022:	4630      	mov	r0, r6
 800f024:	4639      	mov	r1, r7
 800f026:	f7f1 fc29 	bl	800087c <__aeabi_ddiv>
 800f02a:	f04f 0a01 	mov.w	sl, #1
 800f02e:	4604      	mov	r4, r0
 800f030:	460d      	mov	r5, r1
 800f032:	e764      	b.n	800eefe <atan+0xce>
 800f034:	4b49      	ldr	r3, [pc, #292]	; (800f15c <atan+0x32c>)
 800f036:	429e      	cmp	r6, r3
 800f038:	da1d      	bge.n	800f076 <atan+0x246>
 800f03a:	ee10 0a10 	vmov	r0, s0
 800f03e:	4b48      	ldr	r3, [pc, #288]	; (800f160 <atan+0x330>)
 800f040:	2200      	movs	r2, #0
 800f042:	4629      	mov	r1, r5
 800f044:	f7f1 f938 	bl	80002b8 <__aeabi_dsub>
 800f048:	4b45      	ldr	r3, [pc, #276]	; (800f160 <atan+0x330>)
 800f04a:	4606      	mov	r6, r0
 800f04c:	460f      	mov	r7, r1
 800f04e:	2200      	movs	r2, #0
 800f050:	4620      	mov	r0, r4
 800f052:	4629      	mov	r1, r5
 800f054:	f7f1 fae8 	bl	8000628 <__aeabi_dmul>
 800f058:	4b3e      	ldr	r3, [pc, #248]	; (800f154 <atan+0x324>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	f7f1 f92e 	bl	80002bc <__adddf3>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	4630      	mov	r0, r6
 800f066:	4639      	mov	r1, r7
 800f068:	f7f1 fc08 	bl	800087c <__aeabi_ddiv>
 800f06c:	f04f 0a02 	mov.w	sl, #2
 800f070:	4604      	mov	r4, r0
 800f072:	460d      	mov	r5, r1
 800f074:	e743      	b.n	800eefe <atan+0xce>
 800f076:	462b      	mov	r3, r5
 800f078:	ee10 2a10 	vmov	r2, s0
 800f07c:	4939      	ldr	r1, [pc, #228]	; (800f164 <atan+0x334>)
 800f07e:	2000      	movs	r0, #0
 800f080:	f7f1 fbfc 	bl	800087c <__aeabi_ddiv>
 800f084:	f04f 0a03 	mov.w	sl, #3
 800f088:	4604      	mov	r4, r0
 800f08a:	460d      	mov	r5, r1
 800f08c:	e737      	b.n	800eefe <atan+0xce>
 800f08e:	4b36      	ldr	r3, [pc, #216]	; (800f168 <atan+0x338>)
 800f090:	4e36      	ldr	r6, [pc, #216]	; (800f16c <atan+0x33c>)
 800f092:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f096:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f09a:	e9da 2300 	ldrd	r2, r3, [sl]
 800f09e:	f7f1 f90b 	bl	80002b8 <__aeabi_dsub>
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	462b      	mov	r3, r5
 800f0a6:	f7f1 f907 	bl	80002b8 <__aeabi_dsub>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f0b2:	f7f1 f901 	bl	80002b8 <__aeabi_dsub>
 800f0b6:	f1bb 0f00 	cmp.w	fp, #0
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	460d      	mov	r5, r1
 800f0be:	f6bf aed6 	bge.w	800ee6e <atan+0x3e>
 800f0c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0c6:	461d      	mov	r5, r3
 800f0c8:	e6d1      	b.n	800ee6e <atan+0x3e>
 800f0ca:	a51d      	add	r5, pc, #116	; (adr r5, 800f140 <atan+0x310>)
 800f0cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f0d0:	e6cd      	b.n	800ee6e <atan+0x3e>
 800f0d2:	bf00      	nop
 800f0d4:	f3af 8000 	nop.w
 800f0d8:	54442d18 	.word	0x54442d18
 800f0dc:	bff921fb 	.word	0xbff921fb
 800f0e0:	8800759c 	.word	0x8800759c
 800f0e4:	7e37e43c 	.word	0x7e37e43c
 800f0e8:	e322da11 	.word	0xe322da11
 800f0ec:	3f90ad3a 	.word	0x3f90ad3a
 800f0f0:	24760deb 	.word	0x24760deb
 800f0f4:	3fa97b4b 	.word	0x3fa97b4b
 800f0f8:	a0d03d51 	.word	0xa0d03d51
 800f0fc:	3fb10d66 	.word	0x3fb10d66
 800f100:	c54c206e 	.word	0xc54c206e
 800f104:	3fb745cd 	.word	0x3fb745cd
 800f108:	920083ff 	.word	0x920083ff
 800f10c:	3fc24924 	.word	0x3fc24924
 800f110:	5555550d 	.word	0x5555550d
 800f114:	3fd55555 	.word	0x3fd55555
 800f118:	2c6a6c2f 	.word	0x2c6a6c2f
 800f11c:	bfa2b444 	.word	0xbfa2b444
 800f120:	52defd9a 	.word	0x52defd9a
 800f124:	3fadde2d 	.word	0x3fadde2d
 800f128:	af749a6d 	.word	0xaf749a6d
 800f12c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f130:	fe231671 	.word	0xfe231671
 800f134:	3fbc71c6 	.word	0x3fbc71c6
 800f138:	9998ebc4 	.word	0x9998ebc4
 800f13c:	3fc99999 	.word	0x3fc99999
 800f140:	54442d18 	.word	0x54442d18
 800f144:	3ff921fb 	.word	0x3ff921fb
 800f148:	440fffff 	.word	0x440fffff
 800f14c:	7ff00000 	.word	0x7ff00000
 800f150:	3fdbffff 	.word	0x3fdbffff
 800f154:	3ff00000 	.word	0x3ff00000
 800f158:	3ff2ffff 	.word	0x3ff2ffff
 800f15c:	40038000 	.word	0x40038000
 800f160:	3ff80000 	.word	0x3ff80000
 800f164:	bff00000 	.word	0xbff00000
 800f168:	0800fc30 	.word	0x0800fc30
 800f16c:	0800fc10 	.word	0x0800fc10

0800f170 <fabs>:
 800f170:	ec51 0b10 	vmov	r0, r1, d0
 800f174:	ee10 2a10 	vmov	r2, s0
 800f178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f17c:	ec43 2b10 	vmov	d0, r2, r3
 800f180:	4770      	bx	lr

0800f182 <finite>:
 800f182:	b082      	sub	sp, #8
 800f184:	ed8d 0b00 	vstr	d0, [sp]
 800f188:	9801      	ldr	r0, [sp, #4]
 800f18a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f18e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f192:	0fc0      	lsrs	r0, r0, #31
 800f194:	b002      	add	sp, #8
 800f196:	4770      	bx	lr

0800f198 <floor>:
 800f198:	ec51 0b10 	vmov	r0, r1, d0
 800f19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f1a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f1a8:	2e13      	cmp	r6, #19
 800f1aa:	ee10 5a10 	vmov	r5, s0
 800f1ae:	ee10 8a10 	vmov	r8, s0
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	dc32      	bgt.n	800f21c <floor+0x84>
 800f1b6:	2e00      	cmp	r6, #0
 800f1b8:	da14      	bge.n	800f1e4 <floor+0x4c>
 800f1ba:	a333      	add	r3, pc, #204	; (adr r3, 800f288 <floor+0xf0>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	f7f1 f87c 	bl	80002bc <__adddf3>
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f7f1 fcbe 	bl	8000b48 <__aeabi_dcmpgt>
 800f1cc:	b138      	cbz	r0, 800f1de <floor+0x46>
 800f1ce:	2c00      	cmp	r4, #0
 800f1d0:	da57      	bge.n	800f282 <floor+0xea>
 800f1d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f1d6:	431d      	orrs	r5, r3
 800f1d8:	d001      	beq.n	800f1de <floor+0x46>
 800f1da:	4c2d      	ldr	r4, [pc, #180]	; (800f290 <floor+0xf8>)
 800f1dc:	2500      	movs	r5, #0
 800f1de:	4621      	mov	r1, r4
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	e025      	b.n	800f230 <floor+0x98>
 800f1e4:	4f2b      	ldr	r7, [pc, #172]	; (800f294 <floor+0xfc>)
 800f1e6:	4137      	asrs	r7, r6
 800f1e8:	ea01 0307 	and.w	r3, r1, r7
 800f1ec:	4303      	orrs	r3, r0
 800f1ee:	d01f      	beq.n	800f230 <floor+0x98>
 800f1f0:	a325      	add	r3, pc, #148	; (adr r3, 800f288 <floor+0xf0>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	f7f1 f861 	bl	80002bc <__adddf3>
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	f7f1 fca3 	bl	8000b48 <__aeabi_dcmpgt>
 800f202:	2800      	cmp	r0, #0
 800f204:	d0eb      	beq.n	800f1de <floor+0x46>
 800f206:	2c00      	cmp	r4, #0
 800f208:	bfbe      	ittt	lt
 800f20a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f20e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f212:	19a4      	addlt	r4, r4, r6
 800f214:	ea24 0407 	bic.w	r4, r4, r7
 800f218:	2500      	movs	r5, #0
 800f21a:	e7e0      	b.n	800f1de <floor+0x46>
 800f21c:	2e33      	cmp	r6, #51	; 0x33
 800f21e:	dd0b      	ble.n	800f238 <floor+0xa0>
 800f220:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f224:	d104      	bne.n	800f230 <floor+0x98>
 800f226:	ee10 2a10 	vmov	r2, s0
 800f22a:	460b      	mov	r3, r1
 800f22c:	f7f1 f846 	bl	80002bc <__adddf3>
 800f230:	ec41 0b10 	vmov	d0, r0, r1
 800f234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f238:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f23c:	f04f 33ff 	mov.w	r3, #4294967295
 800f240:	fa23 f707 	lsr.w	r7, r3, r7
 800f244:	4207      	tst	r7, r0
 800f246:	d0f3      	beq.n	800f230 <floor+0x98>
 800f248:	a30f      	add	r3, pc, #60	; (adr r3, 800f288 <floor+0xf0>)
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	f7f1 f835 	bl	80002bc <__adddf3>
 800f252:	2200      	movs	r2, #0
 800f254:	2300      	movs	r3, #0
 800f256:	f7f1 fc77 	bl	8000b48 <__aeabi_dcmpgt>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d0bf      	beq.n	800f1de <floor+0x46>
 800f25e:	2c00      	cmp	r4, #0
 800f260:	da02      	bge.n	800f268 <floor+0xd0>
 800f262:	2e14      	cmp	r6, #20
 800f264:	d103      	bne.n	800f26e <floor+0xd6>
 800f266:	3401      	adds	r4, #1
 800f268:	ea25 0507 	bic.w	r5, r5, r7
 800f26c:	e7b7      	b.n	800f1de <floor+0x46>
 800f26e:	2301      	movs	r3, #1
 800f270:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f274:	fa03 f606 	lsl.w	r6, r3, r6
 800f278:	4435      	add	r5, r6
 800f27a:	4545      	cmp	r5, r8
 800f27c:	bf38      	it	cc
 800f27e:	18e4      	addcc	r4, r4, r3
 800f280:	e7f2      	b.n	800f268 <floor+0xd0>
 800f282:	2500      	movs	r5, #0
 800f284:	462c      	mov	r4, r5
 800f286:	e7aa      	b.n	800f1de <floor+0x46>
 800f288:	8800759c 	.word	0x8800759c
 800f28c:	7e37e43c 	.word	0x7e37e43c
 800f290:	bff00000 	.word	0xbff00000
 800f294:	000fffff 	.word	0x000fffff

0800f298 <scalbn>:
 800f298:	b570      	push	{r4, r5, r6, lr}
 800f29a:	ec55 4b10 	vmov	r4, r5, d0
 800f29e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	462b      	mov	r3, r5
 800f2a6:	b99a      	cbnz	r2, 800f2d0 <scalbn+0x38>
 800f2a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f2ac:	4323      	orrs	r3, r4
 800f2ae:	d036      	beq.n	800f31e <scalbn+0x86>
 800f2b0:	4b39      	ldr	r3, [pc, #228]	; (800f398 <scalbn+0x100>)
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	ee10 0a10 	vmov	r0, s0
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f7f1 f9b5 	bl	8000628 <__aeabi_dmul>
 800f2be:	4b37      	ldr	r3, [pc, #220]	; (800f39c <scalbn+0x104>)
 800f2c0:	429e      	cmp	r6, r3
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	460d      	mov	r5, r1
 800f2c6:	da10      	bge.n	800f2ea <scalbn+0x52>
 800f2c8:	a32b      	add	r3, pc, #172	; (adr r3, 800f378 <scalbn+0xe0>)
 800f2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ce:	e03a      	b.n	800f346 <scalbn+0xae>
 800f2d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f2d4:	428a      	cmp	r2, r1
 800f2d6:	d10c      	bne.n	800f2f2 <scalbn+0x5a>
 800f2d8:	ee10 2a10 	vmov	r2, s0
 800f2dc:	4620      	mov	r0, r4
 800f2de:	4629      	mov	r1, r5
 800f2e0:	f7f0 ffec 	bl	80002bc <__adddf3>
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	460d      	mov	r5, r1
 800f2e8:	e019      	b.n	800f31e <scalbn+0x86>
 800f2ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	3a36      	subs	r2, #54	; 0x36
 800f2f2:	4432      	add	r2, r6
 800f2f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f2f8:	428a      	cmp	r2, r1
 800f2fa:	dd08      	ble.n	800f30e <scalbn+0x76>
 800f2fc:	2d00      	cmp	r5, #0
 800f2fe:	a120      	add	r1, pc, #128	; (adr r1, 800f380 <scalbn+0xe8>)
 800f300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f304:	da1c      	bge.n	800f340 <scalbn+0xa8>
 800f306:	a120      	add	r1, pc, #128	; (adr r1, 800f388 <scalbn+0xf0>)
 800f308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f30c:	e018      	b.n	800f340 <scalbn+0xa8>
 800f30e:	2a00      	cmp	r2, #0
 800f310:	dd08      	ble.n	800f324 <scalbn+0x8c>
 800f312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f31a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f31e:	ec45 4b10 	vmov	d0, r4, r5
 800f322:	bd70      	pop	{r4, r5, r6, pc}
 800f324:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f328:	da19      	bge.n	800f35e <scalbn+0xc6>
 800f32a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f32e:	429e      	cmp	r6, r3
 800f330:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f334:	dd0a      	ble.n	800f34c <scalbn+0xb4>
 800f336:	a112      	add	r1, pc, #72	; (adr r1, 800f380 <scalbn+0xe8>)
 800f338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1e2      	bne.n	800f306 <scalbn+0x6e>
 800f340:	a30f      	add	r3, pc, #60	; (adr r3, 800f380 <scalbn+0xe8>)
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	f7f1 f96f 	bl	8000628 <__aeabi_dmul>
 800f34a:	e7cb      	b.n	800f2e4 <scalbn+0x4c>
 800f34c:	a10a      	add	r1, pc, #40	; (adr r1, 800f378 <scalbn+0xe0>)
 800f34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0b8      	beq.n	800f2c8 <scalbn+0x30>
 800f356:	a10e      	add	r1, pc, #56	; (adr r1, 800f390 <scalbn+0xf8>)
 800f358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f35c:	e7b4      	b.n	800f2c8 <scalbn+0x30>
 800f35e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f362:	3236      	adds	r2, #54	; 0x36
 800f364:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f368:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f36c:	4620      	mov	r0, r4
 800f36e:	4b0c      	ldr	r3, [pc, #48]	; (800f3a0 <scalbn+0x108>)
 800f370:	2200      	movs	r2, #0
 800f372:	e7e8      	b.n	800f346 <scalbn+0xae>
 800f374:	f3af 8000 	nop.w
 800f378:	c2f8f359 	.word	0xc2f8f359
 800f37c:	01a56e1f 	.word	0x01a56e1f
 800f380:	8800759c 	.word	0x8800759c
 800f384:	7e37e43c 	.word	0x7e37e43c
 800f388:	8800759c 	.word	0x8800759c
 800f38c:	fe37e43c 	.word	0xfe37e43c
 800f390:	c2f8f359 	.word	0xc2f8f359
 800f394:	81a56e1f 	.word	0x81a56e1f
 800f398:	43500000 	.word	0x43500000
 800f39c:	ffff3cb0 	.word	0xffff3cb0
 800f3a0:	3c900000 	.word	0x3c900000

0800f3a4 <_sbrk>:
 800f3a4:	4a04      	ldr	r2, [pc, #16]	; (800f3b8 <_sbrk+0x14>)
 800f3a6:	6811      	ldr	r1, [r2, #0]
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	b909      	cbnz	r1, 800f3b0 <_sbrk+0xc>
 800f3ac:	4903      	ldr	r1, [pc, #12]	; (800f3bc <_sbrk+0x18>)
 800f3ae:	6011      	str	r1, [r2, #0]
 800f3b0:	6810      	ldr	r0, [r2, #0]
 800f3b2:	4403      	add	r3, r0
 800f3b4:	6013      	str	r3, [r2, #0]
 800f3b6:	4770      	bx	lr
 800f3b8:	200133cc 	.word	0x200133cc
 800f3bc:	200133d0 	.word	0x200133d0

0800f3c0 <_init>:
 800f3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c2:	bf00      	nop
 800f3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3c6:	bc08      	pop	{r3}
 800f3c8:	469e      	mov	lr, r3
 800f3ca:	4770      	bx	lr

0800f3cc <_fini>:
 800f3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ce:	bf00      	nop
 800f3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3d2:	bc08      	pop	{r3}
 800f3d4:	469e      	mov	lr, r3
 800f3d6:	4770      	bx	lr
