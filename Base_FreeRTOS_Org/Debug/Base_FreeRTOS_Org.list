
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f578  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800f718  0800f718  0001f718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffb8  0800ffb8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ffb8  0800ffb8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ffb8  0800ffb8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffb8  0800ffb8  0001ffb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffbc  0800ffbc  0001ffbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ffc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013210  200001f8  080101b4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013408  080101b4  00023408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5ef  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002536  00000000  00000000  0002d813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001273d  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e93a  00000000  00000000  00043b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062559  00000000  00000000  000524cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4a28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  000b4a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f700 	.word	0x0800f700

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800f700 	.word	0x0800f700

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b97      	ldr	r3, [pc, #604]	; (8000f1c <main+0x264>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a95      	ldr	r2, [pc, #596]	; (8000f1c <main+0x264>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <main+0x268>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a93      	ldr	r2, [pc, #588]	; (8000f20 <main+0x268>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	/* Primero configuramos */
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();

   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f008 faee 	bl	80092bc <RCC_enableMaxFrequencies>
	inSystem ();
 8000ce0:	f000 f95a 	bl	8000f98 <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	488f      	ldr	r0, [pc, #572]	; (8000f24 <main+0x26c>)
 8000ce8:	f000 ffb4 	bl	8001c54 <calibracionGyros>
 8000cec:	ee10 3a10 	vmov	r3, s0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc41 	bl	8000578 <__aeabi_f2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	498b      	ldr	r1, [pc, #556]	; (8000f28 <main+0x270>)
 8000cfc:	e9c1 2300 	strd	r2, r3, [r1]


	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000d00:	4b8a      	ldr	r3, [pc, #552]	; (8000f2c <main+0x274>)
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2303      	movs	r3, #3
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	22c8      	movs	r2, #200	; 0xc8
 8000d0c:	4988      	ldr	r1, [pc, #544]	; (8000f30 <main+0x278>)
 8000d0e:	4889      	ldr	r0, [pc, #548]	; (8000f34 <main+0x27c>)
 8000d10:	f003 f994 	bl	800403c <xTaskCreate>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a88      	ldr	r2, [pc, #544]	; (8000f38 <main+0x280>)
 8000d18:	6013      	str	r3, [r2, #0]
					NULL,                   // parametro pasado a la tarea
					3,                      // Prioridad de la tarea
					&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d1a:	4b87      	ldr	r3, [pc, #540]	; (8000f38 <main+0x280>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00a      	beq.n	8000d38 <main+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d34:	bf00      	nop
 8000d36:	e7fe      	b.n	8000d36 <main+0x7e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d38:	4b80      	ldr	r3, [pc, #512]	; (8000f3c <main+0x284>)
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	22c8      	movs	r2, #200	; 0xc8
 8000d44:	497e      	ldr	r1, [pc, #504]	; (8000f40 <main+0x288>)
 8000d46:	487f      	ldr	r0, [pc, #508]	; (8000f44 <main+0x28c>)
 8000d48:	f003 f978 	bl	800403c <xTaskCreate>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a7a      	ldr	r2, [pc, #488]	; (8000f38 <main+0x280>)
 8000d50:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d52:	4b79      	ldr	r3, [pc, #484]	; (8000f38 <main+0x280>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00a      	beq.n	8000d70 <main+0xb8>
        __asm volatile
 8000d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5e:	f383 8811 	msr	BASEPRI, r3
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	623b      	str	r3, [r7, #32]
    }
 8000d6c:	bf00      	nop
 8000d6e:	e7fe      	b.n	8000d6e <main+0xb6>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d70:	4b75      	ldr	r3, [pc, #468]	; (8000f48 <main+0x290>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2303      	movs	r3, #3
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	22c8      	movs	r2, #200	; 0xc8
 8000d7c:	4973      	ldr	r1, [pc, #460]	; (8000f4c <main+0x294>)
 8000d7e:	4874      	ldr	r0, [pc, #464]	; (8000f50 <main+0x298>)
 8000d80:	f003 f95c 	bl	800403c <xTaskCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a6c      	ldr	r2, [pc, #432]	; (8000f38 <main+0x280>)
 8000d88:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d8a:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <main+0x280>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <main+0xf0>
        __asm volatile
 8000d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	61fb      	str	r3, [r7, #28]
    }
 8000da4:	bf00      	nop
 8000da6:	e7fe      	b.n	8000da6 <main+0xee>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000da8:	4b6a      	ldr	r3, [pc, #424]	; (8000f54 <main+0x29c>)
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2303      	movs	r3, #3
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	22c8      	movs	r2, #200	; 0xc8
 8000db4:	4968      	ldr	r1, [pc, #416]	; (8000f58 <main+0x2a0>)
 8000db6:	4869      	ldr	r0, [pc, #420]	; (8000f5c <main+0x2a4>)
 8000db8:	f003 f940 	bl	800403c <xTaskCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a5e      	ldr	r2, [pc, #376]	; (8000f38 <main+0x280>)
 8000dc0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <main+0x280>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00a      	beq.n	8000de0 <main+0x128>
        __asm volatile
 8000dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	61bb      	str	r3, [r7, #24]
    }
 8000ddc:	bf00      	nop
 8000dde:	e7fe      	b.n	8000dde <main+0x126>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000de0:	4b5f      	ldr	r3, [pc, #380]	; (8000f60 <main+0x2a8>)
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2303      	movs	r3, #3
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	22c8      	movs	r2, #200	; 0xc8
 8000dec:	495d      	ldr	r1, [pc, #372]	; (8000f64 <main+0x2ac>)
 8000dee:	485e      	ldr	r0, [pc, #376]	; (8000f68 <main+0x2b0>)
 8000df0:	f003 f924 	bl	800403c <xTaskCreate>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <main+0x280>)
 8000df8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <main+0x280>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d00a      	beq.n	8000e18 <main+0x160>
        __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	617b      	str	r3, [r7, #20]
    }
 8000e14:	bf00      	nop
 8000e16:	e7fe      	b.n	8000e16 <main+0x15e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000e18:	4b54      	ldr	r3, [pc, #336]	; (8000f6c <main+0x2b4>)
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2300      	movs	r3, #0
 8000e22:	22c8      	movs	r2, #200	; 0xc8
 8000e24:	4952      	ldr	r1, [pc, #328]	; (8000f70 <main+0x2b8>)
 8000e26:	4853      	ldr	r0, [pc, #332]	; (8000f74 <main+0x2bc>)
 8000e28:	f003 f908 	bl	800403c <xTaskCreate>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <main+0x280>)
 8000e30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e32:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <main+0x280>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d00a      	beq.n	8000e50 <main+0x198>
        __asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	613b      	str	r3, [r7, #16]
    }
 8000e4c:	bf00      	nop
 8000e4e:	e7fe      	b.n	8000e4e <main+0x196>

	 /////////////////////////////////TAREA DE IR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_GoTo,"Task-GoTo",STACK_SIZE,NULL,3,&xHandleTask_GoTo );
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <main+0x2c0>)
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2303      	movs	r3, #3
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	22c8      	movs	r2, #200	; 0xc8
 8000e5c:	4947      	ldr	r1, [pc, #284]	; (8000f7c <main+0x2c4>)
 8000e5e:	4848      	ldr	r0, [pc, #288]	; (8000f80 <main+0x2c8>)
 8000e60:	f003 f8ec 	bl	800403c <xTaskCreate>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <main+0x280>)
 8000e68:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <main+0x280>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00a      	beq.n	8000e88 <main+0x1d0>
        __asm volatile
 8000e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e76:	f383 8811 	msr	BASEPRI, r3
 8000e7a:	f3bf 8f6f 	isb	sy
 8000e7e:	f3bf 8f4f 	dsb	sy
 8000e82:	60fb      	str	r3, [r7, #12]
    }
 8000e84:	bf00      	nop
 8000e86:	e7fe      	b.n	8000e86 <main+0x1ce>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2014      	movs	r0, #20
 8000e8e:	f002 fb89 	bl	80035a4 <xQueueGenericCreate>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a3b      	ldr	r2, [pc, #236]	; (8000f84 <main+0x2cc>)
 8000e96:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000e98:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <main+0x2cc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10a      	bne.n	8000eb6 <main+0x1fe>
        __asm volatile
 8000ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
 8000eac:	f3bf 8f4f 	dsb	sy
 8000eb0:	60bb      	str	r3, [r7, #8]
    }
 8000eb2:	bf00      	nop
 8000eb4:	e7fe      	b.n	8000eb4 <main+0x1fc>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2104      	movs	r1, #4
 8000eba:	200a      	movs	r0, #10
 8000ebc:	f002 fb72 	bl	80035a4 <xQueueGenericCreate>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <main+0x2d0>)
 8000ec4:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <main+0x2d0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10a      	bne.n	8000ee4 <main+0x22c>
        __asm volatile
 8000ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed2:	f383 8811 	msr	BASEPRI, r3
 8000ed6:	f3bf 8f6f 	isb	sy
 8000eda:	f3bf 8f4f 	dsb	sy
 8000ede:	607b      	str	r3, [r7, #4]
    }
 8000ee0:	bf00      	nop
 8000ee2:	e7fe      	b.n	8000ee2 <main+0x22a>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <main+0x2d4>)
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ef0:	4827      	ldr	r0, [pc, #156]	; (8000f90 <main+0x2d8>)
 8000ef2:	f004 f979 	bl	80051e8 <xTimerCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <main+0x2dc>)
 8000efa:	6013      	str	r3, [r2, #0]
			 	 	 	 	 	 	 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <main+0x2dc>)
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	f003 fade 	bl	80044c0 <xTaskGetTickCount>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4620      	mov	r0, r4
 8000f12:	f004 f9c5 	bl	80052a0 <xTimerGenericCommand>

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8000f16:	f003 f9d7 	bl	80042c8 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000f1a:	e7fe      	b.n	8000f1a <main+0x262>
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	e0001000 	.word	0xe0001000
 8000f24:	200003f8 	.word	0x200003f8
 8000f28:	20000608 	.word	0x20000608
 8000f2c:	20000218 	.word	0x20000218
 8000f30:	0800f7fc 	.word	0x0800f7fc
 8000f34:	08001435 	.word	0x08001435
 8000f38:	20000214 	.word	0x20000214
 8000f3c:	2000021c 	.word	0x2000021c
 8000f40:	0800f808 	.word	0x0800f808
 8000f44:	0800192d 	.word	0x0800192d
 8000f48:	20000220 	.word	0x20000220
 8000f4c:	0800f814 	.word	0x0800f814
 8000f50:	080015cd 	.word	0x080015cd
 8000f54:	20000224 	.word	0x20000224
 8000f58:	0800f824 	.word	0x0800f824
 8000f5c:	0800160d 	.word	0x0800160d
 8000f60:	20000228 	.word	0x20000228
 8000f64:	0800f830 	.word	0x0800f830
 8000f68:	08001689 	.word	0x08001689
 8000f6c:	2000022c 	.word	0x2000022c
 8000f70:	0800f838 	.word	0x0800f838
 8000f74:	080016d9 	.word	0x080016d9
 8000f78:	20000230 	.word	0x20000230
 8000f7c:	0800f848 	.word	0x0800f848
 8000f80:	08001819 	.word	0x08001819
 8000f84:	20000238 	.word	0x20000238
 8000f88:	20000234 	.word	0x20000234
 8000f8c:	0800318d 	.word	0x0800318d
 8000f90:	0800f854 	.word	0x0800f854
 8000f94:	2000023c 	.word	0x2000023c

08000f98 <inSystem>:

	}
}


void inSystem (void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000f9c:	4baf      	ldr	r3, [pc, #700]	; (800125c <inSystem+0x2c4>)
 8000f9e:	4ab0      	ldr	r2, [pc, #704]	; (8001260 <inSystem+0x2c8>)
 8000fa0:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000fa2:	4bae      	ldr	r3, [pc, #696]	; (800125c <inSystem+0x2c4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000fa8:	4bac      	ldr	r3, [pc, #688]	; (800125c <inSystem+0x2c4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000fae:	4bab      	ldr	r3, [pc, #684]	; (800125c <inSystem+0x2c4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000fb4:	4ba9      	ldr	r3, [pc, #676]	; (800125c <inSystem+0x2c4>)
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fba:	4ba8      	ldr	r3, [pc, #672]	; (800125c <inSystem+0x2c4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000fc0:	4ba6      	ldr	r3, [pc, #664]	; (800125c <inSystem+0x2c4>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000fc6:	48a5      	ldr	r0, [pc, #660]	; (800125c <inSystem+0x2c4>)
 8000fc8:	f006 fe74 	bl	8007cb4 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	48a3      	ldr	r0, [pc, #652]	; (800125c <inSystem+0x2c4>)
 8000fd0:	f006 ff9a 	bl	8007f08 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000fd4:	f005 f8d8 	bl	8006188 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 8000fd8:	4ba2      	ldr	r3, [pc, #648]	; (8001264 <inSystem+0x2cc>)
 8000fda:	4aa3      	ldr	r2, [pc, #652]	; (8001268 <inSystem+0x2d0>)
 8000fdc:	49a3      	ldr	r1, [pc, #652]	; (800126c <inSystem+0x2d4>)
 8000fde:	48a4      	ldr	r0, [pc, #656]	; (8001270 <inSystem+0x2d8>)
 8000fe0:	f001 fbfa 	bl	80027d8 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000fe4:	4ba3      	ldr	r3, [pc, #652]	; (8001274 <inSystem+0x2dc>)
 8000fe6:	4a9e      	ldr	r2, [pc, #632]	; (8001260 <inSystem+0x2c8>)
 8000fe8:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fea:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <inSystem+0x2dc>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <inSystem+0x2dc>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ff6:	4b9f      	ldr	r3, [pc, #636]	; (8001274 <inSystem+0x2dc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000ffc:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <inSystem+0x2dc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001002:	4b9c      	ldr	r3, [pc, #624]	; (8001274 <inSystem+0x2dc>)
 8001004:	2200      	movs	r2, #0
 8001006:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001008:	4b9a      	ldr	r3, [pc, #616]	; (8001274 <inSystem+0x2dc>)
 800100a:	2202      	movs	r2, #2
 800100c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 800100e:	4899      	ldr	r0, [pc, #612]	; (8001274 <inSystem+0x2dc>)
 8001010:	f006 fe50 	bl	8007cb4 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001014:	4b98      	ldr	r3, [pc, #608]	; (8001278 <inSystem+0x2e0>)
 8001016:	4a99      	ldr	r2, [pc, #612]	; (800127c <inSystem+0x2e4>)
 8001018:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 800101a:	4b97      	ldr	r3, [pc, #604]	; (8001278 <inSystem+0x2e0>)
 800101c:	2200      	movs	r2, #0
 800101e:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8001020:	4b95      	ldr	r3, [pc, #596]	; (8001278 <inSystem+0x2e0>)
 8001022:	4a97      	ldr	r2, [pc, #604]	; (8001280 <inSystem+0x2e8>)
 8001024:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001026:	4994      	ldr	r1, [pc, #592]	; (8001278 <inSystem+0x2e0>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b95      	ldr	r3, [pc, #596]	; (8001284 <inSystem+0x2ec>)
 800102e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001032:	4b91      	ldr	r3, [pc, #580]	; (8001278 <inSystem+0x2e0>)
 8001034:	2264      	movs	r2, #100	; 0x64
 8001036:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001038:	4b8f      	ldr	r3, [pc, #572]	; (8001278 <inSystem+0x2e0>)
 800103a:	2201      	movs	r2, #1
 800103c:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800103e:	4b8e      	ldr	r3, [pc, #568]	; (8001278 <inSystem+0x2e0>)
 8001040:	2201      	movs	r2, #1
 8001042:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 8001044:	488c      	ldr	r0, [pc, #560]	; (8001278 <inSystem+0x2e0>)
 8001046:	f007 fc3d 	bl	80088c4 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 800104a:	488b      	ldr	r0, [pc, #556]	; (8001278 <inSystem+0x2e0>)
 800104c:	f007 fd24 	bl	8008a98 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001050:	4b8d      	ldr	r3, [pc, #564]	; (8001288 <inSystem+0x2f0>)
 8001052:	4a83      	ldr	r2, [pc, #524]	; (8001260 <inSystem+0x2c8>)
 8001054:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001056:	4b8c      	ldr	r3, [pc, #560]	; (8001288 <inSystem+0x2f0>)
 8001058:	2202      	movs	r2, #2
 800105a:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800105c:	4b8a      	ldr	r3, [pc, #552]	; (8001288 <inSystem+0x2f0>)
 800105e:	2202      	movs	r2, #2
 8001060:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001062:	4b89      	ldr	r3, [pc, #548]	; (8001288 <inSystem+0x2f0>)
 8001064:	2200      	movs	r2, #0
 8001066:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001068:	4b87      	ldr	r3, [pc, #540]	; (8001288 <inSystem+0x2f0>)
 800106a:	2201      	movs	r2, #1
 800106c:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800106e:	4b86      	ldr	r3, [pc, #536]	; (8001288 <inSystem+0x2f0>)
 8001070:	2200      	movs	r2, #0
 8001072:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001074:	4b84      	ldr	r3, [pc, #528]	; (8001288 <inSystem+0x2f0>)
 8001076:	2202      	movs	r2, #2
 8001078:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 800107a:	4883      	ldr	r0, [pc, #524]	; (8001288 <inSystem+0x2f0>)
 800107c:	f006 fe1a 	bl	8007cb4 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001080:	4b82      	ldr	r3, [pc, #520]	; (800128c <inSystem+0x2f4>)
 8001082:	4a7e      	ldr	r2, [pc, #504]	; (800127c <inSystem+0x2e4>)
 8001084:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8001086:	4b81      	ldr	r3, [pc, #516]	; (800128c <inSystem+0x2f4>)
 8001088:	2201      	movs	r2, #1
 800108a:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 800108c:	4b7f      	ldr	r3, [pc, #508]	; (800128c <inSystem+0x2f4>)
 800108e:	4a7c      	ldr	r2, [pc, #496]	; (8001280 <inSystem+0x2e8>)
 8001090:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001092:	497e      	ldr	r1, [pc, #504]	; (800128c <inSystem+0x2f4>)
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b7a      	ldr	r3, [pc, #488]	; (8001284 <inSystem+0x2ec>)
 800109a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 800109e:	4b7b      	ldr	r3, [pc, #492]	; (800128c <inSystem+0x2f4>)
 80010a0:	2264      	movs	r2, #100	; 0x64
 80010a2:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80010a4:	4b79      	ldr	r3, [pc, #484]	; (800128c <inSystem+0x2f4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80010aa:	4b78      	ldr	r3, [pc, #480]	; (800128c <inSystem+0x2f4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80010b0:	4876      	ldr	r0, [pc, #472]	; (800128c <inSystem+0x2f4>)
 80010b2:	f007 fc07 	bl	80088c4 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80010b6:	4875      	ldr	r0, [pc, #468]	; (800128c <inSystem+0x2f4>)
 80010b8:	f007 fcee 	bl	8008a98 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80010bc:	4b74      	ldr	r3, [pc, #464]	; (8001290 <inSystem+0x2f8>)
 80010be:	4a75      	ldr	r2, [pc, #468]	; (8001294 <inSystem+0x2fc>)
 80010c0:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010c2:	4b73      	ldr	r3, [pc, #460]	; (8001290 <inSystem+0x2f8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010c8:	4b71      	ldr	r3, [pc, #452]	; (8001290 <inSystem+0x2f8>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80010ce:	4b70      	ldr	r3, [pc, #448]	; (8001290 <inSystem+0x2f8>)
 80010d0:	220a      	movs	r2, #10
 80010d2:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010d4:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <inSystem+0x2f8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010da:	4b6d      	ldr	r3, [pc, #436]	; (8001290 <inSystem+0x2f8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010e0:	4b6b      	ldr	r3, [pc, #428]	; (8001290 <inSystem+0x2f8>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 80010e6:	486a      	ldr	r0, [pc, #424]	; (8001290 <inSystem+0x2f8>)
 80010e8:	f006 fde4 	bl	8007cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 80010ec:	2100      	movs	r1, #0
 80010ee:	4868      	ldr	r0, [pc, #416]	; (8001290 <inSystem+0x2f8>)
 80010f0:	f006 ff35 	bl	8007f5e <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <inSystem+0x300>)
 80010f6:	4a67      	ldr	r2, [pc, #412]	; (8001294 <inSystem+0x2fc>)
 80010f8:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <inSystem+0x300>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001100:	4b65      	ldr	r3, [pc, #404]	; (8001298 <inSystem+0x300>)
 8001102:	2201      	movs	r2, #1
 8001104:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001106:	4b64      	ldr	r3, [pc, #400]	; (8001298 <inSystem+0x300>)
 8001108:	220b      	movs	r2, #11
 800110a:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800110c:	4b62      	ldr	r3, [pc, #392]	; (8001298 <inSystem+0x300>)
 800110e:	2200      	movs	r2, #0
 8001110:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001112:	4b61      	ldr	r3, [pc, #388]	; (8001298 <inSystem+0x300>)
 8001114:	2200      	movs	r2, #0
 8001116:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001118:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <inSystem+0x300>)
 800111a:	2202      	movs	r2, #2
 800111c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 800111e:	485e      	ldr	r0, [pc, #376]	; (8001298 <inSystem+0x300>)
 8001120:	f006 fdc8 	bl	8007cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001124:	2100      	movs	r1, #0
 8001126:	485c      	ldr	r0, [pc, #368]	; (8001298 <inSystem+0x300>)
 8001128:	f006 ff19 	bl	8007f5e <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 800112c:	4b5b      	ldr	r3, [pc, #364]	; (800129c <inSystem+0x304>)
 800112e:	4a59      	ldr	r2, [pc, #356]	; (8001294 <inSystem+0x2fc>)
 8001130:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001132:	4b5a      	ldr	r3, [pc, #360]	; (800129c <inSystem+0x304>)
 8001134:	2200      	movs	r2, #0
 8001136:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001138:	4b58      	ldr	r3, [pc, #352]	; (800129c <inSystem+0x304>)
 800113a:	2201      	movs	r2, #1
 800113c:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 800113e:	4b57      	ldr	r3, [pc, #348]	; (800129c <inSystem+0x304>)
 8001140:	220c      	movs	r2, #12
 8001142:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001144:	4b55      	ldr	r3, [pc, #340]	; (800129c <inSystem+0x304>)
 8001146:	2200      	movs	r2, #0
 8001148:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800114a:	4b54      	ldr	r3, [pc, #336]	; (800129c <inSystem+0x304>)
 800114c:	2200      	movs	r2, #0
 800114e:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <inSystem+0x304>)
 8001152:	2202      	movs	r2, #2
 8001154:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001156:	4851      	ldr	r0, [pc, #324]	; (800129c <inSystem+0x304>)
 8001158:	f006 fdac 	bl	8007cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 800115c:	2100      	movs	r1, #0
 800115e:	484f      	ldr	r0, [pc, #316]	; (800129c <inSystem+0x304>)
 8001160:	f006 fefd 	bl	8007f5e <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <inSystem+0x2d8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <inSystem+0x308>)
 800116e:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <inSystem+0x30c>)
 8001170:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <inSystem+0x308>)
 8001174:	2200      	movs	r2, #0
 8001176:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <inSystem+0x308>)
 800117a:	2201      	movs	r2, #1
 800117c:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <inSystem+0x308>)
 8001180:	2202      	movs	r2, #2
 8001182:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <inSystem+0x308>)
 8001186:	2200      	movs	r2, #0
 8001188:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <inSystem+0x308>)
 800118c:	2200      	movs	r2, #0
 800118e:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <inSystem+0x308>)
 8001192:	2202      	movs	r2, #2
 8001194:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8001196:	4842      	ldr	r0, [pc, #264]	; (80012a0 <inSystem+0x308>)
 8001198:	f006 fd8c 	bl	8007cb4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 800119c:	2100      	movs	r1, #0
 800119e:	4840      	ldr	r0, [pc, #256]	; (80012a0 <inSystem+0x308>)
 80011a0:	f006 fedd 	bl	8007f5e <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <inSystem+0x2d8>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <inSystem+0x310>)
 80011ae:	4a39      	ldr	r2, [pc, #228]	; (8001294 <inSystem+0x2fc>)
 80011b0:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <inSystem+0x310>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <inSystem+0x310>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <inSystem+0x310>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011c4:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <inSystem+0x310>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011ca:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <inSystem+0x310>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011d0:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <inSystem+0x310>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 80011d6:	4b35      	ldr	r3, [pc, #212]	; (80012ac <inSystem+0x314>)
 80011d8:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <inSystem+0x310>)
 80011da:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <inSystem+0x314>)
 80011de:	2202      	movs	r2, #2
 80011e0:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 80011e2:	4832      	ldr	r0, [pc, #200]	; (80012ac <inSystem+0x314>)
 80011e4:	f005 fc9e 	bl	8006b24 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 80011e8:	2106      	movs	r1, #6
 80011ea:	4830      	ldr	r0, [pc, #192]	; (80012ac <inSystem+0x314>)
 80011ec:	f006 fb42 	bl	8007874 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <inSystem+0x318>)
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <inSystem+0x2fc>)
 80011f4:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <inSystem+0x318>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <inSystem+0x318>)
 80011fe:	2200      	movs	r2, #0
 8001200:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <inSystem+0x318>)
 8001204:	2203      	movs	r2, #3
 8001206:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <inSystem+0x318>)
 800120a:	2200      	movs	r2, #0
 800120c:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <inSystem+0x318>)
 8001210:	2200      	movs	r2, #0
 8001212:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <inSystem+0x318>)
 8001216:	2202      	movs	r2, #2
 8001218:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <inSystem+0x31c>)
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <inSystem+0x318>)
 800121e:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <inSystem+0x31c>)
 8001222:	2202      	movs	r2, #2
 8001224:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001226:	4823      	ldr	r0, [pc, #140]	; (80012b4 <inSystem+0x31c>)
 8001228:	f005 fc7c 	bl	8006b24 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 800122c:	2106      	movs	r1, #6
 800122e:	4821      	ldr	r0, [pc, #132]	; (80012b4 <inSystem+0x31c>)
 8001230:	f006 fb20 	bl	8007874 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <inSystem+0x320>)
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <inSystem+0x2c8>)
 8001238:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <inSystem+0x320>)
 800123c:	2207      	movs	r2, #7
 800123e:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <inSystem+0x320>)
 8001242:	2202      	movs	r2, #2
 8001244:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <inSystem+0x320>)
 8001248:	2200      	movs	r2, #0
 800124a:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <inSystem+0x320>)
 800124e:	2209      	movs	r2, #9
 8001250:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <inSystem+0x320>)
 8001254:	2200      	movs	r2, #0
 8001256:	71da      	strb	r2, [r3, #7]
 8001258:	e030      	b.n	80012bc <inSystem+0x324>
 800125a:	bf00      	nop
 800125c:	20000240 	.word	0x20000240
 8001260:	40020000 	.word	0x40020000
 8001264:	20000530 	.word	0x20000530
 8001268:	20000550 	.word	0x20000550
 800126c:	200005b8 	.word	0x200005b8
 8001270:	20000408 	.word	0x20000408
 8001274:	2000024c 	.word	0x2000024c
 8001278:	20000318 	.word	0x20000318
 800127c:	40000c00 	.word	0x40000c00
 8001280:	41e00000 	.word	0x41e00000
 8001284:	40408000 	.word	0x40408000
 8001288:	20000258 	.word	0x20000258
 800128c:	20000338 	.word	0x20000338
 8001290:	20000288 	.word	0x20000288
 8001294:	40020800 	.word	0x40020800
 8001298:	2000027c 	.word	0x2000027c
 800129c:	200002a0 	.word	0x200002a0
 80012a0:	20000294 	.word	0x20000294
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	200002ac 	.word	0x200002ac
 80012ac:	200002dc 	.word	0x200002dc
 80012b0:	200002b8 	.word	0x200002b8
 80012b4:	200002e4 	.word	0x200002e4
 80012b8:	20000270 	.word	0x20000270
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80012bc:	4b50      	ldr	r3, [pc, #320]	; (8001400 <inSystem+0x468>)
 80012be:	2203      	movs	r2, #3
 80012c0:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80012c2:	484f      	ldr	r0, [pc, #316]	; (8001400 <inSystem+0x468>)
 80012c4:	f006 fcf6 	bl	8007cb4 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <inSystem+0x46c>)
 80012ca:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <inSystem+0x470>)
 80012cc:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80012ce:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <inSystem+0x46c>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <inSystem+0x46c>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <inSystem+0x46c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80012e0:	4b48      	ldr	r3, [pc, #288]	; (8001404 <inSystem+0x46c>)
 80012e2:	220a      	movs	r2, #10
 80012e4:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <inSystem+0x46c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <inSystem+0x46c>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80012f2:	4844      	ldr	r0, [pc, #272]	; (8001404 <inSystem+0x46c>)
 80012f4:	f006 fcde 	bl	8007cb4 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 80012f8:	4b44      	ldr	r3, [pc, #272]	; (800140c <inSystem+0x474>)
 80012fa:	4a45      	ldr	r2, [pc, #276]	; (8001410 <inSystem+0x478>)
 80012fc:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 80012fe:	4b43      	ldr	r3, [pc, #268]	; (800140c <inSystem+0x474>)
 8001300:	4a44      	ldr	r2, [pc, #272]	; (8001414 <inSystem+0x47c>)
 8001302:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001304:	4b41      	ldr	r3, [pc, #260]	; (800140c <inSystem+0x474>)
 8001306:	2201      	movs	r2, #1
 8001308:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 800130a:	4b40      	ldr	r3, [pc, #256]	; (800140c <inSystem+0x474>)
 800130c:	2201      	movs	r2, #1
 800130e:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <inSystem+0x474>)
 8001312:	2200      	movs	r2, #0
 8001314:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001316:	4b3d      	ldr	r3, [pc, #244]	; (800140c <inSystem+0x474>)
 8001318:	2202      	movs	r2, #2
 800131a:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <inSystem+0x474>)
 800131e:	2200      	movs	r2, #0
 8001320:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <inSystem+0x474>)
 8001324:	2200      	movs	r2, #0
 8001326:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <inSystem+0x474>)
 800132a:	2200      	movs	r2, #0
 800132c:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 800132e:	4837      	ldr	r0, [pc, #220]	; (800140c <inSystem+0x474>)
 8001330:	f008 fb42 	bl	80099b8 <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 8001334:	2106      	movs	r1, #6
 8001336:	4835      	ldr	r0, [pc, #212]	; (800140c <inSystem+0x474>)
 8001338:	f008 fff2 	bl	800a320 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <inSystem+0x480>)
 800133e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001342:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <inSystem+0x480>)
 8001346:	2201      	movs	r2, #1
 8001348:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <inSystem+0x480>)
 800134c:	2200      	movs	r2, #0
 800134e:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <inSystem+0x480>)
 8001352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001356:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <inSystem+0x480>)
 800135a:	2210      	movs	r2, #16
 800135c:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800135e:	482e      	ldr	r0, [pc, #184]	; (8001418 <inSystem+0x480>)
 8001360:	f004 ff2e 	bl	80061c0 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001364:	2106      	movs	r1, #6
 8001366:	482c      	ldr	r0, [pc, #176]	; (8001418 <inSystem+0x480>)
 8001368:	f005 f8e8 	bl	800653c <TIM_SetPriority>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <inSystem+0x484>)
 800136e:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <inSystem+0x488>)
 8001370:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <inSystem+0x484>)
 8001374:	2204      	movs	r2, #4
 8001376:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <inSystem+0x484>)
 800137a:	2202      	movs	r2, #2
 800137c:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <inSystem+0x484>)
 8001380:	2208      	movs	r2, #8
 8001382:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <inSystem+0x484>)
 8001386:	2201      	movs	r2, #1
 8001388:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <inSystem+0x484>)
 800138c:	2200      	movs	r2, #0
 800138e:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <inSystem+0x484>)
 8001392:	2202      	movs	r2, #2
 8001394:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <inSystem+0x48c>)
 8001398:	4a21      	ldr	r2, [pc, #132]	; (8001420 <inSystem+0x488>)
 800139a:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <inSystem+0x48c>)
 800139e:	2204      	movs	r2, #4
 80013a0:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <inSystem+0x48c>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <inSystem+0x48c>)
 80013aa:	2209      	movs	r2, #9
 80013ac:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <inSystem+0x48c>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <inSystem+0x48c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <inSystem+0x48c>)
 80013bc:	2202      	movs	r2, #2
 80013be:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <inSystem+0x490>)
 80013c2:	4a1a      	ldr	r2, [pc, #104]	; (800142c <inSystem+0x494>)
 80013c4:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <inSystem+0x490>)
 80013c8:	2232      	movs	r2, #50	; 0x32
 80013ca:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <inSystem+0x490>)
 80013ce:	2268      	movs	r2, #104	; 0x68
 80013d0:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <inSystem+0x490>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <inSystem+0x498>)
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <inSystem+0x484>)
 80013dc:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <inSystem+0x498>)
 80013e0:	4a10      	ldr	r2, [pc, #64]	; (8001424 <inSystem+0x48c>)
 80013e2:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <inSystem+0x498>)
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <inSystem+0x490>)
 80013e8:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <inSystem+0x498>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <inSystem+0x498>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <inSystem+0x498>)
 80013f8:	f006 fe14 	bl	8008024 <configMPUAccel>

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000270 	.word	0x20000270
 8001404:	20000264 	.word	0x20000264
 8001408:	40020000 	.word	0x40020000
 800140c:	20000358 	.word	0x20000358
 8001410:	40011000 	.word	0x40011000
 8001414:	05f5e100 	.word	0x05f5e100
 8001418:	200002ec 	.word	0x200002ec
 800141c:	200002c4 	.word	0x200002c4
 8001420:	40020400 	.word	0x40020400
 8001424:	200002d0 	.word	0x200002d0
 8001428:	200003ec 	.word	0x200003ec
 800142c:	40005400 	.word	0x40005400
 8001430:	200003f8 	.word	0x200003f8

08001434 <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 800143c:	4b57      	ldr	r3, [pc, #348]	; (800159c <vTask_Menu+0x168>)
 800143e:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here:";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8001440:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <vTask_Menu+0x16c>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	f107 010c 	add.w	r1, r7, #12
 8001448:	2300      	movs	r3, #0
 800144a:	f04f 32ff 	mov.w	r2, #4294967295
 800144e:	f002 f92b 	bl	80036a8 <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	f04f 32ff 	mov.w	r2, #4294967295
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f003 fbc7 	bl	8004bf4 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	617b      	str	r3, [r7, #20]

		if (end){
 800146a:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <vTask_Menu+0x170>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <vTask_Menu+0x58>

			 next_state = sMainMenu; // Cambiamos el estado actual al de menu
 8001472:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <vTask_Menu+0x174>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
			 end = RESET; // Bajamos la bandera
 8001478:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <vTask_Menu+0x170>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]

			 //Reseteamos la cola para recibir nuevos comandos
			 xQueueReset(xQueue_InputData);
 800147e:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <vTask_Menu+0x178>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f825 	bl	80034d4 <xQueueGenericReset>
 800148a:	e7d9      	b.n	8001440 <vTask_Menu+0xc>
		}else{

			// El comando recibido solo tener el largo de 1 caracter
			if(cmd->functionType != -1){
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d055      	beq.n	8001542 <vTask_Menu+0x10e>

				switch (cmd->functionType) {
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2b03      	cmp	r3, #3
 800149c:	d03c      	beq.n	8001518 <vTask_Menu+0xe4>
 800149e:	2b03      	cmp	r3, #3
 80014a0:	dc79      	bgt.n	8001596 <vTask_Menu+0x162>
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d002      	beq.n	80014ac <vTask_Menu+0x78>
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d01b      	beq.n	80014e2 <vTask_Menu+0xae>

						break;
					}
					default:{
						///////
						continue;
 80014aa:	e074      	b.n	8001596 <vTask_Menu+0x162>
						xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <vTask_Menu+0x16c>)
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	2300      	movs	r3, #0
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	493e      	ldr	r1, [pc, #248]	; (80015b0 <vTask_Menu+0x17c>)
 80014b8:	f002 f8f6 	bl	80036a8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80014bc:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <vTask_Menu+0x178>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 f806 	bl	80034d4 <xQueueGenericReset>
						next_state = sGo;
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <vTask_Menu+0x174>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <vTask_Menu+0x180>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	f003 fc0a 	bl	8004cf4 <xTaskGenericNotify>
						break;
 80014e0:	e05a      	b.n	8001598 <vTask_Menu+0x164>
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <vTask_Menu+0x16c>)
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	2300      	movs	r3, #0
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	4932      	ldr	r1, [pc, #200]	; (80015b8 <vTask_Menu+0x184>)
 80014ee:	f002 f8db 	bl	80036a8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <vTask_Menu+0x178>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 ffeb 	bl	80034d4 <xQueueGenericReset>
						next_state = sGoTo;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <vTask_Menu+0x174>)
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_GoTo, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <vTask_Menu+0x188>)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	f003 fbef 	bl	8004cf4 <xTaskGenericNotify>
						break;
 8001516:	e03f      	b.n	8001598 <vTask_Menu+0x164>
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <vTask_Menu+0x16c>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	4925      	ldr	r1, [pc, #148]	; (80015b8 <vTask_Menu+0x184>)
 8001524:	f002 f8c0 	bl	80036a8 <xQueueGenericSend>
						next_state = sMainMenu;
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <vTask_Menu+0x174>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Menu,0,eNoAction);
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <vTask_Menu+0x18c>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	f003 fbda 	bl	8004cf4 <xTaskGenericNotify>
						break;
 8001540:	e02a      	b.n	8001598 <vTask_Menu+0x164>

					}
				}

			}else{
				xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <vTask_Menu+0x16c>)
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	491d      	ldr	r1, [pc, #116]	; (80015c4 <vTask_Menu+0x190>)
 800154e:	f002 f8ab 	bl	80036a8 <xQueueGenericSend>
				//Aca se deberia notificar cambiar la variable next_state y notificar
				wrong_command = RESET; // RESETEAMOS LA BANDERA
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <vTask_Menu+0x194>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
				xQueueReset(xQueue_InputData); // Reseteamos la cola que recibe los comandos
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <vTask_Menu+0x178>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f001 ffb8 	bl	80034d4 <xQueueGenericReset>
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 f9a0 	bl	800a8b0 <memset>

				xTaskNotify(xHandleTask_Menu,0,eNoAction); // Notificamos a la funcion menu para que pueda inmediatamente mandar de nuevo el menu
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <vTask_Menu+0x18c>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	2300      	movs	r3, #0
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	f003 fbb9 	bl	8004cf4 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2000      	movs	r0, #0
 8001590:	f003 fb30 	bl	8004bf4 <xTaskGenericNotifyWait>
 8001594:	e754      	b.n	8001440 <vTask_Menu+0xc>
						continue;
 8001596:	bf00      	nop
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8001598:	e752      	b.n	8001440 <vTask_Menu+0xc>
 800159a:	bf00      	nop
 800159c:	0800f860 	.word	0x0800f860
 80015a0:	20000234 	.word	0x20000234
 80015a4:	20000527 	.word	0x20000527
 80015a8:	2000051e 	.word	0x2000051e
 80015ac:	20000238 	.word	0x20000238
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000228 	.word	0x20000228
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	20000230 	.word	0x20000230
 80015c0:	20000218 	.word	0x20000218
 80015c4:	20000004 	.word	0x20000004
 80015c8:	20000526 	.word	0x20000526

080015cc <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b096      	sub	sp, #88	; 0x58
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 80015d4:	2300      	movs	r3, #0
 80015d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	command_t cmd = {0};
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	2244      	movs	r2, #68	; 0x44
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f009 f965 	bl	800a8b0 <memset>

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2000      	movs	r0, #0
 80015f4:	f003 fafe 	bl	8004bf4 <xTaskGenericNotifyWait>
 80015f8:	64f8      	str	r0, [r7, #76]	; 0x4c

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 80015fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d1f2      	bne.n	80015e6 <vTask_Commands+0x1a>

		   process_command(&cmd);
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f9a9 	bl	800195c <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800160a:	e7ec      	b.n	80015e6 <vTask_Commands+0x1a>

0800160c <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2000      	movs	r0, #0
 8001622:	f003 fae7 	bl	8004bf4 <xTaskGenericNotifyWait>

		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <vTask_Stop+0x5c>)
 8001628:	f001 f8b1 	bl	800278e <stop>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Detenemos los muestreos
 800162c:	480f      	ldr	r0, [pc, #60]	; (800166c <vTask_Stop+0x60>)
 800162e:	f005 fa1f 	bl	8006a70 <stopTimer>

		// Bajamos las banderas de movimiento alguno
		flag_Go_Straigh   = RESET;
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <vTask_Stop+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <vTask_Stop+0x68>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <vTask_Stop+0x6c>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <vTask_Stop+0x70>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]

		 if (end){
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <vTask_Stop+0x74>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0e0      	beq.n	8001614 <vTask_Stop+0x8>
			 xTaskNotify(xHandleTask_Menu,0, eNoAction);
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <vTask_Stop+0x78>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	f003 fb48 	bl	8004cf4 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001664:	e7d6      	b.n	8001614 <vTask_Stop+0x8>
 8001666:	bf00      	nop
 8001668:	20000408 	.word	0x20000408
 800166c:	200002ec 	.word	0x200002ec
 8001670:	20000521 	.word	0x20000521
 8001674:	20000522 	.word	0x20000522
 8001678:	20000524 	.word	0x20000524
 800167c:	20000525 	.word	0x20000525
 8001680:	20000527 	.word	0x20000527
 8001684:	20000218 	.word	0x20000218

08001688 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2000      	movs	r0, #0
 800169e:	f003 faa9 	bl	8004bf4 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <vTask_Go+0x40>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <vTask_Go+0x44>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <vTask_Go+0x40>)
 80016b0:	705a      	strb	r2, [r3, #1]

		resetParameters();
 80016b2:	f001 fd55 	bl	8003160 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <vTask_Go+0x40>)
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <vTask_Go+0x48>)
 80016bc:	f000 ff7c 	bl	80025b8 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <vTask_Go+0x4c>)
 80016c2:	f005 f9c3 	bl	8006a4c <startTimer>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80016c6:	e7e3      	b.n	8001690 <vTask_Go+0x8>
 80016c8:	2000051c 	.word	0x2000051c
 80016cc:	20000490 	.word	0x20000490
 80016d0:	20000408 	.word	0x20000408
 80016d4:	200002ec 	.word	0x200002ec

080016d8 <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af06      	add	r7, sp, #24
 80016de:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2000      	movs	r0, #0
 80016ee:	f003 fa81 	bl	8004bf4 <xTaskGenericNotifyWait>

		 switch (next_state) {
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <vTask_Control+0x104>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d002      	beq.n	8001700 <vTask_Control+0x28>
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d01c      	beq.n	8001738 <vTask_Control+0x60>
				}


				break;
			}
			default:{break;}
 80016fe:	e06b      	b.n	80017d8 <vTask_Control+0x100>
				go(handler_Motor_Array,
 8001700:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <vTask_Control+0x108>)
 8001702:	ed93 7b00 	vldr	d7, [r3]
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <vTask_Control+0x10c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800170e:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <vTask_Control+0x110>)
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <vTask_Control+0x114>)
 8001714:	9303      	str	r3, [sp, #12]
 8001716:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <vTask_Control+0x118>)
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <vTask_Control+0x11c>)
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <vTask_Control+0x120>)
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	eeb0 0a47 	vmov.f32	s0, s14
 8001726:	eef0 0a67 	vmov.f32	s1, s15
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <vTask_Control+0x124>)
 800172c:	4a34      	ldr	r2, [pc, #208]	; (8001800 <vTask_Control+0x128>)
 800172e:	4935      	ldr	r1, [pc, #212]	; (8001804 <vTask_Control+0x12c>)
 8001730:	4835      	ldr	r0, [pc, #212]	; (8001808 <vTask_Control+0x130>)
 8001732:	f001 fad5 	bl	8002ce0 <go>
				break;
 8001736:	e04f      	b.n	80017d8 <vTask_Control+0x100>
				distance_to_go = distance_traveled(&parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <vTask_Control+0x128>)
 800173a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <vTask_Control+0x128>)
 8001740:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001744:	eeb0 1a46 	vmov.f32	s2, s12
 8001748:	eef0 1a66 	vmov.f32	s3, s13
 800174c:	eeb0 0a47 	vmov.f32	s0, s14
 8001750:	eef0 0a67 	vmov.f32	s1, s15
 8001754:	4829      	ldr	r0, [pc, #164]	; (80017fc <vTask_Control+0x124>)
 8001756:	f007 f873 	bl	8008840 <distance_traveled>
 800175a:	eeb0 7a40 	vmov.f32	s14, s0
 800175e:	eef0 7a60 	vmov.f32	s15, s1
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <vTask_Control+0x134>)
 8001764:	ed83 7b00 	vstr	d7, [r3]
				go(handler_Motor_Array,
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <vTask_Control+0x108>)
 800176a:	ed93 7b00 	vldr	d7, [r3]
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <vTask_Control+0x10c>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <vTask_Control+0x110>)
 8001778:	9304      	str	r3, [sp, #16]
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <vTask_Control+0x114>)
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <vTask_Control+0x118>)
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <vTask_Control+0x11c>)
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <vTask_Control+0x120>)
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	eeb0 0a47 	vmov.f32	s0, s14
 800178e:	eef0 0a67 	vmov.f32	s1, s15
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <vTask_Control+0x124>)
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <vTask_Control+0x128>)
 8001796:	491b      	ldr	r1, [pc, #108]	; (8001804 <vTask_Control+0x12c>)
 8001798:	481b      	ldr	r0, [pc, #108]	; (8001808 <vTask_Control+0x130>)
 800179a:	f001 faa1 	bl	8002ce0 <go>
				if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <vTask_Control+0x134>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9ee 	bl	8000b88 <__aeabi_d2iz>
 80017ac:	4603      	mov	r3, r0
 80017ae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <vTask_Control+0x124>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	429a      	cmp	r2, r3
 80017bc:	db0b      	blt.n	80017d6 <vTask_Control+0xfe>
					end = SET;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <vTask_Control+0x138>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <vTask_Control+0x13c>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	f003 fa8f 	bl	8004cf4 <xTaskGenericNotify>
				break;
 80017d6:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80017d8:	e782      	b.n	80016e0 <vTask_Control+0x8>
 80017da:	bf00      	nop
 80017dc:	2000051e 	.word	0x2000051e
 80017e0:	20000608 	.word	0x20000608
 80017e4:	2000051c 	.word	0x2000051c
 80017e8:	200004dc 	.word	0x200004dc
 80017ec:	20000523 	.word	0x20000523
 80017f0:	20000520 	.word	0x20000520
 80017f4:	2000051f 	.word	0x2000051f
 80017f8:	20000530 	.word	0x20000530
 80017fc:	20000550 	.word	0x20000550
 8001800:	200005b8 	.word	0x200005b8
 8001804:	200003f8 	.word	0x200003f8
 8001808:	20000408 	.word	0x20000408
 800180c:	20000628 	.word	0x20000628
 8001810:	20000527 	.word	0x20000527
 8001814:	20000224 	.word	0x20000224

08001818 <vTask_GoTo>:
////////////////////////////////////////////////////////////////////////GOTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void vTask_GoTo( void * pvParameters ){
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
	// En esta tarea querremos ir solo hacia un punto deseado por el usuario

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	2000      	movs	r0, #0
 800182e:	f003 f9e1 	bl	8004bf4 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <vTask_GoTo+0xf8>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <vTask_GoTo+0xfc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <vTask_GoTo+0xf8>)
 8001840:	705a      	strb	r2, [r3, #1]

		// Almacenamos la distancia en milimetros a recorrer
		parameters_Path_Robot.line_Distance = sparam;
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <vTask_GoTo+0x100>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <vTask_GoTo+0x104>)
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

		resetParameters();
 800184c:	f001 fc88 	bl	8003160 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <vTask_GoTo+0xf8>)
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	4832      	ldr	r0, [pc, #200]	; (8001920 <vTask_GoTo+0x108>)
 8001856:	f000 feaf 	bl	80025b8 <On_motor_Straigh_Roll>

		// seteamos la posicion inicial como la posicion actual global del robot
		parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <vTask_GoTo+0x10c>)
 800185c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001860:	492e      	ldr	r1, [pc, #184]	; (800191c <vTask_GoTo+0x104>)
 8001862:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <vTask_GoTo+0x10c>)
 8001868:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800186c:	492b      	ldr	r1, [pc, #172]	; (800191c <vTask_GoTo+0x104>)
 800186e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		// seteamos la posicion final usando parametros polares

		//Usando el angulo actual global con respecto al eje x se tiene que
		parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance * cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <vTask_GoTo+0x104>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe6c 	bl	8000554 <__aeabi_i2d>
 800187c:	4604      	mov	r4, r0
 800187e:	460d      	mov	r5, r1
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <vTask_GoTo+0x10c>)
 8001882:	ed93 7b04 	vldr	d7, [r3, #16]
 8001886:	eeb0 0a47 	vmov.f32	s0, s14
 800188a:	eef0 0a67 	vmov.f32	s1, s15
 800188e:	f00b fd17 	bl	800d2c0 <cos>
 8001892:	ec53 2b10 	vmov	r2, r3, d0
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fec5 	bl	8000628 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <vTask_GoTo+0x104>)
 80018a8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80018ac:	f7fe fd06 	bl	80002bc <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4919      	ldr	r1, [pc, #100]	; (800191c <vTask_GoTo+0x104>)
 80018b6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance * sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <vTask_GoTo+0x104>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe48 	bl	8000554 <__aeabi_i2d>
 80018c4:	4604      	mov	r4, r0
 80018c6:	460d      	mov	r5, r1
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <vTask_GoTo+0x10c>)
 80018ca:	ed93 7b04 	vldr	d7, [r3, #16]
 80018ce:	eeb0 0a47 	vmov.f32	s0, s14
 80018d2:	eef0 0a67 	vmov.f32	s1, s15
 80018d6:	f00b fd8f 	bl	800d3f8 <sin>
 80018da:	ec53 2b10 	vmov	r2, r3, d0
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f7fe fea1 	bl	8000628 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <vTask_GoTo+0x104>)
 80018f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80018f4:	f7fe fce2 	bl	80002bc <__adddf3>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <vTask_GoTo+0x104>)
 80018fe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		// definimos los parametros del camino en funcion de la situacion actual
		calculation_parameter_distance(&parameters_Path_Robot);
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <vTask_GoTo+0x104>)
 8001904:	f006 feb0 	bl	8008668 <calculation_parameter_distance>

		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <vTask_GoTo+0x110>)
 800190a:	f005 f89f 	bl	8006a4c <startTimer>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800190e:	e787      	b.n	8001820 <vTask_GoTo+0x8>
 8001910:	2000051c 	.word	0x2000051c
 8001914:	20000490 	.word	0x20000490
 8001918:	20000494 	.word	0x20000494
 800191c:	20000550 	.word	0x20000550
 8001920:	20000408 	.word	0x20000408
 8001924:	200005b8 	.word	0x200005b8
 8001928:	200002ec 	.word	0x200002ec

0800192c <vTask_Print>:





void vTask_Print( void * pvParameters ){
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <vTask_Print+0x28>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f107 010c 	add.w	r1, r7, #12
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	4618      	mov	r0, r3
 8001942:	f002 f859 	bl	80039f8 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4619      	mov	r1, r3
 800194a:	4803      	ldr	r0, [pc, #12]	; (8001958 <vTask_Print+0x2c>)
 800194c:	f008 fc22 	bl	800a194 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8001950:	e7f0      	b.n	8001934 <vTask_Print+0x8>
 8001952:	bf00      	nop
 8001954:	20000234 	.word	0x20000234
 8001958:	20000358 	.word	0x20000358

0800195c <process_command>:
   }
}

void process_command (command_t *cmd){
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f837 	bl	80019d8 <extract_command>


	if (next_state == sMainMenu){
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <process_command+0x68>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <process_command+0x6c>)
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	2300      	movs	r3, #0
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2303      	movs	r3, #3
 800197e:	2100      	movs	r1, #0
 8001980:	f003 f9b8 	bl	8004cf4 <xTaskGenericNotify>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
	}


}
 8001984:	e019      	b.n	80019ba <process_command+0x5e>
	}else if (!wrong_command){
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <process_command+0x70>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <process_command+0x4c>
		end = SET;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <process_command+0x74>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <process_command+0x78>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2300      	movs	r3, #0
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	f003 f9a7 	bl	8004cf4 <xTaskGenericNotify>
}
 80019a6:	e008      	b.n	80019ba <process_command+0x5e>
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <process_command+0x6c>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2303      	movs	r3, #3
 80019b4:	2100      	movs	r1, #0
 80019b6:	f003 f99d 	bl	8004cf4 <xTaskGenericNotify>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000051e 	.word	0x2000051e
 80019c8:	20000218 	.word	0x20000218
 80019cc:	20000526 	.word	0x20000526
 80019d0:	20000527 	.word	0x20000527
 80019d4:	20000224 	.word	0x20000224

080019d8 <extract_command>:


int extract_command (command_t *cmd){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af04      	add	r7, sp, #16
 80019de:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 80019e4:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <extract_command+0xec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 f974 	bl	8003cd6 <uxQueueMessagesWaiting>
 80019ee:	4603      	mov	r3, r0
 80019f0:	613b      	str	r3, [r7, #16]
	if (status == 0){
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <extract_command+0x26>
		return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	e05e      	b.n	8001abc <extract_command+0xe4>
	}

	if (wrong_command){
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <extract_command+0xf0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d010      	beq.n	8001a28 <extract_command+0x50>
				// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
				cmd->functionType = -1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2240      	movs	r2, #64	; 0x40
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f008 ff4b 	bl	800a8b0 <memset>
				xQueueReset(xQueue_InputData);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <extract_command+0xec>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fd57 	bl	80034d4 <xQueueGenericReset>
 8001a26:	e048      	b.n	8001aba <extract_command+0xe2>
	}else{

		do{
			// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
			status = xQueueReceive(xQueue_InputData, &item,0);
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <extract_command+0xec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f107 010f 	add.w	r1, r7, #15
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 ffe0 	bl	80039f8 <xQueueReceive>
 8001a38:	6138      	str	r0, [r7, #16]
			if(status == pdTRUE){
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <extract_command+0x76>

				//vamos llenando el arreglo del comando
				cmd->payload[counter_j++] = item;
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	75fa      	strb	r2, [r7, #23]
 8001a46:	461a      	mov	r2, r3
 8001a48:	7bf9      	ldrb	r1, [r7, #15]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	5499      	strb	r1, [r3, r2]

			}
		}while(item != '#');
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b23      	cmp	r3, #35	; 0x23
 8001a52:	d1e9      	bne.n	8001a28 <extract_command+0x50>

		cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	2100      	movs	r1, #0
 8001a5a:	54d1      	strb	r1, [r2, r3]

		// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
	//	sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <extract_command+0xf4>)
 8001a5e:	9303      	str	r3, [sp, #12]
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <extract_command+0xf8>)
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <extract_command+0xfc>)
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <extract_command+0x100>)
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <extract_command+0x104>)
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <extract_command+0x108>)
 8001a70:	491c      	ldr	r1, [pc, #112]	; (8001ae4 <extract_command+0x10c>)
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f001 f9c8 	bl	8002e08 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f008 ff16 	bl	800a8b0 <memset>
		xQueueReset(xQueue_InputData);
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <extract_command+0xec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fd22 	bl	80034d4 <xQueueGenericReset>

		if (strcmp(data, "sGo") == 0){
 8001a90:	4915      	ldr	r1, [pc, #84]	; (8001ae8 <extract_command+0x110>)
 8001a92:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <extract_command+0x10c>)
 8001a94:	f7fe fba4 	bl	80001e0 <strcmp>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <extract_command+0xce>
			cmd->functionType = 1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	e009      	b.n	8001aba <extract_command+0xe2>
		}
		else if (strcmp(data, "sGoTo") == 0){
 8001aa6:	4911      	ldr	r1, [pc, #68]	; (8001aec <extract_command+0x114>)
 8001aa8:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <extract_command+0x10c>)
 8001aaa:	f7fe fb99 	bl	80001e0 <strcmp>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <extract_command+0xe2>
			cmd->functionType = 2;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40

	}



	return 0;
 8001aba:	2300      	movs	r3, #0

}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000238 	.word	0x20000238
 8001ac8:	20000526 	.word	0x20000526
 8001acc:	20000498 	.word	0x20000498
 8001ad0:	20000494 	.word	0x20000494
 8001ad4:	20000490 	.word	0x20000490
 8001ad8:	20000484 	.word	0x20000484
 8001adc:	20000478 	.word	0x20000478
 8001ae0:	2000046c 	.word	0x2000046c
 8001ae4:	2000049c 	.word	0x2000049c
 8001ae8:	0800f93c 	.word	0x0800f93c
 8001aec:	0800f940 	.word	0x0800f940

08001af0 <callback_extInt1>:

// INTERRUPCIONES DE EXTI
void callback_extInt1(void){
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[0]->parametersMotor.counts++;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <callback_extInt1+0x1c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	791a      	ldrb	r2, [r3, #4]
 8001afa:	3201      	adds	r2, #1
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	711a      	strb	r2, [r3, #4]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000408 	.word	0x20000408

08001b10 <callback_extInt3>:

void callback_extInt3(void){
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[1]->parametersMotor.counts++;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <callback_extInt3+0x1c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	791a      	ldrb	r2, [r3, #4]
 8001b1a:	3201      	adds	r2, #1
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	711a      	strb	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000408 	.word	0x20000408

08001b30 <usart1Rx_Callback>:




//Interripcion USART2
void usart1Rx_Callback(void){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af02      	add	r7, sp, #8

	rxData = getRxData();
 8001b36:	f008 fb55 	bl	800a1e4 <getRxData>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001b40:	701a      	strb	r2, [r3, #0]
	writeChar(&handlerUSART, rxData);
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <usart1Rx_Callback+0xb0>)
 8001b4a:	f008 fb0b 	bl	800a164 <writeChar>

	if (rxData == '\r'){
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b0d      	cmp	r3, #13
 8001b54:	d102      	bne.n	8001b5c <usart1Rx_Callback+0x2c>
		wrong_command = SET;
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <usart1Rx_Callback+0xb4>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
	}
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <usart1Rx_Callback+0xb8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 f9e4 	bl	8003f32 <xQueueIsQueueFullFromISR>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <usart1Rx_Callback+0xbc>)
 8001b6e:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <usart1Rx_Callback+0xbc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d007      	beq.n	8001b88 <usart1Rx_Callback+0x58>

		xQueueSendToBackFromISR(xQueue_InputData,
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <usart1Rx_Callback+0xb8>)
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4916      	ldr	r1, [pc, #88]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001b82:	f001 fe8f 	bl	80038a4 <xQueueGenericSendFromISR>
 8001b86:	e011      	b.n	8001bac <usart1Rx_Callback+0x7c>
								NULL);

	}else{


		if (rxData == '#'){
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b23      	cmp	r3, #35	; 0x23
 8001b8e:	d10d      	bne.n	8001bac <usart1Rx_Callback+0x7c>

			xQueueReceiveFromISR(xQueue_InputData,
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <usart1Rx_Callback+0xb8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	4911      	ldr	r1, [pc, #68]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 f80d 	bl	8003bb8 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <usart1Rx_Callback+0xb8>)
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	490d      	ldr	r1, [pc, #52]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001ba8:	f001 fe7c 	bl	80038a4 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (rxData == '#' || rxData == '\r'){
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b23      	cmp	r3, #35	; 0x23
 8001bb2:	d003      	beq.n	8001bbc <usart1Rx_Callback+0x8c>
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <usart1Rx_Callback+0xac>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b0d      	cmp	r3, #13
 8001bba:	d10a      	bne.n	8001bd2 <usart1Rx_Callback+0xa2>
		// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
		xTaskNotifyFromISR(xHandleTask_Commands,
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <usart1Rx_Callback+0xc0>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f003 f971 	bl	8004eb4 <xTaskGenericNotifyFromISR>
						   eNoAction,
						   NULL);
//		xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

	}
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000468 	.word	0x20000468
 8001be0:	20000358 	.word	0x20000358
 8001be4:	20000526 	.word	0x20000526
 8001be8:	20000238 	.word	0x20000238
 8001bec:	20000214 	.word	0x20000214
 8001bf0:	20000220 	.word	0x20000220

08001bf4 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <BasicTimer2_Callback+0x4c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <BasicTimer2_Callback+0x50>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <BasicTimer2_Callback+0x54>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d803      	bhi.n	8001c16 <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <BasicTimer2_Callback+0x58>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e005      	b.n	8001c22 <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <BasicTimer2_Callback+0x54>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <BasicTimer2_Callback+0x54>)
 8001c20:	801a      	strh	r2, [r3, #0]

	xTaskNotifyFromISR(xHandleTask_Control,
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <BasicTimer2_Callback+0x5c>)
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	2300      	movs	r3, #0
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	f003 f93e 	bl	8004eb4 <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000051f 	.word	0x2000051f
 8001c44:	20000010 	.word	0x20000010
 8001c48:	2000052a 	.word	0x2000052a
 8001c4c:	20000520 	.word	0x20000520
 8001c50:	2000022c 	.word	0x2000022c

08001c54 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001c60:	23c8      	movs	r3, #200	; 0xc8
 8001c62:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d061      	beq.n	8001d44 <calibracionGyros+0xf0>
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	dc70      	bgt.n	8001d66 <calibracionGyros+0x112>
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <calibracionGyros+0x60>
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d037      	beq.n	8001cfc <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001c8c:	e06b      	b.n	8001d66 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f006 fb52 	bl	8008338 <readGyro_X>
 8001c94:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001ca8:	7efb      	ldrb	r3, [r7, #27]
 8001caa:	3301      	adds	r3, #1
 8001cac:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f004 fc0c 	bl	80064cc <delay_ms>
			while (contador < numMedidas){
 8001cb4:	7efb      	ldrb	r3, [r7, #27]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	8a7a      	ldrh	r2, [r7, #18]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d8e7      	bhi.n	8001c8e <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001cbe:	8a7b      	ldrh	r3, [r7, #18]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001cd4:	e048      	b.n	8001d68 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f006 fbb6 	bl	8008448 <readGyro_Y>
 8001cdc:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001ce0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ce4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001cf0:	7efb      	ldrb	r3, [r7, #27]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f004 fbe8 	bl	80064cc <delay_ms>
			while (contador < numMedidas){
 8001cfc:	7efb      	ldrb	r3, [r7, #27]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	8a7a      	ldrh	r2, [r7, #18]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d8e7      	bhi.n	8001cd6 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001d06:	8a7b      	ldrh	r3, [r7, #18]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d18:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001d1c:	e024      	b.n	8001d68 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f006 fc1a 	bl	8008558 <readGyro_Z>
 8001d24:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001d28:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d34:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001d38:	7efb      	ldrb	r3, [r7, #27]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f004 fbc4 	bl	80064cc <delay_ms>
			while (contador < numMedidas){
 8001d44:	7efb      	ldrb	r3, [r7, #27]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	8a7a      	ldrh	r2, [r7, #18]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d8e7      	bhi.n	8001d1e <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8001d4e:	8a7b      	ldrh	r3, [r7, #18]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d60:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001d64:	e000      	b.n	8001d68 <calibracionGyros+0x114>
			break;
 8001d66:	bf00      	nop
		}
	}


	return promedio;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	ee07 3a90 	vmov	s15, r3
}
 8001d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6178      	str	r0, [r7, #20]
 8001d80:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d84:	ed87 1b02 	vstr	d1, [r7, #8]
 8001d88:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f006 fbe4 	bl	8008558 <readGyro_Z>
 8001d90:	ee10 3a10 	vmov	r3, s0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbef 	bl	8000578 <__aeabi_f2d>
 8001d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d9e:	f7fe fa8b 	bl	80002b8 <__aeabi_dsub>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe ff35 	bl	8000c18 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001db2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001db6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001dba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dbe:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001e24 <getAngle+0xac>
 8001dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dce:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001dd2:	69b8      	ldr	r0, [r7, #24]
 8001dd4:	f7fe fbd0 	bl	8000578 <__aeabi_f2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <getAngle+0xb0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbc6 	bl	8000578 <__aeabi_f2d>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fa63 	bl	80002bc <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe ff0b 	bl	8000c18 <__aeabi_d2f>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <getAngle+0xb0>)
 8001e06:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <getAngle+0xb4>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <getAngle+0xb8>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <getAngle+0xb8>)
 8001e18:	801a      	strh	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	447a0000 	.word	0x447a0000
 8001e28:	20000610 	.word	0x20000610
 8001e2c:	200002ec 	.word	0x200002ec
 8001e30:	20000528 	.word	0x20000528
 8001e34:	00000000 	.word	0x00000000

08001e38 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	ed2d 8b02 	vpush	{d8}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001e48:	793b      	ldrb	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 81d4 	bne.w	80021f8 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001e50:	4bab      	ldr	r3, [pc, #684]	; (8002100 <get_measuremets_parameters+0x2c8>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4bab      	ldr	r3, [pc, #684]	; (8002104 <get_measuremets_parameters+0x2cc>)
 8001e58:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001e5a:	4bab      	ldr	r3, [pc, #684]	; (8002108 <get_measuremets_parameters+0x2d0>)
 8001e5c:	edd3 6a00 	vldr	s13, [r3]
 8001e60:	4baa      	ldr	r3, [pc, #680]	; (800210c <get_measuremets_parameters+0x2d4>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e70:	4ba7      	ldr	r3, [pc, #668]	; (8002110 <get_measuremets_parameters+0x2d8>)
 8001e72:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001e76:	4ba6      	ldr	r3, [pc, #664]	; (8002110 <get_measuremets_parameters+0x2d8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb7c 	bl	8000578 <__aeabi_f2d>
 8001e80:	a39b      	add	r3, pc, #620	; (adr r3, 80020f0 <get_measuremets_parameters+0x2b8>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fbcf 	bl	8000628 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b9f      	ldr	r3, [pc, #636]	; (8002114 <get_measuremets_parameters+0x2dc>)
 8001e98:	f7fe fcf0 	bl	800087c <__aeabi_ddiv>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001ea6:	4b98      	ldr	r3, [pc, #608]	; (8002108 <get_measuremets_parameters+0x2d0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb64 	bl	8000578 <__aeabi_f2d>
 8001eb0:	a38f      	add	r3, pc, #572	; (adr r3, 80020f0 <get_measuremets_parameters+0x2b8>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fbb7 	bl	8000628 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b93      	ldr	r3, [pc, #588]	; (8002114 <get_measuremets_parameters+0x2dc>)
 8001ec8:	f7fe fcd8 	bl	800087c <__aeabi_ddiv>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	ec43 2b17 	vmov	d7, r2, r3
 8001ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed8:	eef0 0a67 	vmov.f32	s1, s15
 8001edc:	f00b fa8c 	bl	800d3f8 <sin>
 8001ee0:	eeb0 8a40 	vmov.f32	s16, s0
 8001ee4:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001ee8:	4b87      	ldr	r3, [pc, #540]	; (8002108 <get_measuremets_parameters+0x2d0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb43 	bl	8000578 <__aeabi_f2d>
 8001ef2:	a37f      	add	r3, pc, #508	; (adr r3, 80020f0 <get_measuremets_parameters+0x2b8>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b82      	ldr	r3, [pc, #520]	; (8002114 <get_measuremets_parameters+0x2dc>)
 8001f0a:	f7fe fcb7 	bl	800087c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	ec43 2b17 	vmov	d7, r2, r3
 8001f16:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1a:	eef0 0a67 	vmov.f32	s1, s15
 8001f1e:	f00b f9cf 	bl	800d2c0 <cos>
 8001f22:	eeb0 7a40 	vmov.f32	s14, s0
 8001f26:	eef0 7a60 	vmov.f32	s15, s1
 8001f2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001f2e:	eef0 1a67 	vmov.f32	s3, s15
 8001f32:	eeb0 0a48 	vmov.f32	s0, s16
 8001f36:	eef0 0a68 	vmov.f32	s1, s17
 8001f3a:	f00b fab5 	bl	800d4a8 <atan2>
 8001f3e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001f42:	a36d      	add	r3, pc, #436	; (adr r3, 80020f8 <get_measuremets_parameters+0x2c0>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb6e 	bl	8000628 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f5a:	f7fe f9af 	bl	80002bc <__adddf3>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f6e:	a360      	add	r3, pc, #384	; (adr r3, 80020f0 <get_measuremets_parameters+0x2b8>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fb58 	bl	8000628 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b63      	ldr	r3, [pc, #396]	; (8002114 <get_measuremets_parameters+0x2dc>)
 8001f86:	f7fe fc79 	bl	800087c <__aeabi_ddiv>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	ec43 2b17 	vmov	d7, r2, r3
 8001f92:	eeb0 0a47 	vmov.f32	s0, s14
 8001f96:	eef0 0a67 	vmov.f32	s1, s15
 8001f9a:	f00b fa2d 	bl	800d3f8 <sin>
 8001f9e:	eeb0 8a40 	vmov.f32	s16, s0
 8001fa2:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001fac:	a350      	add	r3, pc, #320	; (adr r3, 80020f0 <get_measuremets_parameters+0x2b8>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fb39 	bl	8000628 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b54      	ldr	r3, [pc, #336]	; (8002114 <get_measuremets_parameters+0x2dc>)
 8001fc4:	f7fe fc5a 	bl	800087c <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	ec43 2b17 	vmov	d7, r2, r3
 8001fd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd4:	eef0 0a67 	vmov.f32	s1, s15
 8001fd8:	f00b f972 	bl	800d2c0 <cos>
 8001fdc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fe0:	eef0 7a60 	vmov.f32	s15, s1
 8001fe4:	eeb0 1a47 	vmov.f32	s2, s14
 8001fe8:	eef0 1a67 	vmov.f32	s3, s15
 8001fec:	eeb0 0a48 	vmov.f32	s0, s16
 8001ff0:	eef0 0a68 	vmov.f32	s1, s17
 8001ff4:	f00b fa58 	bl	800d4a8 <atan2>
 8001ff8:	eeb0 7a40 	vmov.f32	s14, s0
 8001ffc:	eef0 7a60 	vmov.f32	s15, s1
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	ed93 7b02 	vldr	d7, [r3, #8]
 800200c:	eeb0 0a47 	vmov.f32	s0, s14
 8002010:	eef0 0a67 	vmov.f32	s1, s15
 8002014:	f00b f9f0 	bl	800d3f8 <sin>
 8002018:	eeb0 8a40 	vmov.f32	s16, s0
 800201c:	eef0 8a60 	vmov.f32	s17, s1
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	ed93 7b02 	vldr	d7, [r3, #8]
 8002026:	eeb0 0a47 	vmov.f32	s0, s14
 800202a:	eef0 0a67 	vmov.f32	s1, s15
 800202e:	f00b f947 	bl	800d2c0 <cos>
 8002032:	eeb0 7a40 	vmov.f32	s14, s0
 8002036:	eef0 7a60 	vmov.f32	s15, s1
 800203a:	eeb0 1a47 	vmov.f32	s2, s14
 800203e:	eef0 1a67 	vmov.f32	s3, s15
 8002042:	eeb0 0a48 	vmov.f32	s0, s16
 8002046:	eef0 0a68 	vmov.f32	s1, s17
 800204a:	f00b fa2d 	bl	800d4a8 <atan2>
 800204e:	eeb0 7a40 	vmov.f32	s14, s0
 8002052:	eef0 7a60 	vmov.f32	s15, s1
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 800205c:	797b      	ldrb	r3, [r7, #5]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d15e      	bne.n	8002120 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	791b      	ldrb	r3, [r3, #4]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <get_measuremets_parameters+0x2e0>)
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3304      	adds	r3, #4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	791b      	ldrb	r3, [r3, #4]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <get_measuremets_parameters+0x2e4>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <get_measuremets_parameters+0x2cc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c2:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3304      	adds	r3, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <get_measuremets_parameters+0x2cc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3304      	adds	r3, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e6:	edc3 7a02 	vstr	s15, [r3, #8]
 80020ea:	e065      	b.n	80021b8 <get_measuremets_parameters+0x380>
 80020ec:	f3af 8000 	nop.w
 80020f0:	54442d18 	.word	0x54442d18
 80020f4:	400921fb 	.word	0x400921fb
 80020f8:	1a63c1f8 	.word	0x1a63c1f8
 80020fc:	404ca5dc 	.word	0x404ca5dc
 8002100:	20000528 	.word	0x20000528
 8002104:	2000052c 	.word	0x2000052c
 8002108:	20000610 	.word	0x20000610
 800210c:	2000052a 	.word	0x2000052a
 8002110:	20000614 	.word	0x20000614
 8002114:	40668000 	.word	0x40668000
 8002118:	20000014 	.word	0x20000014
 800211c:	20000018 	.word	0x20000018

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <get_measuremets_parameters+0x3a8>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	eef1 7a67 	vneg.f32	s15, s15
 8002140:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3304      	adds	r3, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <get_measuremets_parameters+0x3ac>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	eef1 7a67 	vneg.f32	s15, s15
 8002168:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	edd3 7a03 	vldr	s15, [r3, #12]
 8002174:	eef1 6a67 	vneg.f32	s13, s15
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <get_measuremets_parameters+0x3b0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3304      	adds	r3, #4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	edd3 7a03 	vldr	s15, [r3, #12]
 800219a:	eef1 6a67 	vneg.f32	s13, s15
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <get_measuremets_parameters+0x3b0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3304      	adds	r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b4:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3304      	adds	r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <get_measuremets_parameters+0x3b4>)
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <get_measuremets_parameters+0x3b8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <get_measuremets_parameters+0x3bc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
//		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 80021de:	e1d8      	b.n	8002592 <get_measuremets_parameters+0x75a>
 80021e0:	20000014 	.word	0x20000014
 80021e4:	20000018 	.word	0x20000018
 80021e8:	2000052c 	.word	0x2000052c
 80021ec:	20000610 	.word	0x20000610
 80021f0:	20000528 	.word	0x20000528
 80021f4:	2000052a 	.word	0x2000052a
	else if(operation_mode_dir.Mode == Roll)
 80021f8:	793b      	ldrb	r3, [r7, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f040 81c8 	bne.w	8002590 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8002200:	4bad      	ldr	r3, [pc, #692]	; (80024b8 <get_measuremets_parameters+0x680>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4bad      	ldr	r3, [pc, #692]	; (80024bc <get_measuremets_parameters+0x684>)
 8002208:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 800220a:	4bad      	ldr	r3, [pc, #692]	; (80024c0 <get_measuremets_parameters+0x688>)
 800220c:	edd3 6a00 	vldr	s13, [r3]
 8002210:	4bac      	ldr	r3, [pc, #688]	; (80024c4 <get_measuremets_parameters+0x68c>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002220:	4ba9      	ldr	r3, [pc, #676]	; (80024c8 <get_measuremets_parameters+0x690>)
 8002222:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002226:	4ba8      	ldr	r3, [pc, #672]	; (80024c8 <get_measuremets_parameters+0x690>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f9a4 	bl	8000578 <__aeabi_f2d>
 8002230:	a39d      	add	r3, pc, #628	; (adr r3, 80024a8 <get_measuremets_parameters+0x670>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	f7fe f9f7 	bl	8000628 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4ba1      	ldr	r3, [pc, #644]	; (80024cc <get_measuremets_parameters+0x694>)
 8002248:	f7fe fb18 	bl	800087c <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002256:	4b9a      	ldr	r3, [pc, #616]	; (80024c0 <get_measuremets_parameters+0x688>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f98c 	bl	8000578 <__aeabi_f2d>
 8002260:	a391      	add	r3, pc, #580	; (adr r3, 80024a8 <get_measuremets_parameters+0x670>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	f7fe f9df 	bl	8000628 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b95      	ldr	r3, [pc, #596]	; (80024cc <get_measuremets_parameters+0x694>)
 8002278:	f7fe fb00 	bl	800087c <__aeabi_ddiv>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	ec43 2b17 	vmov	d7, r2, r3
 8002284:	eeb0 0a47 	vmov.f32	s0, s14
 8002288:	eef0 0a67 	vmov.f32	s1, s15
 800228c:	f00b f8b4 	bl	800d3f8 <sin>
 8002290:	eeb0 8a40 	vmov.f32	s16, s0
 8002294:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002298:	4b89      	ldr	r3, [pc, #548]	; (80024c0 <get_measuremets_parameters+0x688>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f96b 	bl	8000578 <__aeabi_f2d>
 80022a2:	a381      	add	r3, pc, #516	; (adr r3, 80024a8 <get_measuremets_parameters+0x670>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f9be 	bl	8000628 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b84      	ldr	r3, [pc, #528]	; (80024cc <get_measuremets_parameters+0x694>)
 80022ba:	f7fe fadf 	bl	800087c <__aeabi_ddiv>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	ec43 2b17 	vmov	d7, r2, r3
 80022c6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ca:	eef0 0a67 	vmov.f32	s1, s15
 80022ce:	f00a fff7 	bl	800d2c0 <cos>
 80022d2:	eeb0 7a40 	vmov.f32	s14, s0
 80022d6:	eef0 7a60 	vmov.f32	s15, s1
 80022da:	eeb0 1a47 	vmov.f32	s2, s14
 80022de:	eef0 1a67 	vmov.f32	s3, s15
 80022e2:	eeb0 0a48 	vmov.f32	s0, s16
 80022e6:	eef0 0a68 	vmov.f32	s1, s17
 80022ea:	f00b f8dd 	bl	800d4a8 <atan2>
 80022ee:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80022f2:	a36f      	add	r3, pc, #444	; (adr r3, 80024b0 <get_measuremets_parameters+0x678>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe f996 	bl	8000628 <__aeabi_dmul>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800230a:	f7fd ffd7 	bl	80002bc <__adddf3>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800231e:	a362      	add	r3, pc, #392	; (adr r3, 80024a8 <get_measuremets_parameters+0x670>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe f980 	bl	8000628 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b65      	ldr	r3, [pc, #404]	; (80024cc <get_measuremets_parameters+0x694>)
 8002336:	f7fe faa1 	bl	800087c <__aeabi_ddiv>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	ec43 2b17 	vmov	d7, r2, r3
 8002342:	eeb0 0a47 	vmov.f32	s0, s14
 8002346:	eef0 0a67 	vmov.f32	s1, s15
 800234a:	f00b f855 	bl	800d3f8 <sin>
 800234e:	eeb0 8a40 	vmov.f32	s16, s0
 8002352:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800235c:	a352      	add	r3, pc, #328	; (adr r3, 80024a8 <get_measuremets_parameters+0x670>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe f961 	bl	8000628 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	4b56      	ldr	r3, [pc, #344]	; (80024cc <get_measuremets_parameters+0x694>)
 8002374:	f7fe fa82 	bl	800087c <__aeabi_ddiv>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	ec43 2b17 	vmov	d7, r2, r3
 8002380:	eeb0 0a47 	vmov.f32	s0, s14
 8002384:	eef0 0a67 	vmov.f32	s1, s15
 8002388:	f00a ff9a 	bl	800d2c0 <cos>
 800238c:	eeb0 7a40 	vmov.f32	s14, s0
 8002390:	eef0 7a60 	vmov.f32	s15, s1
 8002394:	eeb0 1a47 	vmov.f32	s2, s14
 8002398:	eef0 1a67 	vmov.f32	s3, s15
 800239c:	eeb0 0a48 	vmov.f32	s0, s16
 80023a0:	eef0 0a68 	vmov.f32	s1, s17
 80023a4:	f00b f880 	bl	800d4a8 <atan2>
 80023a8:	eeb0 7a40 	vmov.f32	s14, s0
 80023ac:	eef0 7a60 	vmov.f32	s15, s1
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80023bc:	eeb0 0a47 	vmov.f32	s0, s14
 80023c0:	eef0 0a67 	vmov.f32	s1, s15
 80023c4:	f00b f818 	bl	800d3f8 <sin>
 80023c8:	eeb0 8a40 	vmov.f32	s16, s0
 80023cc:	eef0 8a60 	vmov.f32	s17, s1
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80023d6:	eeb0 0a47 	vmov.f32	s0, s14
 80023da:	eef0 0a67 	vmov.f32	s1, s15
 80023de:	f00a ff6f 	bl	800d2c0 <cos>
 80023e2:	eeb0 7a40 	vmov.f32	s14, s0
 80023e6:	eef0 7a60 	vmov.f32	s15, s1
 80023ea:	eeb0 1a47 	vmov.f32	s2, s14
 80023ee:	eef0 1a67 	vmov.f32	s3, s15
 80023f2:	eeb0 0a48 	vmov.f32	s0, s16
 80023f6:	eef0 0a68 	vmov.f32	s1, s17
 80023fa:	f00b f855 	bl	800d4a8 <atan2>
 80023fe:	eeb0 7a40 	vmov.f32	s14, s0
 8002402:	eef0 7a60 	vmov.f32	s15, s1
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 800240c:	797b      	ldrb	r3, [r7, #5]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d162      	bne.n	80024d8 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <get_measuremets_parameters+0x698>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3304      	adds	r3, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <get_measuremets_parameters+0x69c>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3304      	adds	r3, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	eef1 7a67 	vneg.f32	s15, s15
 8002456:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <get_measuremets_parameters+0x684>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002476:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	edd3 7a03 	vldr	s15, [r3, #12]
 8002484:	eef1 6a67 	vneg.f32	s13, s15
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <get_measuremets_parameters+0x684>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3304      	adds	r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249e:	edc3 7a02 	vstr	s15, [r3, #8]
 80024a2:	e061      	b.n	8002568 <get_measuremets_parameters+0x730>
 80024a4:	f3af 8000 	nop.w
 80024a8:	54442d18 	.word	0x54442d18
 80024ac:	400921fb 	.word	0x400921fb
 80024b0:	1a63c1f8 	.word	0x1a63c1f8
 80024b4:	404ca5dc 	.word	0x404ca5dc
 80024b8:	20000528 	.word	0x20000528
 80024bc:	2000052c 	.word	0x2000052c
 80024c0:	20000610 	.word	0x20000610
 80024c4:	2000052a 	.word	0x2000052a
 80024c8:	20000614 	.word	0x20000614
 80024cc:	40668000 	.word	0x40668000
 80024d0:	20000014 	.word	0x20000014
 80024d4:	20000018 	.word	0x20000018
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <get_measuremets_parameters+0x768>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	eef1 7a67 	vneg.f32	s15, s15
 80024f8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3304      	adds	r3, #4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <get_measuremets_parameters+0x76c>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3304      	adds	r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	edd3 7a03 	vldr	s15, [r3, #12]
 8002528:	eef1 6a67 	vneg.f32	s13, s15
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <get_measuremets_parameters+0x770>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002540:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	edd3 6a03 	vldr	s13, [r3, #12]
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <get_measuremets_parameters+0x770>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3304      	adds	r3, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002564:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3304      	adds	r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <get_measuremets_parameters+0x774>)
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <get_measuremets_parameters+0x778>)
 8002584:	2200      	movs	r2, #0
 8002586:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <get_measuremets_parameters+0x77c>)
 800258a:	2200      	movs	r2, #0
 800258c:	801a      	strh	r2, [r3, #0]
}
 800258e:	e000      	b.n	8002592 <get_measuremets_parameters+0x75a>
	else{  __NOP(); }
 8002590:	bf00      	nop
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	ecbd 8b02 	vpop	{d8}
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000014 	.word	0x20000014
 80025a4:	20000018 	.word	0x20000018
 80025a8:	2000052c 	.word	0x2000052c
 80025ac:	20000610 	.word	0x20000610
 80025b0:	20000528 	.word	0x20000528
 80025b4:	2000052a 	.word	0x2000052a

080025b8 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 80025c2:	783b      	ldrb	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d120      	bne.n	800260a <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f844 	bl	8002658 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	4618      	mov	r0, r3
 80025d8:	f006 fa70 	bl	8008abc <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f005 fcba 	bl	8007f5e <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	4618      	mov	r0, r3
 80025f4:	f006 fa62 	bl	8008abc <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	2101      	movs	r1, #1
 8002602:	4618      	mov	r0, r3
 8002604:	f005 fcab 	bl	8007f5e <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002608:	e022      	b.n	8002650 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 800260a:	783b      	ldrb	r3, [r7, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d11f      	bne.n	8002650 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f820 	bl	8002658 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	4618      	mov	r0, r3
 8002620:	f006 fa4c 	bl	8008abc <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f005 fc96 	bl	8007f5e <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	4618      	mov	r0, r3
 800263c:	f006 fa3e 	bl	8008abc <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f005 fc87 	bl	8007f5e <GPIO_WritePin_Afopt>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 8002662:	783b      	ldrb	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d143      	bne.n	80026f0 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	7f1a      	ldrb	r2, [r3, #28]
 800266e:	787b      	ldrb	r3, [r7, #1]
 8002670:	429a      	cmp	r2, r3
 8002672:	d018      	beq.n	80026a6 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	787a      	ldrb	r2, [r7, #1]
 800267a:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	7f1b      	ldrb	r3, [r3, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4619      	mov	r1, r3
 8002694:	4610      	mov	r0, r2
 8002696:	f005 fc62 	bl	8007f5e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	4618      	mov	r0, r3
 80026a2:	f006 fdcb 	bl	800923c <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	7f1a      	ldrb	r2, [r3, #28]
 80026ae:	787b      	ldrb	r3, [r7, #1]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d068      	beq.n	8002786 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	787a      	ldrb	r2, [r7, #1]
 80026bc:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a1a      	ldr	r2, [r3, #32]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	7f1b      	ldrb	r3, [r3, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f005 fc3f 	bl	8007f5e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	4618      	mov	r0, r3
 80026ea:	f006 fda7 	bl	800923c <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80026ee:	e04a      	b.n	8002786 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 80026f0:	783b      	ldrb	r3, [r7, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d147      	bne.n	8002786 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	7f1a      	ldrb	r2, [r3, #28]
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d11d      	bne.n	800273e <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8002702:	787b      	ldrb	r3, [r7, #1]
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2da      	uxtb	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	7f1b      	ldrb	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f005 fc16 	bl	8007f5e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	4618      	mov	r0, r3
 800273a:	f006 fd7f 	bl	800923c <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	7f1a      	ldrb	r2, [r3, #28]
 8002746:	787b      	ldrb	r3, [r7, #1]
 8002748:	429a      	cmp	r2, r3
 800274a:	d01c      	beq.n	8002786 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	787a      	ldrb	r2, [r7, #1]
 8002754:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	7f1b      	ldrb	r3, [r3, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f005 fbf3 	bl	8007f5e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	4618      	mov	r0, r3
 8002782:	f006 fd5b 	bl	800923c <PWMx_Toggle>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	4618      	mov	r0, r3
 800279e:	f006 fd0d 	bl	80091bc <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fbd7 	bl	8007f5e <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	4618      	mov	r0, r3
 80027ba:	f006 fcff 	bl	80091bc <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3304      	adds	r3, #4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f005 fbc8 	bl	8007f5e <GPIO_WritePin_Afopt>


}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <int_Config_Motor>:


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler){
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a82      	ldr	r2, [pc, #520]	; (80029f4 <int_Config_Motor+0x21c>)
 80027ea:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a81      	ldr	r2, [pc, #516]	; (80029f8 <int_Config_Motor+0x220>)
 80027f2:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a80      	ldr	r2, [pc, #512]	; (80029fc <int_Config_Motor+0x224>)
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a7f      	ldr	r2, [pc, #508]	; (8002a00 <int_Config_Motor+0x228>)
 8002802:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a7e      	ldr	r2, [pc, #504]	; (8002a04 <int_Config_Motor+0x22c>)
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a71      	ldr	r2, [pc, #452]	; (8002a08 <int_Config_Motor+0x230>)
 8002844:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6c      	ldr	r2, [pc, #432]	; (8002a0c <int_Config_Motor+0x234>)
 800285a:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3304      	adds	r3, #4
 8002860:	4a6b      	ldr	r2, [pc, #428]	; (8002a10 <int_Config_Motor+0x238>)
 8002862:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3304      	adds	r3, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <int_Config_Motor+0x220>)
 800286c:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3304      	adds	r3, #4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a67      	ldr	r2, [pc, #412]	; (8002a14 <int_Config_Motor+0x23c>)
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3304      	adds	r3, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a66      	ldr	r2, [pc, #408]	; (8002a18 <int_Config_Motor+0x240>)
 8002880:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3304      	adds	r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a64      	ldr	r2, [pc, #400]	; (8002a1c <int_Config_Motor+0x244>)
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3304      	adds	r3, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3304      	adds	r3, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3304      	adds	r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3304      	adds	r3, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3304      	adds	r3, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	; (8002a08 <int_Config_Motor+0x230>)
 80028ce:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3304      	adds	r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3304      	adds	r3, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <int_Config_Motor+0x234>)
 80028e8:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002910:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	4a42      	ldr	r2, [pc, #264]	; (8002a20 <int_Config_Motor+0x248>)
 8002916:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <int_Config_Motor+0x24c>)
 800291c:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000410 	.word	0x20000410
 80029f8:	41e00000 	.word	0x41e00000
 80029fc:	20000288 	.word	0x20000288
 8002a00:	200002a0 	.word	0x200002a0
 8002a04:	20000318 	.word	0x20000318
 8002a08:	437a0000 	.word	0x437a0000
 8002a0c:	42c80000 	.word	0x42c80000
 8002a10:	2000043c 	.word	0x2000043c
 8002a14:	2000027c 	.word	0x2000027c
 8002a18:	20000294 	.word	0x20000294
 8002a1c:	20000338 	.word	0x20000338
 8002a20:	3dcccccd 	.word	0x3dcccccd
 8002a24:	3f4ccccd 	.word	0x3f4ccccd

08002a28 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <PID_control+0x1cc>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a6f      	ldr	r2, [pc, #444]	; (8002bf8 <PID_control+0x1d0>)
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a4a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002bfc <PID_control+0x1d4>
 8002a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a52:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002a62:	eeb0 1a46 	vmov.f32	s2, s12
 8002a66:	eef0 1a66 	vmov.f32	s3, s13
 8002a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a6e:	eef0 0a67 	vmov.f32	s1, s15
 8002a72:	68b8      	ldr	r0, [r7, #8]
 8002a74:	f005 fea0 	bl	80087b8 <distance_to_straight_line>
 8002a78:	ec51 0b10 	vmov	r0, r1, d0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b5f      	ldr	r3, [pc, #380]	; (8002c00 <PID_control+0x1d8>)
 8002a82:	f7fd fefb 	bl	800087c <__aeabi_ddiv>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7fe f8c3 	bl	8000c18 <__aeabi_d2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8002a96:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a9a:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002c04 <PID_control+0x1dc>
 8002a9e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002aa2:	6838      	ldr	r0, [r7, #0]
 8002aa4:	f000 f8bc 	bl	8002c20 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8002aa8:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <PID_control+0x1e0>)
 8002aaa:	ed93 7a00 	vldr	s14, [r3]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab8:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <PID_control+0x1e4>)
 8002aba:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	ed93 7a00 	vldr	s14, [r3]
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <PID_control+0x1e0>)
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ace:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <PID_control+0x1e8>)
 8002ad0:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <PID_control+0x1e4>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ae8:	eeb0 1a47 	vmov.f32	s2, s14
 8002aec:	eef0 0a67 	vmov.f32	s1, s15
 8002af0:	ed97 0a05 	vldr	s0, [r7, #20]
 8002af4:	4610      	mov	r0, r2
 8002af6:	f000 f893 	bl	8002c20 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3304      	adds	r3, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <PID_control+0x1e8>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b12:	eeb0 1a47 	vmov.f32	s2, s14
 8002b16:	eef0 0a67 	vmov.f32	s1, s15
 8002b1a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f000 f87e 	bl	8002c20 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3304      	adds	r3, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b62:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b6e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002c14 <PID_control+0x1ec>
 8002b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	db04      	blt.n	8002b86 <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <PID_control+0x1f0>)
 8002b82:	615a      	str	r2, [r3, #20]
 8002b84:	e00e      	b.n	8002ba4 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b8e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	d803      	bhi.n	8002ba4 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <PID_control+0x1f4>)
 8002ba2:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002c14 <PID_control+0x1ec>
 8002bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bba:	db05      	blt.n	8002bc8 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <PID_control+0x1f0>)
 8002bc4:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8002bc6:	e011      	b.n	8002bec <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bd2:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bde:	d900      	bls.n	8002be2 <PID_control+0x1ba>
}
 8002be0:	e004      	b.n	8002bec <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3304      	adds	r3, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <PID_control+0x1f4>)
 8002bea:	615a      	str	r2, [r3, #20]
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200002ec 	.word	0x200002ec
 8002bf8:	20000010 	.word	0x20000010
 8002bfc:	447a0000 	.word	0x447a0000
 8002c00:	408f4000 	.word	0x408f4000
 8002c04:	00000000 	.word	0x00000000
 8002c08:	20000618 	.word	0x20000618
 8002c0c:	2000061c 	.word	0x2000061c
 8002c10:	20000620 	.word	0x20000620
 8002c14:	42700000 	.word	0x42700000
 8002c18:	42700000 	.word	0x42700000
 8002c1c:	41b80000 	.word	0x41b80000

08002c20 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c30:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8002c34:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c38:	edd7 7a00 	vldr	s15, [r7]
 8002c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c88:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ca2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ca6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cae:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8002cb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002cb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	60da      	str	r2, [r3, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3724      	adds	r7, #36	; 0x24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6178      	str	r0, [r7, #20]
 8002ce8:	6139      	str	r1, [r7, #16]
 8002cea:	60fa      	str	r2, [r7, #12]
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	ed97 1b00 	vldr	d1, [r7]
 8002d00:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8002e04 <go+0x124>
 8002d04:	6938      	ldr	r0, [r7, #16]
 8002d06:	f7ff f837 	bl	8001d78 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8002d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	6978      	ldr	r0, [r7, #20]
 8002d1e:	f7ff f88b 	bl	8001e38 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d061      	beq.n	8002dfa <go+0x11a>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002d50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d54:	ee16 0a90 	vmov	r0, s13
 8002d58:	f7fd fc0e 	bl	8000578 <__aeabi_f2d>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d6e:	eef0 0a67 	vmov.f32	s1, s15
 8002d72:	f00a faa5 	bl	800d2c0 <cos>
 8002d76:	ec51 0b10 	vmov	r0, r1, d0
 8002d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7e:	f7fd fc53 	bl	8000628 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d92:	eeb0 0a47 	vmov.f32	s0, s14
 8002d96:	eef0 0a67 	vmov.f32	s1, s15
 8002d9a:	f00a fb2d 	bl	800d3f8 <sin>
 8002d9e:	ec51 0b10 	vmov	r0, r1, d0
 8002da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da6:	f7fd fc3f 	bl	8000628 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dc0:	f7fd fa7c 	bl	80002bc <__adddf3>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	68f9      	ldr	r1, [r7, #12]
 8002dca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002dda:	f7fd fa6f 	bl	80002bc <__adddf3>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		//Convertimos el valor y imprimimos en la terminal
//		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
//
//		writeMsg(&handlerUSART, buff);

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff fe1a 	bl	8002a28 <PID_control>

		*fcontrol = RESET;
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
	}
}
 8002dfa:	bf00      	nop
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	00000000 	.word	0x00000000

08002e08 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]

	int counter = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	767b      	strb	r3, [r7, #25]



	while (1){

		while (cmd->payload[counter] != ' '){
 8002e32:	e00a      	b.n	8002e4a <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	440a      	add	r2, r1
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	701a      	strb	r2, [r3, #0]

			counter++;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d1ee      	bne.n	8002e34 <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3301      	adds	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b23      	cmp	r3, #35	; 0x23
 8002e70:	f000 8088 	beq.w	8002f84 <extract_info+0x17c>
			break;
		}

		count_f = counter;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8002e78:	e00d      	b.n	8002e96 <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8002e7a:	7e3b      	ldrb	r3, [r7, #24]
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	701a      	strb	r2, [r3, #0]

			counter++;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3301      	adds	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d1eb      	bne.n	8002e7a <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	7e3b      	ldrb	r3, [r7, #24]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8002eac:	7e3b      	ldrb	r3, [r7, #24]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b23      	cmp	r3, #35	; 0x23
 8002ecc:	d05c      	beq.n	8002f88 <extract_info+0x180>
			break;
		}

		count_s = counter;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 8002ed2:	e00d      	b.n	8002ef0 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	68f9      	ldr	r1, [r7, #12]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	440a      	add	r2, r1
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]

			counter++;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d1eb      	bne.n	8002ed4 <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b23      	cmp	r3, #35	; 0x23
 8002f26:	d031      	beq.n	8002f8c <extract_info+0x184>
			break;
		}

		count_t = counter;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 8002f2c:	e00d      	b.n	8002f4a <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 8002f2e:	7dbb      	ldrb	r3, [r7, #22]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	4413      	add	r3, r2
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	440a      	add	r2, r1
 8002f40:	7812      	ldrb	r2, [r2, #0]
 8002f42:	701a      	strb	r2, [r3, #0]

			counter++;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d1eb      	bne.n	8002f2e <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	7dbb      	ldrb	r3, [r7, #22]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8002f60:	7dbb      	ldrb	r3, [r7, #22]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	4413      	add	r3, r2
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3301      	adds	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b23      	cmp	r3, #35	; 0x23
 8002f80:	d006      	beq.n	8002f90 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 8002f82:	e762      	b.n	8002e4a <extract_info+0x42>
			break;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <extract_info+0x18a>
			break;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <extract_info+0x18a>
			break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <extract_info+0x18a>
			break;
 8002f90:	bf00      	nop
		}
	}

	counter = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 8002f96:	7efb      	ldrb	r3, [r7, #27]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d6      	b.n	800314e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8002fa0:	7efb      	ldrb	r3, [r7, #27]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e03c      	b.n	8003022 <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8002fa8:	7efb      	ldrb	r3, [r7, #27]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bfb8      	it	lt
 8002fb4:	425b      	neglt	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	3b30      	subs	r3, #48	; 0x30
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fac7 	bl	8000554 <__aeabi_i2d>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	460d      	mov	r5, r1
 8002fca:	69f8      	ldr	r0, [r7, #28]
 8002fcc:	f7fd fac2 	bl	8000554 <__aeabi_i2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	ec43 2b11 	vmov	d1, r2, r3
 8002fd8:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8003158 <extract_info+0x350>
 8002fdc:	f00a fa66 	bl	800d4ac <pow>
 8002fe0:	ec53 2b10 	vmov	r2, r3, d0
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	f7fd fb1e 	bl	8000628 <__aeabi_dmul>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fa9b 	bl	8000534 <__aeabi_ui2d>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f7fd f959 	bl	80002bc <__adddf3>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f7fd fde1 	bl	8000bd8 <__aeabi_d2uiz>
 8003016:	4602      	mov	r2, r0
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3b01      	subs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	dabf      	bge.n	8002fa8 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 8003028:	7ebb      	ldrb	r3, [r7, #26]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 800302e:	2302      	movs	r3, #2
 8003030:	e08d      	b.n	800314e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 8003032:	7ebb      	ldrb	r3, [r7, #26]
 8003034:	3b01      	subs	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	e03c      	b.n	80030b4 <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 800303a:	7ebb      	ldrb	r3, [r7, #26]
 800303c:	3b01      	subs	r3, #1
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bfb8      	it	lt
 8003046:	425b      	neglt	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3b30      	subs	r3, #48	; 0x30
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fa7e 	bl	8000554 <__aeabi_i2d>
 8003058:	4604      	mov	r4, r0
 800305a:	460d      	mov	r5, r1
 800305c:	69f8      	ldr	r0, [r7, #28]
 800305e:	f7fd fa79 	bl	8000554 <__aeabi_i2d>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	ec43 2b11 	vmov	d1, r2, r3
 800306a:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8003158 <extract_info+0x350>
 800306e:	f00a fa1d 	bl	800d4ac <pow>
 8003072:	ec53 2b10 	vmov	r2, r3, d0
 8003076:	4620      	mov	r0, r4
 8003078:	4629      	mov	r1, r5
 800307a:	f7fd fad5 	bl	8000628 <__aeabi_dmul>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4614      	mov	r4, r2
 8003084:	461d      	mov	r5, r3
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa52 	bl	8000534 <__aeabi_ui2d>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4620      	mov	r0, r4
 8003096:	4629      	mov	r1, r5
 8003098:	f7fd f910 	bl	80002bc <__adddf3>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd98 	bl	8000bd8 <__aeabi_d2uiz>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dabf      	bge.n	800303a <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 80030ba:	7e7b      	ldrb	r3, [r7, #25]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 80030c0:	2303      	movs	r3, #3
 80030c2:	e044      	b.n	800314e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 80030c4:	7e7b      	ldrb	r3, [r7, #25]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e03c      	b.n	8003146 <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 80030cc:	7e7b      	ldrb	r3, [r7, #25]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bfb8      	it	lt
 80030d8:	425b      	neglt	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	4413      	add	r3, r2
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	3b30      	subs	r3, #48	; 0x30
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fa35 	bl	8000554 <__aeabi_i2d>
 80030ea:	4604      	mov	r4, r0
 80030ec:	460d      	mov	r5, r1
 80030ee:	69f8      	ldr	r0, [r7, #28]
 80030f0:	f7fd fa30 	bl	8000554 <__aeabi_i2d>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	ec43 2b11 	vmov	d1, r2, r3
 80030fc:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003158 <extract_info+0x350>
 8003100:	f00a f9d4 	bl	800d4ac <pow>
 8003104:	ec53 2b10 	vmov	r2, r3, d0
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd fa8c 	bl	8000628 <__aeabi_dmul>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4614      	mov	r4, r2
 8003116:	461d      	mov	r5, r3
 8003118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd fa09 	bl	8000534 <__aeabi_ui2d>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4620      	mov	r0, r4
 8003128:	4629      	mov	r1, r5
 800312a:	f7fd f8c7 	bl	80002bc <__adddf3>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7fd fd4f 	bl	8000bd8 <__aeabi_d2uiz>
 800313a:	4602      	mov	r2, r0
 800313c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313e:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3b01      	subs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b00      	cmp	r3, #0
 800314a:	dabf      	bge.n	80030cc <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bdb0      	pop	{r4, r5, r7, pc}
 8003156:	bf00      	nop
 8003158:	00000000 	.word	0x00000000
 800315c:	40240000 	.word	0x40240000

08003160 <resetParameters>:


void resetParameters(void){
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
	fparam = 0;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <resetParameters+0x20>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
	sparam = 0;
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <resetParameters+0x24>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
	tparam = 0;
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <resetParameters+0x28>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20000490 	.word	0x20000490
 8003184:	20000494 	.word	0x20000494
 8003188:	20000498 	.word	0x20000498

0800318c <led_state_callback>:




void led_state_callback (TimerHandle_t xTimer){
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <led_state_callback+0x18>)
 8003196:	f004 ff2e 	bl	8007ff6 <GPIOxTooglePin>

}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000240 	.word	0x20000240

080031a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <ITM_SendChar+0x48>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <ITM_SendChar+0x48>)
 80031b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <ITM_SendChar+0x4c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <ITM_SendChar+0x4c>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80031ca:	bf00      	nop
 80031cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f8      	beq.n	80031cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80031da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	6013      	str	r3, [r2, #0]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000edfc 	.word	0xe000edfc
 80031f4:	e0000e00 	.word	0xe0000e00

080031f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	return 1;
 80031fc:	2301      	movs	r3, #1
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_kill>:

int _kill(int pid, int sig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003212:	f007 fb0d 	bl	800a830 <__errno>
 8003216:	4603      	mov	r3, r0
 8003218:	2216      	movs	r2, #22
 800321a:	601a      	str	r2, [r3, #0]
	return -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <_exit>:

void _exit (int status)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffe7 	bl	8003208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800323a:	e7fe      	b.n	800323a <_exit+0x12>

0800323c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e00a      	b.n	8003264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800324e:	f3af 8000 	nop.w
 8003252:	4601      	mov	r1, r0
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	60ba      	str	r2, [r7, #8]
 800325a:	b2ca      	uxtb	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	dbf0      	blt.n	800324e <_read+0x12>
	}

return len;
 800326c:	687b      	ldr	r3, [r7, #4]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e009      	b.n	800329c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff89 	bl	80031a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dbf1      	blt.n	8003288 <_write+0x12>
	}
	return len;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_close>:

int _close(int file)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
	return -1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032d6:	605a      	str	r2, [r3, #4]
	return 0;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <_isatty>:

int _isatty(int file)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
	return 1;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	return 0;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003318:	480d      	ldr	r0, [pc, #52]	; (8003350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800331a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800331c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003320:	480c      	ldr	r0, [pc, #48]	; (8003354 <LoopForever+0x6>)
  ldr r1, =_edata
 8003322:	490d      	ldr	r1, [pc, #52]	; (8003358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <LoopForever+0xe>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003328:	e002      	b.n	8003330 <LoopCopyDataInit>

0800332a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800332c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800332e:	3304      	adds	r3, #4

08003330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003334:	d3f9      	bcc.n	800332a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003338:	4c0a      	ldr	r4, [pc, #40]	; (8003364 <LoopForever+0x16>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800333c:	e001      	b.n	8003342 <LoopFillZerobss>

0800333e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800333e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003340:	3204      	adds	r2, #4

08003342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003344:	d3fb      	bcc.n	800333e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003346:	f007 fa79 	bl	800a83c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800334a:	f7fd fcb5 	bl	8000cb8 <main>

0800334e <LoopForever>:

LoopForever:
    b LoopForever
 800334e:	e7fe      	b.n	800334e <LoopForever>
  ldr   r0, =_estack
 8003350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003358:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800335c:	0800ffc0 	.word	0x0800ffc0
  ldr r2, =_sbss
 8003360:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003364:	20013408 	.word	0x20013408

08003368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003368:	e7fe      	b.n	8003368 <ADC_IRQHandler>

0800336a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f103 0208 	add.w	r2, r3, #8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f04f 32ff 	mov.w	r2, #4294967295
 8003382:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f103 0208 	add.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f103 0208 	add.w	r2, r3, #8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	601a      	str	r2, [r3, #0]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d103      	bne.n	800342c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e00c      	b.n	8003446 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3308      	adds	r3, #8
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e002      	b.n	800343a <vListInsert+0x2e>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d2f6      	bcs.n	8003434 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6892      	ldr	r2, [r2, #8]
 8003494:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6852      	ldr	r2, [r2, #4]
 800349e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d103      	bne.n	80034b2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1e5a      	subs	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueGenericReset+0x2a>
        __asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	60bb      	str	r3, [r7, #8]
    }
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80034fe:	f002 fadb 	bl	8005ab8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	441a      	add	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	3b01      	subs	r3, #1
 8003530:	68f9      	ldr	r1, [r7, #12]
 8003532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d114      	bne.n	800357e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01a      	beq.n	8003592 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3310      	adds	r3, #16
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f913 	bl	800478c <xTaskRemoveFromEventList>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <xQueueGenericReset+0xcc>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	e009      	b.n	8003592 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3310      	adds	r3, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fef1 	bl	800336a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3324      	adds	r3, #36	; 0x24
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff feec 	bl	800336a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003592:	f002 fac1 	bl	8005b18 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003596:	2301      	movs	r3, #1
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	; 0x30
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueGenericCreate+0x2a>
        __asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61bb      	str	r3, [r7, #24]
    }
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <xQueueGenericCreate+0x48>
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d101      	bne.n	80035f0 <xQueueGenericCreate+0x4c>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <xQueueGenericCreate+0x4e>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <xQueueGenericCreate+0x68>
        __asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	617b      	str	r3, [r7, #20]
    }
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003612:	d90a      	bls.n	800362a <xQueueGenericCreate+0x86>
        __asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	613b      	str	r3, [r7, #16]
    }
 8003626:	bf00      	nop
 8003628:	e7fe      	b.n	8003628 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	3350      	adds	r3, #80	; 0x50
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fb64 	bl	8005cfc <pvPortMalloc>
 8003634:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	3350      	adds	r3, #80	; 0x50
 8003644:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003646:	79fa      	ldrb	r2, [r7, #7]
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f805 	bl	8003662 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003658:	6a3b      	ldr	r3, [r7, #32]
    }
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	; 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d103      	bne.n	800367e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e002      	b.n	8003684 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003690:	2101      	movs	r1, #1
 8003692:	69b8      	ldr	r0, [r7, #24]
 8003694:	f7ff ff1e 	bl	80034d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08e      	sub	sp, #56	; 0x38
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036b6:	2300      	movs	r3, #0
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xQueueGenericSend+0x32>
        __asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <xQueueGenericSend+0x40>
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <xQueueGenericSend+0x44>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <xQueueGenericSend+0x46>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <xQueueGenericSend+0x60>
        __asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d103      	bne.n	8003716 <xQueueGenericSend+0x6e>
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <xQueueGenericSend+0x72>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericSend+0x74>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueGenericSend+0x8e>
        __asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	623b      	str	r3, [r7, #32]
    }
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003736:	f001 f9c5 	bl	8004ac4 <xTaskGetSchedulerState>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <xQueueGenericSend+0x9e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <xQueueGenericSend+0xa2>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueGenericSend+0xa4>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueGenericSend+0xbe>
        __asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61fb      	str	r3, [r7, #28]
    }
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003766:	f002 f9a7 	bl	8005ab8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <xQueueGenericSend+0xd4>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d129      	bne.n	80037d0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003782:	f000 fac6 	bl	8003d12 <prvCopyDataToQueue>
 8003786:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d010      	beq.n	80037b2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	3324      	adds	r3, #36	; 0x24
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fff9 	bl	800478c <xTaskRemoveFromEventList>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80037a0:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <xQueueGenericSend+0x1f8>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	e00a      	b.n	80037c8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80037b8:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <xQueueGenericSend+0x1f8>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80037c8:	f002 f9a6 	bl	8005b18 <vPortExitCritical>
                return pdPASS;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e063      	b.n	8003898 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037d6:	f002 f99f 	bl	8005b18 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	e05c      	b.n	8003898 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 f831 	bl	8004850 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037f2:	f002 f991 	bl	8005b18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037f6:	f000 fdb9 	bl	800436c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037fa:	f002 f95d 	bl	8005ab8 <vPortEnterCritical>
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003804:	b25b      	sxtb	r3, r3
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d103      	bne.n	8003814 <xQueueGenericSend+0x16c>
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381a:	b25b      	sxtb	r3, r3
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d103      	bne.n	800382a <xQueueGenericSend+0x182>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800382a:	f002 f975 	bl	8005b18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800382e:	1d3a      	adds	r2, r7, #4
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f001 f820 	bl	800487c <xTaskCheckForTimeOut>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d124      	bne.n	800388c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003844:	f000 fb5d 	bl	8003f02 <prvIsQueueFull>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	3310      	adds	r3, #16
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f000 ff48 	bl	80046ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800385c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385e:	f000 fae8 	bl	8003e32 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003862:	f000 fd91 	bl	8004388 <xTaskResumeAll>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	f47f af7c 	bne.w	8003766 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <xQueueGenericSend+0x1f8>)
 8003870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	e772      	b.n	8003766 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003882:	f000 fad6 	bl	8003e32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003886:	f000 fd7f 	bl	8004388 <xTaskResumeAll>
 800388a:	e76c      	b.n	8003766 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800388c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388e:	f000 fad0 	bl	8003e32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003892:	f000 fd79 	bl	8004388 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003896:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003898:	4618      	mov	r0, r3
 800389a:	3738      	adds	r7, #56	; 0x38
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b090      	sub	sp, #64	; 0x40
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d103      	bne.n	80038e0 <xQueueGenericSendFromISR+0x3c>
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <xQueueGenericSendFromISR+0x40>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <xQueueGenericSendFromISR+0x42>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d103      	bne.n	800390e <xQueueGenericSendFromISR+0x6a>
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <xQueueGenericSendFromISR+0x6e>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericSendFromISR+0x70>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	623b      	str	r3, [r7, #32]
    }
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800392e:	f002 f9a5 	bl	8005c7c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003932:	f3ef 8211 	mrs	r2, BASEPRI
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	61fa      	str	r2, [r7, #28]
 8003948:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800394a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <xQueueGenericSendFromISR+0xbc>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d13e      	bne.n	80039de <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003976:	f000 f9cc 	bl	8003d12 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800397a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d112      	bne.n	80039aa <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d025      	beq.n	80039d8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	3324      	adds	r3, #36	; 0x24
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fefb 	bl	800478c <xTaskRemoveFromEventList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01d      	beq.n	80039d8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01a      	beq.n	80039d8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e016      	b.n	80039d8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80039aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039ae:	2b7f      	cmp	r3, #127	; 0x7f
 80039b0:	d10a      	bne.n	80039c8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	617b      	str	r3, [r7, #20]
    }
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039cc:	3301      	adds	r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	b25a      	sxtb	r2, r3
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80039dc:	e001      	b.n	80039e2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80039ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3740      	adds	r7, #64	; 0x40
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xQueueReceive+0x30>
        __asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	623b      	str	r3, [r7, #32]
    }
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <xQueueReceive+0x3e>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <xQueueReceive+0x42>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueReceive+0x44>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <xQueueReceive+0x5e>
        __asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	61fb      	str	r3, [r7, #28]
    }
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a56:	f001 f835 	bl	8004ac4 <xTaskGetSchedulerState>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <xQueueReceive+0x6e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <xQueueReceive+0x72>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <xQueueReceive+0x74>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xQueueReceive+0x8e>
        __asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61bb      	str	r3, [r7, #24]
    }
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a86:	f002 f817 	bl	8005ab8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01f      	beq.n	8003ad6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a9a:	f000 f9a4 	bl	8003de6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00f      	beq.n	8003ace <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fe6a 	bl	800478c <xTaskRemoveFromEventList>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003abe:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <xQueueReceive+0x1bc>)
 8003ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003ace:	f002 f823 	bl	8005b18 <vPortExitCritical>
                return pdPASS;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e069      	b.n	8003baa <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003adc:	f002 f81c 	bl	8005b18 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e062      	b.n	8003baa <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003aea:	f107 0310 	add.w	r3, r7, #16
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 feae 	bl	8004850 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003af8:	f002 f80e 	bl	8005b18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003afc:	f000 fc36 	bl	800436c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b00:	f001 ffda 	bl	8005ab8 <vPortEnterCritical>
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d103      	bne.n	8003b1a <xQueueReceive+0x122>
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d103      	bne.n	8003b30 <xQueueReceive+0x138>
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b30:	f001 fff2 	bl	8005b18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b34:	1d3a      	adds	r2, r7, #4
 8003b36:	f107 0310 	add.w	r3, r7, #16
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fe9d 	bl	800487c <xTaskCheckForTimeOut>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d123      	bne.n	8003b90 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4a:	f000 f9c4 	bl	8003ed6 <prvIsQueueEmpty>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d017      	beq.n	8003b84 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	3324      	adds	r3, #36	; 0x24
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fdc5 	bl	80046ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b64:	f000 f965 	bl	8003e32 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003b68:	f000 fc0e 	bl	8004388 <xTaskResumeAll>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d189      	bne.n	8003a86 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <xQueueReceive+0x1bc>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	e780      	b.n	8003a86 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b86:	f000 f954 	bl	8003e32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b8a:	f000 fbfd 	bl	8004388 <xTaskResumeAll>
 8003b8e:	e77a      	b.n	8003a86 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b92:	f000 f94e 	bl	8003e32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b96:	f000 fbf7 	bl	8004388 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9c:	f000 f99b 	bl	8003ed6 <prvIsQueueEmpty>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f43f af6f 	beq.w	8003a86 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003ba8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3730      	adds	r7, #48	; 0x30
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000ed04 	.word	0xe000ed04

08003bb8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b090      	sub	sp, #64	; 0x40
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <xQueueReceiveFromISR+0x3a>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <xQueueReceiveFromISR+0x3e>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <xQueueReceiveFromISR+0x40>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c12:	f002 f833 	bl	8005c7c <vPortValidateInterruptPriority>
        __asm volatile
 8003c16:	f3ef 8211 	mrs	r2, BASEPRI
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	623a      	str	r2, [r7, #32]
 8003c2c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8003c2e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d03e      	beq.n	8003cbc <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c4c:	f000 f8cb 	bl	8003de6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8003c58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d112      	bne.n	8003c88 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d025      	beq.n	8003cb6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fd8c 	bl	800478c <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01d      	beq.n	8003cb6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01a      	beq.n	8003cb6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e016      	b.n	8003cb6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8003c88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8e:	d10a      	bne.n	8003ca6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	61bb      	str	r3, [r7, #24]
    }
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003caa:	3301      	adds	r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	b25a      	sxtb	r2, r3
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cba:	e001      	b.n	8003cc0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f383 8811 	msr	BASEPRI, r3
    }
 8003cca:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3740      	adds	r7, #64	; 0x40
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60bb      	str	r3, [r7, #8]
    }
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8003cfa:	f001 fedd 	bl	8005ab8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003d04:	f001 ff08 	bl	8005b18 <vPortExitCritical>

    return uxReturn;
 8003d08:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d14d      	bne.n	8003dd4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fedf 	bl	8004b00 <xTaskPriorityDisinherit>
 8003d42:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	e043      	b.n	8003dd4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d119      	bne.n	8003d86 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6858      	ldr	r0, [r3, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	f006 fd99 	bl	800a894 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	441a      	add	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d32b      	bcc.n	8003dd4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	e026      	b.n	8003dd4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68d8      	ldr	r0, [r3, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	f006 fd7f 	bl	800a894 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	425b      	negs	r3, r3
 8003da0:	441a      	add	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d207      	bcs.n	8003dc2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	425b      	negs	r3, r3
 8003dbc:	441a      	add	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d105      	bne.n	8003dd4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003ddc:	697b      	ldr	r3, [r7, #20]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d018      	beq.n	8003e2a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d303      	bcc.n	8003e1a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	461a      	mov	r2, r3
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	f006 fd35 	bl	800a894 <memcpy>
    }
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003e3a:	f001 fe3d 	bl	8005ab8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e44:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e46:	e011      	b.n	8003e6c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d012      	beq.n	8003e76 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3324      	adds	r3, #36	; 0x24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fc99 	bl	800478c <xTaskRemoveFromEventList>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003e60:	f000 fd72 	bl	8004948 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	dce9      	bgt.n	8003e48 <prvUnlockQueue+0x16>
 8003e74:	e000      	b.n	8003e78 <prvUnlockQueue+0x46>
                        break;
 8003e76:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	22ff      	movs	r2, #255	; 0xff
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003e80:	f001 fe4a 	bl	8005b18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003e84:	f001 fe18 	bl	8005ab8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e8e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e90:	e011      	b.n	8003eb6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d012      	beq.n	8003ec0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fc74 	bl	800478c <xTaskRemoveFromEventList>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003eaa:	f000 fd4d 	bl	8004948 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003eae:	7bbb      	ldrb	r3, [r7, #14]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	dce9      	bgt.n	8003e92 <prvUnlockQueue+0x60>
 8003ebe:	e000      	b.n	8003ec2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003ec0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003eca:	f001 fe25 	bl	8005b18 <vPortExitCritical>
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ede:	f001 fdeb 	bl	8005ab8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003eea:	2301      	movs	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e001      	b.n	8003ef4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ef4:	f001 fe10 	bl	8005b18 <vPortExitCritical>

    return xReturn;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f0a:	f001 fdd5 	bl	8005ab8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d102      	bne.n	8003f20 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e001      	b.n	8003f24 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f24:	f001 fdf8 	bl	8005b18 <vPortExitCritical>

    return xReturn;
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8003f32:	b480      	push	{r7}
 8003f34:	b087      	sub	sp, #28
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60fb      	str	r3, [r7, #12]
    }
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d102      	bne.n	8003f6c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8003f66:	2301      	movs	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e001      	b.n	8003f70 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003f70:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003f72:	4618      	mov	r0, r3
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e014      	b.n	8003fba <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f90:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <vQueueAddToRegistry+0x50>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f9c:	490c      	ldr	r1, [pc, #48]	; (8003fd0 <vQueueAddToRegistry+0x50>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <vQueueAddToRegistry+0x50>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003fb2:	e006      	b.n	8003fc2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b07      	cmp	r3, #7
 8003fbe:	d9e7      	bls.n	8003f90 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000630 	.word	0x20000630

08003fd4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003fe4:	f001 fd68 	bl	8005ab8 <vPortEnterCritical>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d103      	bne.n	8003ffe <vQueueWaitForMessageRestricted+0x2a>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004004:	b25b      	sxtb	r3, r3
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d103      	bne.n	8004014 <vQueueWaitForMessageRestricted+0x40>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004014:	f001 fd80 	bl	8005b18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3324      	adds	r3, #36	; 0x24
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fb83 	bl	8004734 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff feff 	bl	8003e32 <prvUnlockQueue>
    }
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	; 0x30
 8004040:	af04      	add	r7, sp, #16
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fe53 	bl	8005cfc <pvPortMalloc>
 8004056:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800405e:	2058      	movs	r0, #88	; 0x58
 8004060:	f001 fe4c 	bl	8005cfc <pvPortMalloc>
 8004064:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
 8004072:	e005      	b.n	8004080 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004074:	6978      	ldr	r0, [r7, #20]
 8004076:	f001 ff21 	bl	8005ebc <vPortFree>
 800407a:	e001      	b.n	8004080 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d013      	beq.n	80040ae <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	2300      	movs	r3, #0
 800408a:	9303      	str	r3, [sp, #12]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	9302      	str	r3, [sp, #8]
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f80e 	bl	80040be <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80040a2:	69f8      	ldr	r0, [r7, #28]
 80040a4:	f000 f8a2 	bl	80041ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80040a8:	2301      	movs	r3, #1
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e002      	b.n	80040b4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80040b4:	69bb      	ldr	r3, [r7, #24]
    }
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b088      	sub	sp, #32
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	461a      	mov	r2, r3
 80040d6:	21a5      	movs	r1, #165	; 0xa5
 80040d8:	f006 fbea 	bl	800a8b0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040e6:	3b01      	subs	r3, #1
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f023 0307 	bic.w	r3, r3, #7
 80040f4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	617b      	str	r3, [r7, #20]
    }
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01f      	beq.n	800415c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e012      	b.n	8004148 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	7819      	ldrb	r1, [r3, #0]
 800412a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4413      	add	r3, r2
 8004130:	3334      	adds	r3, #52	; 0x34
 8004132:	460a      	mov	r2, r1
 8004134:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3301      	adds	r3, #1
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b09      	cmp	r3, #9
 800414c:	d9e9      	bls.n	8004122 <prvInitialiseNewTask+0x64>
 800414e:	e000      	b.n	8004152 <prvInitialiseNewTask+0x94>
            {
                break;
 8004150:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800415a:	e003      	b.n	8004164 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	2b04      	cmp	r3, #4
 8004168:	d901      	bls.n	800416e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800416a:	2304      	movs	r3, #4
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004178:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff f910 	bl	80033aa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	3318      	adds	r3, #24
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff f90b 	bl	80033aa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004198:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	f1c3 0205 	rsb	r2, r3, #5
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	3350      	adds	r3, #80	; 0x50
 80041ae:	2204      	movs	r2, #4
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f006 fb7c 	bl	800a8b0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	3354      	adds	r3, #84	; 0x54
 80041bc:	2201      	movs	r2, #1
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f006 fb75 	bl	800a8b0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	69b8      	ldr	r0, [r7, #24]
 80041cc:	f001 fb48 	bl	8005860 <pxPortInitialiseStack>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80041e2:	bf00      	nop
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80041f4:	f001 fc60 	bl	8005ab8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80041f8:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <prvAddNewTaskToReadyList+0xc0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	4a2b      	ldr	r2, [pc, #172]	; (80042ac <prvAddNewTaskToReadyList+0xc0>)
 8004200:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004202:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <prvAddNewTaskToReadyList+0xc4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800420a:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <prvAddNewTaskToReadyList+0xc4>)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004210:	4b26      	ldr	r3, [pc, #152]	; (80042ac <prvAddNewTaskToReadyList+0xc0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d110      	bne.n	800423a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004218:	f000 fbba 	bl	8004990 <prvInitialiseTaskLists>
 800421c:	e00d      	b.n	800423a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <prvAddNewTaskToReadyList+0xc8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004226:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <prvAddNewTaskToReadyList+0xc4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	429a      	cmp	r2, r3
 8004232:	d802      	bhi.n	800423a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004234:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <prvAddNewTaskToReadyList+0xc4>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800423a:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <prvAddNewTaskToReadyList+0xcc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <prvAddNewTaskToReadyList+0xcc>)
 8004242:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004244:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <prvAddNewTaskToReadyList+0xcc>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	2201      	movs	r2, #1
 8004252:	409a      	lsls	r2, r3
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <prvAddNewTaskToReadyList+0xd0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	4a18      	ldr	r2, [pc, #96]	; (80042bc <prvAddNewTaskToReadyList+0xd0>)
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <prvAddNewTaskToReadyList+0xd4>)
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7ff f8a5 	bl	80033c4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800427a:	f001 fc4d 	bl	8005b18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <prvAddNewTaskToReadyList+0xc8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00e      	beq.n	80042a4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <prvAddNewTaskToReadyList+0xc4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	429a      	cmp	r2, r3
 8004292:	d207      	bcs.n	80042a4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <prvAddNewTaskToReadyList+0xd8>)
 8004296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000748 	.word	0x20000748
 80042b0:	20000670 	.word	0x20000670
 80042b4:	20000754 	.word	0x20000754
 80042b8:	20000764 	.word	0x20000764
 80042bc:	20000750 	.word	0x20000750
 80042c0:	20000674 	.word	0x20000674
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <vTaskStartScheduler+0x88>)
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	2300      	movs	r3, #0
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	2282      	movs	r2, #130	; 0x82
 80042da:	491e      	ldr	r1, [pc, #120]	; (8004354 <vTaskStartScheduler+0x8c>)
 80042dc:	481e      	ldr	r0, [pc, #120]	; (8004358 <vTaskStartScheduler+0x90>)
 80042de:	f7ff fead 	bl	800403c <xTaskCreate>
 80042e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d102      	bne.n	80042f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80042ea:	f000 ff4b 	bl	8005184 <xTimerCreateTimerTask>
 80042ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d116      	bne.n	8004324 <vTaskStartScheduler+0x5c>
        __asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60bb      	str	r3, [r7, #8]
    }
 8004308:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <vTaskStartScheduler+0x94>)
 800430c:	f04f 32ff 	mov.w	r2, #4294967295
 8004310:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <vTaskStartScheduler+0x98>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <vTaskStartScheduler+0x9c>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800431e:	f001 fb29 	bl	8005974 <xPortStartScheduler>
 8004322:	e00e      	b.n	8004342 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d10a      	bne.n	8004342 <vTaskStartScheduler+0x7a>
        __asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	607b      	str	r3, [r7, #4]
    }
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <vTaskStartScheduler+0xa0>)
 8004344:	681b      	ldr	r3, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	2000076c 	.word	0x2000076c
 8004354:	0800f948 	.word	0x0800f948
 8004358:	08004961 	.word	0x08004961
 800435c:	20000768 	.word	0x20000768
 8004360:	20000754 	.word	0x20000754
 8004364:	2000074c 	.word	0x2000074c
 8004368:	2000001c 	.word	0x2000001c

0800436c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <vTaskSuspendAll+0x18>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	4a03      	ldr	r2, [pc, #12]	; (8004384 <vTaskSuspendAll+0x18>)
 8004378:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800437a:	bf00      	nop
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	20000770 	.word	0x20000770

08004388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <xTaskResumeAll+0x114>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	603b      	str	r3, [r7, #0]
    }
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80043b4:	f001 fb80 	bl	8005ab8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80043b8:	4b38      	ldr	r3, [pc, #224]	; (800449c <xTaskResumeAll+0x114>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a37      	ldr	r2, [pc, #220]	; (800449c <xTaskResumeAll+0x114>)
 80043c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <xTaskResumeAll+0x114>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d161      	bne.n	800448e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043ca:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <xTaskResumeAll+0x118>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d05d      	beq.n	800448e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043d2:	e02e      	b.n	8004432 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d4:	4b33      	ldr	r3, [pc, #204]	; (80044a4 <xTaskResumeAll+0x11c>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3318      	adds	r3, #24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f84c 	bl	800347e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff f847 	bl	800347e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	2201      	movs	r2, #1
 80043f6:	409a      	lsls	r2, r3
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <xTaskResumeAll+0x120>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <xTaskResumeAll+0x120>)
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4a27      	ldr	r2, [pc, #156]	; (80044ac <xTaskResumeAll+0x124>)
 8004410:	441a      	add	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3304      	adds	r3, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f7fe ffd3 	bl	80033c4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <xTaskResumeAll+0x128>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800442c:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <xTaskResumeAll+0x12c>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <xTaskResumeAll+0x11c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1cc      	bne.n	80043d4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004440:	f000 fb24 	bl	8004a8c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004444:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <xTaskResumeAll+0x130>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004450:	f000 f846 	bl	80044e0 <xTaskIncrementTick>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <xTaskResumeAll+0x12c>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f1      	bne.n	8004450 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <xTaskResumeAll+0x130>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <xTaskResumeAll+0x12c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800447a:	2301      	movs	r3, #1
 800447c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <xTaskResumeAll+0x134>)
 8004480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800448e:	f001 fb43 	bl	8005b18 <vPortExitCritical>

    return xAlreadyYielded;
 8004492:	68bb      	ldr	r3, [r7, #8]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000770 	.word	0x20000770
 80044a0:	20000748 	.word	0x20000748
 80044a4:	20000708 	.word	0x20000708
 80044a8:	20000750 	.word	0x20000750
 80044ac:	20000674 	.word	0x20000674
 80044b0:	20000670 	.word	0x20000670
 80044b4:	2000075c 	.word	0x2000075c
 80044b8:	20000758 	.word	0x20000758
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <xTaskGetTickCount+0x1c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80044cc:	687b      	ldr	r3, [r7, #4]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000074c 	.word	0x2000074c

080044e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <xTaskIncrementTick+0x128>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d17f      	bne.n	80045f2 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044f2:	4b46      	ldr	r3, [pc, #280]	; (800460c <xTaskIncrementTick+0x12c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80044fa:	4a44      	ldr	r2, [pc, #272]	; (800460c <xTaskIncrementTick+0x12c>)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d120      	bne.n	8004548 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8004506:	4b42      	ldr	r3, [pc, #264]	; (8004610 <xTaskIncrementTick+0x130>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <xTaskIncrementTick+0x46>
        __asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	603b      	str	r3, [r7, #0]
    }
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xTaskIncrementTick+0x44>
 8004526:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <xTaskIncrementTick+0x130>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	4b39      	ldr	r3, [pc, #228]	; (8004614 <xTaskIncrementTick+0x134>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a37      	ldr	r2, [pc, #220]	; (8004610 <xTaskIncrementTick+0x130>)
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4a37      	ldr	r2, [pc, #220]	; (8004614 <xTaskIncrementTick+0x134>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <xTaskIncrementTick+0x138>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	4a35      	ldr	r2, [pc, #212]	; (8004618 <xTaskIncrementTick+0x138>)
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	f000 faa2 	bl	8004a8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004548:	4b34      	ldr	r3, [pc, #208]	; (800461c <xTaskIncrementTick+0x13c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	429a      	cmp	r2, r3
 8004550:	d348      	bcc.n	80045e4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004552:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <xTaskIncrementTick+0x130>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d104      	bne.n	8004566 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455c:	4b2f      	ldr	r3, [pc, #188]	; (800461c <xTaskIncrementTick+0x13c>)
 800455e:	f04f 32ff 	mov.w	r2, #4294967295
 8004562:	601a      	str	r2, [r3, #0]
                    break;
 8004564:	e03e      	b.n	80045e4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004566:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <xTaskIncrementTick+0x130>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d203      	bcs.n	8004586 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800457e:	4a27      	ldr	r2, [pc, #156]	; (800461c <xTaskIncrementTick+0x13c>)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004584:	e02e      	b.n	80045e4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3304      	adds	r3, #4
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe ff77 	bl	800347e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3318      	adds	r3, #24
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe ff6e 	bl	800347e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <xTaskIncrementTick+0x140>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <xTaskIncrementTick+0x140>)
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a18      	ldr	r2, [pc, #96]	; (8004624 <xTaskIncrementTick+0x144>)
 80045c2:	441a      	add	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe fefa 	bl	80033c4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4b14      	ldr	r3, [pc, #80]	; (8004628 <xTaskIncrementTick+0x148>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3b9      	bcc.n	8004552 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80045de:	2301      	movs	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e2:	e7b6      	b.n	8004552 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <xTaskIncrementTick+0x14c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e004      	b.n	80045fc <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <xTaskIncrementTick+0x150>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3301      	adds	r3, #1
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <xTaskIncrementTick+0x150>)
 80045fa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80045fc:	697b      	ldr	r3, [r7, #20]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000770 	.word	0x20000770
 800460c:	2000074c 	.word	0x2000074c
 8004610:	20000700 	.word	0x20000700
 8004614:	20000704 	.word	0x20000704
 8004618:	20000760 	.word	0x20000760
 800461c:	20000768 	.word	0x20000768
 8004620:	20000750 	.word	0x20000750
 8004624:	20000674 	.word	0x20000674
 8004628:	20000670 	.word	0x20000670
 800462c:	2000075c 	.word	0x2000075c
 8004630:	20000758 	.word	0x20000758

08004634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800463a:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <vTaskSwitchContext+0xa4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <vTaskSwitchContext+0xa8>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004648:	e03f      	b.n	80046ca <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <vTaskSwitchContext+0xa8>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004650:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <vTaskSwitchContext+0xac>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	fab3 f383 	clz	r3, r3
 800465c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	f1c3 031f 	rsb	r3, r3, #31
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	491f      	ldr	r1, [pc, #124]	; (80046e4 <vTaskSwitchContext+0xb0>)
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <vTaskSwitchContext+0x5c>
        __asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	607b      	str	r3, [r7, #4]
    }
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vTaskSwitchContext+0x5a>
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <vTaskSwitchContext+0xb0>)
 800469c:	4413      	add	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3308      	adds	r3, #8
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d104      	bne.n	80046c0 <vTaskSwitchContext+0x8c>
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <vTaskSwitchContext+0xb4>)
 80046c8:	6013      	str	r3, [r2, #0]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000770 	.word	0x20000770
 80046dc:	2000075c 	.word	0x2000075c
 80046e0:	20000750 	.word	0x20000750
 80046e4:	20000674 	.word	0x20000674
 80046e8:	20000670 	.word	0x20000670

080046ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
    }
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <vTaskPlaceOnEventList+0x44>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3318      	adds	r3, #24
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fe fe76 	bl	800340c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004720:	2101      	movs	r1, #1
 8004722:	6838      	ldr	r0, [r7, #0]
 8004724:	f000 fcc8 	bl	80050b8 <prvAddCurrentTaskToDelayedList>
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000670 	.word	0x20000670

08004734 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	617b      	str	r3, [r7, #20]
    }
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <vTaskPlaceOnEventListRestricted+0x54>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3318      	adds	r3, #24
 8004762:	4619      	mov	r1, r3
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7fe fe2d 	bl	80033c4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	68b8      	ldr	r0, [r7, #8]
 800477a:	f000 fc9d 	bl	80050b8 <prvAddCurrentTaskToDelayedList>
    }
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000670 	.word	0x20000670

0800478c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60fb      	str	r3, [r7, #12]
    }
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	3318      	adds	r3, #24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fe5e 	bl	800347e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c2:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <xTaskRemoveFromEventList+0xac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11c      	bne.n	8004804 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe fe55 	bl	800347e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	2201      	movs	r2, #1
 80047da:	409a      	lsls	r2, r3
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <xTaskRemoveFromEventList+0xb0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	4a16      	ldr	r2, [pc, #88]	; (800483c <xTaskRemoveFromEventList+0xb0>)
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <xTaskRemoveFromEventList+0xb4>)
 80047f4:	441a      	add	r2, r3
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f7fe fde1 	bl	80033c4 <vListInsertEnd>
 8004802:	e005      	b.n	8004810 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	3318      	adds	r3, #24
 8004808:	4619      	mov	r1, r3
 800480a:	480e      	ldr	r0, [pc, #56]	; (8004844 <xTaskRemoveFromEventList+0xb8>)
 800480c:	f7fe fdda 	bl	80033c4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <xTaskRemoveFromEventList+0xbc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	429a      	cmp	r2, r3
 800481c:	d905      	bls.n	800482a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004822:	4b0a      	ldr	r3, [pc, #40]	; (800484c <xTaskRemoveFromEventList+0xc0>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e001      	b.n	800482e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800482e:	697b      	ldr	r3, [r7, #20]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000770 	.word	0x20000770
 800483c:	20000750 	.word	0x20000750
 8004840:	20000674 	.word	0x20000674
 8004844:	20000708 	.word	0x20000708
 8004848:	20000670 	.word	0x20000670
 800484c:	2000075c 	.word	0x2000075c

08004850 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <vTaskInternalSetTimeOutState+0x24>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <vTaskInternalSetTimeOutState+0x28>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	20000760 	.word	0x20000760
 8004878:	2000074c 	.word	0x2000074c

0800487c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
    }
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60fb      	str	r3, [r7, #12]
    }
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80048be:	f001 f8fb 	bl	8005ab8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80048c2:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <xTaskCheckForTimeOut+0xc4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d102      	bne.n	80048e2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e026      	b.n	8004930 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <xTaskCheckForTimeOut+0xc8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d00a      	beq.n	8004904 <xTaskCheckForTimeOut+0x88>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d305      	bcc.n	8004904 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e015      	b.n	8004930 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	429a      	cmp	r2, r3
 800490c:	d20b      	bcs.n	8004926 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ff98 	bl	8004850 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e004      	b.n	8004930 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004930:	f001 f8f2 	bl	8005b18 <vPortExitCritical>

    return xReturn;
 8004934:	69fb      	ldr	r3, [r7, #28]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000074c 	.word	0x2000074c
 8004944:	20000760 	.word	0x20000760

08004948 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <vTaskMissedYield+0x14>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	2000075c 	.word	0x2000075c

08004960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004968:	f000 f852 	bl	8004a10 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <prvIdleTask+0x28>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d9f9      	bls.n	8004968 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <prvIdleTask+0x2c>)
 8004976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004984:	e7f0      	b.n	8004968 <prvIdleTask+0x8>
 8004986:	bf00      	nop
 8004988:	20000674 	.word	0x20000674
 800498c:	e000ed04 	.word	0xe000ed04

08004990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	e00c      	b.n	80049b6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <prvInitialiseTaskLists+0x60>)
 80049a8:	4413      	add	r3, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fcdd 	bl	800336a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3301      	adds	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d9ef      	bls.n	800499c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80049bc:	480d      	ldr	r0, [pc, #52]	; (80049f4 <prvInitialiseTaskLists+0x64>)
 80049be:	f7fe fcd4 	bl	800336a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80049c2:	480d      	ldr	r0, [pc, #52]	; (80049f8 <prvInitialiseTaskLists+0x68>)
 80049c4:	f7fe fcd1 	bl	800336a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80049c8:	480c      	ldr	r0, [pc, #48]	; (80049fc <prvInitialiseTaskLists+0x6c>)
 80049ca:	f7fe fcce 	bl	800336a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80049ce:	480c      	ldr	r0, [pc, #48]	; (8004a00 <prvInitialiseTaskLists+0x70>)
 80049d0:	f7fe fccb 	bl	800336a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80049d4:	480b      	ldr	r0, [pc, #44]	; (8004a04 <prvInitialiseTaskLists+0x74>)
 80049d6:	f7fe fcc8 	bl	800336a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <prvInitialiseTaskLists+0x78>)
 80049dc:	4a05      	ldr	r2, [pc, #20]	; (80049f4 <prvInitialiseTaskLists+0x64>)
 80049de:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <prvInitialiseTaskLists+0x7c>)
 80049e2:	4a05      	ldr	r2, [pc, #20]	; (80049f8 <prvInitialiseTaskLists+0x68>)
 80049e4:	601a      	str	r2, [r3, #0]
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000674 	.word	0x20000674
 80049f4:	200006d8 	.word	0x200006d8
 80049f8:	200006ec 	.word	0x200006ec
 80049fc:	20000708 	.word	0x20000708
 8004a00:	2000071c 	.word	0x2000071c
 8004a04:	20000734 	.word	0x20000734
 8004a08:	20000700 	.word	0x20000700
 8004a0c:	20000704 	.word	0x20000704

08004a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a16:	e019      	b.n	8004a4c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004a18:	f001 f84e 	bl	8005ab8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <prvCheckTasksWaitingTermination+0x50>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe fd28 	bl	800347e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <prvCheckTasksWaitingTermination+0x54>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	4a0b      	ldr	r2, [pc, #44]	; (8004a64 <prvCheckTasksWaitingTermination+0x54>)
 8004a36:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <prvCheckTasksWaitingTermination+0x58>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <prvCheckTasksWaitingTermination+0x58>)
 8004a40:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004a42:	f001 f869 	bl	8005b18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f810 	bl	8004a6c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <prvCheckTasksWaitingTermination+0x58>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e1      	bne.n	8004a18 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	2000071c 	.word	0x2000071c
 8004a64:	20000748 	.word	0x20000748
 8004a68:	20000730 	.word	0x20000730

08004a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fa1f 	bl	8005ebc <vPortFree>
                vPortFree( pxTCB );
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f001 fa1c 	bl	8005ebc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <prvResetNextTaskUnblockTime+0x30>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <prvResetNextTaskUnblockTime+0x34>)
 8004a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004aa2:	e005      	b.n	8004ab0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <prvResetNextTaskUnblockTime+0x30>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <prvResetNextTaskUnblockTime+0x34>)
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000700 	.word	0x20000700
 8004ac0:	20000768 	.word	0x20000768

08004ac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <xTaskGetSchedulerState+0x34>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	e008      	b.n	8004aea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <xTaskGetSchedulerState+0x38>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d102      	bne.n	8004ae6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	e001      	b.n	8004aea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004aea:	687b      	ldr	r3, [r7, #4]
    }
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20000754 	.word	0x20000754
 8004afc:	20000770 	.word	0x20000770

08004b00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d063      	beq.n	8004bde <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004b16:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <xTaskPriorityDisinherit+0xe8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d00a      	beq.n	8004b36 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	60fb      	str	r3, [r7, #12]
    }
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60bb      	str	r3, [r7, #8]
    }
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b58:	1e5a      	subs	r2, r3, #1
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d039      	beq.n	8004bde <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d135      	bne.n	8004bde <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe fc81 	bl	800347e <uxListRemove>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	2201      	movs	r2, #1
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <xTaskPriorityDisinherit+0xec>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4013      	ands	r3, r2
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <xTaskPriorityDisinherit+0xec>)
 8004b96:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	f1c3 0205 	rsb	r2, r3, #5
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <xTaskPriorityDisinherit+0xec>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <xTaskPriorityDisinherit+0xec>)
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <xTaskPriorityDisinherit+0xf0>)
 8004bcc:	441a      	add	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f7fe fbf5 	bl	80033c4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004bde:	697b      	ldr	r3, [r7, #20]
    }
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000670 	.word	0x20000670
 8004bec:	20000750 	.word	0x20000750
 8004bf0:	20000674 	.word	0x20000674

08004bf4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	613b      	str	r3, [r7, #16]
    }
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004c1e:	f000 ff4b 	bl	8005ab8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004c22:	4b32      	ldr	r3, [pc, #200]	; (8004cec <xTaskGenericNotifyWait+0xf8>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	3354      	adds	r3, #84	; 0x54
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d022      	beq.n	8004c7a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <xTaskGenericNotifyWait+0xf8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	3214      	adds	r2, #20
 8004c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	43d2      	mvns	r2, r2
 8004c44:	4011      	ands	r1, r2
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	3214      	adds	r2, #20
 8004c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004c4e:	4b27      	ldr	r3, [pc, #156]	; (8004cec <xTaskGenericNotifyWait+0xf8>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	3354      	adds	r3, #84	; 0x54
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c62:	2101      	movs	r1, #1
 8004c64:	6a38      	ldr	r0, [r7, #32]
 8004c66:	f000 fa27 	bl	80050b8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004c6a:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <xTaskGenericNotifyWait+0xfc>)
 8004c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c7a:	f000 ff4d 	bl	8005b18 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004c7e:	f000 ff1b 	bl	8005ab8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <xTaskGenericNotifyWait+0xf8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	3214      	adds	r2, #20
 8004c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004c98:	4b14      	ldr	r3, [pc, #80]	; (8004cec <xTaskGenericNotifyWait+0xf8>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3354      	adds	r3, #84	; 0x54
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d002      	beq.n	8004cb0 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e00e      	b.n	8004cce <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <xTaskGenericNotifyWait+0xf8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	3214      	adds	r2, #20
 8004cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	43d2      	mvns	r2, r2
 8004cc0:	4011      	ands	r1, r2
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	3214      	adds	r2, #20
 8004cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <xTaskGenericNotifyWait+0xf8>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3354      	adds	r3, #84	; 0x54
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004cdc:	f000 ff1c 	bl	8005b18 <vPortExitCritical>

        return xReturn;
 8004ce0:	697b      	ldr	r3, [r7, #20]
    }
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000670 	.word	0x20000670
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	; 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004d02:	2301      	movs	r3, #1
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <xTaskGenericNotify+0x2e>
        __asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	623b      	str	r3, [r7, #32]
    }
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xTaskGenericNotify+0x4a>
        __asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	61fb      	str	r3, [r7, #28]
    }
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8004d42:	f000 feb9 	bl	8005ab8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d006      	beq.n	8004d5a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	3214      	adds	r2, #20
 8004d52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4413      	add	r3, r2
 8004d60:	3354      	adds	r3, #84	; 0x54
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3354      	adds	r3, #84	; 0x54
 8004d70:	2202      	movs	r2, #2
 8004d72:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d83b      	bhi.n	8004df2 <xTaskGenericNotify+0xfe>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <xTaskGenericNotify+0x8c>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004e11 	.word	0x08004e11
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004dc9 	.word	0x08004dc9
 8004d90:	08004dd7 	.word	0x08004dd7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	3214      	adds	r2, #20
 8004d9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	3214      	adds	r2, #20
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004dae:	e032      	b.n	8004e16 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	3214      	adds	r2, #20
 8004db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	3214      	adds	r2, #20
 8004dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004dc6:	e026      	b.n	8004e16 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	3214      	adds	r2, #20
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004dd4:	e01f      	b.n	8004e16 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d006      	beq.n	8004dec <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	3214      	adds	r2, #20
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004dea:	e014      	b.n	8004e16 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004df0:	e011      	b.n	8004e16 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <xTaskGenericNotify+0x1ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <xTaskGenericNotify+0x120>
        __asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	61bb      	str	r3, [r7, #24]
    }
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <xTaskGenericNotify+0x11a>
                    break;
 8004e10:	bf00      	nop
 8004e12:	e000      	b.n	8004e16 <xTaskGenericNotify+0x122>

                    break;
 8004e14:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d139      	bne.n	8004e92 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	3304      	adds	r3, #4
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fb2b 	bl	800347e <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <xTaskGenericNotify+0x1b0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a1b      	ldr	r2, [pc, #108]	; (8004ea4 <xTaskGenericNotify+0x1b0>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <xTaskGenericNotify+0x1b4>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fe fab7 	bl	80033c4 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <xTaskGenericNotify+0x180>
        __asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	617b      	str	r3, [r7, #20]
    }
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <xTaskGenericNotify+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d907      	bls.n	8004e92 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <xTaskGenericNotify+0x1bc>)
 8004e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e92:	f000 fe41 	bl	8005b18 <vPortExitCritical>

        return xReturn;
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3730      	adds	r7, #48	; 0x30
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	2000074c 	.word	0x2000074c
 8004ea4:	20000750 	.word	0x20000750
 8004ea8:	20000674 	.word	0x20000674
 8004eac:	20000670 	.word	0x20000670
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b090      	sub	sp, #64	; 0x40
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004efe:	f000 febd 	bl	8005c7c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8004f06:	f3ef 8211 	mrs	r2, BASEPRI
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f1c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	3214      	adds	r2, #20
 8004f2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f34:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3354      	adds	r3, #84	; 0x54
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3354      	adds	r3, #84	; 0x54
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d83b      	bhi.n	8004fce <xTaskGenericNotifyFromISR+0x11a>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <xTaskGenericNotifyFromISR+0xa8>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004fed 	.word	0x08004fed
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004fa5 	.word	0x08004fa5
 8004f6c:	08004fb3 	.word	0x08004fb3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	3214      	adds	r2, #20
 8004f76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	ea42 0103 	orr.w	r1, r2, r3
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	3214      	adds	r2, #20
 8004f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004f8a:	e032      	b.n	8004ff2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	3214      	adds	r2, #20
 8004f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f96:	1c59      	adds	r1, r3, #1
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	3214      	adds	r2, #20
 8004f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004fa2:	e026      	b.n	8004ff2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	3214      	adds	r2, #20
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004fb0:	e01f      	b.n	8004ff2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d006      	beq.n	8004fc8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	3214      	adds	r2, #20
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004fc6:	e014      	b.n	8004ff2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004fcc:	e011      	b.n	8004ff2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004fce:	4b33      	ldr	r3, [pc, #204]	; (800509c <xTaskGenericNotifyFromISR+0x1e8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	61fb      	str	r3, [r7, #28]
    }
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004ff0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d145      	bne.n	8005086 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61bb      	str	r3, [r7, #24]
    }
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <xTaskGenericNotifyFromISR+0x1ec>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11c      	bne.n	800505a <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe fa2a 	bl	800347e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	2201      	movs	r2, #1
 8005030:	409a      	lsls	r2, r3
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <xTaskGenericNotifyFromISR+0x1f0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <xTaskGenericNotifyFromISR+0x1f0>)
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <xTaskGenericNotifyFromISR+0x1f4>)
 800504a:	441a      	add	r2, r3
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f7fe f9b6 	bl	80033c4 <vListInsertEnd>
 8005058:	e005      	b.n	8005066 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	3318      	adds	r3, #24
 800505e:	4619      	mov	r1, r3
 8005060:	4812      	ldr	r0, [pc, #72]	; (80050ac <xTaskGenericNotifyFromISR+0x1f8>)
 8005062:	f7fe f9af 	bl	80033c4 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <xTaskGenericNotifyFromISR+0x1fc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	429a      	cmp	r2, r3
 8005072:	d908      	bls.n	8005086 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800507a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <xTaskGenericNotifyFromISR+0x200>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	617b      	str	r3, [r7, #20]
        __asm volatile
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f383 8811 	msr	BASEPRI, r3
    }
 8005090:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005094:	4618      	mov	r0, r3
 8005096:	3740      	adds	r7, #64	; 0x40
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	2000074c 	.word	0x2000074c
 80050a0:	20000770 	.word	0x20000770
 80050a4:	20000750 	.word	0x20000750
 80050a8:	20000674 	.word	0x20000674
 80050ac:	20000708 	.word	0x20000708
 80050b0:	20000670 	.word	0x20000670
 80050b4:	2000075c 	.word	0x2000075c

080050b8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80050c2:	4b29      	ldr	r3, [pc, #164]	; (8005168 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe f9d5 	bl	800347e <uxListRemove>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	2201      	movs	r2, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43da      	mvns	r2, r3
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4013      	ands	r3, r2
 80050ee:	4a20      	ldr	r2, [pc, #128]	; (8005170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d10a      	bne.n	8005110 <prvAddCurrentTaskToDelayedList+0x58>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005100:	4b1a      	ldr	r3, [pc, #104]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	481a      	ldr	r0, [pc, #104]	; (8005174 <prvAddCurrentTaskToDelayedList+0xbc>)
 800510a:	f7fe f95b 	bl	80033c4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800510e:	e026      	b.n	800515e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	429a      	cmp	r2, r3
 8005126:	d209      	bcs.n	800513c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <prvAddCurrentTaskToDelayedList+0xc0>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7fe f969 	bl	800340c <vListInsert>
}
 800513a:	e010      	b.n	800515e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <prvAddCurrentTaskToDelayedList+0xc4>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7fe f95f 	bl	800340c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	d202      	bcs.n	800515e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005158:	4a09      	ldr	r2, [pc, #36]	; (8005180 <prvAddCurrentTaskToDelayedList+0xc8>)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6013      	str	r3, [r2, #0]
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	2000074c 	.word	0x2000074c
 800516c:	20000670 	.word	0x20000670
 8005170:	20000750 	.word	0x20000750
 8005174:	20000734 	.word	0x20000734
 8005178:	20000704 	.word	0x20000704
 800517c:	20000700 	.word	0x20000700
 8005180:	20000768 	.word	0x20000768

08005184 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800518e:	f000 fb31 	bl	80057f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <xTimerCreateTimerTask+0x54>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <xTimerCreateTimerTask+0x58>)
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	2302      	movs	r3, #2
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051a8:	490d      	ldr	r1, [pc, #52]	; (80051e0 <xTimerCreateTimerTask+0x5c>)
 80051aa:	480e      	ldr	r0, [pc, #56]	; (80051e4 <xTimerCreateTimerTask+0x60>)
 80051ac:	f7fe ff46 	bl	800403c <xTaskCreate>
 80051b0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	603b      	str	r3, [r7, #0]
    }
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80051ce:	687b      	ldr	r3, [r7, #4]
    }
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200007a4 	.word	0x200007a4
 80051dc:	200007a8 	.word	0x200007a8
 80051e0:	0800f950 	.word	0x0800f950
 80051e4:	080053d5 	.word	0x080053d5

080051e8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80051f6:	202c      	movs	r0, #44	; 0x2c
 80051f8:	f000 fd80 	bl	8005cfc <pvPortMalloc>
 80051fc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f805 	bl	800522a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005220:	697b      	ldr	r3, [r7, #20]
        }
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	617b      	str	r3, [r7, #20]
    }
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01e      	beq.n	8005298 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800525a:	f000 facb 	bl	80057f4 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	3304      	adds	r3, #4
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe f895 	bl	80033aa <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	b2da      	uxtb	r2, r3
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <xTimerGenericCommand+0x2e>
        __asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	623b      	str	r3, [r7, #32]
    }
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80052ce:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <xTimerGenericCommand+0x98>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02a      	beq.n	800532c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	dc18      	bgt.n	800531a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052e8:	f7ff fbec 	bl	8004ac4 <xTaskGetSchedulerState>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d109      	bne.n	8005306 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052f2:	4b11      	ldr	r3, [pc, #68]	; (8005338 <xTimerGenericCommand+0x98>)
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	f107 0114 	add.w	r1, r7, #20
 80052fa:	2300      	movs	r3, #0
 80052fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fe:	f7fe f9d3 	bl	80036a8 <xQueueGenericSend>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24
 8005304:	e012      	b.n	800532c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <xTimerGenericCommand+0x98>)
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f107 0114 	add.w	r1, r7, #20
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	f7fe f9c9 	bl	80036a8 <xQueueGenericSend>
 8005316:	6278      	str	r0, [r7, #36]	; 0x24
 8005318:	e008      	b.n	800532c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800531a:	4b07      	ldr	r3, [pc, #28]	; (8005338 <xTimerGenericCommand+0x98>)
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	f107 0114 	add.w	r1, r7, #20
 8005322:	2300      	movs	r3, #0
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	f7fe fabd 	bl	80038a4 <xQueueGenericSendFromISR>
 800532a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800532e:	4618      	mov	r0, r3
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200007a4 	.word	0x200007a4

0800533c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af02      	add	r7, sp, #8
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005346:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <prvProcessExpiredTimer+0x94>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	3304      	adds	r3, #4
 8005354:	4618      	mov	r0, r3
 8005356:	f7fe f892 	bl	800347e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d022      	beq.n	80053ae <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	699a      	ldr	r2, [r3, #24]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	18d1      	adds	r1, r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	6978      	ldr	r0, [r7, #20]
 8005376:	f000 f8d1 	bl	800551c <prvInsertTimerInActiveList>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01f      	beq.n	80053c0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005380:	2300      	movs	r3, #0
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2300      	movs	r3, #0
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	2100      	movs	r1, #0
 800538a:	6978      	ldr	r0, [r7, #20]
 800538c:	f7ff ff88 	bl	80052a0 <xTimerGenericCommand>
 8005390:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d113      	bne.n	80053c0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	60fb      	str	r3, [r7, #12]
    }
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	6978      	ldr	r0, [r7, #20]
 80053c6:	4798      	blx	r3
    }
 80053c8:	bf00      	nop
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	2000079c 	.word	0x2000079c

080053d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f857 	bl	8005494 <prvGetNextExpireTime>
 80053e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4619      	mov	r1, r3
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f803 	bl	80053f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80053f2:	f000 f8d5 	bl	80055a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053f6:	e7f1      	b.n	80053dc <prvTimerTask+0x8>

080053f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005402:	f7fe ffb3 	bl	800436c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005406:	f107 0308 	add.w	r3, r7, #8
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f866 	bl	80054dc <prvSampleTimeNow>
 8005410:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d130      	bne.n	800547a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <prvProcessTimerOrBlockTask+0x3c>
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	429a      	cmp	r2, r3
 8005424:	d806      	bhi.n	8005434 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005426:	f7fe ffaf 	bl	8004388 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800542a:	68f9      	ldr	r1, [r7, #12]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ff85 	bl	800533c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005432:	e024      	b.n	800547e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <prvProcessTimerOrBlockTask+0x90>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <prvProcessTimerOrBlockTask+0x50>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <prvProcessTimerOrBlockTask+0x52>
 8005448:	2300      	movs	r3, #0
 800544a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <prvProcessTimerOrBlockTask+0x94>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	4619      	mov	r1, r3
 800545a:	f7fe fdbb 	bl	8003fd4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800545e:	f7fe ff93 	bl	8004388 <xTaskResumeAll>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <prvProcessTimerOrBlockTask+0x98>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
    }
 8005478:	e001      	b.n	800547e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800547a:	f7fe ff85 	bl	8004388 <xTaskResumeAll>
    }
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	200007a0 	.word	0x200007a0
 800548c:	200007a4 	.word	0x200007a4
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <prvGetNextExpireTime+0x44>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <prvGetNextExpireTime+0x16>
 80054a6:	2201      	movs	r2, #1
 80054a8:	e000      	b.n	80054ac <prvGetNextExpireTime+0x18>
 80054aa:	2200      	movs	r2, #0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d105      	bne.n	80054c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <prvGetNextExpireTime+0x44>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e001      	b.n	80054c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80054c8:	68fb      	ldr	r3, [r7, #12]
    }
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	2000079c 	.word	0x2000079c

080054dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80054e4:	f7fe ffec 	bl	80044c0 <xTaskGetTickCount>
 80054e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80054ea:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <prvSampleTimeNow+0x3c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d205      	bcs.n	8005500 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80054f4:	f000 f91a 	bl	800572c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e002      	b.n	8005506 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005506:	4a04      	ldr	r2, [pc, #16]	; (8005518 <prvSampleTimeNow+0x3c>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800550c:	68fb      	ldr	r3, [r7, #12]
    }
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	200007ac 	.word	0x200007ac

0800551c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	429a      	cmp	r2, r3
 8005540:	d812      	bhi.n	8005568 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	1ad2      	subs	r2, r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005550:	2301      	movs	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e01b      	b.n	800558e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <prvInsertTimerInActiveList+0x7c>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7fd ff53 	bl	800340c <vListInsert>
 8005566:	e012      	b.n	800558e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d206      	bcs.n	800557e <prvInsertTimerInActiveList+0x62>
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005578:	2301      	movs	r3, #1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	e007      	b.n	800558e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800557e:	4b07      	ldr	r3, [pc, #28]	; (800559c <prvInsertTimerInActiveList+0x80>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f7fd ff3f 	bl	800340c <vListInsert>
            }
        }

        return xProcessTimerNow;
 800558e:	697b      	ldr	r3, [r7, #20]
    }
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200007a0 	.word	0x200007a0
 800559c:	2000079c 	.word	0x2000079c

080055a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055a6:	e0ae      	b.n	8005706 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f2c0 80aa 	blt.w	8005704 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	3304      	adds	r3, #4
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fd ff5c 	bl	800347e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff ff87 	bl	80054dc <prvSampleTimeNow>
 80055ce:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	f200 8097 	bhi.w	8005706 <prvProcessReceivedCommands+0x166>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <prvProcessReceivedCommands+0x40>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005609 	.word	0x08005609
 80055e8:	08005609 	.word	0x08005609
 80055ec:	0800567d 	.word	0x0800567d
 80055f0:	08005691 	.word	0x08005691
 80055f4:	080056db 	.word	0x080056db
 80055f8:	08005609 	.word	0x08005609
 80055fc:	08005609 	.word	0x08005609
 8005600:	0800567d 	.word	0x0800567d
 8005604:	08005691 	.word	0x08005691
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	b2da      	uxtb	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	18d1      	adds	r1, r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005628:	f7ff ff78 	bl	800551c <prvInsertTimerInActiveList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d069      	beq.n	8005706 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005638:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d05e      	beq.n	8005706 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	441a      	add	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	2100      	movs	r1, #0
 8005658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800565a:	f7ff fe21 	bl	80052a0 <xTimerGenericCommand>
 800565e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d14f      	bne.n	8005706 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	61bb      	str	r3, [r7, #24]
    }
 8005678:	bf00      	nop
 800567a:	e7fe      	b.n	800567a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800568e:	e03a      	b.n	8005706 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	b2da      	uxtb	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	617b      	str	r3, [r7, #20]
    }
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	18d1      	adds	r1, r2, r3
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056d4:	f7ff ff22 	bl	800551c <prvInsertTimerInActiveList>
                        break;
 80056d8:	e015      	b.n	8005706 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80056e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ea:	f000 fbe7 	bl	8005ebc <vPortFree>
 80056ee:	e00a      	b.n	8005706 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005702:	e000      	b.n	8005706 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005704:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <prvProcessReceivedCommands+0x188>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f107 0108 	add.w	r1, r7, #8
 800570e:	2200      	movs	r2, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe f971 	bl	80039f8 <xQueueReceive>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	f47f af45 	bne.w	80055a8 <prvProcessReceivedCommands+0x8>
        }
    }
 800571e:	bf00      	nop
 8005720:	bf00      	nop
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200007a4 	.word	0x200007a4

0800572c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005732:	e048      	b.n	80057c6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <prvSwitchTimerLists+0xc0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800573e:	4b2b      	ldr	r3, [pc, #172]	; (80057ec <prvSwitchTimerLists+0xc0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3304      	adds	r3, #4
 800574c:	4618      	mov	r0, r3
 800574e:	f7fd fe96 	bl	800347e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d02e      	beq.n	80057c6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	d90e      	bls.n	8005798 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005786:	4b19      	ldr	r3, [pc, #100]	; (80057ec <prvSwitchTimerLists+0xc0>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fd fe3b 	bl	800340c <vListInsert>
 8005796:	e016      	b.n	80057c6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005798:	2300      	movs	r3, #0
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	2300      	movs	r3, #0
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	2100      	movs	r1, #0
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fd7c 	bl	80052a0 <xTimerGenericCommand>
 80057a8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	603b      	str	r3, [r7, #0]
    }
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057c6:	4b09      	ldr	r3, [pc, #36]	; (80057ec <prvSwitchTimerLists+0xc0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1b1      	bne.n	8005734 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <prvSwitchTimerLists+0xc0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <prvSwitchTimerLists+0xc4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a04      	ldr	r2, [pc, #16]	; (80057ec <prvSwitchTimerLists+0xc0>)
 80057dc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80057de:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <prvSwitchTimerLists+0xc4>)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6013      	str	r3, [r2, #0]
    }
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	2000079c 	.word	0x2000079c
 80057f0:	200007a0 	.word	0x200007a0

080057f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80057f8:	f000 f95e 	bl	8005ab8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80057fc:	4b12      	ldr	r3, [pc, #72]	; (8005848 <prvCheckForValidListAndQueue+0x54>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11d      	bne.n	8005840 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005804:	4811      	ldr	r0, [pc, #68]	; (800584c <prvCheckForValidListAndQueue+0x58>)
 8005806:	f7fd fdb0 	bl	800336a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800580a:	4811      	ldr	r0, [pc, #68]	; (8005850 <prvCheckForValidListAndQueue+0x5c>)
 800580c:	f7fd fdad 	bl	800336a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <prvCheckForValidListAndQueue+0x60>)
 8005812:	4a0e      	ldr	r2, [pc, #56]	; (800584c <prvCheckForValidListAndQueue+0x58>)
 8005814:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <prvCheckForValidListAndQueue+0x64>)
 8005818:	4a0d      	ldr	r2, [pc, #52]	; (8005850 <prvCheckForValidListAndQueue+0x5c>)
 800581a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800581c:	2200      	movs	r2, #0
 800581e:	210c      	movs	r1, #12
 8005820:	200a      	movs	r0, #10
 8005822:	f7fd febf 	bl	80035a4 <xQueueGenericCreate>
 8005826:	4603      	mov	r3, r0
 8005828:	4a07      	ldr	r2, [pc, #28]	; (8005848 <prvCheckForValidListAndQueue+0x54>)
 800582a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <prvCheckForValidListAndQueue+0x54>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <prvCheckForValidListAndQueue+0x54>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4908      	ldr	r1, [pc, #32]	; (800585c <prvCheckForValidListAndQueue+0x68>)
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fba0 	bl	8003f80 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005840:	f000 f96a 	bl	8005b18 <vPortExitCritical>
    }
 8005844:	bf00      	nop
 8005846:	bd80      	pop	{r7, pc}
 8005848:	200007a4 	.word	0x200007a4
 800584c:	20000774 	.word	0x20000774
 8005850:	20000788 	.word	0x20000788
 8005854:	2000079c 	.word	0x2000079c
 8005858:	200007a0 	.word	0x200007a0
 800585c:	0800f958 	.word	0x0800f958

08005860 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b04      	subs	r3, #4
 8005870:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005878:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b04      	subs	r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b04      	subs	r3, #4
 800588e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005890:	4a0c      	ldr	r2, [pc, #48]	; (80058c4 <pxPortInitialiseStack+0x64>)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b14      	subs	r3, #20
 800589a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f06f 0202 	mvn.w	r2, #2
 80058ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3b20      	subs	r3, #32
 80058b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80058b6:	68fb      	ldr	r3, [r7, #12]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	080058c9 	.word	0x080058c9

080058c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <prvTaskExitError+0x54>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d00a      	beq.n	80058f2 <prvTaskExitError+0x2a>
        __asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
    }
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <prvTaskExitError+0x28>
        __asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60bb      	str	r3, [r7, #8]
    }
 8005904:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005906:	bf00      	nop
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0fc      	beq.n	8005908 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000020 	.word	0x20000020

08005920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <pxCurrentTCBConst2>)
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	f380 8809 	msr	PSP, r0
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8811 	msr	BASEPRI, r0
 800593a:	4770      	bx	lr
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst2>:
 8005940:	20000670 	.word	0x20000670
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005948:	4808      	ldr	r0, [pc, #32]	; (800596c <prvPortStartFirstTask+0x24>)
 800594a:	6800      	ldr	r0, [r0, #0]
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f380 8808 	msr	MSP, r0
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8814 	msr	CONTROL, r0
 800595a:	b662      	cpsie	i
 800595c:	b661      	cpsie	f
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	df00      	svc	0
 8005968:	bf00      	nop
 800596a:	0000      	.short	0x0000
 800596c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop

08005974 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800597a:	4b46      	ldr	r3, [pc, #280]	; (8005a94 <xPortStartScheduler+0x120>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a46      	ldr	r2, [pc, #280]	; (8005a98 <xPortStartScheduler+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10a      	bne.n	800599a <xPortStartScheduler+0x26>
        __asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	613b      	str	r3, [r7, #16]
    }
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800599a:	4b3e      	ldr	r3, [pc, #248]	; (8005a94 <xPortStartScheduler+0x120>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <xPortStartScheduler+0x128>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10a      	bne.n	80059ba <xPortStartScheduler+0x46>
        __asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
    }
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059ba:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <xPortStartScheduler+0x12c>)
 80059bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	22ff      	movs	r2, #255	; 0xff
 80059ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <xPortStartScheduler+0x130>)
 80059e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059e2:	4b31      	ldr	r3, [pc, #196]	; (8005aa8 <xPortStartScheduler+0x134>)
 80059e4:	2207      	movs	r2, #7
 80059e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059e8:	e009      	b.n	80059fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80059ea:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <xPortStartScheduler+0x134>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	4a2d      	ldr	r2, [pc, #180]	; (8005aa8 <xPortStartScheduler+0x134>)
 80059f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d0ef      	beq.n	80059ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a0a:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <xPortStartScheduler+0x134>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1c3 0307 	rsb	r3, r3, #7
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d00a      	beq.n	8005a2c <xPortStartScheduler+0xb8>
        __asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60bb      	str	r3, [r7, #8]
    }
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a2c:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <xPortStartScheduler+0x134>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	4a1d      	ldr	r2, [pc, #116]	; (8005aa8 <xPortStartScheduler+0x134>)
 8005a34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a36:	4b1c      	ldr	r3, [pc, #112]	; (8005aa8 <xPortStartScheduler+0x134>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a3e:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <xPortStartScheduler+0x134>)
 8005a40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <xPortStartScheduler+0x138>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <xPortStartScheduler+0x138>)
 8005a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005a56:	4b15      	ldr	r3, [pc, #84]	; (8005aac <xPortStartScheduler+0x138>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a14      	ldr	r2, [pc, #80]	; (8005aac <xPortStartScheduler+0x138>)
 8005a5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005a62:	f000 f8db 	bl	8005c1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005a66:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <xPortStartScheduler+0x13c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005a6c:	f000 f8fa 	bl	8005c64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <xPortStartScheduler+0x140>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <xPortStartScheduler+0x140>)
 8005a76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005a7c:	f7ff ff64 	bl	8005948 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005a80:	f7fe fdd8 	bl	8004634 <vTaskSwitchContext>
    prvTaskExitError();
 8005a84:	f7ff ff20 	bl	80058c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	e000ed00 	.word	0xe000ed00
 8005a98:	410fc271 	.word	0x410fc271
 8005a9c:	410fc270 	.word	0x410fc270
 8005aa0:	e000e400 	.word	0xe000e400
 8005aa4:	200007b0 	.word	0x200007b0
 8005aa8:	200007b4 	.word	0x200007b4
 8005aac:	e000ed20 	.word	0xe000ed20
 8005ab0:	20000020 	.word	0x20000020
 8005ab4:	e000ef34 	.word	0xe000ef34

08005ab8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
        __asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	607b      	str	r3, [r7, #4]
    }
 8005ad0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005ad2:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <vPortEnterCritical+0x58>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	4a0d      	ldr	r2, [pc, #52]	; (8005b10 <vPortEnterCritical+0x58>)
 8005ada:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <vPortEnterCritical+0x58>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d10f      	bne.n	8005b04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <vPortEnterCritical+0x5c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <vPortEnterCritical+0x4c>
        __asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	603b      	str	r3, [r7, #0]
    }
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <vPortEnterCritical+0x4a>
    }
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	20000020 	.word	0x20000020
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <vPortExitCritical+0x50>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <vPortExitCritical+0x24>
        __asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	607b      	str	r3, [r7, #4]
    }
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <vPortExitCritical+0x50>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	4a09      	ldr	r2, [pc, #36]	; (8005b68 <vPortExitCritical+0x50>)
 8005b44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <vPortExitCritical+0x50>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d105      	bne.n	8005b5a <vPortExitCritical+0x42>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f383 8811 	msr	BASEPRI, r3
    }
 8005b58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000020 	.word	0x20000020
 8005b6c:	00000000 	.word	0x00000000

08005b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005b70:	f3ef 8009 	mrs	r0, PSP
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <pxCurrentTCBConst>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	f01e 0f10 	tst.w	lr, #16
 8005b80:	bf08      	it	eq
 8005b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8a:	6010      	str	r0, [r2, #0]
 8005b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b94:	f380 8811 	msr	BASEPRI, r0
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f7fe fd48 	bl	8004634 <vTaskSwitchContext>
 8005ba4:	f04f 0000 	mov.w	r0, #0
 8005ba8:	f380 8811 	msr	BASEPRI, r0
 8005bac:	bc09      	pop	{r0, r3}
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	6808      	ldr	r0, [r1, #0]
 8005bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb6:	f01e 0f10 	tst.w	lr, #16
 8005bba:	bf08      	it	eq
 8005bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bc0:	f380 8809 	msr	PSP, r0
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	f3af 8000 	nop.w

08005bd0 <pxCurrentTCBConst>:
 8005bd0:	20000670 	.word	0x20000670
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop

08005bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
        __asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	607b      	str	r3, [r7, #4]
    }
 8005bf0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005bf2:	f7fe fc75 	bl	80044e0 <xTaskIncrementTick>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <SysTick_Handler+0x40>)
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	2300      	movs	r3, #0
 8005c06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
    }
 8005c0e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <vPortSetupTimerInterrupt+0x34>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <vPortSetupTimerInterrupt+0x38>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <vPortSetupTimerInterrupt+0x3c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <vPortSetupTimerInterrupt+0x40>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <vPortSetupTimerInterrupt+0x44>)
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c3e:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <vPortSetupTimerInterrupt+0x34>)
 8005c40:	2207      	movs	r2, #7
 8005c42:	601a      	str	r2, [r3, #0]
}
 8005c44:	bf00      	nop
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	e000e010 	.word	0xe000e010
 8005c54:	e000e018 	.word	0xe000e018
 8005c58:	20000000 	.word	0x20000000
 8005c5c:	10624dd3 	.word	0x10624dd3
 8005c60:	e000e014 	.word	0xe000e014

08005c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c74 <vPortEnableVFP+0x10>
 8005c68:	6801      	ldr	r1, [r0, #0]
 8005c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c6e:	6001      	str	r1, [r0, #0]
 8005c70:	4770      	bx	lr
 8005c72:	0000      	.short	0x0000
 8005c74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop

08005c7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005c82:	f3ef 8305 	mrs	r3, IPSR
 8005c86:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	d914      	bls.n	8005cb8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c8e:	4a17      	ldr	r2, [pc, #92]	; (8005cec <vPortValidateInterruptPriority+0x70>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c98:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <vPortValidateInterruptPriority+0x74>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	7afa      	ldrb	r2, [r7, #11]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d20a      	bcs.n	8005cb8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	607b      	str	r3, [r7, #4]
    }
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <vPortValidateInterruptPriority+0x78>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <vPortValidateInterruptPriority+0x7c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d90a      	bls.n	8005cde <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	603b      	str	r3, [r7, #0]
    }
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <vPortValidateInterruptPriority+0x60>
    }
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	e000e3f0 	.word	0xe000e3f0
 8005cf0:	200007b0 	.word	0x200007b0
 8005cf4:	e000ed0c 	.word	0xe000ed0c
 8005cf8:	200007b4 	.word	0x200007b4

08005cfc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005d08:	f7fe fb30 	bl	800436c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005d0c:	4b65      	ldr	r3, [pc, #404]	; (8005ea4 <pvPortMalloc+0x1a8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005d14:	f000 f934 	bl	8005f80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d18:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <pvPortMalloc+0x1ac>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f040 80a7 	bne.w	8005e74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d02d      	beq.n	8005d88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d227      	bcs.n	8005d88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005d38:	2208      	movs	r2, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d021      	beq.n	8005d8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f023 0307 	bic.w	r3, r3, #7
 8005d50:	3308      	adds	r3, #8
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d214      	bcs.n	8005d82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	3308      	adds	r3, #8
 8005d60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d010      	beq.n	8005d8e <pvPortMalloc+0x92>
        __asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	617b      	str	r3, [r7, #20]
    }
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d86:	e002      	b.n	8005d8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e000      	b.n	8005d90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d06e      	beq.n	8005e74 <pvPortMalloc+0x178>
 8005d96:	4b45      	ldr	r3, [pc, #276]	; (8005eac <pvPortMalloc+0x1b0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d869      	bhi.n	8005e74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005da0:	4b43      	ldr	r3, [pc, #268]	; (8005eb0 <pvPortMalloc+0x1b4>)
 8005da2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005da4:	4b42      	ldr	r3, [pc, #264]	; (8005eb0 <pvPortMalloc+0x1b4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005daa:	e004      	b.n	8005db6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d903      	bls.n	8005dc8 <pvPortMalloc+0xcc>
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f1      	bne.n	8005dac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005dc8:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <pvPortMalloc+0x1a8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d050      	beq.n	8005e74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	4413      	add	r3, r2
 8005dda:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	1ad2      	subs	r2, r2, r3
 8005dec:	2308      	movs	r3, #8
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d91f      	bls.n	8005e34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4413      	add	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <pvPortMalloc+0x120>
        __asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	613b      	str	r3, [r7, #16]
    }
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e2e:	69b8      	ldr	r0, [r7, #24]
 8005e30:	f000 f908 	bl	8006044 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <pvPortMalloc+0x1b0>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <pvPortMalloc+0x1b0>)
 8005e40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e42:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <pvPortMalloc+0x1b0>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <pvPortMalloc+0x1b8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d203      	bcs.n	8005e56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e4e:	4b17      	ldr	r3, [pc, #92]	; (8005eac <pvPortMalloc+0x1b0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <pvPortMalloc+0x1b8>)
 8005e54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <pvPortMalloc+0x1ac>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005e6a:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <pvPortMalloc+0x1bc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	4a11      	ldr	r2, [pc, #68]	; (8005eb8 <pvPortMalloc+0x1bc>)
 8005e72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005e74:	f7fe fa88 	bl	8004388 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <pvPortMalloc+0x19c>
        __asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60fb      	str	r3, [r7, #12]
    }
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <pvPortMalloc+0x19a>
    return pvReturn;
 8005e98:	69fb      	ldr	r3, [r7, #28]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3728      	adds	r7, #40	; 0x28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200133c0 	.word	0x200133c0
 8005ea8:	200133d4 	.word	0x200133d4
 8005eac:	200133c4 	.word	0x200133c4
 8005eb0:	200133b8 	.word	0x200133b8
 8005eb4:	200133c8 	.word	0x200133c8
 8005eb8:	200133cc 	.word	0x200133cc

08005ebc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d04d      	beq.n	8005f6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005ece:	2308      	movs	r3, #8
 8005ed0:	425b      	negs	r3, r3
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <vPortFree+0xb8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <vPortFree+0x44>
        __asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60fb      	str	r3, [r7, #12]
    }
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <vPortFree+0x62>
        __asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60bb      	str	r3, [r7, #8]
    }
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <vPortFree+0xb8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01e      	beq.n	8005f6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11a      	bne.n	8005f6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <vPortFree+0xb8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	401a      	ands	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005f44:	f7fe fa12 	bl	800436c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <vPortFree+0xbc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4413      	add	r3, r2
 8005f52:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <vPortFree+0xbc>)
 8005f54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f56:	6938      	ldr	r0, [r7, #16]
 8005f58:	f000 f874 	bl	8006044 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <vPortFree+0xc0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	4a06      	ldr	r2, [pc, #24]	; (8005f7c <vPortFree+0xc0>)
 8005f64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005f66:	f7fe fa0f 	bl	8004388 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005f6a:	bf00      	nop
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200133d4 	.word	0x200133d4
 8005f78:	200133c4 	.word	0x200133c4
 8005f7c:	200133d0 	.word	0x200133d0

08005f80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005f8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005f8c:	4b27      	ldr	r3, [pc, #156]	; (800602c <prvHeapInit+0xac>)
 8005f8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3307      	adds	r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0307 	bic.w	r3, r3, #7
 8005fa6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	4a1f      	ldr	r2, [pc, #124]	; (800602c <prvHeapInit+0xac>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <prvHeapInit+0xb0>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005fbe:	4b1c      	ldr	r3, [pc, #112]	; (8006030 <prvHeapInit+0xb0>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005fcc:	2208      	movs	r2, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a15      	ldr	r2, [pc, #84]	; (8006034 <prvHeapInit+0xb4>)
 8005fe0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <prvHeapInit+0xb4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <prvHeapInit+0xb4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <prvHeapInit+0xb4>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <prvHeapInit+0xb8>)
 800600e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4a09      	ldr	r2, [pc, #36]	; (800603c <prvHeapInit+0xbc>)
 8006016:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006018:	4b09      	ldr	r3, [pc, #36]	; (8006040 <prvHeapInit+0xc0>)
 800601a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	200007b8 	.word	0x200007b8
 8006030:	200133b8 	.word	0x200133b8
 8006034:	200133c0 	.word	0x200133c0
 8006038:	200133c8 	.word	0x200133c8
 800603c:	200133c4 	.word	0x200133c4
 8006040:	200133d4 	.word	0x200133d4

08006044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800604c:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <prvInsertBlockIntoFreeList+0xac>)
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e002      	b.n	8006058 <prvInsertBlockIntoFreeList+0x14>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d8f7      	bhi.n	8006052 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	4413      	add	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d108      	bne.n	8006086 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	441a      	add	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d118      	bne.n	80060cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <prvInsertBlockIntoFreeList+0xb0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d00d      	beq.n	80060c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	441a      	add	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e008      	b.n	80060d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <prvInsertBlockIntoFreeList+0xb0>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e003      	b.n	80060d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d002      	beq.n	80060e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200133b8 	.word	0x200133b8
 80060f4:	200133c0 	.word	0x200133c0

080060f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006106:	2b00      	cmp	r3, #0
 8006108:	db0b      	blt.n	8006122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	f003 021f 	and.w	r2, r3, #31
 8006110:	4907      	ldr	r1, [pc, #28]	; (8006130 <__NVIC_EnableIRQ+0x38>)
 8006112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	2001      	movs	r0, #1
 800611a:	fa00 f202 	lsl.w	r2, r0, r2
 800611e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	e000e100 	.word	0xe000e100

08006134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006144:	2b00      	cmp	r3, #0
 8006146:	db0a      	blt.n	800615e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	490c      	ldr	r1, [pc, #48]	; (8006180 <__NVIC_SetPriority+0x4c>)
 800614e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006152:	0112      	lsls	r2, r2, #4
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	440b      	add	r3, r1
 8006158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800615c:	e00a      	b.n	8006174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4908      	ldr	r1, [pc, #32]	; (8006184 <__NVIC_SetPriority+0x50>)
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	3b04      	subs	r3, #4
 800616c:	0112      	lsls	r2, r2, #4
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	440b      	add	r3, r1
 8006172:	761a      	strb	r2, [r3, #24]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	e000e100 	.word	0xe000e100
 8006184:	e000ed00 	.word	0xe000ed00

08006188 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <inTIM4+0x30>)
 800618e:	4a0b      	ldr	r2, [pc, #44]	; (80061bc <inTIM4+0x34>)
 8006190:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <inTIM4+0x30>)
 8006194:	2200      	movs	r2, #0
 8006196:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <inTIM4+0x30>)
 800619a:	2200      	movs	r2, #0
 800619c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800619e:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <inTIM4+0x30>)
 80061a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80061a4:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <inTIM4+0x30>)
 80061a8:	220a      	movs	r2, #10
 80061aa:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 80061ac:	4802      	ldr	r0, [pc, #8]	; (80061b8 <inTIM4+0x30>)
 80061ae:	f000 f807 	bl	80061c0 <BasicTimer_Config>

}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000300 	.word	0x20000300
 80061bc:	40000800 	.word	0x40000800

080061c0 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061d0:	b672      	cpsid	i
}
 80061d2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a85      	ldr	r2, [pc, #532]	; (80063f0 <BasicTimer_Config+0x230>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d106      	bne.n	80061ec <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80061de:	4b85      	ldr	r3, [pc, #532]	; (80063f4 <BasicTimer_Config+0x234>)
 80061e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e2:	4a84      	ldr	r2, [pc, #528]	; (80063f4 <BasicTimer_Config+0x234>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6453      	str	r3, [r2, #68]	; 0x44
 80061ea:	e030      	b.n	800624e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d106      	bne.n	8006204 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80061f6:	4b7f      	ldr	r3, [pc, #508]	; (80063f4 <BasicTimer_Config+0x234>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	4a7e      	ldr	r2, [pc, #504]	; (80063f4 <BasicTimer_Config+0x234>)
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	6413      	str	r3, [r2, #64]	; 0x40
 8006202:	e024      	b.n	800624e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a7b      	ldr	r2, [pc, #492]	; (80063f8 <BasicTimer_Config+0x238>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d106      	bne.n	800621c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800620e:	4b79      	ldr	r3, [pc, #484]	; (80063f4 <BasicTimer_Config+0x234>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a78      	ldr	r2, [pc, #480]	; (80063f4 <BasicTimer_Config+0x234>)
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	e018      	b.n	800624e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a76      	ldr	r2, [pc, #472]	; (80063fc <BasicTimer_Config+0x23c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d106      	bne.n	8006234 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8006226:	4b73      	ldr	r3, [pc, #460]	; (80063f4 <BasicTimer_Config+0x234>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	4a72      	ldr	r2, [pc, #456]	; (80063f4 <BasicTimer_Config+0x234>)
 800622c:	f043 0304 	orr.w	r3, r3, #4
 8006230:	6413      	str	r3, [r2, #64]	; 0x40
 8006232:	e00c      	b.n	800624e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a71      	ldr	r2, [pc, #452]	; (8006400 <BasicTimer_Config+0x240>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d106      	bne.n	800624c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800623e:	4b6d      	ldr	r3, [pc, #436]	; (80063f4 <BasicTimer_Config+0x234>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	4a6c      	ldr	r2, [pc, #432]	; (80063f4 <BasicTimer_Config+0x234>)
 8006244:	f043 0308 	orr.w	r3, r3, #8
 8006248:	6413      	str	r3, [r2, #64]	; 0x40
 800624a:	e000      	b.n	800624e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800624c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800625c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6892      	ldr	r2, [r2, #8]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	791b      	ldrb	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 80d3 	bne.w	8006418 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0210 	bic.w	r2, r2, #16
 8006280:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2ba0      	cmp	r3, #160	; 0xa0
 800628c:	d022      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2bc8      	cmp	r3, #200	; 0xc8
 8006292:	d01f      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800629a:	d01b      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80062a2:	d017      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80062aa:	d013      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80062b2:	d00f      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80062ba:	d00b      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80062c2:	d007      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80062ca:	d003      	beq.n	80062d4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d2:	d10b      	bne.n	80062ec <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	2264      	movs	r2, #100	; 0x64
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	3a01      	subs	r2, #1
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80062ea:	e07c      	b.n	80063e6 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80062f2:	d029      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062fa:	d025      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006302:	4293      	cmp	r3, r2
 8006304:	d020      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800630c:	d01c      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	4293      	cmp	r3, r2
 8006316:	d017      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f241 7270 	movw	r2, #6000	; 0x1770
 800631e:	4293      	cmp	r3, r2
 8006320:	d012      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f641 3258 	movw	r2, #7000	; 0x1b58
 8006328:	4293      	cmp	r3, r2
 800632a:	d00d      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006332:	d009      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f242 3228 	movw	r2, #9000	; 0x2328
 800633a:	4293      	cmp	r3, r2
 800633c:	d004      	beq.n	8006348 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f242 7210 	movw	r2, #10000	; 0x2710
 8006344:	4293      	cmp	r3, r2
 8006346:	d10c      	bne.n	8006362 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	3a01      	subs	r2, #1
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006360:	e041      	b.n	80063e6 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006368:	d028      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006370:	4293      	cmp	r3, r2
 8006372:	d023      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f247 5230 	movw	r2, #30000	; 0x7530
 800637a:	4293      	cmp	r3, r2
 800637c:	d01e      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f649 4240 	movw	r2, #40000	; 0x9c40
 8006384:	4293      	cmp	r3, r2
 8006386:	d019      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800638e:	4293      	cmp	r3, r2
 8006390:	d014      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4a19      	ldr	r2, [pc, #100]	; (8006404 <BasicTimer_Config+0x244>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00b      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <BasicTimer_Config+0x248>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4a17      	ldr	r2, [pc, #92]	; (800640c <BasicTimer_Config+0x24c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4a16      	ldr	r2, [pc, #88]	; (8006410 <BasicTimer_Config+0x250>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d108      	bne.n	80063ce <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	3a01      	subs	r2, #1
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80063cc:	e00b      	b.n	80063e6 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	4a10      	ldr	r2, [pc, #64]	; (8006414 <BasicTimer_Config+0x254>)
 80063d4:	fba2 2303 	umull	r2, r3, r2, r3
 80063d8:	08db      	lsrs	r3, r3, #3
 80063da:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	3a01      	subs	r2, #1
 80063e4:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24
 80063ee:	e027      	b.n	8006440 <BasicTimer_Config+0x280>
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40023800 	.word	0x40023800
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40000800 	.word	0x40000800
 8006400:	40000c00 	.word	0x40000c00
 8006404:	00011170 	.word	0x00011170
 8006408:	00013880 	.word	0x00013880
 800640c:	00015f90 	.word	0x00015f90
 8006410:	000186a0 	.word	0x000186a0
 8006414:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0210 	orr.w	r2, r2, #16
 8006426:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3a01      	subs	r2, #1
 8006432:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3a01      	subs	r2, #1
 800643e:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7c1b      	ldrb	r3, [r3, #16]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d12d      	bne.n	80064a4 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d103      	bne.n	800646a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8006462:	201c      	movs	r0, #28
 8006464:	f7ff fe48 	bl	80060f8 <__NVIC_EnableIRQ>
 8006468:	e024      	b.n	80064b4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a14      	ldr	r2, [pc, #80]	; (80064c0 <BasicTimer_Config+0x300>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d103      	bne.n	800647c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8006474:	201d      	movs	r0, #29
 8006476:	f7ff fe3f 	bl	80060f8 <__NVIC_EnableIRQ>
 800647a:	e01b      	b.n	80064b4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a10      	ldr	r2, [pc, #64]	; (80064c4 <BasicTimer_Config+0x304>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d103      	bne.n	800648e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8006486:	201e      	movs	r0, #30
 8006488:	f7ff fe36 	bl	80060f8 <__NVIC_EnableIRQ>
 800648c:	e012      	b.n	80064b4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a0d      	ldr	r2, [pc, #52]	; (80064c8 <BasicTimer_Config+0x308>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d103      	bne.n	80064a0 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8006498:	2032      	movs	r0, #50	; 0x32
 800649a:	f7ff fe2d 	bl	80060f8 <__NVIC_EnableIRQ>
 800649e:	e009      	b.n	80064b4 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 80064a0:	bf00      	nop
 80064a2:	e007      	b.n	80064b4 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80064b4:	b662      	cpsie	i
}
 80064b6:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00

080064cc <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 80064d6:	4818      	ldr	r0, [pc, #96]	; (8006538 <delay_ms+0x6c>)
 80064d8:	f000 fab8 	bl	8006a4c <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	461a      	mov	r2, r3
 80064e0:	0092      	lsls	r2, r2, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 80064f0:	e016      	b.n	8006520 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 80064f2:	4b11      	ldr	r3, [pc, #68]	; (8006538 <delay_ms+0x6c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00f      	beq.n	8006520 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <delay_ms+0x6c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	3301      	adds	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	4413      	add	r3, r2
 800650e:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8006510:	4b09      	ldr	r3, [pc, #36]	; (8006538 <delay_ms+0x6c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	4b08      	ldr	r3, [pc, #32]	; (8006538 <delay_ms+0x6c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8006520:	89fa      	ldrh	r2, [r7, #14]
 8006522:	89bb      	ldrh	r3, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d3e4      	bcc.n	80064f2 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8006528:	4803      	ldr	r0, [pc, #12]	; (8006538 <delay_ms+0x6c>)
 800652a:	f000 faa1 	bl	8006a70 <stopTimer>
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000300 	.word	0x20000300

0800653c <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8006548:	b672      	cpsid	i
}
 800654a:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d105      	bne.n	8006562 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	4619      	mov	r1, r3
 800655a:	201c      	movs	r0, #28
 800655c:	f7ff fdea 	bl	8006134 <__NVIC_SetPriority>
 8006560:	e021      	b.n	80065a6 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <TIM_SetPriority+0x78>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d105      	bne.n	8006578 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	4619      	mov	r1, r3
 8006570:	201d      	movs	r0, #29
 8006572:	f7ff fddf 	bl	8006134 <__NVIC_SetPriority>
 8006576:	e016      	b.n	80065a6 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <TIM_SetPriority+0x7c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d105      	bne.n	800658e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	4619      	mov	r1, r3
 8006586:	201e      	movs	r0, #30
 8006588:	f7ff fdd4 	bl	8006134 <__NVIC_SetPriority>
 800658c:	e00b      	b.n	80065a6 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <TIM_SetPriority+0x80>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d105      	bne.n	80065a4 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	4619      	mov	r1, r3
 800659c:	2032      	movs	r0, #50	; 0x32
 800659e:	f7ff fdc9 	bl	8006134 <__NVIC_SetPriority>
 80065a2:	e000      	b.n	80065a6 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 80065a4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80065a6:	b662      	cpsie	i
}
 80065a8:	bf00      	nop
	}

	__enable_irq();

}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40000c00 	.word	0x40000c00

080065c0 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065c4:	bf00      	nop
}
 80065c6:	bf00      	nop
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065d4:	bf00      	nop
}
 80065d6:	bf00      	nop
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065e4:	bf00      	nop
}
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065f4:	bf00      	nop
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006604:	bf00      	nop
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006614:	bf00      	nop
}
 8006616:	bf00      	nop
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006624:	bf00      	nop
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006634:	bf00      	nop
}
 8006636:	bf00      	nop
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006644:	bf00      	nop
}
 8006646:	bf00      	nop
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006654:	bf00      	nop
}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006664:	bf00      	nop
}
 8006666:	bf00      	nop
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006674:	bf00      	nop
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006684:	bf00      	nop
}
 8006686:	bf00      	nop
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006694:	bf00      	nop
}
 8006696:	bf00      	nop
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80066a4:	bf00      	nop
}
 80066a6:	bf00      	nop
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80066b4:	bf00      	nop
}
 80066b6:	bf00      	nop
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80066c4:	bf00      	nop
}
 80066c6:	bf00      	nop
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80066d4:	bf00      	nop
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80066e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80066f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8006702:	f7fb fa77 	bl	8001bf4 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8006706:	e066      	b.n	80067d6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8006708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d012      	beq.n	800673c <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8006716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006720:	f023 0302 	bic.w	r3, r3, #2
 8006724:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8006726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006734:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8006736:	f7ff ff5b 	bl	80065f0 <Capture_TIM2_Ch1_Callback>
}
 800673a:	e04c      	b.n	80067d6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 800673c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d012      	beq.n	8006770 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800674a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 800675a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006768:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800676a:	f7ff ff49 	bl	8006600 <Capture_TIM2_Ch2_Callback>
}
 800676e:	e032      	b.n	80067d6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8006770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d012      	beq.n	80067a4 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800677e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006788:	f023 0308 	bic.w	r3, r3, #8
 800678c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800678e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800679c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800679e:	f7ff ff37 	bl	8006610 <Capture_TIM2_Ch3_Callback>
}
 80067a2:	e018      	b.n	80067d6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 80067a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d011      	beq.n	80067d6 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80067b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067bc:	f023 0310 	bic.w	r3, r3, #16
 80067c0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80067c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067d0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80067d2:	f7ff ff25 	bl	8006620 <Capture_TIM2_Ch4_Callback>
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80067e0:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80067ec:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	4a2d      	ldr	r2, [pc, #180]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 80067f2:	f023 0301 	bic.w	r3, r3, #1
 80067f6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80067f8:	f7ff fee2 	bl	80065c0 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80067fc:	e052      	b.n	80068a4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80067fe:	4b2a      	ldr	r3, [pc, #168]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800680a:	4b27      	ldr	r3, [pc, #156]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006810:	f023 0302 	bic.w	r3, r3, #2
 8006814:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	4a23      	ldr	r2, [pc, #140]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800681c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006820:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8006822:	f7ff ff05 	bl	8006630 <Capture_TIM3_Ch1_Callback>
}
 8006826:	e03d      	b.n	80068a4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8006828:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00e      	beq.n	8006852 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8006834:	4b1c      	ldr	r3, [pc, #112]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800683a:	f023 0304 	bic.w	r3, r3, #4
 800683e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800684a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 800684c:	f7ff fef8 	bl	8006640 <Capture_TIM3_Ch2_Callback>
}
 8006850:	e028      	b.n	80068a4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	4a11      	ldr	r2, [pc, #68]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006864:	f023 0308 	bic.w	r3, r3, #8
 8006868:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	4a0e      	ldr	r2, [pc, #56]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006874:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8006876:	f7ff feeb 	bl	8006650 <Capture_TIM3_Ch3_Callback>
}
 800687a:	e013      	b.n	80068a4 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00d      	beq.n	80068a4 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8006888:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	4a06      	ldr	r2, [pc, #24]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	4a03      	ldr	r2, [pc, #12]	; (80068a8 <TIM3_IRQHandler+0xcc>)
 800689a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 80068a0:	f7ff fede 	bl	8006660 <Capture_TIM3_Ch4_Callback>
}
 80068a4:	bf00      	nop
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40000400 	.word	0x40000400

080068ac <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80068b0:	4b31      	ldr	r3, [pc, #196]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80068bc:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	4a2d      	ldr	r2, [pc, #180]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80068c8:	f7ff fe82 	bl	80065d0 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80068cc:	e052      	b.n	8006974 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80068ce:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00e      	beq.n	80068f8 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80068da:	4b27      	ldr	r3, [pc, #156]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	4a26      	ldr	r2, [pc, #152]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068e0:	f023 0302 	bic.w	r3, r3, #2
 80068e4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	4a23      	ldr	r2, [pc, #140]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80068f2:	f7ff febd 	bl	8006670 <Capture_TIM4_Ch1_Callback>
}
 80068f6:	e03d      	b.n	8006974 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80068f8:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <TIM4_IRQHandler+0xcc>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8006904:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <TIM4_IRQHandler+0xcc>)
 800690a:	f023 0304 	bic.w	r3, r3, #4
 800690e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8006910:	4b19      	ldr	r3, [pc, #100]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	4a18      	ldr	r2, [pc, #96]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800691c:	f7ff fec8 	bl	80066b0 <Capture_TIM5_Ch2_Callback>
}
 8006920:	e028      	b.n	8006974 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00e      	beq.n	800694c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800692e:	4b12      	ldr	r3, [pc, #72]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4a11      	ldr	r2, [pc, #68]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006934:	f023 0308 	bic.w	r3, r3, #8
 8006938:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 800693a:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <TIM4_IRQHandler+0xcc>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	4a0e      	ldr	r2, [pc, #56]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006944:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8006946:	f7ff fe9b 	bl	8006680 <Capture_TIM4_Ch3_Callback>
}
 800694a:	e013      	b.n	8006974 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <TIM4_IRQHandler+0xcc>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00d      	beq.n	8006974 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <TIM4_IRQHandler+0xcc>)
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	4a06      	ldr	r2, [pc, #24]	; (8006978 <TIM4_IRQHandler+0xcc>)
 800695e:	f023 0310 	bic.w	r3, r3, #16
 8006962:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <TIM4_IRQHandler+0xcc>)
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	4a03      	ldr	r2, [pc, #12]	; (8006978 <TIM4_IRQHandler+0xcc>)
 800696a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800696e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8006970:	f7ff fe8e 	bl	8006690 <Capture_TIM4_Ch4_Callback>
}
 8006974:	bf00      	nop
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40000800 	.word	0x40000800

0800697c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8006980:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800698c:	4b2e      	ldr	r3, [pc, #184]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	4a2d      	ldr	r2, [pc, #180]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8006998:	f7ff fe22 	bl	80065e0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800699c:	e052      	b.n	8006a44 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800699e:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 80069aa:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	4a26      	ldr	r2, [pc, #152]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069b0:	f023 0302 	bic.w	r3, r3, #2
 80069b4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80069c2:	f7ff fe6d 	bl	80066a0 <Capture_TIM5_Ch1_Callback>
}
 80069c6:	e03d      	b.n	8006a44 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80069c8:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00e      	beq.n	80069f2 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80069d4:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069da:	f023 0304 	bic.w	r3, r3, #4
 80069de:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80069e0:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069ea:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80069ec:	f7ff fe60 	bl	80066b0 <Capture_TIM5_Ch2_Callback>
}
 80069f0:	e028      	b.n	8006a44 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80069fe:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4a11      	ldr	r2, [pc, #68]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a04:	f023 0308 	bic.w	r3, r3, #8
 8006a08:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 8006a0a:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a14:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8006a16:	f7ff fe53 	bl	80066c0 <Capture_TIM5_Ch3_Callback>
}
 8006a1a:	e013      	b.n	8006a44 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00d      	beq.n	8006a44 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8006a28:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	4a06      	ldr	r2, [pc, #24]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a2e:	f023 0310 	bic.w	r3, r3, #16
 8006a32:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	4a03      	ldr	r2, [pc, #12]	; (8006a48 <TIM5_IRQHandler+0xcc>)
 8006a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a3e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8006a40:	f7ff fe46 	bl	80066d0 <Capture_TIM5_Ch4_Callback>
}
 8006a44:	bf00      	nop
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40000c00 	.word	0x40000c00

08006a4c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <__NVIC_EnableIRQ>:
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	db0b      	blt.n	8006abe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	f003 021f 	and.w	r2, r3, #31
 8006aac:	4907      	ldr	r1, [pc, #28]	; (8006acc <__NVIC_EnableIRQ+0x38>)
 8006aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8006aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	e000e100 	.word	0xe000e100

08006ad0 <__NVIC_SetPriority>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db0a      	blt.n	8006afa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	490c      	ldr	r1, [pc, #48]	; (8006b1c <__NVIC_SetPriority+0x4c>)
 8006aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aee:	0112      	lsls	r2, r2, #4
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	440b      	add	r3, r1
 8006af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006af8:	e00a      	b.n	8006b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	4908      	ldr	r1, [pc, #32]	; (8006b20 <__NVIC_SetPriority+0x50>)
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	3b04      	subs	r3, #4
 8006b08:	0112      	lsls	r2, r2, #4
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	761a      	strb	r2, [r3, #24]
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	e000e100 	.word	0xe000e100
 8006b20:	e000ed00 	.word	0xe000ed00

08006b24 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f8bf 	bl	8007cb4 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8006b36:	4b96      	ldr	r3, [pc, #600]	; (8006d90 <extInt_Config+0x26c>)
 8006b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	791b      	ldrb	r3, [r3, #4]
 8006b44:	2b0f      	cmp	r3, #15
 8006b46:	f200 85cd 	bhi.w	80076e4 <extInt_Config+0xbc0>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <extInt_Config+0x2c>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b91 	.word	0x08006b91
 8006b54:	08006c47 	.word	0x08006c47
 8006b58:	08006cfd 	.word	0x08006cfd
 8006b5c:	08006dd3 	.word	0x08006dd3
 8006b60:	08006e89 	.word	0x08006e89
 8006b64:	08006f37 	.word	0x08006f37
 8006b68:	08006ffd 	.word	0x08006ffd
 8006b6c:	080070a5 	.word	0x080070a5
 8006b70:	0800714d 	.word	0x0800714d
 8006b74:	080071f5 	.word	0x080071f5
 8006b78:	080072bb 	.word	0x080072bb
 8006b7c:	08007363 	.word	0x08007363
 8006b80:	0800740b 	.word	0x0800740b
 8006b84:	080074d1 	.word	0x080074d1
 8006b88:	08007577 	.word	0x08007577
 8006b8c:	0800761f 	.word	0x0800761f
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8006b90:	4b80      	ldr	r3, [pc, #512]	; (8006d94 <extInt_Config+0x270>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4a7f      	ldr	r2, [pc, #508]	; (8006d94 <extInt_Config+0x270>)
 8006b96:	f023 030f 	bic.w	r3, r3, #15
 8006b9a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a7d      	ldr	r2, [pc, #500]	; (8006d98 <extInt_Config+0x274>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d105      	bne.n	8006bb4 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8006ba8:	4b7a      	ldr	r3, [pc, #488]	; (8006d94 <extInt_Config+0x270>)
 8006baa:	4a7a      	ldr	r2, [pc, #488]	; (8006d94 <extInt_Config+0x270>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006bb0:	f000 bd9a 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a78      	ldr	r2, [pc, #480]	; (8006d9c <extInt_Config+0x278>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d107      	bne.n	8006bd0 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8006bc0:	4b74      	ldr	r3, [pc, #464]	; (8006d94 <extInt_Config+0x270>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4a73      	ldr	r2, [pc, #460]	; (8006d94 <extInt_Config+0x270>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	6093      	str	r3, [r2, #8]
					break;
 8006bcc:	f000 bd8c 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a72      	ldr	r2, [pc, #456]	; (8006da0 <extInt_Config+0x27c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d107      	bne.n	8006bec <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8006bdc:	4b6d      	ldr	r3, [pc, #436]	; (8006d94 <extInt_Config+0x270>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	4a6c      	ldr	r2, [pc, #432]	; (8006d94 <extInt_Config+0x270>)
 8006be2:	f043 0302 	orr.w	r3, r3, #2
 8006be6:	6093      	str	r3, [r2, #8]
					break;
 8006be8:	f000 bd7e 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a6c      	ldr	r2, [pc, #432]	; (8006da4 <extInt_Config+0x280>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d107      	bne.n	8006c08 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8006bf8:	4b66      	ldr	r3, [pc, #408]	; (8006d94 <extInt_Config+0x270>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	4a65      	ldr	r2, [pc, #404]	; (8006d94 <extInt_Config+0x270>)
 8006bfe:	f043 0303 	orr.w	r3, r3, #3
 8006c02:	6093      	str	r3, [r2, #8]
					break;
 8006c04:	f000 bd70 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a66      	ldr	r2, [pc, #408]	; (8006da8 <extInt_Config+0x284>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d107      	bne.n	8006c24 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8006c14:	4b5f      	ldr	r3, [pc, #380]	; (8006d94 <extInt_Config+0x270>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4a5e      	ldr	r2, [pc, #376]	; (8006d94 <extInt_Config+0x270>)
 8006c1a:	f043 0304 	orr.w	r3, r3, #4
 8006c1e:	6093      	str	r3, [r2, #8]
					break;
 8006c20:	f000 bd62 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a60      	ldr	r2, [pc, #384]	; (8006dac <extInt_Config+0x288>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d107      	bne.n	8006c40 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8006c30:	4b58      	ldr	r3, [pc, #352]	; (8006d94 <extInt_Config+0x270>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4a57      	ldr	r2, [pc, #348]	; (8006d94 <extInt_Config+0x270>)
 8006c36:	f043 0307 	orr.w	r3, r3, #7
 8006c3a:	6093      	str	r3, [r2, #8]
					break;
 8006c3c:	f000 bd54 	b.w	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8006c40:	bf00      	nop
					break;
 8006c42:	f000 bd51 	b.w	80076e8 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8006c46:	4b53      	ldr	r3, [pc, #332]	; (8006d94 <extInt_Config+0x270>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	4a52      	ldr	r2, [pc, #328]	; (8006d94 <extInt_Config+0x270>)
 8006c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c50:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a4f      	ldr	r2, [pc, #316]	; (8006d98 <extInt_Config+0x274>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d105      	bne.n	8006c6a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8006c5e:	4b4d      	ldr	r3, [pc, #308]	; (8006d94 <extInt_Config+0x270>)
 8006c60:	4a4c      	ldr	r2, [pc, #304]	; (8006d94 <extInt_Config+0x270>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006c66:	f000 bd3f 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a4a      	ldr	r2, [pc, #296]	; (8006d9c <extInt_Config+0x278>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d107      	bne.n	8006c86 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8006c76:	4b47      	ldr	r3, [pc, #284]	; (8006d94 <extInt_Config+0x270>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4a46      	ldr	r2, [pc, #280]	; (8006d94 <extInt_Config+0x270>)
 8006c7c:	f043 0310 	orr.w	r3, r3, #16
 8006c80:	6093      	str	r3, [r2, #8]
					break;
 8006c82:	f000 bd31 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a44      	ldr	r2, [pc, #272]	; (8006da0 <extInt_Config+0x27c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d107      	bne.n	8006ca2 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8006c92:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <extInt_Config+0x270>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	4a3f      	ldr	r2, [pc, #252]	; (8006d94 <extInt_Config+0x270>)
 8006c98:	f043 0320 	orr.w	r3, r3, #32
 8006c9c:	6093      	str	r3, [r2, #8]
					break;
 8006c9e:	f000 bd23 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3e      	ldr	r2, [pc, #248]	; (8006da4 <extInt_Config+0x280>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d107      	bne.n	8006cbe <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8006cae:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <extInt_Config+0x270>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	4a38      	ldr	r2, [pc, #224]	; (8006d94 <extInt_Config+0x270>)
 8006cb4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006cb8:	6093      	str	r3, [r2, #8]
					break;
 8006cba:	f000 bd15 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a38      	ldr	r2, [pc, #224]	; (8006da8 <extInt_Config+0x284>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d107      	bne.n	8006cda <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8006cca:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <extInt_Config+0x270>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	4a31      	ldr	r2, [pc, #196]	; (8006d94 <extInt_Config+0x270>)
 8006cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cd4:	6093      	str	r3, [r2, #8]
					break;
 8006cd6:	f000 bd07 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a32      	ldr	r2, [pc, #200]	; (8006dac <extInt_Config+0x288>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d107      	bne.n	8006cf6 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8006ce6:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <extInt_Config+0x270>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	4a2a      	ldr	r2, [pc, #168]	; (8006d94 <extInt_Config+0x270>)
 8006cec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006cf0:	6093      	str	r3, [r2, #8]
					break;
 8006cf2:	f000 bcf9 	b.w	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8006cf6:	bf00      	nop
					break;
 8006cf8:	f000 bcf6 	b.w	80076e8 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8006cfc:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <extInt_Config+0x270>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4a24      	ldr	r2, [pc, #144]	; (8006d94 <extInt_Config+0x270>)
 8006d02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d06:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <extInt_Config+0x274>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d105      	bne.n	8006d20 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8006d14:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <extInt_Config+0x270>)
 8006d16:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <extInt_Config+0x270>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006d1c:	f000 bce4 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <extInt_Config+0x278>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d107      	bne.n	8006d3c <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8006d2c:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <extInt_Config+0x270>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <extInt_Config+0x270>)
 8006d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d36:	6093      	str	r3, [r2, #8]
					break;
 8006d38:	f000 bcd6 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a17      	ldr	r2, [pc, #92]	; (8006da0 <extInt_Config+0x27c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d107      	bne.n	8006d58 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8006d48:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <extInt_Config+0x270>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4a11      	ldr	r2, [pc, #68]	; (8006d94 <extInt_Config+0x270>)
 8006d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d52:	6093      	str	r3, [r2, #8]
					break;
 8006d54:	f000 bcc8 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <extInt_Config+0x280>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d107      	bne.n	8006d74 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <extInt_Config+0x270>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <extInt_Config+0x270>)
 8006d6a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d6e:	6093      	str	r3, [r2, #8]
					break;
 8006d70:	f000 bcba 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a0b      	ldr	r2, [pc, #44]	; (8006da8 <extInt_Config+0x284>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d117      	bne.n	8006db0 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <extInt_Config+0x270>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4a03      	ldr	r2, [pc, #12]	; (8006d94 <extInt_Config+0x270>)
 8006d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d8a:	6093      	str	r3, [r2, #8]
					break;
 8006d8c:	f000 bcac 	b.w	80076e8 <extInt_Config+0xbc4>
 8006d90:	40023800 	.word	0x40023800
 8006d94:	40013800 	.word	0x40013800
 8006d98:	40020000 	.word	0x40020000
 8006d9c:	40020400 	.word	0x40020400
 8006da0:	40020800 	.word	0x40020800
 8006da4:	40020c00 	.word	0x40020c00
 8006da8:	40021000 	.word	0x40021000
 8006dac:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a8a      	ldr	r2, [pc, #552]	; (8006fe0 <extInt_Config+0x4bc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d107      	bne.n	8006dcc <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8006dbc:	4b89      	ldr	r3, [pc, #548]	; (8006fe4 <extInt_Config+0x4c0>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4a88      	ldr	r2, [pc, #544]	; (8006fe4 <extInt_Config+0x4c0>)
 8006dc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dc6:	6093      	str	r3, [r2, #8]
					break;
 8006dc8:	f000 bc8e 	b.w	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8006dcc:	bf00      	nop
					break;
 8006dce:	f000 bc8b 	b.w	80076e8 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8006dd2:	4b84      	ldr	r3, [pc, #528]	; (8006fe4 <extInt_Config+0x4c0>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	4a83      	ldr	r2, [pc, #524]	; (8006fe4 <extInt_Config+0x4c0>)
 8006dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ddc:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a80      	ldr	r2, [pc, #512]	; (8006fe8 <extInt_Config+0x4c4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d105      	bne.n	8006df6 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8006dea:	4b7e      	ldr	r3, [pc, #504]	; (8006fe4 <extInt_Config+0x4c0>)
 8006dec:	4a7d      	ldr	r2, [pc, #500]	; (8006fe4 <extInt_Config+0x4c0>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006df2:	f000 bc79 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a7b      	ldr	r2, [pc, #492]	; (8006fec <extInt_Config+0x4c8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d107      	bne.n	8006e12 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8006e02:	4b78      	ldr	r3, [pc, #480]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4a77      	ldr	r2, [pc, #476]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e0c:	6093      	str	r3, [r2, #8]
					break;
 8006e0e:	f000 bc6b 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a75      	ldr	r2, [pc, #468]	; (8006ff0 <extInt_Config+0x4cc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d107      	bne.n	8006e2e <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8006e1e:	4b71      	ldr	r3, [pc, #452]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	4a70      	ldr	r2, [pc, #448]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e28:	6093      	str	r3, [r2, #8]
					break;
 8006e2a:	f000 bc5d 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a6f      	ldr	r2, [pc, #444]	; (8006ff4 <extInt_Config+0x4d0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d107      	bne.n	8006e4a <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4a69      	ldr	r2, [pc, #420]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e40:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006e44:	6093      	str	r3, [r2, #8]
					break;
 8006e46:	f000 bc4f 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a69      	ldr	r2, [pc, #420]	; (8006ff8 <extInt_Config+0x4d4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d107      	bne.n	8006e66 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8006e56:	4b63      	ldr	r3, [pc, #396]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	4a62      	ldr	r2, [pc, #392]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e60:	6093      	str	r3, [r2, #8]
					break;
 8006e62:	f000 bc41 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5c      	ldr	r2, [pc, #368]	; (8006fe0 <extInt_Config+0x4bc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d107      	bne.n	8006e82 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8006e72:	4b5c      	ldr	r3, [pc, #368]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	4a5b      	ldr	r2, [pc, #364]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e78:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006e7c:	6093      	str	r3, [r2, #8]
					break;
 8006e7e:	f000 bc33 	b.w	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8006e82:	bf00      	nop
					break;
 8006e84:	f000 bc30 	b.w	80076e8 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8006e88:	4b56      	ldr	r3, [pc, #344]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a55      	ldr	r2, [pc, #340]	; (8006fe4 <extInt_Config+0x4c0>)
 8006e8e:	f023 030f 	bic.w	r3, r3, #15
 8006e92:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a53      	ldr	r2, [pc, #332]	; (8006fe8 <extInt_Config+0x4c4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d105      	bne.n	8006eac <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8006ea0:	4b50      	ldr	r3, [pc, #320]	; (8006fe4 <extInt_Config+0x4c0>)
 8006ea2:	4a50      	ldr	r2, [pc, #320]	; (8006fe4 <extInt_Config+0x4c0>)
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006ea8:	f000 bc1e 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a4e      	ldr	r2, [pc, #312]	; (8006fec <extInt_Config+0x4c8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d107      	bne.n	8006ec8 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8006eb8:	4b4a      	ldr	r3, [pc, #296]	; (8006fe4 <extInt_Config+0x4c0>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	4a49      	ldr	r2, [pc, #292]	; (8006fe4 <extInt_Config+0x4c0>)
 8006ebe:	f043 0301 	orr.w	r3, r3, #1
 8006ec2:	60d3      	str	r3, [r2, #12]
					break;
 8006ec4:	f000 bc10 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a48      	ldr	r2, [pc, #288]	; (8006ff0 <extInt_Config+0x4cc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d107      	bne.n	8006ee4 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8006ed4:	4b43      	ldr	r3, [pc, #268]	; (8006fe4 <extInt_Config+0x4c0>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4a42      	ldr	r2, [pc, #264]	; (8006fe4 <extInt_Config+0x4c0>)
 8006eda:	f043 0302 	orr.w	r3, r3, #2
 8006ede:	60d3      	str	r3, [r2, #12]
					break;
 8006ee0:	f000 bc02 	b.w	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a42      	ldr	r2, [pc, #264]	; (8006ff4 <extInt_Config+0x4d0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d106      	bne.n	8006efe <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8006ef0:	4b3c      	ldr	r3, [pc, #240]	; (8006fe4 <extInt_Config+0x4c0>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4a3b      	ldr	r2, [pc, #236]	; (8006fe4 <extInt_Config+0x4c0>)
 8006ef6:	f043 0303 	orr.w	r3, r3, #3
 8006efa:	60d3      	str	r3, [r2, #12]
					break;
 8006efc:	e3f4      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a3c      	ldr	r2, [pc, #240]	; (8006ff8 <extInt_Config+0x4d4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d106      	bne.n	8006f18 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8006f0a:	4b36      	ldr	r3, [pc, #216]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	4a35      	ldr	r2, [pc, #212]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f10:	f043 0304 	orr.w	r3, r3, #4
 8006f14:	60d3      	str	r3, [r2, #12]
					break;
 8006f16:	e3e7      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a30      	ldr	r2, [pc, #192]	; (8006fe0 <extInt_Config+0x4bc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d106      	bne.n	8006f32 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8006f24:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4a2e      	ldr	r2, [pc, #184]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f2a:	f043 0307 	orr.w	r3, r3, #7
 8006f2e:	60d3      	str	r3, [r2, #12]
					break;
 8006f30:	e3da      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8006f32:	bf00      	nop
					break;
 8006f34:	e3d8      	b.n	80076e8 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8006f36:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	4a2a      	ldr	r2, [pc, #168]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f40:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <extInt_Config+0x4c4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d104      	bne.n	8006f58 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8006f4e:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f50:	4a24      	ldr	r2, [pc, #144]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006f56:	e3c7      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a23      	ldr	r2, [pc, #140]	; (8006fec <extInt_Config+0x4c8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d106      	bne.n	8006f72 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006f64:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a1e      	ldr	r2, [pc, #120]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f6a:	f043 0310 	orr.w	r3, r3, #16
 8006f6e:	60d3      	str	r3, [r2, #12]
					break;
 8006f70:	e3ba      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1d      	ldr	r2, [pc, #116]	; (8006ff0 <extInt_Config+0x4cc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d106      	bne.n	8006f8c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8006f7e:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f84:	f043 0320 	orr.w	r3, r3, #32
 8006f88:	60d3      	str	r3, [r2, #12]
					break;
 8006f8a:	e3ad      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <extInt_Config+0x4d0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d106      	bne.n	8006fa6 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8006f98:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <extInt_Config+0x4c0>)
 8006f9e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006fa2:	60d3      	str	r3, [r2, #12]
					break;
 8006fa4:	e3a0      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <extInt_Config+0x4d4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d106      	bne.n	8006fc0 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <extInt_Config+0x4c0>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	4a0b      	ldr	r2, [pc, #44]	; (8006fe4 <extInt_Config+0x4c0>)
 8006fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fbc:	60d3      	str	r3, [r2, #12]
					break;
 8006fbe:	e393      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <extInt_Config+0x4bc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d106      	bne.n	8006fda <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <extInt_Config+0x4c0>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <extInt_Config+0x4c0>)
 8006fd2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006fd6:	60d3      	str	r3, [r2, #12]
					break;
 8006fd8:	e386      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8006fda:	bf00      	nop
					break;
 8006fdc:	e384      	b.n	80076e8 <extInt_Config+0xbc4>
 8006fde:	bf00      	nop
 8006fe0:	40021c00 	.word	0x40021c00
 8006fe4:	40013800 	.word	0x40013800
 8006fe8:	40020000 	.word	0x40020000
 8006fec:	40020400 	.word	0x40020400
 8006ff0:	40020800 	.word	0x40020800
 8006ff4:	40020c00 	.word	0x40020c00
 8006ff8:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8006ffc:	4b86      	ldr	r3, [pc, #536]	; (8007218 <extInt_Config+0x6f4>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	4a85      	ldr	r2, [pc, #532]	; (8007218 <extInt_Config+0x6f4>)
 8007002:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007006:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a83      	ldr	r2, [pc, #524]	; (800721c <extInt_Config+0x6f8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d104      	bne.n	800701e <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8007014:	4b80      	ldr	r3, [pc, #512]	; (8007218 <extInt_Config+0x6f4>)
 8007016:	4a80      	ldr	r2, [pc, #512]	; (8007218 <extInt_Config+0x6f4>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800701c:	e364      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a7e      	ldr	r2, [pc, #504]	; (8007220 <extInt_Config+0x6fc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d106      	bne.n	8007038 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800702a:	4b7b      	ldr	r3, [pc, #492]	; (8007218 <extInt_Config+0x6f4>)
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	4a7a      	ldr	r2, [pc, #488]	; (8007218 <extInt_Config+0x6f4>)
 8007030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007034:	60d3      	str	r3, [r2, #12]
					break;
 8007036:	e357      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a79      	ldr	r2, [pc, #484]	; (8007224 <extInt_Config+0x700>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d106      	bne.n	8007052 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8007044:	4b74      	ldr	r3, [pc, #464]	; (8007218 <extInt_Config+0x6f4>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	4a73      	ldr	r2, [pc, #460]	; (8007218 <extInt_Config+0x6f4>)
 800704a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800704e:	60d3      	str	r3, [r2, #12]
					break;
 8007050:	e34a      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a73      	ldr	r2, [pc, #460]	; (8007228 <extInt_Config+0x704>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d106      	bne.n	800706c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800705e:	4b6e      	ldr	r3, [pc, #440]	; (8007218 <extInt_Config+0x6f4>)
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	4a6d      	ldr	r2, [pc, #436]	; (8007218 <extInt_Config+0x6f4>)
 8007064:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007068:	60d3      	str	r3, [r2, #12]
					break;
 800706a:	e33d      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6e      	ldr	r2, [pc, #440]	; (800722c <extInt_Config+0x708>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d106      	bne.n	8007086 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8007078:	4b67      	ldr	r3, [pc, #412]	; (8007218 <extInt_Config+0x6f4>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a66      	ldr	r2, [pc, #408]	; (8007218 <extInt_Config+0x6f4>)
 800707e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007082:	60d3      	str	r3, [r2, #12]
					break;
 8007084:	e330      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a68      	ldr	r2, [pc, #416]	; (8007230 <extInt_Config+0x70c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d106      	bne.n	80070a0 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8007092:	4b61      	ldr	r3, [pc, #388]	; (8007218 <extInt_Config+0x6f4>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	4a60      	ldr	r2, [pc, #384]	; (8007218 <extInt_Config+0x6f4>)
 8007098:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800709c:	60d3      	str	r3, [r2, #12]
					break;
 800709e:	e323      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 80070a0:	bf00      	nop
					break;
 80070a2:	e321      	b.n	80076e8 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80070a4:	4b5c      	ldr	r3, [pc, #368]	; (8007218 <extInt_Config+0x6f4>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4a5b      	ldr	r2, [pc, #364]	; (8007218 <extInt_Config+0x6f4>)
 80070aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ae:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a59      	ldr	r2, [pc, #356]	; (800721c <extInt_Config+0x6f8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d104      	bne.n	80070c6 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80070bc:	4b56      	ldr	r3, [pc, #344]	; (8007218 <extInt_Config+0x6f4>)
 80070be:	4a56      	ldr	r2, [pc, #344]	; (8007218 <extInt_Config+0x6f4>)
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80070c4:	e310      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a54      	ldr	r2, [pc, #336]	; (8007220 <extInt_Config+0x6fc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d106      	bne.n	80070e0 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80070d2:	4b51      	ldr	r3, [pc, #324]	; (8007218 <extInt_Config+0x6f4>)
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	4a50      	ldr	r2, [pc, #320]	; (8007218 <extInt_Config+0x6f4>)
 80070d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070dc:	60d3      	str	r3, [r2, #12]
					break;
 80070de:	e303      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a4f      	ldr	r2, [pc, #316]	; (8007224 <extInt_Config+0x700>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d106      	bne.n	80070fa <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80070ec:	4b4a      	ldr	r3, [pc, #296]	; (8007218 <extInt_Config+0x6f4>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4a49      	ldr	r2, [pc, #292]	; (8007218 <extInt_Config+0x6f4>)
 80070f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070f6:	60d3      	str	r3, [r2, #12]
					break;
 80070f8:	e2f6      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a49      	ldr	r2, [pc, #292]	; (8007228 <extInt_Config+0x704>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d106      	bne.n	8007114 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8007106:	4b44      	ldr	r3, [pc, #272]	; (8007218 <extInt_Config+0x6f4>)
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	4a43      	ldr	r2, [pc, #268]	; (8007218 <extInt_Config+0x6f4>)
 800710c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007110:	60d3      	str	r3, [r2, #12]
					break;
 8007112:	e2e9      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a44      	ldr	r2, [pc, #272]	; (800722c <extInt_Config+0x708>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d106      	bne.n	800712e <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8007120:	4b3d      	ldr	r3, [pc, #244]	; (8007218 <extInt_Config+0x6f4>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4a3c      	ldr	r2, [pc, #240]	; (8007218 <extInt_Config+0x6f4>)
 8007126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800712a:	60d3      	str	r3, [r2, #12]
					break;
 800712c:	e2dc      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a3e      	ldr	r2, [pc, #248]	; (8007230 <extInt_Config+0x70c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d106      	bne.n	8007148 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800713a:	4b37      	ldr	r3, [pc, #220]	; (8007218 <extInt_Config+0x6f4>)
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	4a36      	ldr	r2, [pc, #216]	; (8007218 <extInt_Config+0x6f4>)
 8007140:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8007144:	60d3      	str	r3, [r2, #12]
					break;
 8007146:	e2cf      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8007148:	bf00      	nop
					break;
 800714a:	e2cd      	b.n	80076e8 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 800714c:	4b32      	ldr	r3, [pc, #200]	; (8007218 <extInt_Config+0x6f4>)
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	4a31      	ldr	r2, [pc, #196]	; (8007218 <extInt_Config+0x6f4>)
 8007152:	f023 030f 	bic.w	r3, r3, #15
 8007156:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2f      	ldr	r2, [pc, #188]	; (800721c <extInt_Config+0x6f8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d104      	bne.n	800716e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8007164:	4b2c      	ldr	r3, [pc, #176]	; (8007218 <extInt_Config+0x6f4>)
 8007166:	4a2c      	ldr	r2, [pc, #176]	; (8007218 <extInt_Config+0x6f4>)
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800716c:	e2bc      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2a      	ldr	r2, [pc, #168]	; (8007220 <extInt_Config+0x6fc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d106      	bne.n	8007188 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800717a:	4b27      	ldr	r3, [pc, #156]	; (8007218 <extInt_Config+0x6f4>)
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <extInt_Config+0x6f4>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	6113      	str	r3, [r2, #16]
					break;
 8007186:	e2af      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a25      	ldr	r2, [pc, #148]	; (8007224 <extInt_Config+0x700>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d106      	bne.n	80071a2 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8007194:	4b20      	ldr	r3, [pc, #128]	; (8007218 <extInt_Config+0x6f4>)
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <extInt_Config+0x6f4>)
 800719a:	f043 0302 	orr.w	r3, r3, #2
 800719e:	6113      	str	r3, [r2, #16]
					break;
 80071a0:	e2a2      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <extInt_Config+0x704>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d106      	bne.n	80071bc <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80071ae:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <extInt_Config+0x6f4>)
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	4a19      	ldr	r2, [pc, #100]	; (8007218 <extInt_Config+0x6f4>)
 80071b4:	f043 0303 	orr.w	r3, r3, #3
 80071b8:	6113      	str	r3, [r2, #16]
					break;
 80071ba:	e295      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1a      	ldr	r2, [pc, #104]	; (800722c <extInt_Config+0x708>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d106      	bne.n	80071d6 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80071c8:	4b13      	ldr	r3, [pc, #76]	; (8007218 <extInt_Config+0x6f4>)
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	4a12      	ldr	r2, [pc, #72]	; (8007218 <extInt_Config+0x6f4>)
 80071ce:	f043 0304 	orr.w	r3, r3, #4
 80071d2:	6113      	str	r3, [r2, #16]
					break;
 80071d4:	e288      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a14      	ldr	r2, [pc, #80]	; (8007230 <extInt_Config+0x70c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d106      	bne.n	80071f0 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <extInt_Config+0x6f4>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4a0c      	ldr	r2, [pc, #48]	; (8007218 <extInt_Config+0x6f4>)
 80071e8:	f043 0307 	orr.w	r3, r3, #7
 80071ec:	6113      	str	r3, [r2, #16]
					break;
 80071ee:	e27b      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 80071f0:	bf00      	nop
					break;
 80071f2:	e279      	b.n	80076e8 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 80071f4:	4b08      	ldr	r3, [pc, #32]	; (8007218 <extInt_Config+0x6f4>)
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	4a07      	ldr	r2, [pc, #28]	; (8007218 <extInt_Config+0x6f4>)
 80071fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071fe:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a05      	ldr	r2, [pc, #20]	; (800721c <extInt_Config+0x6f8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d113      	bne.n	8007234 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <extInt_Config+0x6f4>)
 800720e:	4a02      	ldr	r2, [pc, #8]	; (8007218 <extInt_Config+0x6f4>)
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8007214:	e268      	b.n	80076e8 <extInt_Config+0xbc4>
 8007216:	bf00      	nop
 8007218:	40013800 	.word	0x40013800
 800721c:	40020000 	.word	0x40020000
 8007220:	40020400 	.word	0x40020400
 8007224:	40020800 	.word	0x40020800
 8007228:	40020c00 	.word	0x40020c00
 800722c:	40021000 	.word	0x40021000
 8007230:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a83      	ldr	r2, [pc, #524]	; (8007448 <extInt_Config+0x924>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d106      	bne.n	800724e <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8007240:	4b82      	ldr	r3, [pc, #520]	; (800744c <extInt_Config+0x928>)
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	4a81      	ldr	r2, [pc, #516]	; (800744c <extInt_Config+0x928>)
 8007246:	f043 0310 	orr.w	r3, r3, #16
 800724a:	6113      	str	r3, [r2, #16]
					break;
 800724c:	e24c      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7e      	ldr	r2, [pc, #504]	; (8007450 <extInt_Config+0x92c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d106      	bne.n	8007268 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800725a:	4b7c      	ldr	r3, [pc, #496]	; (800744c <extInt_Config+0x928>)
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	4a7b      	ldr	r2, [pc, #492]	; (800744c <extInt_Config+0x928>)
 8007260:	f043 0320 	orr.w	r3, r3, #32
 8007264:	6113      	str	r3, [r2, #16]
					break;
 8007266:	e23f      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a79      	ldr	r2, [pc, #484]	; (8007454 <extInt_Config+0x930>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d106      	bne.n	8007282 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8007274:	4b75      	ldr	r3, [pc, #468]	; (800744c <extInt_Config+0x928>)
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	4a74      	ldr	r2, [pc, #464]	; (800744c <extInt_Config+0x928>)
 800727a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800727e:	6113      	str	r3, [r2, #16]
					break;
 8007280:	e232      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a73      	ldr	r2, [pc, #460]	; (8007458 <extInt_Config+0x934>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d106      	bne.n	800729c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800728e:	4b6f      	ldr	r3, [pc, #444]	; (800744c <extInt_Config+0x928>)
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	4a6e      	ldr	r2, [pc, #440]	; (800744c <extInt_Config+0x928>)
 8007294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007298:	6113      	str	r3, [r2, #16]
					break;
 800729a:	e225      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a6e      	ldr	r2, [pc, #440]	; (800745c <extInt_Config+0x938>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d106      	bne.n	80072b6 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80072a8:	4b68      	ldr	r3, [pc, #416]	; (800744c <extInt_Config+0x928>)
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	4a67      	ldr	r2, [pc, #412]	; (800744c <extInt_Config+0x928>)
 80072ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80072b2:	6113      	str	r3, [r2, #16]
					break;
 80072b4:	e218      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 80072b6:	bf00      	nop
					break;
 80072b8:	e216      	b.n	80076e8 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80072ba:	4b64      	ldr	r3, [pc, #400]	; (800744c <extInt_Config+0x928>)
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	4a63      	ldr	r2, [pc, #396]	; (800744c <extInt_Config+0x928>)
 80072c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072c4:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a64      	ldr	r2, [pc, #400]	; (8007460 <extInt_Config+0x93c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d104      	bne.n	80072dc <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80072d2:	4b5e      	ldr	r3, [pc, #376]	; (800744c <extInt_Config+0x928>)
 80072d4:	4a5d      	ldr	r2, [pc, #372]	; (800744c <extInt_Config+0x928>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80072da:	e205      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a59      	ldr	r2, [pc, #356]	; (8007448 <extInt_Config+0x924>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d106      	bne.n	80072f6 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80072e8:	4b58      	ldr	r3, [pc, #352]	; (800744c <extInt_Config+0x928>)
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	4a57      	ldr	r2, [pc, #348]	; (800744c <extInt_Config+0x928>)
 80072ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f2:	6113      	str	r3, [r2, #16]
					break;
 80072f4:	e1f8      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a54      	ldr	r2, [pc, #336]	; (8007450 <extInt_Config+0x92c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d106      	bne.n	8007310 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8007302:	4b52      	ldr	r3, [pc, #328]	; (800744c <extInt_Config+0x928>)
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	4a51      	ldr	r2, [pc, #324]	; (800744c <extInt_Config+0x928>)
 8007308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800730c:	6113      	str	r3, [r2, #16]
					break;
 800730e:	e1eb      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a4f      	ldr	r2, [pc, #316]	; (8007454 <extInt_Config+0x930>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d106      	bne.n	800732a <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800731c:	4b4b      	ldr	r3, [pc, #300]	; (800744c <extInt_Config+0x928>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	4a4a      	ldr	r2, [pc, #296]	; (800744c <extInt_Config+0x928>)
 8007322:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007326:	6113      	str	r3, [r2, #16]
					break;
 8007328:	e1de      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a49      	ldr	r2, [pc, #292]	; (8007458 <extInt_Config+0x934>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d106      	bne.n	8007344 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8007336:	4b45      	ldr	r3, [pc, #276]	; (800744c <extInt_Config+0x928>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	4a44      	ldr	r2, [pc, #272]	; (800744c <extInt_Config+0x928>)
 800733c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007340:	6113      	str	r3, [r2, #16]
					break;
 8007342:	e1d1      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a44      	ldr	r2, [pc, #272]	; (800745c <extInt_Config+0x938>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d106      	bne.n	800735e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8007350:	4b3e      	ldr	r3, [pc, #248]	; (800744c <extInt_Config+0x928>)
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	4a3d      	ldr	r2, [pc, #244]	; (800744c <extInt_Config+0x928>)
 8007356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800735a:	6113      	str	r3, [r2, #16]
					break;
 800735c:	e1c4      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 800735e:	bf00      	nop
					break;
 8007360:	e1c2      	b.n	80076e8 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8007362:	4b3a      	ldr	r3, [pc, #232]	; (800744c <extInt_Config+0x928>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	4a39      	ldr	r2, [pc, #228]	; (800744c <extInt_Config+0x928>)
 8007368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a3a      	ldr	r2, [pc, #232]	; (8007460 <extInt_Config+0x93c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d104      	bne.n	8007384 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800737a:	4b34      	ldr	r3, [pc, #208]	; (800744c <extInt_Config+0x928>)
 800737c:	4a33      	ldr	r2, [pc, #204]	; (800744c <extInt_Config+0x928>)
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8007382:	e1b1      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2f      	ldr	r2, [pc, #188]	; (8007448 <extInt_Config+0x924>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d106      	bne.n	800739e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8007390:	4b2e      	ldr	r3, [pc, #184]	; (800744c <extInt_Config+0x928>)
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	4a2d      	ldr	r2, [pc, #180]	; (800744c <extInt_Config+0x928>)
 8007396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800739a:	6113      	str	r3, [r2, #16]
					break;
 800739c:	e1a4      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2a      	ldr	r2, [pc, #168]	; (8007450 <extInt_Config+0x92c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d106      	bne.n	80073b8 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80073aa:	4b28      	ldr	r3, [pc, #160]	; (800744c <extInt_Config+0x928>)
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	4a27      	ldr	r2, [pc, #156]	; (800744c <extInt_Config+0x928>)
 80073b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073b4:	6113      	str	r3, [r2, #16]
					break;
 80073b6:	e197      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a25      	ldr	r2, [pc, #148]	; (8007454 <extInt_Config+0x930>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d106      	bne.n	80073d2 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80073c4:	4b21      	ldr	r3, [pc, #132]	; (800744c <extInt_Config+0x928>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	4a20      	ldr	r2, [pc, #128]	; (800744c <extInt_Config+0x928>)
 80073ca:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80073ce:	6113      	str	r3, [r2, #16]
					break;
 80073d0:	e18a      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1f      	ldr	r2, [pc, #124]	; (8007458 <extInt_Config+0x934>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d106      	bne.n	80073ec <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80073de:	4b1b      	ldr	r3, [pc, #108]	; (800744c <extInt_Config+0x928>)
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	4a1a      	ldr	r2, [pc, #104]	; (800744c <extInt_Config+0x928>)
 80073e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073e8:	6113      	str	r3, [r2, #16]
					break;
 80073ea:	e17d      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1a      	ldr	r2, [pc, #104]	; (800745c <extInt_Config+0x938>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d106      	bne.n	8007406 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <extInt_Config+0x928>)
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	4a13      	ldr	r2, [pc, #76]	; (800744c <extInt_Config+0x928>)
 80073fe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8007402:	6113      	str	r3, [r2, #16]
					break;
 8007404:	e170      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 8007406:	bf00      	nop
					break;
 8007408:	e16e      	b.n	80076e8 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <extInt_Config+0x928>)
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	4a0f      	ldr	r2, [pc, #60]	; (800744c <extInt_Config+0x928>)
 8007410:	f023 030f 	bic.w	r3, r3, #15
 8007414:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a10      	ldr	r2, [pc, #64]	; (8007460 <extInt_Config+0x93c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d104      	bne.n	800742c <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <extInt_Config+0x928>)
 8007424:	4a09      	ldr	r2, [pc, #36]	; (800744c <extInt_Config+0x928>)
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800742a:	e15d      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a05      	ldr	r2, [pc, #20]	; (8007448 <extInt_Config+0x924>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d115      	bne.n	8007464 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8007438:	4b04      	ldr	r3, [pc, #16]	; (800744c <extInt_Config+0x928>)
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	4a03      	ldr	r2, [pc, #12]	; (800744c <extInt_Config+0x928>)
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	6153      	str	r3, [r2, #20]
					break;
 8007444:	e150      	b.n	80076e8 <extInt_Config+0xbc4>
 8007446:	bf00      	nop
 8007448:	40020400 	.word	0x40020400
 800744c:	40013800 	.word	0x40013800
 8007450:	40020800 	.word	0x40020800
 8007454:	40020c00 	.word	0x40020c00
 8007458:	40021000 	.word	0x40021000
 800745c:	40021c00 	.word	0x40021c00
 8007460:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a89      	ldr	r2, [pc, #548]	; (8007690 <extInt_Config+0xb6c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d106      	bne.n	800747e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8007470:	4b88      	ldr	r3, [pc, #544]	; (8007694 <extInt_Config+0xb70>)
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	4a87      	ldr	r2, [pc, #540]	; (8007694 <extInt_Config+0xb70>)
 8007476:	f043 0302 	orr.w	r3, r3, #2
 800747a:	6153      	str	r3, [r2, #20]
					break;
 800747c:	e134      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a84      	ldr	r2, [pc, #528]	; (8007698 <extInt_Config+0xb74>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d106      	bne.n	8007498 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800748a:	4b82      	ldr	r3, [pc, #520]	; (8007694 <extInt_Config+0xb70>)
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	4a81      	ldr	r2, [pc, #516]	; (8007694 <extInt_Config+0xb70>)
 8007490:	f043 0303 	orr.w	r3, r3, #3
 8007494:	6153      	str	r3, [r2, #20]
					break;
 8007496:	e127      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a7f      	ldr	r2, [pc, #508]	; (800769c <extInt_Config+0xb78>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d106      	bne.n	80074b2 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80074a4:	4b7b      	ldr	r3, [pc, #492]	; (8007694 <extInt_Config+0xb70>)
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	4a7a      	ldr	r2, [pc, #488]	; (8007694 <extInt_Config+0xb70>)
 80074aa:	f043 0304 	orr.w	r3, r3, #4
 80074ae:	6153      	str	r3, [r2, #20]
					break;
 80074b0:	e11a      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a79      	ldr	r2, [pc, #484]	; (80076a0 <extInt_Config+0xb7c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d106      	bne.n	80074cc <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80074be:	4b75      	ldr	r3, [pc, #468]	; (8007694 <extInt_Config+0xb70>)
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	4a74      	ldr	r2, [pc, #464]	; (8007694 <extInt_Config+0xb70>)
 80074c4:	f043 0307 	orr.w	r3, r3, #7
 80074c8:	6153      	str	r3, [r2, #20]
					break;
 80074ca:	e10d      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 80074cc:	bf00      	nop
					break;
 80074ce:	e10b      	b.n	80076e8 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 80074d0:	4b70      	ldr	r3, [pc, #448]	; (8007694 <extInt_Config+0xb70>)
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	4a6f      	ldr	r2, [pc, #444]	; (8007694 <extInt_Config+0xb70>)
 80074d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074da:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a70      	ldr	r2, [pc, #448]	; (80076a4 <extInt_Config+0xb80>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d104      	bne.n	80074f2 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80074e8:	4b6a      	ldr	r3, [pc, #424]	; (8007694 <extInt_Config+0xb70>)
 80074ea:	4a6a      	ldr	r2, [pc, #424]	; (8007694 <extInt_Config+0xb70>)
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	6153      	str	r3, [r2, #20]
 80074f0:	e041      	b.n	8007576 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a6b      	ldr	r2, [pc, #428]	; (80076a8 <extInt_Config+0xb84>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d106      	bne.n	800750c <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80074fe:	4b65      	ldr	r3, [pc, #404]	; (8007694 <extInt_Config+0xb70>)
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	4a64      	ldr	r2, [pc, #400]	; (8007694 <extInt_Config+0xb70>)
 8007504:	f043 0310 	orr.w	r3, r3, #16
 8007508:	6153      	str	r3, [r2, #20]
 800750a:	e034      	b.n	8007576 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a5f      	ldr	r2, [pc, #380]	; (8007690 <extInt_Config+0xb6c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d106      	bne.n	8007526 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8007518:	4b5e      	ldr	r3, [pc, #376]	; (8007694 <extInt_Config+0xb70>)
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	4a5d      	ldr	r2, [pc, #372]	; (8007694 <extInt_Config+0xb70>)
 800751e:	f043 0320 	orr.w	r3, r3, #32
 8007522:	6153      	str	r3, [r2, #20]
 8007524:	e027      	b.n	8007576 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a5a      	ldr	r2, [pc, #360]	; (8007698 <extInt_Config+0xb74>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d106      	bne.n	8007540 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8007532:	4b58      	ldr	r3, [pc, #352]	; (8007694 <extInt_Config+0xb70>)
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	4a57      	ldr	r2, [pc, #348]	; (8007694 <extInt_Config+0xb70>)
 8007538:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800753c:	6153      	str	r3, [r2, #20]
 800753e:	e01a      	b.n	8007576 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a55      	ldr	r2, [pc, #340]	; (800769c <extInt_Config+0xb78>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d106      	bne.n	800755a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800754c:	4b51      	ldr	r3, [pc, #324]	; (8007694 <extInt_Config+0xb70>)
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	4a50      	ldr	r2, [pc, #320]	; (8007694 <extInt_Config+0xb70>)
 8007552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007556:	6153      	str	r3, [r2, #20]
 8007558:	e00d      	b.n	8007576 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a4f      	ldr	r2, [pc, #316]	; (80076a0 <extInt_Config+0xb7c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d106      	bne.n	8007574 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8007566:	4b4b      	ldr	r3, [pc, #300]	; (8007694 <extInt_Config+0xb70>)
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	4a4a      	ldr	r2, [pc, #296]	; (8007694 <extInt_Config+0xb70>)
 800756c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007570:	6153      	str	r3, [r2, #20]
 8007572:	e000      	b.n	8007576 <extInt_Config+0xa52>

					} else {
						__NOP();
 8007574:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8007576:	4b47      	ldr	r3, [pc, #284]	; (8007694 <extInt_Config+0xb70>)
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	4a46      	ldr	r2, [pc, #280]	; (8007694 <extInt_Config+0xb70>)
 800757c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007580:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a46      	ldr	r2, [pc, #280]	; (80076a4 <extInt_Config+0xb80>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d104      	bne.n	8007598 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800758e:	4b41      	ldr	r3, [pc, #260]	; (8007694 <extInt_Config+0xb70>)
 8007590:	4a40      	ldr	r2, [pc, #256]	; (8007694 <extInt_Config+0xb70>)
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8007596:	e0a7      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a42      	ldr	r2, [pc, #264]	; (80076a8 <extInt_Config+0xb84>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d106      	bne.n	80075b2 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80075a4:	4b3b      	ldr	r3, [pc, #236]	; (8007694 <extInt_Config+0xb70>)
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	4a3a      	ldr	r2, [pc, #232]	; (8007694 <extInt_Config+0xb70>)
 80075aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ae:	6153      	str	r3, [r2, #20]
					break;
 80075b0:	e09a      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a35      	ldr	r2, [pc, #212]	; (8007690 <extInt_Config+0xb6c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d106      	bne.n	80075cc <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80075be:	4b35      	ldr	r3, [pc, #212]	; (8007694 <extInt_Config+0xb70>)
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	4a34      	ldr	r2, [pc, #208]	; (8007694 <extInt_Config+0xb70>)
 80075c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075c8:	6153      	str	r3, [r2, #20]
					break;
 80075ca:	e08d      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a31      	ldr	r2, [pc, #196]	; (8007698 <extInt_Config+0xb74>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d106      	bne.n	80075e6 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80075d8:	4b2e      	ldr	r3, [pc, #184]	; (8007694 <extInt_Config+0xb70>)
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4a2d      	ldr	r2, [pc, #180]	; (8007694 <extInt_Config+0xb70>)
 80075de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075e2:	6153      	str	r3, [r2, #20]
					break;
 80075e4:	e080      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a2b      	ldr	r2, [pc, #172]	; (800769c <extInt_Config+0xb78>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d106      	bne.n	8007600 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 80075f2:	4b28      	ldr	r3, [pc, #160]	; (8007694 <extInt_Config+0xb70>)
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	4a27      	ldr	r2, [pc, #156]	; (8007694 <extInt_Config+0xb70>)
 80075f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075fc:	6153      	str	r3, [r2, #20]
					break;
 80075fe:	e073      	b.n	80076e8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a26      	ldr	r2, [pc, #152]	; (80076a0 <extInt_Config+0xb7c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d106      	bne.n	800761a <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800760c:	4b21      	ldr	r3, [pc, #132]	; (8007694 <extInt_Config+0xb70>)
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	4a20      	ldr	r2, [pc, #128]	; (8007694 <extInt_Config+0xb70>)
 8007612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007616:	6153      	str	r3, [r2, #20]
					break;
 8007618:	e066      	b.n	80076e8 <extInt_Config+0xbc4>
						__NOP();
 800761a:	bf00      	nop
					break;
 800761c:	e064      	b.n	80076e8 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800761e:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <extInt_Config+0xb70>)
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <extInt_Config+0xb70>)
 8007624:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007628:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <extInt_Config+0xb80>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d104      	bne.n	8007640 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8007636:	4b17      	ldr	r3, [pc, #92]	; (8007694 <extInt_Config+0xb70>)
 8007638:	4a16      	ldr	r2, [pc, #88]	; (8007694 <extInt_Config+0xb70>)
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800763e:	e053      	b.n	80076e8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <extInt_Config+0xb84>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d106      	bne.n	800765a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800764c:	4b11      	ldr	r3, [pc, #68]	; (8007694 <extInt_Config+0xb70>)
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	4a10      	ldr	r2, [pc, #64]	; (8007694 <extInt_Config+0xb70>)
 8007652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007656:	6153      	str	r3, [r2, #20]
						break;
 8007658:	e046      	b.n	80076e8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0b      	ldr	r2, [pc, #44]	; (8007690 <extInt_Config+0xb6c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d106      	bne.n	8007674 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <extInt_Config+0xb70>)
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	4a0a      	ldr	r2, [pc, #40]	; (8007694 <extInt_Config+0xb70>)
 800766c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007670:	6153      	str	r3, [r2, #20]
						break;
 8007672:	e039      	b.n	80076e8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <extInt_Config+0xb74>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d115      	bne.n	80076ac <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <extInt_Config+0xb70>)
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	4a03      	ldr	r2, [pc, #12]	; (8007694 <extInt_Config+0xb70>)
 8007686:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800768a:	6153      	str	r3, [r2, #20]
						break;
 800768c:	e02c      	b.n	80076e8 <extInt_Config+0xbc4>
 800768e:	bf00      	nop
 8007690:	40020800 	.word	0x40020800
 8007694:	40013800 	.word	0x40013800
 8007698:	40020c00 	.word	0x40020c00
 800769c:	40021000 	.word	0x40021000
 80076a0:	40021c00 	.word	0x40021c00
 80076a4:	40020000 	.word	0x40020000
 80076a8:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a6c      	ldr	r2, [pc, #432]	; (8007864 <extInt_Config+0xd40>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d106      	bne.n	80076c6 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80076b8:	4b6b      	ldr	r3, [pc, #428]	; (8007868 <extInt_Config+0xd44>)
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	4a6a      	ldr	r2, [pc, #424]	; (8007868 <extInt_Config+0xd44>)
 80076be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076c2:	6153      	str	r3, [r2, #20]
						break;
 80076c4:	e010      	b.n	80076e8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a67      	ldr	r2, [pc, #412]	; (800786c <extInt_Config+0xd48>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d106      	bne.n	80076e0 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80076d2:	4b65      	ldr	r3, [pc, #404]	; (8007868 <extInt_Config+0xd44>)
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	4a64      	ldr	r2, [pc, #400]	; (8007868 <extInt_Config+0xd44>)
 80076d8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80076dc:	6153      	str	r3, [r2, #20]
						break;
 80076de:	e003      	b.n	80076e8 <extInt_Config+0xbc4>
							__NOP();
 80076e0:	bf00      	nop
						break;
 80076e2:	e001      	b.n	80076e8 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 80076e4:	bf00      	nop
						break;
 80076e6:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	791b      	ldrb	r3, [r3, #4]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d020      	beq.n	8007732 <extInt_Config+0xc0e>
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	dc37      	bgt.n	8007764 <extInt_Config+0xc40>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <extInt_Config+0xbda>
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d00d      	beq.n	8007718 <extInt_Config+0xbf4>
 80076fc:	e032      	b.n	8007764 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80076fe:	4b5c      	ldr	r3, [pc, #368]	; (8007870 <extInt_Config+0xd4c>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	7912      	ldrb	r2, [r2, #4]
 8007708:	4611      	mov	r1, r2
 800770a:	2201      	movs	r2, #1
 800770c:	408a      	lsls	r2, r1
 800770e:	4611      	mov	r1, r2
 8007710:	4a57      	ldr	r2, [pc, #348]	; (8007870 <extInt_Config+0xd4c>)
 8007712:	430b      	orrs	r3, r1
 8007714:	60d3      	str	r3, [r2, #12]

		break;
 8007716:	e027      	b.n	8007768 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007718:	4b55      	ldr	r3, [pc, #340]	; (8007870 <extInt_Config+0xd4c>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	7912      	ldrb	r2, [r2, #4]
 8007722:	4611      	mov	r1, r2
 8007724:	2201      	movs	r2, #1
 8007726:	408a      	lsls	r2, r1
 8007728:	4611      	mov	r1, r2
 800772a:	4a51      	ldr	r2, [pc, #324]	; (8007870 <extInt_Config+0xd4c>)
 800772c:	430b      	orrs	r3, r1
 800772e:	6093      	str	r3, [r2, #8]

		break;
 8007730:	e01a      	b.n	8007768 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007732:	4b4f      	ldr	r3, [pc, #316]	; (8007870 <extInt_Config+0xd4c>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	7912      	ldrb	r2, [r2, #4]
 800773c:	4611      	mov	r1, r2
 800773e:	2201      	movs	r2, #1
 8007740:	408a      	lsls	r2, r1
 8007742:	4611      	mov	r1, r2
 8007744:	4a4a      	ldr	r2, [pc, #296]	; (8007870 <extInt_Config+0xd4c>)
 8007746:	430b      	orrs	r3, r1
 8007748:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800774a:	4b49      	ldr	r3, [pc, #292]	; (8007870 <extInt_Config+0xd4c>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	7912      	ldrb	r2, [r2, #4]
 8007754:	4611      	mov	r1, r2
 8007756:	2201      	movs	r2, #1
 8007758:	408a      	lsls	r2, r1
 800775a:	4611      	mov	r1, r2
 800775c:	4a44      	ldr	r2, [pc, #272]	; (8007870 <extInt_Config+0xd4c>)
 800775e:	430b      	orrs	r3, r1
 8007760:	6093      	str	r3, [r2, #8]

		break;
 8007762:	e001      	b.n	8007768 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8007764:	bf00      	nop
		break;
 8007766:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007768:	b672      	cpsid	i
}
 800776a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800776c:	4b40      	ldr	r3, [pc, #256]	; (8007870 <extInt_Config+0xd4c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	7912      	ldrb	r2, [r2, #4]
 8007776:	4611      	mov	r1, r2
 8007778:	2201      	movs	r2, #1
 800777a:	408a      	lsls	r2, r1
 800777c:	4611      	mov	r1, r2
 800777e:	4a3c      	ldr	r2, [pc, #240]	; (8007870 <extInt_Config+0xd4c>)
 8007780:	430b      	orrs	r3, r1
 8007782:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	791b      	ldrb	r3, [r3, #4]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d862      	bhi.n	8007854 <extInt_Config+0xd30>
 800778e:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <extInt_Config+0xc70>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077e5 	.word	0x080077e5
 80077a0:	080077ed 	.word	0x080077ed
 80077a4:	080077f5 	.word	0x080077f5
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	08007805 	.word	0x08007805
 80077b0:	0800780d 	.word	0x0800780d
 80077b4:	08007815 	.word	0x08007815
 80077b8:	0800781d 	.word	0x0800781d
 80077bc:	08007825 	.word	0x08007825
 80077c0:	0800782d 	.word	0x0800782d
 80077c4:	08007835 	.word	0x08007835
 80077c8:	0800783d 	.word	0x0800783d
 80077cc:	08007845 	.word	0x08007845
 80077d0:	0800784d 	.word	0x0800784d
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 80077d4:	2006      	movs	r0, #6
 80077d6:	f7ff f95d 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 80077da:	e03d      	b.n	8007858 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 80077dc:	2007      	movs	r0, #7
 80077de:	f7ff f959 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 80077e2:	e039      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 80077e4:	2008      	movs	r0, #8
 80077e6:	f7ff f955 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 80077ea:	e035      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 80077ec:	2009      	movs	r0, #9
 80077ee:	f7ff f951 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 80077f2:	e031      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 80077f4:	200a      	movs	r0, #10
 80077f6:	f7ff f94d 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 80077fa:	e02d      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80077fc:	2017      	movs	r0, #23
 80077fe:	f7ff f949 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 8007802:	e029      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007804:	2017      	movs	r0, #23
 8007806:	f7ff f945 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 800780a:	e025      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800780c:	2017      	movs	r0, #23
 800780e:	f7ff f941 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 8007812:	e021      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007814:	2017      	movs	r0, #23
 8007816:	f7ff f93d 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 800781a:	e01d      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800781c:	2017      	movs	r0, #23
 800781e:	f7ff f939 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 8007822:	e019      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007824:	2028      	movs	r0, #40	; 0x28
 8007826:	f7ff f935 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 800782a:	e015      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800782c:	2028      	movs	r0, #40	; 0x28
 800782e:	f7ff f931 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 8007832:	e011      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007834:	2028      	movs	r0, #40	; 0x28
 8007836:	f7ff f92d 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 800783a:	e00d      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800783c:	2028      	movs	r0, #40	; 0x28
 800783e:	f7ff f929 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 8007842:	e009      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007844:	2028      	movs	r0, #40	; 0x28
 8007846:	f7ff f925 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 800784a:	e005      	b.n	8007858 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800784c:	2028      	movs	r0, #40	; 0x28
 800784e:	f7ff f921 	bl	8006a94 <__NVIC_EnableIRQ>
			break;
 8007852:	e001      	b.n	8007858 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8007854:	bf00      	nop
			break;
 8007856:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007858:	b662      	cpsie	i
}
 800785a:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40021000 	.word	0x40021000
 8007868:	40013800 	.word	0x40013800
 800786c:	40021c00 	.word	0x40021c00
 8007870:	40013c00 	.word	0x40013c00

08007874 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8007880:	b672      	cpsid	i
}
 8007882:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	791b      	ldrb	r3, [r3, #4]
 800788a:	2b0f      	cmp	r3, #15
 800788c:	f200 8084 	bhi.w	8007998 <exti_Set_Priority+0x124>
 8007890:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <exti_Set_Priority+0x24>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078e5 	.word	0x080078e5
 80078a0:	080078f1 	.word	0x080078f1
 80078a4:	080078fd 	.word	0x080078fd
 80078a8:	08007909 	.word	0x08007909
 80078ac:	08007915 	.word	0x08007915
 80078b0:	08007921 	.word	0x08007921
 80078b4:	0800792d 	.word	0x0800792d
 80078b8:	08007939 	.word	0x08007939
 80078bc:	08007945 	.word	0x08007945
 80078c0:	08007951 	.word	0x08007951
 80078c4:	0800795d 	.word	0x0800795d
 80078c8:	08007969 	.word	0x08007969
 80078cc:	08007975 	.word	0x08007975
 80078d0:	08007981 	.word	0x08007981
 80078d4:	0800798d 	.word	0x0800798d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	4619      	mov	r1, r3
 80078dc:	2006      	movs	r0, #6
 80078de:	f7ff f8f7 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 80078e2:	e05b      	b.n	800799c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	4619      	mov	r1, r3
 80078e8:	2007      	movs	r0, #7
 80078ea:	f7ff f8f1 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 80078ee:	e055      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	4619      	mov	r1, r3
 80078f4:	2008      	movs	r0, #8
 80078f6:	f7ff f8eb 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 80078fa:	e04f      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	4619      	mov	r1, r3
 8007900:	2009      	movs	r0, #9
 8007902:	f7ff f8e5 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 8007906:	e049      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	4619      	mov	r1, r3
 800790c:	200a      	movs	r0, #10
 800790e:	f7ff f8df 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 8007912:	e043      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	4619      	mov	r1, r3
 8007918:	2017      	movs	r0, #23
 800791a:	f7ff f8d9 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 800791e:	e03d      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	4619      	mov	r1, r3
 8007924:	2017      	movs	r0, #23
 8007926:	f7ff f8d3 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 800792a:	e037      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	4619      	mov	r1, r3
 8007930:	2017      	movs	r0, #23
 8007932:	f7ff f8cd 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 8007936:	e031      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	4619      	mov	r1, r3
 800793c:	2017      	movs	r0, #23
 800793e:	f7ff f8c7 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 8007942:	e02b      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	4619      	mov	r1, r3
 8007948:	2017      	movs	r0, #23
 800794a:	f7ff f8c1 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 800794e:	e025      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	4619      	mov	r1, r3
 8007954:	2028      	movs	r0, #40	; 0x28
 8007956:	f7ff f8bb 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 800795a:	e01f      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	4619      	mov	r1, r3
 8007960:	2028      	movs	r0, #40	; 0x28
 8007962:	f7ff f8b5 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 8007966:	e019      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	4619      	mov	r1, r3
 800796c:	2028      	movs	r0, #40	; 0x28
 800796e:	f7ff f8af 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 8007972:	e013      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	4619      	mov	r1, r3
 8007978:	2028      	movs	r0, #40	; 0x28
 800797a:	f7ff f8a9 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 800797e:	e00d      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	4619      	mov	r1, r3
 8007984:	2028      	movs	r0, #40	; 0x28
 8007986:	f7ff f8a3 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 800798a:	e007      	b.n	800799c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	4619      	mov	r1, r3
 8007990:	2028      	movs	r0, #40	; 0x28
 8007992:	f7ff f89d 	bl	8006ad0 <__NVIC_SetPriority>
				break;
 8007996:	e001      	b.n	800799c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 8007998:	bf00      	nop
				break;
 800799a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800799c:	b662      	cpsie	i
}
 800799e:	bf00      	nop

		}

	__enable_irq();

}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
	__NOP();
 80079ac:	bf00      	nop
}
 80079ae:	bf00      	nop
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
	__NOP();
 80079bc:	bf00      	nop
}
 80079be:	bf00      	nop
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
	__NOP();
 80079cc:	bf00      	nop
}
 80079ce:	bf00      	nop
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	__NOP();
 80079dc:	bf00      	nop
}
 80079de:	bf00      	nop
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
	__NOP();
 80079ec:	bf00      	nop
}
 80079ee:	bf00      	nop
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	__NOP();
 80079fc:	bf00      	nop
}
 80079fe:	bf00      	nop
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
	__NOP();
 8007a0c:	bf00      	nop
}
 8007a0e:	bf00      	nop
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
	__NOP();
 8007a1c:	bf00      	nop
}
 8007a1e:	bf00      	nop
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
	__NOP();
 8007a2c:	bf00      	nop
}
 8007a2e:	bf00      	nop
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
	__NOP();
 8007a3c:	bf00      	nop
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
	__NOP();
 8007a4c:	bf00      	nop
}
 8007a4e:	bf00      	nop
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
	__NOP();
 8007a5c:	bf00      	nop
}
 8007a5e:	bf00      	nop
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
	__NOP();
 8007a6c:	bf00      	nop
}
 8007a6e:	bf00      	nop
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	__NOP();
 8007a7c:	bf00      	nop
}
 8007a7e:	bf00      	nop
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <EXTI0_IRQHandler+0x24>)
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8007a98:	4b04      	ldr	r3, [pc, #16]	; (8007aac <EXTI0_IRQHandler+0x24>)
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	4a03      	ldr	r2, [pc, #12]	; (8007aac <EXTI0_IRQHandler+0x24>)
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8007aa4:	f7ff ff80 	bl	80079a8 <callback_extInt0>
	}
}
 8007aa8:	bf00      	nop
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40013c00 	.word	0x40013c00

08007ab0 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <EXTI1_IRQHandler+0x24>)
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <EXTI1_IRQHandler+0x24>)
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	4a03      	ldr	r2, [pc, #12]	; (8007ad4 <EXTI1_IRQHandler+0x24>)
 8007ac6:	f043 0302 	orr.w	r3, r3, #2
 8007aca:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8007acc:	f7fa f810 	bl	8001af0 <callback_extInt1>
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40013c00 	.word	0x40013c00

08007ad8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8007adc:	4b07      	ldr	r3, [pc, #28]	; (8007afc <EXTI2_IRQHandler+0x24>)
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d007      	beq.n	8007af8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <EXTI2_IRQHandler+0x24>)
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	4a03      	ldr	r2, [pc, #12]	; (8007afc <EXTI2_IRQHandler+0x24>)
 8007aee:	f043 0304 	orr.w	r3, r3, #4
 8007af2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8007af4:	f7ff ff60 	bl	80079b8 <callback_extInt2>
	}
}
 8007af8:	bf00      	nop
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40013c00 	.word	0x40013c00

08007b00 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <EXTI3_IRQHandler+0x24>)
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <EXTI3_IRQHandler+0x24>)
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	4a03      	ldr	r2, [pc, #12]	; (8007b24 <EXTI3_IRQHandler+0x24>)
 8007b16:	f043 0308 	orr.w	r3, r3, #8
 8007b1a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8007b1c:	f7f9 fff8 	bl	8001b10 <callback_extInt3>
	}
}
 8007b20:	bf00      	nop
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40013c00 	.word	0x40013c00

08007b28 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8007b2c:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <EXTI4_IRQHandler+0x24>)
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <EXTI4_IRQHandler+0x24>)
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	4a03      	ldr	r2, [pc, #12]	; (8007b4c <EXTI4_IRQHandler+0x24>)
 8007b3e:	f043 0310 	orr.w	r3, r3, #16
 8007b42:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8007b44:	f7ff ff40 	bl	80079c8 <callback_extInt4>
	}
}
 8007b48:	bf00      	nop
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40013c00 	.word	0x40013c00

08007b50 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8007b54:	4b26      	ldr	r3, [pc, #152]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8007b60:	4b23      	ldr	r3, [pc, #140]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	4a22      	ldr	r2, [pc, #136]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b66:	f043 0320 	orr.w	r3, r3, #32
 8007b6a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8007b6c:	f7ff ff34 	bl	80079d8 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8007b70:	e03c      	b.n	8007bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d008      	beq.n	8007b90 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8007b7e:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b88:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8007b8a:	f7ff ff2d 	bl	80079e8 <callback_extInt6>
}
 8007b8e:	e02d      	b.n	8007bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8007b90:	4b17      	ldr	r3, [pc, #92]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8007b9c:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba6:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8007ba8:	f7ff ff26 	bl	80079f8 <callback_extInt7>
}
 8007bac:	e01e      	b.n	8007bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8007bae:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d008      	beq.n	8007bcc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8007bba:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	4a0c      	ldr	r2, [pc, #48]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8007bc6:	f7ff ff1f 	bl	8007a08 <callback_extInt8>
}
 8007bca:	e00f      	b.n	8007bec <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d008      	beq.n	8007bea <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	4a04      	ldr	r2, [pc, #16]	; (8007bf0 <EXTI9_5_IRQHandler+0xa0>)
 8007bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007be2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8007be4:	f7ff ff18 	bl	8007a18 <callback_extInt9>
}
 8007be8:	e000      	b.n	8007bec <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8007bea:	bf00      	nop
}
 8007bec:	bf00      	nop
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40013c00 	.word	0x40013c00

08007bf4 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8007bf8:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d008      	beq.n	8007c16 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8007c04:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	4a29      	ldr	r2, [pc, #164]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c0e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8007c10:	f7ff ff0a 	bl	8007a28 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8007c14:	e049      	b.n	8007caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8007c16:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d008      	beq.n	8007c34 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8007c22:	4b23      	ldr	r3, [pc, #140]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	4a22      	ldr	r2, [pc, #136]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007c2c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8007c2e:	f7ff ff03 	bl	8007a38 <callback_extInt11>
}
 8007c32:	e03a      	b.n	8007caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8007c34:	4b1e      	ldr	r3, [pc, #120]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d008      	beq.n	8007c52 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8007c40:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	4a1a      	ldr	r2, [pc, #104]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c4a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8007c4c:	f7ff fefc 	bl	8007a48 <callback_extInt12>
}
 8007c50:	e02b      	b.n	8007caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8007c52:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d008      	beq.n	8007c70 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8007c5e:	4b14      	ldr	r3, [pc, #80]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	4a13      	ldr	r2, [pc, #76]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c68:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8007c6a:	f7ff fef5 	bl	8007a58 <callback_extInt13>
}
 8007c6e:	e01c      	b.n	8007caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8007c70:	4b0f      	ldr	r3, [pc, #60]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	4a0b      	ldr	r2, [pc, #44]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c86:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8007c88:	f7ff feee 	bl	8007a68 <callback_extInt14>
}
 8007c8c:	e00d      	b.n	8007caa <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8007c8e:	4b08      	ldr	r3, [pc, #32]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	4a04      	ldr	r2, [pc, #16]	; (8007cb0 <EXTI15_10_IRQHandler+0xbc>)
 8007ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca4:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8007ca6:	f7ff fee7 	bl	8007a78 <callback_extInt15>
}
 8007caa:	bf00      	nop
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	40013c00 	.word	0x40013c00

08007cb4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a88      	ldr	r2, [pc, #544]	; (8007eec <GPIO_Config+0x238>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d106      	bne.n	8007cdc <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8007cce:	4b88      	ldr	r3, [pc, #544]	; (8007ef0 <GPIO_Config+0x23c>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	4a87      	ldr	r2, [pc, #540]	; (8007ef0 <GPIO_Config+0x23c>)
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cda:	e03a      	b.n	8007d52 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a84      	ldr	r2, [pc, #528]	; (8007ef4 <GPIO_Config+0x240>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d106      	bne.n	8007cf4 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8007ce6:	4b82      	ldr	r3, [pc, #520]	; (8007ef0 <GPIO_Config+0x23c>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	4a81      	ldr	r2, [pc, #516]	; (8007ef0 <GPIO_Config+0x23c>)
 8007cec:	f043 0302 	orr.w	r3, r3, #2
 8007cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf2:	e02e      	b.n	8007d52 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a7f      	ldr	r2, [pc, #508]	; (8007ef8 <GPIO_Config+0x244>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d106      	bne.n	8007d0c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8007cfe:	4b7c      	ldr	r3, [pc, #496]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	4a7b      	ldr	r2, [pc, #492]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d04:	f043 0304 	orr.w	r3, r3, #4
 8007d08:	6313      	str	r3, [r2, #48]	; 0x30
 8007d0a:	e022      	b.n	8007d52 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a7a      	ldr	r2, [pc, #488]	; (8007efc <GPIO_Config+0x248>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d106      	bne.n	8007d24 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8007d16:	4b76      	ldr	r3, [pc, #472]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	4a75      	ldr	r2, [pc, #468]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d1c:	f043 0308 	orr.w	r3, r3, #8
 8007d20:	6313      	str	r3, [r2, #48]	; 0x30
 8007d22:	e016      	b.n	8007d52 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a75      	ldr	r2, [pc, #468]	; (8007f00 <GPIO_Config+0x24c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d106      	bne.n	8007d3c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8007d2e:	4b70      	ldr	r3, [pc, #448]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	4a6f      	ldr	r2, [pc, #444]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d34:	f043 0310 	orr.w	r3, r3, #16
 8007d38:	6313      	str	r3, [r2, #48]	; 0x30
 8007d3a:	e00a      	b.n	8007d52 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a70      	ldr	r2, [pc, #448]	; (8007f04 <GPIO_Config+0x250>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d105      	bne.n	8007d52 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8007d46:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	4a69      	ldr	r2, [pc, #420]	; (8007ef0 <GPIO_Config+0x23c>)
 8007d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d50:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	795b      	ldrb	r3, [r3, #5]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d143      	bne.n	8007de2 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	2b07      	cmp	r3, #7
 8007d60:	d81f      	bhi.n	8007da2 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6a1a      	ldr	r2, [r3, #32]
 8007d70:	210f      	movs	r1, #15
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	fa01 f303 	lsl.w	r3, r1, r3
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	400a      	ands	r2, r1
 8007d82:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a1a      	ldr	r2, [r3, #32]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7a5b      	ldrb	r3, [r3, #9]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	fa01 f303 	lsl.w	r3, r1, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	621a      	str	r2, [r3, #32]
 8007da0:	e01f      	b.n	8007de2 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	791b      	ldrb	r3, [r3, #4]
 8007da6:	3b08      	subs	r3, #8
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007db2:	210f      	movs	r1, #15
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	400a      	ands	r2, r1
 8007dc4:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	7a5b      	ldrb	r3, [r3, #9]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	795b      	ldrb	r3, [r3, #5]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	791b      	ldrb	r3, [r3, #4]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	791b      	ldrb	r3, [r3, #4]
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	2103      	movs	r1, #3
 8007e02:	fa01 f303 	lsl.w	r3, r1, r3
 8007e06:	43db      	mvns	r3, r3
 8007e08:	4619      	mov	r1, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	400a      	ands	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6819      	ldr	r1, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7a1b      	ldrb	r3, [r3, #8]
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	791b      	ldrb	r3, [r3, #4]
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	791b      	ldrb	r3, [r3, #4]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	2301      	movs	r3, #1
 8007e40:	408b      	lsls	r3, r1
 8007e42:	43db      	mvns	r3, r3
 8007e44:	4619      	mov	r1, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	400a      	ands	r2, r1
 8007e4c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6859      	ldr	r1, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	799b      	ldrb	r3, [r3, #6]
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	791b      	ldrb	r3, [r3, #4]
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	791b      	ldrb	r3, [r3, #4]
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	2103      	movs	r1, #3
 8007e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	4619      	mov	r1, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	400a      	ands	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6899      	ldr	r1, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	79db      	ldrb	r3, [r3, #7]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	791b      	ldrb	r3, [r3, #4]
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	791b      	ldrb	r3, [r3, #4]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2103      	movs	r1, #3
 8007ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	400a      	ands	r2, r1
 8007ecc:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68d9      	ldr	r1, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40020000 	.word	0x40020000
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	40020400 	.word	0x40020400
 8007ef8:	40020800 	.word	0x40020800
 8007efc:	40020c00 	.word	0x40020c00
 8007f00:	40021000 	.word	0x40021000
 8007f04:	40021c00 	.word	0x40021c00

08007f08 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d10d      	bne.n	8007f36 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699a      	ldr	r2, [r3, #24]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	791b      	ldrb	r3, [r3, #4]
 8007f24:	4619      	mov	r1, r3
 8007f26:	2301      	movs	r3, #1
 8007f28:	408b      	lsls	r3, r1
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8007f34:	e00d      	b.n	8007f52 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699a      	ldr	r2, [r3, #24]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	791b      	ldrb	r3, [r3, #4]
 8007f40:	3310      	adds	r3, #16
 8007f42:	2101      	movs	r1, #1
 8007f44:	fa01 f303 	lsl.w	r3, r1, r3
 8007f48:	4619      	mov	r1, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	619a      	str	r2, [r3, #24]
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10d      	bne.n	8007f8c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	791b      	ldrb	r3, [r3, #4]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	408b      	lsls	r3, r1
 8007f80:	4619      	mov	r1, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8007f8a:	e00d      	b.n	8007fa8 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	791b      	ldrb	r3, [r3, #4]
 8007f96:	3310      	adds	r3, #16
 8007f98:	2101      	movs	r1, #1
 8007f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	619a      	str	r2, [r3, #24]
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4093      	lsls	r3, r2
 8007fca:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8007fd4:	897b      	ldrh	r3, [r7, #10]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	40d3      	lsrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff ffd8 	bl	8007fb4 <GPIO_ReadPin>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf0c      	ite	eq
 800800e:	2301      	moveq	r3, #1
 8008010:	2300      	movne	r3, #0
 8008012:	b2db      	uxtb	r3, r3
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff ff76 	bl	8007f08 <GPIO_WritePin>
}
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fe3b 	bl	8007cb4 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fe36 	bl	8007cb4 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	4618      	mov	r0, r3
 800804e:	f002 f99d 	bl	800a38c <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8008052:	e004      	b.n	800805e <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f94f 	bl	80082f8 <WHOIAM>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0f7      	beq.n	8008054 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8008064:	216b      	movs	r1, #107	; 0x6b
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f8f1 	bl	800824e <readData>
 800806c:	4603      	mov	r3, r0
 800806e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8008070:	2300      	movs	r3, #0
 8008072:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	461a      	mov	r2, r3
 8008078:	216b      	movs	r1, #107	; 0x6b
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f89c 	bl	80081b8 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8008080:	216b      	movs	r1, #107	; 0x6b
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8e3 	bl	800824e <readData>
 8008088:	4603      	mov	r3, r0
 800808a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800808c:	211c      	movs	r1, #28
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8dd 	bl	800824e <readData>
 8008094:	4603      	mov	r3, r0
 8008096:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	f023 0318 	bic.w	r3, r3, #24
 800809e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d833      	bhi.n	8008110 <configMPUAccel+0xec>
 80080a8:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <configMPUAccel+0x8c>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	080080cf 	.word	0x080080cf
 80080b8:	080080e5 	.word	0x080080e5
 80080bc:	080080fb 	.word	0x080080fb
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	461a      	mov	r2, r3
 80080c4:	211c      	movs	r1, #28
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f876 	bl	80081b8 <writeData>


				break;
 80080cc:	e021      	b.n	8008112 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	f043 0308 	orr.w	r3, r3, #8
 80080d4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	461a      	mov	r2, r3
 80080da:	211c      	movs	r1, #28
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f86b 	bl	80081b8 <writeData>


				break;
 80080e2:	e016      	b.n	8008112 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	f043 0310 	orr.w	r3, r3, #16
 80080ea:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	461a      	mov	r2, r3
 80080f0:	211c      	movs	r1, #28
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f860 	bl	80081b8 <writeData>


				break;
 80080f8:	e00b      	b.n	8008112 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	f043 0318 	orr.w	r3, r3, #24
 8008100:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	461a      	mov	r2, r3
 8008106:	211c      	movs	r1, #28
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f855 	bl	80081b8 <writeData>


				break;
 800810e:	e000      	b.n	8008112 <configMPUAccel+0xee>
			}default:{
				break;
 8008110:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8008112:	211c      	movs	r1, #28
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f89a 	bl	800824e <readData>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800811e:	211b      	movs	r1, #27
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f894 	bl	800824e <readData>
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	f023 0318 	bic.w	r3, r3, #24
 8008130:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b03      	cmp	r3, #3
 8008138:	d832      	bhi.n	80081a0 <configMPUAccel+0x17c>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <configMPUAccel+0x11c>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008151 	.word	0x08008151
 8008144:	0800815f 	.word	0x0800815f
 8008148:	08008175 	.word	0x08008175
 800814c:	0800818b 	.word	0x0800818b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	461a      	mov	r2, r3
 8008154:	211b      	movs	r1, #27
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f82e 	bl	80081b8 <writeData>


				break;
 800815c:	e021      	b.n	80081a2 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	f043 0308 	orr.w	r3, r3, #8
 8008164:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	461a      	mov	r2, r3
 800816a:	211b      	movs	r1, #27
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f823 	bl	80081b8 <writeData>


				break;
 8008172:	e016      	b.n	80081a2 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	f043 0310 	orr.w	r3, r3, #16
 800817a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	461a      	mov	r2, r3
 8008180:	211b      	movs	r1, #27
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f818 	bl	80081b8 <writeData>


				break;
 8008188:	e00b      	b.n	80081a2 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	f043 0318 	orr.w	r3, r3, #24
 8008190:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	461a      	mov	r2, r3
 8008196:	211b      	movs	r1, #27
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f80d 	bl	80081b8 <writeData>


				break;
 800819e:	e000      	b.n	80081a2 <configMPUAccel+0x17e>
			}default:{
				break;
 80081a0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 80081a2:	211b      	movs	r1, #27
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f852 	bl	800824e <readData>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73bb      	strb	r3, [r7, #14]


}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop

080081b8 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
 80081c4:	4613      	mov	r3, r2
 80081c6:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	695a      	ldr	r2, [r3, #20]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081da:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f002 fa43 	bl	800a66c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68d8      	ldr	r0, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	791b      	ldrb	r3, [r3, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	4619      	mov	r1, r3
 80081f4:	f002 faa5 	bl	800a742 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f002 fac6 	bl	800a792 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8008206:	e000      	b.n	800820a <writeData+0x52>
		__NOP();
 8008208:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f6      	bne.n	8008208 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	78ba      	ldrb	r2, [r7, #2]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f002 facf 	bl	800a7c6 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8008228:	e000      	b.n	800822c <writeData+0x74>
		__NOP();
 800822a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f6      	bne.n	800822a <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4618      	mov	r0, r3
 8008242:	f002 fa01 	bl	800a648 <i2c_stopTransaction>



}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695a      	ldr	r2, [r3, #20]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008270:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	4618      	mov	r0, r3
 8008278:	f002 f9f8 	bl	800a66c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68d8      	ldr	r0, [r3, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	791b      	ldrb	r3, [r3, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	4619      	mov	r1, r3
 800828a:	f002 fa5a 	bl	800a742 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f002 fa7b 	bl	800a792 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800829c:	e000      	b.n	80082a0 <readData+0x52>
		__NOP();
 800829e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1f6      	bne.n	800829e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f002 fa0a 	bl	800a6ce <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68d8      	ldr	r0, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	4619      	mov	r1, r3
 80082c8:	f002 fa3b 	bl	800a742 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f002 fa24 	bl	800a71e <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	4618      	mov	r0, r3
 80082dc:	f002 f9b4 	bl	800a648 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f002 fa88 	bl	800a7fa <i2c_readDataByte>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8008308:	2175      	movs	r1, #117	; 0x75
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff ff9f 	bl	800824e <readData>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800831a:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	085b      	lsrs	r3, r3, #1
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800832e:	7bbb      	ldrb	r3, [r7, #14]

}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8008358:	2143      	movs	r1, #67	; 0x43
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff ff77 	bl	800824e <readData>
 8008360:	4603      	mov	r3, r0
 8008362:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8008364:	2144      	movs	r1, #68	; 0x44
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff ff71 	bl	800824e <readData>
 800836c:	4603      	mov	r3, r0
 800836e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8008370:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	b21a      	sxth	r2, r3
 8008378:	89bb      	ldrh	r3, [r7, #12]
 800837a:	4313      	orrs	r3, r2
 800837c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b03      	cmp	r3, #3
 8008384:	d846      	bhi.n	8008414 <readGyro_X+0xdc>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <readGyro_X+0x54>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	0800839d 	.word	0x0800839d
 8008390:	080083bb 	.word	0x080083bb
 8008394:	080083d9 	.word	0x080083d9
 8008398:	080083f7 	.word	0x080083f7
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800839c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7f8 f8d7 	bl	8000554 <__aeabi_i2d>
 80083a6:	a325      	add	r3, pc, #148	; (adr r3, 800843c <readGyro_X+0x104>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f7f8 fa66 	bl	800087c <__aeabi_ddiv>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80083b8:	e02d      	b.n	8008416 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 80083ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f8 f8c8 	bl	8000554 <__aeabi_i2d>
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	4b19      	ldr	r3, [pc, #100]	; (8008430 <readGyro_X+0xf8>)
 80083ca:	f7f8 fa57 	bl	800087c <__aeabi_ddiv>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80083d6:	e01e      	b.n	8008416 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 80083d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083dc:	4618      	mov	r0, r3
 80083de:	f7f8 f8b9 	bl	8000554 <__aeabi_i2d>
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <readGyro_X+0xfc>)
 80083e8:	f7f8 fa48 	bl	800087c <__aeabi_ddiv>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80083f4:	e00f      	b.n	8008416 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 80083f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7f8 f8aa 	bl	8000554 <__aeabi_i2d>
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <readGyro_X+0x100>)
 8008406:	f7f8 fa39 	bl	800087c <__aeabi_ddiv>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008412:	e000      	b.n	8008416 <readGyro_X+0xde>
		}default:{
			break;
 8008414:	bf00      	nop
		}

	}

	return GYROX_R;
 8008416:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800841a:	f7f8 fbfd 	bl	8000c18 <__aeabi_d2f>
 800841e:	4603      	mov	r3, r0
 8008420:	ee07 3a90 	vmov	s15, r3

}
 8008424:	eeb0 0a67 	vmov.f32	s0, s15
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40508000 	.word	0x40508000
 8008434:	40408000 	.word	0x40408000
 8008438:	40300000 	.word	0x40300000
 800843c:	00000000 	.word	0x00000000
 8008440:	40606000 	.word	0x40606000
 8008444:	00000000 	.word	0x00000000

08008448 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8008468:	2145      	movs	r1, #69	; 0x45
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff feef 	bl	800824e <readData>
 8008470:	4603      	mov	r3, r0
 8008472:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8008474:	2146      	movs	r1, #70	; 0x46
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff fee9 	bl	800824e <readData>
 800847c:	4603      	mov	r3, r0
 800847e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8008480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008484:	021b      	lsls	r3, r3, #8
 8008486:	b21a      	sxth	r2, r3
 8008488:	89bb      	ldrh	r3, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d846      	bhi.n	8008524 <readGyro_Y+0xdc>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <readGyro_Y+0x54>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084cb 	.word	0x080084cb
 80084a4:	080084e9 	.word	0x080084e9
 80084a8:	08008507 	.word	0x08008507
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 80084ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7f8 f84f 	bl	8000554 <__aeabi_i2d>
 80084b6:	a325      	add	r3, pc, #148	; (adr r3, 800854c <readGyro_Y+0x104>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f8 f9de 	bl	800087c <__aeabi_ddiv>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80084c8:	e02d      	b.n	8008526 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 80084ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7f8 f840 	bl	8000554 <__aeabi_i2d>
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	4b19      	ldr	r3, [pc, #100]	; (8008540 <readGyro_Y+0xf8>)
 80084da:	f7f8 f9cf 	bl	800087c <__aeabi_ddiv>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80084e6:	e01e      	b.n	8008526 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 80084e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f8 f831 	bl	8000554 <__aeabi_i2d>
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	4b13      	ldr	r3, [pc, #76]	; (8008544 <readGyro_Y+0xfc>)
 80084f8:	f7f8 f9c0 	bl	800087c <__aeabi_ddiv>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008504:	e00f      	b.n	8008526 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8008506:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800850a:	4618      	mov	r0, r3
 800850c:	f7f8 f822 	bl	8000554 <__aeabi_i2d>
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <readGyro_Y+0x100>)
 8008516:	f7f8 f9b1 	bl	800087c <__aeabi_ddiv>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008522:	e000      	b.n	8008526 <readGyro_Y+0xde>
		}default:{
			break;
 8008524:	bf00      	nop
		}

	}

	return GYROY_R;
 8008526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800852a:	f7f8 fb75 	bl	8000c18 <__aeabi_d2f>
 800852e:	4603      	mov	r3, r0
 8008530:	ee07 3a90 	vmov	s15, r3

}
 8008534:	eeb0 0a67 	vmov.f32	s0, s15
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	40508000 	.word	0x40508000
 8008544:	40408000 	.word	0x40408000
 8008548:	40300000 	.word	0x40300000
 800854c:	00000000 	.word	0x00000000
 8008550:	40606000 	.word	0x40606000
 8008554:	00000000 	.word	0x00000000

08008558 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8008578:	2147      	movs	r1, #71	; 0x47
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff fe67 	bl	800824e <readData>
 8008580:	4603      	mov	r3, r0
 8008582:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8008584:	2148      	movs	r1, #72	; 0x48
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fe61 	bl	800824e <readData>
 800858c:	4603      	mov	r3, r0
 800858e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8008590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	b21a      	sxth	r2, r3
 8008598:	89bb      	ldrh	r3, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d846      	bhi.n	8008634 <readGyro_Z+0xdc>
 80085a6:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <readGyro_Z+0x54>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085bd 	.word	0x080085bd
 80085b0:	080085db 	.word	0x080085db
 80085b4:	080085f9 	.word	0x080085f9
 80085b8:	08008617 	.word	0x08008617
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 80085bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7f7 ffc7 	bl	8000554 <__aeabi_i2d>
 80085c6:	a325      	add	r3, pc, #148	; (adr r3, 800865c <readGyro_Z+0x104>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f8 f956 	bl	800087c <__aeabi_ddiv>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80085d8:	e02d      	b.n	8008636 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 80085da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7f7 ffb8 	bl	8000554 <__aeabi_i2d>
 80085e4:	f04f 0200 	mov.w	r2, #0
 80085e8:	4b19      	ldr	r3, [pc, #100]	; (8008650 <readGyro_Z+0xf8>)
 80085ea:	f7f8 f947 	bl	800087c <__aeabi_ddiv>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80085f6:	e01e      	b.n	8008636 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 80085f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7f7 ffa9 	bl	8000554 <__aeabi_i2d>
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	4b13      	ldr	r3, [pc, #76]	; (8008654 <readGyro_Z+0xfc>)
 8008608:	f7f8 f938 	bl	800087c <__aeabi_ddiv>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008614:	e00f      	b.n	8008636 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8008616:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800861a:	4618      	mov	r0, r3
 800861c:	f7f7 ff9a 	bl	8000554 <__aeabi_i2d>
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <readGyro_Z+0x100>)
 8008626:	f7f8 f929 	bl	800087c <__aeabi_ddiv>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008632:	e000      	b.n	8008636 <readGyro_Z+0xde>
		}default:{
			break;
 8008634:	bf00      	nop
		}

	}

	return GYROZ_R;
 8008636:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800863a:	f7f8 faed 	bl	8000c18 <__aeabi_d2f>
 800863e:	4603      	mov	r3, r0
 8008640:	ee07 3a90 	vmov	s15, r3

}
 8008644:	eeb0 0a67 	vmov.f32	s0, s15
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	40508000 	.word	0x40508000
 8008654:	40408000 	.word	0x40408000
 8008658:	40300000 	.word	0x40300000
 800865c:	00000000 	.word	0x00000000
 8008660:	40606000 	.word	0x40606000
 8008664:	00000000 	.word	0x00000000

08008668 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8008668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800866c:	b08a      	sub	sp, #40	; 0x28
 800866e:	af00      	add	r7, sp, #0
 8008670:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800867e:	f7f7 fe1b 	bl	80002b8 <__aeabi_dsub>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008696:	f7f7 fe0f 	bl	80002b8 <__aeabi_dsub>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 80086a2:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80087b0 <calculation_parameter_distance+0x148>
 80086a6:	ed97 0b08 	vldr	d0, [r7, #32]
 80086aa:	f004 feff 	bl	800d4ac <pow>
 80086ae:	ec59 8b10 	vmov	r8, r9, d0
 80086b2:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80087b0 <calculation_parameter_distance+0x148>
 80086b6:	ed97 0b06 	vldr	d0, [r7, #24]
 80086ba:	f004 fef7 	bl	800d4ac <pow>
 80086be:	ec53 2b10 	vmov	r2, r3, d0
 80086c2:	4640      	mov	r0, r8
 80086c4:	4649      	mov	r1, r9
 80086c6:	f7f7 fdf9 	bl	80002bc <__adddf3>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	ec43 2b17 	vmov	d7, r2, r3
 80086d2:	eeb0 0a47 	vmov.f32	s0, s14
 80086d6:	eef0 0a67 	vmov.f32	s1, s15
 80086da:	f004 ff57 	bl	800d58c <sqrt>
 80086de:	eeb0 7a40 	vmov.f32	s14, s0
 80086e2:	eef0 7a60 	vmov.f32	s15, s1
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 80086ec:	6979      	ldr	r1, [r7, #20]
 80086ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 80086f6:	6979      	ldr	r1, [r7, #20]
 80086f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008716:	f7f7 ff87 	bl	8000628 <__aeabi_dmul>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4690      	mov	r8, r2
 8008720:	4699      	mov	r9, r3
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8008728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800872c:	f7f7 ff7c 	bl	8000628 <__aeabi_dmul>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4640      	mov	r0, r8
 8008736:	4649      	mov	r1, r9
 8008738:	f7f7 fdbe 	bl	80002b8 <__aeabi_dsub>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 8008746:	6979      	ldr	r1, [r7, #20]
 8008748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800874c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8008750:	6a3c      	ldr	r4, [r7, #32]
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008768:	607b      	str	r3, [r7, #4]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008774:	f7f7 ff58 	bl	8000628 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4614      	mov	r4, r2
 800877e:	461d      	mov	r5, r3
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8008786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800878a:	f7f7 ff4d 	bl	8000628 <__aeabi_dmul>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4620      	mov	r0, r4
 8008794:	4629      	mov	r1, r5
 8008796:	f7f7 fd91 	bl	80002bc <__adddf3>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	6979      	ldr	r1, [r7, #20]
 80087a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80087a4:	bf00      	nop
 80087a6:	3728      	adds	r7, #40	; 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80087ae:	bf00      	nop
 80087b0:	00000000 	.word	0x00000000
 80087b4:	40000000 	.word	0x40000000

080087b8 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 80087b8:	b5b0      	push	{r4, r5, r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6178      	str	r0, [r7, #20]
 80087c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80087c4:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80087ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087d2:	f7f7 ff29 	bl	8000628 <__aeabi_dmul>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4614      	mov	r4, r2
 80087dc:	461d      	mov	r5, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80087e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e8:	f7f7 ff1e 	bl	8000628 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	f7f7 fd62 	bl	80002bc <__adddf3>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4610      	mov	r0, r2
 80087fe:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008806:	f7f7 fd59 	bl	80002bc <__adddf3>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4610      	mov	r0, r2
 8008810:	4619      	mov	r1, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f7f8 f830 	bl	800087c <__aeabi_ddiv>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008820:	4611      	mov	r1, r2
 8008822:	61b9      	str	r1, [r7, #24]
 8008824:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008828:	61fb      	str	r3, [r7, #28]

	return distance;
 800882a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800882e:	ec43 2b17 	vmov	d7, r2, r3
}
 8008832:	eeb0 0a47 	vmov.f32	s0, s14
 8008836:	eef0 0a67 	vmov.f32	s1, s15
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bdb0      	pop	{r4, r5, r7, pc}

08008840 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008840:	b5b0      	push	{r4, r5, r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af00      	add	r7, sp, #0
 8008846:	6178      	str	r0, [r7, #20]
 8008848:	ed87 0b02 	vstr	d0, [r7, #8]
 800884c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800885a:	f7f7 fee5 	bl	8000628 <__aeabi_dmul>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4614      	mov	r4, r2
 8008864:	461d      	mov	r5, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800886c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008870:	f7f7 feda 	bl	8000628 <__aeabi_dmul>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4620      	mov	r0, r4
 800887a:	4629      	mov	r1, r5
 800887c:	f7f7 fd1e 	bl	80002bc <__adddf3>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4610      	mov	r0, r2
 8008886:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800888e:	f7f7 fd15 	bl	80002bc <__adddf3>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4610      	mov	r0, r2
 8008898:	4619      	mov	r1, r3
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 80088a0:	f7f7 ffec 	bl	800087c <__aeabi_ddiv>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 80088ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80088b4:	eeb0 0a47 	vmov.f32	s0, s14
 80088b8:	eef0 0a67 	vmov.f32	s1, s15
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080088c4 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a6c      	ldr	r2, [pc, #432]	; (8008a84 <pwm_Config+0x1c0>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d106      	bne.n	80088e4 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80088d6:	4b6c      	ldr	r3, [pc, #432]	; (8008a88 <pwm_Config+0x1c4>)
 80088d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088da:	4a6b      	ldr	r2, [pc, #428]	; (8008a88 <pwm_Config+0x1c4>)
 80088dc:	f043 0301 	orr.w	r3, r3, #1
 80088e0:	6453      	str	r3, [r2, #68]	; 0x44
 80088e2:	e030      	b.n	8008946 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ec:	d106      	bne.n	80088fc <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80088ee:	4b66      	ldr	r3, [pc, #408]	; (8008a88 <pwm_Config+0x1c4>)
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	4a65      	ldr	r2, [pc, #404]	; (8008a88 <pwm_Config+0x1c4>)
 80088f4:	f043 0301 	orr.w	r3, r3, #1
 80088f8:	6413      	str	r3, [r2, #64]	; 0x40
 80088fa:	e024      	b.n	8008946 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a62      	ldr	r2, [pc, #392]	; (8008a8c <pwm_Config+0x1c8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d106      	bne.n	8008914 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008906:	4b60      	ldr	r3, [pc, #384]	; (8008a88 <pwm_Config+0x1c4>)
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	4a5f      	ldr	r2, [pc, #380]	; (8008a88 <pwm_Config+0x1c4>)
 800890c:	f043 0302 	orr.w	r3, r3, #2
 8008910:	6413      	str	r3, [r2, #64]	; 0x40
 8008912:	e018      	b.n	8008946 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a5d      	ldr	r2, [pc, #372]	; (8008a90 <pwm_Config+0x1cc>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d106      	bne.n	800892c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800891e:	4b5a      	ldr	r3, [pc, #360]	; (8008a88 <pwm_Config+0x1c4>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	4a59      	ldr	r2, [pc, #356]	; (8008a88 <pwm_Config+0x1c4>)
 8008924:	f043 0304 	orr.w	r3, r3, #4
 8008928:	6413      	str	r3, [r2, #64]	; 0x40
 800892a:	e00c      	b.n	8008946 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a58      	ldr	r2, [pc, #352]	; (8008a94 <pwm_Config+0x1d0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d106      	bne.n	8008944 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8008936:	4b54      	ldr	r3, [pc, #336]	; (8008a88 <pwm_Config+0x1c4>)
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	4a53      	ldr	r2, [pc, #332]	; (8008a88 <pwm_Config+0x1c4>)
 800893c:	f043 0308 	orr.w	r3, r3, #8
 8008940:	6413      	str	r3, [r2, #64]	; 0x40
 8008942:	e000      	b.n	8008946 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8008944:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008954:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7f5b      	ldrb	r3, [r3, #29]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f930 	bl	8008bc4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fa67 	bl	8008e38 <setDuttyCycle>
 800896a:	e005      	b.n	8008978 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f929 	bl	8008bc4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fb38 	bl	8008fe8 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0210 	bic.w	r2, r2, #16
 8008986:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2200      	movs	r2, #0
 800898e:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	7a1b      	ldrb	r3, [r3, #8]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d86f      	bhi.n	8008a78 <pwm_Config+0x1b4>
 8008998:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <pwm_Config+0xdc>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	080089b1 	.word	0x080089b1
 80089a4:	080089e3 	.word	0x080089e3
 80089a8:	08008a15 	.word	0x08008a15
 80089ac:	08008a47 	.word	0x08008a47
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0203 	bic.w	r2, r2, #3
 80089be:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80089ce:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0208 	orr.w	r2, r2, #8
 80089de:	619a      	str	r2, [r3, #24]


		break;
 80089e0:	e04b      	b.n	8008a7a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	699a      	ldr	r2, [r3, #24]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80089f0:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	699a      	ldr	r2, [r3, #24]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008a00:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	699a      	ldr	r2, [r3, #24]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a10:	619a      	str	r2, [r3, #24]

		break;
 8008a12:	e032      	b.n	8008a7a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69da      	ldr	r2, [r3, #28]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0203 	bic.w	r2, r2, #3
 8008a22:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69da      	ldr	r2, [r3, #28]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008a32:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69da      	ldr	r2, [r3, #28]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0208 	orr.w	r2, r2, #8
 8008a42:	61da      	str	r2, [r3, #28]

		break;
 8008a44:	e019      	b.n	8008a7a <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008a54:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69da      	ldr	r2, [r3, #28]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008a64:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69da      	ldr	r2, [r3, #28]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a74:	61da      	str	r2, [r3, #28]

		break;
 8008a76:	e000      	b.n	8008a7a <pwm_Config+0x1b6>
	}

	default:{
		break;
 8008a78:	bf00      	nop
	}// fin del switch-case




}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	40000400 	.word	0x40000400
 8008a90:	40000800 	.word	0x40000800
 8008a94:	40000c00 	.word	0x40000c00

08008a98 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0201 	orr.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]

}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a3d      	ldr	r2, [pc, #244]	; (8008bc0 <enableOutput+0x104>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d13a      	bne.n	8008b44 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008adc:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7a1b      	ldrb	r3, [r3, #8]
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d862      	bhi.n	8008bac <enableOutput+0xf0>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <enableOutput+0x30>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008afd 	.word	0x08008afd
 8008af0:	08008b0f 	.word	0x08008b0f
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	08008b33 	.word	0x08008b33
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6a1a      	ldr	r2, [r3, #32]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	621a      	str	r2, [r3, #32]

				break;
 8008b0c:	e051      	b.n	8008bb2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0210 	orr.w	r2, r2, #16
 8008b1c:	621a      	str	r2, [r3, #32]

				break;
 8008b1e:	e048      	b.n	8008bb2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6a1a      	ldr	r2, [r3, #32]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b2e:	621a      	str	r2, [r3, #32]

				break;
 8008b30:	e03f      	b.n	8008bb2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6a1a      	ldr	r2, [r3, #32]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b40:	621a      	str	r2, [r3, #32]

				break;
 8008b42:	e036      	b.n	8008bb2 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	7a1b      	ldrb	r3, [r3, #8]
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d831      	bhi.n	8008bb0 <enableOutput+0xf4>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <enableOutput+0x98>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b65 	.word	0x08008b65
 8008b58:	08008b77 	.word	0x08008b77
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b9b 	.word	0x08008b9b
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6a1a      	ldr	r2, [r3, #32]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0201 	orr.w	r2, r2, #1
 8008b72:	621a      	str	r2, [r3, #32]

				break;
 8008b74:	e01d      	b.n	8008bb2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6a1a      	ldr	r2, [r3, #32]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0210 	orr.w	r2, r2, #16
 8008b84:	621a      	str	r2, [r3, #32]

				break;
 8008b86:	e014      	b.n	8008bb2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b96:	621a      	str	r2, [r3, #32]

				break;
 8008b98:	e00b      	b.n	8008bb2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ba8:	621a      	str	r2, [r3, #32]

				break;
 8008baa:	e002      	b.n	8008bb2 <enableOutput+0xf6>
				break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <enableOutput+0xf6>
			}

			default: {
				break;
 8008bb0:	bf00      	nop
			}

		}
	}
	return SET;
 8008bb2:	2301      	movs	r3, #1
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	40010000 	.word	0x40010000

08008bc4 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	68d2      	ldr	r2, [r2, #12]
 8008bd8:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b10      	cmp	r3, #16
 8008be4:	d01a      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b14      	cmp	r3, #20
 8008bea:	d017      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b1e      	cmp	r3, #30
 8008bf0:	d014      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b28      	cmp	r3, #40	; 0x28
 8008bf6:	d011      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b32      	cmp	r3, #50	; 0x32
 8008bfc:	d00e      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b3c      	cmp	r3, #60	; 0x3c
 8008c02:	d00b      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b46      	cmp	r3, #70	; 0x46
 8008c08:	d008      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b50      	cmp	r3, #80	; 0x50
 8008c0e:	d005      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b5a      	cmp	r3, #90	; 0x5a
 8008c14:	d002      	beq.n	8008c1c <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b64      	cmp	r3, #100	; 0x64
 8008c1a:	d118      	bne.n	8008c4e <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008c22:	f04f 0200 	mov.w	r2, #0
 8008c26:	4b7b      	ldr	r3, [pc, #492]	; (8008e14 <setFrequency+0x250>)
 8008c28:	f7f7 fcfe 	bl	8000628 <__aeabi_dmul>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4610      	mov	r0, r2
 8008c32:	4619      	mov	r1, r3
 8008c34:	f7f7 ffd0 	bl	8000bd8 <__aeabi_d2uiz>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	4b76      	ldr	r3, [pc, #472]	; (8008e18 <setFrequency+0x254>)
 8008c3e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008c40:	4b75      	ldr	r3, [pc, #468]	; (8008e18 <setFrequency+0x254>)
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c4c:	e0dd      	b.n	8008e0a <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2ba0      	cmp	r3, #160	; 0xa0
 8008c52:	d022      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2bc8      	cmp	r3, #200	; 0xc8
 8008c58:	d01f      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008c60:	d01b      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008c68:	d017      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008c70:	d013      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008c78:	d00f      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008c80:	d00b      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008c88:	d007      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008c90:	d003      	beq.n	8008c9a <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c98:	d118      	bne.n	8008ccc <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	4b5d      	ldr	r3, [pc, #372]	; (8008e1c <setFrequency+0x258>)
 8008ca6:	f7f7 fcbf 	bl	8000628 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	f7f7 ff91 	bl	8000bd8 <__aeabi_d2uiz>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	4b57      	ldr	r3, [pc, #348]	; (8008e18 <setFrequency+0x254>)
 8008cbc:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008cbe:	4b56      	ldr	r3, [pc, #344]	; (8008e18 <setFrequency+0x254>)
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	1e5a      	subs	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8008cca:	e09e      	b.n	8008e0a <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008cd2:	d029      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008cda:	d025      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d020      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008cec:	d01c      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d017      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f241 7270 	movw	r2, #6000	; 0x1770
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d012      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f641 3258 	movw	r2, #7000	; 0x1b58
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00d      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8008d12:	d009      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f242 3228 	movw	r2, #9000	; 0x2328
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d004      	beq.n	8008d28 <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d118      	bne.n	8008d5a <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	4b3b      	ldr	r3, [pc, #236]	; (8008e20 <setFrequency+0x25c>)
 8008d34:	f7f7 fc78 	bl	8000628 <__aeabi_dmul>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f7f7 ff4a 	bl	8000bd8 <__aeabi_d2uiz>
 8008d44:	4603      	mov	r3, r0
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	4b33      	ldr	r3, [pc, #204]	; (8008e18 <setFrequency+0x254>)
 8008d4a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008d4c:	4b32      	ldr	r3, [pc, #200]	; (8008e18 <setFrequency+0x254>)
 8008d4e:	881b      	ldrh	r3, [r3, #0]
 8008d50:	1e5a      	subs	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d58:	e057      	b.n	8008e0a <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008d60:	d028      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d023      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f247 5230 	movw	r2, #30000	; 0x7530
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01e      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f649 4240 	movw	r2, #40000	; 0x9c40
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d019      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d014      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00f      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4a23      	ldr	r2, [pc, #140]	; (8008e24 <setFrequency+0x260>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00b      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a22      	ldr	r2, [pc, #136]	; (8008e28 <setFrequency+0x264>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d007      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4a21      	ldr	r2, [pc, #132]	; (8008e2c <setFrequency+0x268>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d003      	beq.n	8008db4 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4a20      	ldr	r2, [pc, #128]	; (8008e30 <setFrequency+0x26c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d111      	bne.n	8008dd8 <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008dba:	4610      	mov	r0, r2
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	f7f7 ff0b 	bl	8000bd8 <__aeabi_d2uiz>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <setFrequency+0x254>)
 8008dc8:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008dca:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <setFrequency+0x254>)
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	1e5a      	subs	r2, r3, #1
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008dd6:	e018      	b.n	8008e0a <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <setFrequency+0x270>)
 8008de4:	f7f7 fd4a 	bl	800087c <__aeabi_ddiv>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4610      	mov	r0, r2
 8008dee:	4619      	mov	r1, r3
 8008df0:	f7f7 fef2 	bl	8000bd8 <__aeabi_d2uiz>
 8008df4:	4603      	mov	r3, r0
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <setFrequency+0x254>)
 8008dfa:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <setFrequency+0x254>)
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	1e5a      	subs	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	408f4000 	.word	0x408f4000
 8008e18:	200133d8 	.word	0x200133d8
 8008e1c:	40590000 	.word	0x40590000
 8008e20:	40240000 	.word	0x40240000
 8008e24:	00011170 	.word	0x00011170
 8008e28:	00013880 	.word	0x00013880
 8008e2c:	00015f90 	.word	0x00015f90
 8008e30:	000186a0 	.word	0x000186a0
 8008e34:	40340000 	.word	0x40340000

08008e38 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8008e38:	b590      	push	{r4, r7, lr}
 8008e3a:	b08b      	sub	sp, #44	; 0x2c
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	7a1b      	ldrb	r3, [r3, #8]
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	f200 80c3 	bhi.w	8008fd0 <setDuttyCycle+0x198>
 8008e4a:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <setDuttyCycle+0x18>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008ebd 	.word	0x08008ebd
 8008e58:	08008f19 	.word	0x08008f19
 8008e5c:	08008f75 	.word	0x08008f75
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	ed93 7a06 	vldr	s14, [r3, #24]
 8008e66:	4b5d      	ldr	r3, [pc, #372]	; (8008fdc <setDuttyCycle+0x1a4>)
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	ee17 0a90 	vmov	r0, s15
 8008e7a:	f7f7 fb7d 	bl	8000578 <__aeabi_f2d>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8008e86:	f04f 0200 	mov.w	r2, #0
 8008e8a:	4b55      	ldr	r3, [pc, #340]	; (8008fe0 <setDuttyCycle+0x1a8>)
 8008e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e90:	f7f7 fcf4 	bl	800087c <__aeabi_ddiv>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	4b50      	ldr	r3, [pc, #320]	; (8008fe4 <setDuttyCycle+0x1ac>)
 8008ea2:	f7f7 fa09 	bl	80002b8 <__aeabi_dsub>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4610      	mov	r0, r2
 8008eac:	4619      	mov	r1, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681c      	ldr	r4, [r3, #0]
 8008eb2:	f7f7 fe91 	bl	8000bd8 <__aeabi_d2uiz>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008eba:	e08a      	b.n	8008fd2 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	ed93 7a06 	vldr	s14, [r3, #24]
 8008ec2:	4b46      	ldr	r3, [pc, #280]	; (8008fdc <setDuttyCycle+0x1a4>)
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed2:	ee17 0a90 	vmov	r0, s15
 8008ed6:	f7f7 fb4f 	bl	8000578 <__aeabi_f2d>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	4b3e      	ldr	r3, [pc, #248]	; (8008fe0 <setDuttyCycle+0x1a8>)
 8008ee8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008eec:	f7f7 fcc6 	bl	800087c <__aeabi_ddiv>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f04f 0200 	mov.w	r2, #0
 8008efc:	4b39      	ldr	r3, [pc, #228]	; (8008fe4 <setDuttyCycle+0x1ac>)
 8008efe:	f7f7 f9db 	bl	80002b8 <__aeabi_dsub>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681c      	ldr	r4, [r3, #0]
 8008f0e:	f7f7 fe63 	bl	8000bd8 <__aeabi_d2uiz>
 8008f12:	4603      	mov	r3, r0
 8008f14:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8008f16:	e05c      	b.n	8008fd2 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	ed93 7a06 	vldr	s14, [r3, #24]
 8008f1e:	4b2f      	ldr	r3, [pc, #188]	; (8008fdc <setDuttyCycle+0x1a4>)
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2e:	ee17 0a90 	vmov	r0, s15
 8008f32:	f7f7 fb21 	bl	8000578 <__aeabi_f2d>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8008f3e:	f04f 0200 	mov.w	r2, #0
 8008f42:	4b27      	ldr	r3, [pc, #156]	; (8008fe0 <setDuttyCycle+0x1a8>)
 8008f44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f48:	f7f7 fc98 	bl	800087c <__aeabi_ddiv>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4610      	mov	r0, r2
 8008f52:	4619      	mov	r1, r3
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <setDuttyCycle+0x1ac>)
 8008f5a:	f7f7 f9ad 	bl	80002b8 <__aeabi_dsub>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4610      	mov	r0, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681c      	ldr	r4, [r3, #0]
 8008f6a:	f7f7 fe35 	bl	8000bd8 <__aeabi_d2uiz>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008f72:	e02e      	b.n	8008fd2 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	ed93 7a06 	vldr	s14, [r3, #24]
 8008f7a:	4b18      	ldr	r3, [pc, #96]	; (8008fdc <setDuttyCycle+0x1a4>)
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	ee17 0a90 	vmov	r0, s15
 8008f8e:	f7f7 faf3 	bl	8000578 <__aeabi_f2d>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <setDuttyCycle+0x1a8>)
 8008fa0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fa4:	f7f7 fc6a 	bl	800087c <__aeabi_ddiv>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4610      	mov	r0, r2
 8008fae:	4619      	mov	r1, r3
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <setDuttyCycle+0x1ac>)
 8008fb6:	f7f7 f97f 	bl	80002b8 <__aeabi_dsub>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681c      	ldr	r4, [r3, #0]
 8008fc6:	f7f7 fe07 	bl	8000bd8 <__aeabi_d2uiz>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008fce:	e000      	b.n	8008fd2 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8008fd0:	bf00      	nop
	}

	}// fin del switch-case

}
 8008fd2:	bf00      	nop
 8008fd4:	372c      	adds	r7, #44	; 0x2c
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd90      	pop	{r4, r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	200133d8 	.word	0x200133d8
 8008fe0:	40590000 	.word	0x40590000
 8008fe4:	3ff00000 	.word	0x3ff00000

08008fe8 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b08b      	sub	sp, #44	; 0x2c
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	7a1b      	ldrb	r3, [r3, #8]
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	f200 80d3 	bhi.w	80091a0 <setDuttyCycleAfOpt+0x1b8>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <setDuttyCycleAfOpt+0x18>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009011 	.word	0x08009011
 8009004:	08009075 	.word	0x08009075
 8009008:	080090d9 	.word	0x080090d9
 800900c:	0800913d 	.word	0x0800913d
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	edd3 7a06 	vldr	s15, [r3, #24]
 8009016:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80091ac <setDuttyCycleAfOpt+0x1c4>
 800901a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800901e:	4b64      	ldr	r3, [pc, #400]	; (80091b0 <setDuttyCycleAfOpt+0x1c8>)
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800902a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902e:	ee17 0a90 	vmov	r0, s15
 8009032:	f7f7 faa1 	bl	8000578 <__aeabi_f2d>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	4b5c      	ldr	r3, [pc, #368]	; (80091b4 <setDuttyCycleAfOpt+0x1cc>)
 8009044:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009048:	f7f7 fc18 	bl	800087c <__aeabi_ddiv>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4610      	mov	r0, r2
 8009052:	4619      	mov	r1, r3
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	4b57      	ldr	r3, [pc, #348]	; (80091b8 <setDuttyCycleAfOpt+0x1d0>)
 800905a:	f7f7 f92d 	bl	80002b8 <__aeabi_dsub>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681c      	ldr	r4, [r3, #0]
 800906a:	f7f7 fdb5 	bl	8000bd8 <__aeabi_d2uiz>
 800906e:	4603      	mov	r3, r0
 8009070:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8009072:	e096      	b.n	80091a2 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	edd3 7a06 	vldr	s15, [r3, #24]
 800907a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80091ac <setDuttyCycleAfOpt+0x1c4>
 800907e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009082:	4b4b      	ldr	r3, [pc, #300]	; (80091b0 <setDuttyCycleAfOpt+0x1c8>)
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	ee17 0a90 	vmov	r0, s15
 8009096:	f7f7 fa6f 	bl	8000578 <__aeabi_f2d>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 80090a2:	f04f 0200 	mov.w	r2, #0
 80090a6:	4b43      	ldr	r3, [pc, #268]	; (80091b4 <setDuttyCycleAfOpt+0x1cc>)
 80090a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80090ac:	f7f7 fbe6 	bl	800087c <__aeabi_ddiv>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4610      	mov	r0, r2
 80090b6:	4619      	mov	r1, r3
 80090b8:	f04f 0200 	mov.w	r2, #0
 80090bc:	4b3e      	ldr	r3, [pc, #248]	; (80091b8 <setDuttyCycleAfOpt+0x1d0>)
 80090be:	f7f7 f8fb 	bl	80002b8 <__aeabi_dsub>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681c      	ldr	r4, [r3, #0]
 80090ce:	f7f7 fd83 	bl	8000bd8 <__aeabi_d2uiz>
 80090d2:	4603      	mov	r3, r0
 80090d4:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 80090d6:	e064      	b.n	80091a2 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	edd3 7a06 	vldr	s15, [r3, #24]
 80090de:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80091ac <setDuttyCycleAfOpt+0x1c4>
 80090e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090e6:	4b32      	ldr	r3, [pc, #200]	; (80091b0 <setDuttyCycleAfOpt+0x1c8>)
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f6:	ee17 0a90 	vmov	r0, s15
 80090fa:	f7f7 fa3d 	bl	8000578 <__aeabi_f2d>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	4b2a      	ldr	r3, [pc, #168]	; (80091b4 <setDuttyCycleAfOpt+0x1cc>)
 800910c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009110:	f7f7 fbb4 	bl	800087c <__aeabi_ddiv>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4610      	mov	r0, r2
 800911a:	4619      	mov	r1, r3
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	4b25      	ldr	r3, [pc, #148]	; (80091b8 <setDuttyCycleAfOpt+0x1d0>)
 8009122:	f7f7 f8c9 	bl	80002b8 <__aeabi_dsub>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4610      	mov	r0, r2
 800912c:	4619      	mov	r1, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681c      	ldr	r4, [r3, #0]
 8009132:	f7f7 fd51 	bl	8000bd8 <__aeabi_d2uiz>
 8009136:	4603      	mov	r3, r0
 8009138:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800913a:	e032      	b.n	80091a2 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	edd3 7a06 	vldr	s15, [r3, #24]
 8009142:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80091ac <setDuttyCycleAfOpt+0x1c4>
 8009146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800914a:	4b19      	ldr	r3, [pc, #100]	; (80091b0 <setDuttyCycleAfOpt+0x1c8>)
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915a:	ee17 0a90 	vmov	r0, s15
 800915e:	f7f7 fa0b 	bl	8000578 <__aeabi_f2d>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800916a:	f04f 0200 	mov.w	r2, #0
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <setDuttyCycleAfOpt+0x1cc>)
 8009170:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009174:	f7f7 fb82 	bl	800087c <__aeabi_ddiv>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4610      	mov	r0, r2
 800917e:	4619      	mov	r1, r3
 8009180:	f04f 0200 	mov.w	r2, #0
 8009184:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <setDuttyCycleAfOpt+0x1d0>)
 8009186:	f7f7 f897 	bl	80002b8 <__aeabi_dsub>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4610      	mov	r0, r2
 8009190:	4619      	mov	r1, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681c      	ldr	r4, [r3, #0]
 8009196:	f7f7 fd1f 	bl	8000bd8 <__aeabi_d2uiz>
 800919a:	4603      	mov	r3, r0
 800919c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800919e:	e000      	b.n	80091a2 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 80091a0:	bf00      	nop
	}

	}// fin del switch-case


}
 80091a2:	bf00      	nop
 80091a4:	372c      	adds	r7, #44	; 0x2c
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd90      	pop	{r4, r7, pc}
 80091aa:	bf00      	nop
 80091ac:	42c80000 	.word	0x42c80000
 80091b0:	200133d8 	.word	0x200133d8
 80091b4:	40590000 	.word	0x40590000
 80091b8:	3ff00000 	.word	0x3ff00000

080091bc <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7a1b      	ldrb	r3, [r3, #8]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d82f      	bhi.n	800922c <disableOutput+0x70>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <disableOutput+0x18>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	080091e5 	.word	0x080091e5
 80091d8:	080091f7 	.word	0x080091f7
 80091dc:	08009209 	.word	0x08009209
 80091e0:	0800921b 	.word	0x0800921b
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6a1a      	ldr	r2, [r3, #32]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	621a      	str	r2, [r3, #32]

			break;
 80091f4:	e01b      	b.n	800922e <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0210 	bic.w	r2, r2, #16
 8009204:	621a      	str	r2, [r3, #32]

			break;
 8009206:	e012      	b.n	800922e <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6a1a      	ldr	r2, [r3, #32]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009216:	621a      	str	r2, [r3, #32]

			break;
 8009218:	e009      	b.n	800922e <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6a1a      	ldr	r2, [r3, #32]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009228:	621a      	str	r2, [r3, #32]

			break;
 800922a:	e000      	b.n	800922e <disableOutput+0x72>
		}

		default: {
			break;
 800922c:	bf00      	nop
		}
		}

	return RESET;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	7a1b      	ldrb	r3, [r3, #8]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d82f      	bhi.n	80092ac <PWMx_Toggle+0x70>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <PWMx_Toggle+0x18>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009265 	.word	0x08009265
 8009258:	08009277 	.word	0x08009277
 800925c:	08009289 	.word	0x08009289
 8009260:	0800929b 	.word	0x0800929b
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6a1a      	ldr	r2, [r3, #32]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f082 0202 	eor.w	r2, r2, #2
 8009272:	621a      	str	r2, [r3, #32]

				break;
 8009274:	e01b      	b.n	80092ae <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6a1a      	ldr	r2, [r3, #32]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f082 0220 	eor.w	r2, r2, #32
 8009284:	621a      	str	r2, [r3, #32]

				break;
 8009286:	e012      	b.n	80092ae <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6a1a      	ldr	r2, [r3, #32]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8009296:	621a      	str	r2, [r3, #32]

				break;
 8009298:	e009      	b.n	80092ae <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6a1a      	ldr	r2, [r3, #32]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80092a8:	621a      	str	r2, [r3, #32]

				break;
 80092aa:	e000      	b.n	80092ae <PWMx_Toggle+0x72>
			}

			default: {
				break;
 80092ac:	bf00      	nop
			}
			}


}
 80092ae:	bf00      	nop
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop

080092bc <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 80092c6:	4b92      	ldr	r3, [pc, #584]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a91      	ldr	r2, [pc, #580]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80092cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092d0:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80092d2:	4b8f      	ldr	r3, [pc, #572]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80092d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d8:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 80092da:	4b8e      	ldr	r3, [pc, #568]	; (8009514 <RCC_enableMaxFrequencies+0x258>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a8d      	ldr	r2, [pc, #564]	; (8009514 <RCC_enableMaxFrequencies+0x258>)
 80092e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092e4:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 80092e6:	4b8a      	ldr	r3, [pc, #552]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	4a89      	ldr	r2, [pc, #548]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80092ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80092f0:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	f200 82fc 	bhi.w	80098f2 <RCC_enableMaxFrequencies+0x636>
 80092fa:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <RCC_enableMaxFrequencies+0x44>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009325 	.word	0x08009325
 8009304:	080093c7 	.word	0x080093c7
 8009308:	08009469 	.word	0x08009469
 800930c:	0800951d 	.word	0x0800951d
 8009310:	080095bf 	.word	0x080095bf
 8009314:	08009661 	.word	0x08009661
 8009318:	0800970d 	.word	0x0800970d
 800931c:	080097af 	.word	0x080097af
 8009320:	08009851 	.word	0x08009851
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009324:	4b7a      	ldr	r3, [pc, #488]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	4a79      	ldr	r2, [pc, #484]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800932a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800932e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009330:	4b77      	ldr	r3, [pc, #476]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	4a76      	ldr	r2, [pc, #472]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009336:	f043 0310 	orr.w	r3, r3, #16
 800933a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800933c:	4b74      	ldr	r3, [pc, #464]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	4a73      	ldr	r2, [pc, #460]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009342:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800934c:	4b70      	ldr	r3, [pc, #448]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	4a6f      	ldr	r2, [pc, #444]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009352:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8009356:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009358:	4b6d      	ldr	r3, [pc, #436]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	4a6c      	ldr	r2, [pc, #432]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800935e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009362:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8009364:	4b6a      	ldr	r3, [pc, #424]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	4a69      	ldr	r2, [pc, #420]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800936a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800936e:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009370:	4b67      	ldr	r3, [pc, #412]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	4a66      	ldr	r2, [pc, #408]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800937a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800937c:	4b64      	ldr	r3, [pc, #400]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	4a63      	ldr	r2, [pc, #396]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009382:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009386:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8009388:	4b61      	ldr	r3, [pc, #388]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	4a60      	ldr	r2, [pc, #384]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800938e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009392:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009394:	4b5e      	ldr	r3, [pc, #376]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a5d      	ldr	r2, [pc, #372]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800939a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800939e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093a0:	e000      	b.n	80093a4 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80093a2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093a4:	4b5a      	ldr	r3, [pc, #360]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f8      	beq.n	80093a2 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80093b0:	4b59      	ldr	r3, [pc, #356]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a58      	ldr	r2, [pc, #352]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 80093b6:	f023 030f 	bic.w	r3, r3, #15
 80093ba:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80093bc:	4b56      	ldr	r3, [pc, #344]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 80093be:	4a56      	ldr	r2, [pc, #344]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6013      	str	r3, [r2, #0]

			break;
 80093c4:	e296      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80093c6:	4b52      	ldr	r3, [pc, #328]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	4a51      	ldr	r2, [pc, #324]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093d0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80093d2:	4b4f      	ldr	r3, [pc, #316]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	4a4e      	ldr	r2, [pc, #312]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093d8:	f043 0310 	orr.w	r3, r3, #16
 80093dc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80093de:	4b4c      	ldr	r3, [pc, #304]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4a4b      	ldr	r2, [pc, #300]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093e4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80093e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80093ee:	4b48      	ldr	r3, [pc, #288]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	4a47      	ldr	r2, [pc, #284]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093f4:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80093f8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80093fa:	4b45      	ldr	r3, [pc, #276]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	4a44      	ldr	r2, [pc, #272]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009400:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009404:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8009406:	4b42      	ldr	r3, [pc, #264]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	4a41      	ldr	r2, [pc, #260]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800940c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009410:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009412:	4b3f      	ldr	r3, [pc, #252]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	4a3e      	ldr	r2, [pc, #248]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800941c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800941e:	4b3c      	ldr	r3, [pc, #240]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	4a3b      	ldr	r2, [pc, #236]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009428:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800942a:	4b39      	ldr	r3, [pc, #228]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	4a38      	ldr	r2, [pc, #224]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009434:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009436:	4b36      	ldr	r3, [pc, #216]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a35      	ldr	r2, [pc, #212]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800943c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009440:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009442:	e000      	b.n	8009446 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8009444:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009446:	4b32      	ldr	r3, [pc, #200]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0f8      	beq.n	8009444 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009452:	4b31      	ldr	r3, [pc, #196]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a30      	ldr	r2, [pc, #192]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 8009458:	f023 030f 	bic.w	r3, r3, #15
 800945c:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800945e:	4b2e      	ldr	r3, [pc, #184]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 8009460:	4a2d      	ldr	r2, [pc, #180]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6013      	str	r3, [r2, #0]

			break;
 8009466:	e245      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009468:	4b29      	ldr	r3, [pc, #164]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	4a28      	ldr	r2, [pc, #160]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800946e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009472:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009474:	4b26      	ldr	r3, [pc, #152]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	4a25      	ldr	r2, [pc, #148]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800947a:	f043 0310 	orr.w	r3, r3, #16
 800947e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009480:	4b23      	ldr	r3, [pc, #140]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	4a22      	ldr	r2, [pc, #136]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009486:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800948a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800948e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8009490:	4b1f      	ldr	r3, [pc, #124]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4a1e      	ldr	r2, [pc, #120]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 8009496:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800949a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800949c:	4b1c      	ldr	r3, [pc, #112]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4a1b      	ldr	r2, [pc, #108]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80094a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80094a8:	4b19      	ldr	r3, [pc, #100]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4a18      	ldr	r2, [pc, #96]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80094b4:	4b16      	ldr	r3, [pc, #88]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	4a15      	ldr	r2, [pc, #84]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094be:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80094c0:	4b13      	ldr	r3, [pc, #76]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	4a12      	ldr	r2, [pc, #72]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094ca:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80094cc:	4b10      	ldr	r3, [pc, #64]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	4a0f      	ldr	r2, [pc, #60]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094d6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80094d8:	4b0d      	ldr	r3, [pc, #52]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a0c      	ldr	r2, [pc, #48]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094e2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80094e4:	e000      	b.n	80094e8 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 80094e6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80094e8:	4b09      	ldr	r3, [pc, #36]	; (8009510 <RCC_enableMaxFrequencies+0x254>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0f8      	beq.n	80094e6 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80094f4:	4b08      	ldr	r3, [pc, #32]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a07      	ldr	r2, [pc, #28]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 80094fa:	f023 030f 	bic.w	r3, r3, #15
 80094fe:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a04      	ldr	r2, [pc, #16]	; (8009518 <RCC_enableMaxFrequencies+0x25c>)
 8009506:	f043 0301 	orr.w	r3, r3, #1
 800950a:	6013      	str	r3, [r2, #0]


			break;
 800950c:	e1f2      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
 800950e:	bf00      	nop
 8009510:	40023800 	.word	0x40023800
 8009514:	40007000 	.word	0x40007000
 8009518:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800951c:	4b79      	ldr	r3, [pc, #484]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a78      	ldr	r2, [pc, #480]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009526:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009528:	4b76      	ldr	r3, [pc, #472]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	4a75      	ldr	r2, [pc, #468]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800952e:	f043 0310 	orr.w	r3, r3, #16
 8009532:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009534:	4b73      	ldr	r3, [pc, #460]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	4a72      	ldr	r2, [pc, #456]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800953a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800953e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009542:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8009544:	4b6f      	ldr	r3, [pc, #444]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	4a6e      	ldr	r2, [pc, #440]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800954a:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800954e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009550:	4b6c      	ldr	r3, [pc, #432]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4a6b      	ldr	r2, [pc, #428]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009556:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800955a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800955c:	4b69      	ldr	r3, [pc, #420]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800955e:	4a69      	ldr	r2, [pc, #420]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009564:	4b67      	ldr	r3, [pc, #412]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	4a66      	ldr	r2, [pc, #408]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800956a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800956e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009570:	4b64      	ldr	r3, [pc, #400]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	4a63      	ldr	r2, [pc, #396]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800957a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800957c:	4b61      	ldr	r3, [pc, #388]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	4a60      	ldr	r2, [pc, #384]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009586:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009588:	4b5e      	ldr	r3, [pc, #376]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a5d      	ldr	r2, [pc, #372]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800958e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009592:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009594:	e000      	b.n	8009598 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8009596:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009598:	4b5a      	ldr	r3, [pc, #360]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d0f8      	beq.n	8009596 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80095a4:	4b58      	ldr	r3, [pc, #352]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a57      	ldr	r2, [pc, #348]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80095aa:	f023 030f 	bic.w	r3, r3, #15
 80095ae:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80095b0:	4b55      	ldr	r3, [pc, #340]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a54      	ldr	r2, [pc, #336]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	6013      	str	r3, [r2, #0]

			break;
 80095bc:	e19a      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80095be:	4b51      	ldr	r3, [pc, #324]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4a50      	ldr	r2, [pc, #320]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095c8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80095ca:	4b4e      	ldr	r3, [pc, #312]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	4a4d      	ldr	r2, [pc, #308]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095d0:	f043 0310 	orr.w	r3, r3, #16
 80095d4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80095d6:	4b4b      	ldr	r3, [pc, #300]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	4a4a      	ldr	r2, [pc, #296]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80095e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80095e6:	4b47      	ldr	r3, [pc, #284]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	4a46      	ldr	r2, [pc, #280]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095ec:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80095f0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80095f2:	4b44      	ldr	r3, [pc, #272]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	4a43      	ldr	r2, [pc, #268]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80095f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80095fc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80095fe:	4b41      	ldr	r3, [pc, #260]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009600:	4a40      	ldr	r2, [pc, #256]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009606:	4b3f      	ldr	r3, [pc, #252]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	4a3e      	ldr	r2, [pc, #248]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800960c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009610:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009612:	4b3c      	ldr	r3, [pc, #240]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	4a3b      	ldr	r2, [pc, #236]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800961c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800961e:	4b39      	ldr	r3, [pc, #228]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	4a38      	ldr	r2, [pc, #224]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009628:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800962a:	4b36      	ldr	r3, [pc, #216]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a35      	ldr	r2, [pc, #212]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009634:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009636:	e000      	b.n	800963a <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8009638:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800963a:	4b32      	ldr	r3, [pc, #200]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0f8      	beq.n	8009638 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009646:	4b30      	ldr	r3, [pc, #192]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a2f      	ldr	r2, [pc, #188]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 800964c:	f023 030f 	bic.w	r3, r3, #15
 8009650:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009652:	4b2d      	ldr	r3, [pc, #180]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a2c      	ldr	r2, [pc, #176]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	6013      	str	r3, [r2, #0]

			break;
 800965e:	e149      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009660:	4b28      	ldr	r3, [pc, #160]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	4a27      	ldr	r2, [pc, #156]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800966a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800966c:	4b25      	ldr	r3, [pc, #148]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4a24      	ldr	r2, [pc, #144]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009672:	f043 0310 	orr.w	r3, r3, #16
 8009676:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009678:	4b22      	ldr	r3, [pc, #136]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	4a21      	ldr	r2, [pc, #132]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800967e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009686:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8009688:	4b1e      	ldr	r3, [pc, #120]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800968e:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8009692:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009694:	4b1b      	ldr	r3, [pc, #108]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	4a1a      	ldr	r2, [pc, #104]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 800969a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800969e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80096a0:	4b18      	ldr	r3, [pc, #96]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096a2:	4a18      	ldr	r2, [pc, #96]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80096a8:	4b16      	ldr	r3, [pc, #88]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	4a15      	ldr	r2, [pc, #84]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80096b4:	4b13      	ldr	r3, [pc, #76]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	4a12      	ldr	r2, [pc, #72]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096be:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80096c0:	4b10      	ldr	r3, [pc, #64]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4a0f      	ldr	r2, [pc, #60]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096ca:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80096cc:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0c      	ldr	r2, [pc, #48]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096d6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80096d8:	e000      	b.n	80096dc <RCC_enableMaxFrequencies+0x420>
				__NOP();
 80096da:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <RCC_enableMaxFrequencies+0x448>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d0f8      	beq.n	80096da <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a06      	ldr	r2, [pc, #24]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80096ee:	f023 030f 	bic.w	r3, r3, #15
 80096f2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80096f4:	4b04      	ldr	r3, [pc, #16]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a03      	ldr	r2, [pc, #12]	; (8009708 <RCC_enableMaxFrequencies+0x44c>)
 80096fa:	f043 0302 	orr.w	r3, r3, #2
 80096fe:	6013      	str	r3, [r2, #0]

			break;
 8009700:	e0f8      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
 8009702:	bf00      	nop
 8009704:	40023800 	.word	0x40023800
 8009708:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800970c:	4b84      	ldr	r3, [pc, #528]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	4a83      	ldr	r2, [pc, #524]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009716:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009718:	4b81      	ldr	r3, [pc, #516]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	4a80      	ldr	r2, [pc, #512]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800971e:	f043 0310 	orr.w	r3, r3, #16
 8009722:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009724:	4b7e      	ldr	r3, [pc, #504]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	4a7d      	ldr	r2, [pc, #500]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800972a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800972e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009732:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8009734:	4b7a      	ldr	r3, [pc, #488]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	4a79      	ldr	r2, [pc, #484]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800973a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800973e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009740:	4b77      	ldr	r3, [pc, #476]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	4a76      	ldr	r2, [pc, #472]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009746:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800974a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800974c:	4b74      	ldr	r3, [pc, #464]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800974e:	4a74      	ldr	r2, [pc, #464]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009754:	4b72      	ldr	r3, [pc, #456]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	4a71      	ldr	r2, [pc, #452]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800975a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800975e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009760:	4b6f      	ldr	r3, [pc, #444]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	4a6e      	ldr	r2, [pc, #440]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800976a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800976c:	4b6c      	ldr	r3, [pc, #432]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4a6b      	ldr	r2, [pc, #428]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009772:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009776:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009778:	4b69      	ldr	r3, [pc, #420]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a68      	ldr	r2, [pc, #416]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800977e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009782:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009784:	e000      	b.n	8009788 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8009786:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009788:	4b65      	ldr	r3, [pc, #404]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0f8      	beq.n	8009786 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009794:	4b63      	ldr	r3, [pc, #396]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a62      	ldr	r2, [pc, #392]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 800979a:	f023 030f 	bic.w	r3, r3, #15
 800979e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80097a0:	4b60      	ldr	r3, [pc, #384]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a5f      	ldr	r2, [pc, #380]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 80097a6:	f043 0302 	orr.w	r3, r3, #2
 80097aa:	6013      	str	r3, [r2, #0]

			break;
 80097ac:	e0a2      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80097ae:	4b5c      	ldr	r3, [pc, #368]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4a5b      	ldr	r2, [pc, #364]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097b8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80097ba:	4b59      	ldr	r3, [pc, #356]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	4a58      	ldr	r2, [pc, #352]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097c0:	f043 0310 	orr.w	r3, r3, #16
 80097c4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80097c6:	4b56      	ldr	r3, [pc, #344]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4a55      	ldr	r2, [pc, #340]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097cc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80097d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 80097d6:	4b52      	ldr	r3, [pc, #328]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	4a51      	ldr	r2, [pc, #324]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097dc:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 80097e0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80097e2:	4b4f      	ldr	r3, [pc, #316]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	4a4e      	ldr	r2, [pc, #312]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097e8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80097ec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80097ee:	4b4c      	ldr	r3, [pc, #304]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097f0:	4a4b      	ldr	r2, [pc, #300]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80097f6:	4b4a      	ldr	r3, [pc, #296]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	4a49      	ldr	r2, [pc, #292]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80097fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009800:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009802:	4b47      	ldr	r3, [pc, #284]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	4a46      	ldr	r2, [pc, #280]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009808:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800980c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800980e:	4b44      	ldr	r3, [pc, #272]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	4a43      	ldr	r2, [pc, #268]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009818:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800981a:	4b41      	ldr	r3, [pc, #260]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a40      	ldr	r2, [pc, #256]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009824:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009826:	e000      	b.n	800982a <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8009828:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800982a:	4b3d      	ldr	r3, [pc, #244]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0f8      	beq.n	8009828 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009836:	4b3b      	ldr	r3, [pc, #236]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a3a      	ldr	r2, [pc, #232]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 800983c:	f023 030f 	bic.w	r3, r3, #15
 8009840:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009842:	4b38      	ldr	r3, [pc, #224]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a37      	ldr	r2, [pc, #220]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 8009848:	f043 0302 	orr.w	r3, r3, #2
 800984c:	6013      	str	r3, [r2, #0]

			break;
 800984e:	e051      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009850:	4b33      	ldr	r3, [pc, #204]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4a32      	ldr	r2, [pc, #200]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800985a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 800985c:	4b30      	ldr	r3, [pc, #192]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4a2f      	ldr	r2, [pc, #188]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009862:	f043 0308 	orr.w	r3, r3, #8
 8009866:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009868:	4b2d      	ldr	r3, [pc, #180]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	4a2c      	ldr	r2, [pc, #176]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800986e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009876:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8009878:	4b29      	ldr	r3, [pc, #164]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	4a28      	ldr	r2, [pc, #160]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800987e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8009882:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009884:	4b26      	ldr	r3, [pc, #152]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4a25      	ldr	r2, [pc, #148]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800988a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800988e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009890:	4b23      	ldr	r3, [pc, #140]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009892:	4a23      	ldr	r2, [pc, #140]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009898:	4b21      	ldr	r3, [pc, #132]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	4a20      	ldr	r2, [pc, #128]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 800989e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098a2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80098a4:	4b1e      	ldr	r3, [pc, #120]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	4a1d      	ldr	r2, [pc, #116]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ae:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80098b0:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	4a1a      	ldr	r2, [pc, #104]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098ba:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80098bc:	4b18      	ldr	r3, [pc, #96]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a17      	ldr	r2, [pc, #92]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098c6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80098c8:	e000      	b.n	80098cc <RCC_enableMaxFrequencies+0x610>
				__NOP();
 80098ca:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80098cc:	4b14      	ldr	r3, [pc, #80]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0f8      	beq.n	80098ca <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a11      	ldr	r2, [pc, #68]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 80098de:	f023 030f 	bic.w	r3, r3, #15
 80098e2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 80098e4:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a0e      	ldr	r2, [pc, #56]	; (8009924 <RCC_enableMaxFrequencies+0x668>)
 80098ea:	f043 0303 	orr.w	r3, r3, #3
 80098ee:	6013      	str	r3, [r2, #0]

			break;
 80098f0:	e000      	b.n	80098f4 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 80098f2:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80098f4:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	4a09      	ldr	r2, [pc, #36]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 80098fa:	f043 0302 	orr.w	r3, r3, #2
 80098fe:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009900:	e000      	b.n	8009904 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8009902:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <RCC_enableMaxFrequencies+0x664>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f003 0308 	and.w	r3, r3, #8
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0f8      	beq.n	8009902 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 8009910:	bf00      	nop
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	40023800 	.word	0x40023800
 8009924:	40023c00 	.word	0x40023c00

08009928 <__NVIC_EnableIRQ>:
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009936:	2b00      	cmp	r3, #0
 8009938:	db0b      	blt.n	8009952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	f003 021f 	and.w	r2, r3, #31
 8009940:	4907      	ldr	r1, [pc, #28]	; (8009960 <__NVIC_EnableIRQ+0x38>)
 8009942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009946:	095b      	lsrs	r3, r3, #5
 8009948:	2001      	movs	r0, #1
 800994a:	fa00 f202 	lsl.w	r2, r0, r2
 800994e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009952:	bf00      	nop
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	e000e100 	.word	0xe000e100

08009964 <__NVIC_SetPriority>:
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	6039      	str	r1, [r7, #0]
 800996e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009974:	2b00      	cmp	r3, #0
 8009976:	db0a      	blt.n	800998e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	b2da      	uxtb	r2, r3
 800997c:	490c      	ldr	r1, [pc, #48]	; (80099b0 <__NVIC_SetPriority+0x4c>)
 800997e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009982:	0112      	lsls	r2, r2, #4
 8009984:	b2d2      	uxtb	r2, r2
 8009986:	440b      	add	r3, r1
 8009988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800998c:	e00a      	b.n	80099a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	4908      	ldr	r1, [pc, #32]	; (80099b4 <__NVIC_SetPriority+0x50>)
 8009994:	79fb      	ldrb	r3, [r7, #7]
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	3b04      	subs	r3, #4
 800999c:	0112      	lsls	r2, r2, #4
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	440b      	add	r3, r1
 80099a2:	761a      	strb	r2, [r3, #24]
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	e000e100 	.word	0xe000e100
 80099b4:	e000ed00 	.word	0xe000ed00

080099b8 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80099c0:	b672      	cpsid	i
}
 80099c2:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a91      	ldr	r2, [pc, #580]	; (8009c10 <USART_Config+0x258>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d106      	bne.n	80099dc <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80099ce:	4b91      	ldr	r3, [pc, #580]	; (8009c14 <USART_Config+0x25c>)
 80099d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d2:	4a90      	ldr	r2, [pc, #576]	; (8009c14 <USART_Config+0x25c>)
 80099d4:	f043 0310 	orr.w	r3, r3, #16
 80099d8:	6453      	str	r3, [r2, #68]	; 0x44
 80099da:	e018      	b.n	8009a0e <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a8d      	ldr	r2, [pc, #564]	; (8009c18 <USART_Config+0x260>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d106      	bne.n	80099f4 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80099e6:	4b8b      	ldr	r3, [pc, #556]	; (8009c14 <USART_Config+0x25c>)
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	4a8a      	ldr	r2, [pc, #552]	; (8009c14 <USART_Config+0x25c>)
 80099ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f0:	6413      	str	r3, [r2, #64]	; 0x40
 80099f2:	e00c      	b.n	8009a0e <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a88      	ldr	r2, [pc, #544]	; (8009c1c <USART_Config+0x264>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d106      	bne.n	8009a0c <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80099fe:	4b85      	ldr	r3, [pc, #532]	; (8009c14 <USART_Config+0x25c>)
 8009a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a02:	4a84      	ldr	r2, [pc, #528]	; (8009c14 <USART_Config+0x25c>)
 8009a04:	f043 0320 	orr.w	r3, r3, #32
 8009a08:	6453      	str	r3, [r2, #68]	; 0x44
 8009a0a:	e000      	b.n	8009a0e <USART_Config+0x56>
	}
	else{
		__NOP();
 8009a0c:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2200      	movs	r2, #0
 8009a14:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7a5b      	ldrb	r3, [r3, #9]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d025      	beq.n	8009a72 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7a5b      	ldrb	r3, [r3, #9]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d110      	bne.n	8009a50 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009a3c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a4c:	60da      	str	r2, [r3, #12]
 8009a4e:	e018      	b.n	8009a82 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5e:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a6e:	60da      	str	r2, [r3, #12]
 8009a70:	e007      	b.n	8009a82 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a80:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7a1b      	ldrb	r3, [r3, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d108      	bne.n	8009a9c <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	e007      	b.n	8009aac <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68da      	ldr	r2, [r3, #12]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009aaa:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	7a9b      	ldrb	r3, [r3, #10]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d82f      	bhi.n	8009b14 <USART_Config+0x15c>
 8009ab4:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <USART_Config+0x104>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009acd 	.word	0x08009acd
 8009ac0:	08009adf 	.word	0x08009adf
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	08009b03 	.word	0x08009b03
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	691a      	ldr	r2, [r3, #16]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009ada:	611a      	str	r2, [r3, #16]
			break;
 8009adc:	e023      	b.n	8009b26 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009aec:	611a      	str	r2, [r3, #16]
			break;
 8009aee:	e01a      	b.n	8009b26 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	691a      	ldr	r2, [r3, #16]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009afe:	611a      	str	r2, [r3, #16]
			break;
 8009b00:	e011      	b.n	8009b26 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	691a      	ldr	r2, [r3, #16]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009b10:	611a      	str	r2, [r3, #16]
			break;
 8009b12:	e008      	b.n	8009b26 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691a      	ldr	r2, [r3, #16]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009b22:	611a      	str	r2, [r3, #16]
			break;
 8009b24:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681c      	ldr	r4, [r3, #0]
 8009b2e:	4611      	mov	r1, r2
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f8d9 	bl	8009ce8 <brrCalculus>
 8009b36:	4603      	mov	r3, r0
 8009b38:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	799b      	ldrb	r3, [r3, #6]
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d82e      	bhi.n	8009ba0 <USART_Config+0x1e8>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <USART_Config+0x190>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b59 	.word	0x08009b59
 8009b4c:	08009b6b 	.word	0x08009b6b
 8009b50:	08009b7d 	.word	0x08009b7d
 8009b54:	08009b8f 	.word	0x08009b8f
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f042 0208 	orr.w	r2, r2, #8
 8009b66:	60da      	str	r2, [r3, #12]
			break;
 8009b68:	e023      	b.n	8009bb2 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f042 0204 	orr.w	r2, r2, #4
 8009b78:	60da      	str	r2, [r3, #12]
			break;
 8009b7a:	e01a      	b.n	8009bb2 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68da      	ldr	r2, [r3, #12]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 020c 	orr.w	r2, r2, #12
 8009b8a:	60da      	str	r2, [r3, #12]
			break;
 8009b8c:	e011      	b.n	8009bb2 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 020c 	bic.w	r2, r2, #12
 8009b9c:	60da      	str	r2, [r3, #12]
			break;
 8009b9e:	e008      	b.n	8009bb2 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 020c 	bic.w	r2, r2, #12
 8009bae:	60da      	str	r2, [r3, #12]
			break;
 8009bb0:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	799b      	ldrb	r3, [r3, #6]
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d008      	beq.n	8009bcc <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68da      	ldr	r2, [r3, #12]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bc8:	60da      	str	r2, [r3, #12]
 8009bca:	e007      	b.n	8009bdc <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68da      	ldr	r2, [r3, #12]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bda:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	795b      	ldrb	r3, [r3, #5]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d139      	bne.n	8009c58 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0220 	orr.w	r2, r2, #32
 8009bf2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a05      	ldr	r2, [pc, #20]	; (8009c10 <USART_Config+0x258>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d110      	bne.n	8009c20 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009bfe:	2025      	movs	r0, #37	; 0x25
 8009c00:	f7ff fe92 	bl	8009928 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8009c04:	2101      	movs	r1, #1
 8009c06:	2025      	movs	r0, #37	; 0x25
 8009c08:	f7ff feac 	bl	8009964 <__NVIC_SetPriority>
 8009c0c:	e02c      	b.n	8009c68 <USART_Config+0x2b0>
 8009c0e:	bf00      	nop
 8009c10:	40011000 	.word	0x40011000
 8009c14:	40023800 	.word	0x40023800
 8009c18:	40004400 	.word	0x40004400
 8009c1c:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a2c      	ldr	r2, [pc, #176]	; (8009cd8 <USART_Config+0x320>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d107      	bne.n	8009c3a <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009c2a:	2026      	movs	r0, #38	; 0x26
 8009c2c:	f7ff fe7c 	bl	8009928 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8009c30:	2101      	movs	r1, #1
 8009c32:	2026      	movs	r0, #38	; 0x26
 8009c34:	f7ff fe96 	bl	8009964 <__NVIC_SetPriority>
 8009c38:	e016      	b.n	8009c68 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a27      	ldr	r2, [pc, #156]	; (8009cdc <USART_Config+0x324>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d107      	bne.n	8009c54 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8009c44:	2047      	movs	r0, #71	; 0x47
 8009c46:	f7ff fe6f 	bl	8009928 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	2047      	movs	r0, #71	; 0x47
 8009c4e:	f7ff fe89 	bl	8009964 <__NVIC_SetPriority>
 8009c52:	e009      	b.n	8009c68 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8009c54:	bf00      	nop
 8009c56:	e007      	b.n	8009c68 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68da      	ldr	r2, [r3, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f022 0220 	bic.w	r2, r2, #32
 8009c66:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	791b      	ldrb	r3, [r3, #4]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d124      	bne.n	8009cba <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c7e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <USART_Config+0x328>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d103      	bne.n	8009c92 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009c8a:	2025      	movs	r0, #37	; 0x25
 8009c8c:	f7ff fe4c 	bl	8009928 <__NVIC_EnableIRQ>
 8009c90:	e01b      	b.n	8009cca <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a10      	ldr	r2, [pc, #64]	; (8009cd8 <USART_Config+0x320>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d103      	bne.n	8009ca4 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009c9c:	2026      	movs	r0, #38	; 0x26
 8009c9e:	f7ff fe43 	bl	8009928 <__NVIC_EnableIRQ>
 8009ca2:	e012      	b.n	8009cca <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <USART_Config+0x324>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d103      	bne.n	8009cb6 <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8009cae:	2047      	movs	r0, #71	; 0x47
 8009cb0:	f7ff fe3a 	bl	8009928 <__NVIC_EnableIRQ>
 8009cb4:	e009      	b.n	8009cca <USART_Config+0x312>
		}
		else{
				__NOP();
 8009cb6:	bf00      	nop
 8009cb8:	e007      	b.n	8009cca <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68da      	ldr	r2, [r3, #12]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cc8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cca:	b662      	cpsie	i
}
 8009ccc:	bf00      	nop
	}

	__enable_irq();
}
 8009cce:	bf00      	nop
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd90      	pop	{r4, r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40004400 	.word	0x40004400
 8009cdc:	40011400 	.word	0x40011400
 8009ce0:	40011000 	.word	0x40011000
 8009ce4:	00000000 	.word	0x00000000

08009ce8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8009ce8:	b5b0      	push	{r4, r5, r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	79db      	ldrb	r3, [r3, #7]
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	f200 8217 	bhi.w	800a12a <brrCalculus+0x442>
 8009cfc:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <brrCalculus+0x1c>)
 8009cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d02:	bf00      	nop
 8009d04:	08009d15 	.word	0x08009d15
 8009d08:	08009e0f 	.word	0x08009e0f
 8009d0c:	08009f29 	.word	0x08009f29
 8009d10:	0800a031 	.word	0x0800a031

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8009d14:	4980      	ldr	r1, [pc, #512]	; (8009f18 <brrCalculus+0x230>)
 8009d16:	a37c      	add	r3, pc, #496	; (adr r3, 8009f08 <brrCalculus+0x220>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	ee17 0a90 	vmov	r0, s15
 8009d2e:	f7f6 fc23 	bl	8000578 <__aeabi_f2d>
 8009d32:	4b79      	ldr	r3, [pc, #484]	; (8009f18 <brrCalculus+0x230>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 fc76 	bl	8000628 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4975      	ldr	r1, [pc, #468]	; (8009f18 <brrCalculus+0x230>)
 8009d42:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009d46:	4b74      	ldr	r3, [pc, #464]	; (8009f18 <brrCalculus+0x230>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4619      	mov	r1, r3
 8009d50:	f7f6 ff1a 	bl	8000b88 <__aeabi_d2iz>
 8009d54:	4603      	mov	r3, r0
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	4b70      	ldr	r3, [pc, #448]	; (8009f1c <brrCalculus+0x234>)
 8009d5a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009d5c:	4b6e      	ldr	r3, [pc, #440]	; (8009f18 <brrCalculus+0x230>)
 8009d5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d62:	4b6d      	ldr	r3, [pc, #436]	; (8009f18 <brrCalculus+0x230>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f7f6 ff0c 	bl	8000b88 <__aeabi_d2iz>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7f6 fbee 	bl	8000554 <__aeabi_i2d>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 fa9a 	bl	80002b8 <__aeabi_dsub>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4610      	mov	r0, r2
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	f7f6 ff44 	bl	8000c18 <__aeabi_d2f>
 8009d90:	4603      	mov	r3, r0
 8009d92:	4a63      	ldr	r2, [pc, #396]	; (8009f20 <brrCalculus+0x238>)
 8009d94:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009d96:	4b62      	ldr	r3, [pc, #392]	; (8009f20 <brrCalculus+0x238>)
 8009d98:	edd3 7a00 	vldr	s15, [r3]
 8009d9c:	2004      	movs	r0, #4
 8009d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009da2:	f000 fa6d 	bl	800a280 <roundToNDecimals>
 8009da6:	eef0 7a40 	vmov.f32	s15, s0
 8009daa:	4b5d      	ldr	r3, [pc, #372]	; (8009f20 <brrCalculus+0x238>)
 8009dac:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009db0:	4b5b      	ldr	r3, [pc, #364]	; (8009f20 <brrCalculus+0x238>)
 8009db2:	edd3 7a00 	vldr	s15, [r3]
 8009db6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dbe:	4b58      	ldr	r3, [pc, #352]	; (8009f20 <brrCalculus+0x238>)
 8009dc0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009dc4:	4b56      	ldr	r3, [pc, #344]	; (8009f20 <brrCalculus+0x238>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f6 fbd5 	bl	8000578 <__aeabi_f2d>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	ec43 2b10 	vmov	d0, r2, r3
 8009dd6:	f003 fac7 	bl	800d368 <round>
 8009dda:	ec53 2b10 	vmov	r2, r3, d0
 8009dde:	4610      	mov	r0, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	f7f6 ff19 	bl	8000c18 <__aeabi_d2f>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4a4d      	ldr	r2, [pc, #308]	; (8009f20 <brrCalculus+0x238>)
 8009dea:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009dec:	4b4b      	ldr	r3, [pc, #300]	; (8009f1c <brrCalculus+0x234>)
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	011b      	lsls	r3, r3, #4
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	4b4a      	ldr	r3, [pc, #296]	; (8009f20 <brrCalculus+0x238>)
 8009df6:	edd3 7a00 	vldr	s15, [r3]
 8009dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dfe:	ee17 3a90 	vmov	r3, s15
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	4313      	orrs	r3, r2
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	4b46      	ldr	r3, [pc, #280]	; (8009f24 <brrCalculus+0x23c>)
 8009e0a:	801a      	strh	r2, [r3, #0]


		break;
 8009e0c:	e18f      	b.n	800a12e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8009e0e:	4942      	ldr	r1, [pc, #264]	; (8009f18 <brrCalculus+0x230>)
 8009e10:	a33f      	add	r3, pc, #252	; (adr r3, 8009f10 <brrCalculus+0x228>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e24:	ee17 0a90 	vmov	r0, s15
 8009e28:	f7f6 fba6 	bl	8000578 <__aeabi_f2d>
 8009e2c:	4b3a      	ldr	r3, [pc, #232]	; (8009f18 <brrCalculus+0x230>)
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f7f6 fbf9 	bl	8000628 <__aeabi_dmul>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4937      	ldr	r1, [pc, #220]	; (8009f18 <brrCalculus+0x230>)
 8009e3c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009e40:	4b35      	ldr	r3, [pc, #212]	; (8009f18 <brrCalculus+0x230>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	4610      	mov	r0, r2
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f7f6 fe9d 	bl	8000b88 <__aeabi_d2iz>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	4b32      	ldr	r3, [pc, #200]	; (8009f1c <brrCalculus+0x234>)
 8009e54:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009e56:	4b30      	ldr	r3, [pc, #192]	; (8009f18 <brrCalculus+0x230>)
 8009e58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009e5c:	4b2e      	ldr	r3, [pc, #184]	; (8009f18 <brrCalculus+0x230>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	4610      	mov	r0, r2
 8009e64:	4619      	mov	r1, r3
 8009e66:	f7f6 fe8f 	bl	8000b88 <__aeabi_d2iz>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7f6 fb71 	bl	8000554 <__aeabi_i2d>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	4620      	mov	r0, r4
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7f6 fa1d 	bl	80002b8 <__aeabi_dsub>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4610      	mov	r0, r2
 8009e84:	4619      	mov	r1, r3
 8009e86:	f7f6 fec7 	bl	8000c18 <__aeabi_d2f>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4a24      	ldr	r2, [pc, #144]	; (8009f20 <brrCalculus+0x238>)
 8009e8e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009e90:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <brrCalculus+0x238>)
 8009e92:	edd3 7a00 	vldr	s15, [r3]
 8009e96:	2004      	movs	r0, #4
 8009e98:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9c:	f000 f9f0 	bl	800a280 <roundToNDecimals>
 8009ea0:	eef0 7a40 	vmov.f32	s15, s0
 8009ea4:	4b1e      	ldr	r3, [pc, #120]	; (8009f20 <brrCalculus+0x238>)
 8009ea6:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009eaa:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <brrCalculus+0x238>)
 8009eac:	edd3 7a00 	vldr	s15, [r3]
 8009eb0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009eb8:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <brrCalculus+0x238>)
 8009eba:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009ebe:	4b18      	ldr	r3, [pc, #96]	; (8009f20 <brrCalculus+0x238>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7f6 fb58 	bl	8000578 <__aeabi_f2d>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	ec43 2b10 	vmov	d0, r2, r3
 8009ed0:	f003 fa4a 	bl	800d368 <round>
 8009ed4:	ec53 2b10 	vmov	r2, r3, d0
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4619      	mov	r1, r3
 8009edc:	f7f6 fe9c 	bl	8000c18 <__aeabi_d2f>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	4a0f      	ldr	r2, [pc, #60]	; (8009f20 <brrCalculus+0x238>)
 8009ee4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009ee6:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <brrCalculus+0x234>)
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	011b      	lsls	r3, r3, #4
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <brrCalculus+0x238>)
 8009ef0:	edd3 7a00 	vldr	s15, [r3]
 8009ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef8:	ee17 3a90 	vmov	r3, s15
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	4313      	orrs	r3, r2
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <brrCalculus+0x23c>)
 8009f04:	801a      	strh	r2, [r3, #0]


		break;
 8009f06:	e112      	b.n	800a12e <brrCalculus+0x446>
 8009f08:	b4e81b4f 	.word	0xb4e81b4f
 8009f0c:	3edb4e81 	.word	0x3edb4e81
 8009f10:	b4e81b4f 	.word	0xb4e81b4f
 8009f14:	3ecb4e81 	.word	0x3ecb4e81
 8009f18:	200133e8 	.word	0x200133e8
 8009f1c:	200133dc 	.word	0x200133dc
 8009f20:	200133e0 	.word	0x200133e0
 8009f24:	200133da 	.word	0x200133da
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8009f28:	4989      	ldr	r1, [pc, #548]	; (800a150 <brrCalculus+0x468>)
 8009f2a:	a385      	add	r3, pc, #532	; (adr r3, 800a140 <brrCalculus+0x458>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	ee17 0a90 	vmov	r0, s15
 8009f42:	f7f6 fb19 	bl	8000578 <__aeabi_f2d>
 8009f46:	4b82      	ldr	r3, [pc, #520]	; (800a150 <brrCalculus+0x468>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	f7f6 fb6c 	bl	8000628 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	497e      	ldr	r1, [pc, #504]	; (800a150 <brrCalculus+0x468>)
 8009f56:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009f5a:	4b7d      	ldr	r3, [pc, #500]	; (800a150 <brrCalculus+0x468>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	4610      	mov	r0, r2
 8009f62:	4619      	mov	r1, r3
 8009f64:	f7f6 fe10 	bl	8000b88 <__aeabi_d2iz>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	4b79      	ldr	r3, [pc, #484]	; (800a154 <brrCalculus+0x46c>)
 8009f6e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009f70:	4b77      	ldr	r3, [pc, #476]	; (800a150 <brrCalculus+0x468>)
 8009f72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f76:	4b76      	ldr	r3, [pc, #472]	; (800a150 <brrCalculus+0x468>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	f7f6 fe02 	bl	8000b88 <__aeabi_d2iz>
 8009f84:	4603      	mov	r3, r0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7f6 fae4 	bl	8000554 <__aeabi_i2d>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4620      	mov	r0, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 f990 	bl	80002b8 <__aeabi_dsub>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	f7f6 fe3a 	bl	8000c18 <__aeabi_d2f>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	4a6c      	ldr	r2, [pc, #432]	; (800a158 <brrCalculus+0x470>)
 8009fa8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009faa:	4b6b      	ldr	r3, [pc, #428]	; (800a158 <brrCalculus+0x470>)
 8009fac:	edd3 7a00 	vldr	s15, [r3]
 8009fb0:	2004      	movs	r0, #4
 8009fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8009fb6:	f000 f963 	bl	800a280 <roundToNDecimals>
 8009fba:	eef0 7a40 	vmov.f32	s15, s0
 8009fbe:	4b66      	ldr	r3, [pc, #408]	; (800a158 <brrCalculus+0x470>)
 8009fc0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009fc4:	4b64      	ldr	r3, [pc, #400]	; (800a158 <brrCalculus+0x470>)
 8009fc6:	edd3 7a00 	vldr	s15, [r3]
 8009fca:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fd2:	4b61      	ldr	r3, [pc, #388]	; (800a158 <brrCalculus+0x470>)
 8009fd4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009fd8:	4b5f      	ldr	r3, [pc, #380]	; (800a158 <brrCalculus+0x470>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7f6 facb 	bl	8000578 <__aeabi_f2d>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	ec43 2b10 	vmov	d0, r2, r3
 8009fea:	f003 f9bd 	bl	800d368 <round>
 8009fee:	ec51 0b10 	vmov	r0, r1, d0
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	4b59      	ldr	r3, [pc, #356]	; (800a15c <brrCalculus+0x474>)
 8009ff8:	f7f6 f960 	bl	80002bc <__adddf3>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4610      	mov	r0, r2
 800a002:	4619      	mov	r1, r3
 800a004:	f7f6 fe08 	bl	8000c18 <__aeabi_d2f>
 800a008:	4603      	mov	r3, r0
 800a00a:	4a53      	ldr	r2, [pc, #332]	; (800a158 <brrCalculus+0x470>)
 800a00c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800a00e:	4b51      	ldr	r3, [pc, #324]	; (800a154 <brrCalculus+0x46c>)
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	b29a      	uxth	r2, r3
 800a016:	4b50      	ldr	r3, [pc, #320]	; (800a158 <brrCalculus+0x470>)
 800a018:	edd3 7a00 	vldr	s15, [r3]
 800a01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a020:	ee17 3a90 	vmov	r3, s15
 800a024:	b29b      	uxth	r3, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	4b4d      	ldr	r3, [pc, #308]	; (800a160 <brrCalculus+0x478>)
 800a02c:	801a      	strh	r2, [r3, #0]


		break;
 800a02e:	e07e      	b.n	800a12e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 800a030:	4947      	ldr	r1, [pc, #284]	; (800a150 <brrCalculus+0x468>)
 800a032:	a345      	add	r3, pc, #276	; (adr r3, 800a148 <brrCalculus+0x460>)
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a046:	ee17 0a90 	vmov	r0, s15
 800a04a:	f7f6 fa95 	bl	8000578 <__aeabi_f2d>
 800a04e:	4b40      	ldr	r3, [pc, #256]	; (800a150 <brrCalculus+0x468>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 fae8 	bl	8000628 <__aeabi_dmul>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	493c      	ldr	r1, [pc, #240]	; (800a150 <brrCalculus+0x468>)
 800a05e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800a062:	4b3b      	ldr	r3, [pc, #236]	; (800a150 <brrCalculus+0x468>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	4610      	mov	r0, r2
 800a06a:	4619      	mov	r1, r3
 800a06c:	f7f6 fd8c 	bl	8000b88 <__aeabi_d2iz>
 800a070:	4603      	mov	r3, r0
 800a072:	b29a      	uxth	r2, r3
 800a074:	4b37      	ldr	r3, [pc, #220]	; (800a154 <brrCalculus+0x46c>)
 800a076:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800a078:	4b35      	ldr	r3, [pc, #212]	; (800a150 <brrCalculus+0x468>)
 800a07a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a07e:	4b34      	ldr	r3, [pc, #208]	; (800a150 <brrCalculus+0x468>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	4610      	mov	r0, r2
 800a086:	4619      	mov	r1, r3
 800a088:	f7f6 fd7e 	bl	8000b88 <__aeabi_d2iz>
 800a08c:	4603      	mov	r3, r0
 800a08e:	4618      	mov	r0, r3
 800a090:	f7f6 fa60 	bl	8000554 <__aeabi_i2d>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4620      	mov	r0, r4
 800a09a:	4629      	mov	r1, r5
 800a09c:	f7f6 f90c 	bl	80002b8 <__aeabi_dsub>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f7f6 fdb6 	bl	8000c18 <__aeabi_d2f>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	4a2a      	ldr	r2, [pc, #168]	; (800a158 <brrCalculus+0x470>)
 800a0b0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800a0b2:	4b29      	ldr	r3, [pc, #164]	; (800a158 <brrCalculus+0x470>)
 800a0b4:	edd3 7a00 	vldr	s15, [r3]
 800a0b8:	2004      	movs	r0, #4
 800a0ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a0be:	f000 f8df 	bl	800a280 <roundToNDecimals>
 800a0c2:	eef0 7a40 	vmov.f32	s15, s0
 800a0c6:	4b24      	ldr	r3, [pc, #144]	; (800a158 <brrCalculus+0x470>)
 800a0c8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800a0cc:	4b22      	ldr	r3, [pc, #136]	; (800a158 <brrCalculus+0x470>)
 800a0ce:	edd3 7a00 	vldr	s15, [r3]
 800a0d2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800a0d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0da:	4b1f      	ldr	r3, [pc, #124]	; (800a158 <brrCalculus+0x470>)
 800a0dc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800a0e0:	4b1d      	ldr	r3, [pc, #116]	; (800a158 <brrCalculus+0x470>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f6 fa47 	bl	8000578 <__aeabi_f2d>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	ec43 2b10 	vmov	d0, r2, r3
 800a0f2:	f003 f939 	bl	800d368 <round>
 800a0f6:	ec53 2b10 	vmov	r2, r3, d0
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f7f6 fd8b 	bl	8000c18 <__aeabi_d2f>
 800a102:	4603      	mov	r3, r0
 800a104:	4a14      	ldr	r2, [pc, #80]	; (800a158 <brrCalculus+0x470>)
 800a106:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800a108:	4b12      	ldr	r3, [pc, #72]	; (800a154 <brrCalculus+0x46c>)
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	b29a      	uxth	r2, r3
 800a110:	4b11      	ldr	r3, [pc, #68]	; (800a158 <brrCalculus+0x470>)
 800a112:	edd3 7a00 	vldr	s15, [r3]
 800a116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a11a:	ee17 3a90 	vmov	r3, s15
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4313      	orrs	r3, r2
 800a122:	b29a      	uxth	r2, r3
 800a124:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <brrCalculus+0x478>)
 800a126:	801a      	strh	r2, [r3, #0]


		break;
 800a128:	e001      	b.n	800a12e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800a12a:	bf00      	nop
		break;
 800a12c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800a12e:	4b0c      	ldr	r3, [pc, #48]	; (800a160 <brrCalculus+0x478>)
 800a130:	881b      	ldrh	r3, [r3, #0]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bdb0      	pop	{r4, r5, r7, pc}
 800a13a:	bf00      	nop
 800a13c:	f3af 8000 	nop.w
 800a140:	789abcdf 	.word	0x789abcdf
 800a144:	3ec23456 	.word	0x3ec23456
 800a148:	789abcdf 	.word	0x789abcdf
 800a14c:	3ea23456 	.word	0x3ea23456
 800a150:	200133e8 	.word	0x200133e8
 800a154:	200133dc 	.word	0x200133dc
 800a158:	200133e0 	.word	0x200133e0
 800a15c:	3ff00000 	.word	0x3ff00000
 800a160:	200133da 	.word	0x200133da

0800a164 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800a16e:	e000      	b.n	800a172 <writeChar+0xe>
		__NOP();
 800a170:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0f7      	beq.n	800a170 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	605a      	str	r2, [r3, #4]

}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800a19e:	e008      	b.n	800a1b2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff ffdc 	bl	800a164 <writeChar>
		msgToSend ++ ;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1f2      	bne.n	800a1a0 <writeMsg+0xc>
	}
}
 800a1ba:	bf00      	nop
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
	__NOP();
 800a1c8:	bf00      	nop
}
 800a1ca:	bf00      	nop
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
	__NOP();
 800a1d8:	bf00      	nop
}
 800a1da:	bf00      	nop
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0
	return auxRxData;
 800a1e8:	4b03      	ldr	r3, [pc, #12]	; (800a1f8 <getRxData+0x14>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	200133f0 	.word	0x200133f0

0800a1fc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 800a200:	4b07      	ldr	r3, [pc, #28]	; (800a220 <USART2_IRQHandler+0x24>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0320 	and.w	r3, r3, #32
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d006      	beq.n	800a21a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800a20c:	4b04      	ldr	r3, [pc, #16]	; (800a220 <USART2_IRQHandler+0x24>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	b2da      	uxtb	r2, r3
 800a212:	4b04      	ldr	r3, [pc, #16]	; (800a224 <USART2_IRQHandler+0x28>)
 800a214:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800a216:	f7ff ffd5 	bl	800a1c4 <usart2Rx_Callback>
	}

}
 800a21a:	bf00      	nop
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	40004400 	.word	0x40004400
 800a224:	200133f0 	.word	0x200133f0

0800a228 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800a22c:	4b07      	ldr	r3, [pc, #28]	; (800a24c <USART1_IRQHandler+0x24>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0320 	and.w	r3, r3, #32
 800a234:	2b00      	cmp	r3, #0
 800a236:	d006      	beq.n	800a246 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 800a238:	4b04      	ldr	r3, [pc, #16]	; (800a24c <USART1_IRQHandler+0x24>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	4b04      	ldr	r3, [pc, #16]	; (800a250 <USART1_IRQHandler+0x28>)
 800a240:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800a242:	f7f7 fc75 	bl	8001b30 <usart1Rx_Callback>
	}
}
 800a246:	bf00      	nop
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	40011000 	.word	0x40011000
 800a250:	200133f0 	.word	0x200133f0

0800a254 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 800a258:	4b07      	ldr	r3, [pc, #28]	; (800a278 <USART6_IRQHandler+0x24>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0320 	and.w	r3, r3, #32
 800a260:	2b00      	cmp	r3, #0
 800a262:	d006      	beq.n	800a272 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800a264:	4b04      	ldr	r3, [pc, #16]	; (800a278 <USART6_IRQHandler+0x24>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <USART6_IRQHandler+0x28>)
 800a26c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800a26e:	f7ff ffb1 	bl	800a1d4 <usart6Rx_Callback>
	}

}
 800a272:	bf00      	nop
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	40011400 	.word	0x40011400
 800a27c:	200133f0 	.word	0x200133f0

0800a280 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	ed87 0a01 	vstr	s0, [r7, #4]
 800a28a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800a28c:	6838      	ldr	r0, [r7, #0]
 800a28e:	f7f6 f961 	bl	8000554 <__aeabi_i2d>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	ec43 2b11 	vmov	d1, r2, r3
 800a29a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800a318 <roundToNDecimals+0x98>
 800a29e:	f003 f905 	bl	800d4ac <pow>
 800a2a2:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7f6 f966 	bl	8000578 <__aeabi_f2d>
 800a2ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2b0:	f7f6 f9ba 	bl	8000628 <__aeabi_dmul>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	f7f6 fcac 	bl	8000c18 <__aeabi_d2f>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	607b      	str	r3, [r7, #4]

    number = round(number);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7f6 f957 	bl	8000578 <__aeabi_f2d>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	ec43 2b10 	vmov	d0, r2, r3
 800a2d2:	f003 f849 	bl	800d368 <round>
 800a2d6:	ec53 2b10 	vmov	r2, r3, d0
 800a2da:	4610      	mov	r0, r2
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f7f6 fc9b 	bl	8000c18 <__aeabi_d2f>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	607b      	str	r3, [r7, #4]

    number /= factor;
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7f6 f946 	bl	8000578 <__aeabi_f2d>
 800a2ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2f0:	f7f6 fac4 	bl	800087c <__aeabi_ddiv>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f7f6 fc8c 	bl	8000c18 <__aeabi_d2f>
 800a300:	4603      	mov	r3, r0
 800a302:	607b      	str	r3, [r7, #4]

    return number;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	ee07 3a90 	vmov	s15, r3
}
 800a30a:	eeb0 0a67 	vmov.f32	s0, s15
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	f3af 8000 	nop.w
 800a318:	00000000 	.word	0x00000000
 800a31c:	40240000 	.word	0x40240000

0800a320 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a32c:	b672      	cpsid	i
}
 800a32e:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a12      	ldr	r2, [pc, #72]	; (800a380 <usart_Set_Priority+0x60>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d105      	bne.n	800a346 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	4619      	mov	r1, r3
 800a33e:	2025      	movs	r0, #37	; 0x25
 800a340:	f7ff fb10 	bl	8009964 <__NVIC_SetPriority>
 800a344:	e016      	b.n	800a374 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a0e      	ldr	r2, [pc, #56]	; (800a384 <usart_Set_Priority+0x64>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d105      	bne.n	800a35c <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	4619      	mov	r1, r3
 800a354:	2026      	movs	r0, #38	; 0x26
 800a356:	f7ff fb05 	bl	8009964 <__NVIC_SetPriority>
 800a35a:	e00b      	b.n	800a374 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a09      	ldr	r2, [pc, #36]	; (800a388 <usart_Set_Priority+0x68>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d105      	bne.n	800a372 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800a366:	78fb      	ldrb	r3, [r7, #3]
 800a368:	4619      	mov	r1, r3
 800a36a:	2047      	movs	r0, #71	; 0x47
 800a36c:	f7ff fafa 	bl	8009964 <__NVIC_SetPriority>
 800a370:	e000      	b.n	800a374 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800a372:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a374:	b662      	cpsie	i
}
 800a376:	bf00      	nop



	__enable_irq();

}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	40011000 	.word	0x40011000
 800a384:	40004400 	.word	0x40004400
 800a388:	40011400 	.word	0x40011400

0800a38c <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a89      	ldr	r2, [pc, #548]	; (800a5c0 <i2c_config+0x234>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d106      	bne.n	800a3ac <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800a39e:	4b89      	ldr	r3, [pc, #548]	; (800a5c4 <i2c_config+0x238>)
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	4a88      	ldr	r2, [pc, #544]	; (800a5c4 <i2c_config+0x238>)
 800a3a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3a8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3aa:	e016      	b.n	800a3da <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a85      	ldr	r2, [pc, #532]	; (800a5c8 <i2c_config+0x23c>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d106      	bne.n	800a3c4 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800a3b6:	4b83      	ldr	r3, [pc, #524]	; (800a5c4 <i2c_config+0x238>)
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	4a82      	ldr	r2, [pc, #520]	; (800a5c4 <i2c_config+0x238>)
 800a3bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3c0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3c2:	e00a      	b.n	800a3da <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a80      	ldr	r2, [pc, #512]	; (800a5cc <i2c_config+0x240>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d105      	bne.n	800a3da <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800a3ce:	4b7d      	ldr	r3, [pc, #500]	; (800a5c4 <i2c_config+0x238>)
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	4a7c      	ldr	r2, [pc, #496]	; (800a5c4 <i2c_config+0x238>)
 800a3d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3d8:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f022 0201 	bic.w	r2, r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a3ea:	e000      	b.n	800a3ee <i2c_config+0x62>
		__NOP();
 800a3ec:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f7      	bne.n	800a3ec <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a40a:	601a      	str	r2, [r3, #0]

	__NOP();
 800a40c:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a41c:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a42c:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	79db      	ldrb	r3, [r3, #7]
 800a432:	2b10      	cmp	r3, #16
 800a434:	d108      	bne.n	800a448 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f042 0210 	orr.w	r2, r2, #16
 800a444:	605a      	str	r2, [r3, #4]
 800a446:	e018      	b.n	800a47a <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	79db      	ldrb	r3, [r3, #7]
 800a44c:	2b19      	cmp	r3, #25
 800a44e:	d108      	bne.n	800a462 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f042 0219 	orr.w	r2, r2, #25
 800a45e:	605a      	str	r2, [r3, #4]
 800a460:	e00b      	b.n	800a47a <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	79db      	ldrb	r3, [r3, #7]
 800a466:	2b32      	cmp	r3, #50	; 0x32
 800a468:	d107      	bne.n	800a47a <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800a478:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2200      	movs	r2, #0
 800a480:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2200      	movs	r2, #0
 800a488:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	795b      	ldrb	r3, [r3, #5]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d15c      	bne.n	800a54c <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	69da      	ldr	r2, [r3, #28]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4a0:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	79db      	ldrb	r3, [r3, #7]
 800a4a6:	2b32      	cmp	r3, #50	; 0x32
 800a4a8:	d03f      	beq.n	800a52a <i2c_config+0x19e>
 800a4aa:	2b32      	cmp	r3, #50	; 0x32
 800a4ac:	f300 80b2 	bgt.w	800a614 <i2c_config+0x288>
 800a4b0:	2b19      	cmp	r3, #25
 800a4b2:	d029      	beq.n	800a508 <i2c_config+0x17c>
 800a4b4:	2b19      	cmp	r3, #25
 800a4b6:	f300 80ad 	bgt.w	800a614 <i2c_config+0x288>
 800a4ba:	2b04      	cmp	r3, #4
 800a4bc:	d002      	beq.n	800a4c4 <i2c_config+0x138>
 800a4be:	2b10      	cmp	r3, #16
 800a4c0:	d011      	beq.n	800a4e6 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800a4c2:	e0a7      	b.n	800a614 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69da      	ldr	r2, [r3, #28]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0214 	orr.w	r2, r2, #20
 800a4d2:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6a1a      	ldr	r2, [r3, #32]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 0205 	orr.w	r2, r2, #5
 800a4e2:	621a      	str	r2, [r3, #32]
				break;
 800a4e4:	e099      	b.n	800a61a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69da      	ldr	r2, [r3, #28]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a4f4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6a1a      	ldr	r2, [r3, #32]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f042 0211 	orr.w	r2, r2, #17
 800a504:	621a      	str	r2, [r3, #32]
				break;
 800a506:	e088      	b.n	800a61a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	69da      	ldr	r2, [r3, #28]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800a516:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6a1a      	ldr	r2, [r3, #32]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0215 	orr.w	r2, r2, #21
 800a526:	621a      	str	r2, [r3, #32]
				break;
 800a528:	e077      	b.n	800a61a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	69da      	ldr	r2, [r3, #28]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800a538:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6a1a      	ldr	r2, [r3, #32]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800a548:	621a      	str	r2, [r3, #32]
				break;
 800a54a:	e066      	b.n	800a61a <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69da      	ldr	r2, [r3, #28]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a55a:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	79db      	ldrb	r3, [r3, #7]
 800a560:	2b32      	cmp	r3, #50	; 0x32
 800a562:	d046      	beq.n	800a5f2 <i2c_config+0x266>
 800a564:	2b32      	cmp	r3, #50	; 0x32
 800a566:	dc57      	bgt.n	800a618 <i2c_config+0x28c>
 800a568:	2b19      	cmp	r3, #25
 800a56a:	d031      	beq.n	800a5d0 <i2c_config+0x244>
 800a56c:	2b19      	cmp	r3, #25
 800a56e:	dc53      	bgt.n	800a618 <i2c_config+0x28c>
 800a570:	2b04      	cmp	r3, #4
 800a572:	d002      	beq.n	800a57a <i2c_config+0x1ee>
 800a574:	2b10      	cmp	r3, #16
 800a576:	d011      	beq.n	800a59c <i2c_config+0x210>


				break;
			}default:{

				break;
 800a578:	e04e      	b.n	800a618 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	69da      	ldr	r2, [r3, #28]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f042 0203 	orr.w	r2, r2, #3
 800a588:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6a1a      	ldr	r2, [r3, #32]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0202 	orr.w	r2, r2, #2
 800a598:	621a      	str	r2, [r3, #32]
				break;
 800a59a:	e03e      	b.n	800a61a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	69da      	ldr	r2, [r3, #28]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 020d 	orr.w	r2, r2, #13
 800a5aa:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6a1a      	ldr	r2, [r3, #32]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0206 	orr.w	r2, r2, #6
 800a5ba:	621a      	str	r2, [r3, #32]
				break;
 800a5bc:	e02d      	b.n	800a61a <i2c_config+0x28e>
 800a5be:	bf00      	nop
 800a5c0:	40005400 	.word	0x40005400
 800a5c4:	40023800 	.word	0x40023800
 800a5c8:	40005800 	.word	0x40005800
 800a5cc:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	69da      	ldr	r2, [r3, #28]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0215 	orr.w	r2, r2, #21
 800a5de:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6a1a      	ldr	r2, [r3, #32]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f042 0208 	orr.w	r2, r2, #8
 800a5ee:	621a      	str	r2, [r3, #32]
				break;
 800a5f0:	e013      	b.n	800a61a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69da      	ldr	r2, [r3, #28]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800a600:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6a1a      	ldr	r2, [r3, #32]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f042 0210 	orr.w	r2, r2, #16
 800a610:	621a      	str	r2, [r3, #32]
				break;
 800a612:	e002      	b.n	800a61a <i2c_config+0x28e>
				break;
 800a614:	bf00      	nop
 800a616:	e002      	b.n	800a61e <i2c_config+0x292>
				break;
 800a618:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a61a:	e000      	b.n	800a61e <i2c_config+0x292>
		__NOP();
 800a61c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1f7      	bne.n	800a61c <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f042 0201 	orr.w	r2, r2, #1
 800a63a:	601a      	str	r2, [r3, #0]


}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a65e:	601a      	str	r2, [r3, #0]
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7a1b      	ldrb	r3, [r3, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d009      	beq.n	800a690 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a68a:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a68c:	e000      	b.n	800a690 <i2c_startTransaction+0x24>
		__NOP();
 800a68e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	f003 0302 	and.w	r3, r3, #2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1f7      	bne.n	800a68e <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6ac:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a6ae:	e000      	b.n	800a6b2 <i2c_startTransaction+0x46>
		__NOP();
 800a6b0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	f003 0301 	and.w	r3, r3, #1
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0f7      	beq.n	800a6b0 <i2c_startTransaction+0x44>
	}
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7a1b      	ldrb	r3, [r3, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6ec:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6fc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a6fe:	e000      	b.n	800a702 <i2c_reStartTransaction+0x34>
		__NOP();
 800a700:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0f7      	beq.n	800a700 <i2c_reStartTransaction+0x32>
	}
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a734:	601a      	str	r2, [r3, #0]
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800a742:	b480      	push	{r7}
 800a744:	b085      	sub	sp, #20
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	460b      	mov	r3, r1
 800a74c:	70fb      	strb	r3, [r7, #3]
 800a74e:	4613      	mov	r3, r2
 800a750:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	005a      	lsls	r2, r3, #1
 800a75a:	78bb      	ldrb	r3, [r7, #2]
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a764:	e000      	b.n	800a768 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800a766:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0f7      	beq.n	800a766 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	73fb      	strb	r3, [r7, #15]

}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a7a6:	e000      	b.n	800a7aa <i2c_sendMemoryAddress+0x18>
		__NOP();
 800a7a8:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d0f7      	beq.n	800a7a8 <i2c_sendMemoryAddress+0x16>
	}
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	78fa      	ldrb	r2, [r7, #3]
 800a7d8:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a7da:	e000      	b.n	800a7de <i2c_sendDataByte+0x18>
		__NOP();
 800a7dc:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0f7      	beq.n	800a7dc <i2c_sendDataByte+0x16>
	}
}
 800a7ec:	bf00      	nop
 800a7ee:	bf00      	nop
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a802:	e000      	b.n	800a806 <i2c_readDataByte+0xc>
		__NOP();
 800a804:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0f7      	beq.n	800a804 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	799b      	ldrb	r3, [r3, #6]
}
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <__errno>:
 800a830:	4b01      	ldr	r3, [pc, #4]	; (800a838 <__errno+0x8>)
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	20000024 	.word	0x20000024

0800a83c <__libc_init_array>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4d0d      	ldr	r5, [pc, #52]	; (800a874 <__libc_init_array+0x38>)
 800a840:	4c0d      	ldr	r4, [pc, #52]	; (800a878 <__libc_init_array+0x3c>)
 800a842:	1b64      	subs	r4, r4, r5
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	2600      	movs	r6, #0
 800a848:	42a6      	cmp	r6, r4
 800a84a:	d109      	bne.n	800a860 <__libc_init_array+0x24>
 800a84c:	4d0b      	ldr	r5, [pc, #44]	; (800a87c <__libc_init_array+0x40>)
 800a84e:	4c0c      	ldr	r4, [pc, #48]	; (800a880 <__libc_init_array+0x44>)
 800a850:	f004 ff56 	bl	800f700 <_init>
 800a854:	1b64      	subs	r4, r4, r5
 800a856:	10a4      	asrs	r4, r4, #2
 800a858:	2600      	movs	r6, #0
 800a85a:	42a6      	cmp	r6, r4
 800a85c:	d105      	bne.n	800a86a <__libc_init_array+0x2e>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	f855 3b04 	ldr.w	r3, [r5], #4
 800a864:	4798      	blx	r3
 800a866:	3601      	adds	r6, #1
 800a868:	e7ee      	b.n	800a848 <__libc_init_array+0xc>
 800a86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86e:	4798      	blx	r3
 800a870:	3601      	adds	r6, #1
 800a872:	e7f2      	b.n	800a85a <__libc_init_array+0x1e>
 800a874:	0800ffb8 	.word	0x0800ffb8
 800a878:	0800ffb8 	.word	0x0800ffb8
 800a87c:	0800ffb8 	.word	0x0800ffb8
 800a880:	0800ffbc 	.word	0x0800ffbc

0800a884 <malloc>:
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <malloc+0xc>)
 800a886:	4601      	mov	r1, r0
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f000 b885 	b.w	800a998 <_malloc_r>
 800a88e:	bf00      	nop
 800a890:	20000024 	.word	0x20000024

0800a894 <memcpy>:
 800a894:	440a      	add	r2, r1
 800a896:	4291      	cmp	r1, r2
 800a898:	f100 33ff 	add.w	r3, r0, #4294967295
 800a89c:	d100      	bne.n	800a8a0 <memcpy+0xc>
 800a89e:	4770      	bx	lr
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8aa:	4291      	cmp	r1, r2
 800a8ac:	d1f9      	bne.n	800a8a2 <memcpy+0xe>
 800a8ae:	bd10      	pop	{r4, pc}

0800a8b0 <memset>:
 800a8b0:	4402      	add	r2, r0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d100      	bne.n	800a8ba <memset+0xa>
 800a8b8:	4770      	bx	lr
 800a8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a8be:	e7f9      	b.n	800a8b4 <memset+0x4>

0800a8c0 <_free_r>:
 800a8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8c2:	2900      	cmp	r1, #0
 800a8c4:	d044      	beq.n	800a950 <_free_r+0x90>
 800a8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ca:	9001      	str	r0, [sp, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a8d2:	bfb8      	it	lt
 800a8d4:	18e4      	addlt	r4, r4, r3
 800a8d6:	f001 fbcd 	bl	800c074 <__malloc_lock>
 800a8da:	4a1e      	ldr	r2, [pc, #120]	; (800a954 <_free_r+0x94>)
 800a8dc:	9801      	ldr	r0, [sp, #4]
 800a8de:	6813      	ldr	r3, [r2, #0]
 800a8e0:	b933      	cbnz	r3, 800a8f0 <_free_r+0x30>
 800a8e2:	6063      	str	r3, [r4, #4]
 800a8e4:	6014      	str	r4, [r2, #0]
 800a8e6:	b003      	add	sp, #12
 800a8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8ec:	f001 bbc8 	b.w	800c080 <__malloc_unlock>
 800a8f0:	42a3      	cmp	r3, r4
 800a8f2:	d908      	bls.n	800a906 <_free_r+0x46>
 800a8f4:	6825      	ldr	r5, [r4, #0]
 800a8f6:	1961      	adds	r1, r4, r5
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	bf01      	itttt	eq
 800a8fc:	6819      	ldreq	r1, [r3, #0]
 800a8fe:	685b      	ldreq	r3, [r3, #4]
 800a900:	1949      	addeq	r1, r1, r5
 800a902:	6021      	streq	r1, [r4, #0]
 800a904:	e7ed      	b.n	800a8e2 <_free_r+0x22>
 800a906:	461a      	mov	r2, r3
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	b10b      	cbz	r3, 800a910 <_free_r+0x50>
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d9fa      	bls.n	800a906 <_free_r+0x46>
 800a910:	6811      	ldr	r1, [r2, #0]
 800a912:	1855      	adds	r5, r2, r1
 800a914:	42a5      	cmp	r5, r4
 800a916:	d10b      	bne.n	800a930 <_free_r+0x70>
 800a918:	6824      	ldr	r4, [r4, #0]
 800a91a:	4421      	add	r1, r4
 800a91c:	1854      	adds	r4, r2, r1
 800a91e:	42a3      	cmp	r3, r4
 800a920:	6011      	str	r1, [r2, #0]
 800a922:	d1e0      	bne.n	800a8e6 <_free_r+0x26>
 800a924:	681c      	ldr	r4, [r3, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	6053      	str	r3, [r2, #4]
 800a92a:	4421      	add	r1, r4
 800a92c:	6011      	str	r1, [r2, #0]
 800a92e:	e7da      	b.n	800a8e6 <_free_r+0x26>
 800a930:	d902      	bls.n	800a938 <_free_r+0x78>
 800a932:	230c      	movs	r3, #12
 800a934:	6003      	str	r3, [r0, #0]
 800a936:	e7d6      	b.n	800a8e6 <_free_r+0x26>
 800a938:	6825      	ldr	r5, [r4, #0]
 800a93a:	1961      	adds	r1, r4, r5
 800a93c:	428b      	cmp	r3, r1
 800a93e:	bf04      	itt	eq
 800a940:	6819      	ldreq	r1, [r3, #0]
 800a942:	685b      	ldreq	r3, [r3, #4]
 800a944:	6063      	str	r3, [r4, #4]
 800a946:	bf04      	itt	eq
 800a948:	1949      	addeq	r1, r1, r5
 800a94a:	6021      	streq	r1, [r4, #0]
 800a94c:	6054      	str	r4, [r2, #4]
 800a94e:	e7ca      	b.n	800a8e6 <_free_r+0x26>
 800a950:	b003      	add	sp, #12
 800a952:	bd30      	pop	{r4, r5, pc}
 800a954:	200133f4 	.word	0x200133f4

0800a958 <sbrk_aligned>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4e0e      	ldr	r6, [pc, #56]	; (800a994 <sbrk_aligned+0x3c>)
 800a95c:	460c      	mov	r4, r1
 800a95e:	6831      	ldr	r1, [r6, #0]
 800a960:	4605      	mov	r5, r0
 800a962:	b911      	cbnz	r1, 800a96a <sbrk_aligned+0x12>
 800a964:	f000 fcf6 	bl	800b354 <_sbrk_r>
 800a968:	6030      	str	r0, [r6, #0]
 800a96a:	4621      	mov	r1, r4
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 fcf1 	bl	800b354 <_sbrk_r>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d00a      	beq.n	800a98c <sbrk_aligned+0x34>
 800a976:	1cc4      	adds	r4, r0, #3
 800a978:	f024 0403 	bic.w	r4, r4, #3
 800a97c:	42a0      	cmp	r0, r4
 800a97e:	d007      	beq.n	800a990 <sbrk_aligned+0x38>
 800a980:	1a21      	subs	r1, r4, r0
 800a982:	4628      	mov	r0, r5
 800a984:	f000 fce6 	bl	800b354 <_sbrk_r>
 800a988:	3001      	adds	r0, #1
 800a98a:	d101      	bne.n	800a990 <sbrk_aligned+0x38>
 800a98c:	f04f 34ff 	mov.w	r4, #4294967295
 800a990:	4620      	mov	r0, r4
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	200133f8 	.word	0x200133f8

0800a998 <_malloc_r>:
 800a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99c:	1ccd      	adds	r5, r1, #3
 800a99e:	f025 0503 	bic.w	r5, r5, #3
 800a9a2:	3508      	adds	r5, #8
 800a9a4:	2d0c      	cmp	r5, #12
 800a9a6:	bf38      	it	cc
 800a9a8:	250c      	movcc	r5, #12
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	db01      	blt.n	800a9b4 <_malloc_r+0x1c>
 800a9b0:	42a9      	cmp	r1, r5
 800a9b2:	d905      	bls.n	800a9c0 <_malloc_r+0x28>
 800a9b4:	230c      	movs	r3, #12
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	2600      	movs	r6, #0
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	4e2e      	ldr	r6, [pc, #184]	; (800aa7c <_malloc_r+0xe4>)
 800a9c2:	f001 fb57 	bl	800c074 <__malloc_lock>
 800a9c6:	6833      	ldr	r3, [r6, #0]
 800a9c8:	461c      	mov	r4, r3
 800a9ca:	bb34      	cbnz	r4, 800aa1a <_malloc_r+0x82>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f7ff ffc2 	bl	800a958 <sbrk_aligned>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	d14d      	bne.n	800aa76 <_malloc_r+0xde>
 800a9da:	6834      	ldr	r4, [r6, #0]
 800a9dc:	4626      	mov	r6, r4
 800a9de:	2e00      	cmp	r6, #0
 800a9e0:	d140      	bne.n	800aa64 <_malloc_r+0xcc>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	eb04 0803 	add.w	r8, r4, r3
 800a9ec:	f000 fcb2 	bl	800b354 <_sbrk_r>
 800a9f0:	4580      	cmp	r8, r0
 800a9f2:	d13a      	bne.n	800aa6a <_malloc_r+0xd2>
 800a9f4:	6821      	ldr	r1, [r4, #0]
 800a9f6:	3503      	adds	r5, #3
 800a9f8:	1a6d      	subs	r5, r5, r1
 800a9fa:	f025 0503 	bic.w	r5, r5, #3
 800a9fe:	3508      	adds	r5, #8
 800aa00:	2d0c      	cmp	r5, #12
 800aa02:	bf38      	it	cc
 800aa04:	250c      	movcc	r5, #12
 800aa06:	4629      	mov	r1, r5
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff ffa5 	bl	800a958 <sbrk_aligned>
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d02b      	beq.n	800aa6a <_malloc_r+0xd2>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	442b      	add	r3, r5
 800aa16:	6023      	str	r3, [r4, #0]
 800aa18:	e00e      	b.n	800aa38 <_malloc_r+0xa0>
 800aa1a:	6822      	ldr	r2, [r4, #0]
 800aa1c:	1b52      	subs	r2, r2, r5
 800aa1e:	d41e      	bmi.n	800aa5e <_malloc_r+0xc6>
 800aa20:	2a0b      	cmp	r2, #11
 800aa22:	d916      	bls.n	800aa52 <_malloc_r+0xba>
 800aa24:	1961      	adds	r1, r4, r5
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	6025      	str	r5, [r4, #0]
 800aa2a:	bf18      	it	ne
 800aa2c:	6059      	strne	r1, [r3, #4]
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	bf08      	it	eq
 800aa32:	6031      	streq	r1, [r6, #0]
 800aa34:	5162      	str	r2, [r4, r5]
 800aa36:	604b      	str	r3, [r1, #4]
 800aa38:	4638      	mov	r0, r7
 800aa3a:	f104 060b 	add.w	r6, r4, #11
 800aa3e:	f001 fb1f 	bl	800c080 <__malloc_unlock>
 800aa42:	f026 0607 	bic.w	r6, r6, #7
 800aa46:	1d23      	adds	r3, r4, #4
 800aa48:	1af2      	subs	r2, r6, r3
 800aa4a:	d0b6      	beq.n	800a9ba <_malloc_r+0x22>
 800aa4c:	1b9b      	subs	r3, r3, r6
 800aa4e:	50a3      	str	r3, [r4, r2]
 800aa50:	e7b3      	b.n	800a9ba <_malloc_r+0x22>
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	bf0c      	ite	eq
 800aa58:	6032      	streq	r2, [r6, #0]
 800aa5a:	605a      	strne	r2, [r3, #4]
 800aa5c:	e7ec      	b.n	800aa38 <_malloc_r+0xa0>
 800aa5e:	4623      	mov	r3, r4
 800aa60:	6864      	ldr	r4, [r4, #4]
 800aa62:	e7b2      	b.n	800a9ca <_malloc_r+0x32>
 800aa64:	4634      	mov	r4, r6
 800aa66:	6876      	ldr	r6, [r6, #4]
 800aa68:	e7b9      	b.n	800a9de <_malloc_r+0x46>
 800aa6a:	230c      	movs	r3, #12
 800aa6c:	603b      	str	r3, [r7, #0]
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f001 fb06 	bl	800c080 <__malloc_unlock>
 800aa74:	e7a1      	b.n	800a9ba <_malloc_r+0x22>
 800aa76:	6025      	str	r5, [r4, #0]
 800aa78:	e7de      	b.n	800aa38 <_malloc_r+0xa0>
 800aa7a:	bf00      	nop
 800aa7c:	200133f4 	.word	0x200133f4

0800aa80 <__cvt>:
 800aa80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa84:	ec55 4b10 	vmov	r4, r5, d0
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	460e      	mov	r6, r1
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	462b      	mov	r3, r5
 800aa90:	bfbb      	ittet	lt
 800aa92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa96:	461d      	movlt	r5, r3
 800aa98:	2300      	movge	r3, #0
 800aa9a:	232d      	movlt	r3, #45	; 0x2d
 800aa9c:	700b      	strb	r3, [r1, #0]
 800aa9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aaa4:	4691      	mov	r9, r2
 800aaa6:	f023 0820 	bic.w	r8, r3, #32
 800aaaa:	bfbc      	itt	lt
 800aaac:	4622      	movlt	r2, r4
 800aaae:	4614      	movlt	r4, r2
 800aab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aab4:	d005      	beq.n	800aac2 <__cvt+0x42>
 800aab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aaba:	d100      	bne.n	800aabe <__cvt+0x3e>
 800aabc:	3601      	adds	r6, #1
 800aabe:	2102      	movs	r1, #2
 800aac0:	e000      	b.n	800aac4 <__cvt+0x44>
 800aac2:	2103      	movs	r1, #3
 800aac4:	ab03      	add	r3, sp, #12
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	ab02      	add	r3, sp, #8
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	ec45 4b10 	vmov	d0, r4, r5
 800aad0:	4653      	mov	r3, sl
 800aad2:	4632      	mov	r2, r6
 800aad4:	f000 fcdc 	bl	800b490 <_dtoa_r>
 800aad8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aadc:	4607      	mov	r7, r0
 800aade:	d102      	bne.n	800aae6 <__cvt+0x66>
 800aae0:	f019 0f01 	tst.w	r9, #1
 800aae4:	d022      	beq.n	800ab2c <__cvt+0xac>
 800aae6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaea:	eb07 0906 	add.w	r9, r7, r6
 800aaee:	d110      	bne.n	800ab12 <__cvt+0x92>
 800aaf0:	783b      	ldrb	r3, [r7, #0]
 800aaf2:	2b30      	cmp	r3, #48	; 0x30
 800aaf4:	d10a      	bne.n	800ab0c <__cvt+0x8c>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4620      	mov	r0, r4
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f5 fffb 	bl	8000af8 <__aeabi_dcmpeq>
 800ab02:	b918      	cbnz	r0, 800ab0c <__cvt+0x8c>
 800ab04:	f1c6 0601 	rsb	r6, r6, #1
 800ab08:	f8ca 6000 	str.w	r6, [sl]
 800ab0c:	f8da 3000 	ldr.w	r3, [sl]
 800ab10:	4499      	add	r9, r3
 800ab12:	2200      	movs	r2, #0
 800ab14:	2300      	movs	r3, #0
 800ab16:	4620      	mov	r0, r4
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7f5 ffed 	bl	8000af8 <__aeabi_dcmpeq>
 800ab1e:	b108      	cbz	r0, 800ab24 <__cvt+0xa4>
 800ab20:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab24:	2230      	movs	r2, #48	; 0x30
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	454b      	cmp	r3, r9
 800ab2a:	d307      	bcc.n	800ab3c <__cvt+0xbc>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab30:	1bdb      	subs	r3, r3, r7
 800ab32:	4638      	mov	r0, r7
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	b004      	add	sp, #16
 800ab38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3c:	1c59      	adds	r1, r3, #1
 800ab3e:	9103      	str	r1, [sp, #12]
 800ab40:	701a      	strb	r2, [r3, #0]
 800ab42:	e7f0      	b.n	800ab26 <__cvt+0xa6>

0800ab44 <__exponent>:
 800ab44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab46:	4603      	mov	r3, r0
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	bfb8      	it	lt
 800ab4c:	4249      	neglt	r1, r1
 800ab4e:	f803 2b02 	strb.w	r2, [r3], #2
 800ab52:	bfb4      	ite	lt
 800ab54:	222d      	movlt	r2, #45	; 0x2d
 800ab56:	222b      	movge	r2, #43	; 0x2b
 800ab58:	2909      	cmp	r1, #9
 800ab5a:	7042      	strb	r2, [r0, #1]
 800ab5c:	dd2a      	ble.n	800abb4 <__exponent+0x70>
 800ab5e:	f10d 0407 	add.w	r4, sp, #7
 800ab62:	46a4      	mov	ip, r4
 800ab64:	270a      	movs	r7, #10
 800ab66:	46a6      	mov	lr, r4
 800ab68:	460a      	mov	r2, r1
 800ab6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab6e:	fb07 1516 	mls	r5, r7, r6, r1
 800ab72:	3530      	adds	r5, #48	; 0x30
 800ab74:	2a63      	cmp	r2, #99	; 0x63
 800ab76:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab7e:	4631      	mov	r1, r6
 800ab80:	dcf1      	bgt.n	800ab66 <__exponent+0x22>
 800ab82:	3130      	adds	r1, #48	; 0x30
 800ab84:	f1ae 0502 	sub.w	r5, lr, #2
 800ab88:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab8c:	1c44      	adds	r4, r0, #1
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4561      	cmp	r1, ip
 800ab92:	d30a      	bcc.n	800abaa <__exponent+0x66>
 800ab94:	f10d 0209 	add.w	r2, sp, #9
 800ab98:	eba2 020e 	sub.w	r2, r2, lr
 800ab9c:	4565      	cmp	r5, ip
 800ab9e:	bf88      	it	hi
 800aba0:	2200      	movhi	r2, #0
 800aba2:	4413      	add	r3, r2
 800aba4:	1a18      	subs	r0, r3, r0
 800aba6:	b003      	add	sp, #12
 800aba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abb2:	e7ed      	b.n	800ab90 <__exponent+0x4c>
 800abb4:	2330      	movs	r3, #48	; 0x30
 800abb6:	3130      	adds	r1, #48	; 0x30
 800abb8:	7083      	strb	r3, [r0, #2]
 800abba:	70c1      	strb	r1, [r0, #3]
 800abbc:	1d03      	adds	r3, r0, #4
 800abbe:	e7f1      	b.n	800aba4 <__exponent+0x60>

0800abc0 <_printf_float>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	ed2d 8b02 	vpush	{d8}
 800abc8:	b08d      	sub	sp, #52	; 0x34
 800abca:	460c      	mov	r4, r1
 800abcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800abd0:	4616      	mov	r6, r2
 800abd2:	461f      	mov	r7, r3
 800abd4:	4605      	mov	r5, r0
 800abd6:	f001 fa49 	bl	800c06c <_localeconv_r>
 800abda:	f8d0 a000 	ldr.w	sl, [r0]
 800abde:	4650      	mov	r0, sl
 800abe0:	f7f5 fb08 	bl	80001f4 <strlen>
 800abe4:	2300      	movs	r3, #0
 800abe6:	930a      	str	r3, [sp, #40]	; 0x28
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	9305      	str	r3, [sp, #20]
 800abec:	f8d8 3000 	ldr.w	r3, [r8]
 800abf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abf4:	3307      	adds	r3, #7
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	f103 0208 	add.w	r2, r3, #8
 800abfe:	f8c8 2000 	str.w	r2, [r8]
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac18:	ee08 0a10 	vmov	s16, r0
 800ac1c:	4b9f      	ldr	r3, [pc, #636]	; (800ae9c <_printf_float+0x2dc>)
 800ac1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac22:	f04f 32ff 	mov.w	r2, #4294967295
 800ac26:	f7f5 ff99 	bl	8000b5c <__aeabi_dcmpun>
 800ac2a:	bb88      	cbnz	r0, 800ac90 <_printf_float+0xd0>
 800ac2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac30:	4b9a      	ldr	r3, [pc, #616]	; (800ae9c <_printf_float+0x2dc>)
 800ac32:	f04f 32ff 	mov.w	r2, #4294967295
 800ac36:	f7f5 ff73 	bl	8000b20 <__aeabi_dcmple>
 800ac3a:	bb48      	cbnz	r0, 800ac90 <_printf_float+0xd0>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	f7f5 ff62 	bl	8000b0c <__aeabi_dcmplt>
 800ac48:	b110      	cbz	r0, 800ac50 <_printf_float+0x90>
 800ac4a:	232d      	movs	r3, #45	; 0x2d
 800ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac50:	4b93      	ldr	r3, [pc, #588]	; (800aea0 <_printf_float+0x2e0>)
 800ac52:	4894      	ldr	r0, [pc, #592]	; (800aea4 <_printf_float+0x2e4>)
 800ac54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac58:	bf94      	ite	ls
 800ac5a:	4698      	movls	r8, r3
 800ac5c:	4680      	movhi	r8, r0
 800ac5e:	2303      	movs	r3, #3
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	9b05      	ldr	r3, [sp, #20]
 800ac64:	f023 0204 	bic.w	r2, r3, #4
 800ac68:	6022      	str	r2, [r4, #0]
 800ac6a:	f04f 0900 	mov.w	r9, #0
 800ac6e:	9700      	str	r7, [sp, #0]
 800ac70:	4633      	mov	r3, r6
 800ac72:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 f9d8 	bl	800b02c <_printf_common>
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	f040 8090 	bne.w	800ada2 <_printf_float+0x1e2>
 800ac82:	f04f 30ff 	mov.w	r0, #4294967295
 800ac86:	b00d      	add	sp, #52	; 0x34
 800ac88:	ecbd 8b02 	vpop	{d8}
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	4642      	mov	r2, r8
 800ac92:	464b      	mov	r3, r9
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 ff60 	bl	8000b5c <__aeabi_dcmpun>
 800ac9c:	b140      	cbz	r0, 800acb0 <_printf_float+0xf0>
 800ac9e:	464b      	mov	r3, r9
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bfbc      	itt	lt
 800aca4:	232d      	movlt	r3, #45	; 0x2d
 800aca6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acaa:	487f      	ldr	r0, [pc, #508]	; (800aea8 <_printf_float+0x2e8>)
 800acac:	4b7f      	ldr	r3, [pc, #508]	; (800aeac <_printf_float+0x2ec>)
 800acae:	e7d1      	b.n	800ac54 <_printf_float+0x94>
 800acb0:	6863      	ldr	r3, [r4, #4]
 800acb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acb6:	9206      	str	r2, [sp, #24]
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	d13f      	bne.n	800ad3c <_printf_float+0x17c>
 800acbc:	2306      	movs	r3, #6
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	9b05      	ldr	r3, [sp, #20]
 800acc2:	6861      	ldr	r1, [r4, #4]
 800acc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800acc8:	2300      	movs	r3, #0
 800acca:	9303      	str	r3, [sp, #12]
 800accc:	ab0a      	add	r3, sp, #40	; 0x28
 800acce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800acd2:	ab09      	add	r3, sp, #36	; 0x24
 800acd4:	ec49 8b10 	vmov	d0, r8, r9
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7ff fecd 	bl	800aa80 <__cvt>
 800ace6:	9b06      	ldr	r3, [sp, #24]
 800ace8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acea:	2b47      	cmp	r3, #71	; 0x47
 800acec:	4680      	mov	r8, r0
 800acee:	d108      	bne.n	800ad02 <_printf_float+0x142>
 800acf0:	1cc8      	adds	r0, r1, #3
 800acf2:	db02      	blt.n	800acfa <_printf_float+0x13a>
 800acf4:	6863      	ldr	r3, [r4, #4]
 800acf6:	4299      	cmp	r1, r3
 800acf8:	dd41      	ble.n	800ad7e <_printf_float+0x1be>
 800acfa:	f1ab 0b02 	sub.w	fp, fp, #2
 800acfe:	fa5f fb8b 	uxtb.w	fp, fp
 800ad02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad06:	d820      	bhi.n	800ad4a <_printf_float+0x18a>
 800ad08:	3901      	subs	r1, #1
 800ad0a:	465a      	mov	r2, fp
 800ad0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad10:	9109      	str	r1, [sp, #36]	; 0x24
 800ad12:	f7ff ff17 	bl	800ab44 <__exponent>
 800ad16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad18:	1813      	adds	r3, r2, r0
 800ad1a:	2a01      	cmp	r2, #1
 800ad1c:	4681      	mov	r9, r0
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	dc02      	bgt.n	800ad28 <_printf_float+0x168>
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	07d2      	lsls	r2, r2, #31
 800ad26:	d501      	bpl.n	800ad2c <_printf_float+0x16c>
 800ad28:	3301      	adds	r3, #1
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d09c      	beq.n	800ac6e <_printf_float+0xae>
 800ad34:	232d      	movs	r3, #45	; 0x2d
 800ad36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad3a:	e798      	b.n	800ac6e <_printf_float+0xae>
 800ad3c:	9a06      	ldr	r2, [sp, #24]
 800ad3e:	2a47      	cmp	r2, #71	; 0x47
 800ad40:	d1be      	bne.n	800acc0 <_printf_float+0x100>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1bc      	bne.n	800acc0 <_printf_float+0x100>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e7b9      	b.n	800acbe <_printf_float+0xfe>
 800ad4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad4e:	d118      	bne.n	800ad82 <_printf_float+0x1c2>
 800ad50:	2900      	cmp	r1, #0
 800ad52:	6863      	ldr	r3, [r4, #4]
 800ad54:	dd0b      	ble.n	800ad6e <_printf_float+0x1ae>
 800ad56:	6121      	str	r1, [r4, #16]
 800ad58:	b913      	cbnz	r3, 800ad60 <_printf_float+0x1a0>
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	07d0      	lsls	r0, r2, #31
 800ad5e:	d502      	bpl.n	800ad66 <_printf_float+0x1a6>
 800ad60:	3301      	adds	r3, #1
 800ad62:	440b      	add	r3, r1
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	e7de      	b.n	800ad2c <_printf_float+0x16c>
 800ad6e:	b913      	cbnz	r3, 800ad76 <_printf_float+0x1b6>
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	07d2      	lsls	r2, r2, #31
 800ad74:	d501      	bpl.n	800ad7a <_printf_float+0x1ba>
 800ad76:	3302      	adds	r3, #2
 800ad78:	e7f4      	b.n	800ad64 <_printf_float+0x1a4>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e7f2      	b.n	800ad64 <_printf_float+0x1a4>
 800ad7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad84:	4299      	cmp	r1, r3
 800ad86:	db05      	blt.n	800ad94 <_printf_float+0x1d4>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	6121      	str	r1, [r4, #16]
 800ad8c:	07d8      	lsls	r0, r3, #31
 800ad8e:	d5ea      	bpl.n	800ad66 <_printf_float+0x1a6>
 800ad90:	1c4b      	adds	r3, r1, #1
 800ad92:	e7e7      	b.n	800ad64 <_printf_float+0x1a4>
 800ad94:	2900      	cmp	r1, #0
 800ad96:	bfd4      	ite	le
 800ad98:	f1c1 0202 	rsble	r2, r1, #2
 800ad9c:	2201      	movgt	r2, #1
 800ad9e:	4413      	add	r3, r2
 800ada0:	e7e0      	b.n	800ad64 <_printf_float+0x1a4>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	055a      	lsls	r2, r3, #21
 800ada6:	d407      	bmi.n	800adb8 <_printf_float+0x1f8>
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	4642      	mov	r2, r8
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	d12c      	bne.n	800ae10 <_printf_float+0x250>
 800adb6:	e764      	b.n	800ac82 <_printf_float+0xc2>
 800adb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adbc:	f240 80e0 	bls.w	800af80 <_printf_float+0x3c0>
 800adc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adc4:	2200      	movs	r2, #0
 800adc6:	2300      	movs	r3, #0
 800adc8:	f7f5 fe96 	bl	8000af8 <__aeabi_dcmpeq>
 800adcc:	2800      	cmp	r0, #0
 800adce:	d034      	beq.n	800ae3a <_printf_float+0x27a>
 800add0:	4a37      	ldr	r2, [pc, #220]	; (800aeb0 <_printf_float+0x2f0>)
 800add2:	2301      	movs	r3, #1
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f af51 	beq.w	800ac82 <_printf_float+0xc2>
 800ade0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ade4:	429a      	cmp	r2, r3
 800ade6:	db02      	blt.n	800adee <_printf_float+0x22e>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	07d8      	lsls	r0, r3, #31
 800adec:	d510      	bpl.n	800ae10 <_printf_float+0x250>
 800adee:	ee18 3a10 	vmov	r3, s16
 800adf2:	4652      	mov	r2, sl
 800adf4:	4631      	mov	r1, r6
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f af41 	beq.w	800ac82 <_printf_float+0xc2>
 800ae00:	f04f 0800 	mov.w	r8, #0
 800ae04:	f104 091a 	add.w	r9, r4, #26
 800ae08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	4543      	cmp	r3, r8
 800ae0e:	dc09      	bgt.n	800ae24 <_printf_float+0x264>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	079b      	lsls	r3, r3, #30
 800ae14:	f100 8105 	bmi.w	800b022 <_printf_float+0x462>
 800ae18:	68e0      	ldr	r0, [r4, #12]
 800ae1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae1c:	4298      	cmp	r0, r3
 800ae1e:	bfb8      	it	lt
 800ae20:	4618      	movlt	r0, r3
 800ae22:	e730      	b.n	800ac86 <_printf_float+0xc6>
 800ae24:	2301      	movs	r3, #1
 800ae26:	464a      	mov	r2, r9
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b8      	blx	r7
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f43f af27 	beq.w	800ac82 <_printf_float+0xc2>
 800ae34:	f108 0801 	add.w	r8, r8, #1
 800ae38:	e7e6      	b.n	800ae08 <_printf_float+0x248>
 800ae3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dc39      	bgt.n	800aeb4 <_printf_float+0x2f4>
 800ae40:	4a1b      	ldr	r2, [pc, #108]	; (800aeb0 <_printf_float+0x2f0>)
 800ae42:	2301      	movs	r3, #1
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f af19 	beq.w	800ac82 <_printf_float+0xc2>
 800ae50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae54:	4313      	orrs	r3, r2
 800ae56:	d102      	bne.n	800ae5e <_printf_float+0x29e>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	07d9      	lsls	r1, r3, #31
 800ae5c:	d5d8      	bpl.n	800ae10 <_printf_float+0x250>
 800ae5e:	ee18 3a10 	vmov	r3, s16
 800ae62:	4652      	mov	r2, sl
 800ae64:	4631      	mov	r1, r6
 800ae66:	4628      	mov	r0, r5
 800ae68:	47b8      	blx	r7
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	f43f af09 	beq.w	800ac82 <_printf_float+0xc2>
 800ae70:	f04f 0900 	mov.w	r9, #0
 800ae74:	f104 0a1a 	add.w	sl, r4, #26
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	425b      	negs	r3, r3
 800ae7c:	454b      	cmp	r3, r9
 800ae7e:	dc01      	bgt.n	800ae84 <_printf_float+0x2c4>
 800ae80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae82:	e792      	b.n	800adaa <_printf_float+0x1ea>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4652      	mov	r2, sl
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f aef7 	beq.w	800ac82 <_printf_float+0xc2>
 800ae94:	f109 0901 	add.w	r9, r9, #1
 800ae98:	e7ee      	b.n	800ae78 <_printf_float+0x2b8>
 800ae9a:	bf00      	nop
 800ae9c:	7fefffff 	.word	0x7fefffff
 800aea0:	0800f964 	.word	0x0800f964
 800aea4:	0800f968 	.word	0x0800f968
 800aea8:	0800f970 	.word	0x0800f970
 800aeac:	0800f96c 	.word	0x0800f96c
 800aeb0:	0800f974 	.word	0x0800f974
 800aeb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	bfa8      	it	ge
 800aebc:	461a      	movge	r2, r3
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	4691      	mov	r9, r2
 800aec2:	dc37      	bgt.n	800af34 <_printf_float+0x374>
 800aec4:	f04f 0b00 	mov.w	fp, #0
 800aec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aecc:	f104 021a 	add.w	r2, r4, #26
 800aed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aed2:	9305      	str	r3, [sp, #20]
 800aed4:	eba3 0309 	sub.w	r3, r3, r9
 800aed8:	455b      	cmp	r3, fp
 800aeda:	dc33      	bgt.n	800af44 <_printf_float+0x384>
 800aedc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aee0:	429a      	cmp	r2, r3
 800aee2:	db3b      	blt.n	800af5c <_printf_float+0x39c>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	07da      	lsls	r2, r3, #31
 800aee8:	d438      	bmi.n	800af5c <_printf_float+0x39c>
 800aeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeec:	9a05      	ldr	r2, [sp, #20]
 800aeee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aef0:	1a9a      	subs	r2, r3, r2
 800aef2:	eba3 0901 	sub.w	r9, r3, r1
 800aef6:	4591      	cmp	r9, r2
 800aef8:	bfa8      	it	ge
 800aefa:	4691      	movge	r9, r2
 800aefc:	f1b9 0f00 	cmp.w	r9, #0
 800af00:	dc35      	bgt.n	800af6e <_printf_float+0x3ae>
 800af02:	f04f 0800 	mov.w	r8, #0
 800af06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0a:	f104 0a1a 	add.w	sl, r4, #26
 800af0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af12:	1a9b      	subs	r3, r3, r2
 800af14:	eba3 0309 	sub.w	r3, r3, r9
 800af18:	4543      	cmp	r3, r8
 800af1a:	f77f af79 	ble.w	800ae10 <_printf_float+0x250>
 800af1e:	2301      	movs	r3, #1
 800af20:	4652      	mov	r2, sl
 800af22:	4631      	mov	r1, r6
 800af24:	4628      	mov	r0, r5
 800af26:	47b8      	blx	r7
 800af28:	3001      	adds	r0, #1
 800af2a:	f43f aeaa 	beq.w	800ac82 <_printf_float+0xc2>
 800af2e:	f108 0801 	add.w	r8, r8, #1
 800af32:	e7ec      	b.n	800af0e <_printf_float+0x34e>
 800af34:	4613      	mov	r3, r2
 800af36:	4631      	mov	r1, r6
 800af38:	4642      	mov	r2, r8
 800af3a:	4628      	mov	r0, r5
 800af3c:	47b8      	blx	r7
 800af3e:	3001      	adds	r0, #1
 800af40:	d1c0      	bne.n	800aec4 <_printf_float+0x304>
 800af42:	e69e      	b.n	800ac82 <_printf_float+0xc2>
 800af44:	2301      	movs	r3, #1
 800af46:	4631      	mov	r1, r6
 800af48:	4628      	mov	r0, r5
 800af4a:	9205      	str	r2, [sp, #20]
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f ae97 	beq.w	800ac82 <_printf_float+0xc2>
 800af54:	9a05      	ldr	r2, [sp, #20]
 800af56:	f10b 0b01 	add.w	fp, fp, #1
 800af5a:	e7b9      	b.n	800aed0 <_printf_float+0x310>
 800af5c:	ee18 3a10 	vmov	r3, s16
 800af60:	4652      	mov	r2, sl
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	d1be      	bne.n	800aeea <_printf_float+0x32a>
 800af6c:	e689      	b.n	800ac82 <_printf_float+0xc2>
 800af6e:	9a05      	ldr	r2, [sp, #20]
 800af70:	464b      	mov	r3, r9
 800af72:	4442      	add	r2, r8
 800af74:	4631      	mov	r1, r6
 800af76:	4628      	mov	r0, r5
 800af78:	47b8      	blx	r7
 800af7a:	3001      	adds	r0, #1
 800af7c:	d1c1      	bne.n	800af02 <_printf_float+0x342>
 800af7e:	e680      	b.n	800ac82 <_printf_float+0xc2>
 800af80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af82:	2a01      	cmp	r2, #1
 800af84:	dc01      	bgt.n	800af8a <_printf_float+0x3ca>
 800af86:	07db      	lsls	r3, r3, #31
 800af88:	d538      	bpl.n	800affc <_printf_float+0x43c>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4642      	mov	r2, r8
 800af8e:	4631      	mov	r1, r6
 800af90:	4628      	mov	r0, r5
 800af92:	47b8      	blx	r7
 800af94:	3001      	adds	r0, #1
 800af96:	f43f ae74 	beq.w	800ac82 <_printf_float+0xc2>
 800af9a:	ee18 3a10 	vmov	r3, s16
 800af9e:	4652      	mov	r2, sl
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b8      	blx	r7
 800afa6:	3001      	adds	r0, #1
 800afa8:	f43f ae6b 	beq.w	800ac82 <_printf_float+0xc2>
 800afac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afb0:	2200      	movs	r2, #0
 800afb2:	2300      	movs	r3, #0
 800afb4:	f7f5 fda0 	bl	8000af8 <__aeabi_dcmpeq>
 800afb8:	b9d8      	cbnz	r0, 800aff2 <_printf_float+0x432>
 800afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbc:	f108 0201 	add.w	r2, r8, #1
 800afc0:	3b01      	subs	r3, #1
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	d10e      	bne.n	800afea <_printf_float+0x42a>
 800afcc:	e659      	b.n	800ac82 <_printf_float+0xc2>
 800afce:	2301      	movs	r3, #1
 800afd0:	4652      	mov	r2, sl
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f ae52 	beq.w	800ac82 <_printf_float+0xc2>
 800afde:	f108 0801 	add.w	r8, r8, #1
 800afe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe4:	3b01      	subs	r3, #1
 800afe6:	4543      	cmp	r3, r8
 800afe8:	dcf1      	bgt.n	800afce <_printf_float+0x40e>
 800afea:	464b      	mov	r3, r9
 800afec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aff0:	e6dc      	b.n	800adac <_printf_float+0x1ec>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	f104 0a1a 	add.w	sl, r4, #26
 800affa:	e7f2      	b.n	800afe2 <_printf_float+0x422>
 800affc:	2301      	movs	r3, #1
 800affe:	4642      	mov	r2, r8
 800b000:	e7df      	b.n	800afc2 <_printf_float+0x402>
 800b002:	2301      	movs	r3, #1
 800b004:	464a      	mov	r2, r9
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	f43f ae38 	beq.w	800ac82 <_printf_float+0xc2>
 800b012:	f108 0801 	add.w	r8, r8, #1
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b01a:	1a5b      	subs	r3, r3, r1
 800b01c:	4543      	cmp	r3, r8
 800b01e:	dcf0      	bgt.n	800b002 <_printf_float+0x442>
 800b020:	e6fa      	b.n	800ae18 <_printf_float+0x258>
 800b022:	f04f 0800 	mov.w	r8, #0
 800b026:	f104 0919 	add.w	r9, r4, #25
 800b02a:	e7f4      	b.n	800b016 <_printf_float+0x456>

0800b02c <_printf_common>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	4616      	mov	r6, r2
 800b032:	4699      	mov	r9, r3
 800b034:	688a      	ldr	r2, [r1, #8]
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bfb8      	it	lt
 800b040:	4613      	movlt	r3, r2
 800b042:	6033      	str	r3, [r6, #0]
 800b044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b048:	4607      	mov	r7, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	b10a      	cbz	r2, 800b052 <_printf_common+0x26>
 800b04e:	3301      	adds	r3, #1
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	0699      	lsls	r1, r3, #26
 800b056:	bf42      	ittt	mi
 800b058:	6833      	ldrmi	r3, [r6, #0]
 800b05a:	3302      	addmi	r3, #2
 800b05c:	6033      	strmi	r3, [r6, #0]
 800b05e:	6825      	ldr	r5, [r4, #0]
 800b060:	f015 0506 	ands.w	r5, r5, #6
 800b064:	d106      	bne.n	800b074 <_printf_common+0x48>
 800b066:	f104 0a19 	add.w	sl, r4, #25
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	6832      	ldr	r2, [r6, #0]
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	42ab      	cmp	r3, r5
 800b072:	dc26      	bgt.n	800b0c2 <_printf_common+0x96>
 800b074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b078:	1e13      	subs	r3, r2, #0
 800b07a:	6822      	ldr	r2, [r4, #0]
 800b07c:	bf18      	it	ne
 800b07e:	2301      	movne	r3, #1
 800b080:	0692      	lsls	r2, r2, #26
 800b082:	d42b      	bmi.n	800b0dc <_printf_common+0xb0>
 800b084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b088:	4649      	mov	r1, r9
 800b08a:	4638      	mov	r0, r7
 800b08c:	47c0      	blx	r8
 800b08e:	3001      	adds	r0, #1
 800b090:	d01e      	beq.n	800b0d0 <_printf_common+0xa4>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	68e5      	ldr	r5, [r4, #12]
 800b096:	6832      	ldr	r2, [r6, #0]
 800b098:	f003 0306 	and.w	r3, r3, #6
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	bf08      	it	eq
 800b0a0:	1aad      	subeq	r5, r5, r2
 800b0a2:	68a3      	ldr	r3, [r4, #8]
 800b0a4:	6922      	ldr	r2, [r4, #16]
 800b0a6:	bf0c      	ite	eq
 800b0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ac:	2500      	movne	r5, #0
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bfc4      	itt	gt
 800b0b2:	1a9b      	subgt	r3, r3, r2
 800b0b4:	18ed      	addgt	r5, r5, r3
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	341a      	adds	r4, #26
 800b0ba:	42b5      	cmp	r5, r6
 800b0bc:	d11a      	bne.n	800b0f4 <_printf_common+0xc8>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e008      	b.n	800b0d4 <_printf_common+0xa8>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	47c0      	blx	r8
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d103      	bne.n	800b0d8 <_printf_common+0xac>
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d8:	3501      	adds	r5, #1
 800b0da:	e7c6      	b.n	800b06a <_printf_common+0x3e>
 800b0dc:	18e1      	adds	r1, r4, r3
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	2030      	movs	r0, #48	; 0x30
 800b0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0e6:	4422      	add	r2, r4
 800b0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	e7c7      	b.n	800b084 <_printf_common+0x58>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c0      	blx	r8
 800b0fe:	3001      	adds	r0, #1
 800b100:	d0e6      	beq.n	800b0d0 <_printf_common+0xa4>
 800b102:	3601      	adds	r6, #1
 800b104:	e7d9      	b.n	800b0ba <_printf_common+0x8e>
	...

0800b108 <_printf_i>:
 800b108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b10c:	7e0f      	ldrb	r7, [r1, #24]
 800b10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b110:	2f78      	cmp	r7, #120	; 0x78
 800b112:	4691      	mov	r9, r2
 800b114:	4680      	mov	r8, r0
 800b116:	460c      	mov	r4, r1
 800b118:	469a      	mov	sl, r3
 800b11a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b11e:	d807      	bhi.n	800b130 <_printf_i+0x28>
 800b120:	2f62      	cmp	r7, #98	; 0x62
 800b122:	d80a      	bhi.n	800b13a <_printf_i+0x32>
 800b124:	2f00      	cmp	r7, #0
 800b126:	f000 80d8 	beq.w	800b2da <_printf_i+0x1d2>
 800b12a:	2f58      	cmp	r7, #88	; 0x58
 800b12c:	f000 80a3 	beq.w	800b276 <_printf_i+0x16e>
 800b130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b138:	e03a      	b.n	800b1b0 <_printf_i+0xa8>
 800b13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b13e:	2b15      	cmp	r3, #21
 800b140:	d8f6      	bhi.n	800b130 <_printf_i+0x28>
 800b142:	a101      	add	r1, pc, #4	; (adr r1, 800b148 <_printf_i+0x40>)
 800b144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1b5 	.word	0x0800b1b5
 800b150:	0800b131 	.word	0x0800b131
 800b154:	0800b131 	.word	0x0800b131
 800b158:	0800b131 	.word	0x0800b131
 800b15c:	0800b131 	.word	0x0800b131
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b131 	.word	0x0800b131
 800b168:	0800b131 	.word	0x0800b131
 800b16c:	0800b131 	.word	0x0800b131
 800b170:	0800b131 	.word	0x0800b131
 800b174:	0800b2c1 	.word	0x0800b2c1
 800b178:	0800b1e5 	.word	0x0800b1e5
 800b17c:	0800b2a3 	.word	0x0800b2a3
 800b180:	0800b131 	.word	0x0800b131
 800b184:	0800b131 	.word	0x0800b131
 800b188:	0800b2e3 	.word	0x0800b2e3
 800b18c:	0800b131 	.word	0x0800b131
 800b190:	0800b1e5 	.word	0x0800b1e5
 800b194:	0800b131 	.word	0x0800b131
 800b198:	0800b131 	.word	0x0800b131
 800b19c:	0800b2ab 	.word	0x0800b2ab
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	1d1a      	adds	r2, r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	602a      	str	r2, [r5, #0]
 800b1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e0a3      	b.n	800b2fc <_printf_i+0x1f4>
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	6829      	ldr	r1, [r5, #0]
 800b1b8:	0606      	lsls	r6, r0, #24
 800b1ba:	f101 0304 	add.w	r3, r1, #4
 800b1be:	d50a      	bpl.n	800b1d6 <_printf_i+0xce>
 800b1c0:	680e      	ldr	r6, [r1, #0]
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	2e00      	cmp	r6, #0
 800b1c6:	da03      	bge.n	800b1d0 <_printf_i+0xc8>
 800b1c8:	232d      	movs	r3, #45	; 0x2d
 800b1ca:	4276      	negs	r6, r6
 800b1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d0:	485e      	ldr	r0, [pc, #376]	; (800b34c <_printf_i+0x244>)
 800b1d2:	230a      	movs	r3, #10
 800b1d4:	e019      	b.n	800b20a <_printf_i+0x102>
 800b1d6:	680e      	ldr	r6, [r1, #0]
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1de:	bf18      	it	ne
 800b1e0:	b236      	sxthne	r6, r6
 800b1e2:	e7ef      	b.n	800b1c4 <_printf_i+0xbc>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	6820      	ldr	r0, [r4, #0]
 800b1e8:	1d19      	adds	r1, r3, #4
 800b1ea:	6029      	str	r1, [r5, #0]
 800b1ec:	0601      	lsls	r1, r0, #24
 800b1ee:	d501      	bpl.n	800b1f4 <_printf_i+0xec>
 800b1f0:	681e      	ldr	r6, [r3, #0]
 800b1f2:	e002      	b.n	800b1fa <_printf_i+0xf2>
 800b1f4:	0646      	lsls	r6, r0, #25
 800b1f6:	d5fb      	bpl.n	800b1f0 <_printf_i+0xe8>
 800b1f8:	881e      	ldrh	r6, [r3, #0]
 800b1fa:	4854      	ldr	r0, [pc, #336]	; (800b34c <_printf_i+0x244>)
 800b1fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b1fe:	bf0c      	ite	eq
 800b200:	2308      	moveq	r3, #8
 800b202:	230a      	movne	r3, #10
 800b204:	2100      	movs	r1, #0
 800b206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b20a:	6865      	ldr	r5, [r4, #4]
 800b20c:	60a5      	str	r5, [r4, #8]
 800b20e:	2d00      	cmp	r5, #0
 800b210:	bfa2      	ittt	ge
 800b212:	6821      	ldrge	r1, [r4, #0]
 800b214:	f021 0104 	bicge.w	r1, r1, #4
 800b218:	6021      	strge	r1, [r4, #0]
 800b21a:	b90e      	cbnz	r6, 800b220 <_printf_i+0x118>
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	d04d      	beq.n	800b2bc <_printf_i+0x1b4>
 800b220:	4615      	mov	r5, r2
 800b222:	fbb6 f1f3 	udiv	r1, r6, r3
 800b226:	fb03 6711 	mls	r7, r3, r1, r6
 800b22a:	5dc7      	ldrb	r7, [r0, r7]
 800b22c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b230:	4637      	mov	r7, r6
 800b232:	42bb      	cmp	r3, r7
 800b234:	460e      	mov	r6, r1
 800b236:	d9f4      	bls.n	800b222 <_printf_i+0x11a>
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d10b      	bne.n	800b254 <_printf_i+0x14c>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	07de      	lsls	r6, r3, #31
 800b240:	d508      	bpl.n	800b254 <_printf_i+0x14c>
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	6861      	ldr	r1, [r4, #4]
 800b246:	4299      	cmp	r1, r3
 800b248:	bfde      	ittt	le
 800b24a:	2330      	movle	r3, #48	; 0x30
 800b24c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b250:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b254:	1b52      	subs	r2, r2, r5
 800b256:	6122      	str	r2, [r4, #16]
 800b258:	f8cd a000 	str.w	sl, [sp]
 800b25c:	464b      	mov	r3, r9
 800b25e:	aa03      	add	r2, sp, #12
 800b260:	4621      	mov	r1, r4
 800b262:	4640      	mov	r0, r8
 800b264:	f7ff fee2 	bl	800b02c <_printf_common>
 800b268:	3001      	adds	r0, #1
 800b26a:	d14c      	bne.n	800b306 <_printf_i+0x1fe>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	b004      	add	sp, #16
 800b272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b276:	4835      	ldr	r0, [pc, #212]	; (800b34c <_printf_i+0x244>)
 800b278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b27c:	6829      	ldr	r1, [r5, #0]
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	f851 6b04 	ldr.w	r6, [r1], #4
 800b284:	6029      	str	r1, [r5, #0]
 800b286:	061d      	lsls	r5, r3, #24
 800b288:	d514      	bpl.n	800b2b4 <_printf_i+0x1ac>
 800b28a:	07df      	lsls	r7, r3, #31
 800b28c:	bf44      	itt	mi
 800b28e:	f043 0320 	orrmi.w	r3, r3, #32
 800b292:	6023      	strmi	r3, [r4, #0]
 800b294:	b91e      	cbnz	r6, 800b29e <_printf_i+0x196>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	f023 0320 	bic.w	r3, r3, #32
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	2310      	movs	r3, #16
 800b2a0:	e7b0      	b.n	800b204 <_printf_i+0xfc>
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	f043 0320 	orr.w	r3, r3, #32
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	2378      	movs	r3, #120	; 0x78
 800b2ac:	4828      	ldr	r0, [pc, #160]	; (800b350 <_printf_i+0x248>)
 800b2ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2b2:	e7e3      	b.n	800b27c <_printf_i+0x174>
 800b2b4:	0659      	lsls	r1, r3, #25
 800b2b6:	bf48      	it	mi
 800b2b8:	b2b6      	uxthmi	r6, r6
 800b2ba:	e7e6      	b.n	800b28a <_printf_i+0x182>
 800b2bc:	4615      	mov	r5, r2
 800b2be:	e7bb      	b.n	800b238 <_printf_i+0x130>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	6826      	ldr	r6, [r4, #0]
 800b2c4:	6961      	ldr	r1, [r4, #20]
 800b2c6:	1d18      	adds	r0, r3, #4
 800b2c8:	6028      	str	r0, [r5, #0]
 800b2ca:	0635      	lsls	r5, r6, #24
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	d501      	bpl.n	800b2d4 <_printf_i+0x1cc>
 800b2d0:	6019      	str	r1, [r3, #0]
 800b2d2:	e002      	b.n	800b2da <_printf_i+0x1d2>
 800b2d4:	0670      	lsls	r0, r6, #25
 800b2d6:	d5fb      	bpl.n	800b2d0 <_printf_i+0x1c8>
 800b2d8:	8019      	strh	r1, [r3, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	6123      	str	r3, [r4, #16]
 800b2de:	4615      	mov	r5, r2
 800b2e0:	e7ba      	b.n	800b258 <_printf_i+0x150>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	1d1a      	adds	r2, r3, #4
 800b2e6:	602a      	str	r2, [r5, #0]
 800b2e8:	681d      	ldr	r5, [r3, #0]
 800b2ea:	6862      	ldr	r2, [r4, #4]
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f7f4 ff8e 	bl	8000210 <memchr>
 800b2f4:	b108      	cbz	r0, 800b2fa <_printf_i+0x1f2>
 800b2f6:	1b40      	subs	r0, r0, r5
 800b2f8:	6060      	str	r0, [r4, #4]
 800b2fa:	6863      	ldr	r3, [r4, #4]
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	2300      	movs	r3, #0
 800b300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b304:	e7a8      	b.n	800b258 <_printf_i+0x150>
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	462a      	mov	r2, r5
 800b30a:	4649      	mov	r1, r9
 800b30c:	4640      	mov	r0, r8
 800b30e:	47d0      	blx	sl
 800b310:	3001      	adds	r0, #1
 800b312:	d0ab      	beq.n	800b26c <_printf_i+0x164>
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	079b      	lsls	r3, r3, #30
 800b318:	d413      	bmi.n	800b342 <_printf_i+0x23a>
 800b31a:	68e0      	ldr	r0, [r4, #12]
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	4298      	cmp	r0, r3
 800b320:	bfb8      	it	lt
 800b322:	4618      	movlt	r0, r3
 800b324:	e7a4      	b.n	800b270 <_printf_i+0x168>
 800b326:	2301      	movs	r3, #1
 800b328:	4632      	mov	r2, r6
 800b32a:	4649      	mov	r1, r9
 800b32c:	4640      	mov	r0, r8
 800b32e:	47d0      	blx	sl
 800b330:	3001      	adds	r0, #1
 800b332:	d09b      	beq.n	800b26c <_printf_i+0x164>
 800b334:	3501      	adds	r5, #1
 800b336:	68e3      	ldr	r3, [r4, #12]
 800b338:	9903      	ldr	r1, [sp, #12]
 800b33a:	1a5b      	subs	r3, r3, r1
 800b33c:	42ab      	cmp	r3, r5
 800b33e:	dcf2      	bgt.n	800b326 <_printf_i+0x21e>
 800b340:	e7eb      	b.n	800b31a <_printf_i+0x212>
 800b342:	2500      	movs	r5, #0
 800b344:	f104 0619 	add.w	r6, r4, #25
 800b348:	e7f5      	b.n	800b336 <_printf_i+0x22e>
 800b34a:	bf00      	nop
 800b34c:	0800f976 	.word	0x0800f976
 800b350:	0800f987 	.word	0x0800f987

0800b354 <_sbrk_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d06      	ldr	r5, [pc, #24]	; (800b370 <_sbrk_r+0x1c>)
 800b358:	2300      	movs	r3, #0
 800b35a:	4604      	mov	r4, r0
 800b35c:	4608      	mov	r0, r1
 800b35e:	602b      	str	r3, [r5, #0]
 800b360:	f004 f9c0 	bl	800f6e4 <_sbrk>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_sbrk_r+0x1a>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_sbrk_r+0x1a>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	200133fc 	.word	0x200133fc

0800b374 <quorem>:
 800b374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	6903      	ldr	r3, [r0, #16]
 800b37a:	690c      	ldr	r4, [r1, #16]
 800b37c:	42a3      	cmp	r3, r4
 800b37e:	4607      	mov	r7, r0
 800b380:	f2c0 8081 	blt.w	800b486 <quorem+0x112>
 800b384:	3c01      	subs	r4, #1
 800b386:	f101 0814 	add.w	r8, r1, #20
 800b38a:	f100 0514 	add.w	r5, r0, #20
 800b38e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b39c:	3301      	adds	r3, #1
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3ac:	d331      	bcc.n	800b412 <quorem+0x9e>
 800b3ae:	f04f 0e00 	mov.w	lr, #0
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	46ac      	mov	ip, r5
 800b3b6:	46f2      	mov	sl, lr
 800b3b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3bc:	b293      	uxth	r3, r2
 800b3be:	fb06 e303 	mla	r3, r6, r3, lr
 800b3c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	ebaa 0303 	sub.w	r3, sl, r3
 800b3cc:	f8dc a000 	ldr.w	sl, [ip]
 800b3d0:	0c12      	lsrs	r2, r2, #16
 800b3d2:	fa13 f38a 	uxtah	r3, r3, sl
 800b3d6:	fb06 e202 	mla	r2, r6, r2, lr
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b3e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800b3f0:	4581      	cmp	r9, r0
 800b3f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3f6:	f84c 3b04 	str.w	r3, [ip], #4
 800b3fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b3fe:	d2db      	bcs.n	800b3b8 <quorem+0x44>
 800b400:	f855 300b 	ldr.w	r3, [r5, fp]
 800b404:	b92b      	cbnz	r3, 800b412 <quorem+0x9e>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	3b04      	subs	r3, #4
 800b40a:	429d      	cmp	r5, r3
 800b40c:	461a      	mov	r2, r3
 800b40e:	d32e      	bcc.n	800b46e <quorem+0xfa>
 800b410:	613c      	str	r4, [r7, #16]
 800b412:	4638      	mov	r0, r7
 800b414:	f001 f8bc 	bl	800c590 <__mcmp>
 800b418:	2800      	cmp	r0, #0
 800b41a:	db24      	blt.n	800b466 <quorem+0xf2>
 800b41c:	3601      	adds	r6, #1
 800b41e:	4628      	mov	r0, r5
 800b420:	f04f 0c00 	mov.w	ip, #0
 800b424:	f858 2b04 	ldr.w	r2, [r8], #4
 800b428:	f8d0 e000 	ldr.w	lr, [r0]
 800b42c:	b293      	uxth	r3, r2
 800b42e:	ebac 0303 	sub.w	r3, ip, r3
 800b432:	0c12      	lsrs	r2, r2, #16
 800b434:	fa13 f38e 	uxtah	r3, r3, lr
 800b438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b440:	b29b      	uxth	r3, r3
 800b442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b446:	45c1      	cmp	r9, r8
 800b448:	f840 3b04 	str.w	r3, [r0], #4
 800b44c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b450:	d2e8      	bcs.n	800b424 <quorem+0xb0>
 800b452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b45a:	b922      	cbnz	r2, 800b466 <quorem+0xf2>
 800b45c:	3b04      	subs	r3, #4
 800b45e:	429d      	cmp	r5, r3
 800b460:	461a      	mov	r2, r3
 800b462:	d30a      	bcc.n	800b47a <quorem+0x106>
 800b464:	613c      	str	r4, [r7, #16]
 800b466:	4630      	mov	r0, r6
 800b468:	b003      	add	sp, #12
 800b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46e:	6812      	ldr	r2, [r2, #0]
 800b470:	3b04      	subs	r3, #4
 800b472:	2a00      	cmp	r2, #0
 800b474:	d1cc      	bne.n	800b410 <quorem+0x9c>
 800b476:	3c01      	subs	r4, #1
 800b478:	e7c7      	b.n	800b40a <quorem+0x96>
 800b47a:	6812      	ldr	r2, [r2, #0]
 800b47c:	3b04      	subs	r3, #4
 800b47e:	2a00      	cmp	r2, #0
 800b480:	d1f0      	bne.n	800b464 <quorem+0xf0>
 800b482:	3c01      	subs	r4, #1
 800b484:	e7eb      	b.n	800b45e <quorem+0xea>
 800b486:	2000      	movs	r0, #0
 800b488:	e7ee      	b.n	800b468 <quorem+0xf4>
 800b48a:	0000      	movs	r0, r0
 800b48c:	0000      	movs	r0, r0
	...

0800b490 <_dtoa_r>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	ed2d 8b04 	vpush	{d8-d9}
 800b498:	ec57 6b10 	vmov	r6, r7, d0
 800b49c:	b093      	sub	sp, #76	; 0x4c
 800b49e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4a4:	9106      	str	r1, [sp, #24]
 800b4a6:	ee10 aa10 	vmov	sl, s0
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b4b0:	46bb      	mov	fp, r7
 800b4b2:	b975      	cbnz	r5, 800b4d2 <_dtoa_r+0x42>
 800b4b4:	2010      	movs	r0, #16
 800b4b6:	f7ff f9e5 	bl	800a884 <malloc>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	6260      	str	r0, [r4, #36]	; 0x24
 800b4be:	b920      	cbnz	r0, 800b4ca <_dtoa_r+0x3a>
 800b4c0:	4ba7      	ldr	r3, [pc, #668]	; (800b760 <_dtoa_r+0x2d0>)
 800b4c2:	21ea      	movs	r1, #234	; 0xea
 800b4c4:	48a7      	ldr	r0, [pc, #668]	; (800b764 <_dtoa_r+0x2d4>)
 800b4c6:	f001 f97b 	bl	800c7c0 <__assert_func>
 800b4ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4ce:	6005      	str	r5, [r0, #0]
 800b4d0:	60c5      	str	r5, [r0, #12]
 800b4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4d4:	6819      	ldr	r1, [r3, #0]
 800b4d6:	b151      	cbz	r1, 800b4ee <_dtoa_r+0x5e>
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	604a      	str	r2, [r1, #4]
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4093      	lsls	r3, r2
 800b4e0:	608b      	str	r3, [r1, #8]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 fe12 	bl	800c10c <_Bfree>
 800b4e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	1e3b      	subs	r3, r7, #0
 800b4f0:	bfaa      	itet	ge
 800b4f2:	2300      	movge	r3, #0
 800b4f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b4f8:	f8c8 3000 	strge.w	r3, [r8]
 800b4fc:	4b9a      	ldr	r3, [pc, #616]	; (800b768 <_dtoa_r+0x2d8>)
 800b4fe:	bfbc      	itt	lt
 800b500:	2201      	movlt	r2, #1
 800b502:	f8c8 2000 	strlt.w	r2, [r8]
 800b506:	ea33 030b 	bics.w	r3, r3, fp
 800b50a:	d11b      	bne.n	800b544 <_dtoa_r+0xb4>
 800b50c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b50e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b518:	4333      	orrs	r3, r6
 800b51a:	f000 8592 	beq.w	800c042 <_dtoa_r+0xbb2>
 800b51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b520:	b963      	cbnz	r3, 800b53c <_dtoa_r+0xac>
 800b522:	4b92      	ldr	r3, [pc, #584]	; (800b76c <_dtoa_r+0x2dc>)
 800b524:	e022      	b.n	800b56c <_dtoa_r+0xdc>
 800b526:	4b92      	ldr	r3, [pc, #584]	; (800b770 <_dtoa_r+0x2e0>)
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	3308      	adds	r3, #8
 800b52c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	9801      	ldr	r0, [sp, #4]
 800b532:	b013      	add	sp, #76	; 0x4c
 800b534:	ecbd 8b04 	vpop	{d8-d9}
 800b538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53c:	4b8b      	ldr	r3, [pc, #556]	; (800b76c <_dtoa_r+0x2dc>)
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	3303      	adds	r3, #3
 800b542:	e7f3      	b.n	800b52c <_dtoa_r+0x9c>
 800b544:	2200      	movs	r2, #0
 800b546:	2300      	movs	r3, #0
 800b548:	4650      	mov	r0, sl
 800b54a:	4659      	mov	r1, fp
 800b54c:	f7f5 fad4 	bl	8000af8 <__aeabi_dcmpeq>
 800b550:	ec4b ab19 	vmov	d9, sl, fp
 800b554:	4680      	mov	r8, r0
 800b556:	b158      	cbz	r0, 800b570 <_dtoa_r+0xe0>
 800b558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b55a:	2301      	movs	r3, #1
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 856b 	beq.w	800c03c <_dtoa_r+0xbac>
 800b566:	4883      	ldr	r0, [pc, #524]	; (800b774 <_dtoa_r+0x2e4>)
 800b568:	6018      	str	r0, [r3, #0]
 800b56a:	1e43      	subs	r3, r0, #1
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	e7df      	b.n	800b530 <_dtoa_r+0xa0>
 800b570:	ec4b ab10 	vmov	d0, sl, fp
 800b574:	aa10      	add	r2, sp, #64	; 0x40
 800b576:	a911      	add	r1, sp, #68	; 0x44
 800b578:	4620      	mov	r0, r4
 800b57a:	f001 f8af 	bl	800c6dc <__d2b>
 800b57e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b582:	ee08 0a10 	vmov	s16, r0
 800b586:	2d00      	cmp	r5, #0
 800b588:	f000 8084 	beq.w	800b694 <_dtoa_r+0x204>
 800b58c:	ee19 3a90 	vmov	r3, s19
 800b590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b594:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b598:	4656      	mov	r6, sl
 800b59a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b59e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b5a6:	4b74      	ldr	r3, [pc, #464]	; (800b778 <_dtoa_r+0x2e8>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	4639      	mov	r1, r7
 800b5ae:	f7f4 fe83 	bl	80002b8 <__aeabi_dsub>
 800b5b2:	a365      	add	r3, pc, #404	; (adr r3, 800b748 <_dtoa_r+0x2b8>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7f5 f836 	bl	8000628 <__aeabi_dmul>
 800b5bc:	a364      	add	r3, pc, #400	; (adr r3, 800b750 <_dtoa_r+0x2c0>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f7f4 fe7b 	bl	80002bc <__adddf3>
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	460f      	mov	r7, r1
 800b5cc:	f7f4 ffc2 	bl	8000554 <__aeabi_i2d>
 800b5d0:	a361      	add	r3, pc, #388	; (adr r3, 800b758 <_dtoa_r+0x2c8>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f5 f827 	bl	8000628 <__aeabi_dmul>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	4630      	mov	r0, r6
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f4 fe6b 	bl	80002bc <__adddf3>
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	f7f5 facd 	bl	8000b88 <__aeabi_d2iz>
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	9000      	str	r0, [sp, #0]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	4639      	mov	r1, r7
 800b5f8:	f7f5 fa88 	bl	8000b0c <__aeabi_dcmplt>
 800b5fc:	b150      	cbz	r0, 800b614 <_dtoa_r+0x184>
 800b5fe:	9800      	ldr	r0, [sp, #0]
 800b600:	f7f4 ffa8 	bl	8000554 <__aeabi_i2d>
 800b604:	4632      	mov	r2, r6
 800b606:	463b      	mov	r3, r7
 800b608:	f7f5 fa76 	bl	8000af8 <__aeabi_dcmpeq>
 800b60c:	b910      	cbnz	r0, 800b614 <_dtoa_r+0x184>
 800b60e:	9b00      	ldr	r3, [sp, #0]
 800b610:	3b01      	subs	r3, #1
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	2b16      	cmp	r3, #22
 800b618:	d85a      	bhi.n	800b6d0 <_dtoa_r+0x240>
 800b61a:	9a00      	ldr	r2, [sp, #0]
 800b61c:	4b57      	ldr	r3, [pc, #348]	; (800b77c <_dtoa_r+0x2ec>)
 800b61e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	ec51 0b19 	vmov	r0, r1, d9
 800b62a:	f7f5 fa6f 	bl	8000b0c <__aeabi_dcmplt>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d050      	beq.n	800b6d4 <_dtoa_r+0x244>
 800b632:	9b00      	ldr	r3, [sp, #0]
 800b634:	3b01      	subs	r3, #1
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	2300      	movs	r3, #0
 800b63a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b63c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b63e:	1b5d      	subs	r5, r3, r5
 800b640:	1e6b      	subs	r3, r5, #1
 800b642:	9305      	str	r3, [sp, #20]
 800b644:	bf45      	ittet	mi
 800b646:	f1c5 0301 	rsbmi	r3, r5, #1
 800b64a:	9304      	strmi	r3, [sp, #16]
 800b64c:	2300      	movpl	r3, #0
 800b64e:	2300      	movmi	r3, #0
 800b650:	bf4c      	ite	mi
 800b652:	9305      	strmi	r3, [sp, #20]
 800b654:	9304      	strpl	r3, [sp, #16]
 800b656:	9b00      	ldr	r3, [sp, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	db3d      	blt.n	800b6d8 <_dtoa_r+0x248>
 800b65c:	9b05      	ldr	r3, [sp, #20]
 800b65e:	9a00      	ldr	r2, [sp, #0]
 800b660:	920a      	str	r2, [sp, #40]	; 0x28
 800b662:	4413      	add	r3, r2
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	2300      	movs	r3, #0
 800b668:	9307      	str	r3, [sp, #28]
 800b66a:	9b06      	ldr	r3, [sp, #24]
 800b66c:	2b09      	cmp	r3, #9
 800b66e:	f200 8089 	bhi.w	800b784 <_dtoa_r+0x2f4>
 800b672:	2b05      	cmp	r3, #5
 800b674:	bfc4      	itt	gt
 800b676:	3b04      	subgt	r3, #4
 800b678:	9306      	strgt	r3, [sp, #24]
 800b67a:	9b06      	ldr	r3, [sp, #24]
 800b67c:	f1a3 0302 	sub.w	r3, r3, #2
 800b680:	bfcc      	ite	gt
 800b682:	2500      	movgt	r5, #0
 800b684:	2501      	movle	r5, #1
 800b686:	2b03      	cmp	r3, #3
 800b688:	f200 8087 	bhi.w	800b79a <_dtoa_r+0x30a>
 800b68c:	e8df f003 	tbb	[pc, r3]
 800b690:	59383a2d 	.word	0x59383a2d
 800b694:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b698:	441d      	add	r5, r3
 800b69a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b69e:	2b20      	cmp	r3, #32
 800b6a0:	bfc1      	itttt	gt
 800b6a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800b6ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6b2:	bfda      	itte	le
 800b6b4:	f1c3 0320 	rsble	r3, r3, #32
 800b6b8:	fa06 f003 	lslle.w	r0, r6, r3
 800b6bc:	4318      	orrgt	r0, r3
 800b6be:	f7f4 ff39 	bl	8000534 <__aeabi_ui2d>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b6ca:	3d01      	subs	r5, #1
 800b6cc:	930e      	str	r3, [sp, #56]	; 0x38
 800b6ce:	e76a      	b.n	800b5a6 <_dtoa_r+0x116>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e7b2      	b.n	800b63a <_dtoa_r+0x1aa>
 800b6d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b6d6:	e7b1      	b.n	800b63c <_dtoa_r+0x1ac>
 800b6d8:	9b04      	ldr	r3, [sp, #16]
 800b6da:	9a00      	ldr	r2, [sp, #0]
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	9304      	str	r3, [sp, #16]
 800b6e0:	4253      	negs	r3, r2
 800b6e2:	9307      	str	r3, [sp, #28]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6e8:	e7bf      	b.n	800b66a <_dtoa_r+0x1da>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	9308      	str	r3, [sp, #32]
 800b6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	dc55      	bgt.n	800b7a0 <_dtoa_r+0x310>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6fe:	e00c      	b.n	800b71a <_dtoa_r+0x28a>
 800b700:	2301      	movs	r3, #1
 800b702:	e7f3      	b.n	800b6ec <_dtoa_r+0x25c>
 800b704:	2300      	movs	r3, #0
 800b706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b708:	9308      	str	r3, [sp, #32]
 800b70a:	9b00      	ldr	r3, [sp, #0]
 800b70c:	4413      	add	r3, r2
 800b70e:	9302      	str	r3, [sp, #8]
 800b710:	3301      	adds	r3, #1
 800b712:	2b01      	cmp	r3, #1
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	bfb8      	it	lt
 800b718:	2301      	movlt	r3, #1
 800b71a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b71c:	2200      	movs	r2, #0
 800b71e:	6042      	str	r2, [r0, #4]
 800b720:	2204      	movs	r2, #4
 800b722:	f102 0614 	add.w	r6, r2, #20
 800b726:	429e      	cmp	r6, r3
 800b728:	6841      	ldr	r1, [r0, #4]
 800b72a:	d93d      	bls.n	800b7a8 <_dtoa_r+0x318>
 800b72c:	4620      	mov	r0, r4
 800b72e:	f000 fcad 	bl	800c08c <_Balloc>
 800b732:	9001      	str	r0, [sp, #4]
 800b734:	2800      	cmp	r0, #0
 800b736:	d13b      	bne.n	800b7b0 <_dtoa_r+0x320>
 800b738:	4b11      	ldr	r3, [pc, #68]	; (800b780 <_dtoa_r+0x2f0>)
 800b73a:	4602      	mov	r2, r0
 800b73c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b740:	e6c0      	b.n	800b4c4 <_dtoa_r+0x34>
 800b742:	2301      	movs	r3, #1
 800b744:	e7df      	b.n	800b706 <_dtoa_r+0x276>
 800b746:	bf00      	nop
 800b748:	636f4361 	.word	0x636f4361
 800b74c:	3fd287a7 	.word	0x3fd287a7
 800b750:	8b60c8b3 	.word	0x8b60c8b3
 800b754:	3fc68a28 	.word	0x3fc68a28
 800b758:	509f79fb 	.word	0x509f79fb
 800b75c:	3fd34413 	.word	0x3fd34413
 800b760:	0800f9a5 	.word	0x0800f9a5
 800b764:	0800f9bc 	.word	0x0800f9bc
 800b768:	7ff00000 	.word	0x7ff00000
 800b76c:	0800f9a1 	.word	0x0800f9a1
 800b770:	0800f998 	.word	0x0800f998
 800b774:	0800f975 	.word	0x0800f975
 800b778:	3ff80000 	.word	0x3ff80000
 800b77c:	0800fab0 	.word	0x0800fab0
 800b780:	0800fa17 	.word	0x0800fa17
 800b784:	2501      	movs	r5, #1
 800b786:	2300      	movs	r3, #0
 800b788:	9306      	str	r3, [sp, #24]
 800b78a:	9508      	str	r5, [sp, #32]
 800b78c:	f04f 33ff 	mov.w	r3, #4294967295
 800b790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b794:	2200      	movs	r2, #0
 800b796:	2312      	movs	r3, #18
 800b798:	e7b0      	b.n	800b6fc <_dtoa_r+0x26c>
 800b79a:	2301      	movs	r3, #1
 800b79c:	9308      	str	r3, [sp, #32]
 800b79e:	e7f5      	b.n	800b78c <_dtoa_r+0x2fc>
 800b7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7a6:	e7b8      	b.n	800b71a <_dtoa_r+0x28a>
 800b7a8:	3101      	adds	r1, #1
 800b7aa:	6041      	str	r1, [r0, #4]
 800b7ac:	0052      	lsls	r2, r2, #1
 800b7ae:	e7b8      	b.n	800b722 <_dtoa_r+0x292>
 800b7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b2:	9a01      	ldr	r2, [sp, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	2b0e      	cmp	r3, #14
 800b7ba:	f200 809d 	bhi.w	800b8f8 <_dtoa_r+0x468>
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	f000 809a 	beq.w	800b8f8 <_dtoa_r+0x468>
 800b7c4:	9b00      	ldr	r3, [sp, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	dd32      	ble.n	800b830 <_dtoa_r+0x3a0>
 800b7ca:	4ab7      	ldr	r2, [pc, #732]	; (800baa8 <_dtoa_r+0x618>)
 800b7cc:	f003 030f 	and.w	r3, r3, #15
 800b7d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b7d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7d8:	9b00      	ldr	r3, [sp, #0]
 800b7da:	05d8      	lsls	r0, r3, #23
 800b7dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b7e0:	d516      	bpl.n	800b810 <_dtoa_r+0x380>
 800b7e2:	4bb2      	ldr	r3, [pc, #712]	; (800baac <_dtoa_r+0x61c>)
 800b7e4:	ec51 0b19 	vmov	r0, r1, d9
 800b7e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7ec:	f7f5 f846 	bl	800087c <__aeabi_ddiv>
 800b7f0:	f007 070f 	and.w	r7, r7, #15
 800b7f4:	4682      	mov	sl, r0
 800b7f6:	468b      	mov	fp, r1
 800b7f8:	2503      	movs	r5, #3
 800b7fa:	4eac      	ldr	r6, [pc, #688]	; (800baac <_dtoa_r+0x61c>)
 800b7fc:	b957      	cbnz	r7, 800b814 <_dtoa_r+0x384>
 800b7fe:	4642      	mov	r2, r8
 800b800:	464b      	mov	r3, r9
 800b802:	4650      	mov	r0, sl
 800b804:	4659      	mov	r1, fp
 800b806:	f7f5 f839 	bl	800087c <__aeabi_ddiv>
 800b80a:	4682      	mov	sl, r0
 800b80c:	468b      	mov	fp, r1
 800b80e:	e028      	b.n	800b862 <_dtoa_r+0x3d2>
 800b810:	2502      	movs	r5, #2
 800b812:	e7f2      	b.n	800b7fa <_dtoa_r+0x36a>
 800b814:	07f9      	lsls	r1, r7, #31
 800b816:	d508      	bpl.n	800b82a <_dtoa_r+0x39a>
 800b818:	4640      	mov	r0, r8
 800b81a:	4649      	mov	r1, r9
 800b81c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b820:	f7f4 ff02 	bl	8000628 <__aeabi_dmul>
 800b824:	3501      	adds	r5, #1
 800b826:	4680      	mov	r8, r0
 800b828:	4689      	mov	r9, r1
 800b82a:	107f      	asrs	r7, r7, #1
 800b82c:	3608      	adds	r6, #8
 800b82e:	e7e5      	b.n	800b7fc <_dtoa_r+0x36c>
 800b830:	f000 809b 	beq.w	800b96a <_dtoa_r+0x4da>
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	4f9d      	ldr	r7, [pc, #628]	; (800baac <_dtoa_r+0x61c>)
 800b838:	425e      	negs	r6, r3
 800b83a:	4b9b      	ldr	r3, [pc, #620]	; (800baa8 <_dtoa_r+0x618>)
 800b83c:	f006 020f 	and.w	r2, r6, #15
 800b840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	ec51 0b19 	vmov	r0, r1, d9
 800b84c:	f7f4 feec 	bl	8000628 <__aeabi_dmul>
 800b850:	1136      	asrs	r6, r6, #4
 800b852:	4682      	mov	sl, r0
 800b854:	468b      	mov	fp, r1
 800b856:	2300      	movs	r3, #0
 800b858:	2502      	movs	r5, #2
 800b85a:	2e00      	cmp	r6, #0
 800b85c:	d17a      	bne.n	800b954 <_dtoa_r+0x4c4>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1d3      	bne.n	800b80a <_dtoa_r+0x37a>
 800b862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 8082 	beq.w	800b96e <_dtoa_r+0x4de>
 800b86a:	4b91      	ldr	r3, [pc, #580]	; (800bab0 <_dtoa_r+0x620>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	4650      	mov	r0, sl
 800b870:	4659      	mov	r1, fp
 800b872:	f7f5 f94b 	bl	8000b0c <__aeabi_dcmplt>
 800b876:	2800      	cmp	r0, #0
 800b878:	d079      	beq.n	800b96e <_dtoa_r+0x4de>
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d076      	beq.n	800b96e <_dtoa_r+0x4de>
 800b880:	9b02      	ldr	r3, [sp, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	dd36      	ble.n	800b8f4 <_dtoa_r+0x464>
 800b886:	9b00      	ldr	r3, [sp, #0]
 800b888:	4650      	mov	r0, sl
 800b88a:	4659      	mov	r1, fp
 800b88c:	1e5f      	subs	r7, r3, #1
 800b88e:	2200      	movs	r2, #0
 800b890:	4b88      	ldr	r3, [pc, #544]	; (800bab4 <_dtoa_r+0x624>)
 800b892:	f7f4 fec9 	bl	8000628 <__aeabi_dmul>
 800b896:	9e02      	ldr	r6, [sp, #8]
 800b898:	4682      	mov	sl, r0
 800b89a:	468b      	mov	fp, r1
 800b89c:	3501      	adds	r5, #1
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f7f4 fe58 	bl	8000554 <__aeabi_i2d>
 800b8a4:	4652      	mov	r2, sl
 800b8a6:	465b      	mov	r3, fp
 800b8a8:	f7f4 febe 	bl	8000628 <__aeabi_dmul>
 800b8ac:	4b82      	ldr	r3, [pc, #520]	; (800bab8 <_dtoa_r+0x628>)
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f7f4 fd04 	bl	80002bc <__adddf3>
 800b8b4:	46d0      	mov	r8, sl
 800b8b6:	46d9      	mov	r9, fp
 800b8b8:	4682      	mov	sl, r0
 800b8ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b8be:	2e00      	cmp	r6, #0
 800b8c0:	d158      	bne.n	800b974 <_dtoa_r+0x4e4>
 800b8c2:	4b7e      	ldr	r3, [pc, #504]	; (800babc <_dtoa_r+0x62c>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	4649      	mov	r1, r9
 800b8ca:	f7f4 fcf5 	bl	80002b8 <__aeabi_dsub>
 800b8ce:	4652      	mov	r2, sl
 800b8d0:	465b      	mov	r3, fp
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	4689      	mov	r9, r1
 800b8d6:	f7f5 f937 	bl	8000b48 <__aeabi_dcmpgt>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f040 8295 	bne.w	800be0a <_dtoa_r+0x97a>
 800b8e0:	4652      	mov	r2, sl
 800b8e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	f7f5 f90f 	bl	8000b0c <__aeabi_dcmplt>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	f040 8289 	bne.w	800be06 <_dtoa_r+0x976>
 800b8f4:	ec5b ab19 	vmov	sl, fp, d9
 800b8f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f2c0 8148 	blt.w	800bb90 <_dtoa_r+0x700>
 800b900:	9a00      	ldr	r2, [sp, #0]
 800b902:	2a0e      	cmp	r2, #14
 800b904:	f300 8144 	bgt.w	800bb90 <_dtoa_r+0x700>
 800b908:	4b67      	ldr	r3, [pc, #412]	; (800baa8 <_dtoa_r+0x618>)
 800b90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b90e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b914:	2b00      	cmp	r3, #0
 800b916:	f280 80d5 	bge.w	800bac4 <_dtoa_r+0x634>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f300 80d1 	bgt.w	800bac4 <_dtoa_r+0x634>
 800b922:	f040 826f 	bne.w	800be04 <_dtoa_r+0x974>
 800b926:	4b65      	ldr	r3, [pc, #404]	; (800babc <_dtoa_r+0x62c>)
 800b928:	2200      	movs	r2, #0
 800b92a:	4640      	mov	r0, r8
 800b92c:	4649      	mov	r1, r9
 800b92e:	f7f4 fe7b 	bl	8000628 <__aeabi_dmul>
 800b932:	4652      	mov	r2, sl
 800b934:	465b      	mov	r3, fp
 800b936:	f7f5 f8fd 	bl	8000b34 <__aeabi_dcmpge>
 800b93a:	9e03      	ldr	r6, [sp, #12]
 800b93c:	4637      	mov	r7, r6
 800b93e:	2800      	cmp	r0, #0
 800b940:	f040 8245 	bne.w	800bdce <_dtoa_r+0x93e>
 800b944:	9d01      	ldr	r5, [sp, #4]
 800b946:	2331      	movs	r3, #49	; 0x31
 800b948:	f805 3b01 	strb.w	r3, [r5], #1
 800b94c:	9b00      	ldr	r3, [sp, #0]
 800b94e:	3301      	adds	r3, #1
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	e240      	b.n	800bdd6 <_dtoa_r+0x946>
 800b954:	07f2      	lsls	r2, r6, #31
 800b956:	d505      	bpl.n	800b964 <_dtoa_r+0x4d4>
 800b958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95c:	f7f4 fe64 	bl	8000628 <__aeabi_dmul>
 800b960:	3501      	adds	r5, #1
 800b962:	2301      	movs	r3, #1
 800b964:	1076      	asrs	r6, r6, #1
 800b966:	3708      	adds	r7, #8
 800b968:	e777      	b.n	800b85a <_dtoa_r+0x3ca>
 800b96a:	2502      	movs	r5, #2
 800b96c:	e779      	b.n	800b862 <_dtoa_r+0x3d2>
 800b96e:	9f00      	ldr	r7, [sp, #0]
 800b970:	9e03      	ldr	r6, [sp, #12]
 800b972:	e794      	b.n	800b89e <_dtoa_r+0x40e>
 800b974:	9901      	ldr	r1, [sp, #4]
 800b976:	4b4c      	ldr	r3, [pc, #304]	; (800baa8 <_dtoa_r+0x618>)
 800b978:	4431      	add	r1, r6
 800b97a:	910d      	str	r1, [sp, #52]	; 0x34
 800b97c:	9908      	ldr	r1, [sp, #32]
 800b97e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b986:	2900      	cmp	r1, #0
 800b988:	d043      	beq.n	800ba12 <_dtoa_r+0x582>
 800b98a:	494d      	ldr	r1, [pc, #308]	; (800bac0 <_dtoa_r+0x630>)
 800b98c:	2000      	movs	r0, #0
 800b98e:	f7f4 ff75 	bl	800087c <__aeabi_ddiv>
 800b992:	4652      	mov	r2, sl
 800b994:	465b      	mov	r3, fp
 800b996:	f7f4 fc8f 	bl	80002b8 <__aeabi_dsub>
 800b99a:	9d01      	ldr	r5, [sp, #4]
 800b99c:	4682      	mov	sl, r0
 800b99e:	468b      	mov	fp, r1
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	f7f5 f8f0 	bl	8000b88 <__aeabi_d2iz>
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	f7f4 fdd3 	bl	8000554 <__aeabi_i2d>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	f7f4 fc7f 	bl	80002b8 <__aeabi_dsub>
 800b9ba:	3630      	adds	r6, #48	; 0x30
 800b9bc:	f805 6b01 	strb.w	r6, [r5], #1
 800b9c0:	4652      	mov	r2, sl
 800b9c2:	465b      	mov	r3, fp
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	4689      	mov	r9, r1
 800b9c8:	f7f5 f8a0 	bl	8000b0c <__aeabi_dcmplt>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d163      	bne.n	800ba98 <_dtoa_r+0x608>
 800b9d0:	4642      	mov	r2, r8
 800b9d2:	464b      	mov	r3, r9
 800b9d4:	4936      	ldr	r1, [pc, #216]	; (800bab0 <_dtoa_r+0x620>)
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	f7f4 fc6e 	bl	80002b8 <__aeabi_dsub>
 800b9dc:	4652      	mov	r2, sl
 800b9de:	465b      	mov	r3, fp
 800b9e0:	f7f5 f894 	bl	8000b0c <__aeabi_dcmplt>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	f040 80b5 	bne.w	800bb54 <_dtoa_r+0x6c4>
 800b9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ec:	429d      	cmp	r5, r3
 800b9ee:	d081      	beq.n	800b8f4 <_dtoa_r+0x464>
 800b9f0:	4b30      	ldr	r3, [pc, #192]	; (800bab4 <_dtoa_r+0x624>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	4650      	mov	r0, sl
 800b9f6:	4659      	mov	r1, fp
 800b9f8:	f7f4 fe16 	bl	8000628 <__aeabi_dmul>
 800b9fc:	4b2d      	ldr	r3, [pc, #180]	; (800bab4 <_dtoa_r+0x624>)
 800b9fe:	4682      	mov	sl, r0
 800ba00:	468b      	mov	fp, r1
 800ba02:	4640      	mov	r0, r8
 800ba04:	4649      	mov	r1, r9
 800ba06:	2200      	movs	r2, #0
 800ba08:	f7f4 fe0e 	bl	8000628 <__aeabi_dmul>
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4689      	mov	r9, r1
 800ba10:	e7c6      	b.n	800b9a0 <_dtoa_r+0x510>
 800ba12:	4650      	mov	r0, sl
 800ba14:	4659      	mov	r1, fp
 800ba16:	f7f4 fe07 	bl	8000628 <__aeabi_dmul>
 800ba1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba1c:	9d01      	ldr	r5, [sp, #4]
 800ba1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	4649      	mov	r1, r9
 800ba26:	4640      	mov	r0, r8
 800ba28:	f7f5 f8ae 	bl	8000b88 <__aeabi_d2iz>
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	f7f4 fd91 	bl	8000554 <__aeabi_i2d>
 800ba32:	3630      	adds	r6, #48	; 0x30
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	f7f4 fc3c 	bl	80002b8 <__aeabi_dsub>
 800ba40:	f805 6b01 	strb.w	r6, [r5], #1
 800ba44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba46:	429d      	cmp	r5, r3
 800ba48:	4680      	mov	r8, r0
 800ba4a:	4689      	mov	r9, r1
 800ba4c:	f04f 0200 	mov.w	r2, #0
 800ba50:	d124      	bne.n	800ba9c <_dtoa_r+0x60c>
 800ba52:	4b1b      	ldr	r3, [pc, #108]	; (800bac0 <_dtoa_r+0x630>)
 800ba54:	4650      	mov	r0, sl
 800ba56:	4659      	mov	r1, fp
 800ba58:	f7f4 fc30 	bl	80002bc <__adddf3>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	460b      	mov	r3, r1
 800ba60:	4640      	mov	r0, r8
 800ba62:	4649      	mov	r1, r9
 800ba64:	f7f5 f870 	bl	8000b48 <__aeabi_dcmpgt>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d173      	bne.n	800bb54 <_dtoa_r+0x6c4>
 800ba6c:	4652      	mov	r2, sl
 800ba6e:	465b      	mov	r3, fp
 800ba70:	4913      	ldr	r1, [pc, #76]	; (800bac0 <_dtoa_r+0x630>)
 800ba72:	2000      	movs	r0, #0
 800ba74:	f7f4 fc20 	bl	80002b8 <__aeabi_dsub>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	4649      	mov	r1, r9
 800ba80:	f7f5 f844 	bl	8000b0c <__aeabi_dcmplt>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	f43f af35 	beq.w	800b8f4 <_dtoa_r+0x464>
 800ba8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ba8c:	1e6b      	subs	r3, r5, #1
 800ba8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba94:	2b30      	cmp	r3, #48	; 0x30
 800ba96:	d0f8      	beq.n	800ba8a <_dtoa_r+0x5fa>
 800ba98:	9700      	str	r7, [sp, #0]
 800ba9a:	e049      	b.n	800bb30 <_dtoa_r+0x6a0>
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <_dtoa_r+0x624>)
 800ba9e:	f7f4 fdc3 	bl	8000628 <__aeabi_dmul>
 800baa2:	4680      	mov	r8, r0
 800baa4:	4689      	mov	r9, r1
 800baa6:	e7bd      	b.n	800ba24 <_dtoa_r+0x594>
 800baa8:	0800fab0 	.word	0x0800fab0
 800baac:	0800fa88 	.word	0x0800fa88
 800bab0:	3ff00000 	.word	0x3ff00000
 800bab4:	40240000 	.word	0x40240000
 800bab8:	401c0000 	.word	0x401c0000
 800babc:	40140000 	.word	0x40140000
 800bac0:	3fe00000 	.word	0x3fe00000
 800bac4:	9d01      	ldr	r5, [sp, #4]
 800bac6:	4656      	mov	r6, sl
 800bac8:	465f      	mov	r7, fp
 800baca:	4642      	mov	r2, r8
 800bacc:	464b      	mov	r3, r9
 800bace:	4630      	mov	r0, r6
 800bad0:	4639      	mov	r1, r7
 800bad2:	f7f4 fed3 	bl	800087c <__aeabi_ddiv>
 800bad6:	f7f5 f857 	bl	8000b88 <__aeabi_d2iz>
 800bada:	4682      	mov	sl, r0
 800badc:	f7f4 fd3a 	bl	8000554 <__aeabi_i2d>
 800bae0:	4642      	mov	r2, r8
 800bae2:	464b      	mov	r3, r9
 800bae4:	f7f4 fda0 	bl	8000628 <__aeabi_dmul>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800baf4:	f7f4 fbe0 	bl	80002b8 <__aeabi_dsub>
 800baf8:	f805 6b01 	strb.w	r6, [r5], #1
 800bafc:	9e01      	ldr	r6, [sp, #4]
 800bafe:	9f03      	ldr	r7, [sp, #12]
 800bb00:	1bae      	subs	r6, r5, r6
 800bb02:	42b7      	cmp	r7, r6
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	d135      	bne.n	800bb76 <_dtoa_r+0x6e6>
 800bb0a:	f7f4 fbd7 	bl	80002bc <__adddf3>
 800bb0e:	4642      	mov	r2, r8
 800bb10:	464b      	mov	r3, r9
 800bb12:	4606      	mov	r6, r0
 800bb14:	460f      	mov	r7, r1
 800bb16:	f7f5 f817 	bl	8000b48 <__aeabi_dcmpgt>
 800bb1a:	b9d0      	cbnz	r0, 800bb52 <_dtoa_r+0x6c2>
 800bb1c:	4642      	mov	r2, r8
 800bb1e:	464b      	mov	r3, r9
 800bb20:	4630      	mov	r0, r6
 800bb22:	4639      	mov	r1, r7
 800bb24:	f7f4 ffe8 	bl	8000af8 <__aeabi_dcmpeq>
 800bb28:	b110      	cbz	r0, 800bb30 <_dtoa_r+0x6a0>
 800bb2a:	f01a 0f01 	tst.w	sl, #1
 800bb2e:	d110      	bne.n	800bb52 <_dtoa_r+0x6c2>
 800bb30:	4620      	mov	r0, r4
 800bb32:	ee18 1a10 	vmov	r1, s16
 800bb36:	f000 fae9 	bl	800c10c <_Bfree>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	9800      	ldr	r0, [sp, #0]
 800bb3e:	702b      	strb	r3, [r5, #0]
 800bb40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb42:	3001      	adds	r0, #1
 800bb44:	6018      	str	r0, [r3, #0]
 800bb46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f43f acf1 	beq.w	800b530 <_dtoa_r+0xa0>
 800bb4e:	601d      	str	r5, [r3, #0]
 800bb50:	e4ee      	b.n	800b530 <_dtoa_r+0xa0>
 800bb52:	9f00      	ldr	r7, [sp, #0]
 800bb54:	462b      	mov	r3, r5
 800bb56:	461d      	mov	r5, r3
 800bb58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb5c:	2a39      	cmp	r2, #57	; 0x39
 800bb5e:	d106      	bne.n	800bb6e <_dtoa_r+0x6de>
 800bb60:	9a01      	ldr	r2, [sp, #4]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d1f7      	bne.n	800bb56 <_dtoa_r+0x6c6>
 800bb66:	9901      	ldr	r1, [sp, #4]
 800bb68:	2230      	movs	r2, #48	; 0x30
 800bb6a:	3701      	adds	r7, #1
 800bb6c:	700a      	strb	r2, [r1, #0]
 800bb6e:	781a      	ldrb	r2, [r3, #0]
 800bb70:	3201      	adds	r2, #1
 800bb72:	701a      	strb	r2, [r3, #0]
 800bb74:	e790      	b.n	800ba98 <_dtoa_r+0x608>
 800bb76:	4ba6      	ldr	r3, [pc, #664]	; (800be10 <_dtoa_r+0x980>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f7f4 fd55 	bl	8000628 <__aeabi_dmul>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2300      	movs	r3, #0
 800bb82:	4606      	mov	r6, r0
 800bb84:	460f      	mov	r7, r1
 800bb86:	f7f4 ffb7 	bl	8000af8 <__aeabi_dcmpeq>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d09d      	beq.n	800baca <_dtoa_r+0x63a>
 800bb8e:	e7cf      	b.n	800bb30 <_dtoa_r+0x6a0>
 800bb90:	9a08      	ldr	r2, [sp, #32]
 800bb92:	2a00      	cmp	r2, #0
 800bb94:	f000 80d7 	beq.w	800bd46 <_dtoa_r+0x8b6>
 800bb98:	9a06      	ldr	r2, [sp, #24]
 800bb9a:	2a01      	cmp	r2, #1
 800bb9c:	f300 80ba 	bgt.w	800bd14 <_dtoa_r+0x884>
 800bba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	f000 80b2 	beq.w	800bd0c <_dtoa_r+0x87c>
 800bba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbac:	9e07      	ldr	r6, [sp, #28]
 800bbae:	9d04      	ldr	r5, [sp, #16]
 800bbb0:	9a04      	ldr	r2, [sp, #16]
 800bbb2:	441a      	add	r2, r3
 800bbb4:	9204      	str	r2, [sp, #16]
 800bbb6:	9a05      	ldr	r2, [sp, #20]
 800bbb8:	2101      	movs	r1, #1
 800bbba:	441a      	add	r2, r3
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	9205      	str	r2, [sp, #20]
 800bbc0:	f000 fb5c 	bl	800c27c <__i2b>
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	2d00      	cmp	r5, #0
 800bbc8:	dd0c      	ble.n	800bbe4 <_dtoa_r+0x754>
 800bbca:	9b05      	ldr	r3, [sp, #20]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	dd09      	ble.n	800bbe4 <_dtoa_r+0x754>
 800bbd0:	42ab      	cmp	r3, r5
 800bbd2:	9a04      	ldr	r2, [sp, #16]
 800bbd4:	bfa8      	it	ge
 800bbd6:	462b      	movge	r3, r5
 800bbd8:	1ad2      	subs	r2, r2, r3
 800bbda:	9204      	str	r2, [sp, #16]
 800bbdc:	9a05      	ldr	r2, [sp, #20]
 800bbde:	1aed      	subs	r5, r5, r3
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	9b07      	ldr	r3, [sp, #28]
 800bbe6:	b31b      	cbz	r3, 800bc30 <_dtoa_r+0x7a0>
 800bbe8:	9b08      	ldr	r3, [sp, #32]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80af 	beq.w	800bd4e <_dtoa_r+0x8be>
 800bbf0:	2e00      	cmp	r6, #0
 800bbf2:	dd13      	ble.n	800bc1c <_dtoa_r+0x78c>
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	4632      	mov	r2, r6
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f000 fbff 	bl	800c3fc <__pow5mult>
 800bbfe:	ee18 2a10 	vmov	r2, s16
 800bc02:	4601      	mov	r1, r0
 800bc04:	4607      	mov	r7, r0
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fb4e 	bl	800c2a8 <__multiply>
 800bc0c:	ee18 1a10 	vmov	r1, s16
 800bc10:	4680      	mov	r8, r0
 800bc12:	4620      	mov	r0, r4
 800bc14:	f000 fa7a 	bl	800c10c <_Bfree>
 800bc18:	ee08 8a10 	vmov	s16, r8
 800bc1c:	9b07      	ldr	r3, [sp, #28]
 800bc1e:	1b9a      	subs	r2, r3, r6
 800bc20:	d006      	beq.n	800bc30 <_dtoa_r+0x7a0>
 800bc22:	ee18 1a10 	vmov	r1, s16
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 fbe8 	bl	800c3fc <__pow5mult>
 800bc2c:	ee08 0a10 	vmov	s16, r0
 800bc30:	2101      	movs	r1, #1
 800bc32:	4620      	mov	r0, r4
 800bc34:	f000 fb22 	bl	800c27c <__i2b>
 800bc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	f340 8088 	ble.w	800bd52 <_dtoa_r+0x8c2>
 800bc42:	461a      	mov	r2, r3
 800bc44:	4601      	mov	r1, r0
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 fbd8 	bl	800c3fc <__pow5mult>
 800bc4c:	9b06      	ldr	r3, [sp, #24]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	4606      	mov	r6, r0
 800bc52:	f340 8081 	ble.w	800bd58 <_dtoa_r+0x8c8>
 800bc56:	f04f 0800 	mov.w	r8, #0
 800bc5a:	6933      	ldr	r3, [r6, #16]
 800bc5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc60:	6918      	ldr	r0, [r3, #16]
 800bc62:	f000 fabb 	bl	800c1dc <__hi0bits>
 800bc66:	f1c0 0020 	rsb	r0, r0, #32
 800bc6a:	9b05      	ldr	r3, [sp, #20]
 800bc6c:	4418      	add	r0, r3
 800bc6e:	f010 001f 	ands.w	r0, r0, #31
 800bc72:	f000 8092 	beq.w	800bd9a <_dtoa_r+0x90a>
 800bc76:	f1c0 0320 	rsb	r3, r0, #32
 800bc7a:	2b04      	cmp	r3, #4
 800bc7c:	f340 808a 	ble.w	800bd94 <_dtoa_r+0x904>
 800bc80:	f1c0 001c 	rsb	r0, r0, #28
 800bc84:	9b04      	ldr	r3, [sp, #16]
 800bc86:	4403      	add	r3, r0
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	9b05      	ldr	r3, [sp, #20]
 800bc8c:	4403      	add	r3, r0
 800bc8e:	4405      	add	r5, r0
 800bc90:	9305      	str	r3, [sp, #20]
 800bc92:	9b04      	ldr	r3, [sp, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dd07      	ble.n	800bca8 <_dtoa_r+0x818>
 800bc98:	ee18 1a10 	vmov	r1, s16
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 fc06 	bl	800c4b0 <__lshift>
 800bca4:	ee08 0a10 	vmov	s16, r0
 800bca8:	9b05      	ldr	r3, [sp, #20]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	dd05      	ble.n	800bcba <_dtoa_r+0x82a>
 800bcae:	4631      	mov	r1, r6
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 fbfc 	bl	800c4b0 <__lshift>
 800bcb8:	4606      	mov	r6, r0
 800bcba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d06e      	beq.n	800bd9e <_dtoa_r+0x90e>
 800bcc0:	ee18 0a10 	vmov	r0, s16
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	f000 fc63 	bl	800c590 <__mcmp>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	da67      	bge.n	800bd9e <_dtoa_r+0x90e>
 800bcce:	9b00      	ldr	r3, [sp, #0]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	ee18 1a10 	vmov	r1, s16
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	220a      	movs	r2, #10
 800bcda:	2300      	movs	r3, #0
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 fa37 	bl	800c150 <__multadd>
 800bce2:	9b08      	ldr	r3, [sp, #32]
 800bce4:	ee08 0a10 	vmov	s16, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 81b1 	beq.w	800c050 <_dtoa_r+0xbc0>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	220a      	movs	r2, #10
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f000 fa2b 	bl	800c150 <__multadd>
 800bcfa:	9b02      	ldr	r3, [sp, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	4607      	mov	r7, r0
 800bd00:	f300 808e 	bgt.w	800be20 <_dtoa_r+0x990>
 800bd04:	9b06      	ldr	r3, [sp, #24]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	dc51      	bgt.n	800bdae <_dtoa_r+0x91e>
 800bd0a:	e089      	b.n	800be20 <_dtoa_r+0x990>
 800bd0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd12:	e74b      	b.n	800bbac <_dtoa_r+0x71c>
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	1e5e      	subs	r6, r3, #1
 800bd18:	9b07      	ldr	r3, [sp, #28]
 800bd1a:	42b3      	cmp	r3, r6
 800bd1c:	bfbf      	itttt	lt
 800bd1e:	9b07      	ldrlt	r3, [sp, #28]
 800bd20:	9607      	strlt	r6, [sp, #28]
 800bd22:	1af2      	sublt	r2, r6, r3
 800bd24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd26:	bfb6      	itet	lt
 800bd28:	189b      	addlt	r3, r3, r2
 800bd2a:	1b9e      	subge	r6, r3, r6
 800bd2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	bfb8      	it	lt
 800bd32:	2600      	movlt	r6, #0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	bfb7      	itett	lt
 800bd38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bd3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bd40:	1a9d      	sublt	r5, r3, r2
 800bd42:	2300      	movlt	r3, #0
 800bd44:	e734      	b.n	800bbb0 <_dtoa_r+0x720>
 800bd46:	9e07      	ldr	r6, [sp, #28]
 800bd48:	9d04      	ldr	r5, [sp, #16]
 800bd4a:	9f08      	ldr	r7, [sp, #32]
 800bd4c:	e73b      	b.n	800bbc6 <_dtoa_r+0x736>
 800bd4e:	9a07      	ldr	r2, [sp, #28]
 800bd50:	e767      	b.n	800bc22 <_dtoa_r+0x792>
 800bd52:	9b06      	ldr	r3, [sp, #24]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	dc18      	bgt.n	800bd8a <_dtoa_r+0x8fa>
 800bd58:	f1ba 0f00 	cmp.w	sl, #0
 800bd5c:	d115      	bne.n	800bd8a <_dtoa_r+0x8fa>
 800bd5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd62:	b993      	cbnz	r3, 800bd8a <_dtoa_r+0x8fa>
 800bd64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd68:	0d1b      	lsrs	r3, r3, #20
 800bd6a:	051b      	lsls	r3, r3, #20
 800bd6c:	b183      	cbz	r3, 800bd90 <_dtoa_r+0x900>
 800bd6e:	9b04      	ldr	r3, [sp, #16]
 800bd70:	3301      	adds	r3, #1
 800bd72:	9304      	str	r3, [sp, #16]
 800bd74:	9b05      	ldr	r3, [sp, #20]
 800bd76:	3301      	adds	r3, #1
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	f04f 0801 	mov.w	r8, #1
 800bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f47f af6a 	bne.w	800bc5a <_dtoa_r+0x7ca>
 800bd86:	2001      	movs	r0, #1
 800bd88:	e76f      	b.n	800bc6a <_dtoa_r+0x7da>
 800bd8a:	f04f 0800 	mov.w	r8, #0
 800bd8e:	e7f6      	b.n	800bd7e <_dtoa_r+0x8ee>
 800bd90:	4698      	mov	r8, r3
 800bd92:	e7f4      	b.n	800bd7e <_dtoa_r+0x8ee>
 800bd94:	f43f af7d 	beq.w	800bc92 <_dtoa_r+0x802>
 800bd98:	4618      	mov	r0, r3
 800bd9a:	301c      	adds	r0, #28
 800bd9c:	e772      	b.n	800bc84 <_dtoa_r+0x7f4>
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dc37      	bgt.n	800be14 <_dtoa_r+0x984>
 800bda4:	9b06      	ldr	r3, [sp, #24]
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	dd34      	ble.n	800be14 <_dtoa_r+0x984>
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	9302      	str	r3, [sp, #8]
 800bdae:	9b02      	ldr	r3, [sp, #8]
 800bdb0:	b96b      	cbnz	r3, 800bdce <_dtoa_r+0x93e>
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f000 f9ca 	bl	800c150 <__multadd>
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	ee18 0a10 	vmov	r0, s16
 800bdc4:	f000 fbe4 	bl	800c590 <__mcmp>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	f73f adbb 	bgt.w	800b944 <_dtoa_r+0x4b4>
 800bdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd0:	9d01      	ldr	r5, [sp, #4]
 800bdd2:	43db      	mvns	r3, r3
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	4631      	mov	r1, r6
 800bddc:	4620      	mov	r0, r4
 800bdde:	f000 f995 	bl	800c10c <_Bfree>
 800bde2:	2f00      	cmp	r7, #0
 800bde4:	f43f aea4 	beq.w	800bb30 <_dtoa_r+0x6a0>
 800bde8:	f1b8 0f00 	cmp.w	r8, #0
 800bdec:	d005      	beq.n	800bdfa <_dtoa_r+0x96a>
 800bdee:	45b8      	cmp	r8, r7
 800bdf0:	d003      	beq.n	800bdfa <_dtoa_r+0x96a>
 800bdf2:	4641      	mov	r1, r8
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f000 f989 	bl	800c10c <_Bfree>
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f000 f985 	bl	800c10c <_Bfree>
 800be02:	e695      	b.n	800bb30 <_dtoa_r+0x6a0>
 800be04:	2600      	movs	r6, #0
 800be06:	4637      	mov	r7, r6
 800be08:	e7e1      	b.n	800bdce <_dtoa_r+0x93e>
 800be0a:	9700      	str	r7, [sp, #0]
 800be0c:	4637      	mov	r7, r6
 800be0e:	e599      	b.n	800b944 <_dtoa_r+0x4b4>
 800be10:	40240000 	.word	0x40240000
 800be14:	9b08      	ldr	r3, [sp, #32]
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 80ca 	beq.w	800bfb0 <_dtoa_r+0xb20>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	9302      	str	r3, [sp, #8]
 800be20:	2d00      	cmp	r5, #0
 800be22:	dd05      	ble.n	800be30 <_dtoa_r+0x9a0>
 800be24:	4639      	mov	r1, r7
 800be26:	462a      	mov	r2, r5
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 fb41 	bl	800c4b0 <__lshift>
 800be2e:	4607      	mov	r7, r0
 800be30:	f1b8 0f00 	cmp.w	r8, #0
 800be34:	d05b      	beq.n	800beee <_dtoa_r+0xa5e>
 800be36:	6879      	ldr	r1, [r7, #4]
 800be38:	4620      	mov	r0, r4
 800be3a:	f000 f927 	bl	800c08c <_Balloc>
 800be3e:	4605      	mov	r5, r0
 800be40:	b928      	cbnz	r0, 800be4e <_dtoa_r+0x9be>
 800be42:	4b87      	ldr	r3, [pc, #540]	; (800c060 <_dtoa_r+0xbd0>)
 800be44:	4602      	mov	r2, r0
 800be46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be4a:	f7ff bb3b 	b.w	800b4c4 <_dtoa_r+0x34>
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	3202      	adds	r2, #2
 800be52:	0092      	lsls	r2, r2, #2
 800be54:	f107 010c 	add.w	r1, r7, #12
 800be58:	300c      	adds	r0, #12
 800be5a:	f7fe fd1b 	bl	800a894 <memcpy>
 800be5e:	2201      	movs	r2, #1
 800be60:	4629      	mov	r1, r5
 800be62:	4620      	mov	r0, r4
 800be64:	f000 fb24 	bl	800c4b0 <__lshift>
 800be68:	9b01      	ldr	r3, [sp, #4]
 800be6a:	f103 0901 	add.w	r9, r3, #1
 800be6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800be72:	4413      	add	r3, r2
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	f00a 0301 	and.w	r3, sl, #1
 800be7a:	46b8      	mov	r8, r7
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	4607      	mov	r7, r0
 800be80:	4631      	mov	r1, r6
 800be82:	ee18 0a10 	vmov	r0, s16
 800be86:	f7ff fa75 	bl	800b374 <quorem>
 800be8a:	4641      	mov	r1, r8
 800be8c:	9002      	str	r0, [sp, #8]
 800be8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be92:	ee18 0a10 	vmov	r0, s16
 800be96:	f000 fb7b 	bl	800c590 <__mcmp>
 800be9a:	463a      	mov	r2, r7
 800be9c:	9003      	str	r0, [sp, #12]
 800be9e:	4631      	mov	r1, r6
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fb91 	bl	800c5c8 <__mdiff>
 800bea6:	68c2      	ldr	r2, [r0, #12]
 800bea8:	f109 3bff 	add.w	fp, r9, #4294967295
 800beac:	4605      	mov	r5, r0
 800beae:	bb02      	cbnz	r2, 800bef2 <_dtoa_r+0xa62>
 800beb0:	4601      	mov	r1, r0
 800beb2:	ee18 0a10 	vmov	r0, s16
 800beb6:	f000 fb6b 	bl	800c590 <__mcmp>
 800beba:	4602      	mov	r2, r0
 800bebc:	4629      	mov	r1, r5
 800bebe:	4620      	mov	r0, r4
 800bec0:	9207      	str	r2, [sp, #28]
 800bec2:	f000 f923 	bl	800c10c <_Bfree>
 800bec6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800beca:	ea43 0102 	orr.w	r1, r3, r2
 800bece:	9b04      	ldr	r3, [sp, #16]
 800bed0:	430b      	orrs	r3, r1
 800bed2:	464d      	mov	r5, r9
 800bed4:	d10f      	bne.n	800bef6 <_dtoa_r+0xa66>
 800bed6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800beda:	d02a      	beq.n	800bf32 <_dtoa_r+0xaa2>
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	dd02      	ble.n	800bee8 <_dtoa_r+0xa58>
 800bee2:	9b02      	ldr	r3, [sp, #8]
 800bee4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bee8:	f88b a000 	strb.w	sl, [fp]
 800beec:	e775      	b.n	800bdda <_dtoa_r+0x94a>
 800beee:	4638      	mov	r0, r7
 800bef0:	e7ba      	b.n	800be68 <_dtoa_r+0x9d8>
 800bef2:	2201      	movs	r2, #1
 800bef4:	e7e2      	b.n	800bebc <_dtoa_r+0xa2c>
 800bef6:	9b03      	ldr	r3, [sp, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	db04      	blt.n	800bf06 <_dtoa_r+0xa76>
 800befc:	9906      	ldr	r1, [sp, #24]
 800befe:	430b      	orrs	r3, r1
 800bf00:	9904      	ldr	r1, [sp, #16]
 800bf02:	430b      	orrs	r3, r1
 800bf04:	d122      	bne.n	800bf4c <_dtoa_r+0xabc>
 800bf06:	2a00      	cmp	r2, #0
 800bf08:	ddee      	ble.n	800bee8 <_dtoa_r+0xa58>
 800bf0a:	ee18 1a10 	vmov	r1, s16
 800bf0e:	2201      	movs	r2, #1
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 facd 	bl	800c4b0 <__lshift>
 800bf16:	4631      	mov	r1, r6
 800bf18:	ee08 0a10 	vmov	s16, r0
 800bf1c:	f000 fb38 	bl	800c590 <__mcmp>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	dc03      	bgt.n	800bf2c <_dtoa_r+0xa9c>
 800bf24:	d1e0      	bne.n	800bee8 <_dtoa_r+0xa58>
 800bf26:	f01a 0f01 	tst.w	sl, #1
 800bf2a:	d0dd      	beq.n	800bee8 <_dtoa_r+0xa58>
 800bf2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf30:	d1d7      	bne.n	800bee2 <_dtoa_r+0xa52>
 800bf32:	2339      	movs	r3, #57	; 0x39
 800bf34:	f88b 3000 	strb.w	r3, [fp]
 800bf38:	462b      	mov	r3, r5
 800bf3a:	461d      	mov	r5, r3
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf42:	2a39      	cmp	r2, #57	; 0x39
 800bf44:	d071      	beq.n	800c02a <_dtoa_r+0xb9a>
 800bf46:	3201      	adds	r2, #1
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	e746      	b.n	800bdda <_dtoa_r+0x94a>
 800bf4c:	2a00      	cmp	r2, #0
 800bf4e:	dd07      	ble.n	800bf60 <_dtoa_r+0xad0>
 800bf50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf54:	d0ed      	beq.n	800bf32 <_dtoa_r+0xaa2>
 800bf56:	f10a 0301 	add.w	r3, sl, #1
 800bf5a:	f88b 3000 	strb.w	r3, [fp]
 800bf5e:	e73c      	b.n	800bdda <_dtoa_r+0x94a>
 800bf60:	9b05      	ldr	r3, [sp, #20]
 800bf62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bf66:	4599      	cmp	r9, r3
 800bf68:	d047      	beq.n	800bffa <_dtoa_r+0xb6a>
 800bf6a:	ee18 1a10 	vmov	r1, s16
 800bf6e:	2300      	movs	r3, #0
 800bf70:	220a      	movs	r2, #10
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 f8ec 	bl	800c150 <__multadd>
 800bf78:	45b8      	cmp	r8, r7
 800bf7a:	ee08 0a10 	vmov	s16, r0
 800bf7e:	f04f 0300 	mov.w	r3, #0
 800bf82:	f04f 020a 	mov.w	r2, #10
 800bf86:	4641      	mov	r1, r8
 800bf88:	4620      	mov	r0, r4
 800bf8a:	d106      	bne.n	800bf9a <_dtoa_r+0xb0a>
 800bf8c:	f000 f8e0 	bl	800c150 <__multadd>
 800bf90:	4680      	mov	r8, r0
 800bf92:	4607      	mov	r7, r0
 800bf94:	f109 0901 	add.w	r9, r9, #1
 800bf98:	e772      	b.n	800be80 <_dtoa_r+0x9f0>
 800bf9a:	f000 f8d9 	bl	800c150 <__multadd>
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	4680      	mov	r8, r0
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	220a      	movs	r2, #10
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 f8d2 	bl	800c150 <__multadd>
 800bfac:	4607      	mov	r7, r0
 800bfae:	e7f1      	b.n	800bf94 <_dtoa_r+0xb04>
 800bfb0:	9b03      	ldr	r3, [sp, #12]
 800bfb2:	9302      	str	r3, [sp, #8]
 800bfb4:	9d01      	ldr	r5, [sp, #4]
 800bfb6:	ee18 0a10 	vmov	r0, s16
 800bfba:	4631      	mov	r1, r6
 800bfbc:	f7ff f9da 	bl	800b374 <quorem>
 800bfc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bfc4:	9b01      	ldr	r3, [sp, #4]
 800bfc6:	f805 ab01 	strb.w	sl, [r5], #1
 800bfca:	1aea      	subs	r2, r5, r3
 800bfcc:	9b02      	ldr	r3, [sp, #8]
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	dd09      	ble.n	800bfe6 <_dtoa_r+0xb56>
 800bfd2:	ee18 1a10 	vmov	r1, s16
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	220a      	movs	r2, #10
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 f8b8 	bl	800c150 <__multadd>
 800bfe0:	ee08 0a10 	vmov	s16, r0
 800bfe4:	e7e7      	b.n	800bfb6 <_dtoa_r+0xb26>
 800bfe6:	9b02      	ldr	r3, [sp, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	bfc8      	it	gt
 800bfec:	461d      	movgt	r5, r3
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	bfd8      	it	le
 800bff2:	2501      	movle	r5, #1
 800bff4:	441d      	add	r5, r3
 800bff6:	f04f 0800 	mov.w	r8, #0
 800bffa:	ee18 1a10 	vmov	r1, s16
 800bffe:	2201      	movs	r2, #1
 800c000:	4620      	mov	r0, r4
 800c002:	f000 fa55 	bl	800c4b0 <__lshift>
 800c006:	4631      	mov	r1, r6
 800c008:	ee08 0a10 	vmov	s16, r0
 800c00c:	f000 fac0 	bl	800c590 <__mcmp>
 800c010:	2800      	cmp	r0, #0
 800c012:	dc91      	bgt.n	800bf38 <_dtoa_r+0xaa8>
 800c014:	d102      	bne.n	800c01c <_dtoa_r+0xb8c>
 800c016:	f01a 0f01 	tst.w	sl, #1
 800c01a:	d18d      	bne.n	800bf38 <_dtoa_r+0xaa8>
 800c01c:	462b      	mov	r3, r5
 800c01e:	461d      	mov	r5, r3
 800c020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c024:	2a30      	cmp	r2, #48	; 0x30
 800c026:	d0fa      	beq.n	800c01e <_dtoa_r+0xb8e>
 800c028:	e6d7      	b.n	800bdda <_dtoa_r+0x94a>
 800c02a:	9a01      	ldr	r2, [sp, #4]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d184      	bne.n	800bf3a <_dtoa_r+0xaaa>
 800c030:	9b00      	ldr	r3, [sp, #0]
 800c032:	3301      	adds	r3, #1
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	2331      	movs	r3, #49	; 0x31
 800c038:	7013      	strb	r3, [r2, #0]
 800c03a:	e6ce      	b.n	800bdda <_dtoa_r+0x94a>
 800c03c:	4b09      	ldr	r3, [pc, #36]	; (800c064 <_dtoa_r+0xbd4>)
 800c03e:	f7ff ba95 	b.w	800b56c <_dtoa_r+0xdc>
 800c042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c044:	2b00      	cmp	r3, #0
 800c046:	f47f aa6e 	bne.w	800b526 <_dtoa_r+0x96>
 800c04a:	4b07      	ldr	r3, [pc, #28]	; (800c068 <_dtoa_r+0xbd8>)
 800c04c:	f7ff ba8e 	b.w	800b56c <_dtoa_r+0xdc>
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	dcae      	bgt.n	800bfb4 <_dtoa_r+0xb24>
 800c056:	9b06      	ldr	r3, [sp, #24]
 800c058:	2b02      	cmp	r3, #2
 800c05a:	f73f aea8 	bgt.w	800bdae <_dtoa_r+0x91e>
 800c05e:	e7a9      	b.n	800bfb4 <_dtoa_r+0xb24>
 800c060:	0800fa17 	.word	0x0800fa17
 800c064:	0800f974 	.word	0x0800f974
 800c068:	0800f998 	.word	0x0800f998

0800c06c <_localeconv_r>:
 800c06c:	4800      	ldr	r0, [pc, #0]	; (800c070 <_localeconv_r+0x4>)
 800c06e:	4770      	bx	lr
 800c070:	20000178 	.word	0x20000178

0800c074 <__malloc_lock>:
 800c074:	4801      	ldr	r0, [pc, #4]	; (800c07c <__malloc_lock+0x8>)
 800c076:	f000 bbd4 	b.w	800c822 <__retarget_lock_acquire_recursive>
 800c07a:	bf00      	nop
 800c07c:	20013400 	.word	0x20013400

0800c080 <__malloc_unlock>:
 800c080:	4801      	ldr	r0, [pc, #4]	; (800c088 <__malloc_unlock+0x8>)
 800c082:	f000 bbcf 	b.w	800c824 <__retarget_lock_release_recursive>
 800c086:	bf00      	nop
 800c088:	20013400 	.word	0x20013400

0800c08c <_Balloc>:
 800c08c:	b570      	push	{r4, r5, r6, lr}
 800c08e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c090:	4604      	mov	r4, r0
 800c092:	460d      	mov	r5, r1
 800c094:	b976      	cbnz	r6, 800c0b4 <_Balloc+0x28>
 800c096:	2010      	movs	r0, #16
 800c098:	f7fe fbf4 	bl	800a884 <malloc>
 800c09c:	4602      	mov	r2, r0
 800c09e:	6260      	str	r0, [r4, #36]	; 0x24
 800c0a0:	b920      	cbnz	r0, 800c0ac <_Balloc+0x20>
 800c0a2:	4b18      	ldr	r3, [pc, #96]	; (800c104 <_Balloc+0x78>)
 800c0a4:	4818      	ldr	r0, [pc, #96]	; (800c108 <_Balloc+0x7c>)
 800c0a6:	2166      	movs	r1, #102	; 0x66
 800c0a8:	f000 fb8a 	bl	800c7c0 <__assert_func>
 800c0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b0:	6006      	str	r6, [r0, #0]
 800c0b2:	60c6      	str	r6, [r0, #12]
 800c0b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c0b6:	68f3      	ldr	r3, [r6, #12]
 800c0b8:	b183      	cbz	r3, 800c0dc <_Balloc+0x50>
 800c0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0c2:	b9b8      	cbnz	r0, 800c0f4 <_Balloc+0x68>
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	fa01 f605 	lsl.w	r6, r1, r5
 800c0ca:	1d72      	adds	r2, r6, #5
 800c0cc:	0092      	lsls	r2, r2, #2
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f000 fb60 	bl	800c794 <_calloc_r>
 800c0d4:	b160      	cbz	r0, 800c0f0 <_Balloc+0x64>
 800c0d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0da:	e00e      	b.n	800c0fa <_Balloc+0x6e>
 800c0dc:	2221      	movs	r2, #33	; 0x21
 800c0de:	2104      	movs	r1, #4
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fb57 	bl	800c794 <_calloc_r>
 800c0e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0e8:	60f0      	str	r0, [r6, #12]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1e4      	bne.n	800c0ba <_Balloc+0x2e>
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}
 800c0f4:	6802      	ldr	r2, [r0, #0]
 800c0f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c100:	e7f7      	b.n	800c0f2 <_Balloc+0x66>
 800c102:	bf00      	nop
 800c104:	0800f9a5 	.word	0x0800f9a5
 800c108:	0800fa28 	.word	0x0800fa28

0800c10c <_Bfree>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c110:	4605      	mov	r5, r0
 800c112:	460c      	mov	r4, r1
 800c114:	b976      	cbnz	r6, 800c134 <_Bfree+0x28>
 800c116:	2010      	movs	r0, #16
 800c118:	f7fe fbb4 	bl	800a884 <malloc>
 800c11c:	4602      	mov	r2, r0
 800c11e:	6268      	str	r0, [r5, #36]	; 0x24
 800c120:	b920      	cbnz	r0, 800c12c <_Bfree+0x20>
 800c122:	4b09      	ldr	r3, [pc, #36]	; (800c148 <_Bfree+0x3c>)
 800c124:	4809      	ldr	r0, [pc, #36]	; (800c14c <_Bfree+0x40>)
 800c126:	218a      	movs	r1, #138	; 0x8a
 800c128:	f000 fb4a 	bl	800c7c0 <__assert_func>
 800c12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c130:	6006      	str	r6, [r0, #0]
 800c132:	60c6      	str	r6, [r0, #12]
 800c134:	b13c      	cbz	r4, 800c146 <_Bfree+0x3a>
 800c136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c138:	6862      	ldr	r2, [r4, #4]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c140:	6021      	str	r1, [r4, #0]
 800c142:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c146:	bd70      	pop	{r4, r5, r6, pc}
 800c148:	0800f9a5 	.word	0x0800f9a5
 800c14c:	0800fa28 	.word	0x0800fa28

0800c150 <__multadd>:
 800c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	690d      	ldr	r5, [r1, #16]
 800c156:	4607      	mov	r7, r0
 800c158:	460c      	mov	r4, r1
 800c15a:	461e      	mov	r6, r3
 800c15c:	f101 0c14 	add.w	ip, r1, #20
 800c160:	2000      	movs	r0, #0
 800c162:	f8dc 3000 	ldr.w	r3, [ip]
 800c166:	b299      	uxth	r1, r3
 800c168:	fb02 6101 	mla	r1, r2, r1, r6
 800c16c:	0c1e      	lsrs	r6, r3, #16
 800c16e:	0c0b      	lsrs	r3, r1, #16
 800c170:	fb02 3306 	mla	r3, r2, r6, r3
 800c174:	b289      	uxth	r1, r1
 800c176:	3001      	adds	r0, #1
 800c178:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c17c:	4285      	cmp	r5, r0
 800c17e:	f84c 1b04 	str.w	r1, [ip], #4
 800c182:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c186:	dcec      	bgt.n	800c162 <__multadd+0x12>
 800c188:	b30e      	cbz	r6, 800c1ce <__multadd+0x7e>
 800c18a:	68a3      	ldr	r3, [r4, #8]
 800c18c:	42ab      	cmp	r3, r5
 800c18e:	dc19      	bgt.n	800c1c4 <__multadd+0x74>
 800c190:	6861      	ldr	r1, [r4, #4]
 800c192:	4638      	mov	r0, r7
 800c194:	3101      	adds	r1, #1
 800c196:	f7ff ff79 	bl	800c08c <_Balloc>
 800c19a:	4680      	mov	r8, r0
 800c19c:	b928      	cbnz	r0, 800c1aa <__multadd+0x5a>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	4b0c      	ldr	r3, [pc, #48]	; (800c1d4 <__multadd+0x84>)
 800c1a2:	480d      	ldr	r0, [pc, #52]	; (800c1d8 <__multadd+0x88>)
 800c1a4:	21b5      	movs	r1, #181	; 0xb5
 800c1a6:	f000 fb0b 	bl	800c7c0 <__assert_func>
 800c1aa:	6922      	ldr	r2, [r4, #16]
 800c1ac:	3202      	adds	r2, #2
 800c1ae:	f104 010c 	add.w	r1, r4, #12
 800c1b2:	0092      	lsls	r2, r2, #2
 800c1b4:	300c      	adds	r0, #12
 800c1b6:	f7fe fb6d 	bl	800a894 <memcpy>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f7ff ffa5 	bl	800c10c <_Bfree>
 800c1c2:	4644      	mov	r4, r8
 800c1c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	615e      	str	r6, [r3, #20]
 800c1cc:	6125      	str	r5, [r4, #16]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d4:	0800fa17 	.word	0x0800fa17
 800c1d8:	0800fa28 	.word	0x0800fa28

0800c1dc <__hi0bits>:
 800c1dc:	0c03      	lsrs	r3, r0, #16
 800c1de:	041b      	lsls	r3, r3, #16
 800c1e0:	b9d3      	cbnz	r3, 800c218 <__hi0bits+0x3c>
 800c1e2:	0400      	lsls	r0, r0, #16
 800c1e4:	2310      	movs	r3, #16
 800c1e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1ea:	bf04      	itt	eq
 800c1ec:	0200      	lsleq	r0, r0, #8
 800c1ee:	3308      	addeq	r3, #8
 800c1f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1f4:	bf04      	itt	eq
 800c1f6:	0100      	lsleq	r0, r0, #4
 800c1f8:	3304      	addeq	r3, #4
 800c1fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1fe:	bf04      	itt	eq
 800c200:	0080      	lsleq	r0, r0, #2
 800c202:	3302      	addeq	r3, #2
 800c204:	2800      	cmp	r0, #0
 800c206:	db05      	blt.n	800c214 <__hi0bits+0x38>
 800c208:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c20c:	f103 0301 	add.w	r3, r3, #1
 800c210:	bf08      	it	eq
 800c212:	2320      	moveq	r3, #32
 800c214:	4618      	mov	r0, r3
 800c216:	4770      	bx	lr
 800c218:	2300      	movs	r3, #0
 800c21a:	e7e4      	b.n	800c1e6 <__hi0bits+0xa>

0800c21c <__lo0bits>:
 800c21c:	6803      	ldr	r3, [r0, #0]
 800c21e:	f013 0207 	ands.w	r2, r3, #7
 800c222:	4601      	mov	r1, r0
 800c224:	d00b      	beq.n	800c23e <__lo0bits+0x22>
 800c226:	07da      	lsls	r2, r3, #31
 800c228:	d423      	bmi.n	800c272 <__lo0bits+0x56>
 800c22a:	0798      	lsls	r0, r3, #30
 800c22c:	bf49      	itett	mi
 800c22e:	085b      	lsrmi	r3, r3, #1
 800c230:	089b      	lsrpl	r3, r3, #2
 800c232:	2001      	movmi	r0, #1
 800c234:	600b      	strmi	r3, [r1, #0]
 800c236:	bf5c      	itt	pl
 800c238:	600b      	strpl	r3, [r1, #0]
 800c23a:	2002      	movpl	r0, #2
 800c23c:	4770      	bx	lr
 800c23e:	b298      	uxth	r0, r3
 800c240:	b9a8      	cbnz	r0, 800c26e <__lo0bits+0x52>
 800c242:	0c1b      	lsrs	r3, r3, #16
 800c244:	2010      	movs	r0, #16
 800c246:	b2da      	uxtb	r2, r3
 800c248:	b90a      	cbnz	r2, 800c24e <__lo0bits+0x32>
 800c24a:	3008      	adds	r0, #8
 800c24c:	0a1b      	lsrs	r3, r3, #8
 800c24e:	071a      	lsls	r2, r3, #28
 800c250:	bf04      	itt	eq
 800c252:	091b      	lsreq	r3, r3, #4
 800c254:	3004      	addeq	r0, #4
 800c256:	079a      	lsls	r2, r3, #30
 800c258:	bf04      	itt	eq
 800c25a:	089b      	lsreq	r3, r3, #2
 800c25c:	3002      	addeq	r0, #2
 800c25e:	07da      	lsls	r2, r3, #31
 800c260:	d403      	bmi.n	800c26a <__lo0bits+0x4e>
 800c262:	085b      	lsrs	r3, r3, #1
 800c264:	f100 0001 	add.w	r0, r0, #1
 800c268:	d005      	beq.n	800c276 <__lo0bits+0x5a>
 800c26a:	600b      	str	r3, [r1, #0]
 800c26c:	4770      	bx	lr
 800c26e:	4610      	mov	r0, r2
 800c270:	e7e9      	b.n	800c246 <__lo0bits+0x2a>
 800c272:	2000      	movs	r0, #0
 800c274:	4770      	bx	lr
 800c276:	2020      	movs	r0, #32
 800c278:	4770      	bx	lr
	...

0800c27c <__i2b>:
 800c27c:	b510      	push	{r4, lr}
 800c27e:	460c      	mov	r4, r1
 800c280:	2101      	movs	r1, #1
 800c282:	f7ff ff03 	bl	800c08c <_Balloc>
 800c286:	4602      	mov	r2, r0
 800c288:	b928      	cbnz	r0, 800c296 <__i2b+0x1a>
 800c28a:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <__i2b+0x24>)
 800c28c:	4805      	ldr	r0, [pc, #20]	; (800c2a4 <__i2b+0x28>)
 800c28e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c292:	f000 fa95 	bl	800c7c0 <__assert_func>
 800c296:	2301      	movs	r3, #1
 800c298:	6144      	str	r4, [r0, #20]
 800c29a:	6103      	str	r3, [r0, #16]
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	bf00      	nop
 800c2a0:	0800fa17 	.word	0x0800fa17
 800c2a4:	0800fa28 	.word	0x0800fa28

0800c2a8 <__multiply>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	4691      	mov	r9, r2
 800c2ae:	690a      	ldr	r2, [r1, #16]
 800c2b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	bfb8      	it	lt
 800c2b8:	460b      	movlt	r3, r1
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	bfbc      	itt	lt
 800c2be:	464c      	movlt	r4, r9
 800c2c0:	4699      	movlt	r9, r3
 800c2c2:	6927      	ldr	r7, [r4, #16]
 800c2c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c2c8:	68a3      	ldr	r3, [r4, #8]
 800c2ca:	6861      	ldr	r1, [r4, #4]
 800c2cc:	eb07 060a 	add.w	r6, r7, sl
 800c2d0:	42b3      	cmp	r3, r6
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	bfb8      	it	lt
 800c2d6:	3101      	addlt	r1, #1
 800c2d8:	f7ff fed8 	bl	800c08c <_Balloc>
 800c2dc:	b930      	cbnz	r0, 800c2ec <__multiply+0x44>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	4b44      	ldr	r3, [pc, #272]	; (800c3f4 <__multiply+0x14c>)
 800c2e2:	4845      	ldr	r0, [pc, #276]	; (800c3f8 <__multiply+0x150>)
 800c2e4:	f240 115d 	movw	r1, #349	; 0x15d
 800c2e8:	f000 fa6a 	bl	800c7c0 <__assert_func>
 800c2ec:	f100 0514 	add.w	r5, r0, #20
 800c2f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4543      	cmp	r3, r8
 800c2fa:	d321      	bcc.n	800c340 <__multiply+0x98>
 800c2fc:	f104 0314 	add.w	r3, r4, #20
 800c300:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c304:	f109 0314 	add.w	r3, r9, #20
 800c308:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c30c:	9202      	str	r2, [sp, #8]
 800c30e:	1b3a      	subs	r2, r7, r4
 800c310:	3a15      	subs	r2, #21
 800c312:	f022 0203 	bic.w	r2, r2, #3
 800c316:	3204      	adds	r2, #4
 800c318:	f104 0115 	add.w	r1, r4, #21
 800c31c:	428f      	cmp	r7, r1
 800c31e:	bf38      	it	cc
 800c320:	2204      	movcc	r2, #4
 800c322:	9201      	str	r2, [sp, #4]
 800c324:	9a02      	ldr	r2, [sp, #8]
 800c326:	9303      	str	r3, [sp, #12]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d80c      	bhi.n	800c346 <__multiply+0x9e>
 800c32c:	2e00      	cmp	r6, #0
 800c32e:	dd03      	ble.n	800c338 <__multiply+0x90>
 800c330:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c334:	2b00      	cmp	r3, #0
 800c336:	d05a      	beq.n	800c3ee <__multiply+0x146>
 800c338:	6106      	str	r6, [r0, #16]
 800c33a:	b005      	add	sp, #20
 800c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c340:	f843 2b04 	str.w	r2, [r3], #4
 800c344:	e7d8      	b.n	800c2f8 <__multiply+0x50>
 800c346:	f8b3 a000 	ldrh.w	sl, [r3]
 800c34a:	f1ba 0f00 	cmp.w	sl, #0
 800c34e:	d024      	beq.n	800c39a <__multiply+0xf2>
 800c350:	f104 0e14 	add.w	lr, r4, #20
 800c354:	46a9      	mov	r9, r5
 800c356:	f04f 0c00 	mov.w	ip, #0
 800c35a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c35e:	f8d9 1000 	ldr.w	r1, [r9]
 800c362:	fa1f fb82 	uxth.w	fp, r2
 800c366:	b289      	uxth	r1, r1
 800c368:	fb0a 110b 	mla	r1, sl, fp, r1
 800c36c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c370:	f8d9 2000 	ldr.w	r2, [r9]
 800c374:	4461      	add	r1, ip
 800c376:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c37a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c37e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c382:	b289      	uxth	r1, r1
 800c384:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c388:	4577      	cmp	r7, lr
 800c38a:	f849 1b04 	str.w	r1, [r9], #4
 800c38e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c392:	d8e2      	bhi.n	800c35a <__multiply+0xb2>
 800c394:	9a01      	ldr	r2, [sp, #4]
 800c396:	f845 c002 	str.w	ip, [r5, r2]
 800c39a:	9a03      	ldr	r2, [sp, #12]
 800c39c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	f1b9 0f00 	cmp.w	r9, #0
 800c3a6:	d020      	beq.n	800c3ea <__multiply+0x142>
 800c3a8:	6829      	ldr	r1, [r5, #0]
 800c3aa:	f104 0c14 	add.w	ip, r4, #20
 800c3ae:	46ae      	mov	lr, r5
 800c3b0:	f04f 0a00 	mov.w	sl, #0
 800c3b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c3b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c3bc:	fb09 220b 	mla	r2, r9, fp, r2
 800c3c0:	4492      	add	sl, r2
 800c3c2:	b289      	uxth	r1, r1
 800c3c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c3c8:	f84e 1b04 	str.w	r1, [lr], #4
 800c3cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c3d0:	f8be 1000 	ldrh.w	r1, [lr]
 800c3d4:	0c12      	lsrs	r2, r2, #16
 800c3d6:	fb09 1102 	mla	r1, r9, r2, r1
 800c3da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c3de:	4567      	cmp	r7, ip
 800c3e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3e4:	d8e6      	bhi.n	800c3b4 <__multiply+0x10c>
 800c3e6:	9a01      	ldr	r2, [sp, #4]
 800c3e8:	50a9      	str	r1, [r5, r2]
 800c3ea:	3504      	adds	r5, #4
 800c3ec:	e79a      	b.n	800c324 <__multiply+0x7c>
 800c3ee:	3e01      	subs	r6, #1
 800c3f0:	e79c      	b.n	800c32c <__multiply+0x84>
 800c3f2:	bf00      	nop
 800c3f4:	0800fa17 	.word	0x0800fa17
 800c3f8:	0800fa28 	.word	0x0800fa28

0800c3fc <__pow5mult>:
 800c3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c400:	4615      	mov	r5, r2
 800c402:	f012 0203 	ands.w	r2, r2, #3
 800c406:	4606      	mov	r6, r0
 800c408:	460f      	mov	r7, r1
 800c40a:	d007      	beq.n	800c41c <__pow5mult+0x20>
 800c40c:	4c25      	ldr	r4, [pc, #148]	; (800c4a4 <__pow5mult+0xa8>)
 800c40e:	3a01      	subs	r2, #1
 800c410:	2300      	movs	r3, #0
 800c412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c416:	f7ff fe9b 	bl	800c150 <__multadd>
 800c41a:	4607      	mov	r7, r0
 800c41c:	10ad      	asrs	r5, r5, #2
 800c41e:	d03d      	beq.n	800c49c <__pow5mult+0xa0>
 800c420:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c422:	b97c      	cbnz	r4, 800c444 <__pow5mult+0x48>
 800c424:	2010      	movs	r0, #16
 800c426:	f7fe fa2d 	bl	800a884 <malloc>
 800c42a:	4602      	mov	r2, r0
 800c42c:	6270      	str	r0, [r6, #36]	; 0x24
 800c42e:	b928      	cbnz	r0, 800c43c <__pow5mult+0x40>
 800c430:	4b1d      	ldr	r3, [pc, #116]	; (800c4a8 <__pow5mult+0xac>)
 800c432:	481e      	ldr	r0, [pc, #120]	; (800c4ac <__pow5mult+0xb0>)
 800c434:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c438:	f000 f9c2 	bl	800c7c0 <__assert_func>
 800c43c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c440:	6004      	str	r4, [r0, #0]
 800c442:	60c4      	str	r4, [r0, #12]
 800c444:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c44c:	b94c      	cbnz	r4, 800c462 <__pow5mult+0x66>
 800c44e:	f240 2171 	movw	r1, #625	; 0x271
 800c452:	4630      	mov	r0, r6
 800c454:	f7ff ff12 	bl	800c27c <__i2b>
 800c458:	2300      	movs	r3, #0
 800c45a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c45e:	4604      	mov	r4, r0
 800c460:	6003      	str	r3, [r0, #0]
 800c462:	f04f 0900 	mov.w	r9, #0
 800c466:	07eb      	lsls	r3, r5, #31
 800c468:	d50a      	bpl.n	800c480 <__pow5mult+0x84>
 800c46a:	4639      	mov	r1, r7
 800c46c:	4622      	mov	r2, r4
 800c46e:	4630      	mov	r0, r6
 800c470:	f7ff ff1a 	bl	800c2a8 <__multiply>
 800c474:	4639      	mov	r1, r7
 800c476:	4680      	mov	r8, r0
 800c478:	4630      	mov	r0, r6
 800c47a:	f7ff fe47 	bl	800c10c <_Bfree>
 800c47e:	4647      	mov	r7, r8
 800c480:	106d      	asrs	r5, r5, #1
 800c482:	d00b      	beq.n	800c49c <__pow5mult+0xa0>
 800c484:	6820      	ldr	r0, [r4, #0]
 800c486:	b938      	cbnz	r0, 800c498 <__pow5mult+0x9c>
 800c488:	4622      	mov	r2, r4
 800c48a:	4621      	mov	r1, r4
 800c48c:	4630      	mov	r0, r6
 800c48e:	f7ff ff0b 	bl	800c2a8 <__multiply>
 800c492:	6020      	str	r0, [r4, #0]
 800c494:	f8c0 9000 	str.w	r9, [r0]
 800c498:	4604      	mov	r4, r0
 800c49a:	e7e4      	b.n	800c466 <__pow5mult+0x6a>
 800c49c:	4638      	mov	r0, r7
 800c49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0800fb78 	.word	0x0800fb78
 800c4a8:	0800f9a5 	.word	0x0800f9a5
 800c4ac:	0800fa28 	.word	0x0800fa28

0800c4b0 <__lshift>:
 800c4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	6849      	ldr	r1, [r1, #4]
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4be:	68a3      	ldr	r3, [r4, #8]
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	4691      	mov	r9, r2
 800c4c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4c8:	f108 0601 	add.w	r6, r8, #1
 800c4cc:	42b3      	cmp	r3, r6
 800c4ce:	db0b      	blt.n	800c4e8 <__lshift+0x38>
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f7ff fddb 	bl	800c08c <_Balloc>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	b948      	cbnz	r0, 800c4ee <__lshift+0x3e>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	4b2a      	ldr	r3, [pc, #168]	; (800c588 <__lshift+0xd8>)
 800c4de:	482b      	ldr	r0, [pc, #172]	; (800c58c <__lshift+0xdc>)
 800c4e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4e4:	f000 f96c 	bl	800c7c0 <__assert_func>
 800c4e8:	3101      	adds	r1, #1
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	e7ee      	b.n	800c4cc <__lshift+0x1c>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f100 0114 	add.w	r1, r0, #20
 800c4f4:	f100 0210 	add.w	r2, r0, #16
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	4553      	cmp	r3, sl
 800c4fc:	db37      	blt.n	800c56e <__lshift+0xbe>
 800c4fe:	6920      	ldr	r0, [r4, #16]
 800c500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c504:	f104 0314 	add.w	r3, r4, #20
 800c508:	f019 091f 	ands.w	r9, r9, #31
 800c50c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c510:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c514:	d02f      	beq.n	800c576 <__lshift+0xc6>
 800c516:	f1c9 0e20 	rsb	lr, r9, #32
 800c51a:	468a      	mov	sl, r1
 800c51c:	f04f 0c00 	mov.w	ip, #0
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	fa02 f209 	lsl.w	r2, r2, r9
 800c526:	ea42 020c 	orr.w	r2, r2, ip
 800c52a:	f84a 2b04 	str.w	r2, [sl], #4
 800c52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c532:	4298      	cmp	r0, r3
 800c534:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c538:	d8f2      	bhi.n	800c520 <__lshift+0x70>
 800c53a:	1b03      	subs	r3, r0, r4
 800c53c:	3b15      	subs	r3, #21
 800c53e:	f023 0303 	bic.w	r3, r3, #3
 800c542:	3304      	adds	r3, #4
 800c544:	f104 0215 	add.w	r2, r4, #21
 800c548:	4290      	cmp	r0, r2
 800c54a:	bf38      	it	cc
 800c54c:	2304      	movcc	r3, #4
 800c54e:	f841 c003 	str.w	ip, [r1, r3]
 800c552:	f1bc 0f00 	cmp.w	ip, #0
 800c556:	d001      	beq.n	800c55c <__lshift+0xac>
 800c558:	f108 0602 	add.w	r6, r8, #2
 800c55c:	3e01      	subs	r6, #1
 800c55e:	4638      	mov	r0, r7
 800c560:	612e      	str	r6, [r5, #16]
 800c562:	4621      	mov	r1, r4
 800c564:	f7ff fdd2 	bl	800c10c <_Bfree>
 800c568:	4628      	mov	r0, r5
 800c56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c572:	3301      	adds	r3, #1
 800c574:	e7c1      	b.n	800c4fa <__lshift+0x4a>
 800c576:	3904      	subs	r1, #4
 800c578:	f853 2b04 	ldr.w	r2, [r3], #4
 800c57c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c580:	4298      	cmp	r0, r3
 800c582:	d8f9      	bhi.n	800c578 <__lshift+0xc8>
 800c584:	e7ea      	b.n	800c55c <__lshift+0xac>
 800c586:	bf00      	nop
 800c588:	0800fa17 	.word	0x0800fa17
 800c58c:	0800fa28 	.word	0x0800fa28

0800c590 <__mcmp>:
 800c590:	b530      	push	{r4, r5, lr}
 800c592:	6902      	ldr	r2, [r0, #16]
 800c594:	690c      	ldr	r4, [r1, #16]
 800c596:	1b12      	subs	r2, r2, r4
 800c598:	d10e      	bne.n	800c5b8 <__mcmp+0x28>
 800c59a:	f100 0314 	add.w	r3, r0, #20
 800c59e:	3114      	adds	r1, #20
 800c5a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c5a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c5a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c5ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c5b0:	42a5      	cmp	r5, r4
 800c5b2:	d003      	beq.n	800c5bc <__mcmp+0x2c>
 800c5b4:	d305      	bcc.n	800c5c2 <__mcmp+0x32>
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	bd30      	pop	{r4, r5, pc}
 800c5bc:	4283      	cmp	r3, r0
 800c5be:	d3f3      	bcc.n	800c5a8 <__mcmp+0x18>
 800c5c0:	e7fa      	b.n	800c5b8 <__mcmp+0x28>
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	e7f7      	b.n	800c5b8 <__mcmp+0x28>

0800c5c8 <__mdiff>:
 800c5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	4690      	mov	r8, r2
 800c5d6:	f7ff ffdb 	bl	800c590 <__mcmp>
 800c5da:	1e05      	subs	r5, r0, #0
 800c5dc:	d110      	bne.n	800c600 <__mdiff+0x38>
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7ff fd53 	bl	800c08c <_Balloc>
 800c5e6:	b930      	cbnz	r0, 800c5f6 <__mdiff+0x2e>
 800c5e8:	4b3a      	ldr	r3, [pc, #232]	; (800c6d4 <__mdiff+0x10c>)
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	f240 2132 	movw	r1, #562	; 0x232
 800c5f0:	4839      	ldr	r0, [pc, #228]	; (800c6d8 <__mdiff+0x110>)
 800c5f2:	f000 f8e5 	bl	800c7c0 <__assert_func>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c600:	bfa4      	itt	ge
 800c602:	4643      	movge	r3, r8
 800c604:	46a0      	movge	r8, r4
 800c606:	4630      	mov	r0, r6
 800c608:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c60c:	bfa6      	itte	ge
 800c60e:	461c      	movge	r4, r3
 800c610:	2500      	movge	r5, #0
 800c612:	2501      	movlt	r5, #1
 800c614:	f7ff fd3a 	bl	800c08c <_Balloc>
 800c618:	b920      	cbnz	r0, 800c624 <__mdiff+0x5c>
 800c61a:	4b2e      	ldr	r3, [pc, #184]	; (800c6d4 <__mdiff+0x10c>)
 800c61c:	4602      	mov	r2, r0
 800c61e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c622:	e7e5      	b.n	800c5f0 <__mdiff+0x28>
 800c624:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c628:	6926      	ldr	r6, [r4, #16]
 800c62a:	60c5      	str	r5, [r0, #12]
 800c62c:	f104 0914 	add.w	r9, r4, #20
 800c630:	f108 0514 	add.w	r5, r8, #20
 800c634:	f100 0e14 	add.w	lr, r0, #20
 800c638:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c63c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c640:	f108 0210 	add.w	r2, r8, #16
 800c644:	46f2      	mov	sl, lr
 800c646:	2100      	movs	r1, #0
 800c648:	f859 3b04 	ldr.w	r3, [r9], #4
 800c64c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c650:	fa1f f883 	uxth.w	r8, r3
 800c654:	fa11 f18b 	uxtah	r1, r1, fp
 800c658:	0c1b      	lsrs	r3, r3, #16
 800c65a:	eba1 0808 	sub.w	r8, r1, r8
 800c65e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c662:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c666:	fa1f f888 	uxth.w	r8, r8
 800c66a:	1419      	asrs	r1, r3, #16
 800c66c:	454e      	cmp	r6, r9
 800c66e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c672:	f84a 3b04 	str.w	r3, [sl], #4
 800c676:	d8e7      	bhi.n	800c648 <__mdiff+0x80>
 800c678:	1b33      	subs	r3, r6, r4
 800c67a:	3b15      	subs	r3, #21
 800c67c:	f023 0303 	bic.w	r3, r3, #3
 800c680:	3304      	adds	r3, #4
 800c682:	3415      	adds	r4, #21
 800c684:	42a6      	cmp	r6, r4
 800c686:	bf38      	it	cc
 800c688:	2304      	movcc	r3, #4
 800c68a:	441d      	add	r5, r3
 800c68c:	4473      	add	r3, lr
 800c68e:	469e      	mov	lr, r3
 800c690:	462e      	mov	r6, r5
 800c692:	4566      	cmp	r6, ip
 800c694:	d30e      	bcc.n	800c6b4 <__mdiff+0xec>
 800c696:	f10c 0203 	add.w	r2, ip, #3
 800c69a:	1b52      	subs	r2, r2, r5
 800c69c:	f022 0203 	bic.w	r2, r2, #3
 800c6a0:	3d03      	subs	r5, #3
 800c6a2:	45ac      	cmp	ip, r5
 800c6a4:	bf38      	it	cc
 800c6a6:	2200      	movcc	r2, #0
 800c6a8:	441a      	add	r2, r3
 800c6aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c6ae:	b17b      	cbz	r3, 800c6d0 <__mdiff+0x108>
 800c6b0:	6107      	str	r7, [r0, #16]
 800c6b2:	e7a3      	b.n	800c5fc <__mdiff+0x34>
 800c6b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c6b8:	fa11 f288 	uxtah	r2, r1, r8
 800c6bc:	1414      	asrs	r4, r2, #16
 800c6be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c6c2:	b292      	uxth	r2, r2
 800c6c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c6c8:	f84e 2b04 	str.w	r2, [lr], #4
 800c6cc:	1421      	asrs	r1, r4, #16
 800c6ce:	e7e0      	b.n	800c692 <__mdiff+0xca>
 800c6d0:	3f01      	subs	r7, #1
 800c6d2:	e7ea      	b.n	800c6aa <__mdiff+0xe2>
 800c6d4:	0800fa17 	.word	0x0800fa17
 800c6d8:	0800fa28 	.word	0x0800fa28

0800c6dc <__d2b>:
 800c6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6e0:	4689      	mov	r9, r1
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	ec57 6b10 	vmov	r6, r7, d0
 800c6e8:	4690      	mov	r8, r2
 800c6ea:	f7ff fccf 	bl	800c08c <_Balloc>
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	b930      	cbnz	r0, 800c700 <__d2b+0x24>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	4b25      	ldr	r3, [pc, #148]	; (800c78c <__d2b+0xb0>)
 800c6f6:	4826      	ldr	r0, [pc, #152]	; (800c790 <__d2b+0xb4>)
 800c6f8:	f240 310a 	movw	r1, #778	; 0x30a
 800c6fc:	f000 f860 	bl	800c7c0 <__assert_func>
 800c700:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c704:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c708:	bb35      	cbnz	r5, 800c758 <__d2b+0x7c>
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	d028      	beq.n	800c762 <__d2b+0x86>
 800c710:	4668      	mov	r0, sp
 800c712:	9600      	str	r6, [sp, #0]
 800c714:	f7ff fd82 	bl	800c21c <__lo0bits>
 800c718:	9900      	ldr	r1, [sp, #0]
 800c71a:	b300      	cbz	r0, 800c75e <__d2b+0x82>
 800c71c:	9a01      	ldr	r2, [sp, #4]
 800c71e:	f1c0 0320 	rsb	r3, r0, #32
 800c722:	fa02 f303 	lsl.w	r3, r2, r3
 800c726:	430b      	orrs	r3, r1
 800c728:	40c2      	lsrs	r2, r0
 800c72a:	6163      	str	r3, [r4, #20]
 800c72c:	9201      	str	r2, [sp, #4]
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	61a3      	str	r3, [r4, #24]
 800c732:	2b00      	cmp	r3, #0
 800c734:	bf14      	ite	ne
 800c736:	2202      	movne	r2, #2
 800c738:	2201      	moveq	r2, #1
 800c73a:	6122      	str	r2, [r4, #16]
 800c73c:	b1d5      	cbz	r5, 800c774 <__d2b+0x98>
 800c73e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c742:	4405      	add	r5, r0
 800c744:	f8c9 5000 	str.w	r5, [r9]
 800c748:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c74c:	f8c8 0000 	str.w	r0, [r8]
 800c750:	4620      	mov	r0, r4
 800c752:	b003      	add	sp, #12
 800c754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c75c:	e7d5      	b.n	800c70a <__d2b+0x2e>
 800c75e:	6161      	str	r1, [r4, #20]
 800c760:	e7e5      	b.n	800c72e <__d2b+0x52>
 800c762:	a801      	add	r0, sp, #4
 800c764:	f7ff fd5a 	bl	800c21c <__lo0bits>
 800c768:	9b01      	ldr	r3, [sp, #4]
 800c76a:	6163      	str	r3, [r4, #20]
 800c76c:	2201      	movs	r2, #1
 800c76e:	6122      	str	r2, [r4, #16]
 800c770:	3020      	adds	r0, #32
 800c772:	e7e3      	b.n	800c73c <__d2b+0x60>
 800c774:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c778:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c77c:	f8c9 0000 	str.w	r0, [r9]
 800c780:	6918      	ldr	r0, [r3, #16]
 800c782:	f7ff fd2b 	bl	800c1dc <__hi0bits>
 800c786:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c78a:	e7df      	b.n	800c74c <__d2b+0x70>
 800c78c:	0800fa17 	.word	0x0800fa17
 800c790:	0800fa28 	.word	0x0800fa28

0800c794 <_calloc_r>:
 800c794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c796:	fba1 2402 	umull	r2, r4, r1, r2
 800c79a:	b94c      	cbnz	r4, 800c7b0 <_calloc_r+0x1c>
 800c79c:	4611      	mov	r1, r2
 800c79e:	9201      	str	r2, [sp, #4]
 800c7a0:	f7fe f8fa 	bl	800a998 <_malloc_r>
 800c7a4:	9a01      	ldr	r2, [sp, #4]
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	b930      	cbnz	r0, 800c7b8 <_calloc_r+0x24>
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	b003      	add	sp, #12
 800c7ae:	bd30      	pop	{r4, r5, pc}
 800c7b0:	220c      	movs	r2, #12
 800c7b2:	6002      	str	r2, [r0, #0]
 800c7b4:	2500      	movs	r5, #0
 800c7b6:	e7f8      	b.n	800c7aa <_calloc_r+0x16>
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	f7fe f879 	bl	800a8b0 <memset>
 800c7be:	e7f4      	b.n	800c7aa <_calloc_r+0x16>

0800c7c0 <__assert_func>:
 800c7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7c2:	4614      	mov	r4, r2
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <__assert_func+0x2c>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4605      	mov	r5, r0
 800c7cc:	68d8      	ldr	r0, [r3, #12]
 800c7ce:	b14c      	cbz	r4, 800c7e4 <__assert_func+0x24>
 800c7d0:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <__assert_func+0x30>)
 800c7d2:	9100      	str	r1, [sp, #0]
 800c7d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7d8:	4906      	ldr	r1, [pc, #24]	; (800c7f4 <__assert_func+0x34>)
 800c7da:	462b      	mov	r3, r5
 800c7dc:	f000 f80e 	bl	800c7fc <fiprintf>
 800c7e0:	f000 fa5a 	bl	800cc98 <abort>
 800c7e4:	4b04      	ldr	r3, [pc, #16]	; (800c7f8 <__assert_func+0x38>)
 800c7e6:	461c      	mov	r4, r3
 800c7e8:	e7f3      	b.n	800c7d2 <__assert_func+0x12>
 800c7ea:	bf00      	nop
 800c7ec:	20000024 	.word	0x20000024
 800c7f0:	0800fb84 	.word	0x0800fb84
 800c7f4:	0800fb91 	.word	0x0800fb91
 800c7f8:	0800fbbf 	.word	0x0800fbbf

0800c7fc <fiprintf>:
 800c7fc:	b40e      	push	{r1, r2, r3}
 800c7fe:	b503      	push	{r0, r1, lr}
 800c800:	4601      	mov	r1, r0
 800c802:	ab03      	add	r3, sp, #12
 800c804:	4805      	ldr	r0, [pc, #20]	; (800c81c <fiprintf+0x20>)
 800c806:	f853 2b04 	ldr.w	r2, [r3], #4
 800c80a:	6800      	ldr	r0, [r0, #0]
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	f000 f845 	bl	800c89c <_vfiprintf_r>
 800c812:	b002      	add	sp, #8
 800c814:	f85d eb04 	ldr.w	lr, [sp], #4
 800c818:	b003      	add	sp, #12
 800c81a:	4770      	bx	lr
 800c81c:	20000024 	.word	0x20000024

0800c820 <__retarget_lock_init_recursive>:
 800c820:	4770      	bx	lr

0800c822 <__retarget_lock_acquire_recursive>:
 800c822:	4770      	bx	lr

0800c824 <__retarget_lock_release_recursive>:
 800c824:	4770      	bx	lr

0800c826 <__ascii_mbtowc>:
 800c826:	b082      	sub	sp, #8
 800c828:	b901      	cbnz	r1, 800c82c <__ascii_mbtowc+0x6>
 800c82a:	a901      	add	r1, sp, #4
 800c82c:	b142      	cbz	r2, 800c840 <__ascii_mbtowc+0x1a>
 800c82e:	b14b      	cbz	r3, 800c844 <__ascii_mbtowc+0x1e>
 800c830:	7813      	ldrb	r3, [r2, #0]
 800c832:	600b      	str	r3, [r1, #0]
 800c834:	7812      	ldrb	r2, [r2, #0]
 800c836:	1e10      	subs	r0, r2, #0
 800c838:	bf18      	it	ne
 800c83a:	2001      	movne	r0, #1
 800c83c:	b002      	add	sp, #8
 800c83e:	4770      	bx	lr
 800c840:	4610      	mov	r0, r2
 800c842:	e7fb      	b.n	800c83c <__ascii_mbtowc+0x16>
 800c844:	f06f 0001 	mvn.w	r0, #1
 800c848:	e7f8      	b.n	800c83c <__ascii_mbtowc+0x16>

0800c84a <__sfputc_r>:
 800c84a:	6893      	ldr	r3, [r2, #8]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	2b00      	cmp	r3, #0
 800c850:	b410      	push	{r4}
 800c852:	6093      	str	r3, [r2, #8]
 800c854:	da08      	bge.n	800c868 <__sfputc_r+0x1e>
 800c856:	6994      	ldr	r4, [r2, #24]
 800c858:	42a3      	cmp	r3, r4
 800c85a:	db01      	blt.n	800c860 <__sfputc_r+0x16>
 800c85c:	290a      	cmp	r1, #10
 800c85e:	d103      	bne.n	800c868 <__sfputc_r+0x1e>
 800c860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c864:	f000 b94a 	b.w	800cafc <__swbuf_r>
 800c868:	6813      	ldr	r3, [r2, #0]
 800c86a:	1c58      	adds	r0, r3, #1
 800c86c:	6010      	str	r0, [r2, #0]
 800c86e:	7019      	strb	r1, [r3, #0]
 800c870:	4608      	mov	r0, r1
 800c872:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <__sfputs_r>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	4606      	mov	r6, r0
 800c87c:	460f      	mov	r7, r1
 800c87e:	4614      	mov	r4, r2
 800c880:	18d5      	adds	r5, r2, r3
 800c882:	42ac      	cmp	r4, r5
 800c884:	d101      	bne.n	800c88a <__sfputs_r+0x12>
 800c886:	2000      	movs	r0, #0
 800c888:	e007      	b.n	800c89a <__sfputs_r+0x22>
 800c88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c88e:	463a      	mov	r2, r7
 800c890:	4630      	mov	r0, r6
 800c892:	f7ff ffda 	bl	800c84a <__sfputc_r>
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	d1f3      	bne.n	800c882 <__sfputs_r+0xa>
 800c89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c89c <_vfiprintf_r>:
 800c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a0:	460d      	mov	r5, r1
 800c8a2:	b09d      	sub	sp, #116	; 0x74
 800c8a4:	4614      	mov	r4, r2
 800c8a6:	4698      	mov	r8, r3
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	b118      	cbz	r0, 800c8b4 <_vfiprintf_r+0x18>
 800c8ac:	6983      	ldr	r3, [r0, #24]
 800c8ae:	b90b      	cbnz	r3, 800c8b4 <_vfiprintf_r+0x18>
 800c8b0:	f000 fb14 	bl	800cedc <__sinit>
 800c8b4:	4b89      	ldr	r3, [pc, #548]	; (800cadc <_vfiprintf_r+0x240>)
 800c8b6:	429d      	cmp	r5, r3
 800c8b8:	d11b      	bne.n	800c8f2 <_vfiprintf_r+0x56>
 800c8ba:	6875      	ldr	r5, [r6, #4]
 800c8bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8be:	07d9      	lsls	r1, r3, #31
 800c8c0:	d405      	bmi.n	800c8ce <_vfiprintf_r+0x32>
 800c8c2:	89ab      	ldrh	r3, [r5, #12]
 800c8c4:	059a      	lsls	r2, r3, #22
 800c8c6:	d402      	bmi.n	800c8ce <_vfiprintf_r+0x32>
 800c8c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ca:	f7ff ffaa 	bl	800c822 <__retarget_lock_acquire_recursive>
 800c8ce:	89ab      	ldrh	r3, [r5, #12]
 800c8d0:	071b      	lsls	r3, r3, #28
 800c8d2:	d501      	bpl.n	800c8d8 <_vfiprintf_r+0x3c>
 800c8d4:	692b      	ldr	r3, [r5, #16]
 800c8d6:	b9eb      	cbnz	r3, 800c914 <_vfiprintf_r+0x78>
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f000 f96e 	bl	800cbbc <__swsetup_r>
 800c8e0:	b1c0      	cbz	r0, 800c914 <_vfiprintf_r+0x78>
 800c8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8e4:	07dc      	lsls	r4, r3, #31
 800c8e6:	d50e      	bpl.n	800c906 <_vfiprintf_r+0x6a>
 800c8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ec:	b01d      	add	sp, #116	; 0x74
 800c8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f2:	4b7b      	ldr	r3, [pc, #492]	; (800cae0 <_vfiprintf_r+0x244>)
 800c8f4:	429d      	cmp	r5, r3
 800c8f6:	d101      	bne.n	800c8fc <_vfiprintf_r+0x60>
 800c8f8:	68b5      	ldr	r5, [r6, #8]
 800c8fa:	e7df      	b.n	800c8bc <_vfiprintf_r+0x20>
 800c8fc:	4b79      	ldr	r3, [pc, #484]	; (800cae4 <_vfiprintf_r+0x248>)
 800c8fe:	429d      	cmp	r5, r3
 800c900:	bf08      	it	eq
 800c902:	68f5      	ldreq	r5, [r6, #12]
 800c904:	e7da      	b.n	800c8bc <_vfiprintf_r+0x20>
 800c906:	89ab      	ldrh	r3, [r5, #12]
 800c908:	0598      	lsls	r0, r3, #22
 800c90a:	d4ed      	bmi.n	800c8e8 <_vfiprintf_r+0x4c>
 800c90c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c90e:	f7ff ff89 	bl	800c824 <__retarget_lock_release_recursive>
 800c912:	e7e9      	b.n	800c8e8 <_vfiprintf_r+0x4c>
 800c914:	2300      	movs	r3, #0
 800c916:	9309      	str	r3, [sp, #36]	; 0x24
 800c918:	2320      	movs	r3, #32
 800c91a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c922:	2330      	movs	r3, #48	; 0x30
 800c924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cae8 <_vfiprintf_r+0x24c>
 800c928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c92c:	f04f 0901 	mov.w	r9, #1
 800c930:	4623      	mov	r3, r4
 800c932:	469a      	mov	sl, r3
 800c934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c938:	b10a      	cbz	r2, 800c93e <_vfiprintf_r+0xa2>
 800c93a:	2a25      	cmp	r2, #37	; 0x25
 800c93c:	d1f9      	bne.n	800c932 <_vfiprintf_r+0x96>
 800c93e:	ebba 0b04 	subs.w	fp, sl, r4
 800c942:	d00b      	beq.n	800c95c <_vfiprintf_r+0xc0>
 800c944:	465b      	mov	r3, fp
 800c946:	4622      	mov	r2, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7ff ff94 	bl	800c878 <__sfputs_r>
 800c950:	3001      	adds	r0, #1
 800c952:	f000 80aa 	beq.w	800caaa <_vfiprintf_r+0x20e>
 800c956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c958:	445a      	add	r2, fp
 800c95a:	9209      	str	r2, [sp, #36]	; 0x24
 800c95c:	f89a 3000 	ldrb.w	r3, [sl]
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 80a2 	beq.w	800caaa <_vfiprintf_r+0x20e>
 800c966:	2300      	movs	r3, #0
 800c968:	f04f 32ff 	mov.w	r2, #4294967295
 800c96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c970:	f10a 0a01 	add.w	sl, sl, #1
 800c974:	9304      	str	r3, [sp, #16]
 800c976:	9307      	str	r3, [sp, #28]
 800c978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c97c:	931a      	str	r3, [sp, #104]	; 0x68
 800c97e:	4654      	mov	r4, sl
 800c980:	2205      	movs	r2, #5
 800c982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c986:	4858      	ldr	r0, [pc, #352]	; (800cae8 <_vfiprintf_r+0x24c>)
 800c988:	f7f3 fc42 	bl	8000210 <memchr>
 800c98c:	9a04      	ldr	r2, [sp, #16]
 800c98e:	b9d8      	cbnz	r0, 800c9c8 <_vfiprintf_r+0x12c>
 800c990:	06d1      	lsls	r1, r2, #27
 800c992:	bf44      	itt	mi
 800c994:	2320      	movmi	r3, #32
 800c996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c99a:	0713      	lsls	r3, r2, #28
 800c99c:	bf44      	itt	mi
 800c99e:	232b      	movmi	r3, #43	; 0x2b
 800c9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9aa:	d015      	beq.n	800c9d8 <_vfiprintf_r+0x13c>
 800c9ac:	9a07      	ldr	r2, [sp, #28]
 800c9ae:	4654      	mov	r4, sl
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f04f 0c0a 	mov.w	ip, #10
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9bc:	3b30      	subs	r3, #48	; 0x30
 800c9be:	2b09      	cmp	r3, #9
 800c9c0:	d94e      	bls.n	800ca60 <_vfiprintf_r+0x1c4>
 800c9c2:	b1b0      	cbz	r0, 800c9f2 <_vfiprintf_r+0x156>
 800c9c4:	9207      	str	r2, [sp, #28]
 800c9c6:	e014      	b.n	800c9f2 <_vfiprintf_r+0x156>
 800c9c8:	eba0 0308 	sub.w	r3, r0, r8
 800c9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	46a2      	mov	sl, r4
 800c9d6:	e7d2      	b.n	800c97e <_vfiprintf_r+0xe2>
 800c9d8:	9b03      	ldr	r3, [sp, #12]
 800c9da:	1d19      	adds	r1, r3, #4
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	9103      	str	r1, [sp, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	bfbb      	ittet	lt
 800c9e4:	425b      	neglt	r3, r3
 800c9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c9ea:	9307      	strge	r3, [sp, #28]
 800c9ec:	9307      	strlt	r3, [sp, #28]
 800c9ee:	bfb8      	it	lt
 800c9f0:	9204      	strlt	r2, [sp, #16]
 800c9f2:	7823      	ldrb	r3, [r4, #0]
 800c9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c9f6:	d10c      	bne.n	800ca12 <_vfiprintf_r+0x176>
 800c9f8:	7863      	ldrb	r3, [r4, #1]
 800c9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c9fc:	d135      	bne.n	800ca6a <_vfiprintf_r+0x1ce>
 800c9fe:	9b03      	ldr	r3, [sp, #12]
 800ca00:	1d1a      	adds	r2, r3, #4
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	9203      	str	r2, [sp, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	bfb8      	it	lt
 800ca0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca0e:	3402      	adds	r4, #2
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800caf8 <_vfiprintf_r+0x25c>
 800ca16:	7821      	ldrb	r1, [r4, #0]
 800ca18:	2203      	movs	r2, #3
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	f7f3 fbf8 	bl	8000210 <memchr>
 800ca20:	b140      	cbz	r0, 800ca34 <_vfiprintf_r+0x198>
 800ca22:	2340      	movs	r3, #64	; 0x40
 800ca24:	eba0 000a 	sub.w	r0, r0, sl
 800ca28:	fa03 f000 	lsl.w	r0, r3, r0
 800ca2c:	9b04      	ldr	r3, [sp, #16]
 800ca2e:	4303      	orrs	r3, r0
 800ca30:	3401      	adds	r4, #1
 800ca32:	9304      	str	r3, [sp, #16]
 800ca34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca38:	482c      	ldr	r0, [pc, #176]	; (800caec <_vfiprintf_r+0x250>)
 800ca3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca3e:	2206      	movs	r2, #6
 800ca40:	f7f3 fbe6 	bl	8000210 <memchr>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d03f      	beq.n	800cac8 <_vfiprintf_r+0x22c>
 800ca48:	4b29      	ldr	r3, [pc, #164]	; (800caf0 <_vfiprintf_r+0x254>)
 800ca4a:	bb1b      	cbnz	r3, 800ca94 <_vfiprintf_r+0x1f8>
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	3307      	adds	r3, #7
 800ca50:	f023 0307 	bic.w	r3, r3, #7
 800ca54:	3308      	adds	r3, #8
 800ca56:	9303      	str	r3, [sp, #12]
 800ca58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca5a:	443b      	add	r3, r7
 800ca5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca5e:	e767      	b.n	800c930 <_vfiprintf_r+0x94>
 800ca60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca64:	460c      	mov	r4, r1
 800ca66:	2001      	movs	r0, #1
 800ca68:	e7a5      	b.n	800c9b6 <_vfiprintf_r+0x11a>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	3401      	adds	r4, #1
 800ca6e:	9305      	str	r3, [sp, #20]
 800ca70:	4619      	mov	r1, r3
 800ca72:	f04f 0c0a 	mov.w	ip, #10
 800ca76:	4620      	mov	r0, r4
 800ca78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca7c:	3a30      	subs	r2, #48	; 0x30
 800ca7e:	2a09      	cmp	r2, #9
 800ca80:	d903      	bls.n	800ca8a <_vfiprintf_r+0x1ee>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0c5      	beq.n	800ca12 <_vfiprintf_r+0x176>
 800ca86:	9105      	str	r1, [sp, #20]
 800ca88:	e7c3      	b.n	800ca12 <_vfiprintf_r+0x176>
 800ca8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca8e:	4604      	mov	r4, r0
 800ca90:	2301      	movs	r3, #1
 800ca92:	e7f0      	b.n	800ca76 <_vfiprintf_r+0x1da>
 800ca94:	ab03      	add	r3, sp, #12
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	462a      	mov	r2, r5
 800ca9a:	4b16      	ldr	r3, [pc, #88]	; (800caf4 <_vfiprintf_r+0x258>)
 800ca9c:	a904      	add	r1, sp, #16
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f7fe f88e 	bl	800abc0 <_printf_float>
 800caa4:	4607      	mov	r7, r0
 800caa6:	1c78      	adds	r0, r7, #1
 800caa8:	d1d6      	bne.n	800ca58 <_vfiprintf_r+0x1bc>
 800caaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caac:	07d9      	lsls	r1, r3, #31
 800caae:	d405      	bmi.n	800cabc <_vfiprintf_r+0x220>
 800cab0:	89ab      	ldrh	r3, [r5, #12]
 800cab2:	059a      	lsls	r2, r3, #22
 800cab4:	d402      	bmi.n	800cabc <_vfiprintf_r+0x220>
 800cab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cab8:	f7ff feb4 	bl	800c824 <__retarget_lock_release_recursive>
 800cabc:	89ab      	ldrh	r3, [r5, #12]
 800cabe:	065b      	lsls	r3, r3, #25
 800cac0:	f53f af12 	bmi.w	800c8e8 <_vfiprintf_r+0x4c>
 800cac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cac6:	e711      	b.n	800c8ec <_vfiprintf_r+0x50>
 800cac8:	ab03      	add	r3, sp, #12
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	462a      	mov	r2, r5
 800cace:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <_vfiprintf_r+0x258>)
 800cad0:	a904      	add	r1, sp, #16
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7fe fb18 	bl	800b108 <_printf_i>
 800cad8:	e7e4      	b.n	800caa4 <_vfiprintf_r+0x208>
 800cada:	bf00      	nop
 800cadc:	0800fcfc 	.word	0x0800fcfc
 800cae0:	0800fd1c 	.word	0x0800fd1c
 800cae4:	0800fcdc 	.word	0x0800fcdc
 800cae8:	0800fbca 	.word	0x0800fbca
 800caec:	0800fbd4 	.word	0x0800fbd4
 800caf0:	0800abc1 	.word	0x0800abc1
 800caf4:	0800c879 	.word	0x0800c879
 800caf8:	0800fbd0 	.word	0x0800fbd0

0800cafc <__swbuf_r>:
 800cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafe:	460e      	mov	r6, r1
 800cb00:	4614      	mov	r4, r2
 800cb02:	4605      	mov	r5, r0
 800cb04:	b118      	cbz	r0, 800cb0e <__swbuf_r+0x12>
 800cb06:	6983      	ldr	r3, [r0, #24]
 800cb08:	b90b      	cbnz	r3, 800cb0e <__swbuf_r+0x12>
 800cb0a:	f000 f9e7 	bl	800cedc <__sinit>
 800cb0e:	4b21      	ldr	r3, [pc, #132]	; (800cb94 <__swbuf_r+0x98>)
 800cb10:	429c      	cmp	r4, r3
 800cb12:	d12b      	bne.n	800cb6c <__swbuf_r+0x70>
 800cb14:	686c      	ldr	r4, [r5, #4]
 800cb16:	69a3      	ldr	r3, [r4, #24]
 800cb18:	60a3      	str	r3, [r4, #8]
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	071a      	lsls	r2, r3, #28
 800cb1e:	d52f      	bpl.n	800cb80 <__swbuf_r+0x84>
 800cb20:	6923      	ldr	r3, [r4, #16]
 800cb22:	b36b      	cbz	r3, 800cb80 <__swbuf_r+0x84>
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	6820      	ldr	r0, [r4, #0]
 800cb28:	1ac0      	subs	r0, r0, r3
 800cb2a:	6963      	ldr	r3, [r4, #20]
 800cb2c:	b2f6      	uxtb	r6, r6
 800cb2e:	4283      	cmp	r3, r0
 800cb30:	4637      	mov	r7, r6
 800cb32:	dc04      	bgt.n	800cb3e <__swbuf_r+0x42>
 800cb34:	4621      	mov	r1, r4
 800cb36:	4628      	mov	r0, r5
 800cb38:	f000 f93c 	bl	800cdb4 <_fflush_r>
 800cb3c:	bb30      	cbnz	r0, 800cb8c <__swbuf_r+0x90>
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	3b01      	subs	r3, #1
 800cb42:	60a3      	str	r3, [r4, #8]
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	6022      	str	r2, [r4, #0]
 800cb4a:	701e      	strb	r6, [r3, #0]
 800cb4c:	6963      	ldr	r3, [r4, #20]
 800cb4e:	3001      	adds	r0, #1
 800cb50:	4283      	cmp	r3, r0
 800cb52:	d004      	beq.n	800cb5e <__swbuf_r+0x62>
 800cb54:	89a3      	ldrh	r3, [r4, #12]
 800cb56:	07db      	lsls	r3, r3, #31
 800cb58:	d506      	bpl.n	800cb68 <__swbuf_r+0x6c>
 800cb5a:	2e0a      	cmp	r6, #10
 800cb5c:	d104      	bne.n	800cb68 <__swbuf_r+0x6c>
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4628      	mov	r0, r5
 800cb62:	f000 f927 	bl	800cdb4 <_fflush_r>
 800cb66:	b988      	cbnz	r0, 800cb8c <__swbuf_r+0x90>
 800cb68:	4638      	mov	r0, r7
 800cb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <__swbuf_r+0x9c>)
 800cb6e:	429c      	cmp	r4, r3
 800cb70:	d101      	bne.n	800cb76 <__swbuf_r+0x7a>
 800cb72:	68ac      	ldr	r4, [r5, #8]
 800cb74:	e7cf      	b.n	800cb16 <__swbuf_r+0x1a>
 800cb76:	4b09      	ldr	r3, [pc, #36]	; (800cb9c <__swbuf_r+0xa0>)
 800cb78:	429c      	cmp	r4, r3
 800cb7a:	bf08      	it	eq
 800cb7c:	68ec      	ldreq	r4, [r5, #12]
 800cb7e:	e7ca      	b.n	800cb16 <__swbuf_r+0x1a>
 800cb80:	4621      	mov	r1, r4
 800cb82:	4628      	mov	r0, r5
 800cb84:	f000 f81a 	bl	800cbbc <__swsetup_r>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d0cb      	beq.n	800cb24 <__swbuf_r+0x28>
 800cb8c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb90:	e7ea      	b.n	800cb68 <__swbuf_r+0x6c>
 800cb92:	bf00      	nop
 800cb94:	0800fcfc 	.word	0x0800fcfc
 800cb98:	0800fd1c 	.word	0x0800fd1c
 800cb9c:	0800fcdc 	.word	0x0800fcdc

0800cba0 <__ascii_wctomb>:
 800cba0:	b149      	cbz	r1, 800cbb6 <__ascii_wctomb+0x16>
 800cba2:	2aff      	cmp	r2, #255	; 0xff
 800cba4:	bf85      	ittet	hi
 800cba6:	238a      	movhi	r3, #138	; 0x8a
 800cba8:	6003      	strhi	r3, [r0, #0]
 800cbaa:	700a      	strbls	r2, [r1, #0]
 800cbac:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbb0:	bf98      	it	ls
 800cbb2:	2001      	movls	r0, #1
 800cbb4:	4770      	bx	lr
 800cbb6:	4608      	mov	r0, r1
 800cbb8:	4770      	bx	lr
	...

0800cbbc <__swsetup_r>:
 800cbbc:	4b32      	ldr	r3, [pc, #200]	; (800cc88 <__swsetup_r+0xcc>)
 800cbbe:	b570      	push	{r4, r5, r6, lr}
 800cbc0:	681d      	ldr	r5, [r3, #0]
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	b125      	cbz	r5, 800cbd2 <__swsetup_r+0x16>
 800cbc8:	69ab      	ldr	r3, [r5, #24]
 800cbca:	b913      	cbnz	r3, 800cbd2 <__swsetup_r+0x16>
 800cbcc:	4628      	mov	r0, r5
 800cbce:	f000 f985 	bl	800cedc <__sinit>
 800cbd2:	4b2e      	ldr	r3, [pc, #184]	; (800cc8c <__swsetup_r+0xd0>)
 800cbd4:	429c      	cmp	r4, r3
 800cbd6:	d10f      	bne.n	800cbf8 <__swsetup_r+0x3c>
 800cbd8:	686c      	ldr	r4, [r5, #4]
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbe0:	0719      	lsls	r1, r3, #28
 800cbe2:	d42c      	bmi.n	800cc3e <__swsetup_r+0x82>
 800cbe4:	06dd      	lsls	r5, r3, #27
 800cbe6:	d411      	bmi.n	800cc0c <__swsetup_r+0x50>
 800cbe8:	2309      	movs	r3, #9
 800cbea:	6033      	str	r3, [r6, #0]
 800cbec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbf0:	81a3      	strh	r3, [r4, #12]
 800cbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf6:	e03e      	b.n	800cc76 <__swsetup_r+0xba>
 800cbf8:	4b25      	ldr	r3, [pc, #148]	; (800cc90 <__swsetup_r+0xd4>)
 800cbfa:	429c      	cmp	r4, r3
 800cbfc:	d101      	bne.n	800cc02 <__swsetup_r+0x46>
 800cbfe:	68ac      	ldr	r4, [r5, #8]
 800cc00:	e7eb      	b.n	800cbda <__swsetup_r+0x1e>
 800cc02:	4b24      	ldr	r3, [pc, #144]	; (800cc94 <__swsetup_r+0xd8>)
 800cc04:	429c      	cmp	r4, r3
 800cc06:	bf08      	it	eq
 800cc08:	68ec      	ldreq	r4, [r5, #12]
 800cc0a:	e7e6      	b.n	800cbda <__swsetup_r+0x1e>
 800cc0c:	0758      	lsls	r0, r3, #29
 800cc0e:	d512      	bpl.n	800cc36 <__swsetup_r+0x7a>
 800cc10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc12:	b141      	cbz	r1, 800cc26 <__swsetup_r+0x6a>
 800cc14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc18:	4299      	cmp	r1, r3
 800cc1a:	d002      	beq.n	800cc22 <__swsetup_r+0x66>
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7fd fe4f 	bl	800a8c0 <_free_r>
 800cc22:	2300      	movs	r3, #0
 800cc24:	6363      	str	r3, [r4, #52]	; 0x34
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc2c:	81a3      	strh	r3, [r4, #12]
 800cc2e:	2300      	movs	r3, #0
 800cc30:	6063      	str	r3, [r4, #4]
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	89a3      	ldrh	r3, [r4, #12]
 800cc38:	f043 0308 	orr.w	r3, r3, #8
 800cc3c:	81a3      	strh	r3, [r4, #12]
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	b94b      	cbnz	r3, 800cc56 <__swsetup_r+0x9a>
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc4c:	d003      	beq.n	800cc56 <__swsetup_r+0x9a>
 800cc4e:	4621      	mov	r1, r4
 800cc50:	4630      	mov	r0, r6
 800cc52:	f000 fa05 	bl	800d060 <__smakebuf_r>
 800cc56:	89a0      	ldrh	r0, [r4, #12]
 800cc58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc5c:	f010 0301 	ands.w	r3, r0, #1
 800cc60:	d00a      	beq.n	800cc78 <__swsetup_r+0xbc>
 800cc62:	2300      	movs	r3, #0
 800cc64:	60a3      	str	r3, [r4, #8]
 800cc66:	6963      	ldr	r3, [r4, #20]
 800cc68:	425b      	negs	r3, r3
 800cc6a:	61a3      	str	r3, [r4, #24]
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	b943      	cbnz	r3, 800cc82 <__swsetup_r+0xc6>
 800cc70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc74:	d1ba      	bne.n	800cbec <__swsetup_r+0x30>
 800cc76:	bd70      	pop	{r4, r5, r6, pc}
 800cc78:	0781      	lsls	r1, r0, #30
 800cc7a:	bf58      	it	pl
 800cc7c:	6963      	ldrpl	r3, [r4, #20]
 800cc7e:	60a3      	str	r3, [r4, #8]
 800cc80:	e7f4      	b.n	800cc6c <__swsetup_r+0xb0>
 800cc82:	2000      	movs	r0, #0
 800cc84:	e7f7      	b.n	800cc76 <__swsetup_r+0xba>
 800cc86:	bf00      	nop
 800cc88:	20000024 	.word	0x20000024
 800cc8c:	0800fcfc 	.word	0x0800fcfc
 800cc90:	0800fd1c 	.word	0x0800fd1c
 800cc94:	0800fcdc 	.word	0x0800fcdc

0800cc98 <abort>:
 800cc98:	b508      	push	{r3, lr}
 800cc9a:	2006      	movs	r0, #6
 800cc9c:	f000 fa48 	bl	800d130 <raise>
 800cca0:	2001      	movs	r0, #1
 800cca2:	f7f6 fac1 	bl	8003228 <_exit>
	...

0800cca8 <__sflush_r>:
 800cca8:	898a      	ldrh	r2, [r1, #12]
 800ccaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccae:	4605      	mov	r5, r0
 800ccb0:	0710      	lsls	r0, r2, #28
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	d458      	bmi.n	800cd68 <__sflush_r+0xc0>
 800ccb6:	684b      	ldr	r3, [r1, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	dc05      	bgt.n	800ccc8 <__sflush_r+0x20>
 800ccbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	dc02      	bgt.n	800ccc8 <__sflush_r+0x20>
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccca:	2e00      	cmp	r6, #0
 800cccc:	d0f9      	beq.n	800ccc2 <__sflush_r+0x1a>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccd4:	682f      	ldr	r7, [r5, #0]
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	d032      	beq.n	800cd40 <__sflush_r+0x98>
 800ccda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	075a      	lsls	r2, r3, #29
 800cce0:	d505      	bpl.n	800ccee <__sflush_r+0x46>
 800cce2:	6863      	ldr	r3, [r4, #4]
 800cce4:	1ac0      	subs	r0, r0, r3
 800cce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cce8:	b10b      	cbz	r3, 800ccee <__sflush_r+0x46>
 800ccea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccec:	1ac0      	subs	r0, r0, r3
 800ccee:	2300      	movs	r3, #0
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccf4:	6a21      	ldr	r1, [r4, #32]
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	47b0      	blx	r6
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	d106      	bne.n	800cd0e <__sflush_r+0x66>
 800cd00:	6829      	ldr	r1, [r5, #0]
 800cd02:	291d      	cmp	r1, #29
 800cd04:	d82c      	bhi.n	800cd60 <__sflush_r+0xb8>
 800cd06:	4a2a      	ldr	r2, [pc, #168]	; (800cdb0 <__sflush_r+0x108>)
 800cd08:	40ca      	lsrs	r2, r1
 800cd0a:	07d6      	lsls	r6, r2, #31
 800cd0c:	d528      	bpl.n	800cd60 <__sflush_r+0xb8>
 800cd0e:	2200      	movs	r2, #0
 800cd10:	6062      	str	r2, [r4, #4]
 800cd12:	04d9      	lsls	r1, r3, #19
 800cd14:	6922      	ldr	r2, [r4, #16]
 800cd16:	6022      	str	r2, [r4, #0]
 800cd18:	d504      	bpl.n	800cd24 <__sflush_r+0x7c>
 800cd1a:	1c42      	adds	r2, r0, #1
 800cd1c:	d101      	bne.n	800cd22 <__sflush_r+0x7a>
 800cd1e:	682b      	ldr	r3, [r5, #0]
 800cd20:	b903      	cbnz	r3, 800cd24 <__sflush_r+0x7c>
 800cd22:	6560      	str	r0, [r4, #84]	; 0x54
 800cd24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd26:	602f      	str	r7, [r5, #0]
 800cd28:	2900      	cmp	r1, #0
 800cd2a:	d0ca      	beq.n	800ccc2 <__sflush_r+0x1a>
 800cd2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd30:	4299      	cmp	r1, r3
 800cd32:	d002      	beq.n	800cd3a <__sflush_r+0x92>
 800cd34:	4628      	mov	r0, r5
 800cd36:	f7fd fdc3 	bl	800a8c0 <_free_r>
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd3e:	e7c1      	b.n	800ccc4 <__sflush_r+0x1c>
 800cd40:	6a21      	ldr	r1, [r4, #32]
 800cd42:	2301      	movs	r3, #1
 800cd44:	4628      	mov	r0, r5
 800cd46:	47b0      	blx	r6
 800cd48:	1c41      	adds	r1, r0, #1
 800cd4a:	d1c7      	bne.n	800ccdc <__sflush_r+0x34>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d0c4      	beq.n	800ccdc <__sflush_r+0x34>
 800cd52:	2b1d      	cmp	r3, #29
 800cd54:	d001      	beq.n	800cd5a <__sflush_r+0xb2>
 800cd56:	2b16      	cmp	r3, #22
 800cd58:	d101      	bne.n	800cd5e <__sflush_r+0xb6>
 800cd5a:	602f      	str	r7, [r5, #0]
 800cd5c:	e7b1      	b.n	800ccc2 <__sflush_r+0x1a>
 800cd5e:	89a3      	ldrh	r3, [r4, #12]
 800cd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd64:	81a3      	strh	r3, [r4, #12]
 800cd66:	e7ad      	b.n	800ccc4 <__sflush_r+0x1c>
 800cd68:	690f      	ldr	r7, [r1, #16]
 800cd6a:	2f00      	cmp	r7, #0
 800cd6c:	d0a9      	beq.n	800ccc2 <__sflush_r+0x1a>
 800cd6e:	0793      	lsls	r3, r2, #30
 800cd70:	680e      	ldr	r6, [r1, #0]
 800cd72:	bf08      	it	eq
 800cd74:	694b      	ldreq	r3, [r1, #20]
 800cd76:	600f      	str	r7, [r1, #0]
 800cd78:	bf18      	it	ne
 800cd7a:	2300      	movne	r3, #0
 800cd7c:	eba6 0807 	sub.w	r8, r6, r7
 800cd80:	608b      	str	r3, [r1, #8]
 800cd82:	f1b8 0f00 	cmp.w	r8, #0
 800cd86:	dd9c      	ble.n	800ccc2 <__sflush_r+0x1a>
 800cd88:	6a21      	ldr	r1, [r4, #32]
 800cd8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd8c:	4643      	mov	r3, r8
 800cd8e:	463a      	mov	r2, r7
 800cd90:	4628      	mov	r0, r5
 800cd92:	47b0      	blx	r6
 800cd94:	2800      	cmp	r0, #0
 800cd96:	dc06      	bgt.n	800cda6 <__sflush_r+0xfe>
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	f04f 30ff 	mov.w	r0, #4294967295
 800cda4:	e78e      	b.n	800ccc4 <__sflush_r+0x1c>
 800cda6:	4407      	add	r7, r0
 800cda8:	eba8 0800 	sub.w	r8, r8, r0
 800cdac:	e7e9      	b.n	800cd82 <__sflush_r+0xda>
 800cdae:	bf00      	nop
 800cdb0:	20400001 	.word	0x20400001

0800cdb4 <_fflush_r>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	690b      	ldr	r3, [r1, #16]
 800cdb8:	4605      	mov	r5, r0
 800cdba:	460c      	mov	r4, r1
 800cdbc:	b913      	cbnz	r3, 800cdc4 <_fflush_r+0x10>
 800cdbe:	2500      	movs	r5, #0
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	b118      	cbz	r0, 800cdce <_fflush_r+0x1a>
 800cdc6:	6983      	ldr	r3, [r0, #24]
 800cdc8:	b90b      	cbnz	r3, 800cdce <_fflush_r+0x1a>
 800cdca:	f000 f887 	bl	800cedc <__sinit>
 800cdce:	4b14      	ldr	r3, [pc, #80]	; (800ce20 <_fflush_r+0x6c>)
 800cdd0:	429c      	cmp	r4, r3
 800cdd2:	d11b      	bne.n	800ce0c <_fflush_r+0x58>
 800cdd4:	686c      	ldr	r4, [r5, #4]
 800cdd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0ef      	beq.n	800cdbe <_fflush_r+0xa>
 800cdde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cde0:	07d0      	lsls	r0, r2, #31
 800cde2:	d404      	bmi.n	800cdee <_fflush_r+0x3a>
 800cde4:	0599      	lsls	r1, r3, #22
 800cde6:	d402      	bmi.n	800cdee <_fflush_r+0x3a>
 800cde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdea:	f7ff fd1a 	bl	800c822 <__retarget_lock_acquire_recursive>
 800cdee:	4628      	mov	r0, r5
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	f7ff ff59 	bl	800cca8 <__sflush_r>
 800cdf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdf8:	07da      	lsls	r2, r3, #31
 800cdfa:	4605      	mov	r5, r0
 800cdfc:	d4e0      	bmi.n	800cdc0 <_fflush_r+0xc>
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	059b      	lsls	r3, r3, #22
 800ce02:	d4dd      	bmi.n	800cdc0 <_fflush_r+0xc>
 800ce04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce06:	f7ff fd0d 	bl	800c824 <__retarget_lock_release_recursive>
 800ce0a:	e7d9      	b.n	800cdc0 <_fflush_r+0xc>
 800ce0c:	4b05      	ldr	r3, [pc, #20]	; (800ce24 <_fflush_r+0x70>)
 800ce0e:	429c      	cmp	r4, r3
 800ce10:	d101      	bne.n	800ce16 <_fflush_r+0x62>
 800ce12:	68ac      	ldr	r4, [r5, #8]
 800ce14:	e7df      	b.n	800cdd6 <_fflush_r+0x22>
 800ce16:	4b04      	ldr	r3, [pc, #16]	; (800ce28 <_fflush_r+0x74>)
 800ce18:	429c      	cmp	r4, r3
 800ce1a:	bf08      	it	eq
 800ce1c:	68ec      	ldreq	r4, [r5, #12]
 800ce1e:	e7da      	b.n	800cdd6 <_fflush_r+0x22>
 800ce20:	0800fcfc 	.word	0x0800fcfc
 800ce24:	0800fd1c 	.word	0x0800fd1c
 800ce28:	0800fcdc 	.word	0x0800fcdc

0800ce2c <std>:
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	b510      	push	{r4, lr}
 800ce30:	4604      	mov	r4, r0
 800ce32:	e9c0 3300 	strd	r3, r3, [r0]
 800ce36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce3a:	6083      	str	r3, [r0, #8]
 800ce3c:	8181      	strh	r1, [r0, #12]
 800ce3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce40:	81c2      	strh	r2, [r0, #14]
 800ce42:	6183      	str	r3, [r0, #24]
 800ce44:	4619      	mov	r1, r3
 800ce46:	2208      	movs	r2, #8
 800ce48:	305c      	adds	r0, #92	; 0x5c
 800ce4a:	f7fd fd31 	bl	800a8b0 <memset>
 800ce4e:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <std+0x38>)
 800ce50:	6263      	str	r3, [r4, #36]	; 0x24
 800ce52:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <std+0x3c>)
 800ce54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce56:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <std+0x40>)
 800ce58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce5a:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <std+0x44>)
 800ce5c:	6224      	str	r4, [r4, #32]
 800ce5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ce60:	bd10      	pop	{r4, pc}
 800ce62:	bf00      	nop
 800ce64:	0800d169 	.word	0x0800d169
 800ce68:	0800d18b 	.word	0x0800d18b
 800ce6c:	0800d1c3 	.word	0x0800d1c3
 800ce70:	0800d1e7 	.word	0x0800d1e7

0800ce74 <_cleanup_r>:
 800ce74:	4901      	ldr	r1, [pc, #4]	; (800ce7c <_cleanup_r+0x8>)
 800ce76:	f000 b8af 	b.w	800cfd8 <_fwalk_reent>
 800ce7a:	bf00      	nop
 800ce7c:	0800cdb5 	.word	0x0800cdb5

0800ce80 <__sfmoreglue>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	2268      	movs	r2, #104	; 0x68
 800ce84:	1e4d      	subs	r5, r1, #1
 800ce86:	4355      	muls	r5, r2
 800ce88:	460e      	mov	r6, r1
 800ce8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce8e:	f7fd fd83 	bl	800a998 <_malloc_r>
 800ce92:	4604      	mov	r4, r0
 800ce94:	b140      	cbz	r0, 800cea8 <__sfmoreglue+0x28>
 800ce96:	2100      	movs	r1, #0
 800ce98:	e9c0 1600 	strd	r1, r6, [r0]
 800ce9c:	300c      	adds	r0, #12
 800ce9e:	60a0      	str	r0, [r4, #8]
 800cea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cea4:	f7fd fd04 	bl	800a8b0 <memset>
 800cea8:	4620      	mov	r0, r4
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}

0800ceac <__sfp_lock_acquire>:
 800ceac:	4801      	ldr	r0, [pc, #4]	; (800ceb4 <__sfp_lock_acquire+0x8>)
 800ceae:	f7ff bcb8 	b.w	800c822 <__retarget_lock_acquire_recursive>
 800ceb2:	bf00      	nop
 800ceb4:	20013401 	.word	0x20013401

0800ceb8 <__sfp_lock_release>:
 800ceb8:	4801      	ldr	r0, [pc, #4]	; (800cec0 <__sfp_lock_release+0x8>)
 800ceba:	f7ff bcb3 	b.w	800c824 <__retarget_lock_release_recursive>
 800cebe:	bf00      	nop
 800cec0:	20013401 	.word	0x20013401

0800cec4 <__sinit_lock_acquire>:
 800cec4:	4801      	ldr	r0, [pc, #4]	; (800cecc <__sinit_lock_acquire+0x8>)
 800cec6:	f7ff bcac 	b.w	800c822 <__retarget_lock_acquire_recursive>
 800ceca:	bf00      	nop
 800cecc:	20013402 	.word	0x20013402

0800ced0 <__sinit_lock_release>:
 800ced0:	4801      	ldr	r0, [pc, #4]	; (800ced8 <__sinit_lock_release+0x8>)
 800ced2:	f7ff bca7 	b.w	800c824 <__retarget_lock_release_recursive>
 800ced6:	bf00      	nop
 800ced8:	20013402 	.word	0x20013402

0800cedc <__sinit>:
 800cedc:	b510      	push	{r4, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	f7ff fff0 	bl	800cec4 <__sinit_lock_acquire>
 800cee4:	69a3      	ldr	r3, [r4, #24]
 800cee6:	b11b      	cbz	r3, 800cef0 <__sinit+0x14>
 800cee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceec:	f7ff bff0 	b.w	800ced0 <__sinit_lock_release>
 800cef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cef4:	6523      	str	r3, [r4, #80]	; 0x50
 800cef6:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <__sinit+0x68>)
 800cef8:	4a13      	ldr	r2, [pc, #76]	; (800cf48 <__sinit+0x6c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cefe:	42a3      	cmp	r3, r4
 800cf00:	bf04      	itt	eq
 800cf02:	2301      	moveq	r3, #1
 800cf04:	61a3      	streq	r3, [r4, #24]
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 f820 	bl	800cf4c <__sfp>
 800cf0c:	6060      	str	r0, [r4, #4]
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f000 f81c 	bl	800cf4c <__sfp>
 800cf14:	60a0      	str	r0, [r4, #8]
 800cf16:	4620      	mov	r0, r4
 800cf18:	f000 f818 	bl	800cf4c <__sfp>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	60e0      	str	r0, [r4, #12]
 800cf20:	2104      	movs	r1, #4
 800cf22:	6860      	ldr	r0, [r4, #4]
 800cf24:	f7ff ff82 	bl	800ce2c <std>
 800cf28:	68a0      	ldr	r0, [r4, #8]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	2109      	movs	r1, #9
 800cf2e:	f7ff ff7d 	bl	800ce2c <std>
 800cf32:	68e0      	ldr	r0, [r4, #12]
 800cf34:	2202      	movs	r2, #2
 800cf36:	2112      	movs	r1, #18
 800cf38:	f7ff ff78 	bl	800ce2c <std>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	61a3      	str	r3, [r4, #24]
 800cf40:	e7d2      	b.n	800cee8 <__sinit+0xc>
 800cf42:	bf00      	nop
 800cf44:	0800f960 	.word	0x0800f960
 800cf48:	0800ce75 	.word	0x0800ce75

0800cf4c <__sfp>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	4607      	mov	r7, r0
 800cf50:	f7ff ffac 	bl	800ceac <__sfp_lock_acquire>
 800cf54:	4b1e      	ldr	r3, [pc, #120]	; (800cfd0 <__sfp+0x84>)
 800cf56:	681e      	ldr	r6, [r3, #0]
 800cf58:	69b3      	ldr	r3, [r6, #24]
 800cf5a:	b913      	cbnz	r3, 800cf62 <__sfp+0x16>
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7ff ffbd 	bl	800cedc <__sinit>
 800cf62:	3648      	adds	r6, #72	; 0x48
 800cf64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	d503      	bpl.n	800cf74 <__sfp+0x28>
 800cf6c:	6833      	ldr	r3, [r6, #0]
 800cf6e:	b30b      	cbz	r3, 800cfb4 <__sfp+0x68>
 800cf70:	6836      	ldr	r6, [r6, #0]
 800cf72:	e7f7      	b.n	800cf64 <__sfp+0x18>
 800cf74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf78:	b9d5      	cbnz	r5, 800cfb0 <__sfp+0x64>
 800cf7a:	4b16      	ldr	r3, [pc, #88]	; (800cfd4 <__sfp+0x88>)
 800cf7c:	60e3      	str	r3, [r4, #12]
 800cf7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf82:	6665      	str	r5, [r4, #100]	; 0x64
 800cf84:	f7ff fc4c 	bl	800c820 <__retarget_lock_init_recursive>
 800cf88:	f7ff ff96 	bl	800ceb8 <__sfp_lock_release>
 800cf8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf94:	6025      	str	r5, [r4, #0]
 800cf96:	61a5      	str	r5, [r4, #24]
 800cf98:	2208      	movs	r2, #8
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cfa0:	f7fd fc86 	bl	800a8b0 <memset>
 800cfa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cfa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cfac:	4620      	mov	r0, r4
 800cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfb0:	3468      	adds	r4, #104	; 0x68
 800cfb2:	e7d9      	b.n	800cf68 <__sfp+0x1c>
 800cfb4:	2104      	movs	r1, #4
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	f7ff ff62 	bl	800ce80 <__sfmoreglue>
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	6030      	str	r0, [r6, #0]
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d1d5      	bne.n	800cf70 <__sfp+0x24>
 800cfc4:	f7ff ff78 	bl	800ceb8 <__sfp_lock_release>
 800cfc8:	230c      	movs	r3, #12
 800cfca:	603b      	str	r3, [r7, #0]
 800cfcc:	e7ee      	b.n	800cfac <__sfp+0x60>
 800cfce:	bf00      	nop
 800cfd0:	0800f960 	.word	0x0800f960
 800cfd4:	ffff0001 	.word	0xffff0001

0800cfd8 <_fwalk_reent>:
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	4606      	mov	r6, r0
 800cfde:	4688      	mov	r8, r1
 800cfe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfe4:	2700      	movs	r7, #0
 800cfe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfea:	f1b9 0901 	subs.w	r9, r9, #1
 800cfee:	d505      	bpl.n	800cffc <_fwalk_reent+0x24>
 800cff0:	6824      	ldr	r4, [r4, #0]
 800cff2:	2c00      	cmp	r4, #0
 800cff4:	d1f7      	bne.n	800cfe6 <_fwalk_reent+0xe>
 800cff6:	4638      	mov	r0, r7
 800cff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffc:	89ab      	ldrh	r3, [r5, #12]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d907      	bls.n	800d012 <_fwalk_reent+0x3a>
 800d002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d006:	3301      	adds	r3, #1
 800d008:	d003      	beq.n	800d012 <_fwalk_reent+0x3a>
 800d00a:	4629      	mov	r1, r5
 800d00c:	4630      	mov	r0, r6
 800d00e:	47c0      	blx	r8
 800d010:	4307      	orrs	r7, r0
 800d012:	3568      	adds	r5, #104	; 0x68
 800d014:	e7e9      	b.n	800cfea <_fwalk_reent+0x12>

0800d016 <__swhatbuf_r>:
 800d016:	b570      	push	{r4, r5, r6, lr}
 800d018:	460e      	mov	r6, r1
 800d01a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d01e:	2900      	cmp	r1, #0
 800d020:	b096      	sub	sp, #88	; 0x58
 800d022:	4614      	mov	r4, r2
 800d024:	461d      	mov	r5, r3
 800d026:	da08      	bge.n	800d03a <__swhatbuf_r+0x24>
 800d028:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	602a      	str	r2, [r5, #0]
 800d030:	061a      	lsls	r2, r3, #24
 800d032:	d410      	bmi.n	800d056 <__swhatbuf_r+0x40>
 800d034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d038:	e00e      	b.n	800d058 <__swhatbuf_r+0x42>
 800d03a:	466a      	mov	r2, sp
 800d03c:	f000 f8fa 	bl	800d234 <_fstat_r>
 800d040:	2800      	cmp	r0, #0
 800d042:	dbf1      	blt.n	800d028 <__swhatbuf_r+0x12>
 800d044:	9a01      	ldr	r2, [sp, #4]
 800d046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d04a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d04e:	425a      	negs	r2, r3
 800d050:	415a      	adcs	r2, r3
 800d052:	602a      	str	r2, [r5, #0]
 800d054:	e7ee      	b.n	800d034 <__swhatbuf_r+0x1e>
 800d056:	2340      	movs	r3, #64	; 0x40
 800d058:	2000      	movs	r0, #0
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	b016      	add	sp, #88	; 0x58
 800d05e:	bd70      	pop	{r4, r5, r6, pc}

0800d060 <__smakebuf_r>:
 800d060:	898b      	ldrh	r3, [r1, #12]
 800d062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d064:	079d      	lsls	r5, r3, #30
 800d066:	4606      	mov	r6, r0
 800d068:	460c      	mov	r4, r1
 800d06a:	d507      	bpl.n	800d07c <__smakebuf_r+0x1c>
 800d06c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	6123      	str	r3, [r4, #16]
 800d074:	2301      	movs	r3, #1
 800d076:	6163      	str	r3, [r4, #20]
 800d078:	b002      	add	sp, #8
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	ab01      	add	r3, sp, #4
 800d07e:	466a      	mov	r2, sp
 800d080:	f7ff ffc9 	bl	800d016 <__swhatbuf_r>
 800d084:	9900      	ldr	r1, [sp, #0]
 800d086:	4605      	mov	r5, r0
 800d088:	4630      	mov	r0, r6
 800d08a:	f7fd fc85 	bl	800a998 <_malloc_r>
 800d08e:	b948      	cbnz	r0, 800d0a4 <__smakebuf_r+0x44>
 800d090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d094:	059a      	lsls	r2, r3, #22
 800d096:	d4ef      	bmi.n	800d078 <__smakebuf_r+0x18>
 800d098:	f023 0303 	bic.w	r3, r3, #3
 800d09c:	f043 0302 	orr.w	r3, r3, #2
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	e7e3      	b.n	800d06c <__smakebuf_r+0xc>
 800d0a4:	4b0d      	ldr	r3, [pc, #52]	; (800d0dc <__smakebuf_r+0x7c>)
 800d0a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	6020      	str	r0, [r4, #0]
 800d0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	9b00      	ldr	r3, [sp, #0]
 800d0b4:	6163      	str	r3, [r4, #20]
 800d0b6:	9b01      	ldr	r3, [sp, #4]
 800d0b8:	6120      	str	r0, [r4, #16]
 800d0ba:	b15b      	cbz	r3, 800d0d4 <__smakebuf_r+0x74>
 800d0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f000 f8c9 	bl	800d258 <_isatty_r>
 800d0c6:	b128      	cbz	r0, 800d0d4 <__smakebuf_r+0x74>
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	f043 0301 	orr.w	r3, r3, #1
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	89a0      	ldrh	r0, [r4, #12]
 800d0d6:	4305      	orrs	r5, r0
 800d0d8:	81a5      	strh	r5, [r4, #12]
 800d0da:	e7cd      	b.n	800d078 <__smakebuf_r+0x18>
 800d0dc:	0800ce75 	.word	0x0800ce75

0800d0e0 <_raise_r>:
 800d0e0:	291f      	cmp	r1, #31
 800d0e2:	b538      	push	{r3, r4, r5, lr}
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	460d      	mov	r5, r1
 800d0e8:	d904      	bls.n	800d0f4 <_raise_r+0x14>
 800d0ea:	2316      	movs	r3, #22
 800d0ec:	6003      	str	r3, [r0, #0]
 800d0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0f6:	b112      	cbz	r2, 800d0fe <_raise_r+0x1e>
 800d0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0fc:	b94b      	cbnz	r3, 800d112 <_raise_r+0x32>
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 f830 	bl	800d164 <_getpid_r>
 800d104:	462a      	mov	r2, r5
 800d106:	4601      	mov	r1, r0
 800d108:	4620      	mov	r0, r4
 800d10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d10e:	f000 b817 	b.w	800d140 <_kill_r>
 800d112:	2b01      	cmp	r3, #1
 800d114:	d00a      	beq.n	800d12c <_raise_r+0x4c>
 800d116:	1c59      	adds	r1, r3, #1
 800d118:	d103      	bne.n	800d122 <_raise_r+0x42>
 800d11a:	2316      	movs	r3, #22
 800d11c:	6003      	str	r3, [r0, #0]
 800d11e:	2001      	movs	r0, #1
 800d120:	e7e7      	b.n	800d0f2 <_raise_r+0x12>
 800d122:	2400      	movs	r4, #0
 800d124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d128:	4628      	mov	r0, r5
 800d12a:	4798      	blx	r3
 800d12c:	2000      	movs	r0, #0
 800d12e:	e7e0      	b.n	800d0f2 <_raise_r+0x12>

0800d130 <raise>:
 800d130:	4b02      	ldr	r3, [pc, #8]	; (800d13c <raise+0xc>)
 800d132:	4601      	mov	r1, r0
 800d134:	6818      	ldr	r0, [r3, #0]
 800d136:	f7ff bfd3 	b.w	800d0e0 <_raise_r>
 800d13a:	bf00      	nop
 800d13c:	20000024 	.word	0x20000024

0800d140 <_kill_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4d07      	ldr	r5, [pc, #28]	; (800d160 <_kill_r+0x20>)
 800d144:	2300      	movs	r3, #0
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	4611      	mov	r1, r2
 800d14c:	602b      	str	r3, [r5, #0]
 800d14e:	f7f6 f85b 	bl	8003208 <_kill>
 800d152:	1c43      	adds	r3, r0, #1
 800d154:	d102      	bne.n	800d15c <_kill_r+0x1c>
 800d156:	682b      	ldr	r3, [r5, #0]
 800d158:	b103      	cbz	r3, 800d15c <_kill_r+0x1c>
 800d15a:	6023      	str	r3, [r4, #0]
 800d15c:	bd38      	pop	{r3, r4, r5, pc}
 800d15e:	bf00      	nop
 800d160:	200133fc 	.word	0x200133fc

0800d164 <_getpid_r>:
 800d164:	f7f6 b848 	b.w	80031f8 <_getpid>

0800d168 <__sread>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	460c      	mov	r4, r1
 800d16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d170:	f000 f894 	bl	800d29c <_read_r>
 800d174:	2800      	cmp	r0, #0
 800d176:	bfab      	itete	ge
 800d178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d17a:	89a3      	ldrhlt	r3, [r4, #12]
 800d17c:	181b      	addge	r3, r3, r0
 800d17e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d182:	bfac      	ite	ge
 800d184:	6563      	strge	r3, [r4, #84]	; 0x54
 800d186:	81a3      	strhlt	r3, [r4, #12]
 800d188:	bd10      	pop	{r4, pc}

0800d18a <__swrite>:
 800d18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d18e:	461f      	mov	r7, r3
 800d190:	898b      	ldrh	r3, [r1, #12]
 800d192:	05db      	lsls	r3, r3, #23
 800d194:	4605      	mov	r5, r0
 800d196:	460c      	mov	r4, r1
 800d198:	4616      	mov	r6, r2
 800d19a:	d505      	bpl.n	800d1a8 <__swrite+0x1e>
 800d19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f000 f868 	bl	800d278 <_lseek_r>
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1b2:	81a3      	strh	r3, [r4, #12]
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	463b      	mov	r3, r7
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1be:	f000 b817 	b.w	800d1f0 <_write_r>

0800d1c2 <__sseek>:
 800d1c2:	b510      	push	{r4, lr}
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ca:	f000 f855 	bl	800d278 <_lseek_r>
 800d1ce:	1c43      	adds	r3, r0, #1
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	bf15      	itete	ne
 800d1d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1de:	81a3      	strheq	r3, [r4, #12]
 800d1e0:	bf18      	it	ne
 800d1e2:	81a3      	strhne	r3, [r4, #12]
 800d1e4:	bd10      	pop	{r4, pc}

0800d1e6 <__sclose>:
 800d1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ea:	f000 b813 	b.w	800d214 <_close_r>
	...

0800d1f0 <_write_r>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	4d07      	ldr	r5, [pc, #28]	; (800d210 <_write_r+0x20>)
 800d1f4:	4604      	mov	r4, r0
 800d1f6:	4608      	mov	r0, r1
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	602a      	str	r2, [r5, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	f7f6 f839 	bl	8003276 <_write>
 800d204:	1c43      	adds	r3, r0, #1
 800d206:	d102      	bne.n	800d20e <_write_r+0x1e>
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	b103      	cbz	r3, 800d20e <_write_r+0x1e>
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	bd38      	pop	{r3, r4, r5, pc}
 800d210:	200133fc 	.word	0x200133fc

0800d214 <_close_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d06      	ldr	r5, [pc, #24]	; (800d230 <_close_r+0x1c>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4604      	mov	r4, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	602b      	str	r3, [r5, #0]
 800d220:	f7f6 f845 	bl	80032ae <_close>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_close_r+0x1a>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_close_r+0x1a>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	200133fc 	.word	0x200133fc

0800d234 <_fstat_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4d07      	ldr	r5, [pc, #28]	; (800d254 <_fstat_r+0x20>)
 800d238:	2300      	movs	r3, #0
 800d23a:	4604      	mov	r4, r0
 800d23c:	4608      	mov	r0, r1
 800d23e:	4611      	mov	r1, r2
 800d240:	602b      	str	r3, [r5, #0]
 800d242:	f7f6 f840 	bl	80032c6 <_fstat>
 800d246:	1c43      	adds	r3, r0, #1
 800d248:	d102      	bne.n	800d250 <_fstat_r+0x1c>
 800d24a:	682b      	ldr	r3, [r5, #0]
 800d24c:	b103      	cbz	r3, 800d250 <_fstat_r+0x1c>
 800d24e:	6023      	str	r3, [r4, #0]
 800d250:	bd38      	pop	{r3, r4, r5, pc}
 800d252:	bf00      	nop
 800d254:	200133fc 	.word	0x200133fc

0800d258 <_isatty_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4d06      	ldr	r5, [pc, #24]	; (800d274 <_isatty_r+0x1c>)
 800d25c:	2300      	movs	r3, #0
 800d25e:	4604      	mov	r4, r0
 800d260:	4608      	mov	r0, r1
 800d262:	602b      	str	r3, [r5, #0]
 800d264:	f7f6 f83f 	bl	80032e6 <_isatty>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d102      	bne.n	800d272 <_isatty_r+0x1a>
 800d26c:	682b      	ldr	r3, [r5, #0]
 800d26e:	b103      	cbz	r3, 800d272 <_isatty_r+0x1a>
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	bd38      	pop	{r3, r4, r5, pc}
 800d274:	200133fc 	.word	0x200133fc

0800d278 <_lseek_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d07      	ldr	r5, [pc, #28]	; (800d298 <_lseek_r+0x20>)
 800d27c:	4604      	mov	r4, r0
 800d27e:	4608      	mov	r0, r1
 800d280:	4611      	mov	r1, r2
 800d282:	2200      	movs	r2, #0
 800d284:	602a      	str	r2, [r5, #0]
 800d286:	461a      	mov	r2, r3
 800d288:	f7f6 f838 	bl	80032fc <_lseek>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_lseek_r+0x1e>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_lseek_r+0x1e>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	200133fc 	.word	0x200133fc

0800d29c <_read_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4d07      	ldr	r5, [pc, #28]	; (800d2bc <_read_r+0x20>)
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	4608      	mov	r0, r1
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	602a      	str	r2, [r5, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	f7f5 ffc6 	bl	800323c <_read>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d102      	bne.n	800d2ba <_read_r+0x1e>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	b103      	cbz	r3, 800d2ba <_read_r+0x1e>
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
 800d2bc:	200133fc 	.word	0x200133fc

0800d2c0 <cos>:
 800d2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2c2:	ec53 2b10 	vmov	r2, r3, d0
 800d2c6:	4826      	ldr	r0, [pc, #152]	; (800d360 <cos+0xa0>)
 800d2c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2cc:	4281      	cmp	r1, r0
 800d2ce:	dc06      	bgt.n	800d2de <cos+0x1e>
 800d2d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d358 <cos+0x98>
 800d2d4:	b005      	add	sp, #20
 800d2d6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2da:	f001 ba41 	b.w	800e760 <__kernel_cos>
 800d2de:	4821      	ldr	r0, [pc, #132]	; (800d364 <cos+0xa4>)
 800d2e0:	4281      	cmp	r1, r0
 800d2e2:	dd09      	ble.n	800d2f8 <cos+0x38>
 800d2e4:	ee10 0a10 	vmov	r0, s0
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	f7f2 ffe5 	bl	80002b8 <__aeabi_dsub>
 800d2ee:	ec41 0b10 	vmov	d0, r0, r1
 800d2f2:	b005      	add	sp, #20
 800d2f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2f8:	4668      	mov	r0, sp
 800d2fa:	f000 ff71 	bl	800e1e0 <__ieee754_rem_pio2>
 800d2fe:	f000 0003 	and.w	r0, r0, #3
 800d302:	2801      	cmp	r0, #1
 800d304:	d00b      	beq.n	800d31e <cos+0x5e>
 800d306:	2802      	cmp	r0, #2
 800d308:	d016      	beq.n	800d338 <cos+0x78>
 800d30a:	b9e0      	cbnz	r0, 800d346 <cos+0x86>
 800d30c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d310:	ed9d 0b00 	vldr	d0, [sp]
 800d314:	f001 fa24 	bl	800e760 <__kernel_cos>
 800d318:	ec51 0b10 	vmov	r0, r1, d0
 800d31c:	e7e7      	b.n	800d2ee <cos+0x2e>
 800d31e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d322:	ed9d 0b00 	vldr	d0, [sp]
 800d326:	f001 fe33 	bl	800ef90 <__kernel_sin>
 800d32a:	ec53 2b10 	vmov	r2, r3, d0
 800d32e:	ee10 0a10 	vmov	r0, s0
 800d332:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d336:	e7da      	b.n	800d2ee <cos+0x2e>
 800d338:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d33c:	ed9d 0b00 	vldr	d0, [sp]
 800d340:	f001 fa0e 	bl	800e760 <__kernel_cos>
 800d344:	e7f1      	b.n	800d32a <cos+0x6a>
 800d346:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d34a:	ed9d 0b00 	vldr	d0, [sp]
 800d34e:	2001      	movs	r0, #1
 800d350:	f001 fe1e 	bl	800ef90 <__kernel_sin>
 800d354:	e7e0      	b.n	800d318 <cos+0x58>
 800d356:	bf00      	nop
	...
 800d360:	3fe921fb 	.word	0x3fe921fb
 800d364:	7fefffff 	.word	0x7fefffff

0800d368 <round>:
 800d368:	ec51 0b10 	vmov	r0, r1, d0
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d372:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d376:	2c13      	cmp	r4, #19
 800d378:	ee10 2a10 	vmov	r2, s0
 800d37c:	460b      	mov	r3, r1
 800d37e:	dc19      	bgt.n	800d3b4 <round+0x4c>
 800d380:	2c00      	cmp	r4, #0
 800d382:	da09      	bge.n	800d398 <round+0x30>
 800d384:	3401      	adds	r4, #1
 800d386:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d38a:	d103      	bne.n	800d394 <round+0x2c>
 800d38c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d390:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d394:	2200      	movs	r2, #0
 800d396:	e028      	b.n	800d3ea <round+0x82>
 800d398:	4d15      	ldr	r5, [pc, #84]	; (800d3f0 <round+0x88>)
 800d39a:	4125      	asrs	r5, r4
 800d39c:	ea01 0605 	and.w	r6, r1, r5
 800d3a0:	4332      	orrs	r2, r6
 800d3a2:	d00e      	beq.n	800d3c2 <round+0x5a>
 800d3a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d3a8:	fa42 f404 	asr.w	r4, r2, r4
 800d3ac:	4423      	add	r3, r4
 800d3ae:	ea23 0305 	bic.w	r3, r3, r5
 800d3b2:	e7ef      	b.n	800d394 <round+0x2c>
 800d3b4:	2c33      	cmp	r4, #51	; 0x33
 800d3b6:	dd07      	ble.n	800d3c8 <round+0x60>
 800d3b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d3bc:	d101      	bne.n	800d3c2 <round+0x5a>
 800d3be:	f7f2 ff7d 	bl	80002bc <__adddf3>
 800d3c2:	ec41 0b10 	vmov	d0, r0, r1
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}
 800d3c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d3cc:	f04f 35ff 	mov.w	r5, #4294967295
 800d3d0:	40f5      	lsrs	r5, r6
 800d3d2:	4228      	tst	r0, r5
 800d3d4:	d0f5      	beq.n	800d3c2 <round+0x5a>
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d3dc:	fa01 f404 	lsl.w	r4, r1, r4
 800d3e0:	1912      	adds	r2, r2, r4
 800d3e2:	bf28      	it	cs
 800d3e4:	185b      	addcs	r3, r3, r1
 800d3e6:	ea22 0205 	bic.w	r2, r2, r5
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	e7e8      	b.n	800d3c2 <round+0x5a>
 800d3f0:	000fffff 	.word	0x000fffff
 800d3f4:	00000000 	.word	0x00000000

0800d3f8 <sin>:
 800d3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3fa:	ec53 2b10 	vmov	r2, r3, d0
 800d3fe:	4828      	ldr	r0, [pc, #160]	; (800d4a0 <sin+0xa8>)
 800d400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d404:	4281      	cmp	r1, r0
 800d406:	dc07      	bgt.n	800d418 <sin+0x20>
 800d408:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d498 <sin+0xa0>
 800d40c:	2000      	movs	r0, #0
 800d40e:	b005      	add	sp, #20
 800d410:	f85d eb04 	ldr.w	lr, [sp], #4
 800d414:	f001 bdbc 	b.w	800ef90 <__kernel_sin>
 800d418:	4822      	ldr	r0, [pc, #136]	; (800d4a4 <sin+0xac>)
 800d41a:	4281      	cmp	r1, r0
 800d41c:	dd09      	ble.n	800d432 <sin+0x3a>
 800d41e:	ee10 0a10 	vmov	r0, s0
 800d422:	4619      	mov	r1, r3
 800d424:	f7f2 ff48 	bl	80002b8 <__aeabi_dsub>
 800d428:	ec41 0b10 	vmov	d0, r0, r1
 800d42c:	b005      	add	sp, #20
 800d42e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d432:	4668      	mov	r0, sp
 800d434:	f000 fed4 	bl	800e1e0 <__ieee754_rem_pio2>
 800d438:	f000 0003 	and.w	r0, r0, #3
 800d43c:	2801      	cmp	r0, #1
 800d43e:	d00c      	beq.n	800d45a <sin+0x62>
 800d440:	2802      	cmp	r0, #2
 800d442:	d011      	beq.n	800d468 <sin+0x70>
 800d444:	b9f0      	cbnz	r0, 800d484 <sin+0x8c>
 800d446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d44a:	ed9d 0b00 	vldr	d0, [sp]
 800d44e:	2001      	movs	r0, #1
 800d450:	f001 fd9e 	bl	800ef90 <__kernel_sin>
 800d454:	ec51 0b10 	vmov	r0, r1, d0
 800d458:	e7e6      	b.n	800d428 <sin+0x30>
 800d45a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d45e:	ed9d 0b00 	vldr	d0, [sp]
 800d462:	f001 f97d 	bl	800e760 <__kernel_cos>
 800d466:	e7f5      	b.n	800d454 <sin+0x5c>
 800d468:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d46c:	ed9d 0b00 	vldr	d0, [sp]
 800d470:	2001      	movs	r0, #1
 800d472:	f001 fd8d 	bl	800ef90 <__kernel_sin>
 800d476:	ec53 2b10 	vmov	r2, r3, d0
 800d47a:	ee10 0a10 	vmov	r0, s0
 800d47e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d482:	e7d1      	b.n	800d428 <sin+0x30>
 800d484:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d488:	ed9d 0b00 	vldr	d0, [sp]
 800d48c:	f001 f968 	bl	800e760 <__kernel_cos>
 800d490:	e7f1      	b.n	800d476 <sin+0x7e>
 800d492:	bf00      	nop
 800d494:	f3af 8000 	nop.w
	...
 800d4a0:	3fe921fb 	.word	0x3fe921fb
 800d4a4:	7fefffff 	.word	0x7fefffff

0800d4a8 <atan2>:
 800d4a8:	f000 b89e 	b.w	800d5e8 <__ieee754_atan2>

0800d4ac <pow>:
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	ed2d 8b02 	vpush	{d8}
 800d4b2:	eeb0 8a40 	vmov.f32	s16, s0
 800d4b6:	eef0 8a60 	vmov.f32	s17, s1
 800d4ba:	ec55 4b11 	vmov	r4, r5, d1
 800d4be:	f000 f95f 	bl	800d780 <__ieee754_pow>
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	462b      	mov	r3, r5
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	ec57 6b10 	vmov	r6, r7, d0
 800d4ce:	f7f3 fb45 	bl	8000b5c <__aeabi_dcmpun>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d13b      	bne.n	800d54e <pow+0xa2>
 800d4d6:	ec51 0b18 	vmov	r0, r1, d8
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f7f3 fb0b 	bl	8000af8 <__aeabi_dcmpeq>
 800d4e2:	b1b8      	cbz	r0, 800d514 <pow+0x68>
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	f7f3 fb04 	bl	8000af8 <__aeabi_dcmpeq>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d146      	bne.n	800d582 <pow+0xd6>
 800d4f4:	ec45 4b10 	vmov	d0, r4, r5
 800d4f8:	f001 ffe3 	bl	800f4c2 <finite>
 800d4fc:	b338      	cbz	r0, 800d54e <pow+0xa2>
 800d4fe:	2200      	movs	r2, #0
 800d500:	2300      	movs	r3, #0
 800d502:	4620      	mov	r0, r4
 800d504:	4629      	mov	r1, r5
 800d506:	f7f3 fb01 	bl	8000b0c <__aeabi_dcmplt>
 800d50a:	b300      	cbz	r0, 800d54e <pow+0xa2>
 800d50c:	f7fd f990 	bl	800a830 <__errno>
 800d510:	2322      	movs	r3, #34	; 0x22
 800d512:	e01b      	b.n	800d54c <pow+0xa0>
 800d514:	ec47 6b10 	vmov	d0, r6, r7
 800d518:	f001 ffd3 	bl	800f4c2 <finite>
 800d51c:	b9e0      	cbnz	r0, 800d558 <pow+0xac>
 800d51e:	eeb0 0a48 	vmov.f32	s0, s16
 800d522:	eef0 0a68 	vmov.f32	s1, s17
 800d526:	f001 ffcc 	bl	800f4c2 <finite>
 800d52a:	b1a8      	cbz	r0, 800d558 <pow+0xac>
 800d52c:	ec45 4b10 	vmov	d0, r4, r5
 800d530:	f001 ffc7 	bl	800f4c2 <finite>
 800d534:	b180      	cbz	r0, 800d558 <pow+0xac>
 800d536:	4632      	mov	r2, r6
 800d538:	463b      	mov	r3, r7
 800d53a:	4630      	mov	r0, r6
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f3 fb0d 	bl	8000b5c <__aeabi_dcmpun>
 800d542:	2800      	cmp	r0, #0
 800d544:	d0e2      	beq.n	800d50c <pow+0x60>
 800d546:	f7fd f973 	bl	800a830 <__errno>
 800d54a:	2321      	movs	r3, #33	; 0x21
 800d54c:	6003      	str	r3, [r0, #0]
 800d54e:	ecbd 8b02 	vpop	{d8}
 800d552:	ec47 6b10 	vmov	d0, r6, r7
 800d556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d558:	2200      	movs	r2, #0
 800d55a:	2300      	movs	r3, #0
 800d55c:	4630      	mov	r0, r6
 800d55e:	4639      	mov	r1, r7
 800d560:	f7f3 faca 	bl	8000af8 <__aeabi_dcmpeq>
 800d564:	2800      	cmp	r0, #0
 800d566:	d0f2      	beq.n	800d54e <pow+0xa2>
 800d568:	eeb0 0a48 	vmov.f32	s0, s16
 800d56c:	eef0 0a68 	vmov.f32	s1, s17
 800d570:	f001 ffa7 	bl	800f4c2 <finite>
 800d574:	2800      	cmp	r0, #0
 800d576:	d0ea      	beq.n	800d54e <pow+0xa2>
 800d578:	ec45 4b10 	vmov	d0, r4, r5
 800d57c:	f001 ffa1 	bl	800f4c2 <finite>
 800d580:	e7c3      	b.n	800d50a <pow+0x5e>
 800d582:	4f01      	ldr	r7, [pc, #4]	; (800d588 <pow+0xdc>)
 800d584:	2600      	movs	r6, #0
 800d586:	e7e2      	b.n	800d54e <pow+0xa2>
 800d588:	3ff00000 	.word	0x3ff00000

0800d58c <sqrt>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	ed2d 8b02 	vpush	{d8}
 800d592:	ec55 4b10 	vmov	r4, r5, d0
 800d596:	f001 f82f 	bl	800e5f8 <__ieee754_sqrt>
 800d59a:	4622      	mov	r2, r4
 800d59c:	462b      	mov	r3, r5
 800d59e:	4620      	mov	r0, r4
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	eeb0 8a40 	vmov.f32	s16, s0
 800d5a6:	eef0 8a60 	vmov.f32	s17, s1
 800d5aa:	f7f3 fad7 	bl	8000b5c <__aeabi_dcmpun>
 800d5ae:	b990      	cbnz	r0, 800d5d6 <sqrt+0x4a>
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	f7f3 faa8 	bl	8000b0c <__aeabi_dcmplt>
 800d5bc:	b158      	cbz	r0, 800d5d6 <sqrt+0x4a>
 800d5be:	f7fd f937 	bl	800a830 <__errno>
 800d5c2:	2321      	movs	r3, #33	; 0x21
 800d5c4:	6003      	str	r3, [r0, #0]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	f7f3 f955 	bl	800087c <__aeabi_ddiv>
 800d5d2:	ec41 0b18 	vmov	d8, r0, r1
 800d5d6:	eeb0 0a48 	vmov.f32	s0, s16
 800d5da:	eef0 0a68 	vmov.f32	s1, s17
 800d5de:	ecbd 8b02 	vpop	{d8}
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	0000      	movs	r0, r0
	...

0800d5e8 <__ieee754_atan2>:
 800d5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	ec57 6b11 	vmov	r6, r7, d1
 800d5f0:	4273      	negs	r3, r6
 800d5f2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d778 <__ieee754_atan2+0x190>
 800d5f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d5fa:	4333      	orrs	r3, r6
 800d5fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d600:	4573      	cmp	r3, lr
 800d602:	ec51 0b10 	vmov	r0, r1, d0
 800d606:	ee11 8a10 	vmov	r8, s2
 800d60a:	d80a      	bhi.n	800d622 <__ieee754_atan2+0x3a>
 800d60c:	4244      	negs	r4, r0
 800d60e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d612:	4304      	orrs	r4, r0
 800d614:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d618:	4574      	cmp	r4, lr
 800d61a:	ee10 9a10 	vmov	r9, s0
 800d61e:	468c      	mov	ip, r1
 800d620:	d907      	bls.n	800d632 <__ieee754_atan2+0x4a>
 800d622:	4632      	mov	r2, r6
 800d624:	463b      	mov	r3, r7
 800d626:	f7f2 fe49 	bl	80002bc <__adddf3>
 800d62a:	ec41 0b10 	vmov	d0, r0, r1
 800d62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d632:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d636:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d63a:	4334      	orrs	r4, r6
 800d63c:	d103      	bne.n	800d646 <__ieee754_atan2+0x5e>
 800d63e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d642:	f001 bd95 	b.w	800f170 <atan>
 800d646:	17bc      	asrs	r4, r7, #30
 800d648:	f004 0402 	and.w	r4, r4, #2
 800d64c:	ea53 0909 	orrs.w	r9, r3, r9
 800d650:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d654:	d107      	bne.n	800d666 <__ieee754_atan2+0x7e>
 800d656:	2c02      	cmp	r4, #2
 800d658:	d060      	beq.n	800d71c <__ieee754_atan2+0x134>
 800d65a:	2c03      	cmp	r4, #3
 800d65c:	d1e5      	bne.n	800d62a <__ieee754_atan2+0x42>
 800d65e:	a142      	add	r1, pc, #264	; (adr r1, 800d768 <__ieee754_atan2+0x180>)
 800d660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d664:	e7e1      	b.n	800d62a <__ieee754_atan2+0x42>
 800d666:	ea52 0808 	orrs.w	r8, r2, r8
 800d66a:	d106      	bne.n	800d67a <__ieee754_atan2+0x92>
 800d66c:	f1bc 0f00 	cmp.w	ip, #0
 800d670:	da5f      	bge.n	800d732 <__ieee754_atan2+0x14a>
 800d672:	a13f      	add	r1, pc, #252	; (adr r1, 800d770 <__ieee754_atan2+0x188>)
 800d674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d678:	e7d7      	b.n	800d62a <__ieee754_atan2+0x42>
 800d67a:	4572      	cmp	r2, lr
 800d67c:	d10f      	bne.n	800d69e <__ieee754_atan2+0xb6>
 800d67e:	4293      	cmp	r3, r2
 800d680:	f104 34ff 	add.w	r4, r4, #4294967295
 800d684:	d107      	bne.n	800d696 <__ieee754_atan2+0xae>
 800d686:	2c02      	cmp	r4, #2
 800d688:	d84c      	bhi.n	800d724 <__ieee754_atan2+0x13c>
 800d68a:	4b35      	ldr	r3, [pc, #212]	; (800d760 <__ieee754_atan2+0x178>)
 800d68c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d690:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d694:	e7c9      	b.n	800d62a <__ieee754_atan2+0x42>
 800d696:	2c02      	cmp	r4, #2
 800d698:	d848      	bhi.n	800d72c <__ieee754_atan2+0x144>
 800d69a:	4b32      	ldr	r3, [pc, #200]	; (800d764 <__ieee754_atan2+0x17c>)
 800d69c:	e7f6      	b.n	800d68c <__ieee754_atan2+0xa4>
 800d69e:	4573      	cmp	r3, lr
 800d6a0:	d0e4      	beq.n	800d66c <__ieee754_atan2+0x84>
 800d6a2:	1a9b      	subs	r3, r3, r2
 800d6a4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d6a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6ac:	da1e      	bge.n	800d6ec <__ieee754_atan2+0x104>
 800d6ae:	2f00      	cmp	r7, #0
 800d6b0:	da01      	bge.n	800d6b6 <__ieee754_atan2+0xce>
 800d6b2:	323c      	adds	r2, #60	; 0x3c
 800d6b4:	db1e      	blt.n	800d6f4 <__ieee754_atan2+0x10c>
 800d6b6:	4632      	mov	r2, r6
 800d6b8:	463b      	mov	r3, r7
 800d6ba:	f7f3 f8df 	bl	800087c <__aeabi_ddiv>
 800d6be:	ec41 0b10 	vmov	d0, r0, r1
 800d6c2:	f001 fef5 	bl	800f4b0 <fabs>
 800d6c6:	f001 fd53 	bl	800f170 <atan>
 800d6ca:	ec51 0b10 	vmov	r0, r1, d0
 800d6ce:	2c01      	cmp	r4, #1
 800d6d0:	d013      	beq.n	800d6fa <__ieee754_atan2+0x112>
 800d6d2:	2c02      	cmp	r4, #2
 800d6d4:	d015      	beq.n	800d702 <__ieee754_atan2+0x11a>
 800d6d6:	2c00      	cmp	r4, #0
 800d6d8:	d0a7      	beq.n	800d62a <__ieee754_atan2+0x42>
 800d6da:	a319      	add	r3, pc, #100	; (adr r3, 800d740 <__ieee754_atan2+0x158>)
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	f7f2 fdea 	bl	80002b8 <__aeabi_dsub>
 800d6e4:	a318      	add	r3, pc, #96	; (adr r3, 800d748 <__ieee754_atan2+0x160>)
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	e014      	b.n	800d716 <__ieee754_atan2+0x12e>
 800d6ec:	a118      	add	r1, pc, #96	; (adr r1, 800d750 <__ieee754_atan2+0x168>)
 800d6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f2:	e7ec      	b.n	800d6ce <__ieee754_atan2+0xe6>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	e7e9      	b.n	800d6ce <__ieee754_atan2+0xe6>
 800d6fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6fe:	4619      	mov	r1, r3
 800d700:	e793      	b.n	800d62a <__ieee754_atan2+0x42>
 800d702:	a30f      	add	r3, pc, #60	; (adr r3, 800d740 <__ieee754_atan2+0x158>)
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	f7f2 fdd6 	bl	80002b8 <__aeabi_dsub>
 800d70c:	4602      	mov	r2, r0
 800d70e:	460b      	mov	r3, r1
 800d710:	a10d      	add	r1, pc, #52	; (adr r1, 800d748 <__ieee754_atan2+0x160>)
 800d712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d716:	f7f2 fdcf 	bl	80002b8 <__aeabi_dsub>
 800d71a:	e786      	b.n	800d62a <__ieee754_atan2+0x42>
 800d71c:	a10a      	add	r1, pc, #40	; (adr r1, 800d748 <__ieee754_atan2+0x160>)
 800d71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d722:	e782      	b.n	800d62a <__ieee754_atan2+0x42>
 800d724:	a10c      	add	r1, pc, #48	; (adr r1, 800d758 <__ieee754_atan2+0x170>)
 800d726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d72a:	e77e      	b.n	800d62a <__ieee754_atan2+0x42>
 800d72c:	2000      	movs	r0, #0
 800d72e:	2100      	movs	r1, #0
 800d730:	e77b      	b.n	800d62a <__ieee754_atan2+0x42>
 800d732:	a107      	add	r1, pc, #28	; (adr r1, 800d750 <__ieee754_atan2+0x168>)
 800d734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d738:	e777      	b.n	800d62a <__ieee754_atan2+0x42>
 800d73a:	bf00      	nop
 800d73c:	f3af 8000 	nop.w
 800d740:	33145c07 	.word	0x33145c07
 800d744:	3ca1a626 	.word	0x3ca1a626
 800d748:	54442d18 	.word	0x54442d18
 800d74c:	400921fb 	.word	0x400921fb
 800d750:	54442d18 	.word	0x54442d18
 800d754:	3ff921fb 	.word	0x3ff921fb
 800d758:	54442d18 	.word	0x54442d18
 800d75c:	3fe921fb 	.word	0x3fe921fb
 800d760:	0800fd40 	.word	0x0800fd40
 800d764:	0800fd58 	.word	0x0800fd58
 800d768:	54442d18 	.word	0x54442d18
 800d76c:	c00921fb 	.word	0xc00921fb
 800d770:	54442d18 	.word	0x54442d18
 800d774:	bff921fb 	.word	0xbff921fb
 800d778:	7ff00000 	.word	0x7ff00000
 800d77c:	00000000 	.word	0x00000000

0800d780 <__ieee754_pow>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	ed2d 8b06 	vpush	{d8-d10}
 800d788:	b089      	sub	sp, #36	; 0x24
 800d78a:	ed8d 1b00 	vstr	d1, [sp]
 800d78e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d792:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d796:	ea58 0102 	orrs.w	r1, r8, r2
 800d79a:	ec57 6b10 	vmov	r6, r7, d0
 800d79e:	d115      	bne.n	800d7cc <__ieee754_pow+0x4c>
 800d7a0:	19b3      	adds	r3, r6, r6
 800d7a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d7a6:	4152      	adcs	r2, r2
 800d7a8:	4299      	cmp	r1, r3
 800d7aa:	4b89      	ldr	r3, [pc, #548]	; (800d9d0 <__ieee754_pow+0x250>)
 800d7ac:	4193      	sbcs	r3, r2
 800d7ae:	f080 84d2 	bcs.w	800e156 <__ieee754_pow+0x9d6>
 800d7b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f2 fd7f 	bl	80002bc <__adddf3>
 800d7be:	ec41 0b10 	vmov	d0, r0, r1
 800d7c2:	b009      	add	sp, #36	; 0x24
 800d7c4:	ecbd 8b06 	vpop	{d8-d10}
 800d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7cc:	4b81      	ldr	r3, [pc, #516]	; (800d9d4 <__ieee754_pow+0x254>)
 800d7ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d7d2:	429c      	cmp	r4, r3
 800d7d4:	ee10 aa10 	vmov	sl, s0
 800d7d8:	463d      	mov	r5, r7
 800d7da:	dc06      	bgt.n	800d7ea <__ieee754_pow+0x6a>
 800d7dc:	d101      	bne.n	800d7e2 <__ieee754_pow+0x62>
 800d7de:	2e00      	cmp	r6, #0
 800d7e0:	d1e7      	bne.n	800d7b2 <__ieee754_pow+0x32>
 800d7e2:	4598      	cmp	r8, r3
 800d7e4:	dc01      	bgt.n	800d7ea <__ieee754_pow+0x6a>
 800d7e6:	d10f      	bne.n	800d808 <__ieee754_pow+0x88>
 800d7e8:	b172      	cbz	r2, 800d808 <__ieee754_pow+0x88>
 800d7ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d7ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d7f2:	ea55 050a 	orrs.w	r5, r5, sl
 800d7f6:	d1dc      	bne.n	800d7b2 <__ieee754_pow+0x32>
 800d7f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7fc:	18db      	adds	r3, r3, r3
 800d7fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d802:	4152      	adcs	r2, r2
 800d804:	429d      	cmp	r5, r3
 800d806:	e7d0      	b.n	800d7aa <__ieee754_pow+0x2a>
 800d808:	2d00      	cmp	r5, #0
 800d80a:	da3b      	bge.n	800d884 <__ieee754_pow+0x104>
 800d80c:	4b72      	ldr	r3, [pc, #456]	; (800d9d8 <__ieee754_pow+0x258>)
 800d80e:	4598      	cmp	r8, r3
 800d810:	dc51      	bgt.n	800d8b6 <__ieee754_pow+0x136>
 800d812:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d816:	4598      	cmp	r8, r3
 800d818:	f340 84ac 	ble.w	800e174 <__ieee754_pow+0x9f4>
 800d81c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d820:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d824:	2b14      	cmp	r3, #20
 800d826:	dd0f      	ble.n	800d848 <__ieee754_pow+0xc8>
 800d828:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d82c:	fa22 f103 	lsr.w	r1, r2, r3
 800d830:	fa01 f303 	lsl.w	r3, r1, r3
 800d834:	4293      	cmp	r3, r2
 800d836:	f040 849d 	bne.w	800e174 <__ieee754_pow+0x9f4>
 800d83a:	f001 0101 	and.w	r1, r1, #1
 800d83e:	f1c1 0302 	rsb	r3, r1, #2
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	b182      	cbz	r2, 800d868 <__ieee754_pow+0xe8>
 800d846:	e05f      	b.n	800d908 <__ieee754_pow+0x188>
 800d848:	2a00      	cmp	r2, #0
 800d84a:	d15b      	bne.n	800d904 <__ieee754_pow+0x184>
 800d84c:	f1c3 0314 	rsb	r3, r3, #20
 800d850:	fa48 f103 	asr.w	r1, r8, r3
 800d854:	fa01 f303 	lsl.w	r3, r1, r3
 800d858:	4543      	cmp	r3, r8
 800d85a:	f040 8488 	bne.w	800e16e <__ieee754_pow+0x9ee>
 800d85e:	f001 0101 	and.w	r1, r1, #1
 800d862:	f1c1 0302 	rsb	r3, r1, #2
 800d866:	9304      	str	r3, [sp, #16]
 800d868:	4b5c      	ldr	r3, [pc, #368]	; (800d9dc <__ieee754_pow+0x25c>)
 800d86a:	4598      	cmp	r8, r3
 800d86c:	d132      	bne.n	800d8d4 <__ieee754_pow+0x154>
 800d86e:	f1b9 0f00 	cmp.w	r9, #0
 800d872:	f280 8478 	bge.w	800e166 <__ieee754_pow+0x9e6>
 800d876:	4959      	ldr	r1, [pc, #356]	; (800d9dc <__ieee754_pow+0x25c>)
 800d878:	4632      	mov	r2, r6
 800d87a:	463b      	mov	r3, r7
 800d87c:	2000      	movs	r0, #0
 800d87e:	f7f2 fffd 	bl	800087c <__aeabi_ddiv>
 800d882:	e79c      	b.n	800d7be <__ieee754_pow+0x3e>
 800d884:	2300      	movs	r3, #0
 800d886:	9304      	str	r3, [sp, #16]
 800d888:	2a00      	cmp	r2, #0
 800d88a:	d13d      	bne.n	800d908 <__ieee754_pow+0x188>
 800d88c:	4b51      	ldr	r3, [pc, #324]	; (800d9d4 <__ieee754_pow+0x254>)
 800d88e:	4598      	cmp	r8, r3
 800d890:	d1ea      	bne.n	800d868 <__ieee754_pow+0xe8>
 800d892:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d896:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d89a:	ea53 030a 	orrs.w	r3, r3, sl
 800d89e:	f000 845a 	beq.w	800e156 <__ieee754_pow+0x9d6>
 800d8a2:	4b4f      	ldr	r3, [pc, #316]	; (800d9e0 <__ieee754_pow+0x260>)
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	dd08      	ble.n	800d8ba <__ieee754_pow+0x13a>
 800d8a8:	f1b9 0f00 	cmp.w	r9, #0
 800d8ac:	f2c0 8457 	blt.w	800e15e <__ieee754_pow+0x9de>
 800d8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8b4:	e783      	b.n	800d7be <__ieee754_pow+0x3e>
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	e7e5      	b.n	800d886 <__ieee754_pow+0x106>
 800d8ba:	f1b9 0f00 	cmp.w	r9, #0
 800d8be:	f04f 0000 	mov.w	r0, #0
 800d8c2:	f04f 0100 	mov.w	r1, #0
 800d8c6:	f6bf af7a 	bge.w	800d7be <__ieee754_pow+0x3e>
 800d8ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d8ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d8d2:	e774      	b.n	800d7be <__ieee754_pow+0x3e>
 800d8d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d8d8:	d106      	bne.n	800d8e8 <__ieee754_pow+0x168>
 800d8da:	4632      	mov	r2, r6
 800d8dc:	463b      	mov	r3, r7
 800d8de:	4630      	mov	r0, r6
 800d8e0:	4639      	mov	r1, r7
 800d8e2:	f7f2 fea1 	bl	8000628 <__aeabi_dmul>
 800d8e6:	e76a      	b.n	800d7be <__ieee754_pow+0x3e>
 800d8e8:	4b3e      	ldr	r3, [pc, #248]	; (800d9e4 <__ieee754_pow+0x264>)
 800d8ea:	4599      	cmp	r9, r3
 800d8ec:	d10c      	bne.n	800d908 <__ieee754_pow+0x188>
 800d8ee:	2d00      	cmp	r5, #0
 800d8f0:	db0a      	blt.n	800d908 <__ieee754_pow+0x188>
 800d8f2:	ec47 6b10 	vmov	d0, r6, r7
 800d8f6:	b009      	add	sp, #36	; 0x24
 800d8f8:	ecbd 8b06 	vpop	{d8-d10}
 800d8fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	f000 be7a 	b.w	800e5f8 <__ieee754_sqrt>
 800d904:	2300      	movs	r3, #0
 800d906:	9304      	str	r3, [sp, #16]
 800d908:	ec47 6b10 	vmov	d0, r6, r7
 800d90c:	f001 fdd0 	bl	800f4b0 <fabs>
 800d910:	ec51 0b10 	vmov	r0, r1, d0
 800d914:	f1ba 0f00 	cmp.w	sl, #0
 800d918:	d129      	bne.n	800d96e <__ieee754_pow+0x1ee>
 800d91a:	b124      	cbz	r4, 800d926 <__ieee754_pow+0x1a6>
 800d91c:	4b2f      	ldr	r3, [pc, #188]	; (800d9dc <__ieee754_pow+0x25c>)
 800d91e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d922:	429a      	cmp	r2, r3
 800d924:	d123      	bne.n	800d96e <__ieee754_pow+0x1ee>
 800d926:	f1b9 0f00 	cmp.w	r9, #0
 800d92a:	da05      	bge.n	800d938 <__ieee754_pow+0x1b8>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	2000      	movs	r0, #0
 800d932:	492a      	ldr	r1, [pc, #168]	; (800d9dc <__ieee754_pow+0x25c>)
 800d934:	f7f2 ffa2 	bl	800087c <__aeabi_ddiv>
 800d938:	2d00      	cmp	r5, #0
 800d93a:	f6bf af40 	bge.w	800d7be <__ieee754_pow+0x3e>
 800d93e:	9b04      	ldr	r3, [sp, #16]
 800d940:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d944:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d948:	4323      	orrs	r3, r4
 800d94a:	d108      	bne.n	800d95e <__ieee754_pow+0x1de>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4610      	mov	r0, r2
 800d952:	4619      	mov	r1, r3
 800d954:	f7f2 fcb0 	bl	80002b8 <__aeabi_dsub>
 800d958:	4602      	mov	r2, r0
 800d95a:	460b      	mov	r3, r1
 800d95c:	e78f      	b.n	800d87e <__ieee754_pow+0xfe>
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	2b01      	cmp	r3, #1
 800d962:	f47f af2c 	bne.w	800d7be <__ieee754_pow+0x3e>
 800d966:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d96a:	4619      	mov	r1, r3
 800d96c:	e727      	b.n	800d7be <__ieee754_pow+0x3e>
 800d96e:	0feb      	lsrs	r3, r5, #31
 800d970:	3b01      	subs	r3, #1
 800d972:	9306      	str	r3, [sp, #24]
 800d974:	9a06      	ldr	r2, [sp, #24]
 800d976:	9b04      	ldr	r3, [sp, #16]
 800d978:	4313      	orrs	r3, r2
 800d97a:	d102      	bne.n	800d982 <__ieee754_pow+0x202>
 800d97c:	4632      	mov	r2, r6
 800d97e:	463b      	mov	r3, r7
 800d980:	e7e6      	b.n	800d950 <__ieee754_pow+0x1d0>
 800d982:	4b19      	ldr	r3, [pc, #100]	; (800d9e8 <__ieee754_pow+0x268>)
 800d984:	4598      	cmp	r8, r3
 800d986:	f340 80fb 	ble.w	800db80 <__ieee754_pow+0x400>
 800d98a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d98e:	4598      	cmp	r8, r3
 800d990:	4b13      	ldr	r3, [pc, #76]	; (800d9e0 <__ieee754_pow+0x260>)
 800d992:	dd0c      	ble.n	800d9ae <__ieee754_pow+0x22e>
 800d994:	429c      	cmp	r4, r3
 800d996:	dc0f      	bgt.n	800d9b8 <__ieee754_pow+0x238>
 800d998:	f1b9 0f00 	cmp.w	r9, #0
 800d99c:	da0f      	bge.n	800d9be <__ieee754_pow+0x23e>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	b009      	add	sp, #36	; 0x24
 800d9a2:	ecbd 8b06 	vpop	{d8-d10}
 800d9a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9aa:	f001 bbd6 	b.w	800f15a <__math_oflow>
 800d9ae:	429c      	cmp	r4, r3
 800d9b0:	dbf2      	blt.n	800d998 <__ieee754_pow+0x218>
 800d9b2:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <__ieee754_pow+0x25c>)
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	dd19      	ble.n	800d9ec <__ieee754_pow+0x26c>
 800d9b8:	f1b9 0f00 	cmp.w	r9, #0
 800d9bc:	dcef      	bgt.n	800d99e <__ieee754_pow+0x21e>
 800d9be:	2000      	movs	r0, #0
 800d9c0:	b009      	add	sp, #36	; 0x24
 800d9c2:	ecbd 8b06 	vpop	{d8-d10}
 800d9c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ca:	f001 bbbd 	b.w	800f148 <__math_uflow>
 800d9ce:	bf00      	nop
 800d9d0:	fff00000 	.word	0xfff00000
 800d9d4:	7ff00000 	.word	0x7ff00000
 800d9d8:	433fffff 	.word	0x433fffff
 800d9dc:	3ff00000 	.word	0x3ff00000
 800d9e0:	3fefffff 	.word	0x3fefffff
 800d9e4:	3fe00000 	.word	0x3fe00000
 800d9e8:	41e00000 	.word	0x41e00000
 800d9ec:	4b60      	ldr	r3, [pc, #384]	; (800db70 <__ieee754_pow+0x3f0>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f7f2 fc62 	bl	80002b8 <__aeabi_dsub>
 800d9f4:	a354      	add	r3, pc, #336	; (adr r3, 800db48 <__ieee754_pow+0x3c8>)
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	460d      	mov	r5, r1
 800d9fe:	f7f2 fe13 	bl	8000628 <__aeabi_dmul>
 800da02:	a353      	add	r3, pc, #332	; (adr r3, 800db50 <__ieee754_pow+0x3d0>)
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	4606      	mov	r6, r0
 800da0a:	460f      	mov	r7, r1
 800da0c:	4620      	mov	r0, r4
 800da0e:	4629      	mov	r1, r5
 800da10:	f7f2 fe0a 	bl	8000628 <__aeabi_dmul>
 800da14:	4b57      	ldr	r3, [pc, #348]	; (800db74 <__ieee754_pow+0x3f4>)
 800da16:	4682      	mov	sl, r0
 800da18:	468b      	mov	fp, r1
 800da1a:	2200      	movs	r2, #0
 800da1c:	4620      	mov	r0, r4
 800da1e:	4629      	mov	r1, r5
 800da20:	f7f2 fe02 	bl	8000628 <__aeabi_dmul>
 800da24:	4602      	mov	r2, r0
 800da26:	460b      	mov	r3, r1
 800da28:	a14b      	add	r1, pc, #300	; (adr r1, 800db58 <__ieee754_pow+0x3d8>)
 800da2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da2e:	f7f2 fc43 	bl	80002b8 <__aeabi_dsub>
 800da32:	4622      	mov	r2, r4
 800da34:	462b      	mov	r3, r5
 800da36:	f7f2 fdf7 	bl	8000628 <__aeabi_dmul>
 800da3a:	4602      	mov	r2, r0
 800da3c:	460b      	mov	r3, r1
 800da3e:	2000      	movs	r0, #0
 800da40:	494d      	ldr	r1, [pc, #308]	; (800db78 <__ieee754_pow+0x3f8>)
 800da42:	f7f2 fc39 	bl	80002b8 <__aeabi_dsub>
 800da46:	4622      	mov	r2, r4
 800da48:	4680      	mov	r8, r0
 800da4a:	4689      	mov	r9, r1
 800da4c:	462b      	mov	r3, r5
 800da4e:	4620      	mov	r0, r4
 800da50:	4629      	mov	r1, r5
 800da52:	f7f2 fde9 	bl	8000628 <__aeabi_dmul>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	4640      	mov	r0, r8
 800da5c:	4649      	mov	r1, r9
 800da5e:	f7f2 fde3 	bl	8000628 <__aeabi_dmul>
 800da62:	a33f      	add	r3, pc, #252	; (adr r3, 800db60 <__ieee754_pow+0x3e0>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f7f2 fdde 	bl	8000628 <__aeabi_dmul>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	4650      	mov	r0, sl
 800da72:	4659      	mov	r1, fp
 800da74:	f7f2 fc20 	bl	80002b8 <__aeabi_dsub>
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	4680      	mov	r8, r0
 800da7e:	4689      	mov	r9, r1
 800da80:	4630      	mov	r0, r6
 800da82:	4639      	mov	r1, r7
 800da84:	f7f2 fc1a 	bl	80002bc <__adddf3>
 800da88:	2000      	movs	r0, #0
 800da8a:	4632      	mov	r2, r6
 800da8c:	463b      	mov	r3, r7
 800da8e:	4604      	mov	r4, r0
 800da90:	460d      	mov	r5, r1
 800da92:	f7f2 fc11 	bl	80002b8 <__aeabi_dsub>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	4640      	mov	r0, r8
 800da9c:	4649      	mov	r1, r9
 800da9e:	f7f2 fc0b 	bl	80002b8 <__aeabi_dsub>
 800daa2:	9b04      	ldr	r3, [sp, #16]
 800daa4:	9a06      	ldr	r2, [sp, #24]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	4313      	orrs	r3, r2
 800daaa:	4682      	mov	sl, r0
 800daac:	468b      	mov	fp, r1
 800daae:	f040 81e7 	bne.w	800de80 <__ieee754_pow+0x700>
 800dab2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800db68 <__ieee754_pow+0x3e8>
 800dab6:	eeb0 8a47 	vmov.f32	s16, s14
 800daba:	eef0 8a67 	vmov.f32	s17, s15
 800dabe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dac2:	2600      	movs	r6, #0
 800dac4:	4632      	mov	r2, r6
 800dac6:	463b      	mov	r3, r7
 800dac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dacc:	f7f2 fbf4 	bl	80002b8 <__aeabi_dsub>
 800dad0:	4622      	mov	r2, r4
 800dad2:	462b      	mov	r3, r5
 800dad4:	f7f2 fda8 	bl	8000628 <__aeabi_dmul>
 800dad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dadc:	4680      	mov	r8, r0
 800dade:	4689      	mov	r9, r1
 800dae0:	4650      	mov	r0, sl
 800dae2:	4659      	mov	r1, fp
 800dae4:	f7f2 fda0 	bl	8000628 <__aeabi_dmul>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4640      	mov	r0, r8
 800daee:	4649      	mov	r1, r9
 800daf0:	f7f2 fbe4 	bl	80002bc <__adddf3>
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	4680      	mov	r8, r0
 800dafa:	4689      	mov	r9, r1
 800dafc:	4620      	mov	r0, r4
 800dafe:	4629      	mov	r1, r5
 800db00:	f7f2 fd92 	bl	8000628 <__aeabi_dmul>
 800db04:	460b      	mov	r3, r1
 800db06:	4604      	mov	r4, r0
 800db08:	460d      	mov	r5, r1
 800db0a:	4602      	mov	r2, r0
 800db0c:	4649      	mov	r1, r9
 800db0e:	4640      	mov	r0, r8
 800db10:	f7f2 fbd4 	bl	80002bc <__adddf3>
 800db14:	4b19      	ldr	r3, [pc, #100]	; (800db7c <__ieee754_pow+0x3fc>)
 800db16:	4299      	cmp	r1, r3
 800db18:	ec45 4b19 	vmov	d9, r4, r5
 800db1c:	4606      	mov	r6, r0
 800db1e:	460f      	mov	r7, r1
 800db20:	468b      	mov	fp, r1
 800db22:	f340 82f1 	ble.w	800e108 <__ieee754_pow+0x988>
 800db26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800db2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800db2e:	4303      	orrs	r3, r0
 800db30:	f000 81e4 	beq.w	800defc <__ieee754_pow+0x77c>
 800db34:	ec51 0b18 	vmov	r0, r1, d8
 800db38:	2200      	movs	r2, #0
 800db3a:	2300      	movs	r3, #0
 800db3c:	f7f2 ffe6 	bl	8000b0c <__aeabi_dcmplt>
 800db40:	3800      	subs	r0, #0
 800db42:	bf18      	it	ne
 800db44:	2001      	movne	r0, #1
 800db46:	e72b      	b.n	800d9a0 <__ieee754_pow+0x220>
 800db48:	60000000 	.word	0x60000000
 800db4c:	3ff71547 	.word	0x3ff71547
 800db50:	f85ddf44 	.word	0xf85ddf44
 800db54:	3e54ae0b 	.word	0x3e54ae0b
 800db58:	55555555 	.word	0x55555555
 800db5c:	3fd55555 	.word	0x3fd55555
 800db60:	652b82fe 	.word	0x652b82fe
 800db64:	3ff71547 	.word	0x3ff71547
 800db68:	00000000 	.word	0x00000000
 800db6c:	bff00000 	.word	0xbff00000
 800db70:	3ff00000 	.word	0x3ff00000
 800db74:	3fd00000 	.word	0x3fd00000
 800db78:	3fe00000 	.word	0x3fe00000
 800db7c:	408fffff 	.word	0x408fffff
 800db80:	4bd5      	ldr	r3, [pc, #852]	; (800ded8 <__ieee754_pow+0x758>)
 800db82:	402b      	ands	r3, r5
 800db84:	2200      	movs	r2, #0
 800db86:	b92b      	cbnz	r3, 800db94 <__ieee754_pow+0x414>
 800db88:	4bd4      	ldr	r3, [pc, #848]	; (800dedc <__ieee754_pow+0x75c>)
 800db8a:	f7f2 fd4d 	bl	8000628 <__aeabi_dmul>
 800db8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800db92:	460c      	mov	r4, r1
 800db94:	1523      	asrs	r3, r4, #20
 800db96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db9a:	4413      	add	r3, r2
 800db9c:	9305      	str	r3, [sp, #20]
 800db9e:	4bd0      	ldr	r3, [pc, #832]	; (800dee0 <__ieee754_pow+0x760>)
 800dba0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dba4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dba8:	429c      	cmp	r4, r3
 800dbaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dbae:	dd08      	ble.n	800dbc2 <__ieee754_pow+0x442>
 800dbb0:	4bcc      	ldr	r3, [pc, #816]	; (800dee4 <__ieee754_pow+0x764>)
 800dbb2:	429c      	cmp	r4, r3
 800dbb4:	f340 8162 	ble.w	800de7c <__ieee754_pow+0x6fc>
 800dbb8:	9b05      	ldr	r3, [sp, #20]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	9305      	str	r3, [sp, #20]
 800dbbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dbc2:	2400      	movs	r4, #0
 800dbc4:	00e3      	lsls	r3, r4, #3
 800dbc6:	9307      	str	r3, [sp, #28]
 800dbc8:	4bc7      	ldr	r3, [pc, #796]	; (800dee8 <__ieee754_pow+0x768>)
 800dbca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbce:	ed93 7b00 	vldr	d7, [r3]
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	ec53 2b17 	vmov	r2, r3, d7
 800dbd8:	eeb0 9a47 	vmov.f32	s18, s14
 800dbdc:	eef0 9a67 	vmov.f32	s19, s15
 800dbe0:	4682      	mov	sl, r0
 800dbe2:	f7f2 fb69 	bl	80002b8 <__aeabi_dsub>
 800dbe6:	4652      	mov	r2, sl
 800dbe8:	4606      	mov	r6, r0
 800dbea:	460f      	mov	r7, r1
 800dbec:	462b      	mov	r3, r5
 800dbee:	ec51 0b19 	vmov	r0, r1, d9
 800dbf2:	f7f2 fb63 	bl	80002bc <__adddf3>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	49bb      	ldr	r1, [pc, #748]	; (800deec <__ieee754_pow+0x76c>)
 800dbfe:	f7f2 fe3d 	bl	800087c <__aeabi_ddiv>
 800dc02:	ec41 0b1a 	vmov	d10, r0, r1
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	4639      	mov	r1, r7
 800dc0e:	f7f2 fd0b 	bl	8000628 <__aeabi_dmul>
 800dc12:	2300      	movs	r3, #0
 800dc14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc18:	9302      	str	r3, [sp, #8]
 800dc1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc1e:	46ab      	mov	fp, r5
 800dc20:	106d      	asrs	r5, r5, #1
 800dc22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dc26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dc2a:	ec41 0b18 	vmov	d8, r0, r1
 800dc2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dc32:	2200      	movs	r2, #0
 800dc34:	4640      	mov	r0, r8
 800dc36:	4649      	mov	r1, r9
 800dc38:	4614      	mov	r4, r2
 800dc3a:	461d      	mov	r5, r3
 800dc3c:	f7f2 fcf4 	bl	8000628 <__aeabi_dmul>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	4630      	mov	r0, r6
 800dc46:	4639      	mov	r1, r7
 800dc48:	f7f2 fb36 	bl	80002b8 <__aeabi_dsub>
 800dc4c:	ec53 2b19 	vmov	r2, r3, d9
 800dc50:	4606      	mov	r6, r0
 800dc52:	460f      	mov	r7, r1
 800dc54:	4620      	mov	r0, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	f7f2 fb2e 	bl	80002b8 <__aeabi_dsub>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4650      	mov	r0, sl
 800dc62:	4659      	mov	r1, fp
 800dc64:	f7f2 fb28 	bl	80002b8 <__aeabi_dsub>
 800dc68:	4642      	mov	r2, r8
 800dc6a:	464b      	mov	r3, r9
 800dc6c:	f7f2 fcdc 	bl	8000628 <__aeabi_dmul>
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4630      	mov	r0, r6
 800dc76:	4639      	mov	r1, r7
 800dc78:	f7f2 fb1e 	bl	80002b8 <__aeabi_dsub>
 800dc7c:	ec53 2b1a 	vmov	r2, r3, d10
 800dc80:	f7f2 fcd2 	bl	8000628 <__aeabi_dmul>
 800dc84:	ec53 2b18 	vmov	r2, r3, d8
 800dc88:	ec41 0b19 	vmov	d9, r0, r1
 800dc8c:	ec51 0b18 	vmov	r0, r1, d8
 800dc90:	f7f2 fcca 	bl	8000628 <__aeabi_dmul>
 800dc94:	a37c      	add	r3, pc, #496	; (adr r3, 800de88 <__ieee754_pow+0x708>)
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	460d      	mov	r5, r1
 800dc9e:	f7f2 fcc3 	bl	8000628 <__aeabi_dmul>
 800dca2:	a37b      	add	r3, pc, #492	; (adr r3, 800de90 <__ieee754_pow+0x710>)
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	f7f2 fb08 	bl	80002bc <__adddf3>
 800dcac:	4622      	mov	r2, r4
 800dcae:	462b      	mov	r3, r5
 800dcb0:	f7f2 fcba 	bl	8000628 <__aeabi_dmul>
 800dcb4:	a378      	add	r3, pc, #480	; (adr r3, 800de98 <__ieee754_pow+0x718>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	f7f2 faff 	bl	80002bc <__adddf3>
 800dcbe:	4622      	mov	r2, r4
 800dcc0:	462b      	mov	r3, r5
 800dcc2:	f7f2 fcb1 	bl	8000628 <__aeabi_dmul>
 800dcc6:	a376      	add	r3, pc, #472	; (adr r3, 800dea0 <__ieee754_pow+0x720>)
 800dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dccc:	f7f2 faf6 	bl	80002bc <__adddf3>
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	462b      	mov	r3, r5
 800dcd4:	f7f2 fca8 	bl	8000628 <__aeabi_dmul>
 800dcd8:	a373      	add	r3, pc, #460	; (adr r3, 800dea8 <__ieee754_pow+0x728>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 faed 	bl	80002bc <__adddf3>
 800dce2:	4622      	mov	r2, r4
 800dce4:	462b      	mov	r3, r5
 800dce6:	f7f2 fc9f 	bl	8000628 <__aeabi_dmul>
 800dcea:	a371      	add	r3, pc, #452	; (adr r3, 800deb0 <__ieee754_pow+0x730>)
 800dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf0:	f7f2 fae4 	bl	80002bc <__adddf3>
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	460f      	mov	r7, r1
 800dcfa:	462b      	mov	r3, r5
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fc92 	bl	8000628 <__aeabi_dmul>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4630      	mov	r0, r6
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	f7f2 fc8c 	bl	8000628 <__aeabi_dmul>
 800dd10:	4642      	mov	r2, r8
 800dd12:	4604      	mov	r4, r0
 800dd14:	460d      	mov	r5, r1
 800dd16:	464b      	mov	r3, r9
 800dd18:	ec51 0b18 	vmov	r0, r1, d8
 800dd1c:	f7f2 face 	bl	80002bc <__adddf3>
 800dd20:	ec53 2b19 	vmov	r2, r3, d9
 800dd24:	f7f2 fc80 	bl	8000628 <__aeabi_dmul>
 800dd28:	4622      	mov	r2, r4
 800dd2a:	462b      	mov	r3, r5
 800dd2c:	f7f2 fac6 	bl	80002bc <__adddf3>
 800dd30:	4642      	mov	r2, r8
 800dd32:	4682      	mov	sl, r0
 800dd34:	468b      	mov	fp, r1
 800dd36:	464b      	mov	r3, r9
 800dd38:	4640      	mov	r0, r8
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	f7f2 fc74 	bl	8000628 <__aeabi_dmul>
 800dd40:	4b6b      	ldr	r3, [pc, #428]	; (800def0 <__ieee754_pow+0x770>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	4606      	mov	r6, r0
 800dd46:	460f      	mov	r7, r1
 800dd48:	f7f2 fab8 	bl	80002bc <__adddf3>
 800dd4c:	4652      	mov	r2, sl
 800dd4e:	465b      	mov	r3, fp
 800dd50:	f7f2 fab4 	bl	80002bc <__adddf3>
 800dd54:	2000      	movs	r0, #0
 800dd56:	4604      	mov	r4, r0
 800dd58:	460d      	mov	r5, r1
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	4640      	mov	r0, r8
 800dd60:	4649      	mov	r1, r9
 800dd62:	f7f2 fc61 	bl	8000628 <__aeabi_dmul>
 800dd66:	4b62      	ldr	r3, [pc, #392]	; (800def0 <__ieee754_pow+0x770>)
 800dd68:	4680      	mov	r8, r0
 800dd6a:	4689      	mov	r9, r1
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	4620      	mov	r0, r4
 800dd70:	4629      	mov	r1, r5
 800dd72:	f7f2 faa1 	bl	80002b8 <__aeabi_dsub>
 800dd76:	4632      	mov	r2, r6
 800dd78:	463b      	mov	r3, r7
 800dd7a:	f7f2 fa9d 	bl	80002b8 <__aeabi_dsub>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4650      	mov	r0, sl
 800dd84:	4659      	mov	r1, fp
 800dd86:	f7f2 fa97 	bl	80002b8 <__aeabi_dsub>
 800dd8a:	ec53 2b18 	vmov	r2, r3, d8
 800dd8e:	f7f2 fc4b 	bl	8000628 <__aeabi_dmul>
 800dd92:	4622      	mov	r2, r4
 800dd94:	4606      	mov	r6, r0
 800dd96:	460f      	mov	r7, r1
 800dd98:	462b      	mov	r3, r5
 800dd9a:	ec51 0b19 	vmov	r0, r1, d9
 800dd9e:	f7f2 fc43 	bl	8000628 <__aeabi_dmul>
 800dda2:	4602      	mov	r2, r0
 800dda4:	460b      	mov	r3, r1
 800dda6:	4630      	mov	r0, r6
 800dda8:	4639      	mov	r1, r7
 800ddaa:	f7f2 fa87 	bl	80002bc <__adddf3>
 800ddae:	4606      	mov	r6, r0
 800ddb0:	460f      	mov	r7, r1
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	4649      	mov	r1, r9
 800ddba:	f7f2 fa7f 	bl	80002bc <__adddf3>
 800ddbe:	a33e      	add	r3, pc, #248	; (adr r3, 800deb8 <__ieee754_pow+0x738>)
 800ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	460d      	mov	r5, r1
 800ddca:	f7f2 fc2d 	bl	8000628 <__aeabi_dmul>
 800ddce:	4642      	mov	r2, r8
 800ddd0:	ec41 0b18 	vmov	d8, r0, r1
 800ddd4:	464b      	mov	r3, r9
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	4629      	mov	r1, r5
 800ddda:	f7f2 fa6d 	bl	80002b8 <__aeabi_dsub>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4630      	mov	r0, r6
 800dde4:	4639      	mov	r1, r7
 800dde6:	f7f2 fa67 	bl	80002b8 <__aeabi_dsub>
 800ddea:	a335      	add	r3, pc, #212	; (adr r3, 800dec0 <__ieee754_pow+0x740>)
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f7f2 fc1a 	bl	8000628 <__aeabi_dmul>
 800ddf4:	a334      	add	r3, pc, #208	; (adr r3, 800dec8 <__ieee754_pow+0x748>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	4606      	mov	r6, r0
 800ddfc:	460f      	mov	r7, r1
 800ddfe:	4620      	mov	r0, r4
 800de00:	4629      	mov	r1, r5
 800de02:	f7f2 fc11 	bl	8000628 <__aeabi_dmul>
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4630      	mov	r0, r6
 800de0c:	4639      	mov	r1, r7
 800de0e:	f7f2 fa55 	bl	80002bc <__adddf3>
 800de12:	9a07      	ldr	r2, [sp, #28]
 800de14:	4b37      	ldr	r3, [pc, #220]	; (800def4 <__ieee754_pow+0x774>)
 800de16:	4413      	add	r3, r2
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	f7f2 fa4e 	bl	80002bc <__adddf3>
 800de20:	4682      	mov	sl, r0
 800de22:	9805      	ldr	r0, [sp, #20]
 800de24:	468b      	mov	fp, r1
 800de26:	f7f2 fb95 	bl	8000554 <__aeabi_i2d>
 800de2a:	9a07      	ldr	r2, [sp, #28]
 800de2c:	4b32      	ldr	r3, [pc, #200]	; (800def8 <__ieee754_pow+0x778>)
 800de2e:	4413      	add	r3, r2
 800de30:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de34:	4606      	mov	r6, r0
 800de36:	460f      	mov	r7, r1
 800de38:	4652      	mov	r2, sl
 800de3a:	465b      	mov	r3, fp
 800de3c:	ec51 0b18 	vmov	r0, r1, d8
 800de40:	f7f2 fa3c 	bl	80002bc <__adddf3>
 800de44:	4642      	mov	r2, r8
 800de46:	464b      	mov	r3, r9
 800de48:	f7f2 fa38 	bl	80002bc <__adddf3>
 800de4c:	4632      	mov	r2, r6
 800de4e:	463b      	mov	r3, r7
 800de50:	f7f2 fa34 	bl	80002bc <__adddf3>
 800de54:	2000      	movs	r0, #0
 800de56:	4632      	mov	r2, r6
 800de58:	463b      	mov	r3, r7
 800de5a:	4604      	mov	r4, r0
 800de5c:	460d      	mov	r5, r1
 800de5e:	f7f2 fa2b 	bl	80002b8 <__aeabi_dsub>
 800de62:	4642      	mov	r2, r8
 800de64:	464b      	mov	r3, r9
 800de66:	f7f2 fa27 	bl	80002b8 <__aeabi_dsub>
 800de6a:	ec53 2b18 	vmov	r2, r3, d8
 800de6e:	f7f2 fa23 	bl	80002b8 <__aeabi_dsub>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	4650      	mov	r0, sl
 800de78:	4659      	mov	r1, fp
 800de7a:	e610      	b.n	800da9e <__ieee754_pow+0x31e>
 800de7c:	2401      	movs	r4, #1
 800de7e:	e6a1      	b.n	800dbc4 <__ieee754_pow+0x444>
 800de80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ded0 <__ieee754_pow+0x750>
 800de84:	e617      	b.n	800dab6 <__ieee754_pow+0x336>
 800de86:	bf00      	nop
 800de88:	4a454eef 	.word	0x4a454eef
 800de8c:	3fca7e28 	.word	0x3fca7e28
 800de90:	93c9db65 	.word	0x93c9db65
 800de94:	3fcd864a 	.word	0x3fcd864a
 800de98:	a91d4101 	.word	0xa91d4101
 800de9c:	3fd17460 	.word	0x3fd17460
 800dea0:	518f264d 	.word	0x518f264d
 800dea4:	3fd55555 	.word	0x3fd55555
 800dea8:	db6fabff 	.word	0xdb6fabff
 800deac:	3fdb6db6 	.word	0x3fdb6db6
 800deb0:	33333303 	.word	0x33333303
 800deb4:	3fe33333 	.word	0x3fe33333
 800deb8:	e0000000 	.word	0xe0000000
 800debc:	3feec709 	.word	0x3feec709
 800dec0:	dc3a03fd 	.word	0xdc3a03fd
 800dec4:	3feec709 	.word	0x3feec709
 800dec8:	145b01f5 	.word	0x145b01f5
 800decc:	be3e2fe0 	.word	0xbe3e2fe0
 800ded0:	00000000 	.word	0x00000000
 800ded4:	3ff00000 	.word	0x3ff00000
 800ded8:	7ff00000 	.word	0x7ff00000
 800dedc:	43400000 	.word	0x43400000
 800dee0:	0003988e 	.word	0x0003988e
 800dee4:	000bb679 	.word	0x000bb679
 800dee8:	0800fd70 	.word	0x0800fd70
 800deec:	3ff00000 	.word	0x3ff00000
 800def0:	40080000 	.word	0x40080000
 800def4:	0800fd90 	.word	0x0800fd90
 800def8:	0800fd80 	.word	0x0800fd80
 800defc:	a3b5      	add	r3, pc, #724	; (adr r3, 800e1d4 <__ieee754_pow+0xa54>)
 800defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df02:	4640      	mov	r0, r8
 800df04:	4649      	mov	r1, r9
 800df06:	f7f2 f9d9 	bl	80002bc <__adddf3>
 800df0a:	4622      	mov	r2, r4
 800df0c:	ec41 0b1a 	vmov	d10, r0, r1
 800df10:	462b      	mov	r3, r5
 800df12:	4630      	mov	r0, r6
 800df14:	4639      	mov	r1, r7
 800df16:	f7f2 f9cf 	bl	80002b8 <__aeabi_dsub>
 800df1a:	4602      	mov	r2, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	ec51 0b1a 	vmov	r0, r1, d10
 800df22:	f7f2 fe11 	bl	8000b48 <__aeabi_dcmpgt>
 800df26:	2800      	cmp	r0, #0
 800df28:	f47f ae04 	bne.w	800db34 <__ieee754_pow+0x3b4>
 800df2c:	4aa4      	ldr	r2, [pc, #656]	; (800e1c0 <__ieee754_pow+0xa40>)
 800df2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df32:	4293      	cmp	r3, r2
 800df34:	f340 8108 	ble.w	800e148 <__ieee754_pow+0x9c8>
 800df38:	151b      	asrs	r3, r3, #20
 800df3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800df3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800df42:	fa4a f303 	asr.w	r3, sl, r3
 800df46:	445b      	add	r3, fp
 800df48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800df4c:	4e9d      	ldr	r6, [pc, #628]	; (800e1c4 <__ieee754_pow+0xa44>)
 800df4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800df52:	4116      	asrs	r6, r2
 800df54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800df58:	2000      	movs	r0, #0
 800df5a:	ea23 0106 	bic.w	r1, r3, r6
 800df5e:	f1c2 0214 	rsb	r2, r2, #20
 800df62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800df66:	fa4a fa02 	asr.w	sl, sl, r2
 800df6a:	f1bb 0f00 	cmp.w	fp, #0
 800df6e:	4602      	mov	r2, r0
 800df70:	460b      	mov	r3, r1
 800df72:	4620      	mov	r0, r4
 800df74:	4629      	mov	r1, r5
 800df76:	bfb8      	it	lt
 800df78:	f1ca 0a00 	rsblt	sl, sl, #0
 800df7c:	f7f2 f99c 	bl	80002b8 <__aeabi_dsub>
 800df80:	ec41 0b19 	vmov	d9, r0, r1
 800df84:	4642      	mov	r2, r8
 800df86:	464b      	mov	r3, r9
 800df88:	ec51 0b19 	vmov	r0, r1, d9
 800df8c:	f7f2 f996 	bl	80002bc <__adddf3>
 800df90:	a37b      	add	r3, pc, #492	; (adr r3, 800e180 <__ieee754_pow+0xa00>)
 800df92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df96:	2000      	movs	r0, #0
 800df98:	4604      	mov	r4, r0
 800df9a:	460d      	mov	r5, r1
 800df9c:	f7f2 fb44 	bl	8000628 <__aeabi_dmul>
 800dfa0:	ec53 2b19 	vmov	r2, r3, d9
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	460f      	mov	r7, r1
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	4629      	mov	r1, r5
 800dfac:	f7f2 f984 	bl	80002b8 <__aeabi_dsub>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	f7f2 f97e 	bl	80002b8 <__aeabi_dsub>
 800dfbc:	a372      	add	r3, pc, #456	; (adr r3, 800e188 <__ieee754_pow+0xa08>)
 800dfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc2:	f7f2 fb31 	bl	8000628 <__aeabi_dmul>
 800dfc6:	a372      	add	r3, pc, #456	; (adr r3, 800e190 <__ieee754_pow+0xa10>)
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	4680      	mov	r8, r0
 800dfce:	4689      	mov	r9, r1
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	f7f2 fb28 	bl	8000628 <__aeabi_dmul>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4640      	mov	r0, r8
 800dfde:	4649      	mov	r1, r9
 800dfe0:	f7f2 f96c 	bl	80002bc <__adddf3>
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4630      	mov	r0, r6
 800dfee:	4639      	mov	r1, r7
 800dff0:	f7f2 f964 	bl	80002bc <__adddf3>
 800dff4:	4632      	mov	r2, r6
 800dff6:	463b      	mov	r3, r7
 800dff8:	4680      	mov	r8, r0
 800dffa:	4689      	mov	r9, r1
 800dffc:	f7f2 f95c 	bl	80002b8 <__aeabi_dsub>
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	4620      	mov	r0, r4
 800e006:	4629      	mov	r1, r5
 800e008:	f7f2 f956 	bl	80002b8 <__aeabi_dsub>
 800e00c:	4642      	mov	r2, r8
 800e00e:	4606      	mov	r6, r0
 800e010:	460f      	mov	r7, r1
 800e012:	464b      	mov	r3, r9
 800e014:	4640      	mov	r0, r8
 800e016:	4649      	mov	r1, r9
 800e018:	f7f2 fb06 	bl	8000628 <__aeabi_dmul>
 800e01c:	a35e      	add	r3, pc, #376	; (adr r3, 800e198 <__ieee754_pow+0xa18>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	4604      	mov	r4, r0
 800e024:	460d      	mov	r5, r1
 800e026:	f7f2 faff 	bl	8000628 <__aeabi_dmul>
 800e02a:	a35d      	add	r3, pc, #372	; (adr r3, 800e1a0 <__ieee754_pow+0xa20>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 f942 	bl	80002b8 <__aeabi_dsub>
 800e034:	4622      	mov	r2, r4
 800e036:	462b      	mov	r3, r5
 800e038:	f7f2 faf6 	bl	8000628 <__aeabi_dmul>
 800e03c:	a35a      	add	r3, pc, #360	; (adr r3, 800e1a8 <__ieee754_pow+0xa28>)
 800e03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e042:	f7f2 f93b 	bl	80002bc <__adddf3>
 800e046:	4622      	mov	r2, r4
 800e048:	462b      	mov	r3, r5
 800e04a:	f7f2 faed 	bl	8000628 <__aeabi_dmul>
 800e04e:	a358      	add	r3, pc, #352	; (adr r3, 800e1b0 <__ieee754_pow+0xa30>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	f7f2 f930 	bl	80002b8 <__aeabi_dsub>
 800e058:	4622      	mov	r2, r4
 800e05a:	462b      	mov	r3, r5
 800e05c:	f7f2 fae4 	bl	8000628 <__aeabi_dmul>
 800e060:	a355      	add	r3, pc, #340	; (adr r3, 800e1b8 <__ieee754_pow+0xa38>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 f929 	bl	80002bc <__adddf3>
 800e06a:	4622      	mov	r2, r4
 800e06c:	462b      	mov	r3, r5
 800e06e:	f7f2 fadb 	bl	8000628 <__aeabi_dmul>
 800e072:	4602      	mov	r2, r0
 800e074:	460b      	mov	r3, r1
 800e076:	4640      	mov	r0, r8
 800e078:	4649      	mov	r1, r9
 800e07a:	f7f2 f91d 	bl	80002b8 <__aeabi_dsub>
 800e07e:	4604      	mov	r4, r0
 800e080:	460d      	mov	r5, r1
 800e082:	4602      	mov	r2, r0
 800e084:	460b      	mov	r3, r1
 800e086:	4640      	mov	r0, r8
 800e088:	4649      	mov	r1, r9
 800e08a:	f7f2 facd 	bl	8000628 <__aeabi_dmul>
 800e08e:	2200      	movs	r2, #0
 800e090:	ec41 0b19 	vmov	d9, r0, r1
 800e094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e098:	4620      	mov	r0, r4
 800e09a:	4629      	mov	r1, r5
 800e09c:	f7f2 f90c 	bl	80002b8 <__aeabi_dsub>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	ec51 0b19 	vmov	r0, r1, d9
 800e0a8:	f7f2 fbe8 	bl	800087c <__aeabi_ddiv>
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	463b      	mov	r3, r7
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	4649      	mov	r1, r9
 800e0b8:	f7f2 fab6 	bl	8000628 <__aeabi_dmul>
 800e0bc:	4632      	mov	r2, r6
 800e0be:	463b      	mov	r3, r7
 800e0c0:	f7f2 f8fc 	bl	80002bc <__adddf3>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	f7f2 f8f4 	bl	80002b8 <__aeabi_dsub>
 800e0d0:	4642      	mov	r2, r8
 800e0d2:	464b      	mov	r3, r9
 800e0d4:	f7f2 f8f0 	bl	80002b8 <__aeabi_dsub>
 800e0d8:	460b      	mov	r3, r1
 800e0da:	4602      	mov	r2, r0
 800e0dc:	493a      	ldr	r1, [pc, #232]	; (800e1c8 <__ieee754_pow+0xa48>)
 800e0de:	2000      	movs	r0, #0
 800e0e0:	f7f2 f8ea 	bl	80002b8 <__aeabi_dsub>
 800e0e4:	ec41 0b10 	vmov	d0, r0, r1
 800e0e8:	ee10 3a90 	vmov	r3, s1
 800e0ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e0f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0f4:	da2b      	bge.n	800e14e <__ieee754_pow+0x9ce>
 800e0f6:	4650      	mov	r0, sl
 800e0f8:	f001 fa6e 	bl	800f5d8 <scalbn>
 800e0fc:	ec51 0b10 	vmov	r0, r1, d0
 800e100:	ec53 2b18 	vmov	r2, r3, d8
 800e104:	f7ff bbed 	b.w	800d8e2 <__ieee754_pow+0x162>
 800e108:	4b30      	ldr	r3, [pc, #192]	; (800e1cc <__ieee754_pow+0xa4c>)
 800e10a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e10e:	429e      	cmp	r6, r3
 800e110:	f77f af0c 	ble.w	800df2c <__ieee754_pow+0x7ac>
 800e114:	4b2e      	ldr	r3, [pc, #184]	; (800e1d0 <__ieee754_pow+0xa50>)
 800e116:	440b      	add	r3, r1
 800e118:	4303      	orrs	r3, r0
 800e11a:	d009      	beq.n	800e130 <__ieee754_pow+0x9b0>
 800e11c:	ec51 0b18 	vmov	r0, r1, d8
 800e120:	2200      	movs	r2, #0
 800e122:	2300      	movs	r3, #0
 800e124:	f7f2 fcf2 	bl	8000b0c <__aeabi_dcmplt>
 800e128:	3800      	subs	r0, #0
 800e12a:	bf18      	it	ne
 800e12c:	2001      	movne	r0, #1
 800e12e:	e447      	b.n	800d9c0 <__ieee754_pow+0x240>
 800e130:	4622      	mov	r2, r4
 800e132:	462b      	mov	r3, r5
 800e134:	f7f2 f8c0 	bl	80002b8 <__aeabi_dsub>
 800e138:	4642      	mov	r2, r8
 800e13a:	464b      	mov	r3, r9
 800e13c:	f7f2 fcfa 	bl	8000b34 <__aeabi_dcmpge>
 800e140:	2800      	cmp	r0, #0
 800e142:	f43f aef3 	beq.w	800df2c <__ieee754_pow+0x7ac>
 800e146:	e7e9      	b.n	800e11c <__ieee754_pow+0x99c>
 800e148:	f04f 0a00 	mov.w	sl, #0
 800e14c:	e71a      	b.n	800df84 <__ieee754_pow+0x804>
 800e14e:	ec51 0b10 	vmov	r0, r1, d0
 800e152:	4619      	mov	r1, r3
 800e154:	e7d4      	b.n	800e100 <__ieee754_pow+0x980>
 800e156:	491c      	ldr	r1, [pc, #112]	; (800e1c8 <__ieee754_pow+0xa48>)
 800e158:	2000      	movs	r0, #0
 800e15a:	f7ff bb30 	b.w	800d7be <__ieee754_pow+0x3e>
 800e15e:	2000      	movs	r0, #0
 800e160:	2100      	movs	r1, #0
 800e162:	f7ff bb2c 	b.w	800d7be <__ieee754_pow+0x3e>
 800e166:	4630      	mov	r0, r6
 800e168:	4639      	mov	r1, r7
 800e16a:	f7ff bb28 	b.w	800d7be <__ieee754_pow+0x3e>
 800e16e:	9204      	str	r2, [sp, #16]
 800e170:	f7ff bb7a 	b.w	800d868 <__ieee754_pow+0xe8>
 800e174:	2300      	movs	r3, #0
 800e176:	f7ff bb64 	b.w	800d842 <__ieee754_pow+0xc2>
 800e17a:	bf00      	nop
 800e17c:	f3af 8000 	nop.w
 800e180:	00000000 	.word	0x00000000
 800e184:	3fe62e43 	.word	0x3fe62e43
 800e188:	fefa39ef 	.word	0xfefa39ef
 800e18c:	3fe62e42 	.word	0x3fe62e42
 800e190:	0ca86c39 	.word	0x0ca86c39
 800e194:	be205c61 	.word	0xbe205c61
 800e198:	72bea4d0 	.word	0x72bea4d0
 800e19c:	3e663769 	.word	0x3e663769
 800e1a0:	c5d26bf1 	.word	0xc5d26bf1
 800e1a4:	3ebbbd41 	.word	0x3ebbbd41
 800e1a8:	af25de2c 	.word	0xaf25de2c
 800e1ac:	3f11566a 	.word	0x3f11566a
 800e1b0:	16bebd93 	.word	0x16bebd93
 800e1b4:	3f66c16c 	.word	0x3f66c16c
 800e1b8:	5555553e 	.word	0x5555553e
 800e1bc:	3fc55555 	.word	0x3fc55555
 800e1c0:	3fe00000 	.word	0x3fe00000
 800e1c4:	000fffff 	.word	0x000fffff
 800e1c8:	3ff00000 	.word	0x3ff00000
 800e1cc:	4090cbff 	.word	0x4090cbff
 800e1d0:	3f6f3400 	.word	0x3f6f3400
 800e1d4:	652b82fe 	.word	0x652b82fe
 800e1d8:	3c971547 	.word	0x3c971547
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <__ieee754_rem_pio2>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	ed2d 8b02 	vpush	{d8}
 800e1e8:	ec55 4b10 	vmov	r4, r5, d0
 800e1ec:	4bca      	ldr	r3, [pc, #808]	; (800e518 <__ieee754_rem_pio2+0x338>)
 800e1ee:	b08b      	sub	sp, #44	; 0x2c
 800e1f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e1f4:	4598      	cmp	r8, r3
 800e1f6:	4682      	mov	sl, r0
 800e1f8:	9502      	str	r5, [sp, #8]
 800e1fa:	dc08      	bgt.n	800e20e <__ieee754_rem_pio2+0x2e>
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	2300      	movs	r3, #0
 800e200:	ed80 0b00 	vstr	d0, [r0]
 800e204:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e208:	f04f 0b00 	mov.w	fp, #0
 800e20c:	e028      	b.n	800e260 <__ieee754_rem_pio2+0x80>
 800e20e:	4bc3      	ldr	r3, [pc, #780]	; (800e51c <__ieee754_rem_pio2+0x33c>)
 800e210:	4598      	cmp	r8, r3
 800e212:	dc78      	bgt.n	800e306 <__ieee754_rem_pio2+0x126>
 800e214:	9b02      	ldr	r3, [sp, #8]
 800e216:	4ec2      	ldr	r6, [pc, #776]	; (800e520 <__ieee754_rem_pio2+0x340>)
 800e218:	2b00      	cmp	r3, #0
 800e21a:	ee10 0a10 	vmov	r0, s0
 800e21e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e4e0 <__ieee754_rem_pio2+0x300>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	4629      	mov	r1, r5
 800e226:	dd39      	ble.n	800e29c <__ieee754_rem_pio2+0xbc>
 800e228:	f7f2 f846 	bl	80002b8 <__aeabi_dsub>
 800e22c:	45b0      	cmp	r8, r6
 800e22e:	4604      	mov	r4, r0
 800e230:	460d      	mov	r5, r1
 800e232:	d01b      	beq.n	800e26c <__ieee754_rem_pio2+0x8c>
 800e234:	a3ac      	add	r3, pc, #688	; (adr r3, 800e4e8 <__ieee754_rem_pio2+0x308>)
 800e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23a:	f7f2 f83d 	bl	80002b8 <__aeabi_dsub>
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	e9ca 2300 	strd	r2, r3, [sl]
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 f835 	bl	80002b8 <__aeabi_dsub>
 800e24e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e4e8 <__ieee754_rem_pio2+0x308>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f2 f830 	bl	80002b8 <__aeabi_dsub>
 800e258:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e25c:	f04f 0b01 	mov.w	fp, #1
 800e260:	4658      	mov	r0, fp
 800e262:	b00b      	add	sp, #44	; 0x2c
 800e264:	ecbd 8b02 	vpop	{d8}
 800e268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e4f0 <__ieee754_rem_pio2+0x310>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	f7f2 f821 	bl	80002b8 <__aeabi_dsub>
 800e276:	a3a0      	add	r3, pc, #640	; (adr r3, 800e4f8 <__ieee754_rem_pio2+0x318>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	4604      	mov	r4, r0
 800e27e:	460d      	mov	r5, r1
 800e280:	f7f2 f81a 	bl	80002b8 <__aeabi_dsub>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	e9ca 2300 	strd	r2, r3, [sl]
 800e28c:	4620      	mov	r0, r4
 800e28e:	4629      	mov	r1, r5
 800e290:	f7f2 f812 	bl	80002b8 <__aeabi_dsub>
 800e294:	a398      	add	r3, pc, #608	; (adr r3, 800e4f8 <__ieee754_rem_pio2+0x318>)
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	e7db      	b.n	800e254 <__ieee754_rem_pio2+0x74>
 800e29c:	f7f2 f80e 	bl	80002bc <__adddf3>
 800e2a0:	45b0      	cmp	r8, r6
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	460d      	mov	r5, r1
 800e2a6:	d016      	beq.n	800e2d6 <__ieee754_rem_pio2+0xf6>
 800e2a8:	a38f      	add	r3, pc, #572	; (adr r3, 800e4e8 <__ieee754_rem_pio2+0x308>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	f7f2 f805 	bl	80002bc <__adddf3>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	e9ca 2300 	strd	r2, r3, [sl]
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	4629      	mov	r1, r5
 800e2be:	f7f1 fffb 	bl	80002b8 <__aeabi_dsub>
 800e2c2:	a389      	add	r3, pc, #548	; (adr r3, 800e4e8 <__ieee754_rem_pio2+0x308>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	f7f1 fff8 	bl	80002bc <__adddf3>
 800e2cc:	f04f 3bff 	mov.w	fp, #4294967295
 800e2d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e2d4:	e7c4      	b.n	800e260 <__ieee754_rem_pio2+0x80>
 800e2d6:	a386      	add	r3, pc, #536	; (adr r3, 800e4f0 <__ieee754_rem_pio2+0x310>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	f7f1 ffee 	bl	80002bc <__adddf3>
 800e2e0:	a385      	add	r3, pc, #532	; (adr r3, 800e4f8 <__ieee754_rem_pio2+0x318>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	f7f1 ffe7 	bl	80002bc <__adddf3>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	e9ca 2300 	strd	r2, r3, [sl]
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	f7f1 ffdd 	bl	80002b8 <__aeabi_dsub>
 800e2fe:	a37e      	add	r3, pc, #504	; (adr r3, 800e4f8 <__ieee754_rem_pio2+0x318>)
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	e7e0      	b.n	800e2c8 <__ieee754_rem_pio2+0xe8>
 800e306:	4b87      	ldr	r3, [pc, #540]	; (800e524 <__ieee754_rem_pio2+0x344>)
 800e308:	4598      	cmp	r8, r3
 800e30a:	f300 80d9 	bgt.w	800e4c0 <__ieee754_rem_pio2+0x2e0>
 800e30e:	f001 f8cf 	bl	800f4b0 <fabs>
 800e312:	ec55 4b10 	vmov	r4, r5, d0
 800e316:	ee10 0a10 	vmov	r0, s0
 800e31a:	a379      	add	r3, pc, #484	; (adr r3, 800e500 <__ieee754_rem_pio2+0x320>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	4629      	mov	r1, r5
 800e322:	f7f2 f981 	bl	8000628 <__aeabi_dmul>
 800e326:	4b80      	ldr	r3, [pc, #512]	; (800e528 <__ieee754_rem_pio2+0x348>)
 800e328:	2200      	movs	r2, #0
 800e32a:	f7f1 ffc7 	bl	80002bc <__adddf3>
 800e32e:	f7f2 fc2b 	bl	8000b88 <__aeabi_d2iz>
 800e332:	4683      	mov	fp, r0
 800e334:	f7f2 f90e 	bl	8000554 <__aeabi_i2d>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	ec43 2b18 	vmov	d8, r2, r3
 800e340:	a367      	add	r3, pc, #412	; (adr r3, 800e4e0 <__ieee754_rem_pio2+0x300>)
 800e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e346:	f7f2 f96f 	bl	8000628 <__aeabi_dmul>
 800e34a:	4602      	mov	r2, r0
 800e34c:	460b      	mov	r3, r1
 800e34e:	4620      	mov	r0, r4
 800e350:	4629      	mov	r1, r5
 800e352:	f7f1 ffb1 	bl	80002b8 <__aeabi_dsub>
 800e356:	a364      	add	r3, pc, #400	; (adr r3, 800e4e8 <__ieee754_rem_pio2+0x308>)
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	4606      	mov	r6, r0
 800e35e:	460f      	mov	r7, r1
 800e360:	ec51 0b18 	vmov	r0, r1, d8
 800e364:	f7f2 f960 	bl	8000628 <__aeabi_dmul>
 800e368:	f1bb 0f1f 	cmp.w	fp, #31
 800e36c:	4604      	mov	r4, r0
 800e36e:	460d      	mov	r5, r1
 800e370:	dc0d      	bgt.n	800e38e <__ieee754_rem_pio2+0x1ae>
 800e372:	4b6e      	ldr	r3, [pc, #440]	; (800e52c <__ieee754_rem_pio2+0x34c>)
 800e374:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e37c:	4543      	cmp	r3, r8
 800e37e:	d006      	beq.n	800e38e <__ieee754_rem_pio2+0x1ae>
 800e380:	4622      	mov	r2, r4
 800e382:	462b      	mov	r3, r5
 800e384:	4630      	mov	r0, r6
 800e386:	4639      	mov	r1, r7
 800e388:	f7f1 ff96 	bl	80002b8 <__aeabi_dsub>
 800e38c:	e00f      	b.n	800e3ae <__ieee754_rem_pio2+0x1ce>
 800e38e:	462b      	mov	r3, r5
 800e390:	4622      	mov	r2, r4
 800e392:	4630      	mov	r0, r6
 800e394:	4639      	mov	r1, r7
 800e396:	f7f1 ff8f 	bl	80002b8 <__aeabi_dsub>
 800e39a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e3a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e3a8:	f1b8 0f10 	cmp.w	r8, #16
 800e3ac:	dc02      	bgt.n	800e3b4 <__ieee754_rem_pio2+0x1d4>
 800e3ae:	e9ca 0100 	strd	r0, r1, [sl]
 800e3b2:	e039      	b.n	800e428 <__ieee754_rem_pio2+0x248>
 800e3b4:	a34e      	add	r3, pc, #312	; (adr r3, 800e4f0 <__ieee754_rem_pio2+0x310>)
 800e3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ba:	ec51 0b18 	vmov	r0, r1, d8
 800e3be:	f7f2 f933 	bl	8000628 <__aeabi_dmul>
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	460d      	mov	r5, r1
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f1 ff73 	bl	80002b8 <__aeabi_dsub>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	4680      	mov	r8, r0
 800e3d8:	4689      	mov	r9, r1
 800e3da:	4630      	mov	r0, r6
 800e3dc:	4639      	mov	r1, r7
 800e3de:	f7f1 ff6b 	bl	80002b8 <__aeabi_dsub>
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	462b      	mov	r3, r5
 800e3e6:	f7f1 ff67 	bl	80002b8 <__aeabi_dsub>
 800e3ea:	a343      	add	r3, pc, #268	; (adr r3, 800e4f8 <__ieee754_rem_pio2+0x318>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	ec51 0b18 	vmov	r0, r1, d8
 800e3f8:	f7f2 f916 	bl	8000628 <__aeabi_dmul>
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	462b      	mov	r3, r5
 800e400:	f7f1 ff5a 	bl	80002b8 <__aeabi_dsub>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4604      	mov	r4, r0
 800e40a:	460d      	mov	r5, r1
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f1 ff52 	bl	80002b8 <__aeabi_dsub>
 800e414:	9a03      	ldr	r2, [sp, #12]
 800e416:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e41a:	1ad3      	subs	r3, r2, r3
 800e41c:	2b31      	cmp	r3, #49	; 0x31
 800e41e:	dc24      	bgt.n	800e46a <__ieee754_rem_pio2+0x28a>
 800e420:	e9ca 0100 	strd	r0, r1, [sl]
 800e424:	4646      	mov	r6, r8
 800e426:	464f      	mov	r7, r9
 800e428:	e9da 8900 	ldrd	r8, r9, [sl]
 800e42c:	4630      	mov	r0, r6
 800e42e:	4642      	mov	r2, r8
 800e430:	464b      	mov	r3, r9
 800e432:	4639      	mov	r1, r7
 800e434:	f7f1 ff40 	bl	80002b8 <__aeabi_dsub>
 800e438:	462b      	mov	r3, r5
 800e43a:	4622      	mov	r2, r4
 800e43c:	f7f1 ff3c 	bl	80002b8 <__aeabi_dsub>
 800e440:	9b02      	ldr	r3, [sp, #8]
 800e442:	2b00      	cmp	r3, #0
 800e444:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e448:	f6bf af0a 	bge.w	800e260 <__ieee754_rem_pio2+0x80>
 800e44c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e450:	f8ca 3004 	str.w	r3, [sl, #4]
 800e454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e458:	f8ca 8000 	str.w	r8, [sl]
 800e45c:	f8ca 0008 	str.w	r0, [sl, #8]
 800e460:	f8ca 300c 	str.w	r3, [sl, #12]
 800e464:	f1cb 0b00 	rsb	fp, fp, #0
 800e468:	e6fa      	b.n	800e260 <__ieee754_rem_pio2+0x80>
 800e46a:	a327      	add	r3, pc, #156	; (adr r3, 800e508 <__ieee754_rem_pio2+0x328>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	ec51 0b18 	vmov	r0, r1, d8
 800e474:	f7f2 f8d8 	bl	8000628 <__aeabi_dmul>
 800e478:	4604      	mov	r4, r0
 800e47a:	460d      	mov	r5, r1
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	4640      	mov	r0, r8
 800e482:	4649      	mov	r1, r9
 800e484:	f7f1 ff18 	bl	80002b8 <__aeabi_dsub>
 800e488:	4602      	mov	r2, r0
 800e48a:	460b      	mov	r3, r1
 800e48c:	4606      	mov	r6, r0
 800e48e:	460f      	mov	r7, r1
 800e490:	4640      	mov	r0, r8
 800e492:	4649      	mov	r1, r9
 800e494:	f7f1 ff10 	bl	80002b8 <__aeabi_dsub>
 800e498:	4622      	mov	r2, r4
 800e49a:	462b      	mov	r3, r5
 800e49c:	f7f1 ff0c 	bl	80002b8 <__aeabi_dsub>
 800e4a0:	a31b      	add	r3, pc, #108	; (adr r3, 800e510 <__ieee754_rem_pio2+0x330>)
 800e4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	460d      	mov	r5, r1
 800e4aa:	ec51 0b18 	vmov	r0, r1, d8
 800e4ae:	f7f2 f8bb 	bl	8000628 <__aeabi_dmul>
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	f7f1 feff 	bl	80002b8 <__aeabi_dsub>
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	460d      	mov	r5, r1
 800e4be:	e75f      	b.n	800e380 <__ieee754_rem_pio2+0x1a0>
 800e4c0:	4b1b      	ldr	r3, [pc, #108]	; (800e530 <__ieee754_rem_pio2+0x350>)
 800e4c2:	4598      	cmp	r8, r3
 800e4c4:	dd36      	ble.n	800e534 <__ieee754_rem_pio2+0x354>
 800e4c6:	ee10 2a10 	vmov	r2, s0
 800e4ca:	462b      	mov	r3, r5
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	f7f1 fef2 	bl	80002b8 <__aeabi_dsub>
 800e4d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4d8:	e9ca 0100 	strd	r0, r1, [sl]
 800e4dc:	e694      	b.n	800e208 <__ieee754_rem_pio2+0x28>
 800e4de:	bf00      	nop
 800e4e0:	54400000 	.word	0x54400000
 800e4e4:	3ff921fb 	.word	0x3ff921fb
 800e4e8:	1a626331 	.word	0x1a626331
 800e4ec:	3dd0b461 	.word	0x3dd0b461
 800e4f0:	1a600000 	.word	0x1a600000
 800e4f4:	3dd0b461 	.word	0x3dd0b461
 800e4f8:	2e037073 	.word	0x2e037073
 800e4fc:	3ba3198a 	.word	0x3ba3198a
 800e500:	6dc9c883 	.word	0x6dc9c883
 800e504:	3fe45f30 	.word	0x3fe45f30
 800e508:	2e000000 	.word	0x2e000000
 800e50c:	3ba3198a 	.word	0x3ba3198a
 800e510:	252049c1 	.word	0x252049c1
 800e514:	397b839a 	.word	0x397b839a
 800e518:	3fe921fb 	.word	0x3fe921fb
 800e51c:	4002d97b 	.word	0x4002d97b
 800e520:	3ff921fb 	.word	0x3ff921fb
 800e524:	413921fb 	.word	0x413921fb
 800e528:	3fe00000 	.word	0x3fe00000
 800e52c:	0800fda0 	.word	0x0800fda0
 800e530:	7fefffff 	.word	0x7fefffff
 800e534:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e538:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e53c:	ee10 0a10 	vmov	r0, s0
 800e540:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e544:	ee10 6a10 	vmov	r6, s0
 800e548:	460f      	mov	r7, r1
 800e54a:	f7f2 fb1d 	bl	8000b88 <__aeabi_d2iz>
 800e54e:	f7f2 f801 	bl	8000554 <__aeabi_i2d>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	4630      	mov	r0, r6
 800e558:	4639      	mov	r1, r7
 800e55a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e55e:	f7f1 feab 	bl	80002b8 <__aeabi_dsub>
 800e562:	4b23      	ldr	r3, [pc, #140]	; (800e5f0 <__ieee754_rem_pio2+0x410>)
 800e564:	2200      	movs	r2, #0
 800e566:	f7f2 f85f 	bl	8000628 <__aeabi_dmul>
 800e56a:	460f      	mov	r7, r1
 800e56c:	4606      	mov	r6, r0
 800e56e:	f7f2 fb0b 	bl	8000b88 <__aeabi_d2iz>
 800e572:	f7f1 ffef 	bl	8000554 <__aeabi_i2d>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	4630      	mov	r0, r6
 800e57c:	4639      	mov	r1, r7
 800e57e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e582:	f7f1 fe99 	bl	80002b8 <__aeabi_dsub>
 800e586:	4b1a      	ldr	r3, [pc, #104]	; (800e5f0 <__ieee754_rem_pio2+0x410>)
 800e588:	2200      	movs	r2, #0
 800e58a:	f7f2 f84d 	bl	8000628 <__aeabi_dmul>
 800e58e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e592:	ad04      	add	r5, sp, #16
 800e594:	f04f 0803 	mov.w	r8, #3
 800e598:	46a9      	mov	r9, r5
 800e59a:	2600      	movs	r6, #0
 800e59c:	2700      	movs	r7, #0
 800e59e:	4632      	mov	r2, r6
 800e5a0:	463b      	mov	r3, r7
 800e5a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e5a6:	46c3      	mov	fp, r8
 800e5a8:	3d08      	subs	r5, #8
 800e5aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5ae:	f7f2 faa3 	bl	8000af8 <__aeabi_dcmpeq>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d1f3      	bne.n	800e59e <__ieee754_rem_pio2+0x3be>
 800e5b6:	4b0f      	ldr	r3, [pc, #60]	; (800e5f4 <__ieee754_rem_pio2+0x414>)
 800e5b8:	9301      	str	r3, [sp, #4]
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	4622      	mov	r2, r4
 800e5c0:	465b      	mov	r3, fp
 800e5c2:	4651      	mov	r1, sl
 800e5c4:	4648      	mov	r0, r9
 800e5c6:	f000 f993 	bl	800e8f0 <__kernel_rem_pio2>
 800e5ca:	9b02      	ldr	r3, [sp, #8]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	4683      	mov	fp, r0
 800e5d0:	f6bf ae46 	bge.w	800e260 <__ieee754_rem_pio2+0x80>
 800e5d4:	e9da 2100 	ldrd	r2, r1, [sl]
 800e5d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5dc:	e9ca 2300 	strd	r2, r3, [sl]
 800e5e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e5ec:	e73a      	b.n	800e464 <__ieee754_rem_pio2+0x284>
 800e5ee:	bf00      	nop
 800e5f0:	41700000 	.word	0x41700000
 800e5f4:	0800fe20 	.word	0x0800fe20

0800e5f8 <__ieee754_sqrt>:
 800e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fc:	ec55 4b10 	vmov	r4, r5, d0
 800e600:	4e55      	ldr	r6, [pc, #340]	; (800e758 <__ieee754_sqrt+0x160>)
 800e602:	43ae      	bics	r6, r5
 800e604:	ee10 0a10 	vmov	r0, s0
 800e608:	ee10 3a10 	vmov	r3, s0
 800e60c:	462a      	mov	r2, r5
 800e60e:	4629      	mov	r1, r5
 800e610:	d110      	bne.n	800e634 <__ieee754_sqrt+0x3c>
 800e612:	ee10 2a10 	vmov	r2, s0
 800e616:	462b      	mov	r3, r5
 800e618:	f7f2 f806 	bl	8000628 <__aeabi_dmul>
 800e61c:	4602      	mov	r2, r0
 800e61e:	460b      	mov	r3, r1
 800e620:	4620      	mov	r0, r4
 800e622:	4629      	mov	r1, r5
 800e624:	f7f1 fe4a 	bl	80002bc <__adddf3>
 800e628:	4604      	mov	r4, r0
 800e62a:	460d      	mov	r5, r1
 800e62c:	ec45 4b10 	vmov	d0, r4, r5
 800e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e634:	2d00      	cmp	r5, #0
 800e636:	dc10      	bgt.n	800e65a <__ieee754_sqrt+0x62>
 800e638:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e63c:	4330      	orrs	r0, r6
 800e63e:	d0f5      	beq.n	800e62c <__ieee754_sqrt+0x34>
 800e640:	b15d      	cbz	r5, 800e65a <__ieee754_sqrt+0x62>
 800e642:	ee10 2a10 	vmov	r2, s0
 800e646:	462b      	mov	r3, r5
 800e648:	ee10 0a10 	vmov	r0, s0
 800e64c:	f7f1 fe34 	bl	80002b8 <__aeabi_dsub>
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	f7f2 f912 	bl	800087c <__aeabi_ddiv>
 800e658:	e7e6      	b.n	800e628 <__ieee754_sqrt+0x30>
 800e65a:	1512      	asrs	r2, r2, #20
 800e65c:	d074      	beq.n	800e748 <__ieee754_sqrt+0x150>
 800e65e:	07d4      	lsls	r4, r2, #31
 800e660:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e664:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e66c:	bf5e      	ittt	pl
 800e66e:	0fda      	lsrpl	r2, r3, #31
 800e670:	005b      	lslpl	r3, r3, #1
 800e672:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e676:	2400      	movs	r4, #0
 800e678:	0fda      	lsrs	r2, r3, #31
 800e67a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e67e:	107f      	asrs	r7, r7, #1
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	2516      	movs	r5, #22
 800e684:	4620      	mov	r0, r4
 800e686:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e68a:	1886      	adds	r6, r0, r2
 800e68c:	428e      	cmp	r6, r1
 800e68e:	bfde      	ittt	le
 800e690:	1b89      	suble	r1, r1, r6
 800e692:	18b0      	addle	r0, r6, r2
 800e694:	18a4      	addle	r4, r4, r2
 800e696:	0049      	lsls	r1, r1, #1
 800e698:	3d01      	subs	r5, #1
 800e69a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e69e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e6a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e6a6:	d1f0      	bne.n	800e68a <__ieee754_sqrt+0x92>
 800e6a8:	462a      	mov	r2, r5
 800e6aa:	f04f 0e20 	mov.w	lr, #32
 800e6ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e6b2:	4281      	cmp	r1, r0
 800e6b4:	eb06 0c05 	add.w	ip, r6, r5
 800e6b8:	dc02      	bgt.n	800e6c0 <__ieee754_sqrt+0xc8>
 800e6ba:	d113      	bne.n	800e6e4 <__ieee754_sqrt+0xec>
 800e6bc:	459c      	cmp	ip, r3
 800e6be:	d811      	bhi.n	800e6e4 <__ieee754_sqrt+0xec>
 800e6c0:	f1bc 0f00 	cmp.w	ip, #0
 800e6c4:	eb0c 0506 	add.w	r5, ip, r6
 800e6c8:	da43      	bge.n	800e752 <__ieee754_sqrt+0x15a>
 800e6ca:	2d00      	cmp	r5, #0
 800e6cc:	db41      	blt.n	800e752 <__ieee754_sqrt+0x15a>
 800e6ce:	f100 0801 	add.w	r8, r0, #1
 800e6d2:	1a09      	subs	r1, r1, r0
 800e6d4:	459c      	cmp	ip, r3
 800e6d6:	bf88      	it	hi
 800e6d8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e6dc:	eba3 030c 	sub.w	r3, r3, ip
 800e6e0:	4432      	add	r2, r6
 800e6e2:	4640      	mov	r0, r8
 800e6e4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e6e8:	f1be 0e01 	subs.w	lr, lr, #1
 800e6ec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e6f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e6f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e6f8:	d1db      	bne.n	800e6b2 <__ieee754_sqrt+0xba>
 800e6fa:	430b      	orrs	r3, r1
 800e6fc:	d006      	beq.n	800e70c <__ieee754_sqrt+0x114>
 800e6fe:	1c50      	adds	r0, r2, #1
 800e700:	bf13      	iteet	ne
 800e702:	3201      	addne	r2, #1
 800e704:	3401      	addeq	r4, #1
 800e706:	4672      	moveq	r2, lr
 800e708:	f022 0201 	bicne.w	r2, r2, #1
 800e70c:	1063      	asrs	r3, r4, #1
 800e70e:	0852      	lsrs	r2, r2, #1
 800e710:	07e1      	lsls	r1, r4, #31
 800e712:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e716:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e71a:	bf48      	it	mi
 800e71c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e720:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e724:	4614      	mov	r4, r2
 800e726:	e781      	b.n	800e62c <__ieee754_sqrt+0x34>
 800e728:	0ad9      	lsrs	r1, r3, #11
 800e72a:	3815      	subs	r0, #21
 800e72c:	055b      	lsls	r3, r3, #21
 800e72e:	2900      	cmp	r1, #0
 800e730:	d0fa      	beq.n	800e728 <__ieee754_sqrt+0x130>
 800e732:	02cd      	lsls	r5, r1, #11
 800e734:	d50a      	bpl.n	800e74c <__ieee754_sqrt+0x154>
 800e736:	f1c2 0420 	rsb	r4, r2, #32
 800e73a:	fa23 f404 	lsr.w	r4, r3, r4
 800e73e:	1e55      	subs	r5, r2, #1
 800e740:	4093      	lsls	r3, r2
 800e742:	4321      	orrs	r1, r4
 800e744:	1b42      	subs	r2, r0, r5
 800e746:	e78a      	b.n	800e65e <__ieee754_sqrt+0x66>
 800e748:	4610      	mov	r0, r2
 800e74a:	e7f0      	b.n	800e72e <__ieee754_sqrt+0x136>
 800e74c:	0049      	lsls	r1, r1, #1
 800e74e:	3201      	adds	r2, #1
 800e750:	e7ef      	b.n	800e732 <__ieee754_sqrt+0x13a>
 800e752:	4680      	mov	r8, r0
 800e754:	e7bd      	b.n	800e6d2 <__ieee754_sqrt+0xda>
 800e756:	bf00      	nop
 800e758:	7ff00000 	.word	0x7ff00000
 800e75c:	00000000 	.word	0x00000000

0800e760 <__kernel_cos>:
 800e760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	ec57 6b10 	vmov	r6, r7, d0
 800e768:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e76c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e770:	ed8d 1b00 	vstr	d1, [sp]
 800e774:	da07      	bge.n	800e786 <__kernel_cos+0x26>
 800e776:	ee10 0a10 	vmov	r0, s0
 800e77a:	4639      	mov	r1, r7
 800e77c:	f7f2 fa04 	bl	8000b88 <__aeabi_d2iz>
 800e780:	2800      	cmp	r0, #0
 800e782:	f000 8088 	beq.w	800e896 <__kernel_cos+0x136>
 800e786:	4632      	mov	r2, r6
 800e788:	463b      	mov	r3, r7
 800e78a:	4630      	mov	r0, r6
 800e78c:	4639      	mov	r1, r7
 800e78e:	f7f1 ff4b 	bl	8000628 <__aeabi_dmul>
 800e792:	4b51      	ldr	r3, [pc, #324]	; (800e8d8 <__kernel_cos+0x178>)
 800e794:	2200      	movs	r2, #0
 800e796:	4604      	mov	r4, r0
 800e798:	460d      	mov	r5, r1
 800e79a:	f7f1 ff45 	bl	8000628 <__aeabi_dmul>
 800e79e:	a340      	add	r3, pc, #256	; (adr r3, 800e8a0 <__kernel_cos+0x140>)
 800e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a4:	4682      	mov	sl, r0
 800e7a6:	468b      	mov	fp, r1
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	f7f1 ff3c 	bl	8000628 <__aeabi_dmul>
 800e7b0:	a33d      	add	r3, pc, #244	; (adr r3, 800e8a8 <__kernel_cos+0x148>)
 800e7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b6:	f7f1 fd81 	bl	80002bc <__adddf3>
 800e7ba:	4622      	mov	r2, r4
 800e7bc:	462b      	mov	r3, r5
 800e7be:	f7f1 ff33 	bl	8000628 <__aeabi_dmul>
 800e7c2:	a33b      	add	r3, pc, #236	; (adr r3, 800e8b0 <__kernel_cos+0x150>)
 800e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c8:	f7f1 fd76 	bl	80002b8 <__aeabi_dsub>
 800e7cc:	4622      	mov	r2, r4
 800e7ce:	462b      	mov	r3, r5
 800e7d0:	f7f1 ff2a 	bl	8000628 <__aeabi_dmul>
 800e7d4:	a338      	add	r3, pc, #224	; (adr r3, 800e8b8 <__kernel_cos+0x158>)
 800e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7da:	f7f1 fd6f 	bl	80002bc <__adddf3>
 800e7de:	4622      	mov	r2, r4
 800e7e0:	462b      	mov	r3, r5
 800e7e2:	f7f1 ff21 	bl	8000628 <__aeabi_dmul>
 800e7e6:	a336      	add	r3, pc, #216	; (adr r3, 800e8c0 <__kernel_cos+0x160>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	f7f1 fd64 	bl	80002b8 <__aeabi_dsub>
 800e7f0:	4622      	mov	r2, r4
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	f7f1 ff18 	bl	8000628 <__aeabi_dmul>
 800e7f8:	a333      	add	r3, pc, #204	; (adr r3, 800e8c8 <__kernel_cos+0x168>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	f7f1 fd5d 	bl	80002bc <__adddf3>
 800e802:	4622      	mov	r2, r4
 800e804:	462b      	mov	r3, r5
 800e806:	f7f1 ff0f 	bl	8000628 <__aeabi_dmul>
 800e80a:	4622      	mov	r2, r4
 800e80c:	462b      	mov	r3, r5
 800e80e:	f7f1 ff0b 	bl	8000628 <__aeabi_dmul>
 800e812:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e816:	4604      	mov	r4, r0
 800e818:	460d      	mov	r5, r1
 800e81a:	4630      	mov	r0, r6
 800e81c:	4639      	mov	r1, r7
 800e81e:	f7f1 ff03 	bl	8000628 <__aeabi_dmul>
 800e822:	460b      	mov	r3, r1
 800e824:	4602      	mov	r2, r0
 800e826:	4629      	mov	r1, r5
 800e828:	4620      	mov	r0, r4
 800e82a:	f7f1 fd45 	bl	80002b8 <__aeabi_dsub>
 800e82e:	4b2b      	ldr	r3, [pc, #172]	; (800e8dc <__kernel_cos+0x17c>)
 800e830:	4598      	cmp	r8, r3
 800e832:	4606      	mov	r6, r0
 800e834:	460f      	mov	r7, r1
 800e836:	dc10      	bgt.n	800e85a <__kernel_cos+0xfa>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4650      	mov	r0, sl
 800e83e:	4659      	mov	r1, fp
 800e840:	f7f1 fd3a 	bl	80002b8 <__aeabi_dsub>
 800e844:	460b      	mov	r3, r1
 800e846:	4926      	ldr	r1, [pc, #152]	; (800e8e0 <__kernel_cos+0x180>)
 800e848:	4602      	mov	r2, r0
 800e84a:	2000      	movs	r0, #0
 800e84c:	f7f1 fd34 	bl	80002b8 <__aeabi_dsub>
 800e850:	ec41 0b10 	vmov	d0, r0, r1
 800e854:	b003      	add	sp, #12
 800e856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85a:	4b22      	ldr	r3, [pc, #136]	; (800e8e4 <__kernel_cos+0x184>)
 800e85c:	4920      	ldr	r1, [pc, #128]	; (800e8e0 <__kernel_cos+0x180>)
 800e85e:	4598      	cmp	r8, r3
 800e860:	bfcc      	ite	gt
 800e862:	4d21      	ldrgt	r5, [pc, #132]	; (800e8e8 <__kernel_cos+0x188>)
 800e864:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e868:	2400      	movs	r4, #0
 800e86a:	4622      	mov	r2, r4
 800e86c:	462b      	mov	r3, r5
 800e86e:	2000      	movs	r0, #0
 800e870:	f7f1 fd22 	bl	80002b8 <__aeabi_dsub>
 800e874:	4622      	mov	r2, r4
 800e876:	4680      	mov	r8, r0
 800e878:	4689      	mov	r9, r1
 800e87a:	462b      	mov	r3, r5
 800e87c:	4650      	mov	r0, sl
 800e87e:	4659      	mov	r1, fp
 800e880:	f7f1 fd1a 	bl	80002b8 <__aeabi_dsub>
 800e884:	4632      	mov	r2, r6
 800e886:	463b      	mov	r3, r7
 800e888:	f7f1 fd16 	bl	80002b8 <__aeabi_dsub>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	4640      	mov	r0, r8
 800e892:	4649      	mov	r1, r9
 800e894:	e7da      	b.n	800e84c <__kernel_cos+0xec>
 800e896:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e8d0 <__kernel_cos+0x170>
 800e89a:	e7db      	b.n	800e854 <__kernel_cos+0xf4>
 800e89c:	f3af 8000 	nop.w
 800e8a0:	be8838d4 	.word	0xbe8838d4
 800e8a4:	bda8fae9 	.word	0xbda8fae9
 800e8a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e8ac:	3e21ee9e 	.word	0x3e21ee9e
 800e8b0:	809c52ad 	.word	0x809c52ad
 800e8b4:	3e927e4f 	.word	0x3e927e4f
 800e8b8:	19cb1590 	.word	0x19cb1590
 800e8bc:	3efa01a0 	.word	0x3efa01a0
 800e8c0:	16c15177 	.word	0x16c15177
 800e8c4:	3f56c16c 	.word	0x3f56c16c
 800e8c8:	5555554c 	.word	0x5555554c
 800e8cc:	3fa55555 	.word	0x3fa55555
 800e8d0:	00000000 	.word	0x00000000
 800e8d4:	3ff00000 	.word	0x3ff00000
 800e8d8:	3fe00000 	.word	0x3fe00000
 800e8dc:	3fd33332 	.word	0x3fd33332
 800e8e0:	3ff00000 	.word	0x3ff00000
 800e8e4:	3fe90000 	.word	0x3fe90000
 800e8e8:	3fd20000 	.word	0x3fd20000
 800e8ec:	00000000 	.word	0x00000000

0800e8f0 <__kernel_rem_pio2>:
 800e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f4:	ed2d 8b02 	vpush	{d8}
 800e8f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e8fc:	f112 0f14 	cmn.w	r2, #20
 800e900:	9308      	str	r3, [sp, #32]
 800e902:	9101      	str	r1, [sp, #4]
 800e904:	4bc4      	ldr	r3, [pc, #784]	; (800ec18 <__kernel_rem_pio2+0x328>)
 800e906:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e908:	900b      	str	r0, [sp, #44]	; 0x2c
 800e90a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e90e:	9302      	str	r3, [sp, #8]
 800e910:	9b08      	ldr	r3, [sp, #32]
 800e912:	f103 33ff 	add.w	r3, r3, #4294967295
 800e916:	bfa8      	it	ge
 800e918:	1ed4      	subge	r4, r2, #3
 800e91a:	9306      	str	r3, [sp, #24]
 800e91c:	bfb2      	itee	lt
 800e91e:	2400      	movlt	r4, #0
 800e920:	2318      	movge	r3, #24
 800e922:	fb94 f4f3 	sdivge	r4, r4, r3
 800e926:	f06f 0317 	mvn.w	r3, #23
 800e92a:	fb04 3303 	mla	r3, r4, r3, r3
 800e92e:	eb03 0a02 	add.w	sl, r3, r2
 800e932:	9b02      	ldr	r3, [sp, #8]
 800e934:	9a06      	ldr	r2, [sp, #24]
 800e936:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ec08 <__kernel_rem_pio2+0x318>
 800e93a:	eb03 0802 	add.w	r8, r3, r2
 800e93e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e940:	1aa7      	subs	r7, r4, r2
 800e942:	ae22      	add	r6, sp, #136	; 0x88
 800e944:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e948:	2500      	movs	r5, #0
 800e94a:	4545      	cmp	r5, r8
 800e94c:	dd13      	ble.n	800e976 <__kernel_rem_pio2+0x86>
 800e94e:	9b08      	ldr	r3, [sp, #32]
 800e950:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ec08 <__kernel_rem_pio2+0x318>
 800e954:	aa22      	add	r2, sp, #136	; 0x88
 800e956:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e95a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e95e:	f04f 0800 	mov.w	r8, #0
 800e962:	9b02      	ldr	r3, [sp, #8]
 800e964:	4598      	cmp	r8, r3
 800e966:	dc2f      	bgt.n	800e9c8 <__kernel_rem_pio2+0xd8>
 800e968:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e96c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e970:	462f      	mov	r7, r5
 800e972:	2600      	movs	r6, #0
 800e974:	e01b      	b.n	800e9ae <__kernel_rem_pio2+0xbe>
 800e976:	42ef      	cmn	r7, r5
 800e978:	d407      	bmi.n	800e98a <__kernel_rem_pio2+0x9a>
 800e97a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e97e:	f7f1 fde9 	bl	8000554 <__aeabi_i2d>
 800e982:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e986:	3501      	adds	r5, #1
 800e988:	e7df      	b.n	800e94a <__kernel_rem_pio2+0x5a>
 800e98a:	ec51 0b18 	vmov	r0, r1, d8
 800e98e:	e7f8      	b.n	800e982 <__kernel_rem_pio2+0x92>
 800e990:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e994:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e998:	f7f1 fe46 	bl	8000628 <__aeabi_dmul>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9a4:	f7f1 fc8a 	bl	80002bc <__adddf3>
 800e9a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9ac:	3601      	adds	r6, #1
 800e9ae:	9b06      	ldr	r3, [sp, #24]
 800e9b0:	429e      	cmp	r6, r3
 800e9b2:	f1a7 0708 	sub.w	r7, r7, #8
 800e9b6:	ddeb      	ble.n	800e990 <__kernel_rem_pio2+0xa0>
 800e9b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e9bc:	f108 0801 	add.w	r8, r8, #1
 800e9c0:	ecab 7b02 	vstmia	fp!, {d7}
 800e9c4:	3508      	adds	r5, #8
 800e9c6:	e7cc      	b.n	800e962 <__kernel_rem_pio2+0x72>
 800e9c8:	9b02      	ldr	r3, [sp, #8]
 800e9ca:	aa0e      	add	r2, sp, #56	; 0x38
 800e9cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9d0:	930d      	str	r3, [sp, #52]	; 0x34
 800e9d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e9d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e9d8:	9c02      	ldr	r4, [sp, #8]
 800e9da:	930c      	str	r3, [sp, #48]	; 0x30
 800e9dc:	00e3      	lsls	r3, r4, #3
 800e9de:	930a      	str	r3, [sp, #40]	; 0x28
 800e9e0:	ab9a      	add	r3, sp, #616	; 0x268
 800e9e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e9ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e9ee:	ab72      	add	r3, sp, #456	; 0x1c8
 800e9f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e9f4:	46c3      	mov	fp, r8
 800e9f6:	46a1      	mov	r9, r4
 800e9f8:	f1b9 0f00 	cmp.w	r9, #0
 800e9fc:	f1a5 0508 	sub.w	r5, r5, #8
 800ea00:	dc77      	bgt.n	800eaf2 <__kernel_rem_pio2+0x202>
 800ea02:	ec47 6b10 	vmov	d0, r6, r7
 800ea06:	4650      	mov	r0, sl
 800ea08:	f000 fde6 	bl	800f5d8 <scalbn>
 800ea0c:	ec57 6b10 	vmov	r6, r7, d0
 800ea10:	2200      	movs	r2, #0
 800ea12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ea16:	ee10 0a10 	vmov	r0, s0
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	f7f1 fe04 	bl	8000628 <__aeabi_dmul>
 800ea20:	ec41 0b10 	vmov	d0, r0, r1
 800ea24:	f000 fd58 	bl	800f4d8 <floor>
 800ea28:	4b7c      	ldr	r3, [pc, #496]	; (800ec1c <__kernel_rem_pio2+0x32c>)
 800ea2a:	ec51 0b10 	vmov	r0, r1, d0
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f7f1 fdfa 	bl	8000628 <__aeabi_dmul>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	4630      	mov	r0, r6
 800ea3a:	4639      	mov	r1, r7
 800ea3c:	f7f1 fc3c 	bl	80002b8 <__aeabi_dsub>
 800ea40:	460f      	mov	r7, r1
 800ea42:	4606      	mov	r6, r0
 800ea44:	f7f2 f8a0 	bl	8000b88 <__aeabi_d2iz>
 800ea48:	9004      	str	r0, [sp, #16]
 800ea4a:	f7f1 fd83 	bl	8000554 <__aeabi_i2d>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	f7f1 fc2f 	bl	80002b8 <__aeabi_dsub>
 800ea5a:	f1ba 0f00 	cmp.w	sl, #0
 800ea5e:	4606      	mov	r6, r0
 800ea60:	460f      	mov	r7, r1
 800ea62:	dd6d      	ble.n	800eb40 <__kernel_rem_pio2+0x250>
 800ea64:	1e62      	subs	r2, r4, #1
 800ea66:	ab0e      	add	r3, sp, #56	; 0x38
 800ea68:	9d04      	ldr	r5, [sp, #16]
 800ea6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea6e:	f1ca 0118 	rsb	r1, sl, #24
 800ea72:	fa40 f301 	asr.w	r3, r0, r1
 800ea76:	441d      	add	r5, r3
 800ea78:	408b      	lsls	r3, r1
 800ea7a:	1ac0      	subs	r0, r0, r3
 800ea7c:	ab0e      	add	r3, sp, #56	; 0x38
 800ea7e:	9504      	str	r5, [sp, #16]
 800ea80:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ea84:	f1ca 0317 	rsb	r3, sl, #23
 800ea88:	fa40 fb03 	asr.w	fp, r0, r3
 800ea8c:	f1bb 0f00 	cmp.w	fp, #0
 800ea90:	dd65      	ble.n	800eb5e <__kernel_rem_pio2+0x26e>
 800ea92:	9b04      	ldr	r3, [sp, #16]
 800ea94:	2200      	movs	r2, #0
 800ea96:	3301      	adds	r3, #1
 800ea98:	9304      	str	r3, [sp, #16]
 800ea9a:	4615      	mov	r5, r2
 800ea9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800eaa0:	4294      	cmp	r4, r2
 800eaa2:	f300 809c 	bgt.w	800ebde <__kernel_rem_pio2+0x2ee>
 800eaa6:	f1ba 0f00 	cmp.w	sl, #0
 800eaaa:	dd07      	ble.n	800eabc <__kernel_rem_pio2+0x1cc>
 800eaac:	f1ba 0f01 	cmp.w	sl, #1
 800eab0:	f000 80c0 	beq.w	800ec34 <__kernel_rem_pio2+0x344>
 800eab4:	f1ba 0f02 	cmp.w	sl, #2
 800eab8:	f000 80c6 	beq.w	800ec48 <__kernel_rem_pio2+0x358>
 800eabc:	f1bb 0f02 	cmp.w	fp, #2
 800eac0:	d14d      	bne.n	800eb5e <__kernel_rem_pio2+0x26e>
 800eac2:	4632      	mov	r2, r6
 800eac4:	463b      	mov	r3, r7
 800eac6:	4956      	ldr	r1, [pc, #344]	; (800ec20 <__kernel_rem_pio2+0x330>)
 800eac8:	2000      	movs	r0, #0
 800eaca:	f7f1 fbf5 	bl	80002b8 <__aeabi_dsub>
 800eace:	4606      	mov	r6, r0
 800ead0:	460f      	mov	r7, r1
 800ead2:	2d00      	cmp	r5, #0
 800ead4:	d043      	beq.n	800eb5e <__kernel_rem_pio2+0x26e>
 800ead6:	4650      	mov	r0, sl
 800ead8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ec10 <__kernel_rem_pio2+0x320>
 800eadc:	f000 fd7c 	bl	800f5d8 <scalbn>
 800eae0:	4630      	mov	r0, r6
 800eae2:	4639      	mov	r1, r7
 800eae4:	ec53 2b10 	vmov	r2, r3, d0
 800eae8:	f7f1 fbe6 	bl	80002b8 <__aeabi_dsub>
 800eaec:	4606      	mov	r6, r0
 800eaee:	460f      	mov	r7, r1
 800eaf0:	e035      	b.n	800eb5e <__kernel_rem_pio2+0x26e>
 800eaf2:	4b4c      	ldr	r3, [pc, #304]	; (800ec24 <__kernel_rem_pio2+0x334>)
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	4639      	mov	r1, r7
 800eafa:	f7f1 fd95 	bl	8000628 <__aeabi_dmul>
 800eafe:	f7f2 f843 	bl	8000b88 <__aeabi_d2iz>
 800eb02:	f7f1 fd27 	bl	8000554 <__aeabi_i2d>
 800eb06:	4602      	mov	r2, r0
 800eb08:	460b      	mov	r3, r1
 800eb0a:	ec43 2b18 	vmov	d8, r2, r3
 800eb0e:	4b46      	ldr	r3, [pc, #280]	; (800ec28 <__kernel_rem_pio2+0x338>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	f7f1 fd89 	bl	8000628 <__aeabi_dmul>
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	f7f1 fbcb 	bl	80002b8 <__aeabi_dsub>
 800eb22:	f7f2 f831 	bl	8000b88 <__aeabi_d2iz>
 800eb26:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb2a:	f84b 0b04 	str.w	r0, [fp], #4
 800eb2e:	ec51 0b18 	vmov	r0, r1, d8
 800eb32:	f7f1 fbc3 	bl	80002bc <__adddf3>
 800eb36:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	460f      	mov	r7, r1
 800eb3e:	e75b      	b.n	800e9f8 <__kernel_rem_pio2+0x108>
 800eb40:	d106      	bne.n	800eb50 <__kernel_rem_pio2+0x260>
 800eb42:	1e63      	subs	r3, r4, #1
 800eb44:	aa0e      	add	r2, sp, #56	; 0x38
 800eb46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eb4a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800eb4e:	e79d      	b.n	800ea8c <__kernel_rem_pio2+0x19c>
 800eb50:	4b36      	ldr	r3, [pc, #216]	; (800ec2c <__kernel_rem_pio2+0x33c>)
 800eb52:	2200      	movs	r2, #0
 800eb54:	f7f1 ffee 	bl	8000b34 <__aeabi_dcmpge>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d13d      	bne.n	800ebd8 <__kernel_rem_pio2+0x2e8>
 800eb5c:	4683      	mov	fp, r0
 800eb5e:	2200      	movs	r2, #0
 800eb60:	2300      	movs	r3, #0
 800eb62:	4630      	mov	r0, r6
 800eb64:	4639      	mov	r1, r7
 800eb66:	f7f1 ffc7 	bl	8000af8 <__aeabi_dcmpeq>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	f000 80c0 	beq.w	800ecf0 <__kernel_rem_pio2+0x400>
 800eb70:	1e65      	subs	r5, r4, #1
 800eb72:	462b      	mov	r3, r5
 800eb74:	2200      	movs	r2, #0
 800eb76:	9902      	ldr	r1, [sp, #8]
 800eb78:	428b      	cmp	r3, r1
 800eb7a:	da6c      	bge.n	800ec56 <__kernel_rem_pio2+0x366>
 800eb7c:	2a00      	cmp	r2, #0
 800eb7e:	f000 8089 	beq.w	800ec94 <__kernel_rem_pio2+0x3a4>
 800eb82:	ab0e      	add	r3, sp, #56	; 0x38
 800eb84:	f1aa 0a18 	sub.w	sl, sl, #24
 800eb88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 80ad 	beq.w	800ecec <__kernel_rem_pio2+0x3fc>
 800eb92:	4650      	mov	r0, sl
 800eb94:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ec10 <__kernel_rem_pio2+0x320>
 800eb98:	f000 fd1e 	bl	800f5d8 <scalbn>
 800eb9c:	ab9a      	add	r3, sp, #616	; 0x268
 800eb9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eba2:	ec57 6b10 	vmov	r6, r7, d0
 800eba6:	00ec      	lsls	r4, r5, #3
 800eba8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ebac:	46aa      	mov	sl, r5
 800ebae:	f1ba 0f00 	cmp.w	sl, #0
 800ebb2:	f280 80d6 	bge.w	800ed62 <__kernel_rem_pio2+0x472>
 800ebb6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ec08 <__kernel_rem_pio2+0x318>
 800ebba:	462e      	mov	r6, r5
 800ebbc:	2e00      	cmp	r6, #0
 800ebbe:	f2c0 8104 	blt.w	800edca <__kernel_rem_pio2+0x4da>
 800ebc2:	ab72      	add	r3, sp, #456	; 0x1c8
 800ebc4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ebc8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ec30 <__kernel_rem_pio2+0x340>
 800ebcc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ebd0:	f04f 0800 	mov.w	r8, #0
 800ebd4:	1baf      	subs	r7, r5, r6
 800ebd6:	e0ea      	b.n	800edae <__kernel_rem_pio2+0x4be>
 800ebd8:	f04f 0b02 	mov.w	fp, #2
 800ebdc:	e759      	b.n	800ea92 <__kernel_rem_pio2+0x1a2>
 800ebde:	f8d8 3000 	ldr.w	r3, [r8]
 800ebe2:	b955      	cbnz	r5, 800ebfa <__kernel_rem_pio2+0x30a>
 800ebe4:	b123      	cbz	r3, 800ebf0 <__kernel_rem_pio2+0x300>
 800ebe6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ebea:	f8c8 3000 	str.w	r3, [r8]
 800ebee:	2301      	movs	r3, #1
 800ebf0:	3201      	adds	r2, #1
 800ebf2:	f108 0804 	add.w	r8, r8, #4
 800ebf6:	461d      	mov	r5, r3
 800ebf8:	e752      	b.n	800eaa0 <__kernel_rem_pio2+0x1b0>
 800ebfa:	1acb      	subs	r3, r1, r3
 800ebfc:	f8c8 3000 	str.w	r3, [r8]
 800ec00:	462b      	mov	r3, r5
 800ec02:	e7f5      	b.n	800ebf0 <__kernel_rem_pio2+0x300>
 800ec04:	f3af 8000 	nop.w
	...
 800ec14:	3ff00000 	.word	0x3ff00000
 800ec18:	0800ff68 	.word	0x0800ff68
 800ec1c:	40200000 	.word	0x40200000
 800ec20:	3ff00000 	.word	0x3ff00000
 800ec24:	3e700000 	.word	0x3e700000
 800ec28:	41700000 	.word	0x41700000
 800ec2c:	3fe00000 	.word	0x3fe00000
 800ec30:	0800ff28 	.word	0x0800ff28
 800ec34:	1e62      	subs	r2, r4, #1
 800ec36:	ab0e      	add	r3, sp, #56	; 0x38
 800ec38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec40:	a90e      	add	r1, sp, #56	; 0x38
 800ec42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ec46:	e739      	b.n	800eabc <__kernel_rem_pio2+0x1cc>
 800ec48:	1e62      	subs	r2, r4, #1
 800ec4a:	ab0e      	add	r3, sp, #56	; 0x38
 800ec4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec54:	e7f4      	b.n	800ec40 <__kernel_rem_pio2+0x350>
 800ec56:	a90e      	add	r1, sp, #56	; 0x38
 800ec58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	430a      	orrs	r2, r1
 800ec60:	e789      	b.n	800eb76 <__kernel_rem_pio2+0x286>
 800ec62:	3301      	adds	r3, #1
 800ec64:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ec68:	2900      	cmp	r1, #0
 800ec6a:	d0fa      	beq.n	800ec62 <__kernel_rem_pio2+0x372>
 800ec6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec6e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ec72:	446a      	add	r2, sp
 800ec74:	3a98      	subs	r2, #152	; 0x98
 800ec76:	920a      	str	r2, [sp, #40]	; 0x28
 800ec78:	9a08      	ldr	r2, [sp, #32]
 800ec7a:	18e3      	adds	r3, r4, r3
 800ec7c:	18a5      	adds	r5, r4, r2
 800ec7e:	aa22      	add	r2, sp, #136	; 0x88
 800ec80:	f104 0801 	add.w	r8, r4, #1
 800ec84:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	9b04      	ldr	r3, [sp, #16]
 800ec8c:	4543      	cmp	r3, r8
 800ec8e:	da04      	bge.n	800ec9a <__kernel_rem_pio2+0x3aa>
 800ec90:	461c      	mov	r4, r3
 800ec92:	e6a3      	b.n	800e9dc <__kernel_rem_pio2+0xec>
 800ec94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec96:	2301      	movs	r3, #1
 800ec98:	e7e4      	b.n	800ec64 <__kernel_rem_pio2+0x374>
 800ec9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eca0:	f7f1 fc58 	bl	8000554 <__aeabi_i2d>
 800eca4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecaa:	46ab      	mov	fp, r5
 800ecac:	461c      	mov	r4, r3
 800ecae:	f04f 0900 	mov.w	r9, #0
 800ecb2:	2600      	movs	r6, #0
 800ecb4:	2700      	movs	r7, #0
 800ecb6:	9b06      	ldr	r3, [sp, #24]
 800ecb8:	4599      	cmp	r9, r3
 800ecba:	dd06      	ble.n	800ecca <__kernel_rem_pio2+0x3da>
 800ecbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecbe:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ecc2:	f108 0801 	add.w	r8, r8, #1
 800ecc6:	930a      	str	r3, [sp, #40]	; 0x28
 800ecc8:	e7df      	b.n	800ec8a <__kernel_rem_pio2+0x39a>
 800ecca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ecce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ecd2:	f7f1 fca9 	bl	8000628 <__aeabi_dmul>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	4630      	mov	r0, r6
 800ecdc:	4639      	mov	r1, r7
 800ecde:	f7f1 faed 	bl	80002bc <__adddf3>
 800ece2:	f109 0901 	add.w	r9, r9, #1
 800ece6:	4606      	mov	r6, r0
 800ece8:	460f      	mov	r7, r1
 800ecea:	e7e4      	b.n	800ecb6 <__kernel_rem_pio2+0x3c6>
 800ecec:	3d01      	subs	r5, #1
 800ecee:	e748      	b.n	800eb82 <__kernel_rem_pio2+0x292>
 800ecf0:	ec47 6b10 	vmov	d0, r6, r7
 800ecf4:	f1ca 0000 	rsb	r0, sl, #0
 800ecf8:	f000 fc6e 	bl	800f5d8 <scalbn>
 800ecfc:	ec57 6b10 	vmov	r6, r7, d0
 800ed00:	4ba0      	ldr	r3, [pc, #640]	; (800ef84 <__kernel_rem_pio2+0x694>)
 800ed02:	ee10 0a10 	vmov	r0, s0
 800ed06:	2200      	movs	r2, #0
 800ed08:	4639      	mov	r1, r7
 800ed0a:	f7f1 ff13 	bl	8000b34 <__aeabi_dcmpge>
 800ed0e:	b1f8      	cbz	r0, 800ed50 <__kernel_rem_pio2+0x460>
 800ed10:	4b9d      	ldr	r3, [pc, #628]	; (800ef88 <__kernel_rem_pio2+0x698>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	4630      	mov	r0, r6
 800ed16:	4639      	mov	r1, r7
 800ed18:	f7f1 fc86 	bl	8000628 <__aeabi_dmul>
 800ed1c:	f7f1 ff34 	bl	8000b88 <__aeabi_d2iz>
 800ed20:	4680      	mov	r8, r0
 800ed22:	f7f1 fc17 	bl	8000554 <__aeabi_i2d>
 800ed26:	4b97      	ldr	r3, [pc, #604]	; (800ef84 <__kernel_rem_pio2+0x694>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f7f1 fc7d 	bl	8000628 <__aeabi_dmul>
 800ed2e:	460b      	mov	r3, r1
 800ed30:	4602      	mov	r2, r0
 800ed32:	4639      	mov	r1, r7
 800ed34:	4630      	mov	r0, r6
 800ed36:	f7f1 fabf 	bl	80002b8 <__aeabi_dsub>
 800ed3a:	f7f1 ff25 	bl	8000b88 <__aeabi_d2iz>
 800ed3e:	1c65      	adds	r5, r4, #1
 800ed40:	ab0e      	add	r3, sp, #56	; 0x38
 800ed42:	f10a 0a18 	add.w	sl, sl, #24
 800ed46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed4a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ed4e:	e720      	b.n	800eb92 <__kernel_rem_pio2+0x2a2>
 800ed50:	4630      	mov	r0, r6
 800ed52:	4639      	mov	r1, r7
 800ed54:	f7f1 ff18 	bl	8000b88 <__aeabi_d2iz>
 800ed58:	ab0e      	add	r3, sp, #56	; 0x38
 800ed5a:	4625      	mov	r5, r4
 800ed5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed60:	e717      	b.n	800eb92 <__kernel_rem_pio2+0x2a2>
 800ed62:	ab0e      	add	r3, sp, #56	; 0x38
 800ed64:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ed68:	f7f1 fbf4 	bl	8000554 <__aeabi_i2d>
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	463b      	mov	r3, r7
 800ed70:	f7f1 fc5a 	bl	8000628 <__aeabi_dmul>
 800ed74:	4b84      	ldr	r3, [pc, #528]	; (800ef88 <__kernel_rem_pio2+0x698>)
 800ed76:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	4639      	mov	r1, r7
 800ed80:	f7f1 fc52 	bl	8000628 <__aeabi_dmul>
 800ed84:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed88:	4606      	mov	r6, r0
 800ed8a:	460f      	mov	r7, r1
 800ed8c:	e70f      	b.n	800ebae <__kernel_rem_pio2+0x2be>
 800ed8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ed92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ed96:	f7f1 fc47 	bl	8000628 <__aeabi_dmul>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eda2:	f7f1 fa8b 	bl	80002bc <__adddf3>
 800eda6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800edaa:	f108 0801 	add.w	r8, r8, #1
 800edae:	9b02      	ldr	r3, [sp, #8]
 800edb0:	4598      	cmp	r8, r3
 800edb2:	dc01      	bgt.n	800edb8 <__kernel_rem_pio2+0x4c8>
 800edb4:	45b8      	cmp	r8, r7
 800edb6:	ddea      	ble.n	800ed8e <__kernel_rem_pio2+0x49e>
 800edb8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800edbc:	ab4a      	add	r3, sp, #296	; 0x128
 800edbe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800edc2:	ed87 7b00 	vstr	d7, [r7]
 800edc6:	3e01      	subs	r6, #1
 800edc8:	e6f8      	b.n	800ebbc <__kernel_rem_pio2+0x2cc>
 800edca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800edcc:	2b02      	cmp	r3, #2
 800edce:	dc0b      	bgt.n	800ede8 <__kernel_rem_pio2+0x4f8>
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	dc35      	bgt.n	800ee40 <__kernel_rem_pio2+0x550>
 800edd4:	d059      	beq.n	800ee8a <__kernel_rem_pio2+0x59a>
 800edd6:	9b04      	ldr	r3, [sp, #16]
 800edd8:	f003 0007 	and.w	r0, r3, #7
 800eddc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ede0:	ecbd 8b02 	vpop	{d8}
 800ede4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800edea:	2b03      	cmp	r3, #3
 800edec:	d1f3      	bne.n	800edd6 <__kernel_rem_pio2+0x4e6>
 800edee:	ab4a      	add	r3, sp, #296	; 0x128
 800edf0:	4423      	add	r3, r4
 800edf2:	9306      	str	r3, [sp, #24]
 800edf4:	461c      	mov	r4, r3
 800edf6:	469a      	mov	sl, r3
 800edf8:	9502      	str	r5, [sp, #8]
 800edfa:	9b02      	ldr	r3, [sp, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f1aa 0a08 	sub.w	sl, sl, #8
 800ee02:	dc6b      	bgt.n	800eedc <__kernel_rem_pio2+0x5ec>
 800ee04:	46aa      	mov	sl, r5
 800ee06:	f1ba 0f01 	cmp.w	sl, #1
 800ee0a:	f1a4 0408 	sub.w	r4, r4, #8
 800ee0e:	f300 8085 	bgt.w	800ef1c <__kernel_rem_pio2+0x62c>
 800ee12:	9c06      	ldr	r4, [sp, #24]
 800ee14:	2000      	movs	r0, #0
 800ee16:	3408      	adds	r4, #8
 800ee18:	2100      	movs	r1, #0
 800ee1a:	2d01      	cmp	r5, #1
 800ee1c:	f300 809d 	bgt.w	800ef5a <__kernel_rem_pio2+0x66a>
 800ee20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ee24:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ee28:	f1bb 0f00 	cmp.w	fp, #0
 800ee2c:	f040 809b 	bne.w	800ef66 <__kernel_rem_pio2+0x676>
 800ee30:	9b01      	ldr	r3, [sp, #4]
 800ee32:	e9c3 5600 	strd	r5, r6, [r3]
 800ee36:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ee3a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ee3e:	e7ca      	b.n	800edd6 <__kernel_rem_pio2+0x4e6>
 800ee40:	3408      	adds	r4, #8
 800ee42:	ab4a      	add	r3, sp, #296	; 0x128
 800ee44:	441c      	add	r4, r3
 800ee46:	462e      	mov	r6, r5
 800ee48:	2000      	movs	r0, #0
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	2e00      	cmp	r6, #0
 800ee4e:	da36      	bge.n	800eebe <__kernel_rem_pio2+0x5ce>
 800ee50:	f1bb 0f00 	cmp.w	fp, #0
 800ee54:	d039      	beq.n	800eeca <__kernel_rem_pio2+0x5da>
 800ee56:	4602      	mov	r2, r0
 800ee58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee5c:	9c01      	ldr	r4, [sp, #4]
 800ee5e:	e9c4 2300 	strd	r2, r3, [r4]
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ee6a:	f7f1 fa25 	bl	80002b8 <__aeabi_dsub>
 800ee6e:	ae4c      	add	r6, sp, #304	; 0x130
 800ee70:	2401      	movs	r4, #1
 800ee72:	42a5      	cmp	r5, r4
 800ee74:	da2c      	bge.n	800eed0 <__kernel_rem_pio2+0x5e0>
 800ee76:	f1bb 0f00 	cmp.w	fp, #0
 800ee7a:	d002      	beq.n	800ee82 <__kernel_rem_pio2+0x592>
 800ee7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee80:	4619      	mov	r1, r3
 800ee82:	9b01      	ldr	r3, [sp, #4]
 800ee84:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ee88:	e7a5      	b.n	800edd6 <__kernel_rem_pio2+0x4e6>
 800ee8a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ee8e:	eb0d 0403 	add.w	r4, sp, r3
 800ee92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ee96:	2000      	movs	r0, #0
 800ee98:	2100      	movs	r1, #0
 800ee9a:	2d00      	cmp	r5, #0
 800ee9c:	da09      	bge.n	800eeb2 <__kernel_rem_pio2+0x5c2>
 800ee9e:	f1bb 0f00 	cmp.w	fp, #0
 800eea2:	d002      	beq.n	800eeaa <__kernel_rem_pio2+0x5ba>
 800eea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eea8:	4619      	mov	r1, r3
 800eeaa:	9b01      	ldr	r3, [sp, #4]
 800eeac:	e9c3 0100 	strd	r0, r1, [r3]
 800eeb0:	e791      	b.n	800edd6 <__kernel_rem_pio2+0x4e6>
 800eeb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eeb6:	f7f1 fa01 	bl	80002bc <__adddf3>
 800eeba:	3d01      	subs	r5, #1
 800eebc:	e7ed      	b.n	800ee9a <__kernel_rem_pio2+0x5aa>
 800eebe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eec2:	f7f1 f9fb 	bl	80002bc <__adddf3>
 800eec6:	3e01      	subs	r6, #1
 800eec8:	e7c0      	b.n	800ee4c <__kernel_rem_pio2+0x55c>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	e7c5      	b.n	800ee5c <__kernel_rem_pio2+0x56c>
 800eed0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800eed4:	f7f1 f9f2 	bl	80002bc <__adddf3>
 800eed8:	3401      	adds	r4, #1
 800eeda:	e7ca      	b.n	800ee72 <__kernel_rem_pio2+0x582>
 800eedc:	e9da 8900 	ldrd	r8, r9, [sl]
 800eee0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800eee4:	9b02      	ldr	r3, [sp, #8]
 800eee6:	3b01      	subs	r3, #1
 800eee8:	9302      	str	r3, [sp, #8]
 800eeea:	4632      	mov	r2, r6
 800eeec:	463b      	mov	r3, r7
 800eeee:	4640      	mov	r0, r8
 800eef0:	4649      	mov	r1, r9
 800eef2:	f7f1 f9e3 	bl	80002bc <__adddf3>
 800eef6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eefa:	4602      	mov	r2, r0
 800eefc:	460b      	mov	r3, r1
 800eefe:	4640      	mov	r0, r8
 800ef00:	4649      	mov	r1, r9
 800ef02:	f7f1 f9d9 	bl	80002b8 <__aeabi_dsub>
 800ef06:	4632      	mov	r2, r6
 800ef08:	463b      	mov	r3, r7
 800ef0a:	f7f1 f9d7 	bl	80002bc <__adddf3>
 800ef0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ef12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef16:	ed8a 7b00 	vstr	d7, [sl]
 800ef1a:	e76e      	b.n	800edfa <__kernel_rem_pio2+0x50a>
 800ef1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ef20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ef24:	4640      	mov	r0, r8
 800ef26:	4632      	mov	r2, r6
 800ef28:	463b      	mov	r3, r7
 800ef2a:	4649      	mov	r1, r9
 800ef2c:	f7f1 f9c6 	bl	80002bc <__adddf3>
 800ef30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
 800ef38:	4640      	mov	r0, r8
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	f7f1 f9bc 	bl	80002b8 <__aeabi_dsub>
 800ef40:	4632      	mov	r2, r6
 800ef42:	463b      	mov	r3, r7
 800ef44:	f7f1 f9ba 	bl	80002bc <__adddf3>
 800ef48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef50:	ed84 7b00 	vstr	d7, [r4]
 800ef54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef58:	e755      	b.n	800ee06 <__kernel_rem_pio2+0x516>
 800ef5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ef5e:	f7f1 f9ad 	bl	80002bc <__adddf3>
 800ef62:	3d01      	subs	r5, #1
 800ef64:	e759      	b.n	800ee1a <__kernel_rem_pio2+0x52a>
 800ef66:	9b01      	ldr	r3, [sp, #4]
 800ef68:	9a01      	ldr	r2, [sp, #4]
 800ef6a:	601d      	str	r5, [r3, #0]
 800ef6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ef70:	605c      	str	r4, [r3, #4]
 800ef72:	609f      	str	r7, [r3, #8]
 800ef74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ef78:	60d3      	str	r3, [r2, #12]
 800ef7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef7e:	6110      	str	r0, [r2, #16]
 800ef80:	6153      	str	r3, [r2, #20]
 800ef82:	e728      	b.n	800edd6 <__kernel_rem_pio2+0x4e6>
 800ef84:	41700000 	.word	0x41700000
 800ef88:	3e700000 	.word	0x3e700000
 800ef8c:	00000000 	.word	0x00000000

0800ef90 <__kernel_sin>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	ed2d 8b04 	vpush	{d8-d9}
 800ef98:	eeb0 8a41 	vmov.f32	s16, s2
 800ef9c:	eef0 8a61 	vmov.f32	s17, s3
 800efa0:	ec55 4b10 	vmov	r4, r5, d0
 800efa4:	b083      	sub	sp, #12
 800efa6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800efaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800efae:	9001      	str	r0, [sp, #4]
 800efb0:	da06      	bge.n	800efc0 <__kernel_sin+0x30>
 800efb2:	ee10 0a10 	vmov	r0, s0
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7f1 fde6 	bl	8000b88 <__aeabi_d2iz>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d051      	beq.n	800f064 <__kernel_sin+0xd4>
 800efc0:	4622      	mov	r2, r4
 800efc2:	462b      	mov	r3, r5
 800efc4:	4620      	mov	r0, r4
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7f1 fb2e 	bl	8000628 <__aeabi_dmul>
 800efcc:	4682      	mov	sl, r0
 800efce:	468b      	mov	fp, r1
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4620      	mov	r0, r4
 800efd6:	4629      	mov	r1, r5
 800efd8:	f7f1 fb26 	bl	8000628 <__aeabi_dmul>
 800efdc:	a341      	add	r3, pc, #260	; (adr r3, 800f0e4 <__kernel_sin+0x154>)
 800efde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe2:	4680      	mov	r8, r0
 800efe4:	4689      	mov	r9, r1
 800efe6:	4650      	mov	r0, sl
 800efe8:	4659      	mov	r1, fp
 800efea:	f7f1 fb1d 	bl	8000628 <__aeabi_dmul>
 800efee:	a33f      	add	r3, pc, #252	; (adr r3, 800f0ec <__kernel_sin+0x15c>)
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	f7f1 f960 	bl	80002b8 <__aeabi_dsub>
 800eff8:	4652      	mov	r2, sl
 800effa:	465b      	mov	r3, fp
 800effc:	f7f1 fb14 	bl	8000628 <__aeabi_dmul>
 800f000:	a33c      	add	r3, pc, #240	; (adr r3, 800f0f4 <__kernel_sin+0x164>)
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	f7f1 f959 	bl	80002bc <__adddf3>
 800f00a:	4652      	mov	r2, sl
 800f00c:	465b      	mov	r3, fp
 800f00e:	f7f1 fb0b 	bl	8000628 <__aeabi_dmul>
 800f012:	a33a      	add	r3, pc, #232	; (adr r3, 800f0fc <__kernel_sin+0x16c>)
 800f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f018:	f7f1 f94e 	bl	80002b8 <__aeabi_dsub>
 800f01c:	4652      	mov	r2, sl
 800f01e:	465b      	mov	r3, fp
 800f020:	f7f1 fb02 	bl	8000628 <__aeabi_dmul>
 800f024:	a337      	add	r3, pc, #220	; (adr r3, 800f104 <__kernel_sin+0x174>)
 800f026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02a:	f7f1 f947 	bl	80002bc <__adddf3>
 800f02e:	9b01      	ldr	r3, [sp, #4]
 800f030:	4606      	mov	r6, r0
 800f032:	460f      	mov	r7, r1
 800f034:	b9eb      	cbnz	r3, 800f072 <__kernel_sin+0xe2>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4650      	mov	r0, sl
 800f03c:	4659      	mov	r1, fp
 800f03e:	f7f1 faf3 	bl	8000628 <__aeabi_dmul>
 800f042:	a325      	add	r3, pc, #148	; (adr r3, 800f0d8 <__kernel_sin+0x148>)
 800f044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f048:	f7f1 f936 	bl	80002b8 <__aeabi_dsub>
 800f04c:	4642      	mov	r2, r8
 800f04e:	464b      	mov	r3, r9
 800f050:	f7f1 faea 	bl	8000628 <__aeabi_dmul>
 800f054:	4602      	mov	r2, r0
 800f056:	460b      	mov	r3, r1
 800f058:	4620      	mov	r0, r4
 800f05a:	4629      	mov	r1, r5
 800f05c:	f7f1 f92e 	bl	80002bc <__adddf3>
 800f060:	4604      	mov	r4, r0
 800f062:	460d      	mov	r5, r1
 800f064:	ec45 4b10 	vmov	d0, r4, r5
 800f068:	b003      	add	sp, #12
 800f06a:	ecbd 8b04 	vpop	{d8-d9}
 800f06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f072:	4b1b      	ldr	r3, [pc, #108]	; (800f0e0 <__kernel_sin+0x150>)
 800f074:	ec51 0b18 	vmov	r0, r1, d8
 800f078:	2200      	movs	r2, #0
 800f07a:	f7f1 fad5 	bl	8000628 <__aeabi_dmul>
 800f07e:	4632      	mov	r2, r6
 800f080:	ec41 0b19 	vmov	d9, r0, r1
 800f084:	463b      	mov	r3, r7
 800f086:	4640      	mov	r0, r8
 800f088:	4649      	mov	r1, r9
 800f08a:	f7f1 facd 	bl	8000628 <__aeabi_dmul>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	ec51 0b19 	vmov	r0, r1, d9
 800f096:	f7f1 f90f 	bl	80002b8 <__aeabi_dsub>
 800f09a:	4652      	mov	r2, sl
 800f09c:	465b      	mov	r3, fp
 800f09e:	f7f1 fac3 	bl	8000628 <__aeabi_dmul>
 800f0a2:	ec53 2b18 	vmov	r2, r3, d8
 800f0a6:	f7f1 f907 	bl	80002b8 <__aeabi_dsub>
 800f0aa:	a30b      	add	r3, pc, #44	; (adr r3, 800f0d8 <__kernel_sin+0x148>)
 800f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b0:	4606      	mov	r6, r0
 800f0b2:	460f      	mov	r7, r1
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	4649      	mov	r1, r9
 800f0b8:	f7f1 fab6 	bl	8000628 <__aeabi_dmul>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	f7f1 f8fa 	bl	80002bc <__adddf3>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	f7f1 f8f2 	bl	80002b8 <__aeabi_dsub>
 800f0d4:	e7c4      	b.n	800f060 <__kernel_sin+0xd0>
 800f0d6:	bf00      	nop
 800f0d8:	55555549 	.word	0x55555549
 800f0dc:	3fc55555 	.word	0x3fc55555
 800f0e0:	3fe00000 	.word	0x3fe00000
 800f0e4:	5acfd57c 	.word	0x5acfd57c
 800f0e8:	3de5d93a 	.word	0x3de5d93a
 800f0ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800f0f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f0f4:	57b1fe7d 	.word	0x57b1fe7d
 800f0f8:	3ec71de3 	.word	0x3ec71de3
 800f0fc:	19c161d5 	.word	0x19c161d5
 800f100:	3f2a01a0 	.word	0x3f2a01a0
 800f104:	1110f8a6 	.word	0x1110f8a6
 800f108:	3f811111 	.word	0x3f811111

0800f10c <with_errno>:
 800f10c:	b570      	push	{r4, r5, r6, lr}
 800f10e:	4604      	mov	r4, r0
 800f110:	460d      	mov	r5, r1
 800f112:	4616      	mov	r6, r2
 800f114:	f7fb fb8c 	bl	800a830 <__errno>
 800f118:	4629      	mov	r1, r5
 800f11a:	6006      	str	r6, [r0, #0]
 800f11c:	4620      	mov	r0, r4
 800f11e:	bd70      	pop	{r4, r5, r6, pc}

0800f120 <xflow>:
 800f120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f122:	4614      	mov	r4, r2
 800f124:	461d      	mov	r5, r3
 800f126:	b108      	cbz	r0, 800f12c <xflow+0xc>
 800f128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f12c:	e9cd 2300 	strd	r2, r3, [sp]
 800f130:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f134:	4620      	mov	r0, r4
 800f136:	4629      	mov	r1, r5
 800f138:	f7f1 fa76 	bl	8000628 <__aeabi_dmul>
 800f13c:	2222      	movs	r2, #34	; 0x22
 800f13e:	b003      	add	sp, #12
 800f140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f144:	f7ff bfe2 	b.w	800f10c <with_errno>

0800f148 <__math_uflow>:
 800f148:	b508      	push	{r3, lr}
 800f14a:	2200      	movs	r2, #0
 800f14c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f150:	f7ff ffe6 	bl	800f120 <xflow>
 800f154:	ec41 0b10 	vmov	d0, r0, r1
 800f158:	bd08      	pop	{r3, pc}

0800f15a <__math_oflow>:
 800f15a:	b508      	push	{r3, lr}
 800f15c:	2200      	movs	r2, #0
 800f15e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f162:	f7ff ffdd 	bl	800f120 <xflow>
 800f166:	ec41 0b10 	vmov	d0, r0, r1
 800f16a:	bd08      	pop	{r3, pc}
 800f16c:	0000      	movs	r0, r0
	...

0800f170 <atan>:
 800f170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f174:	ec55 4b10 	vmov	r4, r5, d0
 800f178:	4bc3      	ldr	r3, [pc, #780]	; (800f488 <atan+0x318>)
 800f17a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f17e:	429e      	cmp	r6, r3
 800f180:	46ab      	mov	fp, r5
 800f182:	dd18      	ble.n	800f1b6 <atan+0x46>
 800f184:	4bc1      	ldr	r3, [pc, #772]	; (800f48c <atan+0x31c>)
 800f186:	429e      	cmp	r6, r3
 800f188:	dc01      	bgt.n	800f18e <atan+0x1e>
 800f18a:	d109      	bne.n	800f1a0 <atan+0x30>
 800f18c:	b144      	cbz	r4, 800f1a0 <atan+0x30>
 800f18e:	4622      	mov	r2, r4
 800f190:	462b      	mov	r3, r5
 800f192:	4620      	mov	r0, r4
 800f194:	4629      	mov	r1, r5
 800f196:	f7f1 f891 	bl	80002bc <__adddf3>
 800f19a:	4604      	mov	r4, r0
 800f19c:	460d      	mov	r5, r1
 800f19e:	e006      	b.n	800f1ae <atan+0x3e>
 800f1a0:	f1bb 0f00 	cmp.w	fp, #0
 800f1a4:	f300 8131 	bgt.w	800f40a <atan+0x29a>
 800f1a8:	a59b      	add	r5, pc, #620	; (adr r5, 800f418 <atan+0x2a8>)
 800f1aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f1ae:	ec45 4b10 	vmov	d0, r4, r5
 800f1b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b6:	4bb6      	ldr	r3, [pc, #728]	; (800f490 <atan+0x320>)
 800f1b8:	429e      	cmp	r6, r3
 800f1ba:	dc14      	bgt.n	800f1e6 <atan+0x76>
 800f1bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f1c0:	429e      	cmp	r6, r3
 800f1c2:	dc0d      	bgt.n	800f1e0 <atan+0x70>
 800f1c4:	a396      	add	r3, pc, #600	; (adr r3, 800f420 <atan+0x2b0>)
 800f1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ca:	ee10 0a10 	vmov	r0, s0
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	f7f1 f874 	bl	80002bc <__adddf3>
 800f1d4:	4baf      	ldr	r3, [pc, #700]	; (800f494 <atan+0x324>)
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f7f1 fcb6 	bl	8000b48 <__aeabi_dcmpgt>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d1e6      	bne.n	800f1ae <atan+0x3e>
 800f1e0:	f04f 3aff 	mov.w	sl, #4294967295
 800f1e4:	e02b      	b.n	800f23e <atan+0xce>
 800f1e6:	f000 f963 	bl	800f4b0 <fabs>
 800f1ea:	4bab      	ldr	r3, [pc, #684]	; (800f498 <atan+0x328>)
 800f1ec:	429e      	cmp	r6, r3
 800f1ee:	ec55 4b10 	vmov	r4, r5, d0
 800f1f2:	f300 80bf 	bgt.w	800f374 <atan+0x204>
 800f1f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f1fa:	429e      	cmp	r6, r3
 800f1fc:	f300 80a0 	bgt.w	800f340 <atan+0x1d0>
 800f200:	ee10 2a10 	vmov	r2, s0
 800f204:	ee10 0a10 	vmov	r0, s0
 800f208:	462b      	mov	r3, r5
 800f20a:	4629      	mov	r1, r5
 800f20c:	f7f1 f856 	bl	80002bc <__adddf3>
 800f210:	4ba0      	ldr	r3, [pc, #640]	; (800f494 <atan+0x324>)
 800f212:	2200      	movs	r2, #0
 800f214:	f7f1 f850 	bl	80002b8 <__aeabi_dsub>
 800f218:	2200      	movs	r2, #0
 800f21a:	4606      	mov	r6, r0
 800f21c:	460f      	mov	r7, r1
 800f21e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f222:	4620      	mov	r0, r4
 800f224:	4629      	mov	r1, r5
 800f226:	f7f1 f849 	bl	80002bc <__adddf3>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	f7f1 fb23 	bl	800087c <__aeabi_ddiv>
 800f236:	f04f 0a00 	mov.w	sl, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	460d      	mov	r5, r1
 800f23e:	4622      	mov	r2, r4
 800f240:	462b      	mov	r3, r5
 800f242:	4620      	mov	r0, r4
 800f244:	4629      	mov	r1, r5
 800f246:	f7f1 f9ef 	bl	8000628 <__aeabi_dmul>
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	4680      	mov	r8, r0
 800f250:	4689      	mov	r9, r1
 800f252:	f7f1 f9e9 	bl	8000628 <__aeabi_dmul>
 800f256:	a374      	add	r3, pc, #464	; (adr r3, 800f428 <atan+0x2b8>)
 800f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25c:	4606      	mov	r6, r0
 800f25e:	460f      	mov	r7, r1
 800f260:	f7f1 f9e2 	bl	8000628 <__aeabi_dmul>
 800f264:	a372      	add	r3, pc, #456	; (adr r3, 800f430 <atan+0x2c0>)
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	f7f1 f827 	bl	80002bc <__adddf3>
 800f26e:	4632      	mov	r2, r6
 800f270:	463b      	mov	r3, r7
 800f272:	f7f1 f9d9 	bl	8000628 <__aeabi_dmul>
 800f276:	a370      	add	r3, pc, #448	; (adr r3, 800f438 <atan+0x2c8>)
 800f278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27c:	f7f1 f81e 	bl	80002bc <__adddf3>
 800f280:	4632      	mov	r2, r6
 800f282:	463b      	mov	r3, r7
 800f284:	f7f1 f9d0 	bl	8000628 <__aeabi_dmul>
 800f288:	a36d      	add	r3, pc, #436	; (adr r3, 800f440 <atan+0x2d0>)
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	f7f1 f815 	bl	80002bc <__adddf3>
 800f292:	4632      	mov	r2, r6
 800f294:	463b      	mov	r3, r7
 800f296:	f7f1 f9c7 	bl	8000628 <__aeabi_dmul>
 800f29a:	a36b      	add	r3, pc, #428	; (adr r3, 800f448 <atan+0x2d8>)
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	f7f1 f80c 	bl	80002bc <__adddf3>
 800f2a4:	4632      	mov	r2, r6
 800f2a6:	463b      	mov	r3, r7
 800f2a8:	f7f1 f9be 	bl	8000628 <__aeabi_dmul>
 800f2ac:	a368      	add	r3, pc, #416	; (adr r3, 800f450 <atan+0x2e0>)
 800f2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b2:	f7f1 f803 	bl	80002bc <__adddf3>
 800f2b6:	4642      	mov	r2, r8
 800f2b8:	464b      	mov	r3, r9
 800f2ba:	f7f1 f9b5 	bl	8000628 <__aeabi_dmul>
 800f2be:	a366      	add	r3, pc, #408	; (adr r3, 800f458 <atan+0x2e8>)
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	4689      	mov	r9, r1
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	4639      	mov	r1, r7
 800f2cc:	f7f1 f9ac 	bl	8000628 <__aeabi_dmul>
 800f2d0:	a363      	add	r3, pc, #396	; (adr r3, 800f460 <atan+0x2f0>)
 800f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d6:	f7f0 ffef 	bl	80002b8 <__aeabi_dsub>
 800f2da:	4632      	mov	r2, r6
 800f2dc:	463b      	mov	r3, r7
 800f2de:	f7f1 f9a3 	bl	8000628 <__aeabi_dmul>
 800f2e2:	a361      	add	r3, pc, #388	; (adr r3, 800f468 <atan+0x2f8>)
 800f2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e8:	f7f0 ffe6 	bl	80002b8 <__aeabi_dsub>
 800f2ec:	4632      	mov	r2, r6
 800f2ee:	463b      	mov	r3, r7
 800f2f0:	f7f1 f99a 	bl	8000628 <__aeabi_dmul>
 800f2f4:	a35e      	add	r3, pc, #376	; (adr r3, 800f470 <atan+0x300>)
 800f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fa:	f7f0 ffdd 	bl	80002b8 <__aeabi_dsub>
 800f2fe:	4632      	mov	r2, r6
 800f300:	463b      	mov	r3, r7
 800f302:	f7f1 f991 	bl	8000628 <__aeabi_dmul>
 800f306:	a35c      	add	r3, pc, #368	; (adr r3, 800f478 <atan+0x308>)
 800f308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30c:	f7f0 ffd4 	bl	80002b8 <__aeabi_dsub>
 800f310:	4632      	mov	r2, r6
 800f312:	463b      	mov	r3, r7
 800f314:	f7f1 f988 	bl	8000628 <__aeabi_dmul>
 800f318:	4602      	mov	r2, r0
 800f31a:	460b      	mov	r3, r1
 800f31c:	4640      	mov	r0, r8
 800f31e:	4649      	mov	r1, r9
 800f320:	f7f0 ffcc 	bl	80002bc <__adddf3>
 800f324:	4622      	mov	r2, r4
 800f326:	462b      	mov	r3, r5
 800f328:	f7f1 f97e 	bl	8000628 <__aeabi_dmul>
 800f32c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	d14b      	bne.n	800f3ce <atan+0x25e>
 800f336:	4620      	mov	r0, r4
 800f338:	4629      	mov	r1, r5
 800f33a:	f7f0 ffbd 	bl	80002b8 <__aeabi_dsub>
 800f33e:	e72c      	b.n	800f19a <atan+0x2a>
 800f340:	ee10 0a10 	vmov	r0, s0
 800f344:	4b53      	ldr	r3, [pc, #332]	; (800f494 <atan+0x324>)
 800f346:	2200      	movs	r2, #0
 800f348:	4629      	mov	r1, r5
 800f34a:	f7f0 ffb5 	bl	80002b8 <__aeabi_dsub>
 800f34e:	4b51      	ldr	r3, [pc, #324]	; (800f494 <atan+0x324>)
 800f350:	4606      	mov	r6, r0
 800f352:	460f      	mov	r7, r1
 800f354:	2200      	movs	r2, #0
 800f356:	4620      	mov	r0, r4
 800f358:	4629      	mov	r1, r5
 800f35a:	f7f0 ffaf 	bl	80002bc <__adddf3>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	4630      	mov	r0, r6
 800f364:	4639      	mov	r1, r7
 800f366:	f7f1 fa89 	bl	800087c <__aeabi_ddiv>
 800f36a:	f04f 0a01 	mov.w	sl, #1
 800f36e:	4604      	mov	r4, r0
 800f370:	460d      	mov	r5, r1
 800f372:	e764      	b.n	800f23e <atan+0xce>
 800f374:	4b49      	ldr	r3, [pc, #292]	; (800f49c <atan+0x32c>)
 800f376:	429e      	cmp	r6, r3
 800f378:	da1d      	bge.n	800f3b6 <atan+0x246>
 800f37a:	ee10 0a10 	vmov	r0, s0
 800f37e:	4b48      	ldr	r3, [pc, #288]	; (800f4a0 <atan+0x330>)
 800f380:	2200      	movs	r2, #0
 800f382:	4629      	mov	r1, r5
 800f384:	f7f0 ff98 	bl	80002b8 <__aeabi_dsub>
 800f388:	4b45      	ldr	r3, [pc, #276]	; (800f4a0 <atan+0x330>)
 800f38a:	4606      	mov	r6, r0
 800f38c:	460f      	mov	r7, r1
 800f38e:	2200      	movs	r2, #0
 800f390:	4620      	mov	r0, r4
 800f392:	4629      	mov	r1, r5
 800f394:	f7f1 f948 	bl	8000628 <__aeabi_dmul>
 800f398:	4b3e      	ldr	r3, [pc, #248]	; (800f494 <atan+0x324>)
 800f39a:	2200      	movs	r2, #0
 800f39c:	f7f0 ff8e 	bl	80002bc <__adddf3>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	4639      	mov	r1, r7
 800f3a8:	f7f1 fa68 	bl	800087c <__aeabi_ddiv>
 800f3ac:	f04f 0a02 	mov.w	sl, #2
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	460d      	mov	r5, r1
 800f3b4:	e743      	b.n	800f23e <atan+0xce>
 800f3b6:	462b      	mov	r3, r5
 800f3b8:	ee10 2a10 	vmov	r2, s0
 800f3bc:	4939      	ldr	r1, [pc, #228]	; (800f4a4 <atan+0x334>)
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f7f1 fa5c 	bl	800087c <__aeabi_ddiv>
 800f3c4:	f04f 0a03 	mov.w	sl, #3
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	460d      	mov	r5, r1
 800f3cc:	e737      	b.n	800f23e <atan+0xce>
 800f3ce:	4b36      	ldr	r3, [pc, #216]	; (800f4a8 <atan+0x338>)
 800f3d0:	4e36      	ldr	r6, [pc, #216]	; (800f4ac <atan+0x33c>)
 800f3d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f3d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f3da:	e9da 2300 	ldrd	r2, r3, [sl]
 800f3de:	f7f0 ff6b 	bl	80002b8 <__aeabi_dsub>
 800f3e2:	4622      	mov	r2, r4
 800f3e4:	462b      	mov	r3, r5
 800f3e6:	f7f0 ff67 	bl	80002b8 <__aeabi_dsub>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f3f2:	f7f0 ff61 	bl	80002b8 <__aeabi_dsub>
 800f3f6:	f1bb 0f00 	cmp.w	fp, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	460d      	mov	r5, r1
 800f3fe:	f6bf aed6 	bge.w	800f1ae <atan+0x3e>
 800f402:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f406:	461d      	mov	r5, r3
 800f408:	e6d1      	b.n	800f1ae <atan+0x3e>
 800f40a:	a51d      	add	r5, pc, #116	; (adr r5, 800f480 <atan+0x310>)
 800f40c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f410:	e6cd      	b.n	800f1ae <atan+0x3e>
 800f412:	bf00      	nop
 800f414:	f3af 8000 	nop.w
 800f418:	54442d18 	.word	0x54442d18
 800f41c:	bff921fb 	.word	0xbff921fb
 800f420:	8800759c 	.word	0x8800759c
 800f424:	7e37e43c 	.word	0x7e37e43c
 800f428:	e322da11 	.word	0xe322da11
 800f42c:	3f90ad3a 	.word	0x3f90ad3a
 800f430:	24760deb 	.word	0x24760deb
 800f434:	3fa97b4b 	.word	0x3fa97b4b
 800f438:	a0d03d51 	.word	0xa0d03d51
 800f43c:	3fb10d66 	.word	0x3fb10d66
 800f440:	c54c206e 	.word	0xc54c206e
 800f444:	3fb745cd 	.word	0x3fb745cd
 800f448:	920083ff 	.word	0x920083ff
 800f44c:	3fc24924 	.word	0x3fc24924
 800f450:	5555550d 	.word	0x5555550d
 800f454:	3fd55555 	.word	0x3fd55555
 800f458:	2c6a6c2f 	.word	0x2c6a6c2f
 800f45c:	bfa2b444 	.word	0xbfa2b444
 800f460:	52defd9a 	.word	0x52defd9a
 800f464:	3fadde2d 	.word	0x3fadde2d
 800f468:	af749a6d 	.word	0xaf749a6d
 800f46c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f470:	fe231671 	.word	0xfe231671
 800f474:	3fbc71c6 	.word	0x3fbc71c6
 800f478:	9998ebc4 	.word	0x9998ebc4
 800f47c:	3fc99999 	.word	0x3fc99999
 800f480:	54442d18 	.word	0x54442d18
 800f484:	3ff921fb 	.word	0x3ff921fb
 800f488:	440fffff 	.word	0x440fffff
 800f48c:	7ff00000 	.word	0x7ff00000
 800f490:	3fdbffff 	.word	0x3fdbffff
 800f494:	3ff00000 	.word	0x3ff00000
 800f498:	3ff2ffff 	.word	0x3ff2ffff
 800f49c:	40038000 	.word	0x40038000
 800f4a0:	3ff80000 	.word	0x3ff80000
 800f4a4:	bff00000 	.word	0xbff00000
 800f4a8:	0800ff98 	.word	0x0800ff98
 800f4ac:	0800ff78 	.word	0x0800ff78

0800f4b0 <fabs>:
 800f4b0:	ec51 0b10 	vmov	r0, r1, d0
 800f4b4:	ee10 2a10 	vmov	r2, s0
 800f4b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4bc:	ec43 2b10 	vmov	d0, r2, r3
 800f4c0:	4770      	bx	lr

0800f4c2 <finite>:
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	ed8d 0b00 	vstr	d0, [sp]
 800f4c8:	9801      	ldr	r0, [sp, #4]
 800f4ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f4ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f4d2:	0fc0      	lsrs	r0, r0, #31
 800f4d4:	b002      	add	sp, #8
 800f4d6:	4770      	bx	lr

0800f4d8 <floor>:
 800f4d8:	ec51 0b10 	vmov	r0, r1, d0
 800f4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f4e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f4e8:	2e13      	cmp	r6, #19
 800f4ea:	ee10 5a10 	vmov	r5, s0
 800f4ee:	ee10 8a10 	vmov	r8, s0
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	dc32      	bgt.n	800f55c <floor+0x84>
 800f4f6:	2e00      	cmp	r6, #0
 800f4f8:	da14      	bge.n	800f524 <floor+0x4c>
 800f4fa:	a333      	add	r3, pc, #204	; (adr r3, 800f5c8 <floor+0xf0>)
 800f4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f500:	f7f0 fedc 	bl	80002bc <__adddf3>
 800f504:	2200      	movs	r2, #0
 800f506:	2300      	movs	r3, #0
 800f508:	f7f1 fb1e 	bl	8000b48 <__aeabi_dcmpgt>
 800f50c:	b138      	cbz	r0, 800f51e <floor+0x46>
 800f50e:	2c00      	cmp	r4, #0
 800f510:	da57      	bge.n	800f5c2 <floor+0xea>
 800f512:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f516:	431d      	orrs	r5, r3
 800f518:	d001      	beq.n	800f51e <floor+0x46>
 800f51a:	4c2d      	ldr	r4, [pc, #180]	; (800f5d0 <floor+0xf8>)
 800f51c:	2500      	movs	r5, #0
 800f51e:	4621      	mov	r1, r4
 800f520:	4628      	mov	r0, r5
 800f522:	e025      	b.n	800f570 <floor+0x98>
 800f524:	4f2b      	ldr	r7, [pc, #172]	; (800f5d4 <floor+0xfc>)
 800f526:	4137      	asrs	r7, r6
 800f528:	ea01 0307 	and.w	r3, r1, r7
 800f52c:	4303      	orrs	r3, r0
 800f52e:	d01f      	beq.n	800f570 <floor+0x98>
 800f530:	a325      	add	r3, pc, #148	; (adr r3, 800f5c8 <floor+0xf0>)
 800f532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f536:	f7f0 fec1 	bl	80002bc <__adddf3>
 800f53a:	2200      	movs	r2, #0
 800f53c:	2300      	movs	r3, #0
 800f53e:	f7f1 fb03 	bl	8000b48 <__aeabi_dcmpgt>
 800f542:	2800      	cmp	r0, #0
 800f544:	d0eb      	beq.n	800f51e <floor+0x46>
 800f546:	2c00      	cmp	r4, #0
 800f548:	bfbe      	ittt	lt
 800f54a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f54e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f552:	19a4      	addlt	r4, r4, r6
 800f554:	ea24 0407 	bic.w	r4, r4, r7
 800f558:	2500      	movs	r5, #0
 800f55a:	e7e0      	b.n	800f51e <floor+0x46>
 800f55c:	2e33      	cmp	r6, #51	; 0x33
 800f55e:	dd0b      	ble.n	800f578 <floor+0xa0>
 800f560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f564:	d104      	bne.n	800f570 <floor+0x98>
 800f566:	ee10 2a10 	vmov	r2, s0
 800f56a:	460b      	mov	r3, r1
 800f56c:	f7f0 fea6 	bl	80002bc <__adddf3>
 800f570:	ec41 0b10 	vmov	d0, r0, r1
 800f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f578:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f57c:	f04f 33ff 	mov.w	r3, #4294967295
 800f580:	fa23 f707 	lsr.w	r7, r3, r7
 800f584:	4207      	tst	r7, r0
 800f586:	d0f3      	beq.n	800f570 <floor+0x98>
 800f588:	a30f      	add	r3, pc, #60	; (adr r3, 800f5c8 <floor+0xf0>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fe95 	bl	80002bc <__adddf3>
 800f592:	2200      	movs	r2, #0
 800f594:	2300      	movs	r3, #0
 800f596:	f7f1 fad7 	bl	8000b48 <__aeabi_dcmpgt>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	d0bf      	beq.n	800f51e <floor+0x46>
 800f59e:	2c00      	cmp	r4, #0
 800f5a0:	da02      	bge.n	800f5a8 <floor+0xd0>
 800f5a2:	2e14      	cmp	r6, #20
 800f5a4:	d103      	bne.n	800f5ae <floor+0xd6>
 800f5a6:	3401      	adds	r4, #1
 800f5a8:	ea25 0507 	bic.w	r5, r5, r7
 800f5ac:	e7b7      	b.n	800f51e <floor+0x46>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f5b4:	fa03 f606 	lsl.w	r6, r3, r6
 800f5b8:	4435      	add	r5, r6
 800f5ba:	4545      	cmp	r5, r8
 800f5bc:	bf38      	it	cc
 800f5be:	18e4      	addcc	r4, r4, r3
 800f5c0:	e7f2      	b.n	800f5a8 <floor+0xd0>
 800f5c2:	2500      	movs	r5, #0
 800f5c4:	462c      	mov	r4, r5
 800f5c6:	e7aa      	b.n	800f51e <floor+0x46>
 800f5c8:	8800759c 	.word	0x8800759c
 800f5cc:	7e37e43c 	.word	0x7e37e43c
 800f5d0:	bff00000 	.word	0xbff00000
 800f5d4:	000fffff 	.word	0x000fffff

0800f5d8 <scalbn>:
 800f5d8:	b570      	push	{r4, r5, r6, lr}
 800f5da:	ec55 4b10 	vmov	r4, r5, d0
 800f5de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	462b      	mov	r3, r5
 800f5e6:	b99a      	cbnz	r2, 800f610 <scalbn+0x38>
 800f5e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5ec:	4323      	orrs	r3, r4
 800f5ee:	d036      	beq.n	800f65e <scalbn+0x86>
 800f5f0:	4b39      	ldr	r3, [pc, #228]	; (800f6d8 <scalbn+0x100>)
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	ee10 0a10 	vmov	r0, s0
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f7f1 f815 	bl	8000628 <__aeabi_dmul>
 800f5fe:	4b37      	ldr	r3, [pc, #220]	; (800f6dc <scalbn+0x104>)
 800f600:	429e      	cmp	r6, r3
 800f602:	4604      	mov	r4, r0
 800f604:	460d      	mov	r5, r1
 800f606:	da10      	bge.n	800f62a <scalbn+0x52>
 800f608:	a32b      	add	r3, pc, #172	; (adr r3, 800f6b8 <scalbn+0xe0>)
 800f60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60e:	e03a      	b.n	800f686 <scalbn+0xae>
 800f610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f614:	428a      	cmp	r2, r1
 800f616:	d10c      	bne.n	800f632 <scalbn+0x5a>
 800f618:	ee10 2a10 	vmov	r2, s0
 800f61c:	4620      	mov	r0, r4
 800f61e:	4629      	mov	r1, r5
 800f620:	f7f0 fe4c 	bl	80002bc <__adddf3>
 800f624:	4604      	mov	r4, r0
 800f626:	460d      	mov	r5, r1
 800f628:	e019      	b.n	800f65e <scalbn+0x86>
 800f62a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f62e:	460b      	mov	r3, r1
 800f630:	3a36      	subs	r2, #54	; 0x36
 800f632:	4432      	add	r2, r6
 800f634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f638:	428a      	cmp	r2, r1
 800f63a:	dd08      	ble.n	800f64e <scalbn+0x76>
 800f63c:	2d00      	cmp	r5, #0
 800f63e:	a120      	add	r1, pc, #128	; (adr r1, 800f6c0 <scalbn+0xe8>)
 800f640:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f644:	da1c      	bge.n	800f680 <scalbn+0xa8>
 800f646:	a120      	add	r1, pc, #128	; (adr r1, 800f6c8 <scalbn+0xf0>)
 800f648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f64c:	e018      	b.n	800f680 <scalbn+0xa8>
 800f64e:	2a00      	cmp	r2, #0
 800f650:	dd08      	ble.n	800f664 <scalbn+0x8c>
 800f652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f65a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f65e:	ec45 4b10 	vmov	d0, r4, r5
 800f662:	bd70      	pop	{r4, r5, r6, pc}
 800f664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f668:	da19      	bge.n	800f69e <scalbn+0xc6>
 800f66a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f66e:	429e      	cmp	r6, r3
 800f670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f674:	dd0a      	ble.n	800f68c <scalbn+0xb4>
 800f676:	a112      	add	r1, pc, #72	; (adr r1, 800f6c0 <scalbn+0xe8>)
 800f678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d1e2      	bne.n	800f646 <scalbn+0x6e>
 800f680:	a30f      	add	r3, pc, #60	; (adr r3, 800f6c0 <scalbn+0xe8>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 ffcf 	bl	8000628 <__aeabi_dmul>
 800f68a:	e7cb      	b.n	800f624 <scalbn+0x4c>
 800f68c:	a10a      	add	r1, pc, #40	; (adr r1, 800f6b8 <scalbn+0xe0>)
 800f68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d0b8      	beq.n	800f608 <scalbn+0x30>
 800f696:	a10e      	add	r1, pc, #56	; (adr r1, 800f6d0 <scalbn+0xf8>)
 800f698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69c:	e7b4      	b.n	800f608 <scalbn+0x30>
 800f69e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6a2:	3236      	adds	r2, #54	; 0x36
 800f6a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	4b0c      	ldr	r3, [pc, #48]	; (800f6e0 <scalbn+0x108>)
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	e7e8      	b.n	800f686 <scalbn+0xae>
 800f6b4:	f3af 8000 	nop.w
 800f6b8:	c2f8f359 	.word	0xc2f8f359
 800f6bc:	01a56e1f 	.word	0x01a56e1f
 800f6c0:	8800759c 	.word	0x8800759c
 800f6c4:	7e37e43c 	.word	0x7e37e43c
 800f6c8:	8800759c 	.word	0x8800759c
 800f6cc:	fe37e43c 	.word	0xfe37e43c
 800f6d0:	c2f8f359 	.word	0xc2f8f359
 800f6d4:	81a56e1f 	.word	0x81a56e1f
 800f6d8:	43500000 	.word	0x43500000
 800f6dc:	ffff3cb0 	.word	0xffff3cb0
 800f6e0:	3c900000 	.word	0x3c900000

0800f6e4 <_sbrk>:
 800f6e4:	4a04      	ldr	r2, [pc, #16]	; (800f6f8 <_sbrk+0x14>)
 800f6e6:	6811      	ldr	r1, [r2, #0]
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	b909      	cbnz	r1, 800f6f0 <_sbrk+0xc>
 800f6ec:	4903      	ldr	r1, [pc, #12]	; (800f6fc <_sbrk+0x18>)
 800f6ee:	6011      	str	r1, [r2, #0]
 800f6f0:	6810      	ldr	r0, [r2, #0]
 800f6f2:	4403      	add	r3, r0
 800f6f4:	6013      	str	r3, [r2, #0]
 800f6f6:	4770      	bx	lr
 800f6f8:	20013404 	.word	0x20013404
 800f6fc:	20000527 	.word	0x20000527

0800f700 <_init>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	bf00      	nop
 800f704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f706:	bc08      	pop	{r3}
 800f708:	469e      	mov	lr, r3
 800f70a:	4770      	bx	lr

0800f70c <_fini>:
 800f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70e:	bf00      	nop
 800f710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f712:	bc08      	pop	{r3}
 800f714:	469e      	mov	lr, r3
 800f716:	4770      	bx	lr
