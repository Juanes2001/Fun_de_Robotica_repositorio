
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  08013390  08013390  00023390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140a8  080140a8  00030210  2**0
                  CONTENTS
  4 .ARM          00000000  080140a8  080140a8  00030210  2**0
                  CONTENTS
  5 .preinit_array 00000000  080140a8  080140a8  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140a8  080140a8  000240a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140ac  080140ac  000240ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080140b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013e40  20000210  080142c0  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014050  080142c0  00034050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2d2  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027eb  00000000  00000000  0003f512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00041d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00042a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a25  00000000  00000000  00043610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101f4  00000000  00000000  00056035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062b8d  00000000  00000000  00066229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8db6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  000c8e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013378 	.word	0x08013378

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	08013378 	.word	0x08013378

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b095      	sub	sp, #84	; 0x54
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4ba2      	ldr	r3, [pc, #648]	; (8000f48 <main+0x290>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4aa0      	ldr	r2, [pc, #640]	; (8000f48 <main+0x290>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b9f      	ldr	r3, [pc, #636]	; (8000f4c <main+0x294>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a9e      	ldr	r2, [pc, #632]	; (8000f4c <main+0x294>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f00b fcc0 	bl	800c660 <RCC_enableMaxFrequencies>

   	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000ce0:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <main+0x298>)
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	22c8      	movs	r2, #200	; 0xc8
 8000cec:	4999      	ldr	r1, [pc, #612]	; (8000f54 <main+0x29c>)
 8000cee:	489a      	ldr	r0, [pc, #616]	; (8000f58 <main+0x2a0>)
 8000cf0:	f004 fbc6 	bl	8005480 <xTaskCreate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a99      	ldr	r2, [pc, #612]	; (8000f5c <main+0x2a4>)
 8000cf8:	6013      	str	r3, [r2, #0]
							NULL,                   // parametro pasado a la tarea
							3,                      // Prioridad de la tarea
							&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000cfa:	4b98      	ldr	r3, [pc, #608]	; (8000f5c <main+0x2a4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00a      	beq.n	8000d18 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d14:	bf00      	nop
 8000d16:	e7fe      	b.n	8000d16 <main+0x5e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d18:	4b91      	ldr	r3, [pc, #580]	; (8000f60 <main+0x2a8>)
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	22c8      	movs	r2, #200	; 0xc8
 8000d24:	498f      	ldr	r1, [pc, #572]	; (8000f64 <main+0x2ac>)
 8000d26:	4890      	ldr	r0, [pc, #576]	; (8000f68 <main+0x2b0>)
 8000d28:	f004 fbaa 	bl	8005480 <xTaskCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a8b      	ldr	r2, [pc, #556]	; (8000f5c <main+0x2a4>)
 8000d30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d32:	4b8a      	ldr	r3, [pc, #552]	; (8000f5c <main+0x2a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d00a      	beq.n	8000d50 <main+0x98>
        __asm volatile
 8000d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
    }
 8000d4c:	bf00      	nop
 8000d4e:	e7fe      	b.n	8000d4e <main+0x96>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d50:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <main+0x2b4>)
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2303      	movs	r3, #3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	22c8      	movs	r2, #200	; 0xc8
 8000d5c:	4984      	ldr	r1, [pc, #528]	; (8000f70 <main+0x2b8>)
 8000d5e:	4885      	ldr	r0, [pc, #532]	; (8000f74 <main+0x2bc>)
 8000d60:	f004 fb8e 	bl	8005480 <xTaskCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a7d      	ldr	r2, [pc, #500]	; (8000f5c <main+0x2a4>)
 8000d68:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <main+0x2a4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d00a      	beq.n	8000d88 <main+0xd0>
        __asm volatile
 8000d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d76:	f383 8811 	msr	BASEPRI, r3
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	f3bf 8f4f 	dsb	sy
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8000d84:	bf00      	nop
 8000d86:	e7fe      	b.n	8000d86 <main+0xce>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000d88:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <main+0x2c0>)
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	22c8      	movs	r2, #200	; 0xc8
 8000d94:	4979      	ldr	r1, [pc, #484]	; (8000f7c <main+0x2c4>)
 8000d96:	487a      	ldr	r0, [pc, #488]	; (8000f80 <main+0x2c8>)
 8000d98:	f004 fb72 	bl	8005480 <xTaskCreate>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a6f      	ldr	r2, [pc, #444]	; (8000f5c <main+0x2a4>)
 8000da0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000da2:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <main+0x2a4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00a      	beq.n	8000dc0 <main+0x108>
        __asm volatile
 8000daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dae:	f383 8811 	msr	BASEPRI, r3
 8000db2:	f3bf 8f6f 	isb	sy
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8000dbc:	bf00      	nop
 8000dbe:	e7fe      	b.n	8000dbe <main+0x106>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000dc0:	4b70      	ldr	r3, [pc, #448]	; (8000f84 <main+0x2cc>)
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	22c8      	movs	r2, #200	; 0xc8
 8000dcc:	496e      	ldr	r1, [pc, #440]	; (8000f88 <main+0x2d0>)
 8000dce:	486f      	ldr	r0, [pc, #444]	; (8000f8c <main+0x2d4>)
 8000dd0:	f004 fb56 	bl	8005480 <xTaskCreate>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a61      	ldr	r2, [pc, #388]	; (8000f5c <main+0x2a4>)
 8000dd8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <main+0x2a4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d00a      	beq.n	8000df8 <main+0x140>
        __asm volatile
 8000de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	f3bf 8f4f 	dsb	sy
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8000df4:	bf00      	nop
 8000df6:	e7fe      	b.n	8000df6 <main+0x13e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000df8:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <main+0x2d8>)
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	22c8      	movs	r2, #200	; 0xc8
 8000e04:	4963      	ldr	r1, [pc, #396]	; (8000f94 <main+0x2dc>)
 8000e06:	4864      	ldr	r0, [pc, #400]	; (8000f98 <main+0x2e0>)
 8000e08:	f004 fb3a 	bl	8005480 <xTaskCreate>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <main+0x2a4>)
 8000e10:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <main+0x2a4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00a      	beq.n	8000e30 <main+0x178>
        __asm volatile
 8000e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8000e2c:	bf00      	nop
 8000e2e:	e7fe      	b.n	8000e2e <main+0x176>

	 /////////////////////////////////TAREA DE IR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_GoTo,"Task-GoTo",STACK_SIZE,NULL,3,&xHandleTask_GoTo );
 8000e30:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <main+0x2e4>)
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	2303      	movs	r3, #3
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	22c8      	movs	r2, #200	; 0xc8
 8000e3c:	4958      	ldr	r1, [pc, #352]	; (8000fa0 <main+0x2e8>)
 8000e3e:	4859      	ldr	r0, [pc, #356]	; (8000fa4 <main+0x2ec>)
 8000e40:	f004 fb1e 	bl	8005480 <xTaskCreate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a45      	ldr	r2, [pc, #276]	; (8000f5c <main+0x2a4>)
 8000e48:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <main+0x2a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d00a      	beq.n	8000e68 <main+0x1b0>
        __asm volatile
 8000e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	f3bf 8f4f 	dsb	sy
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000e64:	bf00      	nop
 8000e66:	e7fe      	b.n	8000e66 <main+0x1ae>

	 /////////////////////////////////TAREA DE GIRAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Roll,"Task-Roll",STACK_SIZE,NULL,3,&xHandleTask_Roll );
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <main+0x2f0>)
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2300      	movs	r3, #0
 8000e72:	22c8      	movs	r2, #200	; 0xc8
 8000e74:	494d      	ldr	r1, [pc, #308]	; (8000fac <main+0x2f4>)
 8000e76:	484e      	ldr	r0, [pc, #312]	; (8000fb0 <main+0x2f8>)
 8000e78:	f004 fb02 	bl	8005480 <xTaskCreate>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <main+0x2a4>)
 8000e80:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <main+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d00a      	beq.n	8000ea0 <main+0x1e8>
        __asm volatile
 8000e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000e9c:	bf00      	nop
 8000e9e:	e7fe      	b.n	8000e9e <main+0x1e6>

	 /////////////////////////////////TAREA DE GIRAR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_RollTo,"Task-RollTo",STACK_SIZE,NULL,3,&xHandleTask_Rollto );
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <main+0x2fc>)
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	22c8      	movs	r2, #200	; 0xc8
 8000eac:	4942      	ldr	r1, [pc, #264]	; (8000fb8 <main+0x300>)
 8000eae:	4843      	ldr	r0, [pc, #268]	; (8000fbc <main+0x304>)
 8000eb0:	f004 fae6 	bl	8005480 <xTaskCreate>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <main+0x2a4>)
 8000eb8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <main+0x2a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d00a      	beq.n	8000ed8 <main+0x220>
        __asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <main+0x21e>

	 /////////////////////////////////TAREA DE REINICIAR VARIABLES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Reinit,"Task-Reinit",STACK_SIZE,NULL,3,&xHandleTask_Reinit );
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <main+0x308>)
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2303      	movs	r3, #3
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	22c8      	movs	r2, #200	; 0xc8
 8000ee4:	4937      	ldr	r1, [pc, #220]	; (8000fc4 <main+0x30c>)
 8000ee6:	4838      	ldr	r0, [pc, #224]	; (8000fc8 <main+0x310>)
 8000ee8:	f004 faca 	bl	8005480 <xTaskCreate>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <main+0x2a4>)
 8000ef0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <main+0x2a4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d00a      	beq.n	8000f10 <main+0x258>
        __asm volatile
 8000efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	f3bf 8f6f 	isb	sy
 8000f06:	f3bf 8f4f 	dsb	sy
 8000f0a:	623b      	str	r3, [r7, #32]
    }
 8000f0c:	bf00      	nop
 8000f0e:	e7fe      	b.n	8000f0e <main+0x256>

	 /////////////////////////////////TAREA DE CUADRADO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Square,"Task-Square",STACK_SIZE,NULL,3,&xHandleTask_Square );
 8000f10:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <main+0x314>)
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	2303      	movs	r3, #3
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	22c8      	movs	r2, #200	; 0xc8
 8000f1c:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <main+0x318>)
 8000f1e:	482d      	ldr	r0, [pc, #180]	; (8000fd4 <main+0x31c>)
 8000f20:	f004 faae 	bl	8005480 <xTaskCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <main+0x2a4>)
 8000f28:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <main+0x2a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d052      	beq.n	8000fd8 <main+0x320>
        __asm volatile
 8000f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f36:	f383 8811 	msr	BASEPRI, r3
 8000f3a:	f3bf 8f6f 	isb	sy
 8000f3e:	f3bf 8f4f 	dsb	sy
 8000f42:	61fb      	str	r3, [r7, #28]
    }
 8000f44:	bf00      	nop
 8000f46:	e7fe      	b.n	8000f46 <main+0x28e>
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	e0001000 	.word	0xe0001000
 8000f50:	20000230 	.word	0x20000230
 8000f54:	0801352c 	.word	0x0801352c
 8000f58:	0800166d 	.word	0x0800166d
 8000f5c:	2000022c 	.word	0x2000022c
 8000f60:	20000234 	.word	0x20000234
 8000f64:	08013538 	.word	0x08013538
 8000f68:	08002725 	.word	0x08002725
 8000f6c:	20000238 	.word	0x20000238
 8000f70:	08013544 	.word	0x08013544
 8000f74:	080019d1 	.word	0x080019d1
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	08013554 	.word	0x08013554
 8000f80:	08001a25 	.word	0x08001a25
 8000f84:	20000240 	.word	0x20000240
 8000f88:	08013560 	.word	0x08013560
 8000f8c:	08001a91 	.word	0x08001a91
 8000f90:	20000244 	.word	0x20000244
 8000f94:	08013568 	.word	0x08013568
 8000f98:	08001ad9 	.word	0x08001ad9
 8000f9c:	20000248 	.word	0x20000248
 8000fa0:	08013578 	.word	0x08013578
 8000fa4:	08001ead 	.word	0x08001ead
 8000fa8:	2000024c 	.word	0x2000024c
 8000fac:	08013584 	.word	0x08013584
 8000fb0:	08001fb1 	.word	0x08001fb1
 8000fb4:	20000250 	.word	0x20000250
 8000fb8:	08013590 	.word	0x08013590
 8000fbc:	0800200d 	.word	0x0800200d
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	0801359c 	.word	0x0801359c
 8000fc8:	080026a9 	.word	0x080026a9
 8000fcc:	20000258 	.word	0x20000258
 8000fd0:	080135a8 	.word	0x080135a8
 8000fd4:	08002085 	.word	0x08002085


	 /////////////////////////////////TAREA DE ASTAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Astar,"Task-Astar",STACK_SIZE,NULL,3,&xHandleTask_Astar );
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <main+0x4b4>)
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2303      	movs	r3, #3
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	22c8      	movs	r2, #200	; 0xc8
 8000fe4:	4962      	ldr	r1, [pc, #392]	; (8001170 <main+0x4b8>)
 8000fe6:	4863      	ldr	r0, [pc, #396]	; (8001174 <main+0x4bc>)
 8000fe8:	f004 fa4a 	bl	8005480 <xTaskCreate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a62      	ldr	r2, [pc, #392]	; (8001178 <main+0x4c0>)
 8000ff0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ff2:	4b61      	ldr	r3, [pc, #388]	; (8001178 <main+0x4c0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d00a      	beq.n	8001010 <main+0x358>
        __asm volatile
 8000ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffe:	f383 8811 	msr	BASEPRI, r3
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	61bb      	str	r3, [r7, #24]
    }
 800100c:	bf00      	nop
 800100e:	e7fe      	b.n	800100e <main+0x356>

	 /////////////////////////////////TAREA DE LLENAR GRID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Grid,"Task-Grid",STACK_SIZE,NULL,3,&xHandleTask_Grid );
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <main+0x4c4>)
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2303      	movs	r3, #3
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	22c8      	movs	r2, #200	; 0xc8
 800101c:	4958      	ldr	r1, [pc, #352]	; (8001180 <main+0x4c8>)
 800101e:	4859      	ldr	r0, [pc, #356]	; (8001184 <main+0x4cc>)
 8001020:	f004 fa2e 	bl	8005480 <xTaskCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a54      	ldr	r2, [pc, #336]	; (8001178 <main+0x4c0>)
 8001028:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <main+0x4c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d00a      	beq.n	8001048 <main+0x390>
        __asm volatile
 8001032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	f3bf 8f4f 	dsb	sy
 8001042:	617b      	str	r3, [r7, #20]
    }
 8001044:	bf00      	nop
 8001046:	e7fe      	b.n	8001046 <main+0x38e>

	 /////////////////////////////////TAREA DE CREAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_CrOp,"Task-CrOp",STACK_SIZE,NULL,3,&xHandleTask_CrOp );
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <main+0x4d0>)
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	2303      	movs	r3, #3
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	22c8      	movs	r2, #200	; 0xc8
 8001054:	494d      	ldr	r1, [pc, #308]	; (800118c <main+0x4d4>)
 8001056:	484e      	ldr	r0, [pc, #312]	; (8001190 <main+0x4d8>)
 8001058:	f004 fa12 	bl	8005480 <xTaskCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a46      	ldr	r2, [pc, #280]	; (8001178 <main+0x4c0>)
 8001060:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <main+0x4c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00a      	beq.n	8001080 <main+0x3c8>
        __asm volatile
 800106a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106e:	f383 8811 	msr	BASEPRI, r3
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	613b      	str	r3, [r7, #16]
    }
 800107c:	bf00      	nop
 800107e:	e7fe      	b.n	800107e <main+0x3c6>

	 /////////////////////////////////TAREA DE PROCESAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_PrOp,"Task-PrOp",STACK_SIZE,NULL,3,&xHandleTask_PrOp );
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <main+0x4dc>)
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2303      	movs	r3, #3
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	22c8      	movs	r2, #200	; 0xc8
 800108c:	4942      	ldr	r1, [pc, #264]	; (8001198 <main+0x4e0>)
 800108e:	4843      	ldr	r0, [pc, #268]	; (800119c <main+0x4e4>)
 8001090:	f004 f9f6 	bl	8005480 <xTaskCreate>
 8001094:	4603      	mov	r3, r0
 8001096:	4a38      	ldr	r2, [pc, #224]	; (8001178 <main+0x4c0>)
 8001098:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <main+0x4c0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00a      	beq.n	80010b8 <main+0x400>
        __asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	60fb      	str	r3, [r7, #12]
    }
 80010b4:	bf00      	nop
 80010b6:	e7fe      	b.n	80010b6 <main+0x3fe>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	2014      	movs	r0, #20
 80010be:	f003 fcb1 	bl	8004a24 <xQueueGenericCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <main+0x4e8>)
 80010c6:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <main+0x4e8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10a      	bne.n	80010e6 <main+0x42e>
        __asm volatile
 80010d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d4:	f383 8811 	msr	BASEPRI, r3
 80010d8:	f3bf 8f6f 	isb	sy
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	60bb      	str	r3, [r7, #8]
    }
 80010e2:	bf00      	nop
 80010e4:	e7fe      	b.n	80010e4 <main+0x42c>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 80010e6:	2200      	movs	r2, #0
 80010e8:	2104      	movs	r1, #4
 80010ea:	200a      	movs	r0, #10
 80010ec:	f003 fc9a 	bl	8004a24 <xQueueGenericCreate>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <main+0x4ec>)
 80010f4:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <main+0x4ec>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10a      	bne.n	8001114 <main+0x45c>
        __asm volatile
 80010fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	607b      	str	r3, [r7, #4]
    }
 8001110:	bf00      	nop
 8001112:	e7fe      	b.n	8001112 <main+0x45a>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <main+0x4f0>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001120:	4822      	ldr	r0, [pc, #136]	; (80011ac <main+0x4f4>)
 8001122:	f005 fa83 	bl	800662c <xTimerCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <main+0x4f8>)
 800112a:	6013      	str	r3, [r2, #0]
									 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <main+0x4f8>)
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	f004 fbe8 	bl	8005904 <xTaskGetTickCount>
 8001134:	4602      	mov	r2, r0
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	2101      	movs	r1, #1
 8001140:	4620      	mov	r0, r4
 8001142:	f005 facf 	bl	80066e4 <xTimerGenericCommand>


	inSystem ();
 8001146:	f000 f839 	bl	80011bc <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 800114a:	2102      	movs	r1, #2
 800114c:	4819      	ldr	r0, [pc, #100]	; (80011b4 <main+0x4fc>)
 800114e:	f001 fd1f 	bl	8002b90 <calibracionGyros>
 8001152:	ee10 3a10 	vmov	r3, s0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4915      	ldr	r1, [pc, #84]	; (80011b8 <main+0x500>)
 8001162:	e9c1 2300 	strd	r2, r3, [r1]

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8001166:	f004 fad1 	bl	800570c <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 800116a:	e7fe      	b.n	800116a <main+0x4b2>
 800116c:	2000025c 	.word	0x2000025c
 8001170:	080135b4 	.word	0x080135b4
 8001174:	080020f5 	.word	0x080020f5
 8001178:	2000022c 	.word	0x2000022c
 800117c:	20000260 	.word	0x20000260
 8001180:	080135c0 	.word	0x080135c0
 8001184:	080021a5 	.word	0x080021a5
 8001188:	20000264 	.word	0x20000264
 800118c:	080135cc 	.word	0x080135cc
 8001190:	08002349 	.word	0x08002349
 8001194:	20000268 	.word	0x20000268
 8001198:	080135d8 	.word	0x080135d8
 800119c:	08002409 	.word	0x08002409
 80011a0:	20000270 	.word	0x20000270
 80011a4:	2000026c 	.word	0x2000026c
 80011a8:	0800460d 	.word	0x0800460d
 80011ac:	080135e4 	.word	0x080135e4
 80011b0:	20000274 	.word	0x20000274
 80011b4:	20000430 	.word	0x20000430
 80011b8:	20000bd8 	.word	0x20000bd8

080011bc <inSystem>:

	}
}


void inSystem (void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80011c2:	4baf      	ldr	r3, [pc, #700]	; (8001480 <inSystem+0x2c4>)
 80011c4:	4aaf      	ldr	r2, [pc, #700]	; (8001484 <inSystem+0x2c8>)
 80011c6:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80011c8:	4bad      	ldr	r3, [pc, #692]	; (8001480 <inSystem+0x2c4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80011ce:	4bac      	ldr	r3, [pc, #688]	; (8001480 <inSystem+0x2c4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80011d4:	4baa      	ldr	r3, [pc, #680]	; (8001480 <inSystem+0x2c4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80011da:	4ba9      	ldr	r3, [pc, #676]	; (8001480 <inSystem+0x2c4>)
 80011dc:	2205      	movs	r2, #5
 80011de:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011e0:	4ba7      	ldr	r3, [pc, #668]	; (8001480 <inSystem+0x2c4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80011e6:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <inSystem+0x2c4>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80011ec:	48a4      	ldr	r0, [pc, #656]	; (8001480 <inSystem+0x2c4>)
 80011ee:	f009 fcd1 	bl	800ab94 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80011f2:	2101      	movs	r1, #1
 80011f4:	48a2      	ldr	r0, [pc, #648]	; (8001480 <inSystem+0x2c4>)
 80011f6:	f009 fdf7 	bl	800ade8 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 80011fa:	f007 ff35 	bl	8009068 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array,
 80011fe:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <inSystem+0x2cc>)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4ba2      	ldr	r3, [pc, #648]	; (800148c <inSystem+0x2d0>)
 8001204:	4aa2      	ldr	r2, [pc, #648]	; (8001490 <inSystem+0x2d4>)
 8001206:	49a3      	ldr	r1, [pc, #652]	; (8001494 <inSystem+0x2d8>)
 8001208:	48a3      	ldr	r0, [pc, #652]	; (8001498 <inSystem+0x2dc>)
 800120a:	f002 fba5 	bl	8003958 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 800120e:	4ba3      	ldr	r3, [pc, #652]	; (800149c <inSystem+0x2e0>)
 8001210:	4a9c      	ldr	r2, [pc, #624]	; (8001484 <inSystem+0x2c8>)
 8001212:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001214:	4ba1      	ldr	r3, [pc, #644]	; (800149c <inSystem+0x2e0>)
 8001216:	2202      	movs	r2, #2
 8001218:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800121a:	4ba0      	ldr	r3, [pc, #640]	; (800149c <inSystem+0x2e0>)
 800121c:	2202      	movs	r2, #2
 800121e:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001220:	4b9e      	ldr	r3, [pc, #632]	; (800149c <inSystem+0x2e0>)
 8001222:	2200      	movs	r2, #0
 8001224:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8001226:	4b9d      	ldr	r3, [pc, #628]	; (800149c <inSystem+0x2e0>)
 8001228:	2200      	movs	r2, #0
 800122a:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800122c:	4b9b      	ldr	r3, [pc, #620]	; (800149c <inSystem+0x2e0>)
 800122e:	2200      	movs	r2, #0
 8001230:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001232:	4b9a      	ldr	r3, [pc, #616]	; (800149c <inSystem+0x2e0>)
 8001234:	2202      	movs	r2, #2
 8001236:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001238:	4898      	ldr	r0, [pc, #608]	; (800149c <inSystem+0x2e0>)
 800123a:	f009 fcab 	bl	800ab94 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 800123e:	4b98      	ldr	r3, [pc, #608]	; (80014a0 <inSystem+0x2e4>)
 8001240:	4a98      	ldr	r2, [pc, #608]	; (80014a4 <inSystem+0x2e8>)
 8001242:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8001244:	4b96      	ldr	r3, [pc, #600]	; (80014a0 <inSystem+0x2e4>)
 8001246:	2200      	movs	r2, #0
 8001248:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <inSystem+0x2e4>)
 800124c:	4a96      	ldr	r2, [pc, #600]	; (80014a8 <inSystem+0x2ec>)
 800124e:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001250:	4993      	ldr	r1, [pc, #588]	; (80014a0 <inSystem+0x2e4>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b95      	ldr	r3, [pc, #596]	; (80014ac <inSystem+0x2f0>)
 8001258:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 800125c:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <inSystem+0x2e4>)
 800125e:	2264      	movs	r2, #100	; 0x64
 8001260:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001262:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <inSystem+0x2e4>)
 8001264:	2201      	movs	r2, #1
 8001266:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001268:	4b8d      	ldr	r3, [pc, #564]	; (80014a0 <inSystem+0x2e4>)
 800126a:	2201      	movs	r2, #1
 800126c:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 800126e:	488c      	ldr	r0, [pc, #560]	; (80014a0 <inSystem+0x2e4>)
 8001270:	f00a fcfa 	bl	800bc68 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001274:	488a      	ldr	r0, [pc, #552]	; (80014a0 <inSystem+0x2e4>)
 8001276:	f00a fde1 	bl	800be3c <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800127a:	4b8d      	ldr	r3, [pc, #564]	; (80014b0 <inSystem+0x2f4>)
 800127c:	4a81      	ldr	r2, [pc, #516]	; (8001484 <inSystem+0x2c8>)
 800127e:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001280:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <inSystem+0x2f4>)
 8001282:	2202      	movs	r2, #2
 8001284:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001286:	4b8a      	ldr	r3, [pc, #552]	; (80014b0 <inSystem+0x2f4>)
 8001288:	2202      	movs	r2, #2
 800128a:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <inSystem+0x2f4>)
 800128e:	2200      	movs	r2, #0
 8001290:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001292:	4b87      	ldr	r3, [pc, #540]	; (80014b0 <inSystem+0x2f4>)
 8001294:	2201      	movs	r2, #1
 8001296:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001298:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <inSystem+0x2f4>)
 800129a:	2200      	movs	r2, #0
 800129c:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800129e:	4b84      	ldr	r3, [pc, #528]	; (80014b0 <inSystem+0x2f4>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80012a4:	4882      	ldr	r0, [pc, #520]	; (80014b0 <inSystem+0x2f4>)
 80012a6:	f009 fc75 	bl	800ab94 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <inSystem+0x2f8>)
 80012ac:	4a7d      	ldr	r2, [pc, #500]	; (80014a4 <inSystem+0x2e8>)
 80012ae:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80012b0:	4b80      	ldr	r3, [pc, #512]	; (80014b4 <inSystem+0x2f8>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <inSystem+0x2f8>)
 80012b8:	4a7b      	ldr	r2, [pc, #492]	; (80014a8 <inSystem+0x2ec>)
 80012ba:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 80012bc:	497d      	ldr	r1, [pc, #500]	; (80014b4 <inSystem+0x2f8>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <inSystem+0x2f0>)
 80012c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <inSystem+0x2f8>)
 80012ca:	2264      	movs	r2, #100	; 0x64
 80012cc:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80012ce:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <inSystem+0x2f8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80012d4:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <inSystem+0x2f8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80012da:	4876      	ldr	r0, [pc, #472]	; (80014b4 <inSystem+0x2f8>)
 80012dc:	f00a fcc4 	bl	800bc68 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80012e0:	4874      	ldr	r0, [pc, #464]	; (80014b4 <inSystem+0x2f8>)
 80012e2:	f00a fdab 	bl	800be3c <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <inSystem+0x2fc>)
 80012e8:	4a74      	ldr	r2, [pc, #464]	; (80014bc <inSystem+0x300>)
 80012ea:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012ec:	4b72      	ldr	r3, [pc, #456]	; (80014b8 <inSystem+0x2fc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <inSystem+0x2fc>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80012f8:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <inSystem+0x2fc>)
 80012fa:	220a      	movs	r2, #10
 80012fc:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012fe:	4b6e      	ldr	r3, [pc, #440]	; (80014b8 <inSystem+0x2fc>)
 8001300:	2200      	movs	r2, #0
 8001302:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001304:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <inSystem+0x2fc>)
 8001306:	2200      	movs	r2, #0
 8001308:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800130a:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <inSystem+0x2fc>)
 800130c:	2202      	movs	r2, #2
 800130e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001310:	4869      	ldr	r0, [pc, #420]	; (80014b8 <inSystem+0x2fc>)
 8001312:	f009 fc3f 	bl	800ab94 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001316:	2100      	movs	r1, #0
 8001318:	4867      	ldr	r0, [pc, #412]	; (80014b8 <inSystem+0x2fc>)
 800131a:	f009 fd90 	bl	800ae3e <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 800131e:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <inSystem+0x304>)
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <inSystem+0x300>)
 8001322:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <inSystem+0x304>)
 8001326:	2200      	movs	r2, #0
 8001328:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800132a:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <inSystem+0x304>)
 800132c:	2201      	movs	r2, #1
 800132e:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <inSystem+0x304>)
 8001332:	220b      	movs	r2, #11
 8001334:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <inSystem+0x304>)
 8001338:	2200      	movs	r2, #0
 800133a:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <inSystem+0x304>)
 800133e:	2200      	movs	r2, #0
 8001340:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <inSystem+0x304>)
 8001344:	2202      	movs	r2, #2
 8001346:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001348:	485d      	ldr	r0, [pc, #372]	; (80014c0 <inSystem+0x304>)
 800134a:	f009 fc23 	bl	800ab94 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 800134e:	2100      	movs	r1, #0
 8001350:	485b      	ldr	r0, [pc, #364]	; (80014c0 <inSystem+0x304>)
 8001352:	f009 fd74 	bl	800ae3e <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <inSystem+0x308>)
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <inSystem+0x300>)
 800135a:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800135c:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <inSystem+0x308>)
 800135e:	2200      	movs	r2, #0
 8001360:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001362:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <inSystem+0x308>)
 8001364:	2201      	movs	r2, #1
 8001366:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <inSystem+0x308>)
 800136a:	220c      	movs	r2, #12
 800136c:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <inSystem+0x308>)
 8001370:	2200      	movs	r2, #0
 8001372:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <inSystem+0x308>)
 8001376:	2200      	movs	r2, #0
 8001378:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <inSystem+0x308>)
 800137c:	2202      	movs	r2, #2
 800137e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001380:	4850      	ldr	r0, [pc, #320]	; (80014c4 <inSystem+0x308>)
 8001382:	f009 fc07 	bl	800ab94 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 8001386:	2100      	movs	r1, #0
 8001388:	484e      	ldr	r0, [pc, #312]	; (80014c4 <inSystem+0x308>)
 800138a:	f009 fd58 	bl	800ae3e <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <inSystem+0x2dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <inSystem+0x30c>)
 8001398:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <inSystem+0x310>)
 800139a:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <inSystem+0x30c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <inSystem+0x30c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <inSystem+0x30c>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <inSystem+0x30c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <inSystem+0x30c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <inSystem+0x30c>)
 80013bc:	2202      	movs	r2, #2
 80013be:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80013c0:	4841      	ldr	r0, [pc, #260]	; (80014c8 <inSystem+0x30c>)
 80013c2:	f009 fbe7 	bl	800ab94 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 80013c6:	2100      	movs	r1, #0
 80013c8:	483f      	ldr	r0, [pc, #252]	; (80014c8 <inSystem+0x30c>)
 80013ca:	f009 fd38 	bl	800ae3e <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <inSystem+0x2dc>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <inSystem+0x314>)
 80013d8:	4a38      	ldr	r2, [pc, #224]	; (80014bc <inSystem+0x300>)
 80013da:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <inSystem+0x314>)
 80013de:	2200      	movs	r2, #0
 80013e0:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <inSystem+0x314>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <inSystem+0x314>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <inSystem+0x314>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <inSystem+0x314>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <inSystem+0x314>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <inSystem+0x318>)
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <inSystem+0x314>)
 8001404:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <inSystem+0x318>)
 8001408:	2202      	movs	r2, #2
 800140a:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 800140c:	4831      	ldr	r0, [pc, #196]	; (80014d4 <inSystem+0x318>)
 800140e:	f008 faf9 	bl	8009a04 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 8001412:	2106      	movs	r1, #6
 8001414:	482f      	ldr	r0, [pc, #188]	; (80014d4 <inSystem+0x318>)
 8001416:	f009 f99d 	bl	800a754 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <inSystem+0x31c>)
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <inSystem+0x300>)
 800141e:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <inSystem+0x31c>)
 8001422:	2200      	movs	r2, #0
 8001424:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <inSystem+0x31c>)
 8001428:	2200      	movs	r2, #0
 800142a:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <inSystem+0x31c>)
 800142e:	2203      	movs	r2, #3
 8001430:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <inSystem+0x31c>)
 8001434:	2200      	movs	r2, #0
 8001436:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <inSystem+0x31c>)
 800143a:	2200      	movs	r2, #0
 800143c:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <inSystem+0x31c>)
 8001440:	2202      	movs	r2, #2
 8001442:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <inSystem+0x320>)
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <inSystem+0x31c>)
 8001448:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <inSystem+0x320>)
 800144c:	2202      	movs	r2, #2
 800144e:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001450:	4822      	ldr	r0, [pc, #136]	; (80014dc <inSystem+0x320>)
 8001452:	f008 fad7 	bl	8009a04 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 8001456:	2106      	movs	r1, #6
 8001458:	4820      	ldr	r0, [pc, #128]	; (80014dc <inSystem+0x320>)
 800145a:	f009 f97b 	bl	800a754 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <inSystem+0x324>)
 8001460:	4a08      	ldr	r2, [pc, #32]	; (8001484 <inSystem+0x2c8>)
 8001462:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <inSystem+0x324>)
 8001466:	2207      	movs	r2, #7
 8001468:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <inSystem+0x324>)
 800146c:	2202      	movs	r2, #2
 800146e:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <inSystem+0x324>)
 8001472:	2200      	movs	r2, #0
 8001474:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <inSystem+0x324>)
 8001478:	2209      	movs	r2, #9
 800147a:	711a      	strb	r2, [r3, #4]
 800147c:	e032      	b.n	80014e4 <inSystem+0x328>
 800147e:	bf00      	nop
 8001480:	20000278 	.word	0x20000278
 8001484:	40020000 	.word	0x40020000
 8001488:	200005dc 	.word	0x200005dc
 800148c:	200005f0 	.word	0x200005f0
 8001490:	20000610 	.word	0x20000610
 8001494:	20000b30 	.word	0x20000b30
 8001498:	20000440 	.word	0x20000440
 800149c:	20000284 	.word	0x20000284
 80014a0:	20000350 	.word	0x20000350
 80014a4:	40000c00 	.word	0x40000c00
 80014a8:	41e00000 	.word	0x41e00000
 80014ac:	40408000 	.word	0x40408000
 80014b0:	20000290 	.word	0x20000290
 80014b4:	20000370 	.word	0x20000370
 80014b8:	200002c0 	.word	0x200002c0
 80014bc:	40020800 	.word	0x40020800
 80014c0:	200002b4 	.word	0x200002b4
 80014c4:	200002d8 	.word	0x200002d8
 80014c8:	200002cc 	.word	0x200002cc
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	200002e4 	.word	0x200002e4
 80014d4:	20000314 	.word	0x20000314
 80014d8:	200002f0 	.word	0x200002f0
 80014dc:	2000031c 	.word	0x2000031c
 80014e0:	200002a8 	.word	0x200002a8
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <inSystem+0x47c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <inSystem+0x47c>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80014f0:	4851      	ldr	r0, [pc, #324]	; (8001638 <inSystem+0x47c>)
 80014f2:	f009 fb4f 	bl	800ab94 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <inSystem+0x480>)
 80014f8:	4a51      	ldr	r2, [pc, #324]	; (8001640 <inSystem+0x484>)
 80014fa:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <inSystem+0x480>)
 80014fe:	2207      	movs	r2, #7
 8001500:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <inSystem+0x480>)
 8001504:	2202      	movs	r2, #2
 8001506:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <inSystem+0x480>)
 800150a:	2200      	movs	r2, #0
 800150c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <inSystem+0x480>)
 8001510:	220a      	movs	r2, #10
 8001512:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <inSystem+0x480>)
 8001516:	2200      	movs	r2, #0
 8001518:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <inSystem+0x480>)
 800151c:	2203      	movs	r2, #3
 800151e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001520:	4846      	ldr	r0, [pc, #280]	; (800163c <inSystem+0x480>)
 8001522:	f009 fb37 	bl	800ab94 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <inSystem+0x488>)
 8001528:	4a47      	ldr	r2, [pc, #284]	; (8001648 <inSystem+0x48c>)
 800152a:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <inSystem+0x488>)
 800152e:	4a47      	ldr	r2, [pc, #284]	; (800164c <inSystem+0x490>)
 8001530:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <inSystem+0x488>)
 8001534:	2201      	movs	r2, #1
 8001536:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001538:	4b42      	ldr	r3, [pc, #264]	; (8001644 <inSystem+0x488>)
 800153a:	2201      	movs	r2, #1
 800153c:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <inSystem+0x488>)
 8001540:	2200      	movs	r2, #0
 8001542:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001544:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <inSystem+0x488>)
 8001546:	2202      	movs	r2, #2
 8001548:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <inSystem+0x488>)
 800154c:	2200      	movs	r2, #0
 800154e:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <inSystem+0x488>)
 8001552:	2200      	movs	r2, #0
 8001554:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <inSystem+0x488>)
 8001558:	2200      	movs	r2, #0
 800155a:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 800155c:	4839      	ldr	r0, [pc, #228]	; (8001644 <inSystem+0x488>)
 800155e:	f00b fbfd 	bl	800cd5c <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 8001562:	2106      	movs	r1, #6
 8001564:	4837      	ldr	r0, [pc, #220]	; (8001644 <inSystem+0x488>)
 8001566:	f00c f8ab 	bl	800d6c0 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <inSystem+0x494>)
 800156c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001570:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <inSystem+0x494>)
 8001574:	2201      	movs	r2, #1
 8001576:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <inSystem+0x494>)
 800157a:	2200      	movs	r2, #0
 800157c:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <inSystem+0x494>)
 8001580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001584:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <inSystem+0x494>)
 8001588:	2210      	movs	r2, #16
 800158a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800158c:	4830      	ldr	r0, [pc, #192]	; (8001650 <inSystem+0x494>)
 800158e:	f007 fd87 	bl	80090a0 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001592:	2106      	movs	r1, #6
 8001594:	482e      	ldr	r0, [pc, #184]	; (8001650 <inSystem+0x494>)
 8001596:	f007 ff41 	bl	800941c <TIM_SetPriority>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 800159a:	482d      	ldr	r0, [pc, #180]	; (8001650 <inSystem+0x494>)
 800159c:	f008 f9c6 	bl	800992c <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <inSystem+0x498>)
 80015a2:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <inSystem+0x49c>)
 80015a4:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <inSystem+0x498>)
 80015a8:	2204      	movs	r2, #4
 80015aa:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <inSystem+0x498>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <inSystem+0x498>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <inSystem+0x498>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <inSystem+0x498>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <inSystem+0x498>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <inSystem+0x4a0>)
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <inSystem+0x49c>)
 80015ce:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <inSystem+0x4a0>)
 80015d2:	2204      	movs	r2, #4
 80015d4:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <inSystem+0x4a0>)
 80015d8:	2202      	movs	r2, #2
 80015da:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <inSystem+0x4a0>)
 80015de:	2209      	movs	r2, #9
 80015e0:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <inSystem+0x4a0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <inSystem+0x4a0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <inSystem+0x4a0>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <inSystem+0x4a4>)
 80015f6:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <inSystem+0x4a8>)
 80015f8:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <inSystem+0x4a4>)
 80015fc:	2232      	movs	r2, #50	; 0x32
 80015fe:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <inSystem+0x4a4>)
 8001602:	2268      	movs	r2, #104	; 0x68
 8001604:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <inSystem+0x4a4>)
 8001608:	2201      	movs	r2, #1
 800160a:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <inSystem+0x4ac>)
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <inSystem+0x498>)
 8001610:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <inSystem+0x4ac>)
 8001614:	4a11      	ldr	r2, [pc, #68]	; (800165c <inSystem+0x4a0>)
 8001616:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <inSystem+0x4ac>)
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <inSystem+0x4a4>)
 800161c:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <inSystem+0x4ac>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <inSystem+0x4ac>)
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <inSystem+0x4ac>)
 800162c:	f009 fc6a 	bl	800af04 <configMPUAccel>

}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002a8 	.word	0x200002a8
 800163c:	2000029c 	.word	0x2000029c
 8001640:	40020000 	.word	0x40020000
 8001644:	20000390 	.word	0x20000390
 8001648:	40011000 	.word	0x40011000
 800164c:	05f5e100 	.word	0x05f5e100
 8001650:	20000324 	.word	0x20000324
 8001654:	200002fc 	.word	0x200002fc
 8001658:	40020400 	.word	0x40020400
 800165c:	20000308 	.word	0x20000308
 8001660:	20000424 	.word	0x20000424
 8001664:	40005400 	.word	0x40005400
 8001668:	20000430 	.word	0x20000430

0800166c <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 8001674:	4bab      	ldr	r3, [pc, #684]	; (8001924 <vTask_Menu+0x2b8>)
 8001676:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here: ";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		if (!end){
 8001678:	4bab      	ldr	r3, [pc, #684]	; (8001928 <vTask_Menu+0x2bc>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <vTask_Menu+0x26>
			xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8001680:	4baa      	ldr	r3, [pc, #680]	; (800192c <vTask_Menu+0x2c0>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f107 010c 	add.w	r1, r7, #12
 8001688:	2300      	movs	r3, #0
 800168a:	f04f 32ff 	mov.w	r2, #4294967295
 800168e:	f003 fa4b 	bl	8004b28 <xQueueGenericSend>
		}
		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	9200      	str	r2, [sp, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f004 fcc9 	bl	8006038 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	617b      	str	r3, [r7, #20]

		if (end){
 80016aa:	4b9f      	ldr	r3, [pc, #636]	; (8001928 <vTask_Menu+0x2bc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <vTask_Menu+0x60>

			 next_state = sMainMenu; // Cambiamos el estado actual al de menu
 80016b2:	4b9f      	ldr	r3, [pc, #636]	; (8001930 <vTask_Menu+0x2c4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
			 end = RESET; // Bajamos la bandera
 80016b8:	4b9b      	ldr	r3, [pc, #620]	; (8001928 <vTask_Menu+0x2bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]

			 //Reseteamos la cola para recibir nuevos comandos
			 xQueueReset(xQueue_InputData);
 80016be:	4b9d      	ldr	r3, [pc, #628]	; (8001934 <vTask_Menu+0x2c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 f945 	bl	8004954 <xQueueGenericReset>
 80016ca:	e7d5      	b.n	8001678 <vTask_Menu+0xc>
		}else if (!flag_PrOp){
 80016cc:	4b9a      	ldr	r3, [pc, #616]	; (8001938 <vTask_Menu+0x2cc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8104 	bne.w	80018de <vTask_Menu+0x272>

			// El comando recibido solo tener el largo de 1 caracter
			if(cmd->functionType != -1){
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	f000 80d4 	beq.w	800188a <vTask_Menu+0x21e>

				switch (cmd->functionType) {
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	f200 8164 	bhi.w	80019b6 <vTask_Menu+0x34a>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <vTask_Menu+0x88>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001711 	.word	0x08001711
 80016f8:	08001747 	.word	0x08001747
 80016fc:	0800177d 	.word	0x0800177d
 8001700:	080017b3 	.word	0x080017b3
 8001704:	080017e9 	.word	0x080017e9
 8001708:	0800181f 	.word	0x0800181f
 800170c:	08001855 	.word	0x08001855
					case 1:{// sGo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001710:	4b86      	ldr	r3, [pc, #536]	; (800192c <vTask_Menu+0x2c0>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	f04f 32ff 	mov.w	r2, #4294967295
 800171a:	4988      	ldr	r1, [pc, #544]	; (800193c <vTask_Menu+0x2d0>)
 800171c:	f003 fa04 	bl	8004b28 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001720:	4b84      	ldr	r3, [pc, #528]	; (8001934 <vTask_Menu+0x2c8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f003 f914 	bl	8004954 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGo;
 800172c:	4b80      	ldr	r3, [pc, #512]	; (8001930 <vTask_Menu+0x2c4>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 8001732:	4b83      	ldr	r3, [pc, #524]	; (8001940 <vTask_Menu+0x2d4>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	f004 fcfa 	bl	8006138 <xTaskGenericNotify>


						break;
 8001744:	e138      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 2:{// sGoTo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 8001746:	4b79      	ldr	r3, [pc, #484]	; (800192c <vTask_Menu+0x2c0>)
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	497c      	ldr	r1, [pc, #496]	; (8001944 <vTask_Menu+0x2d8>)
 8001752:	f003 f9e9 	bl	8004b28 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <vTask_Menu+0x2c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f8f9 	bl	8004954 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGoTo;
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <vTask_Menu+0x2c4>)
 8001764:	2202      	movs	r2, #2
 8001766:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_GoTo, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGoTo
 8001768:	4b77      	ldr	r3, [pc, #476]	; (8001948 <vTask_Menu+0x2dc>)
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	2300      	movs	r3, #0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	f004 fcdf 	bl	8006138 <xTaskGenericNotify>


						break;
 800177a:	e11d      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 3:{ // sRoll
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_3,portMAX_DELAY);
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <vTask_Menu+0x2c0>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	2300      	movs	r3, #0
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	4971      	ldr	r1, [pc, #452]	; (800194c <vTask_Menu+0x2e0>)
 8001788:	f003 f9ce 	bl	8004b28 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800178c:	4b69      	ldr	r3, [pc, #420]	; (8001934 <vTask_Menu+0x2c8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f8de 	bl	8004954 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRoll;
 8001798:	4b65      	ldr	r3, [pc, #404]	; (8001930 <vTask_Menu+0x2c4>)
 800179a:	2204      	movs	r2, #4
 800179c:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Roll, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRoll
 800179e:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <vTask_Menu+0x2e4>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	f004 fcc4 	bl	8006138 <xTaskGenericNotify>


						break;
 80017b0:	e102      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 4:{ // sRollTo
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_4,portMAX_DELAY);
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <vTask_Menu+0x2c0>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	4965      	ldr	r1, [pc, #404]	; (8001954 <vTask_Menu+0x2e8>)
 80017be:	f003 f9b3 	bl	8004b28 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017c2:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <vTask_Menu+0x2c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f8c3 	bl	8004954 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRollTo;
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <vTask_Menu+0x2c4>)
 80017d0:	2205      	movs	r2, #5
 80017d2:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Rollto, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRollTo
 80017d4:	4b60      	ldr	r3, [pc, #384]	; (8001958 <vTask_Menu+0x2ec>)
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	f004 fca9 	bl	8006138 <xTaskGenericNotify>


						break;
 80017e6:	e0e7      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 5:{ // Reinit
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_5,portMAX_DELAY);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <vTask_Menu+0x2c0>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	495a      	ldr	r1, [pc, #360]	; (800195c <vTask_Menu+0x2f0>)
 80017f4:	f003 f998 	bl	8004b28 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017f8:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <vTask_Menu+0x2c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 f8a8 	bl	8004954 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state  = Aux;
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <vTask_Menu+0x2c4>)
 8001806:	2208      	movs	r2, #8
 8001808:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Reinit, 0 ,eNoAction); // NOS VAMOS AL ESTADO Reinit
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <vTask_Menu+0x2f4>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	f004 fc8e 	bl	8006138 <xTaskGenericNotify>


						break;
 800181c:	e0cc      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 6:{ // sSquare
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_6,portMAX_DELAY);
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <vTask_Menu+0x2c0>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	494e      	ldr	r1, [pc, #312]	; (8001964 <vTask_Menu+0x2f8>)
 800182a:	f003 f97d 	bl	8004b28 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <vTask_Menu+0x2c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f88d 	bl	8004954 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sSquare;
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <vTask_Menu+0x2c4>)
 800183c:	2207      	movs	r2, #7
 800183e:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Square, 0 ,eNoAction); // NOS VAMOS AL ESTADO sSquare
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <vTask_Menu+0x2fc>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2300      	movs	r3, #0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	f004 fc73 	bl	8006138 <xTaskGenericNotify>


						break;
 8001852:	e0b1      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 7:{ // sAstar
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_7,portMAX_DELAY);
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <vTask_Menu+0x2c0>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	f04f 32ff 	mov.w	r2, #4294967295
 800185e:	4943      	ldr	r1, [pc, #268]	; (800196c <vTask_Menu+0x300>)
 8001860:	f003 f962 	bl	8004b28 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <vTask_Menu+0x2c8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f872 	bl	8004954 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sAstar;
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <vTask_Menu+0x2c4>)
 8001872:	2206      	movs	r2, #6
 8001874:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Astar, 0 ,eNoAction); // NOS VAMOS AL ESTADO sAstar
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <vTask_Menu+0x304>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	f004 fc58 	bl	8006138 <xTaskGenericNotify>
						break;
 8001888:	e096      	b.n	80019b8 <vTask_Menu+0x34c>
						///////
						continue;}
				}

			}else{
				xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <vTask_Menu+0x2c0>)
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <vTask_Menu+0x308>)
 8001896:	f003 f947 	bl	8004b28 <xQueueGenericSend>
				//Aca se deberia notificar cambiar la variable next_state y notificar
				wrong_command = RESET; // RESETEAMOS LA BANDERA
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <vTask_Menu+0x30c>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
				xQueueReset(xQueue_InputData); // Reseteamos la cola que recibe los comandos
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <vTask_Menu+0x2c8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f854 	bl	8004954 <xQueueGenericReset>
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00c f9cc 	bl	800dc50 <memset>

				xTaskNotify(xHandleTask_Menu,0,eNoAction); // Notificamos a la funcion menu para que pueda inmediatamente mandar de nuevo el menu
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <vTask_Menu+0x310>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	f004 fc37 	bl	8006138 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2000      	movs	r0, #0
 80018d8:	f004 fbae 	bl	8006038 <xTaskGenericNotifyWait>
 80018dc:	e6cc      	b.n	8001678 <vTask_Menu+0xc>
			}
		}else{
			// Si estamos aqu es porque llegamos al menu a traves del procesamiento de operaciones
			// solo se cambiara momentaneamente el estado para procesarlo y luego de terminado, se

			switch (cmd->functionType) {
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d002      	beq.n	80018ec <vTask_Menu+0x280>
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d04a      	beq.n	8001980 <vTask_Menu+0x314>
					xTaskNotify(xHandleTask_Rollto,0,eNoAction); // NOS VAMOS AL ESTADO sRollTo

					break;
				}default:{
					///////
					continue;}
 80018ea:	e065      	b.n	80019b8 <vTask_Menu+0x34c>
					xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <vTask_Menu+0x2c0>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295
 80018f6:	4913      	ldr	r1, [pc, #76]	; (8001944 <vTask_Menu+0x2d8>)
 80018f8:	f003 f916 	bl	8004b28 <xQueueGenericSend>
					xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <vTask_Menu+0x2c8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f003 f826 	bl	8004954 <xQueueGenericReset>
					next_state = sGoTo;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <vTask_Menu+0x2c4>)
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_GoTo,0,eNoAction); // NOS VAMOS AL ESTADO sGoTo
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <vTask_Menu+0x2dc>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	f004 fc0c 	bl	8006138 <xTaskGenericNotify>
					break;
 8001920:	e04a      	b.n	80019b8 <vTask_Menu+0x34c>
 8001922:	bf00      	nop
 8001924:	080135f0 	.word	0x080135f0
 8001928:	200005e5 	.word	0x200005e5
 800192c:	2000026c 	.word	0x2000026c
 8001930:	200005df 	.word	0x200005df
 8001934:	20000270 	.word	0x20000270
 8001938:	200005e7 	.word	0x200005e7
 800193c:	20000008 	.word	0x20000008
 8001940:	20000240 	.word	0x20000240
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000248 	.word	0x20000248
 800194c:	20000010 	.word	0x20000010
 8001950:	2000024c 	.word	0x2000024c
 8001954:	20000014 	.word	0x20000014
 8001958:	20000250 	.word	0x20000250
 800195c:	20000018 	.word	0x20000018
 8001960:	20000254 	.word	0x20000254
 8001964:	2000001c 	.word	0x2000001c
 8001968:	20000258 	.word	0x20000258
 800196c:	20000020 	.word	0x20000020
 8001970:	2000025c 	.word	0x2000025c
 8001974:	20000004 	.word	0x20000004
 8001978:	200005e4 	.word	0x200005e4
 800197c:	20000230 	.word	0x20000230
					xQueueSend(xQueue_Print,&msg_option_4,portMAX_DELAY);
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <vTask_Menu+0x350>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <vTask_Menu+0x354>)
 800198c:	f003 f8cc 	bl	8004b28 <xQueueGenericSend>
					xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <vTask_Menu+0x358>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f002 ffdc 	bl	8004954 <xQueueGenericReset>
					next_state = sRollTo;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <vTask_Menu+0x35c>)
 800199e:	2205      	movs	r2, #5
 80019a0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Rollto,0,eNoAction); // NOS VAMOS AL ESTADO sRollTo
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <vTask_Menu+0x360>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	f004 fbc2 	bl	8006138 <xTaskGenericNotify>
					break;
 80019b4:	e000      	b.n	80019b8 <vTask_Menu+0x34c>
						continue;}
 80019b6:	bf00      	nop
		if (!end){
 80019b8:	e65e      	b.n	8001678 <vTask_Menu+0xc>
 80019ba:	bf00      	nop
 80019bc:	2000026c 	.word	0x2000026c
 80019c0:	20000014 	.word	0x20000014
 80019c4:	20000270 	.word	0x20000270
 80019c8:	200005df 	.word	0x200005df
 80019cc:	20000250 	.word	0x20000250

080019d0 <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b098      	sub	sp, #96	; 0x60
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]

   command_t cmd = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2244      	movs	r2, #68	; 0x44
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00c f935 	bl	800dc50 <memset>
   command_t *proc_cmd = {0};
 80019e6:	2300      	movs	r3, #0
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
   uint32_t cmd_procc_addr;

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   xTaskNotifyWait(0,0,&cmd_procc_addr,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	9200      	str	r2, [sp, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2000      	movs	r0, #0
 80019fa:	f004 fb1d 	bl	8006038 <xTaskGenericNotifyWait>
	  proc_cmd = (command_t *) cmd_procc_addr;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	657b      	str	r3, [r7, #84]	; 0x54

	   if (!flag_PrOp){
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <vTask_Commands+0x50>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <vTask_Commands+0x46>

		  process_command(&cmd);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fea0 	bl	8002754 <process_command>
 8001a14:	e7e9      	b.n	80019ea <vTask_Commands+0x1a>

	  }else{
		  // Si estamos aqui es porque llego un mensaje escrito en software
		  process_command(proc_cmd);
 8001a16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a18:	f000 fe9c 	bl	8002754 <process_command>
	   xTaskNotifyWait(0,0,&cmd_procc_addr,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a1c:	e7e5      	b.n	80019ea <vTask_Commands+0x1a>
 8001a1e:	bf00      	nop
 8001a20:	200005e7 	.word	0x200005e7

08001a24 <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f004 fafd 	bl	8006038 <xTaskGenericNotifyWait>

		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <vTask_Stop+0x58>)
 8001a40:	f001 ff65 	bl	800390e <stop>

		Mode_dir.Mode = None;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <vTask_Stop+0x5c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

		 if (end){
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <vTask_Stop+0x60>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <vTask_Stop+0x42>
			 xTaskNotify(xHandleTask_Menu,0, eNoAction);
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <vTask_Stop+0x64>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f004 fb6a 	bl	8006138 <xTaskGenericNotify>
 8001a64:	e7e2      	b.n	8001a2c <vTask_Stop+0x8>
		 }else{
			 // Si estamos aqui es porque no se levanto la bandera de end por lo que estamos en un caso de procesamiento de operaciones
			 //Nos vamos de nuevo a procesar operaciones para seguir con la operación siguente

			 xTaskNotify(xHandleTask_PrOp,0, eNoAction); // Nos vamos la tarea de procesamiento de operaciones para repetir el ciclo
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <vTask_Stop+0x68>)
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	f004 fb60 	bl	8006138 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a78:	e7d8      	b.n	8001a2c <vTask_Stop+0x8>
 8001a7a:	bf00      	nop
 8001a7c:	20000440 	.word	0x20000440
 8001a80:	200005dc 	.word	0x200005dc
 8001a84:	200005e5 	.word	0x200005e5
 8001a88:	20000230 	.word	0x20000230
 8001a8c:	20000268 	.word	0x20000268

08001a90 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f004 fac7 	bl	8006038 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <vTask_Go+0x3c>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <vTask_Go+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <vTask_Go+0x3c>)
 8001ab8:	705a      	strb	r2, [r3, #1]

		resetParameters();
 8001aba:	f002 fd91 	bl	80045e0 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <vTask_Go+0x3c>)
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <vTask_Go+0x44>)
 8001ac4:	f001 fe38 	bl	8003738 <On_motor_Straigh_Roll>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001ac8:	e7e6      	b.n	8001a98 <vTask_Go+0x8>
 8001aca:	bf00      	nop
 8001acc:	200005dc 	.word	0x200005dc
 8001ad0:	2000051c 	.word	0x2000051c
 8001ad4:	20000440 	.word	0x20000440

08001ad8 <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af06      	add	r7, sp, #24
 8001ade:	6078      	str	r0, [r7, #4]

	double angleToGo_Relative = 0;
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f004 fa9d 	bl	8006038 <xTaskGenericNotifyWait>

		 switch (next_state) {
 8001afe:	4ba8      	ldr	r3, [pc, #672]	; (8001da0 <vTask_Control+0x2c8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	f200 8197 	bhi.w	8001e38 <vTask_Control+0x360>
 8001b0a:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <vTask_Control+0x38>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b25 	.word	0x08001b25
 8001b14:	08001b5d 	.word	0x08001b5d
 8001b18:	08001e39 	.word	0x08001e39
 8001b1c:	08001c9b 	.word	0x08001c9b
 8001b20:	08001ccf 	.word	0x08001ccf
			case sGo:{

				go(handler_Motor_Array,
 8001b24:	4b9f      	ldr	r3, [pc, #636]	; (8001da4 <vTask_Control+0x2cc>)
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <vTask_Control+0x2d0>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001b32:	4b9e      	ldr	r3, [pc, #632]	; (8001dac <vTask_Control+0x2d4>)
 8001b34:	9304      	str	r3, [sp, #16]
 8001b36:	4b9e      	ldr	r3, [pc, #632]	; (8001db0 <vTask_Control+0x2d8>)
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	4b9e      	ldr	r3, [pc, #632]	; (8001db4 <vTask_Control+0x2dc>)
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	4b9e      	ldr	r3, [pc, #632]	; (8001db8 <vTask_Control+0x2e0>)
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <vTask_Control+0x2e4>)
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	4b9c      	ldr	r3, [pc, #624]	; (8001dc0 <vTask_Control+0x2e8>)
 8001b50:	4a9c      	ldr	r2, [pc, #624]	; (8001dc4 <vTask_Control+0x2ec>)
 8001b52:	499d      	ldr	r1, [pc, #628]	; (8001dc8 <vTask_Control+0x2f0>)
 8001b54:	489d      	ldr	r0, [pc, #628]	; (8001dcc <vTask_Control+0x2f4>)
 8001b56:	f002 f989 	bl	8003e6c <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				break;
 8001b5a:	e18a      	b.n	8001e72 <vTask_Control+0x39a>
			}case sGoTo:{




				distance_to_go = distance_traveled(&parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8001b5c:	4b99      	ldr	r3, [pc, #612]	; (8001dc4 <vTask_Control+0x2ec>)
 8001b5e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001b62:	4b98      	ldr	r3, [pc, #608]	; (8001dc4 <vTask_Control+0x2ec>)
 8001b64:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001b68:	eeb0 1a46 	vmov.f32	s2, s12
 8001b6c:	eef0 1a66 	vmov.f32	s3, s13
 8001b70:	eeb0 0a47 	vmov.f32	s0, s14
 8001b74:	eef0 0a67 	vmov.f32	s1, s15
 8001b78:	4891      	ldr	r0, [pc, #580]	; (8001dc0 <vTask_Control+0x2e8>)
 8001b7a:	f009 ff1d 	bl	800b9b8 <distance_traveled>
 8001b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b82:	eef0 7a60 	vmov.f32	s15, s1
 8001b86:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <vTask_Control+0x2f8>)
 8001b88:	ed83 7b00 	vstr	d7, [r3]

				// Función de control del robot
				go(handler_Motor_Array,
 8001b8c:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <vTask_Control+0x2cc>)
 8001b8e:	ed93 7b00 	vldr	d7, [r3]
 8001b92:	4b85      	ldr	r3, [pc, #532]	; (8001da8 <vTask_Control+0x2d0>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001b9a:	4b84      	ldr	r3, [pc, #528]	; (8001dac <vTask_Control+0x2d4>)
 8001b9c:	9304      	str	r3, [sp, #16]
 8001b9e:	4b84      	ldr	r3, [pc, #528]	; (8001db0 <vTask_Control+0x2d8>)
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	4b84      	ldr	r3, [pc, #528]	; (8001db4 <vTask_Control+0x2dc>)
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	4b84      	ldr	r3, [pc, #528]	; (8001db8 <vTask_Control+0x2e0>)
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <vTask_Control+0x2e4>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb2:	eef0 0a67 	vmov.f32	s1, s15
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <vTask_Control+0x2e8>)
 8001bb8:	4a82      	ldr	r2, [pc, #520]	; (8001dc4 <vTask_Control+0x2ec>)
 8001bba:	4983      	ldr	r1, [pc, #524]	; (8001dc8 <vTask_Control+0x2f0>)
 8001bbc:	4883      	ldr	r0, [pc, #524]	; (8001dcc <vTask_Control+0x2f4>)
 8001bbe:	f002 f955 	bl	8003e6c <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				if (!flag_PrOp){
 8001bc2:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <vTask_Control+0x2fc>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12c      	bne.n	8001c24 <vTask_Control+0x14c>
					if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8001bca:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <vTask_Control+0x2f8>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ffd8 	bl	8000b88 <__aeabi_d2iz>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bfb8      	it	lt
 8001bde:	425b      	neglt	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcb7 	bl	8000554 <__aeabi_i2d>
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <vTask_Control+0x2e8>)
 8001be8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001bec:	2401      	movs	r4, #1
 8001bee:	f7fe ff8d 	bl	8000b0c <__aeabi_dcmplt>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <vTask_Control+0x124>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	b2e3      	uxtb	r3, r4
 8001bfe:	f083 0301 	eor.w	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8131 	beq.w	8001e6c <vTask_Control+0x394>
						// Paramos el proceso
						end = SET;
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <vTask_Control+0x300>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001c10:	4b72      	ldr	r3, [pc, #456]	; (8001ddc <vTask_Control+0x304>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f004 fa8b 	bl	8006138 <xTaskGenericNotify>
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
					}
				}


				break;
 8001c22:	e123      	b.n	8001e6c <vTask_Control+0x394>
					if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <vTask_Control+0x2f8>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffab 	bl	8000b88 <__aeabi_d2iz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bfb8      	it	lt
 8001c38:	425b      	neglt	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc8a 	bl	8000554 <__aeabi_i2d>
 8001c40:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <vTask_Control+0x2e8>)
 8001c42:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c46:	2401      	movs	r4, #1
 8001c48:	f7fe ff60 	bl	8000b0c <__aeabi_dcmplt>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <vTask_Control+0x17e>
 8001c52:	2300      	movs	r3, #0
 8001c54:	461c      	mov	r4, r3
 8001c56:	b2e3      	uxtb	r3, r4
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8104 	beq.w	8001e6c <vTask_Control+0x394>
						if (parameters_op_Robot.op_Mode == 1){ // Cambiamos el estado de nuevo a sSquare
 8001c64:	4b5e      	ldr	r3, [pc, #376]	; (8001de0 <vTask_Control+0x308>)
 8001c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d103      	bne.n	8001c76 <vTask_Control+0x19e>
							next_state = sSquare;
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <vTask_Control+0x2c8>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e007      	b.n	8001c86 <vTask_Control+0x1ae>
						}else if (parameters_op_Robot.op_Mode == 2){ // Cambiamos el estado de nuevo a sAstar para seguir procesando
 8001c76:	4b5a      	ldr	r3, [pc, #360]	; (8001de0 <vTask_Control+0x308>)
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d102      	bne.n	8001c86 <vTask_Control+0x1ae>
							next_state = sAstar;
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <vTask_Control+0x2c8>)
 8001c82:	2206      	movs	r2, #6
 8001c84:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001c86:	4b55      	ldr	r3, [pc, #340]	; (8001ddc <vTask_Control+0x304>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	f004 fa50 	bl	8006138 <xTaskGenericNotify>
				break;
 8001c98:	e0e8      	b.n	8001e6c <vTask_Control+0x394>
			}case sRoll:{


				// Si llegamos a este comando lo que se quiere es SOLO GIRAR en una cierta direccion
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001c9a:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <vTask_Control+0x2cc>)
 8001c9c:	ed93 7b00 	vldr	d7, [r3]
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <vTask_Control+0x2d0>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <vTask_Control+0x30c>)
 8001caa:	9303      	str	r3, [sp, #12]
 8001cac:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <vTask_Control+0x2d8>)
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <vTask_Control+0x2dc>)
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <vTask_Control+0x2e0>)
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cbc:	eef0 0a67 	vmov.f32	s1, s15
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <vTask_Control+0x2e8>)
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <vTask_Control+0x2ec>)
 8001cc4:	4940      	ldr	r1, [pc, #256]	; (8001dc8 <vTask_Control+0x2f0>)
 8001cc6:	4841      	ldr	r0, [pc, #260]	; (8001dcc <vTask_Control+0x2f4>)
 8001cc8:	f002 f964 	bl	8003f94 <NOP>
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);

				break;
 8001ccc:	e0d1      	b.n	8001e72 <vTask_Control+0x39a>


				// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <vTask_Control+0x2ec>)
 8001cd0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <vTask_Control+0x310>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe faed 	bl	80002b8 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe ff4f 	bl	8000b88 <__aeabi_d2iz>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bfb8      	it	lt
 8001cf0:	425b      	neglt	r3, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc2e 	bl	8000554 <__aeabi_i2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <vTask_Control+0x2cc>)
 8001d02:	ed93 7b00 	vldr	d7, [r3]
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <vTask_Control+0x2d0>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <vTask_Control+0x30c>)
 8001d10:	9303      	str	r3, [sp, #12]
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <vTask_Control+0x2d8>)
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <vTask_Control+0x2dc>)
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <vTask_Control+0x2e0>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d22:	eef0 0a67 	vmov.f32	s1, s15
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <vTask_Control+0x2e8>)
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <vTask_Control+0x2ec>)
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <vTask_Control+0x2f0>)
 8001d2c:	4827      	ldr	r0, [pc, #156]	; (8001dcc <vTask_Control+0x2f4>)
 8001d2e:	f002 f931 	bl	8003f94 <NOP>
					data,
					Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <vTask_Control+0x2e8>)
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	2101      	movs	r1, #1
 8001d42:	460c      	mov	r4, r1
 8001d44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d48:	f7fe fee0 	bl	8000b0c <__aeabi_dcmplt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <vTask_Control+0x27e>
 8001d52:	2300      	movs	r3, #0
 8001d54:	461c      	mov	r4, r3
 8001d56:	b2e3      	uxtb	r3, r4
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <vTask_Control+0x29e>
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <vTask_Control+0x314>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <vTask_Control+0x314>)
 8001d74:	701a      	strb	r2, [r3, #0]

				// Paramos el robot
				if (Done){
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <vTask_Control+0x314>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d078      	beq.n	8001e70 <vTask_Control+0x398>
					if (!flag_PrOp){
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <vTask_Control+0x2fc>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d134      	bne.n	8001df0 <vTask_Control+0x318>
						// Paramos el proceso
						end = SET;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <vTask_Control+0x300>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <vTask_Control+0x304>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	f004 f9cd 	bl	8006138 <xTaskGenericNotify>
 8001d9e:	e041      	b.n	8001e24 <vTask_Control+0x34c>
 8001da0:	200005df 	.word	0x200005df
 8001da4:	20000bd8 	.word	0x20000bd8
 8001da8:	200005dc 	.word	0x200005dc
 8001dac:	2000059c 	.word	0x2000059c
 8001db0:	200005e2 	.word	0x200005e2
 8001db4:	200005e1 	.word	0x200005e1
 8001db8:	200005e0 	.word	0x200005e0
 8001dbc:	200005f0 	.word	0x200005f0
 8001dc0:	20000610 	.word	0x20000610
 8001dc4:	20000b30 	.word	0x20000b30
 8001dc8:	20000430 	.word	0x20000430
 8001dcc:	20000440 	.word	0x20000440
 8001dd0:	20000bf8 	.word	0x20000bf8
 8001dd4:	200005e7 	.word	0x200005e7
 8001dd8:	200005e5 	.word	0x200005e5
 8001ddc:	2000023c 	.word	0x2000023c
 8001de0:	20000bb0 	.word	0x20000bb0
 8001de4:	2000055c 	.word	0x2000055c
 8001de8:	20000c18 	.word	0x20000c18
 8001dec:	200005e3 	.word	0x200005e3
					}else{
						if (parameters_op_Robot.op_Mode == 1){ // Cambiamos el estado de nuevo a sSquare
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <vTask_Control+0x39c>)
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d103      	bne.n	8001e02 <vTask_Control+0x32a>
							next_state = sSquare;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <vTask_Control+0x3a0>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e007      	b.n	8001e12 <vTask_Control+0x33a>
						}else if (parameters_op_Robot.op_Mode == 2){ // Cambiamos el estado de nuevo a sAstar para seguir procesando
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <vTask_Control+0x39c>)
 8001e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d102      	bne.n	8001e12 <vTask_Control+0x33a>
							next_state = sAstar;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <vTask_Control+0x3a0>)
 8001e0e:	2206      	movs	r2, #6
 8001e10:	701a      	strb	r2, [r3, #0]
						}
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <vTask_Control+0x3a4>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	f004 f98a 	bl	8006138 <xTaskGenericNotify>
					}

					angleToGo_Relative = 0; // Reseteamos
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
					Done = RESET; // Reseteamos la bandera
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <vTask_Control+0x3a8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001e36:	e01b      	b.n	8001e70 <vTask_Control+0x398>
			}
			default:{
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <vTask_Control+0x3ac>)
 8001e3a:	ed93 7b00 	vldr	d7, [r3]
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <vTask_Control+0x3b0>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <vTask_Control+0x3b4>)
 8001e48:	9303      	str	r3, [sp, #12]
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <vTask_Control+0x3b8>)
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <vTask_Control+0x3bc>)
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <vTask_Control+0x3c0>)
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5a:	eef0 0a67 	vmov.f32	s1, s15
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <vTask_Control+0x3c4>)
 8001e60:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <vTask_Control+0x3c8>)
 8001e62:	4910      	ldr	r1, [pc, #64]	; (8001ea4 <vTask_Control+0x3cc>)
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <vTask_Control+0x3d0>)
 8001e66:	f002 f895 	bl	8003f94 <NOP>
					&flag_angulo,
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);
				break;}
 8001e6a:	e002      	b.n	8001e72 <vTask_Control+0x39a>
				break;
 8001e6c:	bf00      	nop
 8001e6e:	e63d      	b.n	8001aec <vTask_Control+0x14>
				break;
 8001e70:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001e72:	e63b      	b.n	8001aec <vTask_Control+0x14>
 8001e74:	20000bb0 	.word	0x20000bb0
 8001e78:	200005df 	.word	0x200005df
 8001e7c:	2000023c 	.word	0x2000023c
 8001e80:	200005e3 	.word	0x200005e3
 8001e84:	20000bd8 	.word	0x20000bd8
 8001e88:	200005dc 	.word	0x200005dc
 8001e8c:	2000055c 	.word	0x2000055c
 8001e90:	200005e2 	.word	0x200005e2
 8001e94:	200005e1 	.word	0x200005e1
 8001e98:	200005e0 	.word	0x200005e0
 8001e9c:	20000610 	.word	0x20000610
 8001ea0:	20000b30 	.word	0x20000b30
 8001ea4:	20000430 	.word	0x20000430
 8001ea8:	20000440 	.word	0x20000440

08001eac <vTask_GoTo>:
////////////////////////////////////////////////////////////////////////GOTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void vTask_GoTo( void * pvParameters ){
 8001eac:	b5b0      	push	{r4, r5, r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	6078      	str	r0, [r7, #4]
	// En esta tarea querremos ir solo hacia un punto deseado por el usuario

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f004 f8b9 	bl	8006038 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <vTask_GoTo+0xec>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <vTask_GoTo+0xf0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <vTask_GoTo+0xec>)
 8001ed4:	705a      	strb	r2, [r3, #1]

		// Almacenamos la distancia en milimetros a recorrer
		parameters_Path_Robot.line_Distance = sparam;
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <vTask_GoTo+0xf4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb2a 	bl	8000534 <__aeabi_ui2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	492f      	ldr	r1, [pc, #188]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001ee6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		resetParameters();
 8001eea:	f002 fb79 	bl	80045e0 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <vTask_GoTo+0xec>)
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	482d      	ldr	r0, [pc, #180]	; (8001fa8 <vTask_GoTo+0xfc>)
 8001ef4:	f001 fc20 	bl	8003738 <On_motor_Straigh_Roll>

		// seteamos la posicion inicial como la posicion actual global del robot
		parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <vTask_GoTo+0x100>)
 8001efa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001efe:	4929      	ldr	r1, [pc, #164]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f00:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <vTask_GoTo+0x100>)
 8001f06:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001f0a:	4926      	ldr	r1, [pc, #152]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f0c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		// seteamos la posicion final usando parametros polares

		//Usando el angulo actual global con respecto al eje x se tiene que
		parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance * cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f12:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <vTask_GoTo+0x100>)
 8001f18:	ed93 7b04 	vldr	d7, [r3, #16]
 8001f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f20:	eef0 0a67 	vmov.f32	s1, s15
 8001f24:	f00e fd6c 	bl	8010a00 <cos>
 8001f28:	ec53 2b10 	vmov	r2, r3, d0
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f7fe fb7a 	bl	8000628 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f3e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001f42:	f7fe f9bb 	bl	80002bc <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f4c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance * sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f52:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <vTask_GoTo+0x100>)
 8001f58:	ed93 7b04 	vldr	d7, [r3, #16]
 8001f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f60:	eef0 0a67 	vmov.f32	s1, s15
 8001f64:	f00e fde8 	bl	8010b38 <sin>
 8001f68:	ec53 2b10 	vmov	r2, r3, d0
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe fb5a 	bl	8000628 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f7e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001f82:	f7fe f99b 	bl	80002bc <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f8c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		// definimos los parametros del camino en funcion de la situacion actual
		calculation_parameter_distance(&parameters_Path_Robot);
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f92:	f009 fc25 	bl	800b7e0 <calculation_parameter_distance>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001f96:	e78d      	b.n	8001eb4 <vTask_GoTo+0x8>
 8001f98:	200005dc 	.word	0x200005dc
 8001f9c:	2000051c 	.word	0x2000051c
 8001fa0:	20000520 	.word	0x20000520
 8001fa4:	20000610 	.word	0x20000610
 8001fa8:	20000440 	.word	0x20000440
 8001fac:	20000b30 	.word	0x20000b30

08001fb0 <vTask_Roll>:

////////////////////////////////////////////////////////////////////////ROLL STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Roll( void * pvParameters ){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f004 f837 	bl	8006038 <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
		Mode_dir.Mode = Mode = Roll;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <vTask_Roll+0x48>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <vTask_Roll+0x48>)
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <vTask_Roll+0x4c>)
 8001fd6:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <vTask_Roll+0x50>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <vTask_Roll+0x4c>)
 8001fe0:	705a      	strb	r2, [r3, #1]

		resetParameters();
 8001fe2:	f002 fafd 	bl	80045e0 <resetParameters>


		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <vTask_Roll+0x4c>)
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <vTask_Roll+0x54>)
 8001fec:	f001 fba4 	bl	8003738 <On_motor_Straigh_Roll>

		Done = RESET; // Reseteamos la bandera
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <vTask_Roll+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001ff6:	e7df      	b.n	8001fb8 <vTask_Roll+0x8>
 8001ff8:	200005de 	.word	0x200005de
 8001ffc:	200005dc 	.word	0x200005dc
 8002000:	2000051c 	.word	0x2000051c
 8002004:	20000440 	.word	0x20000440
 8002008:	200005e3 	.word	0x200005e3

0800200c <vTask_RollTo>:

////////////////////////////////////////////////////////////////////////ROLLTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_RollTo( void * pvParameters ){
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2300      	movs	r3, #0
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2000      	movs	r0, #0
 8002022:	f004 f809 	bl	8006038 <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
 		Mode_dir.Mode = Mode = Roll;
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <vTask_RollTo+0x58>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <vTask_RollTo+0x58>)
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <vTask_RollTo+0x5c>)
 8002032:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <vTask_RollTo+0x60>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <vTask_RollTo+0x5c>)
 800203c:	705a      	strb	r2, [r3, #1]

		// Almacenamos el angulo al que se quiere ir
		parameters_Path_Robot.angle = sparam;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <vTask_RollTo+0x64>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <vTask_RollTo+0x68>)
 8002046:	649a      	str	r2, [r3, #72]	; 0x48

		angle_start = parameters_Pos_Robot.grad_global; // seteamos el angulo actual global
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <vTask_RollTo+0x6c>)
 800204a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800204e:	490b      	ldr	r1, [pc, #44]	; (800207c <vTask_RollTo+0x70>)
 8002050:	e9c1 2300 	strd	r2, r3, [r1]

		resetParameters();
 8002054:	f002 fac4 	bl	80045e0 <resetParameters>

		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <vTask_RollTo+0x5c>)
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <vTask_RollTo+0x74>)
 800205e:	f001 fb6b 	bl	8003738 <On_motor_Straigh_Roll>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002062:	e7d7      	b.n	8002014 <vTask_RollTo+0x8>
 8002064:	200005de 	.word	0x200005de
 8002068:	200005dc 	.word	0x200005dc
 800206c:	2000051c 	.word	0x2000051c
 8002070:	20000520 	.word	0x20000520
 8002074:	20000610 	.word	0x20000610
 8002078:	20000b30 	.word	0x20000b30
 800207c:	20000c18 	.word	0x20000c18
 8002080:	20000440 	.word	0x20000440

08002084 <vTask_Square>:


////////////////////////////////////////////////////////////////////////SQUARE STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Square( void * pvParameters ){
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af02      	add	r7, sp, #8
 800208a:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f003 ffcd 	bl	8006038 <xTaskGenericNotifyWait>

		square_dir  = fparam; // Direccion del cuadrado
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <vTask_Square+0x58>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <vTask_Square+0x5c>)
 80020a6:	701a      	strb	r2, [r3, #0]
		square_side = sparam; // lado del cuadrado en cm
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <vTask_Square+0x60>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa41 	bl	8000534 <__aeabi_ui2d>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	490c      	ldr	r1, [pc, #48]	; (80020e8 <vTask_Square+0x64>)
 80020b8:	e9c1 2300 	strd	r2, r3, [r1]
		parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE SQUARE
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <vTask_Square+0x68>)
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2020 	strb.w	r2, [r3, #32]
		resetParameters();
 80020c4:	f002 fa8c 	bl	80045e0 <resetParameters>

		xTaskNotify(xHandleTask_CrOp,0,eNoAction);
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <vTask_Square+0x6c>)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2300      	movs	r3, #0
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	f004 f82f 	bl	8006138 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80020da:	e7d7      	b.n	800208c <vTask_Square+0x8>
 80020dc:	2000051c 	.word	0x2000051c
 80020e0:	20000c00 	.word	0x20000c00
 80020e4:	20000520 	.word	0x20000520
 80020e8:	20000c08 	.word	0x20000c08
 80020ec:	20000bb0 	.word	0x20000bb0
 80020f0:	20000264 	.word	0x20000264

080020f4 <vTask_Astar>:


////////////////////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Astar( void * pvParameters ){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2300      	movs	r3, #0
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	2000      	movs	r0, #0
 800210a:	f003 ff95 	bl	8006038 <xTaskGenericNotifyWait>

		//////////////////////////////////////////////  ASTAR - Algoritm setup//////////////////////////////////////////////////////////

		// Solo necesitamos definir las distancias paralela y diagonal de la malla
		handlerAstarParameters.parallelDistance  = fparam;
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <vTask_Astar+0x80>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <vTask_Astar+0x84>)
 800211c:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = sparam;
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <vTask_Astar+0x88>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <vTask_Astar+0x84>)
 800212e:	edc3 7a01 	vstr	s15, [r3, #4]

		flag_Astar = SET;
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <vTask_Astar+0x8c>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]

		resetParameters();
 8002138:	f002 fa52 	bl	80045e0 <resetParameters>

		writeMsg(&handlerUSART, msg_InsertGrid);
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <vTask_Astar+0x90>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	4811      	ldr	r0, [pc, #68]	; (8002188 <vTask_Astar+0x94>)
 8002144:	f00b f9f6 	bl	800d534 <writeMsg>

		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 8002148:	4910      	ldr	r1, [pc, #64]	; (800218c <vTask_Astar+0x98>)
 800214a:	480f      	ldr	r0, [pc, #60]	; (8002188 <vTask_Astar+0x94>)
 800214c:	f00b f9f2 	bl	800d534 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8002150:	490f      	ldr	r1, [pc, #60]	; (8002190 <vTask_Astar+0x9c>)
 8002152:	480d      	ldr	r0, [pc, #52]	; (8002188 <vTask_Astar+0x94>)
 8002154:	f00b f9ee 	bl	800d534 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <vTask_Astar+0xa0>)
 800215a:	480b      	ldr	r0, [pc, #44]	; (8002188 <vTask_Astar+0x94>)
 800215c:	f00b f9ea 	bl	800d534 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 8002160:	490d      	ldr	r1, [pc, #52]	; (8002198 <vTask_Astar+0xa4>)
 8002162:	4809      	ldr	r0, [pc, #36]	; (8002188 <vTask_Astar+0x94>)
 8002164:	f00b f9e6 	bl	800d534 <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <vTask_Astar+0xa8>)
 800216a:	490d      	ldr	r1, [pc, #52]	; (80021a0 <vTask_Astar+0xac>)
 800216c:	4806      	ldr	r0, [pc, #24]	; (8002188 <vTask_Astar+0x94>)
 800216e:	f006 fded 	bl	8008d4c <initSerialComunication>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002172:	e7c3      	b.n	80020fc <vTask_Astar+0x8>
 8002174:	2000051c 	.word	0x2000051c
 8002178:	200004a0 	.word	0x200004a0
 800217c:	20000520 	.word	0x20000520
 8002180:	200005e6 	.word	0x200005e6
 8002184:	20000028 	.word	0x20000028
 8002188:	20000390 	.word	0x20000390
 800218c:	080137cc 	.word	0x080137cc
 8002190:	08013804 	.word	0x08013804
 8002194:	0801383c 	.word	0x0801383c
 8002198:	08013874 	.word	0x08013874
 800219c:	200002a8 	.word	0x200002a8
 80021a0:	2000029c 	.word	0x2000029c

080021a4 <vTask_Grid>:

	}

}

void vTask_Grid( void * pvParameters ){
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2300      	movs	r3, #0
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2000      	movs	r0, #0
 80021ba:	f003 ff3d 	bl	8006038 <xTaskGenericNotifyWait>

		 status = xQueueReceive(xQueue_InputData, &item ,0);
 80021be:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <vTask_Grid+0x158>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f107 010b 	add.w	r1, r7, #11
 80021c6:	2200      	movs	r2, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 fe55 	bl	8004e78 <xQueueReceive>
 80021ce:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d152      	bne.n	800227c <vTask_Grid+0xd8>

			if (item != '\0'){
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d04f      	beq.n	800227c <vTask_Grid+0xd8>

				if (item == 'z'){
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	2b7a      	cmp	r3, #122	; 0x7a
 80021e0:	d117      	bne.n	8002212 <vTask_Grid+0x6e>
					memset(stringMatrix, 0, sizeof(stringMatrix));
 80021e2:	2231      	movs	r2, #49	; 0x31
 80021e4:	2100      	movs	r1, #0
 80021e6:	4846      	ldr	r0, [pc, #280]	; (8002300 <vTask_Grid+0x15c>)
 80021e8:	f00b fd32 	bl	800dc50 <memset>
					stringRow    = 0;
 80021ec:	4b45      	ldr	r3, [pc, #276]	; (8002304 <vTask_Grid+0x160>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <vTask_Grid+0x164>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n-------String Vaciado-----\n\r");
 80021f8:	4944      	ldr	r1, [pc, #272]	; (800230c <vTask_Grid+0x168>)
 80021fa:	4845      	ldr	r0, [pc, #276]	; (8002310 <vTask_Grid+0x16c>)
 80021fc:	f00b f99a 	bl	800d534 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8002200:	4b44      	ldr	r3, [pc, #272]	; (8002314 <vTask_Grid+0x170>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	4842      	ldr	r0, [pc, #264]	; (8002310 <vTask_Grid+0x16c>)
 8002208:	f00b f994 	bl	800d534 <writeMsg>
					item = '\0';
 800220c:	2300      	movs	r3, #0
 800220e:	72fb      	strb	r3, [r7, #11]
 8002210:	e034      	b.n	800227c <vTask_Grid+0xd8>
				}else if (item != '@'){
 8002212:	7afb      	ldrb	r3, [r7, #11]
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d026      	beq.n	8002266 <vTask_Grid+0xc2>
						if (item != '\n'){
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	2b0a      	cmp	r3, #10
 800221c:	d017      	beq.n	800224e <vTask_Grid+0xaa>
							stringMatrix[stringRow][stringColumn] = item;
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <vTask_Grid+0x160>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <vTask_Grid+0x164>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461c      	mov	r4, r3
 800222a:	7af8      	ldrb	r0, [r7, #11]
 800222c:	4a34      	ldr	r2, [pc, #208]	; (8002300 <vTask_Grid+0x15c>)
 800222e:	460b      	mov	r3, r1
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a5b      	subs	r3, r3, r1
 8002234:	4413      	add	r3, r2
 8002236:	4423      	add	r3, r4
 8002238:	4602      	mov	r2, r0
 800223a:	701a      	strb	r2, [r3, #0]
							stringColumn++;
 800223c:	4b32      	ldr	r3, [pc, #200]	; (8002308 <vTask_Grid+0x164>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b30      	ldr	r3, [pc, #192]	; (8002308 <vTask_Grid+0x164>)
 8002246:	701a      	strb	r2, [r3, #0]
							item = '\0';
 8002248:	2300      	movs	r3, #0
 800224a:	72fb      	strb	r3, [r7, #11]
 800224c:	e016      	b.n	800227c <vTask_Grid+0xd8>
						}else{
							stringRow++;
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <vTask_Grid+0x160>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <vTask_Grid+0x160>)
 8002258:	701a      	strb	r2, [r3, #0]
							stringColumn = 0;
 800225a:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <vTask_Grid+0x164>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
							item = '\0';
 8002260:	2300      	movs	r3, #0
 8002262:	72fb      	strb	r3, [r7, #11]
 8002264:	e00a      	b.n	800227c <vTask_Grid+0xd8>
						}
				}else{
					doneTransaction = SET;
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <vTask_Grid+0x174>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]

					flag_Astar = RESET;
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <vTask_Grid+0x178>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <vTask_Grid+0x164>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
					item = '\0';
 8002278:	2300      	movs	r3, #0
 800227a:	72fb      	strb	r3, [r7, #11]
				}
			}
		}

		// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
		if (doneTransaction){
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <vTask_Grid+0x174>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d093      	beq.n	80021ac <vTask_Grid+0x8>

			starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <vTask_Grid+0x17c>)
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	4b26      	ldr	r3, [pc, #152]	; (8002324 <vTask_Grid+0x180>)
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <vTask_Grid+0x184>)
 800228e:	4a27      	ldr	r2, [pc, #156]	; (800232c <vTask_Grid+0x188>)
 8002290:	4927      	ldr	r1, [pc, #156]	; (8002330 <vTask_Grid+0x18c>)
 8002292:	481b      	ldr	r0, [pc, #108]	; (8002300 <vTask_Grid+0x15c>)
 8002294:	f005 f958 	bl	8007548 <findShorterWay>
 8002298:	4603      	mov	r3, r0
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <vTask_Grid+0x190>)
 800229e:	701a      	strb	r2, [r3, #0]

			if (starWorking){
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <vTask_Grid+0x190>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d022      	beq.n	80022ee <vTask_Grid+0x14a>
				// si se llego hasta aca es porque Astar si funciona correctamente

				memset(stringMatrix, 0, sizeof(stringMatrix));
 80022a8:	2231      	movs	r2, #49	; 0x31
 80022aa:	2100      	movs	r1, #0
 80022ac:	4814      	ldr	r0, [pc, #80]	; (8002300 <vTask_Grid+0x15c>)
 80022ae:	f00b fccf 	bl	800dc50 <memset>
				stringRow    = 0;
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <vTask_Grid+0x160>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <vTask_Grid+0x164>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 80022be:	491e      	ldr	r1, [pc, #120]	; (8002338 <vTask_Grid+0x194>)
 80022c0:	4813      	ldr	r0, [pc, #76]	; (8002310 <vTask_Grid+0x16c>)
 80022c2:	f00b f937 	bl	800d534 <writeMsg>

				flag_Astar = RESET;
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <vTask_Grid+0x178>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
				doneTransaction = RESET;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <vTask_Grid+0x174>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
				parameters_op_Robot.op_Mode = 2; // SETEAMOS EN 2 PARA OPERACIONES DE ASTAR
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <vTask_Grid+0x198>)
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2020 	strb.w	r2, [r3, #32]
				xTaskNotify(xHandleTask_CrOp,0,eNoAction);
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <vTask_Grid+0x19c>)
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2300      	movs	r3, #0
 80022e4:	2200      	movs	r2, #0
 80022e6:	2100      	movs	r1, #0
 80022e8:	f003 ff26 	bl	8006138 <xTaskGenericNotify>
 80022ec:	e75e      	b.n	80021ac <vTask_Grid+0x8>

			}else{
				writeMsg(&handlerUSART, msg_NotWorking);
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <vTask_Grid+0x1a0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <vTask_Grid+0x16c>)
 80022f6:	f00b f91d 	bl	800d534 <writeMsg>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80022fa:	e757      	b.n	80021ac <vTask_Grid+0x8>
 80022fc:	20000270 	.word	0x20000270
 8002300:	20000528 	.word	0x20000528
 8002304:	2000055a 	.word	0x2000055a
 8002308:	20000559 	.word	0x20000559
 800230c:	080138ac 	.word	0x080138ac
 8002310:	20000390 	.word	0x20000390
 8002314:	20000028 	.word	0x20000028
 8002318:	200004f4 	.word	0x200004f4
 800231c:	200005e6 	.word	0x200005e6
 8002320:	20013f80 	.word	0x20013f80
 8002324:	200004ac 	.word	0x200004ac
 8002328:	200004a0 	.word	0x200004a0
 800232c:	20013ab4 	.word	0x20013ab4
 8002330:	20013f4c 	.word	0x20013f4c
 8002334:	2000055b 	.word	0x2000055b
 8002338:	080138cc 	.word	0x080138cc
 800233c:	20000bb0 	.word	0x20000bb0
 8002340:	20000264 	.word	0x20000264
 8002344:	20000024 	.word	0x20000024

08002348 <vTask_CrOp>:
	}// End of the while

}


void vTask_CrOp( void * pvParameters ){
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af02      	add	r7, sp, #8
 800234e:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	2000      	movs	r0, #0
 800235e:	f003 fe6b 	bl	8006038 <xTaskGenericNotifyWait>

		// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
		switch (parameters_op_Robot.op_Mode) {
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <vTask_CrOp+0x94>)
 8002364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d002      	beq.n	8002372 <vTask_CrOp+0x2a>
 800236c:	2b02      	cmp	r3, #2
 800236e:	d01d      	beq.n	80023ac <vTask_CrOp+0x64>
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros

				break;

			}
			default:{break;}
 8002370:	e033      	b.n	80023da <vTask_CrOp+0x92>
				create_square_operations(square_side,
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <vTask_CrOp+0x98>)
 8002374:	ed93 7b00 	vldr	d7, [r3]
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <vTask_CrOp+0x9c>)
 800237a:	7818      	ldrb	r0, [r3, #0]
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <vTask_CrOp+0xa0>)
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <vTask_CrOp+0xa4>)
 8002382:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <vTask_CrOp+0xa8>)
 8002384:	491b      	ldr	r1, [pc, #108]	; (80023f4 <vTask_CrOp+0xac>)
 8002386:	eeb0 0a47 	vmov.f32	s0, s14
 800238a:	eef0 0a67 	vmov.f32	s1, s15
 800238e:	f001 ffd7 	bl	8004340 <create_square_operations>
				counter_operation = 0;
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <vTask_CrOp+0xb0>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <vTask_CrOp+0xb4>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2300      	movs	r3, #0
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	f003 fec7 	bl	8006138 <xTaskGenericNotify>
				break;
 80023aa:	e016      	b.n	80023da <vTask_CrOp+0x92>
				create_Astar_operations(&handlerAstarParameters,
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <vTask_CrOp+0xa0>)
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <vTask_CrOp+0xa4>)
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <vTask_CrOp+0xa8>)
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <vTask_CrOp+0xac>)
 80023b8:	4911      	ldr	r1, [pc, #68]	; (8002400 <vTask_CrOp+0xb8>)
 80023ba:	4812      	ldr	r0, [pc, #72]	; (8002404 <vTask_CrOp+0xbc>)
 80023bc:	f006 fd30 	bl	8008e20 <create_Astar_operations>
				counter_operation = 0;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <vTask_CrOp+0xb0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <vTask_CrOp+0xb4>)
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	f003 feb0 	bl	8006138 <xTaskGenericNotify>
				break;
 80023d8:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80023da:	e7b9      	b.n	8002350 <vTask_CrOp+0x8>
 80023dc:	20000bb0 	.word	0x20000bb0
 80023e0:	20000c08 	.word	0x20000c08
 80023e4:	20000c00 	.word	0x20000c00
 80023e8:	20000b30 	.word	0x20000b30
 80023ec:	20000610 	.word	0x20000610
 80023f0:	20000b80 	.word	0x20000b80
 80023f4:	20000680 	.word	0x20000680
 80023f8:	20000c10 	.word	0x20000c10
 80023fc:	20000254 	.word	0x20000254
 8002400:	20013f80 	.word	0x20013f80
 8002404:	200004a0 	.word	0x200004a0

08002408 <vTask_PrOp>:

	}

}

void vTask_PrOp( void * pvParameters ){
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	b096      	sub	sp, #88	; 0x58
 800240c:	af02      	add	r7, sp, #8
 800240e:	6078      	str	r0, [r7, #4]

	command_t cmd = {0};
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2244      	movs	r2, #68	; 0x44
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f00b fc19 	bl	800dc50 <memset>

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esperar hasta que la notificacion salte
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	2000      	movs	r0, #0
 800242c:	f003 fe04 	bl	8006038 <xTaskGenericNotifyWait>

		// Esperamos 3 segundos
		delay_ms(3000);
 8002430:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002434:	f006 ffba 	bl	80093ac <delay_ms>

		// Este caso representa la ejecución de las operaciones almacenadas en la lista de operaciones

		if (parameters_Path_Robot.Operation_List[counter_operation].operacion == LINE){
 8002438:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <vTask_PrOp+0x270>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	4a8f      	ldr	r2, [pc, #572]	; (800267c <vTask_PrOp+0x274>)
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	3370      	adds	r3, #112	; 0x70
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 8087 	bne.w	8002562 <vTask_PrOp+0x15a>

			// Creamos el comando para que haga la tarea respectiva a ir en linea recta

			parameters_Path_Robot.line_Distance =
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <vTask_PrOp+0x270>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	4a88      	ldr	r2, [pc, #544]	; (800267c <vTask_PrOp+0x274>)
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	3378      	adds	r3, #120	; 0x78
 8002468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	4b83      	ldr	r3, [pc, #524]	; (8002680 <vTask_PrOp+0x278>)
 8002472:	f7fe f8d9 	bl	8000628 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	4b81      	ldr	r3, [pc, #516]	; (8002684 <vTask_PrOp+0x27c>)
 8002480:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002484:	f7fd ff18 	bl	80002b8 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	ec43 2b17 	vmov	d7, r2, r3
 8002490:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8002670 <vTask_PrOp+0x268>
 8002494:	eeb0 0a47 	vmov.f32	s0, s14
 8002498:	eef0 0a67 	vmov.f32	s1, s15
 800249c:	f00e fbda 	bl	8010c54 <pow>
 80024a0:	ec55 4b10 	vmov	r4, r5, d0
						 pow((parameters_Path_Robot.Operation_List[counter_operation].y_destination*10 - parameters_Pos_Robot.yg_position),2));
 80024a4:	4b74      	ldr	r3, [pc, #464]	; (8002678 <vTask_PrOp+0x270>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	4a74      	ldr	r2, [pc, #464]	; (800267c <vTask_PrOp+0x274>)
 80024ac:	460b      	mov	r3, r1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	3380      	adds	r3, #128	; 0x80
 80024b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <vTask_PrOp+0x278>)
 80024c2:	f7fe f8b1 	bl	8000628 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <vTask_PrOp+0x27c>)
 80024d0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80024d4:	f7fd fef0 	bl	80002b8 <__aeabi_dsub>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	ec43 2b17 	vmov	d7, r2, r3
 80024e0:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8002670 <vTask_PrOp+0x268>
 80024e4:	eeb0 0a47 	vmov.f32	s0, s14
 80024e8:	eef0 0a67 	vmov.f32	s1, s15
 80024ec:	f00e fbb2 	bl	8010c54 <pow>
 80024f0:	ec53 2b10 	vmov	r2, r3, d0
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7fd fee0 	bl	80002bc <__adddf3>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	ec43 2b17 	vmov	d7, r2, r3
 8002504:	eeb0 0a47 	vmov.f32	s0, s14
 8002508:	eef0 0a67 	vmov.f32	s1, s15
 800250c:	f00e fc12 	bl	8010d34 <sqrt>
 8002510:	eeb0 7a40 	vmov.f32	s14, s0
 8002514:	eef0 7a60 	vmov.f32	s15, s1
			parameters_Path_Robot.line_Distance =
 8002518:	4b58      	ldr	r3, [pc, #352]	; (800267c <vTask_PrOp+0x274>)
 800251a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40


			sprintf(cmd.payload, "sGoTo %u %u $" , 1 , abs(parameters_Path_Robot.line_Distance)); // Mandamos una direccion hacia adelante
 800251e:	4b57      	ldr	r3, [pc, #348]	; (800267c <vTask_PrOp+0x274>)
 8002520:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fb2e 	bl	8000b88 <__aeabi_d2iz>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	bfb8      	it	lt
 8002532:	425b      	neglt	r3, r3
 8002534:	f107 000c 	add.w	r0, r7, #12
 8002538:	2201      	movs	r2, #1
 800253a:	4953      	ldr	r1, [pc, #332]	; (8002688 <vTask_PrOp+0x280>)
 800253c:	f00c f8ea 	bl	800e714 <siprintf>
			// y ademas la distancia a recorrer

			counter_operation++;
 8002540:	4b4d      	ldr	r3, [pc, #308]	; (8002678 <vTask_PrOp+0x270>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	3301      	adds	r3, #1
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <vTask_PrOp+0x270>)
 800254a:	701a      	strb	r2, [r3, #0]

			// Aplicamos la operacion llamando a la tarea respectiva que realiza el asunto, notificamos a ir a


			xTaskNotify(xHandleTask_Commands,(uint32_t) &cmd, eSetValueWithOverwrite); //reiniciamos todos los parametros
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <vTask_PrOp+0x284>)
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	f107 020c 	add.w	r2, r7, #12
 8002554:	2300      	movs	r3, #0
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2303      	movs	r3, #3
 800255a:	2100      	movs	r1, #0
 800255c:	f003 fdec 	bl	8006138 <xTaskGenericNotify>
 8002560:	e75d      	b.n	800241e <vTask_PrOp+0x16>

			// fin de la operacion de linea recta

		}else if (parameters_Path_Robot.Operation_List[counter_operation].operacion == TURN){
 8002562:	4b45      	ldr	r3, [pc, #276]	; (8002678 <vTask_PrOp+0x270>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4619      	mov	r1, r3
 8002568:	4a44      	ldr	r2, [pc, #272]	; (800267c <vTask_PrOp+0x274>)
 800256a:	460b      	mov	r3, r1
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	3370      	adds	r3, #112	; 0x70
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d15c      	bne.n	8002636 <vTask_PrOp+0x22e>
			// Creamos el comando para que haga la tarea para que gire un cierto ángulo

			// metemos el angulo a rotar, ya sea positivo o negativo

			if (parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative < 0 ){
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <vTask_PrOp+0x270>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4a3e      	ldr	r2, [pc, #248]	; (800267c <vTask_PrOp+0x274>)
 8002584:	460b      	mov	r3, r1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	3388      	adds	r3, #136	; 0x88
 8002590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f7fe fab6 	bl	8000b0c <__aeabi_dcmplt>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01b      	beq.n	80025de <vTask_PrOp+0x1d6>
				sprintf(cmd.payload,
						"sRollto %u %u $" ,
						1 , // CCW
						abs(parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative) - 8);
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <vTask_PrOp+0x270>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4a33      	ldr	r2, [pc, #204]	; (800267c <vTask_PrOp+0x274>)
 80025ae:	460b      	mov	r3, r1
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	3388      	adds	r3, #136	; 0x88
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fae1 	bl	8000b88 <__aeabi_d2iz>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bfb8      	it	lt
 80025cc:	425b      	neglt	r3, r3
				sprintf(cmd.payload,
 80025ce:	3b08      	subs	r3, #8
 80025d0:	f107 000c 	add.w	r0, r7, #12
 80025d4:	2201      	movs	r2, #1
 80025d6:	492e      	ldr	r1, [pc, #184]	; (8002690 <vTask_PrOp+0x288>)
 80025d8:	f00c f89c 	bl	800e714 <siprintf>
 80025dc:	e01a      	b.n	8002614 <vTask_PrOp+0x20c>
			}else{
				sprintf(cmd.payload,
						"sRollto %u %u $" ,
						0 , // CW
						abs(parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative) - 8);
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <vTask_PrOp+0x270>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4a25      	ldr	r2, [pc, #148]	; (800267c <vTask_PrOp+0x274>)
 80025e6:	460b      	mov	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	3388      	adds	r3, #136	; 0x88
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe fac5 	bl	8000b88 <__aeabi_d2iz>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	bfb8      	it	lt
 8002604:	425b      	neglt	r3, r3
				sprintf(cmd.payload,
 8002606:	3b08      	subs	r3, #8
 8002608:	f107 000c 	add.w	r0, r7, #12
 800260c:	2200      	movs	r2, #0
 800260e:	4920      	ldr	r1, [pc, #128]	; (8002690 <vTask_PrOp+0x288>)
 8002610:	f00c f880 	bl	800e714 <siprintf>
			}


			xTaskNotify(xHandleTask_Commands,(uint32_t) &cmd, eSetValueWithOverwrite); //reiniciamos todos los parametros
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <vTask_PrOp+0x284>)
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	2300      	movs	r3, #0
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2303      	movs	r3, #3
 8002622:	2100      	movs	r1, #0
 8002624:	f003 fd88 	bl	8006138 <xTaskGenericNotify>

			counter_operation++;
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <vTask_PrOp+0x270>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <vTask_PrOp+0x270>)
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e6f3      	b.n	800241e <vTask_PrOp+0x16>

		}else{// Al llegar aca es porque se acabaron las operaciones, la ultima operacion sera una operacion nula, lo que indica
			// cerrar el comando de Astar
			memset(parameters_Path_Robot.Operation_List,0, sizeof(parameters_Path_Robot.Operation_List));
 8002636:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800263a:	2100      	movs	r1, #0
 800263c:	4815      	ldr	r0, [pc, #84]	; (8002694 <vTask_PrOp+0x28c>)
 800263e:	f00b fb07 	bl	800dc50 <memset>
			counter_operation = 0;
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <vTask_PrOp+0x270>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
			parameters_op_Robot.op_Mode = 0;
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <vTask_PrOp+0x290>)
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
			flag_PrOp = RESET; // Paramos el proceso de procesamiento de operaciones y volvemos a el estado normal del programa
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <vTask_PrOp+0x294>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
			end = SET; // Levantamos la bandera de finalizacion y nos vamos a el menu
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <vTask_PrOp+0x298>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]

			xTaskNotify(xHandleTask_Menu,0, eNoAction); //reiniciamos todos los parametros
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <vTask_PrOp+0x29c>)
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	2300      	movs	r3, #0
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2300      	movs	r3, #0
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	f003 fd65 	bl	8006138 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esperar hasta que la notificacion salte
 800266e:	e6d6      	b.n	800241e <vTask_PrOp+0x16>
 8002670:	00000000 	.word	0x00000000
 8002674:	40000000 	.word	0x40000000
 8002678:	20000c10 	.word	0x20000c10
 800267c:	20000610 	.word	0x20000610
 8002680:	40240000 	.word	0x40240000
 8002684:	20000b30 	.word	0x20000b30
 8002688:	080138ec 	.word	0x080138ec
 800268c:	20000238 	.word	0x20000238
 8002690:	080138fc 	.word	0x080138fc
 8002694:	20000680 	.word	0x20000680
 8002698:	20000bb0 	.word	0x20000bb0
 800269c:	200005e7 	.word	0x200005e7
 80026a0:	200005e5 	.word	0x200005e5
 80026a4:	20000230 	.word	0x20000230

080026a8 <vTask_Reinit>:

///////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Reinit( void * pvParameters ){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2000      	movs	r0, #0
 80026be:	f003 fcbb 	bl	8006038 <xTaskGenericNotifyWait>

		 // en este comando reiniciamos las variables del sistema para volver a empezar desde un nuevo punto de referencia
		int_Config_Motor(handler_Motor_Array,
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <vTask_Reinit+0x58>)
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <vTask_Reinit+0x5c>)
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <vTask_Reinit+0x60>)
 80026ca:	4910      	ldr	r1, [pc, #64]	; (800270c <vTask_Reinit+0x64>)
 80026cc:	4810      	ldr	r0, [pc, #64]	; (8002710 <vTask_Reinit+0x68>)
 80026ce:	f001 f943 	bl	8003958 <int_Config_Motor>
						&parameters_Path_Robot,
						&parameter_PID_distace,
						&Mode_dir);


		if(parameters_op_Robot.op_Mode != 0){ // Modo Square o Astar funcionando
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <vTask_Reinit+0x6c>)
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <vTask_Reinit+0x4e>
 			// En esta opcion notificamos a la tarea de procesar el comando para ir procesando operacion por operación
			xTaskNotify(xHandleTask_PrOp,0, eNoAction);
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <vTask_Reinit+0x70>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2300      	movs	r3, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	f003 fd25 	bl	8006138 <xTaskGenericNotify>
			flag_PrOp = SET;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <vTask_Reinit+0x74>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e7dc      	b.n	80026b0 <vTask_Reinit+0x8>
		}else{
			next_state = sMainMenu; // Cambiamos el estado de nuevo al estado principal
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <vTask_Reinit+0x78>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80026fc:	e7d8      	b.n	80026b0 <vTask_Reinit+0x8>
 80026fe:	bf00      	nop
 8002700:	200005dc 	.word	0x200005dc
 8002704:	200005f0 	.word	0x200005f0
 8002708:	20000610 	.word	0x20000610
 800270c:	20000b30 	.word	0x20000b30
 8002710:	20000440 	.word	0x20000440
 8002714:	20000bb0 	.word	0x20000bb0
 8002718:	20000268 	.word	0x20000268
 800271c:	200005e7 	.word	0x200005e7
 8002720:	200005df 	.word	0x200005df

08002724 <vTask_Print>:

}



void vTask_Print( void * pvParameters ){
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <vTask_Print+0x28>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f107 010c 	add.w	r1, r7, #12
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fb9d 	bl	8004e78 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4619      	mov	r1, r3
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <vTask_Print+0x2c>)
 8002744:	f00a fef6 	bl	800d534 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8002748:	e7f0      	b.n	800272c <vTask_Print+0x8>
 800274a:	bf00      	nop
 800274c:	2000026c 	.word	0x2000026c
 8002750:	20000390 	.word	0x20000390

08002754 <process_command>:
   }
}



void process_command (command_t *cmd){
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f83d 	bl	80027dc <extract_command>


	if (next_state == sMainMenu){
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <process_command+0x70>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <process_command+0x74>)
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2303      	movs	r3, #3
 8002776:	2100      	movs	r1, #0
 8002778:	f003 fcde 	bl	8006138 <xTaskGenericNotify>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
	}


}
 800277c:	e01d      	b.n	80027ba <process_command+0x66>
	}else if (!wrong_command && !flag_PrOp){
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <process_command+0x78>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d110      	bne.n	80027a8 <process_command+0x54>
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <process_command+0x7c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <process_command+0x54>
		end = SET;
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <process_command+0x80>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <process_command+0x84>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	f003 fcc9 	bl	8006138 <xTaskGenericNotify>
}
 80027a6:	e008      	b.n	80027ba <process_command+0x66>
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <process_command+0x74>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2303      	movs	r3, #3
 80027b4:	2100      	movs	r1, #0
 80027b6:	f003 fcbf 	bl	8006138 <xTaskGenericNotify>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200005df 	.word	0x200005df
 80027c8:	20000230 	.word	0x20000230
 80027cc:	200005e4 	.word	0x200005e4
 80027d0:	200005e7 	.word	0x200005e7
 80027d4:	200005e5 	.word	0x200005e5
 80027d8:	2000023c 	.word	0x2000023c

080027dc <extract_command>:


int extract_command (command_t *cmd){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af04      	add	r7, sp, #16
 80027e2:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

//	status = uxQueueMessagesWaiting(xQueue_InputData);

	if (wrong_command){
 80027e8:	4b6e      	ldr	r3, [pc, #440]	; (80029a4 <extract_command+0x1c8>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d010      	beq.n	8002812 <extract_command+0x36>
				// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
				cmd->functionType = -1;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f04f 32ff 	mov.w	r2, #4294967295
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f00b fa26 	bl	800dc50 <memset>
				xQueueReset(xQueue_InputData);
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <extract_command+0x1cc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f002 f8a2 	bl	8004954 <xQueueGenericReset>
 8002810:	e0c2      	b.n	8002998 <extract_command+0x1bc>
	}else if (!wrong_command && !flag_PrOp ){
 8002812:	4b64      	ldr	r3, [pc, #400]	; (80029a4 <extract_command+0x1c8>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 8090 	bne.w	800293c <extract_command+0x160>
 800281c:	4b63      	ldr	r3, [pc, #396]	; (80029ac <extract_command+0x1d0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 808b 	bne.w	800293c <extract_command+0x160>

		do{
			// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
			status = xQueueReceive(xQueue_InputData, &item,0);
 8002826:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <extract_command+0x1cc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f107 010f 	add.w	r1, r7, #15
 800282e:	2200      	movs	r2, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fb21 	bl	8004e78 <xQueueReceive>
 8002836:	6138      	str	r0, [r7, #16]
			if(status == pdTRUE){
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d106      	bne.n	800284c <extract_command+0x70>

				//vamos llenando el arreglo del comando
				cmd->payload[counter_j++] = item;
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	75fa      	strb	r2, [r7, #23]
 8002844:	461a      	mov	r2, r3
 8002846:	7bf9      	ldrb	r1, [r7, #15]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	5499      	strb	r1, [r3, r2]

			}
		}while(item != '$');
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b24      	cmp	r3, #36	; 0x24
 8002850:	d1e9      	bne.n	8002826 <extract_command+0x4a>

		cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	2100      	movs	r1, #0
 8002858:	54d1      	strb	r1, [r2, r3]

		// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
//		sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 800285a:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <extract_command+0x1d4>)
 800285c:	9303      	str	r3, [sp, #12]
 800285e:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <extract_command+0x1d8>)
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	4b55      	ldr	r3, [pc, #340]	; (80029b8 <extract_command+0x1dc>)
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	4b55      	ldr	r3, [pc, #340]	; (80029bc <extract_command+0x1e0>)
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <extract_command+0x1e4>)
 800286c:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <extract_command+0x1e8>)
 800286e:	4956      	ldr	r1, [pc, #344]	; (80029c8 <extract_command+0x1ec>)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f001 fbb9 	bl	8003fe8 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2240      	movs	r2, #64	; 0x40
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00b f9e7 	bl	800dc50 <memset>
		xQueueReset(xQueue_InputData);
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <extract_command+0x1cc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f002 f863 	bl	8004954 <xQueueGenericReset>

		if (strcmp(data, "sGo") == 0){
 800288e:	494f      	ldr	r1, [pc, #316]	; (80029cc <extract_command+0x1f0>)
 8002890:	484d      	ldr	r0, [pc, #308]	; (80029c8 <extract_command+0x1ec>)
 8002892:	f7fd fca5 	bl	80001e0 <strcmp>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d103      	bne.n	80028a4 <extract_command+0xc8>
			cmd->functionType = 1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
 80028a2:	e045      	b.n	8002930 <extract_command+0x154>
		}else if (strcmp(data, "sGoTo") == 0){
 80028a4:	494a      	ldr	r1, [pc, #296]	; (80029d0 <extract_command+0x1f4>)
 80028a6:	4848      	ldr	r0, [pc, #288]	; (80029c8 <extract_command+0x1ec>)
 80028a8:	f7fd fc9a 	bl	80001e0 <strcmp>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <extract_command+0xde>
			cmd->functionType = 2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
 80028b8:	e03a      	b.n	8002930 <extract_command+0x154>
		}else if (strcmp(data, "sRoll") == 0){
 80028ba:	4946      	ldr	r1, [pc, #280]	; (80029d4 <extract_command+0x1f8>)
 80028bc:	4842      	ldr	r0, [pc, #264]	; (80029c8 <extract_command+0x1ec>)
 80028be:	f7fd fc8f 	bl	80001e0 <strcmp>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <extract_command+0xf4>
			cmd->functionType = 3;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2203      	movs	r2, #3
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
 80028ce:	e02f      	b.n	8002930 <extract_command+0x154>
		}else if (strcmp(data, "sRollto") == 0){
 80028d0:	4941      	ldr	r1, [pc, #260]	; (80029d8 <extract_command+0x1fc>)
 80028d2:	483d      	ldr	r0, [pc, #244]	; (80029c8 <extract_command+0x1ec>)
 80028d4:	f7fd fc84 	bl	80001e0 <strcmp>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <extract_command+0x10a>
			cmd->functionType = 4;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
 80028e4:	e024      	b.n	8002930 <extract_command+0x154>
		}else if (strcmp(data, "reinit") == 0){
 80028e6:	493d      	ldr	r1, [pc, #244]	; (80029dc <extract_command+0x200>)
 80028e8:	4837      	ldr	r0, [pc, #220]	; (80029c8 <extract_command+0x1ec>)
 80028ea:	f7fd fc79 	bl	80001e0 <strcmp>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <extract_command+0x120>
			cmd->functionType = 5;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2205      	movs	r2, #5
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
 80028fa:	e019      	b.n	8002930 <extract_command+0x154>
		}else if (strcmp(data, "sSquare") == 0){
 80028fc:	4938      	ldr	r1, [pc, #224]	; (80029e0 <extract_command+0x204>)
 80028fe:	4832      	ldr	r0, [pc, #200]	; (80029c8 <extract_command+0x1ec>)
 8002900:	f7fd fc6e 	bl	80001e0 <strcmp>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <extract_command+0x136>
			cmd->functionType = 6;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2206      	movs	r2, #6
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
 8002910:	e00e      	b.n	8002930 <extract_command+0x154>
		}else if (strcmp(data, "sAstar") == 0){
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <extract_command+0x208>)
 8002914:	482c      	ldr	r0, [pc, #176]	; (80029c8 <extract_command+0x1ec>)
 8002916:	f7fd fc63 	bl	80001e0 <strcmp>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <extract_command+0x14c>
			cmd->functionType = 7;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2207      	movs	r2, #7
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
 8002926:	e003      	b.n	8002930 <extract_command+0x154>
		}else{
			// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
			cmd->functionType = -1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f04f 32ff 	mov.w	r2, #4294967295
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		memset(data,0,sizeof(data)); // Limpiamos el data
 8002930:	2240      	movs	r2, #64	; 0x40
 8002932:	2100      	movs	r1, #0
 8002934:	4824      	ldr	r0, [pc, #144]	; (80029c8 <extract_command+0x1ec>)
 8002936:	f00b f98b 	bl	800dc50 <memset>
 800293a:	e02d      	b.n	8002998 <extract_command+0x1bc>

	}else{
		// Si estamos aqui es porque la bandera de procesamiento de operaciones esta levantada, por lo que se quiere solo procesar
		// un comando desde el codigo, no desde terminal

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <extract_command+0x1d4>)
 800293e:	9303      	str	r3, [sp, #12]
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <extract_command+0x1d8>)
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <extract_command+0x1dc>)
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <extract_command+0x1e0>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <extract_command+0x1e4>)
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <extract_command+0x1e8>)
 8002950:	491d      	ldr	r1, [pc, #116]	; (80029c8 <extract_command+0x1ec>)
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f001 fb48 	bl	8003fe8 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f00b f976 	bl	800dc50 <memset>

		// Solo nos interesan los estados de ir a y girar a
		if (strcmp(data, "sGoTo") == 0){
 8002964:	491a      	ldr	r1, [pc, #104]	; (80029d0 <extract_command+0x1f4>)
 8002966:	4818      	ldr	r0, [pc, #96]	; (80029c8 <extract_command+0x1ec>)
 8002968:	f7fd fc3a 	bl	80001e0 <strcmp>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <extract_command+0x19e>
			cmd->functionType = 2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
 8002978:	e009      	b.n	800298e <extract_command+0x1b2>
		}else if (strcmp(data, "sRollto") == 0){
 800297a:	4917      	ldr	r1, [pc, #92]	; (80029d8 <extract_command+0x1fc>)
 800297c:	4812      	ldr	r0, [pc, #72]	; (80029c8 <extract_command+0x1ec>)
 800297e:	f7fd fc2f 	bl	80001e0 <strcmp>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <extract_command+0x1b2>
			cmd->functionType = 4;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
		}

		memset(data,0,sizeof(data)); // Limpiamos el data
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	2100      	movs	r1, #0
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <extract_command+0x1ec>)
 8002994:	f00b f95c 	bl	800dc50 <memset>

	}
	return 0;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200005e4 	.word	0x200005e4
 80029a8:	20000270 	.word	0x20000270
 80029ac:	200005e7 	.word	0x200005e7
 80029b0:	20000524 	.word	0x20000524
 80029b4:	20000520 	.word	0x20000520
 80029b8:	2000051c 	.word	0x2000051c
 80029bc:	20000510 	.word	0x20000510
 80029c0:	20000504 	.word	0x20000504
 80029c4:	200004f8 	.word	0x200004f8
 80029c8:	2000055c 	.word	0x2000055c
 80029cc:	0801390c 	.word	0x0801390c
 80029d0:	08013910 	.word	0x08013910
 80029d4:	08013918 	.word	0x08013918
 80029d8:	08013920 	.word	0x08013920
 80029dc:	08013928 	.word	0x08013928
 80029e0:	08013930 	.word	0x08013930
 80029e4:	08013938 	.word	0x08013938

080029e8 <callback_extInt1>:

//Interrupciones de Exti
void callback_extInt1(void){
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <callback_extInt1+0x24>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <callback_extInt1+0x28>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	791a      	ldrb	r2, [r3, #4]
 80029fa:	3201      	adds	r2, #1
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	711a      	strb	r2, [r3, #4]
	}
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	200005dc 	.word	0x200005dc
 8002a10:	20000440 	.word	0x20000440

08002a14 <callback_extInt3>:

void callback_extInt3(void){
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <callback_extInt3+0x24>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <callback_extInt3+0x28>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	791a      	ldrb	r2, [r3, #4]
 8002a26:	3201      	adds	r2, #1
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	711a      	strb	r2, [r3, #4]
	}
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200005dc 	.word	0x200005dc
 8002a3c:	20000440 	.word	0x20000440

08002a40 <usart1Rx_Callback>:



//Interripcion USART2
void usart1Rx_Callback(void){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af02      	add	r7, sp, #8

	rxData = getRxData();
 8002a46:	f00a fd9d 	bl	800d584 <getRxData>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002a50:	701a      	strb	r2, [r3, #0]
//	writeChar(&handlerUSART, rxData);

	if (rxData == '\r' && !flag_Astar){
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b0d      	cmp	r3, #13
 8002a58:	d106      	bne.n	8002a68 <usart1Rx_Callback+0x28>
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <usart1Rx_Callback+0xd8>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <usart1Rx_Callback+0x28>
		wrong_command = SET;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <usart1Rx_Callback+0xdc>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
	}
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <usart1Rx_Callback+0xe0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 fc80 	bl	8005376 <xQueueIsQueueFullFromISR>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4a2a      	ldr	r2, [pc, #168]	; (8002b24 <usart1Rx_Callback+0xe4>)
 8002a7a:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <usart1Rx_Callback+0xe4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d00b      	beq.n	8002a9c <usart1Rx_Callback+0x5c>

		if (rxData != '\r'){
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b0d      	cmp	r3, #13
 8002a8a:	d019      	beq.n	8002ac0 <usart1Rx_Callback+0x80>
			xQueueSendToBackFromISR(xQueue_InputData,
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <usart1Rx_Callback+0xe0>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	2300      	movs	r3, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	491f      	ldr	r1, [pc, #124]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002a96:	f002 f945 	bl	8004d24 <xQueueGenericSendFromISR>
 8002a9a:	e011      	b.n	8002ac0 <usart1Rx_Callback+0x80>
									NULL);
		}
	}else{


		if (rxData == '$'){
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b24      	cmp	r3, #36	; 0x24
 8002aa2:	d10d      	bne.n	8002ac0 <usart1Rx_Callback+0x80>

			xQueueReceiveFromISR(xQueue_InputData,
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <usart1Rx_Callback+0xe0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	491a      	ldr	r1, [pc, #104]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fac3 	bl	8005038 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <usart1Rx_Callback+0xe0>)
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4916      	ldr	r1, [pc, #88]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002abc:	f002 f932 	bl	8004d24 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (!flag_Astar){
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <usart1Rx_Callback+0xd8>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d113      	bne.n	8002af0 <usart1Rx_Callback+0xb0>
		if (rxData == '$' || rxData == '\r'){
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b24      	cmp	r3, #36	; 0x24
 8002ace:	d003      	beq.n	8002ad8 <usart1Rx_Callback+0x98>
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b0d      	cmp	r3, #13
 8002ad6:	d116      	bne.n	8002b06 <usart1Rx_Callback+0xc6>
			// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
			xTaskNotifyFromISR(xHandleTask_Commands,
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <usart1Rx_Callback+0xe8>)
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	2300      	movs	r3, #0
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	f003 fc05 	bl	80062f8 <xTaskGenericNotifyFromISR>
 8002aee:	e00a      	b.n	8002b06 <usart1Rx_Callback+0xc6>
							   NULL);
		//xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

		}
	}else{
		xTaskNotifyFromISR(xHandleTask_Grid,
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <usart1Rx_Callback+0xec>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	2300      	movs	r3, #0
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	2300      	movs	r3, #0
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	f003 fbf9 	bl	80062f8 <xTaskGenericNotifyFromISR>
						   0,
						   eNoAction,
						   NULL);
	}

	rxData = '\0';
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <usart1Rx_Callback+0xd4>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200004f5 	.word	0x200004f5
 8002b18:	200005e6 	.word	0x200005e6
 8002b1c:	200005e4 	.word	0x200005e4
 8002b20:	20000270 	.word	0x20000270
 8002b24:	2000022c 	.word	0x2000022c
 8002b28:	20000238 	.word	0x20000238
 8002b2c:	20000260 	.word	0x20000260

08002b30 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <BasicTimer2_Callback+0x4c>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <BasicTimer2_Callback+0x50>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <BasicTimer2_Callback+0x54>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d803      	bhi.n	8002b52 <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <BasicTimer2_Callback+0x58>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e005      	b.n	8002b5e <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <BasicTimer2_Callback+0x54>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <BasicTimer2_Callback+0x54>)
 8002b5c:	801a      	strh	r2, [r3, #0]

	// Solo cuando estemos en alguna operacion diferente a None, se despierta la tarea de control
	xTaskNotifyFromISR(xHandleTask_Control,
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <BasicTimer2_Callback+0x5c>)
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f003 fbc2 	bl	80062f8 <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200005e0 	.word	0x200005e0
 8002b80:	2000002c 	.word	0x2000002c
 8002b84:	200005ea 	.word	0x200005ea
 8002b88:	200005e1 	.word	0x200005e1
 8002b8c:	20000244 	.word	0x20000244

08002b90 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8002b9c:	23c8      	movs	r3, #200	; 0xc8
 8002b9e:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d061      	beq.n	8002c80 <calibracionGyros+0xf0>
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	dc70      	bgt.n	8002ca2 <calibracionGyros+0x112>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <calibracionGyros+0x60>
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d037      	beq.n	8002c38 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8002bc8:	e06b      	b.n	8002ca2 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f008 fb24 	bl	800b218 <readGyro_X>
 8002bd0:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002bd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002be4:	7efb      	ldrb	r3, [r7, #27]
 8002be6:	3301      	adds	r3, #1
 8002be8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002bea:	2001      	movs	r0, #1
 8002bec:	f006 fbde 	bl	80093ac <delay_ms>
			while (contador < numMedidas){
 8002bf0:	7efb      	ldrb	r3, [r7, #27]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	8a7a      	ldrh	r2, [r7, #18]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d8e7      	bhi.n	8002bca <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8002bfa:	8a7b      	ldrh	r3, [r7, #18]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002c10:	e048      	b.n	8002ca4 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f008 fb88 	bl	800b328 <readGyro_Y>
 8002c18:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002c1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002c2c:	7efb      	ldrb	r3, [r7, #27]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002c32:	2001      	movs	r0, #1
 8002c34:	f006 fbba 	bl	80093ac <delay_ms>
			while (contador < numMedidas){
 8002c38:	7efb      	ldrb	r3, [r7, #27]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	8a7a      	ldrh	r2, [r7, #18]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d8e7      	bhi.n	8002c12 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8002c42:	8a7b      	ldrh	r3, [r7, #18]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c54:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002c58:	e024      	b.n	8002ca4 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f008 fbec 	bl	800b438 <readGyro_Z>
 8002c60:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002c64:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c68:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c70:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002c74:	7efb      	ldrb	r3, [r7, #27]
 8002c76:	3301      	adds	r3, #1
 8002c78:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f006 fb96 	bl	80093ac <delay_ms>
			while (contador < numMedidas){
 8002c80:	7efb      	ldrb	r3, [r7, #27]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8a7a      	ldrh	r2, [r7, #18]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d8e7      	bhi.n	8002c5a <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8002c8a:	8a7b      	ldrh	r3, [r7, #18]
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002ca0:	e000      	b.n	8002ca4 <calibracionGyros+0x114>
			break;
 8002ca2:	bf00      	nop
		}
	}


	return promedio;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	ee07 3a90 	vmov	s15, r3
}
 8002caa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6178      	str	r0, [r7, #20]
 8002cbc:	ed87 0a04 	vstr	s0, [r7, #16]
 8002cc0:	ed87 1b02 	vstr	d1, [r7, #8]
 8002cc4:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f008 fbb6 	bl	800b438 <readGyro_Z>
 8002ccc:	ee10 3a10 	vmov	r3, s0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc51 	bl	8000578 <__aeabi_f2d>
 8002cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cda:	f7fd faed 	bl	80002b8 <__aeabi_dsub>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7fd ff97 	bl	8000c18 <__aeabi_d2f>
 8002cea:	4603      	mov	r3, r0
 8002cec:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8002cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cf2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002cf6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cfa:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002d60 <getAngle+0xac>
 8002cfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d02:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0a:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8002d0e:	69b8      	ldr	r0, [r7, #24]
 8002d10:	f7fd fc32 	bl	8000578 <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <getAngle+0xb0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fc28 	bl	8000578 <__aeabi_f2d>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fac5 	bl	80002bc <__adddf3>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7fd ff6d 	bl	8000c18 <__aeabi_d2f>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <getAngle+0xb0>)
 8002d42:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <getAngle+0xb4>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <getAngle+0xb8>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <getAngle+0xb8>)
 8002d54:	801a      	strh	r2, [r3, #0]
}
 8002d56:	bf00      	nop
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	447a0000 	.word	0x447a0000
 8002d64:	20000be0 	.word	0x20000be0
 8002d68:	20000324 	.word	0x20000324
 8002d6c:	200005e8 	.word	0x200005e8

08002d70 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	ed2d 8b02 	vpush	{d8}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8002d80:	793b      	ldrb	r3, [r7, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	f040 81d4 	bne.w	8003130 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8002d88:	4bab      	ldr	r3, [pc, #684]	; (8003038 <get_measuremets_parameters+0x2c8>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4bab      	ldr	r3, [pc, #684]	; (800303c <get_measuremets_parameters+0x2cc>)
 8002d90:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8002d92:	4bab      	ldr	r3, [pc, #684]	; (8003040 <get_measuremets_parameters+0x2d0>)
 8002d94:	edd3 6a00 	vldr	s13, [r3]
 8002d98:	4baa      	ldr	r3, [pc, #680]	; (8003044 <get_measuremets_parameters+0x2d4>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da8:	4ba7      	ldr	r3, [pc, #668]	; (8003048 <get_measuremets_parameters+0x2d8>)
 8002daa:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002dae:	4ba6      	ldr	r3, [pc, #664]	; (8003048 <get_measuremets_parameters+0x2d8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fbe0 	bl	8000578 <__aeabi_f2d>
 8002db8:	a39b      	add	r3, pc, #620	; (adr r3, 8003028 <get_measuremets_parameters+0x2b8>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f7fd fc33 	bl	8000628 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	4b9f      	ldr	r3, [pc, #636]	; (800304c <get_measuremets_parameters+0x2dc>)
 8002dd0:	f7fd fd54 	bl	800087c <__aeabi_ddiv>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002dde:	4b98      	ldr	r3, [pc, #608]	; (8003040 <get_measuremets_parameters+0x2d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbc8 	bl	8000578 <__aeabi_f2d>
 8002de8:	a38f      	add	r3, pc, #572	; (adr r3, 8003028 <get_measuremets_parameters+0x2b8>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd fc1b 	bl	8000628 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4b93      	ldr	r3, [pc, #588]	; (800304c <get_measuremets_parameters+0x2dc>)
 8002e00:	f7fd fd3c 	bl	800087c <__aeabi_ddiv>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	ec43 2b17 	vmov	d7, r2, r3
 8002e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e10:	eef0 0a67 	vmov.f32	s1, s15
 8002e14:	f00d fe90 	bl	8010b38 <sin>
 8002e18:	eeb0 8a40 	vmov.f32	s16, s0
 8002e1c:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002e20:	4b87      	ldr	r3, [pc, #540]	; (8003040 <get_measuremets_parameters+0x2d0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fba7 	bl	8000578 <__aeabi_f2d>
 8002e2a:	a37f      	add	r3, pc, #508	; (adr r3, 8003028 <get_measuremets_parameters+0x2b8>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f7fd fbfa 	bl	8000628 <__aeabi_dmul>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	4b82      	ldr	r3, [pc, #520]	; (800304c <get_measuremets_parameters+0x2dc>)
 8002e42:	f7fd fd1b 	bl	800087c <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ec43 2b17 	vmov	d7, r2, r3
 8002e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e52:	eef0 0a67 	vmov.f32	s1, s15
 8002e56:	f00d fdd3 	bl	8010a00 <cos>
 8002e5a:	eeb0 7a40 	vmov.f32	s14, s0
 8002e5e:	eef0 7a60 	vmov.f32	s15, s1
 8002e62:	eeb0 1a47 	vmov.f32	s2, s14
 8002e66:	eef0 1a67 	vmov.f32	s3, s15
 8002e6a:	eeb0 0a48 	vmov.f32	s0, s16
 8002e6e:	eef0 0a68 	vmov.f32	s1, s17
 8002e72:	f00d feed 	bl	8010c50 <atan2>
 8002e76:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002e7a:	a36d      	add	r3, pc, #436	; (adr r3, 8003030 <get_measuremets_parameters+0x2c0>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f7fd fbd2 	bl	8000628 <__aeabi_dmul>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e92:	f7fd fa13 	bl	80002bc <__adddf3>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ea6:	a360      	add	r3, pc, #384	; (adr r3, 8003028 <get_measuremets_parameters+0x2b8>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f7fd fbbc 	bl	8000628 <__aeabi_dmul>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	4b63      	ldr	r3, [pc, #396]	; (800304c <get_measuremets_parameters+0x2dc>)
 8002ebe:	f7fd fcdd 	bl	800087c <__aeabi_ddiv>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	ec43 2b17 	vmov	d7, r2, r3
 8002eca:	eeb0 0a47 	vmov.f32	s0, s14
 8002ece:	eef0 0a67 	vmov.f32	s1, s15
 8002ed2:	f00d fe31 	bl	8010b38 <sin>
 8002ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8002eda:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ee4:	a350      	add	r3, pc, #320	; (adr r3, 8003028 <get_measuremets_parameters+0x2b8>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fb9d 	bl	8000628 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	4b54      	ldr	r3, [pc, #336]	; (800304c <get_measuremets_parameters+0x2dc>)
 8002efc:	f7fd fcbe 	bl	800087c <__aeabi_ddiv>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	ec43 2b17 	vmov	d7, r2, r3
 8002f08:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0c:	eef0 0a67 	vmov.f32	s1, s15
 8002f10:	f00d fd76 	bl	8010a00 <cos>
 8002f14:	eeb0 7a40 	vmov.f32	s14, s0
 8002f18:	eef0 7a60 	vmov.f32	s15, s1
 8002f1c:	eeb0 1a47 	vmov.f32	s2, s14
 8002f20:	eef0 1a67 	vmov.f32	s3, s15
 8002f24:	eeb0 0a48 	vmov.f32	s0, s16
 8002f28:	eef0 0a68 	vmov.f32	s1, s17
 8002f2c:	f00d fe90 	bl	8010c50 <atan2>
 8002f30:	eeb0 7a40 	vmov.f32	s14, s0
 8002f34:	eef0 7a60 	vmov.f32	s15, s1
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	ed93 7b02 	vldr	d7, [r3, #8]
 8002f44:	eeb0 0a47 	vmov.f32	s0, s14
 8002f48:	eef0 0a67 	vmov.f32	s1, s15
 8002f4c:	f00d fdf4 	bl	8010b38 <sin>
 8002f50:	eeb0 8a40 	vmov.f32	s16, s0
 8002f54:	eef0 8a60 	vmov.f32	s17, s1
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	ed93 7b02 	vldr	d7, [r3, #8]
 8002f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f62:	eef0 0a67 	vmov.f32	s1, s15
 8002f66:	f00d fd4b 	bl	8010a00 <cos>
 8002f6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f6e:	eef0 7a60 	vmov.f32	s15, s1
 8002f72:	eeb0 1a47 	vmov.f32	s2, s14
 8002f76:	eef0 1a67 	vmov.f32	s3, s15
 8002f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8002f7e:	eef0 0a68 	vmov.f32	s1, s17
 8002f82:	f00d fe65 	bl	8010c50 <atan2>
 8002f86:	eeb0 7a40 	vmov.f32	s14, s0
 8002f8a:	eef0 7a60 	vmov.f32	s15, s1
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 8002f94:	797b      	ldrb	r3, [r7, #5]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d15e      	bne.n	8003058 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	791b      	ldrb	r3, [r3, #4]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa8:	4b29      	ldr	r3, [pc, #164]	; (8003050 <get_measuremets_parameters+0x2e0>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	791b      	ldrb	r3, [r3, #4]
 8002fc2:	ee07 3a90 	vmov	s15, r3
 8002fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <get_measuremets_parameters+0x2e4>)
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <get_measuremets_parameters+0x2cc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ffa:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3304      	adds	r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	edd3 6a03 	vldr	s13, [r3, #12]
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <get_measuremets_parameters+0x2cc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3304      	adds	r3, #4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003022:	e065      	b.n	80030f0 <get_measuremets_parameters+0x380>
 8003024:	f3af 8000 	nop.w
 8003028:	54442d18 	.word	0x54442d18
 800302c:	400921fb 	.word	0x400921fb
 8003030:	1a63c1f8 	.word	0x1a63c1f8
 8003034:	404ca5dc 	.word	0x404ca5dc
 8003038:	200005e8 	.word	0x200005e8
 800303c:	200005ec 	.word	0x200005ec
 8003040:	20000be0 	.word	0x20000be0
 8003044:	200005ea 	.word	0x200005ea
 8003048:	20000be4 	.word	0x20000be4
 800304c:	40668000 	.word	0x40668000
 8003050:	20000030 	.word	0x20000030
 8003054:	20000034 	.word	0x20000034

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	791b      	ldrb	r3, [r3, #4]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <get_measuremets_parameters+0x3a8>)
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	eef1 7a67 	vneg.f32	s15, s15
 8003078:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3304      	adds	r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	791b      	ldrb	r3, [r3, #4]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <get_measuremets_parameters+0x3ac>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	eef1 7a67 	vneg.f32	s15, s15
 80030a0:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ac:	eef1 6a67 	vneg.f32	s13, s15
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <get_measuremets_parameters+0x3b0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c4:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3304      	adds	r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80030d2:	eef1 6a67 	vneg.f32	s13, s15
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <get_measuremets_parameters+0x3b0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3304      	adds	r3, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ec:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3304      	adds	r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <get_measuremets_parameters+0x3b4>)
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <get_measuremets_parameters+0x3b8>)
 800310c:	2200      	movs	r2, #0
 800310e:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <get_measuremets_parameters+0x3bc>)
 8003112:	2200      	movs	r2, #0
 8003114:	801a      	strh	r2, [r3, #0]
		time_accumulated = 0;

		//Reiniciamos el contador de acción
		counting_action  = 0;}

}
 8003116:	e2f0      	b.n	80036fa <get_measuremets_parameters+0x98a>
 8003118:	20000030 	.word	0x20000030
 800311c:	20000034 	.word	0x20000034
 8003120:	200005ec 	.word	0x200005ec
 8003124:	20000be0 	.word	0x20000be0
 8003128:	200005e8 	.word	0x200005e8
 800312c:	200005ea 	.word	0x200005ea
	else if(operation_mode_dir.Mode == Roll)
 8003130:	793b      	ldrb	r3, [r7, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 81c8 	bne.w	80034c8 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8003138:	4bad      	ldr	r3, [pc, #692]	; (80033f0 <get_measuremets_parameters+0x680>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4bad      	ldr	r3, [pc, #692]	; (80033f4 <get_measuremets_parameters+0x684>)
 8003140:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8003142:	4bad      	ldr	r3, [pc, #692]	; (80033f8 <get_measuremets_parameters+0x688>)
 8003144:	edd3 6a00 	vldr	s13, [r3]
 8003148:	4bac      	ldr	r3, [pc, #688]	; (80033fc <get_measuremets_parameters+0x68c>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003158:	4ba9      	ldr	r3, [pc, #676]	; (8003400 <get_measuremets_parameters+0x690>)
 800315a:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 800315e:	4ba8      	ldr	r3, [pc, #672]	; (8003400 <get_measuremets_parameters+0x690>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fa08 	bl	8000578 <__aeabi_f2d>
 8003168:	a39d      	add	r3, pc, #628	; (adr r3, 80033e0 <get_measuremets_parameters+0x670>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd fa5b 	bl	8000628 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	4ba1      	ldr	r3, [pc, #644]	; (8003404 <get_measuremets_parameters+0x694>)
 8003180:	f7fd fb7c 	bl	800087c <__aeabi_ddiv>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800318e:	4b9a      	ldr	r3, [pc, #616]	; (80033f8 <get_measuremets_parameters+0x688>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f9f0 	bl	8000578 <__aeabi_f2d>
 8003198:	a391      	add	r3, pc, #580	; (adr r3, 80033e0 <get_measuremets_parameters+0x670>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd fa43 	bl	8000628 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b95      	ldr	r3, [pc, #596]	; (8003404 <get_measuremets_parameters+0x694>)
 80031b0:	f7fd fb64 	bl	800087c <__aeabi_ddiv>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	ec43 2b17 	vmov	d7, r2, r3
 80031bc:	eeb0 0a47 	vmov.f32	s0, s14
 80031c0:	eef0 0a67 	vmov.f32	s1, s15
 80031c4:	f00d fcb8 	bl	8010b38 <sin>
 80031c8:	eeb0 8a40 	vmov.f32	s16, s0
 80031cc:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80031d0:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <get_measuremets_parameters+0x688>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f9cf 	bl	8000578 <__aeabi_f2d>
 80031da:	a381      	add	r3, pc, #516	; (adr r3, 80033e0 <get_measuremets_parameters+0x670>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f7fd fa22 	bl	8000628 <__aeabi_dmul>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	4b84      	ldr	r3, [pc, #528]	; (8003404 <get_measuremets_parameters+0x694>)
 80031f2:	f7fd fb43 	bl	800087c <__aeabi_ddiv>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	ec43 2b17 	vmov	d7, r2, r3
 80031fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003202:	eef0 0a67 	vmov.f32	s1, s15
 8003206:	f00d fbfb 	bl	8010a00 <cos>
 800320a:	eeb0 7a40 	vmov.f32	s14, s0
 800320e:	eef0 7a60 	vmov.f32	s15, s1
 8003212:	eeb0 1a47 	vmov.f32	s2, s14
 8003216:	eef0 1a67 	vmov.f32	s3, s15
 800321a:	eeb0 0a48 	vmov.f32	s0, s16
 800321e:	eef0 0a68 	vmov.f32	s1, s17
 8003222:	f00d fd15 	bl	8010c50 <atan2>
 8003226:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 800322a:	a36f      	add	r3, pc, #444	; (adr r3, 80033e8 <get_measuremets_parameters+0x678>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fd f9fa 	bl	8000628 <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003242:	f7fd f83b 	bl	80002bc <__adddf3>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003256:	a362      	add	r3, pc, #392	; (adr r3, 80033e0 <get_measuremets_parameters+0x670>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f7fd f9e4 	bl	8000628 <__aeabi_dmul>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	4b65      	ldr	r3, [pc, #404]	; (8003404 <get_measuremets_parameters+0x694>)
 800326e:	f7fd fb05 	bl	800087c <__aeabi_ddiv>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	ec43 2b17 	vmov	d7, r2, r3
 800327a:	eeb0 0a47 	vmov.f32	s0, s14
 800327e:	eef0 0a67 	vmov.f32	s1, s15
 8003282:	f00d fc59 	bl	8010b38 <sin>
 8003286:	eeb0 8a40 	vmov.f32	s16, s0
 800328a:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003294:	a352      	add	r3, pc, #328	; (adr r3, 80033e0 <get_measuremets_parameters+0x670>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f7fd f9c5 	bl	8000628 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	4b56      	ldr	r3, [pc, #344]	; (8003404 <get_measuremets_parameters+0x694>)
 80032ac:	f7fd fae6 	bl	800087c <__aeabi_ddiv>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	ec43 2b17 	vmov	d7, r2, r3
 80032b8:	eeb0 0a47 	vmov.f32	s0, s14
 80032bc:	eef0 0a67 	vmov.f32	s1, s15
 80032c0:	f00d fb9e 	bl	8010a00 <cos>
 80032c4:	eeb0 7a40 	vmov.f32	s14, s0
 80032c8:	eef0 7a60 	vmov.f32	s15, s1
 80032cc:	eeb0 1a47 	vmov.f32	s2, s14
 80032d0:	eef0 1a67 	vmov.f32	s3, s15
 80032d4:	eeb0 0a48 	vmov.f32	s0, s16
 80032d8:	eef0 0a68 	vmov.f32	s1, s17
 80032dc:	f00d fcb8 	bl	8010c50 <atan2>
 80032e0:	eeb0 7a40 	vmov.f32	s14, s0
 80032e4:	eef0 7a60 	vmov.f32	s15, s1
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	ed93 7b02 	vldr	d7, [r3, #8]
 80032f4:	eeb0 0a47 	vmov.f32	s0, s14
 80032f8:	eef0 0a67 	vmov.f32	s1, s15
 80032fc:	f00d fc1c 	bl	8010b38 <sin>
 8003300:	eeb0 8a40 	vmov.f32	s16, s0
 8003304:	eef0 8a60 	vmov.f32	s17, s1
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	ed93 7b02 	vldr	d7, [r3, #8]
 800330e:	eeb0 0a47 	vmov.f32	s0, s14
 8003312:	eef0 0a67 	vmov.f32	s1, s15
 8003316:	f00d fb73 	bl	8010a00 <cos>
 800331a:	eeb0 7a40 	vmov.f32	s14, s0
 800331e:	eef0 7a60 	vmov.f32	s15, s1
 8003322:	eeb0 1a47 	vmov.f32	s2, s14
 8003326:	eef0 1a67 	vmov.f32	s3, s15
 800332a:	eeb0 0a48 	vmov.f32	s0, s16
 800332e:	eef0 0a68 	vmov.f32	s1, s17
 8003332:	f00d fc8d 	bl	8010c50 <atan2>
 8003336:	eeb0 7a40 	vmov.f32	s14, s0
 800333a:	eef0 7a60 	vmov.f32	s15, s1
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 8003344:	797b      	ldrb	r3, [r7, #5]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d162      	bne.n	8003410 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	791b      	ldrb	r3, [r3, #4]
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <get_measuremets_parameters+0x698>)
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3304      	adds	r3, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	791b      	ldrb	r3, [r3, #4]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <get_measuremets_parameters+0x69c>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3304      	adds	r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	eef1 7a67 	vneg.f32	s15, s15
 800338e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	edd3 6a03 	vldr	s13, [r3, #12]
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <get_measuremets_parameters+0x684>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ae:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3304      	adds	r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80033bc:	eef1 6a67 	vneg.f32	s13, s15
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <get_measuremets_parameters+0x684>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3304      	adds	r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d6:	edc3 7a02 	vstr	s15, [r3, #8]
 80033da:	e061      	b.n	80034a0 <get_measuremets_parameters+0x730>
 80033dc:	f3af 8000 	nop.w
 80033e0:	54442d18 	.word	0x54442d18
 80033e4:	400921fb 	.word	0x400921fb
 80033e8:	1a63c1f8 	.word	0x1a63c1f8
 80033ec:	404ca5dc 	.word	0x404ca5dc
 80033f0:	200005e8 	.word	0x200005e8
 80033f4:	200005ec 	.word	0x200005ec
 80033f8:	20000be0 	.word	0x20000be0
 80033fc:	200005ea 	.word	0x200005ea
 8003400:	20000be4 	.word	0x20000be4
 8003404:	40668000 	.word	0x40668000
 8003408:	20000030 	.word	0x20000030
 800340c:	20000034 	.word	0x20000034
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	791b      	ldrb	r3, [r3, #4]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800341e:	4bbe      	ldr	r3, [pc, #760]	; (8003718 <get_measuremets_parameters+0x9a8>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	eef1 7a67 	vneg.f32	s15, s15
 8003430:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3304      	adds	r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003444:	4bb5      	ldr	r3, [pc, #724]	; (800371c <get_measuremets_parameters+0x9ac>)
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3304      	adds	r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003454:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003460:	eef1 6a67 	vneg.f32	s13, s15
 8003464:	4bae      	ldr	r3, [pc, #696]	; (8003720 <get_measuremets_parameters+0x9b0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003478:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3304      	adds	r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	edd3 6a03 	vldr	s13, [r3, #12]
 8003486:	4ba6      	ldr	r3, [pc, #664]	; (8003720 <get_measuremets_parameters+0x9b0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3304      	adds	r3, #4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800349c:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2200      	movs	r2, #0
 80034a6:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3304      	adds	r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 80034b2:	4b9c      	ldr	r3, [pc, #624]	; (8003724 <get_measuremets_parameters+0x9b4>)
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 80034ba:	4b9b      	ldr	r3, [pc, #620]	; (8003728 <get_measuremets_parameters+0x9b8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 80034c0:	4b9a      	ldr	r3, [pc, #616]	; (800372c <get_measuremets_parameters+0x9bc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	801a      	strh	r2, [r3, #0]
}
 80034c6:	e118      	b.n	80036fa <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 80034c8:	4b97      	ldr	r3, [pc, #604]	; (8003728 <get_measuremets_parameters+0x9b8>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b94      	ldr	r3, [pc, #592]	; (8003720 <get_measuremets_parameters+0x9b0>)
 80034d0:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 80034d2:	4b94      	ldr	r3, [pc, #592]	; (8003724 <get_measuremets_parameters+0x9b4>)
 80034d4:	edd3 6a00 	vldr	s13, [r3]
 80034d8:	4b94      	ldr	r3, [pc, #592]	; (800372c <get_measuremets_parameters+0x9bc>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e8:	4b91      	ldr	r3, [pc, #580]	; (8003730 <get_measuremets_parameters+0x9c0>)
 80034ea:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80034ee:	4b90      	ldr	r3, [pc, #576]	; (8003730 <get_measuremets_parameters+0x9c0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd f840 	bl	8000578 <__aeabi_f2d>
 80034f8:	a383      	add	r3, pc, #524	; (adr r3, 8003708 <get_measuremets_parameters+0x998>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fd f893 	bl	8000628 <__aeabi_dmul>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	4b89      	ldr	r3, [pc, #548]	; (8003734 <get_measuremets_parameters+0x9c4>)
 8003510:	f7fd f9b4 	bl	800087c <__aeabi_ddiv>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800351e:	4b81      	ldr	r3, [pc, #516]	; (8003724 <get_measuremets_parameters+0x9b4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd f828 	bl	8000578 <__aeabi_f2d>
 8003528:	a377      	add	r3, pc, #476	; (adr r3, 8003708 <get_measuremets_parameters+0x998>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f87b 	bl	8000628 <__aeabi_dmul>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <get_measuremets_parameters+0x9c4>)
 8003540:	f7fd f99c 	bl	800087c <__aeabi_ddiv>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	ec43 2b17 	vmov	d7, r2, r3
 800354c:	eeb0 0a47 	vmov.f32	s0, s14
 8003550:	eef0 0a67 	vmov.f32	s1, s15
 8003554:	f00d faf0 	bl	8010b38 <sin>
 8003558:	eeb0 8a40 	vmov.f32	s16, s0
 800355c:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003560:	4b70      	ldr	r3, [pc, #448]	; (8003724 <get_measuremets_parameters+0x9b4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd f807 	bl	8000578 <__aeabi_f2d>
 800356a:	a367      	add	r3, pc, #412	; (adr r3, 8003708 <get_measuremets_parameters+0x998>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fd f85a 	bl	8000628 <__aeabi_dmul>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	4b6c      	ldr	r3, [pc, #432]	; (8003734 <get_measuremets_parameters+0x9c4>)
 8003582:	f7fd f97b 	bl	800087c <__aeabi_ddiv>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	ec43 2b17 	vmov	d7, r2, r3
 800358e:	eeb0 0a47 	vmov.f32	s0, s14
 8003592:	eef0 0a67 	vmov.f32	s1, s15
 8003596:	f00d fa33 	bl	8010a00 <cos>
 800359a:	eeb0 7a40 	vmov.f32	s14, s0
 800359e:	eef0 7a60 	vmov.f32	s15, s1
 80035a2:	eeb0 1a47 	vmov.f32	s2, s14
 80035a6:	eef0 1a67 	vmov.f32	s3, s15
 80035aa:	eeb0 0a48 	vmov.f32	s0, s16
 80035ae:	eef0 0a68 	vmov.f32	s1, s17
 80035b2:	f00d fb4d 	bl	8010c50 <atan2>
 80035b6:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80035ba:	a355      	add	r3, pc, #340	; (adr r3, 8003710 <get_measuremets_parameters+0x9a0>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fd f832 	bl	8000628 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80035d2:	f7fc fe73 	bl	80002bc <__adddf3>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80035e6:	a348      	add	r3, pc, #288	; (adr r3, 8003708 <get_measuremets_parameters+0x998>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f7fd f81c 	bl	8000628 <__aeabi_dmul>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <get_measuremets_parameters+0x9c4>)
 80035fe:	f7fd f93d 	bl	800087c <__aeabi_ddiv>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	ec43 2b17 	vmov	d7, r2, r3
 800360a:	eeb0 0a47 	vmov.f32	s0, s14
 800360e:	eef0 0a67 	vmov.f32	s1, s15
 8003612:	f00d fa91 	bl	8010b38 <sin>
 8003616:	eeb0 8a40 	vmov.f32	s16, s0
 800361a:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003624:	a338      	add	r3, pc, #224	; (adr r3, 8003708 <get_measuremets_parameters+0x998>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fc fffd 	bl	8000628 <__aeabi_dmul>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <get_measuremets_parameters+0x9c4>)
 800363c:	f7fd f91e 	bl	800087c <__aeabi_ddiv>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	ec43 2b17 	vmov	d7, r2, r3
 8003648:	eeb0 0a47 	vmov.f32	s0, s14
 800364c:	eef0 0a67 	vmov.f32	s1, s15
 8003650:	f00d f9d6 	bl	8010a00 <cos>
 8003654:	eeb0 7a40 	vmov.f32	s14, s0
 8003658:	eef0 7a60 	vmov.f32	s15, s1
 800365c:	eeb0 1a47 	vmov.f32	s2, s14
 8003660:	eef0 1a67 	vmov.f32	s3, s15
 8003664:	eeb0 0a48 	vmov.f32	s0, s16
 8003668:	eef0 0a68 	vmov.f32	s1, s17
 800366c:	f00d faf0 	bl	8010c50 <atan2>
 8003670:	eeb0 7a40 	vmov.f32	s14, s0
 8003674:	eef0 7a60 	vmov.f32	s15, s1
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	ed93 7b02 	vldr	d7, [r3, #8]
 8003684:	eeb0 0a47 	vmov.f32	s0, s14
 8003688:	eef0 0a67 	vmov.f32	s1, s15
 800368c:	f00d fa54 	bl	8010b38 <sin>
 8003690:	eeb0 8a40 	vmov.f32	s16, s0
 8003694:	eef0 8a60 	vmov.f32	s17, s1
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	ed93 7b02 	vldr	d7, [r3, #8]
 800369e:	eeb0 0a47 	vmov.f32	s0, s14
 80036a2:	eef0 0a67 	vmov.f32	s1, s15
 80036a6:	f00d f9ab 	bl	8010a00 <cos>
 80036aa:	eeb0 7a40 	vmov.f32	s14, s0
 80036ae:	eef0 7a60 	vmov.f32	s15, s1
 80036b2:	eeb0 1a47 	vmov.f32	s2, s14
 80036b6:	eef0 1a67 	vmov.f32	s3, s15
 80036ba:	eeb0 0a48 	vmov.f32	s0, s16
 80036be:	eef0 0a68 	vmov.f32	s1, s17
 80036c2:	f00d fac5 	bl	8010c50 <atan2>
 80036c6:	eeb0 7a40 	vmov.f32	s14, s0
 80036ca:	eef0 7a60 	vmov.f32	s15, s1
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3304      	adds	r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <get_measuremets_parameters+0x9b4>)
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <get_measuremets_parameters+0x9b8>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;}
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <get_measuremets_parameters+0x9bc>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	801a      	strh	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	ecbd 8b02 	vpop	{d8}
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	54442d18 	.word	0x54442d18
 800370c:	400921fb 	.word	0x400921fb
 8003710:	1a63c1f8 	.word	0x1a63c1f8
 8003714:	404ca5dc 	.word	0x404ca5dc
 8003718:	20000030 	.word	0x20000030
 800371c:	20000034 	.word	0x20000034
 8003720:	200005ec 	.word	0x200005ec
 8003724:	20000be0 	.word	0x20000be0
 8003728:	200005e8 	.word	0x200005e8
 800372c:	200005ea 	.word	0x200005ea
 8003730:	20000be4 	.word	0x20000be4
 8003734:	40668000 	.word	0x40668000

08003738 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 8003742:	783b      	ldrb	r3, [r7, #0]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d120      	bne.n	800378a <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8003748:	6839      	ldr	r1, [r7, #0]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f844 	bl	80037d8 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	4618      	mov	r0, r3
 8003758:	f008 fb82 	bl	800be60 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2101      	movs	r1, #1
 8003764:	4618      	mov	r0, r3
 8003766:	f007 fb6a 	bl	800ae3e <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	4618      	mov	r0, r3
 8003774:	f008 fb74 	bl	800be60 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f007 fb5b 	bl	800ae3e <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8003788:	e022      	b.n	80037d0 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 800378a:	783b      	ldrb	r3, [r7, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d11f      	bne.n	80037d0 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f820 	bl	80037d8 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	4618      	mov	r0, r3
 80037a0:	f008 fb5e 	bl	800be60 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f007 fb46 	bl	800ae3e <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	4618      	mov	r0, r3
 80037bc:	f008 fb50 	bl	800be60 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2101      	movs	r1, #1
 80037ca:	4618      	mov	r0, r3
 80037cc:	f007 fb37 	bl	800ae3e <GPIO_WritePin_Afopt>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 80037e2:	783b      	ldrb	r3, [r7, #0]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d143      	bne.n	8003870 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	7f1a      	ldrb	r2, [r3, #28]
 80037ee:	787b      	ldrb	r3, [r7, #1]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d018      	beq.n	8003826 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	787a      	ldrb	r2, [r7, #1]
 80037fa:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	7f1b      	ldrb	r3, [r3, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f007 fb12 	bl	800ae3e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	4618      	mov	r0, r3
 8003822:	f008 fedd 	bl	800c5e0 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	7f1a      	ldrb	r2, [r3, #28]
 800382e:	787b      	ldrb	r3, [r7, #1]
 8003830:	429a      	cmp	r2, r3
 8003832:	d068      	beq.n	8003906 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	787a      	ldrb	r2, [r7, #1]
 800383c:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6a1a      	ldr	r2, [r3, #32]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	7f1b      	ldrb	r3, [r3, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f007 faef 	bl	800ae3e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	4618      	mov	r0, r3
 800386a:	f008 feb9 	bl	800c5e0 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 800386e:	e04a      	b.n	8003906 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 8003870:	783b      	ldrb	r3, [r7, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d147      	bne.n	8003906 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	7f1a      	ldrb	r2, [r3, #28]
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	429a      	cmp	r2, r3
 8003880:	d11d      	bne.n	80038be <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8003882:	787b      	ldrb	r3, [r7, #1]
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2da      	uxtb	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a1a      	ldr	r2, [r3, #32]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	7f1b      	ldrb	r3, [r3, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f007 fac6 	bl	800ae3e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	4618      	mov	r0, r3
 80038ba:	f008 fe91 	bl	800c5e0 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	7f1a      	ldrb	r2, [r3, #28]
 80038c6:	787b      	ldrb	r3, [r7, #1]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d01c      	beq.n	8003906 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	787a      	ldrb	r2, [r7, #1]
 80038d4:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3304      	adds	r3, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	7f1b      	ldrb	r3, [r3, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f007 faa3 	bl	800ae3e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	4618      	mov	r0, r3
 8003902:	f008 fe6d 	bl	800c5e0 <PWMx_Toggle>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	4618      	mov	r0, r3
 800391e:	f008 fe1f 	bl	800c560 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f007 fa87 	bl	800ae3e <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	4618      	mov	r0, r3
 800393a:	f008 fe11 	bl	800c560 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f007 fa78 	bl	800ae3e <GPIO_WritePin_Afopt>


}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t *operation_mode_dir){
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a85      	ldr	r2, [pc, #532]	; (8003b80 <int_Config_Motor+0x228>)
 800396a:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a84      	ldr	r2, [pc, #528]	; (8003b84 <int_Config_Motor+0x22c>)
 8003972:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a83      	ldr	r2, [pc, #524]	; (8003b88 <int_Config_Motor+0x230>)
 800397a:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a82      	ldr	r2, [pc, #520]	; (8003b8c <int_Config_Motor+0x234>)
 8003982:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a81      	ldr	r2, [pc, #516]	; (8003b90 <int_Config_Motor+0x238>)
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a74      	ldr	r2, [pc, #464]	; (8003b94 <int_Config_Motor+0x23c>)
 80039c4:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a6f      	ldr	r2, [pc, #444]	; (8003b98 <int_Config_Motor+0x240>)
 80039da:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3304      	adds	r3, #4
 80039e0:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <int_Config_Motor+0x244>)
 80039e2:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3304      	adds	r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a66      	ldr	r2, [pc, #408]	; (8003b84 <int_Config_Motor+0x22c>)
 80039ec:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3304      	adds	r3, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6a      	ldr	r2, [pc, #424]	; (8003ba0 <int_Config_Motor+0x248>)
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3304      	adds	r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a69      	ldr	r2, [pc, #420]	; (8003ba4 <int_Config_Motor+0x24c>)
 8003a00:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3304      	adds	r3, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a67      	ldr	r2, [pc, #412]	; (8003ba8 <int_Config_Motor+0x250>)
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3304      	adds	r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a51      	ldr	r2, [pc, #324]	; (8003b94 <int_Config_Motor+0x23c>)
 8003a4e:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3304      	adds	r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3304      	adds	r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4c      	ldr	r2, [pc, #304]	; (8003b98 <int_Config_Motor+0x240>)
 8003a68:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a90:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4a45      	ldr	r2, [pc, #276]	; (8003bac <int_Config_Motor+0x254>)
 8003a96:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4a45      	ldr	r2, [pc, #276]	; (8003bb0 <int_Config_Motor+0x258>)
 8003a9c:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	649a      	str	r2, [r3, #72]	; 0x48
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->line_Distance = 0;
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50


	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir->Mode = None;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000448 	.word	0x20000448
 8003b84:	41e00000 	.word	0x41e00000
 8003b88:	200002c0 	.word	0x200002c0
 8003b8c:	200002d8 	.word	0x200002d8
 8003b90:	20000350 	.word	0x20000350
 8003b94:	437a0000 	.word	0x437a0000
 8003b98:	42c80000 	.word	0x42c80000
 8003b9c:	20000474 	.word	0x20000474
 8003ba0:	200002b4 	.word	0x200002b4
 8003ba4:	200002cc 	.word	0x200002cc
 8003ba8:	20000370 	.word	0x20000370
 8003bac:	3dcccccd 	.word	0x3dcccccd
 8003bb0:	3f4ccccd 	.word	0x3f4ccccd

08003bb4 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8003bc2:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <PID_control+0x1cc>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	4a6f      	ldr	r2, [pc, #444]	; (8003d84 <PID_control+0x1d0>)
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd6:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003d88 <PID_control+0x1d4>
 8003bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bde:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8003bee:	eeb0 1a46 	vmov.f32	s2, s12
 8003bf2:	eef0 1a66 	vmov.f32	s3, s13
 8003bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8003bfa:	eef0 0a67 	vmov.f32	s1, s15
 8003bfe:	68b8      	ldr	r0, [r7, #8]
 8003c00:	f007 fe96 	bl	800b930 <distance_to_straight_line>
 8003c04:	ec51 0b10 	vmov	r0, r1, d0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <PID_control+0x1d8>)
 8003c0e:	f7fc fe35 	bl	800087c <__aeabi_ddiv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f7fc fffd 	bl	8000c18 <__aeabi_d2f>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8003c22:	ed97 1a04 	vldr	s2, [r7, #16]
 8003c26:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8003d90 <PID_control+0x1dc>
 8003c2a:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f000 f8bc 	bl	8003dac <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8003c34:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <PID_control+0x1e0>)
 8003c36:	ed93 7a00 	vldr	s14, [r3]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c44:	4b54      	ldr	r3, [pc, #336]	; (8003d98 <PID_control+0x1e4>)
 8003c46:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	ed93 7a00 	vldr	s14, [r3]
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <PID_control+0x1e0>)
 8003c52:	edd3 7a00 	vldr	s15, [r3]
 8003c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c5a:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <PID_control+0x1e8>)
 8003c5c:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b4c      	ldr	r3, [pc, #304]	; (8003d98 <PID_control+0x1e4>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c74:	eeb0 1a47 	vmov.f32	s2, s14
 8003c78:	eef0 0a67 	vmov.f32	s1, s15
 8003c7c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c80:	4610      	mov	r0, r2
 8003c82:	f000 f893 	bl	8003dac <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <PID_control+0x1e8>)
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3304      	adds	r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c9e:	eeb0 1a47 	vmov.f32	s2, s14
 8003ca2:	eef0 0a67 	vmov.f32	s1, s15
 8003ca6:	ed97 0a05 	vldr	s0, [r7, #20]
 8003caa:	4610      	mov	r0, r2
 8003cac:	f000 f87e 	bl	8003dac <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	ed93 7a05 	vldr	s14, [r3, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cca:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	ed93 7a05 	vldr	s14, [r3, #20]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cee:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cfa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003da0 <PID_control+0x1ec>
 8003cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	db04      	blt.n	8003d12 <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a25      	ldr	r2, [pc, #148]	; (8003da4 <PID_control+0x1f0>)
 8003d0e:	615a      	str	r2, [r3, #20]
 8003d10:	e00e      	b.n	8003d30 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d1a:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d26:	d803      	bhi.n	8003d30 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <PID_control+0x1f4>)
 8003d2e:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3304      	adds	r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d3a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003da0 <PID_control+0x1ec>
 8003d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d46:	db05      	blt.n	8003d54 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <PID_control+0x1f0>)
 8003d50:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8003d52:	e011      	b.n	8003d78 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3304      	adds	r3, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d5e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d900      	bls.n	8003d6e <PID_control+0x1ba>
}
 8003d6c:	e004      	b.n	8003d78 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3304      	adds	r3, #4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <PID_control+0x1f4>)
 8003d76:	615a      	str	r2, [r3, #20]
}
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000324 	.word	0x20000324
 8003d84:	2000002c 	.word	0x2000002c
 8003d88:	447a0000 	.word	0x447a0000
 8003d8c:	408f4000 	.word	0x408f4000
 8003d90:	00000000 	.word	0x00000000
 8003d94:	20000be8 	.word	0x20000be8
 8003d98:	20000bec 	.word	0x20000bec
 8003d9c:	20000bf0 	.word	0x20000bf0
 8003da0:	42700000 	.word	0x42700000
 8003da4:	42700000 	.word	0x42700000
 8003da8:	41b80000 	.word	0x41b80000

08003dac <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003db8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003dbc:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8003dc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dc4:	edd7 7a00 	vldr	s15, [r7]
 8003dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	ed93 7a04 	vldr	s14, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de2:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	ed93 7a02 	vldr	s14, [r3, #8]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	edd3 6a01 	vldr	s13, [r3, #4]
 8003df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e14:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	edd3 6a01 	vldr	s13, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e2e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e3a:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8003e3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60da      	str	r2, [r3, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3724      	adds	r7, #36	; 0x24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6178      	str	r0, [r7, #20]
 8003e74:	6139      	str	r1, [r7, #16]
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	ed97 1b00 	vldr	d1, [r7]
 8003e8c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003f90 <go+0x124>
 8003e90:	6938      	ldr	r0, [r7, #16]
 8003e92:	f7fe ff0f 	bl	8002cb4 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	f7fe ff61 	bl	8002d70 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d061      	beq.n	8003f86 <go+0x11a>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003edc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ee0:	ee16 0a90 	vmov	r0, s13
 8003ee4:	f7fc fb48 	bl	8000578 <__aeabi_f2d>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8003efa:	eef0 0a67 	vmov.f32	s1, s15
 8003efe:	f00c fd7f 	bl	8010a00 <cos>
 8003f02:	ec51 0b10 	vmov	r0, r1, d0
 8003f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f0a:	f7fc fb8d 	bl	8000628 <__aeabi_dmul>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f22:	eef0 0a67 	vmov.f32	s1, s15
 8003f26:	f00c fe07 	bl	8010b38 <sin>
 8003f2a:	ec51 0b10 	vmov	r0, r1, d0
 8003f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f32:	f7fc fb79 	bl	8000628 <__aeabi_dmul>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f4c:	f7fc f9b6 	bl	80002bc <__adddf3>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	68f9      	ldr	r1, [r7, #12]
 8003f56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003f66:	f7fc f9a9 	bl	80002bc <__adddf3>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		//Convertimos el valor y imprimimos en la terminal
//		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
//
//		writeMsg(&handlerUSART, buff);

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	6978      	ldr	r0, [r7, #20]
 8003f7c:	f7ff fe1a 	bl	8003bb4 <PID_control>

		*fcontrol = RESET;
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
	}
}
 8003f86:	bf00      	nop
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	00000000 	.word	0x00000000

08003f94 <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6178      	str	r0, [r7, #20]
 8003f9c:	6139      	str	r1, [r7, #16]
 8003f9e:	60fa      	str	r2, [r7, #12]
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	ed97 1b00 	vldr	d1, [r7]
 8003fb4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003fe4 <NOP+0x50>
 8003fb8:	6938      	ldr	r0, [r7, #16]
 8003fba:	f7fe fe7b 	bl	8002cb4 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	6978      	ldr	r0, [r7, #20]
 8003fd2:	f7fe fecd 	bl	8002d70 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
	}

}
 8003fdc:	bf00      	nop
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	00000000 	.word	0x00000000

08003fe8 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]

	int counter = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	767b      	strb	r3, [r7, #25]



	while (1){

		while (cmd->payload[counter] != ' '){
 8004012:	e00a      	b.n	800402a <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4413      	add	r3, r2
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	440a      	add	r2, r1
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	701a      	strb	r2, [r3, #0]

			counter++;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b20      	cmp	r3, #32
 8004034:	d1ee      	bne.n	8004014 <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	4413      	add	r3, r2
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3301      	adds	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b24      	cmp	r3, #36	; 0x24
 8004050:	f000 8088 	beq.w	8004164 <extract_info+0x17c>
			break;
		}

		count_f = counter;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8004058:	e00d      	b.n	8004076 <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 800405a:	7e3b      	ldrb	r3, [r7, #24]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	461a      	mov	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	440a      	add	r2, r1
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	701a      	strb	r2, [r3, #0]

			counter++;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3301      	adds	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b20      	cmp	r3, #32
 8004080:	d1eb      	bne.n	800405a <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	7e3b      	ldrb	r3, [r7, #24]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 800408c:	7e3b      	ldrb	r3, [r7, #24]
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3301      	adds	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b24      	cmp	r3, #36	; 0x24
 80040ac:	d05c      	beq.n	8004168 <extract_info+0x180>
			break;
		}

		count_s = counter;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 80040b2:	e00d      	b.n	80040d0 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	701a      	strb	r2, [r3, #0]

			counter++;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3301      	adds	r3, #1
 80040ce:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d1eb      	bne.n	80040b4 <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b24      	cmp	r3, #36	; 0x24
 8004106:	d031      	beq.n	800416c <extract_info+0x184>
			break;
		}

		count_t = counter;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 800410c:	e00d      	b.n	800412a <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 800410e:	7dbb      	ldrb	r3, [r7, #22]
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	461a      	mov	r2, r3
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	4413      	add	r3, r2
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	440a      	add	r2, r1
 8004120:	7812      	ldrb	r2, [r2, #0]
 8004122:	701a      	strb	r2, [r3, #0]

			counter++;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	3301      	adds	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b20      	cmp	r3, #32
 8004134:	d1eb      	bne.n	800410e <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	7dbb      	ldrb	r3, [r7, #22]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8004140:	7dbb      	ldrb	r3, [r7, #22]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	461a      	mov	r2, r3
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	4413      	add	r3, r2
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b24      	cmp	r3, #36	; 0x24
 8004160:	d006      	beq.n	8004170 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 8004162:	e762      	b.n	800402a <extract_info+0x42>
			break;
 8004164:	bf00      	nop
 8004166:	e004      	b.n	8004172 <extract_info+0x18a>
			break;
 8004168:	bf00      	nop
 800416a:	e002      	b.n	8004172 <extract_info+0x18a>
			break;
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <extract_info+0x18a>
			break;
 8004170:	bf00      	nop
		}
	}

	counter = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 8004176:	7efb      	ldrb	r3, [r7, #27]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 800417c:	2301      	movs	r3, #1
 800417e:	e0d6      	b.n	800432e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8004180:	7efb      	ldrb	r3, [r7, #27]
 8004182:	3b01      	subs	r3, #1
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e03c      	b.n	8004202 <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8004188:	7efb      	ldrb	r3, [r7, #27]
 800418a:	3b01      	subs	r3, #1
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	bfb8      	it	lt
 8004194:	425b      	neglt	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	3b30      	subs	r3, #48	; 0x30
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc f9d7 	bl	8000554 <__aeabi_i2d>
 80041a6:	4604      	mov	r4, r0
 80041a8:	460d      	mov	r5, r1
 80041aa:	69f8      	ldr	r0, [r7, #28]
 80041ac:	f7fc f9d2 	bl	8000554 <__aeabi_i2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	ec43 2b11 	vmov	d1, r2, r3
 80041b8:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8004338 <extract_info+0x350>
 80041bc:	f00c fd4a 	bl	8010c54 <pow>
 80041c0:	ec53 2b10 	vmov	r2, r3, d0
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7fc fa2e 	bl	8000628 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc f9ab 	bl	8000534 <__aeabi_ui2d>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4620      	mov	r0, r4
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7fc f869 	bl	80002bc <__adddf3>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	f7fc fcf1 	bl	8000bd8 <__aeabi_d2uiz>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fa:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3b01      	subs	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	2b00      	cmp	r3, #0
 8004206:	dabf      	bge.n	8004188 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 8004208:	7ebb      	ldrb	r3, [r7, #26]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 800420e:	2302      	movs	r3, #2
 8004210:	e08d      	b.n	800432e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 8004212:	7ebb      	ldrb	r3, [r7, #26]
 8004214:	3b01      	subs	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e03c      	b.n	8004294 <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 800421a:	7ebb      	ldrb	r3, [r7, #26]
 800421c:	3b01      	subs	r3, #1
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfb8      	it	lt
 8004226:	425b      	neglt	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	3b30      	subs	r3, #48	; 0x30
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc f98e 	bl	8000554 <__aeabi_i2d>
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
 800423c:	69f8      	ldr	r0, [r7, #28]
 800423e:	f7fc f989 	bl	8000554 <__aeabi_i2d>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	ec43 2b11 	vmov	d1, r2, r3
 800424a:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8004338 <extract_info+0x350>
 800424e:	f00c fd01 	bl	8010c54 <pow>
 8004252:	ec53 2b10 	vmov	r2, r3, d0
 8004256:	4620      	mov	r0, r4
 8004258:	4629      	mov	r1, r5
 800425a:	f7fc f9e5 	bl	8000628 <__aeabi_dmul>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4614      	mov	r4, r2
 8004264:	461d      	mov	r5, r3
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc f962 	bl	8000534 <__aeabi_ui2d>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4620      	mov	r0, r4
 8004276:	4629      	mov	r1, r5
 8004278:	f7fc f820 	bl	80002bc <__adddf3>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	f7fc fca8 	bl	8000bd8 <__aeabi_d2uiz>
 8004288:	4602      	mov	r2, r0
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3b01      	subs	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	dabf      	bge.n	800421a <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 800429a:	7e7b      	ldrb	r3, [r7, #25]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 80042a0:	2303      	movs	r3, #3
 80042a2:	e044      	b.n	800432e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 80042a4:	7e7b      	ldrb	r3, [r7, #25]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e03c      	b.n	8004326 <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 80042ac:	7e7b      	ldrb	r3, [r7, #25]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bfb8      	it	lt
 80042b8:	425b      	neglt	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	3b30      	subs	r3, #48	; 0x30
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc f945 	bl	8000554 <__aeabi_i2d>
 80042ca:	4604      	mov	r4, r0
 80042cc:	460d      	mov	r5, r1
 80042ce:	69f8      	ldr	r0, [r7, #28]
 80042d0:	f7fc f940 	bl	8000554 <__aeabi_i2d>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	ec43 2b11 	vmov	d1, r2, r3
 80042dc:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004338 <extract_info+0x350>
 80042e0:	f00c fcb8 	bl	8010c54 <pow>
 80042e4:	ec53 2b10 	vmov	r2, r3, d0
 80042e8:	4620      	mov	r0, r4
 80042ea:	4629      	mov	r1, r5
 80042ec:	f7fc f99c 	bl	8000628 <__aeabi_dmul>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4614      	mov	r4, r2
 80042f6:	461d      	mov	r5, r3
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f919 	bl	8000534 <__aeabi_ui2d>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fb ffd7 	bl	80002bc <__adddf3>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4610      	mov	r0, r2
 8004314:	4619      	mov	r1, r3
 8004316:	f7fc fc5f 	bl	8000bd8 <__aeabi_d2uiz>
 800431a:	4602      	mov	r2, r0
 800431c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431e:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	3b01      	subs	r3, #1
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	dabf      	bge.n	80042ac <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bdb0      	pop	{r4, r5, r7, pc}
 8004336:	bf00      	nop
 8004338:	00000000 	.word	0x00000000
 800433c:	40240000 	.word	0x40240000

08004340 <create_square_operations>:
void create_square_operations(double side,
							  uint8_t CW_CCW,
							  Parameters_Operation_t prtList[30],
							  Parameter_build_t *ptrbuild,
							  Parameters_Path_t *ptrPath,
							  Parameters_Position_t *ptrPos){
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b09e      	sub	sp, #120	; 0x78
 8004344:	af00      	add	r7, sp, #0
 8004346:	ed87 0b06 	vstr	d0, [r7, #24]
 800434a:	6139      	str	r1, [r7, #16]
 800434c:	60fa      	str	r2, [r7, #12]
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	4603      	mov	r3, r0
 8004352:	75fb      	strb	r3, [r7, #23]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double finishline_y = 0;
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9c1 2300 	strd	r2, r3, [r1]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// Preguntamos si se quiere recorrer el cuadrado en CW o CCW, no importa donde este situado, comenzara en linea recta como primera operación

	if (CW_CCW == 1) // Se quiere ir en CW
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	f040 808e 	bne.w	80044c4 <create_square_operations+0x184>
	{

		// calculo del vector unitario del robot

		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 80043a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043ac:	ed93 7b04 	vldr	d7, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3310      	adds	r3, #16
 80043b4:	4618      	mov	r0, r3
 80043b6:	eeb0 0a47 	vmov.f32	s0, s14
 80043ba:	eef0 0a67 	vmov.f32	s1, s15
 80043be:	f007 fc31 	bl	800bc24 <unitary_vector>

		double coordenadas_cuadrado[4][2] = {{side,0},
 80043c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80043d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
											 {side,-side},
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043e8:	607b      	str	r3, [r7, #4]
		double coordenadas_cuadrado[4][2] = {{side,0},
 80043ea:	ed97 7b00 	vldr	d7, [r7]
 80043ee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
											 {0,-side},
 80043fe:	69bc      	ldr	r4, [r7, #24]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
		double coordenadas_cuadrado[4][2] = {{side,0},
 8004406:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
											 {0,0}}; // Coordenadas (x,y) destino para hacer el cuadrado


		for (uint8_t i = 0 ; i < 4; i++){
 8004422:	2300      	movs	r3, #0
 8004424:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004428:	e035      	b.n	8004496 <create_square_operations+0x156>

			// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir


			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 800442a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	3370      	adds	r3, #112	; 0x70
 8004432:	f107 0208 	add.w	r2, r7, #8
 8004436:	4413      	add	r3, r2
 8004438:	3b58      	subs	r3, #88	; 0x58
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 8004442:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	3370      	adds	r3, #112	; 0x70
 800444a:	f107 0208 	add.w	r2, r7, #8
 800444e:	4413      	add	r3, r2
 8004450:	3b50      	subs	r3, #80	; 0x50
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			ptrPath->goal_Position_x = finishline_x;
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004460:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800446a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 800446e:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8004472:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	6938      	ldr	r0, [r7, #16]
 800447a:	f007 f865 	bl	800b548 <build_Operation>

			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 800447e:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8004482:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8004486:	68b8      	ldr	r0, [r7, #8]
 8004488:	f007 f942 	bl	800b710 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4; i++){
 800448c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004490:	3301      	adds	r3, #1
 8004492:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004496:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800449a:	2b03      	cmp	r3, #3
 800449c:	d9c5      	bls.n	800442a <create_square_operations+0xea>

		}


		// Agregamos la operacion nula
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a4:	ed9f 2b4c 	vldr	d2, [pc, #304]	; 80045d8 <create_square_operations+0x298>
 80044a8:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 80045d8 <create_square_operations+0x298>
 80044ac:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 80045d8 <create_square_operations+0x298>
 80044b0:	2200      	movs	r2, #0
 80044b2:	4619      	mov	r1, r3
 80044b4:	6938      	ldr	r0, [r7, #16]
 80044b6:	f007 f8e7 	bl	800b688 <add_Operation>
		ptrbuild->number_operation = 0;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
		ptrbuild->number_operation = 0;

	}

}
 80044c2:	e084      	b.n	80045ce <create_square_operations+0x28e>
		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 80044c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3310      	adds	r3, #16
 80044d0:	4618      	mov	r0, r3
 80044d2:	eeb0 0a47 	vmov.f32	s0, s14
 80044d6:	eef0 0a67 	vmov.f32	s1, s15
 80044da:	f007 fba3 	bl	800bc24 <unitary_vector>
		double coordenadas_cuadrado[4][2] = {{side,0},
 80044de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80044f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80044fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800450e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004512:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for (uint8_t i = 0 ; i < 4 ; i++){
 800452e:	2300      	movs	r3, #0
 8004530:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004534:	e035      	b.n	80045a2 <create_square_operations+0x262>
			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 8004536:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	3370      	adds	r3, #112	; 0x70
 800453e:	f107 0208 	add.w	r2, r7, #8
 8004542:	4413      	add	r3, r2
 8004544:	3b58      	subs	r3, #88	; 0x58
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 800454e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	3370      	adds	r3, #112	; 0x70
 8004556:	f107 0208 	add.w	r2, r7, #8
 800455a:	4413      	add	r3, r2
 800455c:	3b50      	subs	r3, #80	; 0x50
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			ptrPath->goal_Position_x = finishline_x;
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800456c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004576:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 800457a:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 800457e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	6938      	ldr	r0, [r7, #16]
 8004586:	f006 ffdf 	bl	800b548 <build_Operation>
			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 800458a:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 800458e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f007 f8bc 	bl	800b710 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4 ; i++){
 8004598:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800459c:	3301      	adds	r3, #1
 800459e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80045a2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d9c5      	bls.n	8004536 <create_square_operations+0x1f6>
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b0:	ed9f 2b09 	vldr	d2, [pc, #36]	; 80045d8 <create_square_operations+0x298>
 80045b4:	ed9f 1b08 	vldr	d1, [pc, #32]	; 80045d8 <create_square_operations+0x298>
 80045b8:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80045d8 <create_square_operations+0x298>
 80045bc:	2200      	movs	r2, #0
 80045be:	4619      	mov	r1, r3
 80045c0:	6938      	ldr	r0, [r7, #16]
 80045c2:	f007 f861 	bl	800b688 <add_Operation>
		ptrbuild->number_operation = 0;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80045ce:	bf00      	nop
 80045d0:	3778      	adds	r7, #120	; 0x78
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bdb0      	pop	{r4, r5, r7, pc}
 80045d6:	bf00      	nop
	...

080045e0 <resetParameters>:


void resetParameters(void){
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	fparam = 0;
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <resetParameters+0x20>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
	sparam = 0;
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <resetParameters+0x24>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
	tparam = 0;
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <resetParameters+0x28>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	2000051c 	.word	0x2000051c
 8004604:	20000520 	.word	0x20000520
 8004608:	20000524 	.word	0x20000524

0800460c <led_state_callback>:

void led_state_callback (TimerHandle_t xTimer){
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 8004614:	4803      	ldr	r0, [pc, #12]	; (8004624 <led_state_callback+0x18>)
 8004616:	f006 fc5e 	bl	800aed6 <GPIOxTooglePin>

}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000278 	.word	0x20000278

08004628 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <ITM_SendChar+0x48>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <ITM_SendChar+0x48>)
 8004638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <ITM_SendChar+0x4c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <ITM_SendChar+0x4c>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800464a:	bf00      	nop
 800464c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f8      	beq.n	800464c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800465a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	6013      	str	r3, [r2, #0]
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000edfc 	.word	0xe000edfc
 8004674:	e0000e00 	.word	0xe0000e00

08004678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	return 1;
 800467c:	2301      	movs	r3, #1
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <_kill>:

int _kill(int pid, int sig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004692:	f009 fa9d 	bl	800dbd0 <__errno>
 8004696:	4603      	mov	r3, r0
 8004698:	2216      	movs	r2, #22
 800469a:	601a      	str	r2, [r3, #0]
	return -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_exit>:

void _exit (int status)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80046b0:	f04f 31ff 	mov.w	r1, #4294967295
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ffe7 	bl	8004688 <_kill>
	while (1) {}		/* Make sure we hang here */
 80046ba:	e7fe      	b.n	80046ba <_exit+0x12>

080046bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e00a      	b.n	80046e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046ce:	f3af 8000 	nop.w
 80046d2:	4601      	mov	r1, r0
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	60ba      	str	r2, [r7, #8]
 80046da:	b2ca      	uxtb	r2, r1
 80046dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	3301      	adds	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dbf0      	blt.n	80046ce <_read+0x12>
	}

return len;
 80046ec:	687b      	ldr	r3, [r7, #4]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e009      	b.n	800471c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	60ba      	str	r2, [r7, #8]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff89 	bl	8004628 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	3301      	adds	r3, #1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	dbf1      	blt.n	8004708 <_write+0x12>
	}
	return len;
 8004724:	687b      	ldr	r3, [r7, #4]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <_close>:

int _close(int file)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
	return -1;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004756:	605a      	str	r2, [r3, #4]
	return 0;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <_isatty>:

int _isatty(int file)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
	return 1;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
	return 0;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004798:	480d      	ldr	r0, [pc, #52]	; (80047d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800479a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800479c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047a0:	480c      	ldr	r0, [pc, #48]	; (80047d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80047a2:	490d      	ldr	r1, [pc, #52]	; (80047d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <LoopForever+0xe>)
  movs r3, #0
 80047a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047a8:	e002      	b.n	80047b0 <LoopCopyDataInit>

080047aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ae:	3304      	adds	r3, #4

080047b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047b4:	d3f9      	bcc.n	80047aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047b8:	4c0a      	ldr	r4, [pc, #40]	; (80047e4 <LoopForever+0x16>)
  movs r3, #0
 80047ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047bc:	e001      	b.n	80047c2 <LoopFillZerobss>

080047be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047c0:	3204      	adds	r2, #4

080047c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047c4:	d3fb      	bcc.n	80047be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80047c6:	f009 fa09 	bl	800dbdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047ca:	f7fc fa75 	bl	8000cb8 <main>

080047ce <LoopForever>:

LoopForever:
    b LoopForever
 80047ce:	e7fe      	b.n	80047ce <LoopForever>
  ldr   r0, =_estack
 80047d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047d8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80047dc:	080140b0 	.word	0x080140b0
  ldr r2, =_sbss
 80047e0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80047e4:	20014050 	.word	0x20014050

080047e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047e8:	e7fe      	b.n	80047e8 <ADC_IRQHandler>

080047ea <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f103 0208 	add.w	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f103 0208 	add.w	r2, r3, #8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f103 0208 	add.w	r2, r3, #8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d103      	bne.n	80048ac <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e00c      	b.n	80048c6 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3308      	adds	r3, #8
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e002      	b.n	80048ba <vListInsert+0x2e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d2f6      	bcs.n	80048b4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6892      	ldr	r2, [r2, #8]
 8004914:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6852      	ldr	r2, [r2, #4]
 800491e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d103      	bne.n	8004932 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1e5a      	subs	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xQueueGenericReset+0x2a>
        __asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60bb      	str	r3, [r7, #8]
    }
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800497e:	f002 fac3 	bl	8006f08 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	441a      	add	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	3b01      	subs	r3, #1
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	441a      	add	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d114      	bne.n	80049fe <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01a      	beq.n	8004a12 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3310      	adds	r3, #16
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f8f5 	bl	8005bd0 <xTaskRemoveFromEventList>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d012      	beq.n	8004a12 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <xQueueGenericReset+0xcc>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	e009      	b.n	8004a12 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3310      	adds	r3, #16
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fef1 	bl	80047ea <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3324      	adds	r3, #36	; 0x24
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff feec 	bl	80047ea <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004a12:	f002 faa9 	bl	8006f68 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004a16:	2301      	movs	r3, #1
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xQueueGenericCreate+0x2a>
        __asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	61bb      	str	r3, [r7, #24]
    }
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <xQueueGenericCreate+0x48>
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d101      	bne.n	8004a70 <xQueueGenericCreate+0x4c>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <xQueueGenericCreate+0x4e>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <xQueueGenericCreate+0x68>
        __asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	617b      	str	r3, [r7, #20]
    }
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004a92:	d90a      	bls.n	8004aaa <xQueueGenericCreate+0x86>
        __asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	613b      	str	r3, [r7, #16]
    }
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	3350      	adds	r3, #80	; 0x50
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f002 fb4c 	bl	800714c <pvPortMalloc>
 8004ab4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	3350      	adds	r3, #80	; 0x50
 8004ac4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ac6:	79fa      	ldrb	r2, [r7, #7]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f805 	bl	8004ae2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
    }
 8004ada:	4618      	mov	r0, r3
 8004adc:	3728      	adds	r7, #40	; 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e002      	b.n	8004b04 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b10:	2101      	movs	r1, #1
 8004b12:	69b8      	ldr	r0, [r7, #24]
 8004b14:	f7ff ff1e 	bl	8004954 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08e      	sub	sp, #56	; 0x38
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <xQueueGenericSend+0x32>
        __asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <xQueueGenericSend+0x40>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <xQueueGenericSend+0x44>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <xQueueGenericSend+0x46>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <xQueueGenericSend+0x60>
        __asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d103      	bne.n	8004b96 <xQueueGenericSend+0x6e>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <xQueueGenericSend+0x72>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <xQueueGenericSend+0x74>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <xQueueGenericSend+0x8e>
        __asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	623b      	str	r3, [r7, #32]
    }
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bb6:	f001 f9a7 	bl	8005f08 <xTaskGetSchedulerState>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <xQueueGenericSend+0x9e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <xQueueGenericSend+0xa2>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <xQueueGenericSend+0xa4>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <xQueueGenericSend+0xbe>
        __asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	61fb      	str	r3, [r7, #28]
    }
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004be6:	f002 f98f 	bl	8006f08 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <xQueueGenericSend+0xd4>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d129      	bne.n	8004c50 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c02:	f000 faa8 	bl	8005156 <prvCopyDataToQueue>
 8004c06:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 ffdb 	bl	8005bd0 <xTaskRemoveFromEventList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004c20:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <xQueueGenericSend+0x1f8>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	e00a      	b.n	8004c48 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <xQueueGenericSend+0x1f8>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004c48:	f002 f98e 	bl	8006f68 <vPortExitCritical>
                return pdPASS;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e063      	b.n	8004d18 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004c56:	f002 f987 	bl	8006f68 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e05c      	b.n	8004d18 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f813 	bl	8005c94 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004c72:	f002 f979 	bl	8006f68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004c76:	f000 fd9b 	bl	80057b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004c7a:	f002 f945 	bl	8006f08 <vPortEnterCritical>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d103      	bne.n	8004c94 <xQueueGenericSend+0x16c>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d103      	bne.n	8004caa <xQueueGenericSend+0x182>
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004caa:	f002 f95d 	bl	8006f68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cae:	1d3a      	adds	r2, r7, #4
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 f802 	bl	8005cc0 <xTaskCheckForTimeOut>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d124      	bne.n	8004d0c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc4:	f000 fb3f 	bl	8005346 <prvIsQueueFull>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	3310      	adds	r3, #16
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 ff2a 	bl	8005b30 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cde:	f000 faca 	bl	8005276 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004ce2:	f000 fd73 	bl	80057cc <xTaskResumeAll>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f47f af7c 	bne.w	8004be6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <xQueueGenericSend+0x1f8>)
 8004cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	e772      	b.n	8004be6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d02:	f000 fab8 	bl	8005276 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004d06:	f000 fd61 	bl	80057cc <xTaskResumeAll>
 8004d0a:	e76c      	b.n	8004be6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0e:	f000 fab2 	bl	8005276 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004d12:	f000 fd5b 	bl	80057cc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004d16:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3738      	adds	r7, #56	; 0x38
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b090      	sub	sp, #64	; 0x40
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d103      	bne.n	8004d60 <xQueueGenericSendFromISR+0x3c>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <xQueueGenericSendFromISR+0x40>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <xQueueGenericSendFromISR+0x42>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d103      	bne.n	8004d8e <xQueueGenericSendFromISR+0x6a>
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <xQueueGenericSendFromISR+0x6e>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <xQueueGenericSendFromISR+0x70>
 8004d92:	2300      	movs	r3, #0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	623b      	str	r3, [r7, #32]
    }
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dae:	f002 f98d 	bl	80070cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004db2:	f3ef 8211 	mrs	r2, BASEPRI
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61fa      	str	r2, [r7, #28]
 8004dc8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004dca:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <xQueueGenericSendFromISR+0xbc>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d13e      	bne.n	8004e5e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004df6:	f000 f9ae 	bl	8005156 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004dfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d112      	bne.n	8004e2a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d025      	beq.n	8004e58 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	3324      	adds	r3, #36	; 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fedd 	bl	8005bd0 <xTaskRemoveFromEventList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01d      	beq.n	8004e58 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01a      	beq.n	8004e58 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e016      	b.n	8004e58 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004e2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e30:	d10a      	bne.n	8004e48 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	617b      	str	r3, [r7, #20]
    }
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	b25a      	sxtb	r2, r3
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004e5c:	e001      	b.n	8004e62 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004e6c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3740      	adds	r7, #64	; 0x40
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	; 0x30
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <xQueueReceive+0x30>
        __asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	623b      	str	r3, [r7, #32]
    }
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <xQueueReceive+0x3e>
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <xQueueReceive+0x42>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <xQueueReceive+0x44>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <xQueueReceive+0x5e>
        __asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61fb      	str	r3, [r7, #28]
    }
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ed6:	f001 f817 	bl	8005f08 <xTaskGetSchedulerState>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <xQueueReceive+0x6e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <xQueueReceive+0x72>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueReceive+0x74>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <xQueueReceive+0x8e>
        __asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61bb      	str	r3, [r7, #24]
    }
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004f06:	f001 ffff 	bl	8006f08 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01f      	beq.n	8004f56 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f1a:	f000 f986 	bl	800522a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	1e5a      	subs	r2, r3, #1
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00f      	beq.n	8004f4e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	3310      	adds	r3, #16
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fe4c 	bl	8005bd0 <xTaskRemoveFromEventList>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004f3e:	4b3d      	ldr	r3, [pc, #244]	; (8005034 <xQueueReceive+0x1bc>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004f4e:	f002 f80b 	bl	8006f68 <vPortExitCritical>
                return pdPASS;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e069      	b.n	800502a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004f5c:	f002 f804 	bl	8006f68 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e062      	b.n	800502a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f6a:	f107 0310 	add.w	r3, r7, #16
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fe90 	bl	8005c94 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f78:	f001 fff6 	bl	8006f68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f7c:	f000 fc18 	bl	80057b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f80:	f001 ffc2 	bl	8006f08 <vPortEnterCritical>
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d103      	bne.n	8004f9a <xQueueReceive+0x122>
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa0:	b25b      	sxtb	r3, r3
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d103      	bne.n	8004fb0 <xQueueReceive+0x138>
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb0:	f001 ffda 	bl	8006f68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fb4:	1d3a      	adds	r2, r7, #4
 8004fb6:	f107 0310 	add.w	r3, r7, #16
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fe7f 	bl	8005cc0 <xTaskCheckForTimeOut>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d123      	bne.n	8005010 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fca:	f000 f9a6 	bl	800531a <prvIsQueueEmpty>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d017      	beq.n	8005004 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	3324      	adds	r3, #36	; 0x24
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fda7 	bl	8005b30 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe4:	f000 f947 	bl	8005276 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004fe8:	f000 fbf0 	bl	80057cc <xTaskResumeAll>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d189      	bne.n	8004f06 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <xQueueReceive+0x1bc>)
 8004ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	e780      	b.n	8004f06 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005006:	f000 f936 	bl	8005276 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800500a:	f000 fbdf 	bl	80057cc <xTaskResumeAll>
 800500e:	e77a      	b.n	8004f06 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005012:	f000 f930 	bl	8005276 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005016:	f000 fbd9 	bl	80057cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800501a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800501c:	f000 f97d 	bl	800531a <prvIsQueueEmpty>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	f43f af6f 	beq.w	8004f06 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005028:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800502a:	4618      	mov	r0, r3
 800502c:	3730      	adds	r7, #48	; 0x30
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b090      	sub	sp, #64	; 0x40
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <xQueueReceiveFromISR+0x3a>
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <xQueueReceiveFromISR+0x3e>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <xQueueReceiveFromISR+0x40>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005092:	f002 f81b 	bl	80070cc <vPortValidateInterruptPriority>
        __asm volatile
 8005096:	f3ef 8211 	mrs	r2, BASEPRI
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	623a      	str	r2, [r7, #32]
 80050ac:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80050ae:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d03e      	beq.n	800513c <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050cc:	f000 f8ad 	bl	800522a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	1e5a      	subs	r2, r3, #1
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80050d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d112      	bne.n	8005108 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d025      	beq.n	8005136 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	3310      	adds	r3, #16
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fd6e 	bl	8005bd0 <xTaskRemoveFromEventList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01d      	beq.n	8005136 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01a      	beq.n	8005136 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e016      	b.n	8005136 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005108:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800510c:	2b7f      	cmp	r3, #127	; 0x7f
 800510e:	d10a      	bne.n	8005126 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61bb      	str	r3, [r7, #24]
    }
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800512a:	3301      	adds	r3, #1
 800512c:	b2db      	uxtb	r3, r3
 800512e:	b25a      	sxtb	r2, r3
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005136:	2301      	movs	r3, #1
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513a:	e001      	b.n	8005140 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 800513c:	2300      	movs	r3, #0
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f383 8811 	msr	BASEPRI, r3
    }
 800514a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800514c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800514e:	4618      	mov	r0, r3
 8005150:	3740      	adds	r7, #64	; 0x40
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10d      	bne.n	8005190 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d14d      	bne.n	8005218 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fedf 	bl	8005f44 <xTaskPriorityDisinherit>
 8005186:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	609a      	str	r2, [r3, #8]
 800518e:	e043      	b.n	8005218 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d119      	bne.n	80051ca <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6858      	ldr	r0, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	461a      	mov	r2, r3
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	f008 fd47 	bl	800dc34 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d32b      	bcc.n	8005218 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	e026      	b.n	8005218 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68d8      	ldr	r0, [r3, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	461a      	mov	r2, r3
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	f008 fd2d 	bl	800dc34 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	425b      	negs	r3, r3
 80051e4:	441a      	add	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d207      	bcs.n	8005206 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	425b      	negs	r3, r3
 8005200:	441a      	add	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d105      	bne.n	8005218 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	3b01      	subs	r3, #1
 8005216:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005220:	697b      	ldr	r3, [r7, #20]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d018      	beq.n	800526e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	441a      	add	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	429a      	cmp	r2, r3
 8005254:	d303      	bcc.n	800525e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68d9      	ldr	r1, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	461a      	mov	r2, r3
 8005268:	6838      	ldr	r0, [r7, #0]
 800526a:	f008 fce3 	bl	800dc34 <memcpy>
    }
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800527e:	f001 fe43 	bl	8006f08 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005288:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800528a:	e011      	b.n	80052b0 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d012      	beq.n	80052ba <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3324      	adds	r3, #36	; 0x24
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fc99 	bl	8005bd0 <xTaskRemoveFromEventList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80052a4:	f000 fd72 	bl	8005d8c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dce9      	bgt.n	800528c <prvUnlockQueue+0x16>
 80052b8:	e000      	b.n	80052bc <prvUnlockQueue+0x46>
                        break;
 80052ba:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	22ff      	movs	r2, #255	; 0xff
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80052c4:	f001 fe50 	bl	8006f68 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80052c8:	f001 fe1e 	bl	8006f08 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052d4:	e011      	b.n	80052fa <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d012      	beq.n	8005304 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3310      	adds	r3, #16
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fc74 	bl	8005bd0 <xTaskRemoveFromEventList>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80052ee:	f000 fd4d 	bl	8005d8c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052f2:	7bbb      	ldrb	r3, [r7, #14]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	dce9      	bgt.n	80052d6 <prvUnlockQueue+0x60>
 8005302:	e000      	b.n	8005306 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005304:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800530e:	f001 fe2b 	bl	8006f68 <vPortExitCritical>
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005322:	f001 fdf1 	bl	8006f08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800532e:	2301      	movs	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e001      	b.n	8005338 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005338:	f001 fe16 	bl	8006f68 <vPortExitCritical>

    return xReturn;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800534e:	f001 fddb 	bl	8006f08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535a:	429a      	cmp	r2, r3
 800535c:	d102      	bne.n	8005364 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e001      	b.n	8005368 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005368:	f001 fdfe 	bl	8006f68 <vPortExitCritical>

    return xReturn;
 800536c:	68fb      	ldr	r3, [r7, #12]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005376:	b480      	push	{r7}
 8005378:	b087      	sub	sp, #28
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60fb      	str	r3, [r7, #12]
    }
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d102      	bne.n	80053b0 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e001      	b.n	80053b4 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80053b4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80053b6:	4618      	mov	r0, r3
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e014      	b.n	80053fe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053d4:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <vQueueAddToRegistry+0x50>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053e0:	490c      	ldr	r1, [pc, #48]	; (8005414 <vQueueAddToRegistry+0x50>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <vQueueAddToRegistry+0x50>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80053f6:	e006      	b.n	8005406 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b07      	cmp	r3, #7
 8005402:	d9e7      	bls.n	80053d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000c20 	.word	0x20000c20

08005418 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005428:	f001 fd6e 	bl	8006f08 <vPortEnterCritical>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005432:	b25b      	sxtb	r3, r3
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d103      	bne.n	8005442 <vQueueWaitForMessageRestricted+0x2a>
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005448:	b25b      	sxtb	r3, r3
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d103      	bne.n	8005458 <vQueueWaitForMessageRestricted+0x40>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005458:	f001 fd86 	bl	8006f68 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3324      	adds	r3, #36	; 0x24
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb83 	bl	8005b78 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005472:	6978      	ldr	r0, [r7, #20]
 8005474:	f7ff feff 	bl	8005276 <prvUnlockQueue>
    }
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005480:	b580      	push	{r7, lr}
 8005482:	b08c      	sub	sp, #48	; 0x30
 8005484:	af04      	add	r7, sp, #16
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f001 fe59 	bl	800714c <pvPortMalloc>
 800549a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00e      	beq.n	80054c0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054a2:	2058      	movs	r0, #88	; 0x58
 80054a4:	f001 fe52 	bl	800714c <pvPortMalloc>
 80054a8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
 80054b6:	e005      	b.n	80054c4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f001 ff27 	bl	800730c <vPortFree>
 80054be:	e001      	b.n	80054c4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d013      	beq.n	80054f2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	2300      	movs	r3, #0
 80054ce:	9303      	str	r3, [sp, #12]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	9302      	str	r3, [sp, #8]
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f80e 	bl	8005502 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80054e6:	69f8      	ldr	r0, [r7, #28]
 80054e8:	f000 f8a2 	bl	8005630 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80054ec:	2301      	movs	r3, #1
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	e002      	b.n	80054f8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80054f8:	69bb      	ldr	r3, [r7, #24]
    }
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b088      	sub	sp, #32
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	461a      	mov	r2, r3
 800551a:	21a5      	movs	r1, #165	; 0xa5
 800551c:	f008 fb98 	bl	800dc50 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800552a:	3b01      	subs	r3, #1
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <prvInitialiseNewTask+0x58>
        __asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	617b      	str	r3, [r7, #20]
    }
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01f      	beq.n	80055a0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e012      	b.n	800558c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	7819      	ldrb	r1, [r3, #0]
 800556e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	3334      	adds	r3, #52	; 0x34
 8005576:	460a      	mov	r2, r1
 8005578:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3301      	adds	r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d9e9      	bls.n	8005566 <prvInitialiseNewTask+0x64>
 8005592:	e000      	b.n	8005596 <prvInitialiseNewTask+0x94>
            {
                break;
 8005594:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800559e:	e003      	b.n	80055a8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d901      	bls.n	80055b2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055ae:	2304      	movs	r3, #4
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055bc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	2200      	movs	r2, #0
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	3304      	adds	r3, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff f92e 	bl	800482a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	3318      	adds	r3, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff f929 	bl	800482a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055dc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	f1c3 0205 	rsb	r2, r3, #5
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	3350      	adds	r3, #80	; 0x50
 80055f2:	2204      	movs	r2, #4
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f008 fb2a 	bl	800dc50 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	3354      	adds	r3, #84	; 0x54
 8005600:	2201      	movs	r2, #1
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f008 fb23 	bl	800dc50 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68f9      	ldr	r1, [r7, #12]
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f001 fb48 	bl	8006ca4 <pxPortInitialiseStack>
 8005614:	4602      	mov	r2, r0
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005624:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005626:	bf00      	nop
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005638:	f001 fc66 	bl	8006f08 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800563c:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <prvAddNewTaskToReadyList+0xc0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <prvAddNewTaskToReadyList+0xc0>)
 8005644:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800564e:	4a29      	ldr	r2, [pc, #164]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005654:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <prvAddNewTaskToReadyList+0xc0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d110      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800565c:	f000 fbba 	bl	8005dd4 <prvInitialiseTaskLists>
 8005660:	e00d      	b.n	800567e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005662:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	429a      	cmp	r2, r3
 8005676:	d802      	bhi.n	800567e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800567e:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <prvAddNewTaskToReadyList+0xcc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <prvAddNewTaskToReadyList+0xcc>)
 8005686:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005688:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <prvAddNewTaskToReadyList+0xcc>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	2201      	movs	r2, #1
 8005696:	409a      	lsls	r2, r3
 8005698:	4b19      	ldr	r3, [pc, #100]	; (8005700 <prvAddNewTaskToReadyList+0xd0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	4a18      	ldr	r2, [pc, #96]	; (8005700 <prvAddNewTaskToReadyList+0xd0>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <prvAddNewTaskToReadyList+0xd4>)
 80056b0:	441a      	add	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f7ff f8c3 	bl	8004844 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80056be:	f001 fc53 	bl	8006f68 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80056c2:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d207      	bcs.n	80056e8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <prvAddNewTaskToReadyList+0xd8>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000d38 	.word	0x20000d38
 80056f4:	20000c60 	.word	0x20000c60
 80056f8:	20000d44 	.word	0x20000d44
 80056fc:	20000d54 	.word	0x20000d54
 8005700:	20000d40 	.word	0x20000d40
 8005704:	20000c64 	.word	0x20000c64
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005712:	4b20      	ldr	r3, [pc, #128]	; (8005794 <vTaskStartScheduler+0x88>)
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	2300      	movs	r3, #0
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	2300      	movs	r3, #0
 800571c:	2282      	movs	r2, #130	; 0x82
 800571e:	491e      	ldr	r1, [pc, #120]	; (8005798 <vTaskStartScheduler+0x8c>)
 8005720:	481e      	ldr	r0, [pc, #120]	; (800579c <vTaskStartScheduler+0x90>)
 8005722:	f7ff fead 	bl	8005480 <xTaskCreate>
 8005726:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d102      	bne.n	8005734 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800572e:	f000 ff4b 	bl	80065c8 <xTimerCreateTimerTask>
 8005732:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d116      	bne.n	8005768 <vTaskStartScheduler+0x5c>
        __asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	60bb      	str	r3, [r7, #8]
    }
 800574c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <vTaskStartScheduler+0x94>)
 8005750:	f04f 32ff 	mov.w	r2, #4294967295
 8005754:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <vTaskStartScheduler+0x98>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800575c:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <vTaskStartScheduler+0x9c>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005762:	f001 fb2f 	bl	8006dc4 <xPortStartScheduler>
 8005766:	e00e      	b.n	8005786 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d10a      	bne.n	8005786 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	607b      	str	r3, [r7, #4]
    }
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <vTaskStartScheduler+0xa0>)
 8005788:	681b      	ldr	r3, [r3, #0]
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000d5c 	.word	0x20000d5c
 8005798:	08013940 	.word	0x08013940
 800579c:	08005da5 	.word	0x08005da5
 80057a0:	20000d58 	.word	0x20000d58
 80057a4:	20000d44 	.word	0x20000d44
 80057a8:	20000d3c 	.word	0x20000d3c
 80057ac:	20000038 	.word	0x20000038

080057b0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <vTaskSuspendAll+0x18>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a03      	ldr	r2, [pc, #12]	; (80057c8 <vTaskSuspendAll+0x18>)
 80057bc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80057be:	bf00      	nop
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	20000d60 	.word	0x20000d60

080057cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80057da:	4b41      	ldr	r3, [pc, #260]	; (80058e0 <xTaskResumeAll+0x114>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <xTaskResumeAll+0x2c>
        __asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	603b      	str	r3, [r7, #0]
    }
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80057f8:	f001 fb86 	bl	8006f08 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80057fc:	4b38      	ldr	r3, [pc, #224]	; (80058e0 <xTaskResumeAll+0x114>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3b01      	subs	r3, #1
 8005802:	4a37      	ldr	r2, [pc, #220]	; (80058e0 <xTaskResumeAll+0x114>)
 8005804:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005806:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <xTaskResumeAll+0x114>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d161      	bne.n	80058d2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800580e:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <xTaskResumeAll+0x118>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d05d      	beq.n	80058d2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005816:	e02e      	b.n	8005876 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <xTaskResumeAll+0x11c>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3318      	adds	r3, #24
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff f86a 	bl	80048fe <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff f865 	bl	80048fe <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	2201      	movs	r2, #1
 800583a:	409a      	lsls	r2, r3
 800583c:	4b2b      	ldr	r3, [pc, #172]	; (80058ec <xTaskResumeAll+0x120>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4313      	orrs	r3, r2
 8005842:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <xTaskResumeAll+0x120>)
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <xTaskResumeAll+0x124>)
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fe fff1 	bl	8004844 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005866:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <xTaskResumeAll+0x128>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	429a      	cmp	r2, r3
 800586e:	d302      	bcc.n	8005876 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <xTaskResumeAll+0x12c>)
 8005872:	2201      	movs	r2, #1
 8005874:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005876:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <xTaskResumeAll+0x11c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1cc      	bne.n	8005818 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005884:	f000 fb24 	bl	8005ed0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005888:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <xTaskResumeAll+0x130>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d010      	beq.n	80058b6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005894:	f000 f846 	bl	8005924 <xTaskIncrementTick>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <xTaskResumeAll+0x12c>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f1      	bne.n	8005894 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80058b0:	4b12      	ldr	r3, [pc, #72]	; (80058fc <xTaskResumeAll+0x130>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <xTaskResumeAll+0x12c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80058be:	2301      	movs	r3, #1
 80058c0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <xTaskResumeAll+0x134>)
 80058c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80058d2:	f001 fb49 	bl	8006f68 <vPortExitCritical>

    return xAlreadyYielded;
 80058d6:	68bb      	ldr	r3, [r7, #8]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000d60 	.word	0x20000d60
 80058e4:	20000d38 	.word	0x20000d38
 80058e8:	20000cf8 	.word	0x20000cf8
 80058ec:	20000d40 	.word	0x20000d40
 80058f0:	20000c64 	.word	0x20000c64
 80058f4:	20000c60 	.word	0x20000c60
 80058f8:	20000d4c 	.word	0x20000d4c
 80058fc:	20000d48 	.word	0x20000d48
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <xTaskGetTickCount+0x1c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005910:	687b      	ldr	r3, [r7, #4]
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000d3c 	.word	0x20000d3c

08005924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592e:	4b47      	ldr	r3, [pc, #284]	; (8005a4c <xTaskIncrementTick+0x128>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d17f      	bne.n	8005a36 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005936:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <xTaskIncrementTick+0x12c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800593e:	4a44      	ldr	r2, [pc, #272]	; (8005a50 <xTaskIncrementTick+0x12c>)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d120      	bne.n	800598c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800594a:	4b42      	ldr	r3, [pc, #264]	; (8005a54 <xTaskIncrementTick+0x130>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <xTaskIncrementTick+0x46>
        __asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	603b      	str	r3, [r7, #0]
    }
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xTaskIncrementTick+0x44>
 800596a:	4b3a      	ldr	r3, [pc, #232]	; (8005a54 <xTaskIncrementTick+0x130>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	4b39      	ldr	r3, [pc, #228]	; (8005a58 <xTaskIncrementTick+0x134>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a37      	ldr	r2, [pc, #220]	; (8005a54 <xTaskIncrementTick+0x130>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	4a37      	ldr	r2, [pc, #220]	; (8005a58 <xTaskIncrementTick+0x134>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b37      	ldr	r3, [pc, #220]	; (8005a5c <xTaskIncrementTick+0x138>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a35      	ldr	r2, [pc, #212]	; (8005a5c <xTaskIncrementTick+0x138>)
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	f000 faa2 	bl	8005ed0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800598c:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <xTaskIncrementTick+0x13c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	429a      	cmp	r2, r3
 8005994:	d348      	bcc.n	8005a28 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005996:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <xTaskIncrementTick+0x130>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a0:	4b2f      	ldr	r3, [pc, #188]	; (8005a60 <xTaskIncrementTick+0x13c>)
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	601a      	str	r2, [r3, #0]
                    break;
 80059a8:	e03e      	b.n	8005a28 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059aa:	4b2a      	ldr	r3, [pc, #168]	; (8005a54 <xTaskIncrementTick+0x130>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d203      	bcs.n	80059ca <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80059c2:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <xTaskIncrementTick+0x13c>)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059c8:	e02e      	b.n	8005a28 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe ff95 	bl	80048fe <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3318      	adds	r3, #24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe ff8c 	bl	80048fe <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	2201      	movs	r2, #1
 80059ec:	409a      	lsls	r2, r3
 80059ee:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <xTaskIncrementTick+0x140>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <xTaskIncrementTick+0x140>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <xTaskIncrementTick+0x144>)
 8005a06:	441a      	add	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7fe ff18 	bl	8004844 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <xTaskIncrementTick+0x148>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d3b9      	bcc.n	8005996 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a26:	e7b6      	b.n	8005996 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005a28:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <xTaskIncrementTick+0x14c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e004      	b.n	8005a40 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005a36:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <xTaskIncrementTick+0x150>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a0d      	ldr	r2, [pc, #52]	; (8005a74 <xTaskIncrementTick+0x150>)
 8005a3e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005a40:	697b      	ldr	r3, [r7, #20]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000d60 	.word	0x20000d60
 8005a50:	20000d3c 	.word	0x20000d3c
 8005a54:	20000cf0 	.word	0x20000cf0
 8005a58:	20000cf4 	.word	0x20000cf4
 8005a5c:	20000d50 	.word	0x20000d50
 8005a60:	20000d58 	.word	0x20000d58
 8005a64:	20000d40 	.word	0x20000d40
 8005a68:	20000c64 	.word	0x20000c64
 8005a6c:	20000c60 	.word	0x20000c60
 8005a70:	20000d4c 	.word	0x20000d4c
 8005a74:	20000d48 	.word	0x20000d48

08005a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a7e:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <vTaskSwitchContext+0xa4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005a86:	4b26      	ldr	r3, [pc, #152]	; (8005b20 <vTaskSwitchContext+0xa8>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005a8c:	e03f      	b.n	8005b0e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005a8e:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <vTaskSwitchContext+0xa8>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a94:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <vTaskSwitchContext+0xac>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	fab3 f383 	clz	r3, r3
 8005aa0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
 8005aa4:	f1c3 031f 	rsb	r3, r3, #31
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	491f      	ldr	r1, [pc, #124]	; (8005b28 <vTaskSwitchContext+0xb0>)
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	607b      	str	r3, [r7, #4]
    }
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <vTaskSwitchContext+0x5a>
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4a12      	ldr	r2, [pc, #72]	; (8005b28 <vTaskSwitchContext+0xb0>)
 8005ae0:	4413      	add	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3308      	adds	r3, #8
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d104      	bne.n	8005b04 <vTaskSwitchContext+0x8c>
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4a08      	ldr	r2, [pc, #32]	; (8005b2c <vTaskSwitchContext+0xb4>)
 8005b0c:	6013      	str	r3, [r2, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000d60 	.word	0x20000d60
 8005b20:	20000d4c 	.word	0x20000d4c
 8005b24:	20000d40 	.word	0x20000d40
 8005b28:	20000c64 	.word	0x20000c64
 8005b2c:	20000c60 	.word	0x20000c60

08005b30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
    }
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b56:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <vTaskPlaceOnEventList+0x44>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3318      	adds	r3, #24
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fe fe94 	bl	800488c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b64:	2101      	movs	r1, #1
 8005b66:	6838      	ldr	r0, [r7, #0]
 8005b68:	f000 fcc8 	bl	80064fc <prvAddCurrentTaskToDelayedList>
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000c60 	.word	0x20000c60

08005b78 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	617b      	str	r3, [r7, #20]
    }
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7fe fe4b 	bl	8004844 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	68b8      	ldr	r0, [r7, #8]
 8005bbe:	f000 fc9d 	bl	80064fc <prvAddCurrentTaskToDelayedList>
    }
 8005bc2:	bf00      	nop
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000c60 	.word	0x20000c60

08005bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60fb      	str	r3, [r7, #12]
    }
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe fe7c 	bl	80048fe <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <xTaskRemoveFromEventList+0xac>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d11c      	bne.n	8005c48 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe fe73 	bl	80048fe <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <xTaskRemoveFromEventList+0xb0>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <xTaskRemoveFromEventList+0xb0>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <xTaskRemoveFromEventList+0xb4>)
 8005c38:	441a      	add	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fe fdff 	bl	8004844 <vListInsertEnd>
 8005c46:	e005      	b.n	8005c54 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480e      	ldr	r0, [pc, #56]	; (8005c88 <xTaskRemoveFromEventList+0xb8>)
 8005c50:	f7fe fdf8 	bl	8004844 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <xTaskRemoveFromEventList+0xbc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d905      	bls.n	8005c6e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <xTaskRemoveFromEventList+0xc0>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e001      	b.n	8005c72 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000d60 	.word	0x20000d60
 8005c80:	20000d40 	.word	0x20000d40
 8005c84:	20000c64 	.word	0x20000c64
 8005c88:	20000cf8 	.word	0x20000cf8
 8005c8c:	20000c60 	.word	0x20000c60
 8005c90:	20000d4c 	.word	0x20000d4c

08005c94 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <vTaskInternalSetTimeOutState+0x24>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <vTaskInternalSetTimeOutState+0x28>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	20000d50 	.word	0x20000d50
 8005cbc:	20000d3c 	.word	0x20000d3c

08005cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	613b      	str	r3, [r7, #16]
    }
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60fb      	str	r3, [r7, #12]
    }
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005d02:	f001 f901 	bl	8006f08 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005d06:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <xTaskCheckForTimeOut+0xc4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d102      	bne.n	8005d26 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e026      	b.n	8005d74 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <xTaskCheckForTimeOut+0xc8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d00a      	beq.n	8005d48 <xTaskCheckForTimeOut+0x88>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d305      	bcc.n	8005d48 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e015      	b.n	8005d74 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d20b      	bcs.n	8005d6a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff ff98 	bl	8005c94 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e004      	b.n	8005d74 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005d70:	2301      	movs	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005d74:	f001 f8f8 	bl	8006f68 <vPortExitCritical>

    return xReturn;
 8005d78:	69fb      	ldr	r3, [r7, #28]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000d3c 	.word	0x20000d3c
 8005d88:	20000d50 	.word	0x20000d50

08005d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <vTaskMissedYield+0x14>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	20000d4c 	.word	0x20000d4c

08005da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005dac:	f000 f852 	bl	8005e54 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005db0:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <prvIdleTask+0x28>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d9f9      	bls.n	8005dac <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <prvIdleTask+0x2c>)
 8005dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005dc8:	e7f0      	b.n	8005dac <prvIdleTask+0x8>
 8005dca:	bf00      	nop
 8005dcc:	20000c64 	.word	0x20000c64
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	e00c      	b.n	8005dfa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <prvInitialiseTaskLists+0x60>)
 8005dec:	4413      	add	r3, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe fcfb 	bl	80047ea <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3301      	adds	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d9ef      	bls.n	8005de0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005e00:	480d      	ldr	r0, [pc, #52]	; (8005e38 <prvInitialiseTaskLists+0x64>)
 8005e02:	f7fe fcf2 	bl	80047ea <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005e06:	480d      	ldr	r0, [pc, #52]	; (8005e3c <prvInitialiseTaskLists+0x68>)
 8005e08:	f7fe fcef 	bl	80047ea <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005e0c:	480c      	ldr	r0, [pc, #48]	; (8005e40 <prvInitialiseTaskLists+0x6c>)
 8005e0e:	f7fe fcec 	bl	80047ea <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005e12:	480c      	ldr	r0, [pc, #48]	; (8005e44 <prvInitialiseTaskLists+0x70>)
 8005e14:	f7fe fce9 	bl	80047ea <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005e18:	480b      	ldr	r0, [pc, #44]	; (8005e48 <prvInitialiseTaskLists+0x74>)
 8005e1a:	f7fe fce6 	bl	80047ea <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <prvInitialiseTaskLists+0x78>)
 8005e20:	4a05      	ldr	r2, [pc, #20]	; (8005e38 <prvInitialiseTaskLists+0x64>)
 8005e22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvInitialiseTaskLists+0x7c>)
 8005e26:	4a05      	ldr	r2, [pc, #20]	; (8005e3c <prvInitialiseTaskLists+0x68>)
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000c64 	.word	0x20000c64
 8005e38:	20000cc8 	.word	0x20000cc8
 8005e3c:	20000cdc 	.word	0x20000cdc
 8005e40:	20000cf8 	.word	0x20000cf8
 8005e44:	20000d0c 	.word	0x20000d0c
 8005e48:	20000d24 	.word	0x20000d24
 8005e4c:	20000cf0 	.word	0x20000cf0
 8005e50:	20000cf4 	.word	0x20000cf4

08005e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5a:	e019      	b.n	8005e90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005e5c:	f001 f854 	bl	8006f08 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <prvCheckTasksWaitingTermination+0x50>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe fd46 	bl	80048fe <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005e72:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <prvCheckTasksWaitingTermination+0x54>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <prvCheckTasksWaitingTermination+0x54>)
 8005e7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005e86:	f001 f86f 	bl	8006f68 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f810 	bl	8005eb0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <prvCheckTasksWaitingTermination+0x58>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e1      	bne.n	8005e5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000d0c 	.word	0x20000d0c
 8005ea8:	20000d38 	.word	0x20000d38
 8005eac:	20000d20 	.word	0x20000d20

08005eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 fa25 	bl	800730c <vPortFree>
                vPortFree( pxTCB );
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 fa22 	bl	800730c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <prvResetNextTaskUnblockTime+0x30>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <prvResetNextTaskUnblockTime+0x34>)
 8005ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005ee6:	e005      	b.n	8005ef4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <prvResetNextTaskUnblockTime+0x30>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <prvResetNextTaskUnblockTime+0x34>)
 8005ef2:	6013      	str	r3, [r2, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000cf0 	.word	0x20000cf0
 8005f04:	20000d58 	.word	0x20000d58

08005f08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005f0e:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <xTaskGetSchedulerState+0x34>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005f16:	2301      	movs	r3, #1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	e008      	b.n	8005f2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <xTaskGetSchedulerState+0x38>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005f24:	2302      	movs	r3, #2
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	e001      	b.n	8005f2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005f2e:	687b      	ldr	r3, [r7, #4]
    }
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20000d44 	.word	0x20000d44
 8005f40:	20000d60 	.word	0x20000d60

08005f44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d063      	beq.n	8006022 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005f5a:	4b34      	ldr	r3, [pc, #208]	; (800602c <xTaskPriorityDisinherit+0xe8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d00a      	beq.n	8005f7a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	60fb      	str	r3, [r7, #12]
    }
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60bb      	str	r3, [r7, #8]
    }
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9c:	1e5a      	subs	r2, r3, #1
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d039      	beq.n	8006022 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d135      	bne.n	8006022 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fc9f 	bl	80048fe <uxListRemove>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	43da      	mvns	r2, r3
 8005fd2:	4b17      	ldr	r3, [pc, #92]	; (8006030 <xTaskPriorityDisinherit+0xec>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	4a15      	ldr	r2, [pc, #84]	; (8006030 <xTaskPriorityDisinherit+0xec>)
 8005fda:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f1c3 0205 	rsb	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <xTaskPriorityDisinherit+0xec>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <xTaskPriorityDisinherit+0xec>)
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <xTaskPriorityDisinherit+0xf0>)
 8006010:	441a      	add	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fe fc13 	bl	8004844 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006022:	697b      	ldr	r3, [r7, #20]
    }
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000c60 	.word	0x20000c60
 8006030:	20000d40 	.word	0x20000d40
 8006034:	20000c64 	.word	0x20000c64

08006038 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	613b      	str	r3, [r7, #16]
    }
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006062:	f000 ff51 	bl	8006f08 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006066:	4b32      	ldr	r3, [pc, #200]	; (8006130 <xTaskGenericNotifyWait+0xf8>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	3354      	adds	r3, #84	; 0x54
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d022      	beq.n	80060be <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006078:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <xTaskGenericNotifyWait+0xf8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	3214      	adds	r2, #20
 8006080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	43d2      	mvns	r2, r2
 8006088:	4011      	ands	r1, r2
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	3214      	adds	r2, #20
 800608e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006092:	4b27      	ldr	r3, [pc, #156]	; (8006130 <xTaskGenericNotifyWait+0xf8>)
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	3354      	adds	r3, #84	; 0x54
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060a6:	2101      	movs	r1, #1
 80060a8:	6a38      	ldr	r0, [r7, #32]
 80060aa:	f000 fa27 	bl	80064fc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80060ae:	4b21      	ldr	r3, [pc, #132]	; (8006134 <xTaskGenericNotifyWait+0xfc>)
 80060b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80060be:	f000 ff53 	bl	8006f68 <vPortExitCritical>

        taskENTER_CRITICAL();
 80060c2:	f000 ff21 	bl	8006f08 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d007      	beq.n	80060dc <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80060cc:	4b18      	ldr	r3, [pc, #96]	; (8006130 <xTaskGenericNotifyWait+0xf8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	3214      	adds	r2, #20
 80060d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80060dc:	4b14      	ldr	r3, [pc, #80]	; (8006130 <xTaskGenericNotifyWait+0xf8>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	3354      	adds	r3, #84	; 0x54
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d002      	beq.n	80060f4 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e00e      	b.n	8006112 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80060f4:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <xTaskGenericNotifyWait+0xf8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	3214      	adds	r2, #20
 80060fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	43d2      	mvns	r2, r2
 8006104:	4011      	ands	r1, r2
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	3214      	adds	r2, #20
 800610a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800610e:	2301      	movs	r3, #1
 8006110:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <xTaskGenericNotifyWait+0xf8>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	3354      	adds	r3, #84	; 0x54
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006120:	f000 ff22 	bl	8006f68 <vPortExitCritical>

        return xReturn;
 8006124:	697b      	ldr	r3, [r7, #20]
    }
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000c60 	.word	0x20000c60
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006138:	b580      	push	{r7, lr}
 800613a:	b08c      	sub	sp, #48	; 0x30
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006146:	2301      	movs	r3, #1
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
    }
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xTaskGenericNotify+0x4a>
        __asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61fb      	str	r3, [r7, #28]
    }
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006186:	f000 febf 	bl	8006f08 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	3214      	adds	r2, #20
 8006196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800619e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4413      	add	r3, r2
 80061a4:	3354      	adds	r3, #84	; 0x54
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80061ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	3354      	adds	r3, #84	; 0x54
 80061b4:	2202      	movs	r2, #2
 80061b6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d83b      	bhi.n	8006236 <xTaskGenericNotify+0xfe>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <xTaskGenericNotify+0x8c>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006255 	.word	0x08006255
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	0800620d 	.word	0x0800620d
 80061d4:	0800621b 	.word	0x0800621b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	3214      	adds	r2, #20
 80061de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	ea42 0103 	orr.w	r1, r2, r3
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	3214      	adds	r2, #20
 80061ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061f2:	e032      	b.n	800625a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	3214      	adds	r2, #20
 80061fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	3214      	adds	r2, #20
 8006206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800620a:	e026      	b.n	800625a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	3214      	adds	r2, #20
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006218:	e01f      	b.n	800625a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800621a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800621e:	2b02      	cmp	r3, #2
 8006220:	d006      	beq.n	8006230 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	3214      	adds	r2, #20
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800622e:	e014      	b.n	800625a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006234:	e011      	b.n	800625a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006236:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <xTaskGenericNotify+0x1ac>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <xTaskGenericNotify+0x120>
        __asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	61bb      	str	r3, [r7, #24]
    }
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xTaskGenericNotify+0x11a>
                    break;
 8006254:	bf00      	nop
 8006256:	e000      	b.n	800625a <xTaskGenericNotify+0x122>

                    break;
 8006258:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800625a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800625e:	2b01      	cmp	r3, #1
 8006260:	d139      	bne.n	80062d6 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fb49 	bl	80048fe <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	2201      	movs	r2, #1
 8006272:	409a      	lsls	r2, r3
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <xTaskGenericNotify+0x1b0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4313      	orrs	r3, r2
 800627a:	4a1b      	ldr	r2, [pc, #108]	; (80062e8 <xTaskGenericNotify+0x1b0>)
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4a18      	ldr	r2, [pc, #96]	; (80062ec <xTaskGenericNotify+0x1b4>)
 800628c:	441a      	add	r2, r3
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	3304      	adds	r3, #4
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7fe fad5 	bl	8004844 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <xTaskGenericNotify+0x180>
        __asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	617b      	str	r3, [r7, #20]
    }
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <xTaskGenericNotify+0x1b8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d907      	bls.n	80062d6 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <xTaskGenericNotify+0x1bc>)
 80062c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80062d6:	f000 fe47 	bl	8006f68 <vPortExitCritical>

        return xReturn;
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80062dc:	4618      	mov	r0, r3
 80062de:	3730      	adds	r7, #48	; 0x30
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000d3c 	.word	0x20000d3c
 80062e8:	20000d40 	.word	0x20000d40
 80062ec:	20000c64 	.word	0x20000c64
 80062f0:	20000c60 	.word	0x20000c60
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b090      	sub	sp, #64	; 0x40
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006306:	2301      	movs	r3, #1
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006342:	f000 fec3 	bl	80070cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800634a:	f3ef 8211 	mrs	r2, BASEPRI
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	627a      	str	r2, [r7, #36]	; 0x24
 8006360:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006368:	2b00      	cmp	r3, #0
 800636a:	d006      	beq.n	800637a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	3214      	adds	r2, #20
 8006372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006378:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800637a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4413      	add	r3, r2
 8006380:	3354      	adds	r3, #84	; 0x54
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	3354      	adds	r3, #84	; 0x54
 8006390:	2202      	movs	r2, #2
 8006392:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	2b04      	cmp	r3, #4
 8006398:	d83b      	bhi.n	8006412 <xTaskGenericNotifyFromISR+0x11a>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <xTaskGenericNotifyFromISR+0xa8>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	08006431 	.word	0x08006431
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063e9 	.word	0x080063e9
 80063b0:	080063f7 	.word	0x080063f7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	3214      	adds	r2, #20
 80063ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	ea42 0103 	orr.w	r1, r2, r3
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	3214      	adds	r2, #20
 80063ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063ce:	e032      	b.n	8006436 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	3214      	adds	r2, #20
 80063d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063da:	1c59      	adds	r1, r3, #1
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	3214      	adds	r2, #20
 80063e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063e6:	e026      	b.n	8006436 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	3214      	adds	r2, #20
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063f4:	e01f      	b.n	8006436 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80063f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d006      	beq.n	800640c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	3214      	adds	r2, #20
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800640a:	e014      	b.n	8006436 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800640c:	2300      	movs	r3, #0
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006410:	e011      	b.n	8006436 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006412:	4b33      	ldr	r3, [pc, #204]	; (80064e0 <xTaskGenericNotifyFromISR+0x1e8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00c      	beq.n	8006434 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	61fb      	str	r3, [r7, #28]
    }
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006434:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006436:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800643a:	2b01      	cmp	r3, #1
 800643c:	d145      	bne.n	80064ca <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	61bb      	str	r3, [r7, #24]
    }
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800645c:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <xTaskGenericNotifyFromISR+0x1ec>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d11c      	bne.n	800649e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	3304      	adds	r3, #4
 8006468:	4618      	mov	r0, r3
 800646a:	f7fe fa48 	bl	80048fe <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	2201      	movs	r2, #1
 8006474:	409a      	lsls	r2, r3
 8006476:	4b1c      	ldr	r3, [pc, #112]	; (80064e8 <xTaskGenericNotifyFromISR+0x1f0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4313      	orrs	r3, r2
 800647c:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <xTaskGenericNotifyFromISR+0x1f0>)
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <xTaskGenericNotifyFromISR+0x1f4>)
 800648e:	441a      	add	r2, r3
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f7fe f9d4 	bl	8004844 <vListInsertEnd>
 800649c:	e005      	b.n	80064aa <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	3318      	adds	r3, #24
 80064a2:	4619      	mov	r1, r3
 80064a4:	4812      	ldr	r0, [pc, #72]	; (80064f0 <xTaskGenericNotifyFromISR+0x1f8>)
 80064a6:	f7fe f9cd 	bl	8004844 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <xTaskGenericNotifyFromISR+0x1fc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d908      	bls.n	80064ca <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80064b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80064be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c0:	2201      	movs	r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <xTaskGenericNotifyFromISR+0x200>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	617b      	str	r3, [r7, #20]
        __asm volatile
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f383 8811 	msr	BASEPRI, r3
    }
 80064d4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80064d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80064d8:	4618      	mov	r0, r3
 80064da:	3740      	adds	r7, #64	; 0x40
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20000d3c 	.word	0x20000d3c
 80064e4:	20000d60 	.word	0x20000d60
 80064e8:	20000d40 	.word	0x20000d40
 80064ec:	20000c64 	.word	0x20000c64
 80064f0:	20000cf8 	.word	0x20000cf8
 80064f4:	20000c60 	.word	0x20000c60
 80064f8:	20000d4c 	.word	0x20000d4c

080064fc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006506:	4b29      	ldr	r3, [pc, #164]	; (80065ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800650c:	4b28      	ldr	r3, [pc, #160]	; (80065b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3304      	adds	r3, #4
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe f9f3 	bl	80048fe <uxListRemove>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800651e:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	2201      	movs	r2, #1
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43da      	mvns	r2, r3
 800652c:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4013      	ands	r3, r2
 8006532:	4a20      	ldr	r2, [pc, #128]	; (80065b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006534:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d10a      	bne.n	8006554 <prvAddCurrentTaskToDelayedList+0x58>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006544:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	481a      	ldr	r0, [pc, #104]	; (80065b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800654e:	f7fe f979 	bl	8004844 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006552:	e026      	b.n	80065a2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4413      	add	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	429a      	cmp	r2, r3
 800656a:	d209      	bcs.n	8006580 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800656c:	4b13      	ldr	r3, [pc, #76]	; (80065bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3304      	adds	r3, #4
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f7fe f987 	bl	800488c <vListInsert>
}
 800657e:	e010      	b.n	80065a2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3304      	adds	r3, #4
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f7fe f97d 	bl	800488c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006592:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	429a      	cmp	r2, r3
 800659a:	d202      	bcs.n	80065a2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800659c:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6013      	str	r3, [r2, #0]
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000d3c 	.word	0x20000d3c
 80065b0:	20000c60 	.word	0x20000c60
 80065b4:	20000d40 	.word	0x20000d40
 80065b8:	20000d24 	.word	0x20000d24
 80065bc:	20000cf4 	.word	0x20000cf4
 80065c0:	20000cf0 	.word	0x20000cf0
 80065c4:	20000d58 	.word	0x20000d58

080065c8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80065d2:	f000 fb31 	bl	8006c38 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <xTimerCreateTimerTask+0x54>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <xTimerCreateTimerTask+0x58>)
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	2302      	movs	r3, #2
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	2300      	movs	r3, #0
 80065e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065ec:	490d      	ldr	r1, [pc, #52]	; (8006624 <xTimerCreateTimerTask+0x5c>)
 80065ee:	480e      	ldr	r0, [pc, #56]	; (8006628 <xTimerCreateTimerTask+0x60>)
 80065f0:	f7fe ff46 	bl	8005480 <xTaskCreate>
 80065f4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	603b      	str	r3, [r7, #0]
    }
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006612:	687b      	ldr	r3, [r7, #4]
    }
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000d94 	.word	0x20000d94
 8006620:	20000d98 	.word	0x20000d98
 8006624:	08013948 	.word	0x08013948
 8006628:	08006819 	.word	0x08006819

0800662c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800663a:	202c      	movs	r0, #44	; 0x2c
 800663c:	f000 fd86 	bl	800714c <pvPortMalloc>
 8006640:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f805 	bl	800666e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006664:	697b      	ldr	r3, [r7, #20]
        }
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
 800667a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	617b      	str	r3, [r7, #20]
    }
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01e      	beq.n	80066dc <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800669e:	f000 facb 	bl	8006c38 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	6a3a      	ldr	r2, [r7, #32]
 80066b8:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	3304      	adds	r3, #4
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe f8b3 	bl	800482a <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d0:	f043 0304 	orr.w	r3, r3, #4
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80066dc:	bf00      	nop
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xTimerGenericCommand+0x2e>
        __asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
    }
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006712:	4b1a      	ldr	r3, [pc, #104]	; (800677c <xTimerGenericCommand+0x98>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02a      	beq.n	8006770 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b05      	cmp	r3, #5
 800672a:	dc18      	bgt.n	800675e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800672c:	f7ff fbec 	bl	8005f08 <xTaskGetSchedulerState>
 8006730:	4603      	mov	r3, r0
 8006732:	2b02      	cmp	r3, #2
 8006734:	d109      	bne.n	800674a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <xTimerGenericCommand+0x98>)
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	f107 0114 	add.w	r1, r7, #20
 800673e:	2300      	movs	r3, #0
 8006740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006742:	f7fe f9f1 	bl	8004b28 <xQueueGenericSend>
 8006746:	6278      	str	r0, [r7, #36]	; 0x24
 8006748:	e012      	b.n	8006770 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <xTimerGenericCommand+0x98>)
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	f107 0114 	add.w	r1, r7, #20
 8006752:	2300      	movs	r3, #0
 8006754:	2200      	movs	r2, #0
 8006756:	f7fe f9e7 	bl	8004b28 <xQueueGenericSend>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24
 800675c:	e008      	b.n	8006770 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <xTimerGenericCommand+0x98>)
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f107 0114 	add.w	r1, r7, #20
 8006766:	2300      	movs	r3, #0
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	f7fe fadb 	bl	8004d24 <xQueueGenericSendFromISR>
 800676e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006772:	4618      	mov	r0, r3
 8006774:	3728      	adds	r7, #40	; 0x28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000d94 	.word	0x20000d94

08006780 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678a:	4b22      	ldr	r3, [pc, #136]	; (8006814 <prvProcessExpiredTimer+0x94>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3304      	adds	r3, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe f8b0 	bl	80048fe <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d022      	beq.n	80067f2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	18d1      	adds	r1, r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	6978      	ldr	r0, [r7, #20]
 80067ba:	f000 f8d1 	bl	8006960 <prvInsertTimerInActiveList>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01f      	beq.n	8006804 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067c4:	2300      	movs	r3, #0
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2300      	movs	r3, #0
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	2100      	movs	r1, #0
 80067ce:	6978      	ldr	r0, [r7, #20]
 80067d0:	f7ff ff88 	bl	80066e4 <xTimerGenericCommand>
 80067d4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d113      	bne.n	8006804 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	60fb      	str	r3, [r7, #12]
    }
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	6978      	ldr	r0, [r7, #20]
 800680a:	4798      	blx	r3
    }
 800680c:	bf00      	nop
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000d8c 	.word	0x20000d8c

08006818 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006820:	f107 0308 	add.w	r3, r7, #8
 8006824:	4618      	mov	r0, r3
 8006826:	f000 f857 	bl	80068d8 <prvGetNextExpireTime>
 800682a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4619      	mov	r1, r3
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f803 	bl	800683c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006836:	f000 f8d5 	bl	80069e4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800683a:	e7f1      	b.n	8006820 <prvTimerTask+0x8>

0800683c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006846:	f7fe ffb3 	bl	80057b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800684a:	f107 0308 	add.w	r3, r7, #8
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f866 	bl	8006920 <prvSampleTimeNow>
 8006854:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d130      	bne.n	80068be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <prvProcessTimerOrBlockTask+0x3c>
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	429a      	cmp	r2, r3
 8006868:	d806      	bhi.n	8006878 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800686a:	f7fe ffaf 	bl	80057cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff85 	bl	8006780 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006876:	e024      	b.n	80068c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800687e:	4b13      	ldr	r3, [pc, #76]	; (80068cc <prvProcessTimerOrBlockTask+0x90>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <prvProcessTimerOrBlockTask+0x50>
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <prvProcessTimerOrBlockTask+0x52>
 800688c:	2300      	movs	r3, #0
 800688e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006890:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <prvProcessTimerOrBlockTask+0x94>)
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	4619      	mov	r1, r3
 800689e:	f7fe fdbb 	bl	8005418 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80068a2:	f7fe ff93 	bl	80057cc <xTaskResumeAll>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <prvProcessTimerOrBlockTask+0x98>)
 80068ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	f3bf 8f6f 	isb	sy
    }
 80068bc:	e001      	b.n	80068c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80068be:	f7fe ff85 	bl	80057cc <xTaskResumeAll>
    }
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000d90 	.word	0x20000d90
 80068d0:	20000d94 	.word	0x20000d94
 80068d4:	e000ed04 	.word	0xe000ed04

080068d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068e0:	4b0e      	ldr	r3, [pc, #56]	; (800691c <prvGetNextExpireTime+0x44>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <prvGetNextExpireTime+0x16>
 80068ea:	2201      	movs	r2, #1
 80068ec:	e000      	b.n	80068f0 <prvGetNextExpireTime+0x18>
 80068ee:	2200      	movs	r2, #0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d105      	bne.n	8006908 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068fc:	4b07      	ldr	r3, [pc, #28]	; (800691c <prvGetNextExpireTime+0x44>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e001      	b.n	800690c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800690c:	68fb      	ldr	r3, [r7, #12]
    }
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000d8c 	.word	0x20000d8c

08006920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006928:	f7fe ffec 	bl	8005904 <xTaskGetTickCount>
 800692c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <prvSampleTimeNow+0x3c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	429a      	cmp	r2, r3
 8006936:	d205      	bcs.n	8006944 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006938:	f000 f91a 	bl	8006b70 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e002      	b.n	800694a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800694a:	4a04      	ldr	r2, [pc, #16]	; (800695c <prvSampleTimeNow+0x3c>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006950:	68fb      	ldr	r3, [r7, #12]
    }
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000d9c 	.word	0x20000d9c

08006960 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d812      	bhi.n	80069ac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	1ad2      	subs	r2, r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	429a      	cmp	r2, r3
 8006992:	d302      	bcc.n	800699a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e01b      	b.n	80069d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <prvInsertTimerInActiveList+0x7c>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7fd ff71 	bl	800488c <vListInsert>
 80069aa:	e012      	b.n	80069d2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d206      	bcs.n	80069c2 <prvInsertTimerInActiveList+0x62>
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d302      	bcc.n	80069c2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80069bc:	2301      	movs	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e007      	b.n	80069d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <prvInsertTimerInActiveList+0x80>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f7fd ff5d 	bl	800488c <vListInsert>
            }
        }

        return xProcessTimerNow;
 80069d2:	697b      	ldr	r3, [r7, #20]
    }
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000d90 	.word	0x20000d90
 80069e0:	20000d8c 	.word	0x20000d8c

080069e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08c      	sub	sp, #48	; 0x30
 80069e8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069ea:	e0ae      	b.n	8006b4a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f2c0 80aa 	blt.w	8006b48 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fd ff7a 	bl	80048fe <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ff87 	bl	8006920 <prvSampleTimeNow>
 8006a12:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	f200 8097 	bhi.w	8006b4a <prvProcessReceivedCommands+0x166>
 8006a1c:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <prvProcessReceivedCommands+0x40>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a4d 	.word	0x08006a4d
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a4d 	.word	0x08006a4d
 8006a30:	08006ac1 	.word	0x08006ac1
 8006a34:	08006ad5 	.word	0x08006ad5
 8006a38:	08006b1f 	.word	0x08006b1f
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a4d 	.word	0x08006a4d
 8006a44:	08006ac1 	.word	0x08006ac1
 8006a48:	08006ad5 	.word	0x08006ad5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	18d1      	adds	r1, r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a3a      	ldr	r2, [r7, #32]
 8006a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a6c:	f7ff ff78 	bl	8006960 <prvInsertTimerInActiveList>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d069      	beq.n	8006b4a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a7c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d05e      	beq.n	8006b4a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	441a      	add	r2, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a9e:	f7ff fe21 	bl	80066e4 <xTimerGenericCommand>
 8006aa2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d14f      	bne.n	8006b4a <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	61bb      	str	r3, [r7, #24]
    }
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006ad2:	e03a      	b.n	8006b4a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	617b      	str	r3, [r7, #20]
    }
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	18d1      	adds	r1, r2, r3
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	6a3a      	ldr	r2, [r7, #32]
 8006b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b18:	f7ff ff22 	bl	8006960 <prvInsertTimerInActiveList>
                        break;
 8006b1c:	e015      	b.n	8006b4a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b2e:	f000 fbed 	bl	800730c <vPortFree>
 8006b32:	e00a      	b.n	8006b4a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b3a:	f023 0301 	bic.w	r3, r3, #1
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006b46:	e000      	b.n	8006b4a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006b48:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b4a:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <prvProcessReceivedCommands+0x188>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f107 0108 	add.w	r1, r7, #8
 8006b52:	2200      	movs	r2, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe f98f 	bl	8004e78 <xQueueReceive>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f47f af45 	bne.w	80069ec <prvProcessReceivedCommands+0x8>
        }
    }
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	3728      	adds	r7, #40	; 0x28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000d94 	.word	0x20000d94

08006b70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b76:	e048      	b.n	8006c0a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b78:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <prvSwitchTimerLists+0xc0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b82:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <prvSwitchTimerLists+0xc0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd feb4 	bl	80048fe <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d02e      	beq.n	8006c0a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d90e      	bls.n	8006bdc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bca:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <prvSwitchTimerLists+0xc0>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7fd fe59 	bl	800488c <vListInsert>
 8006bda:	e016      	b.n	8006c0a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	2300      	movs	r3, #0
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	2100      	movs	r1, #0
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fd7c 	bl	80066e4 <xTimerGenericCommand>
 8006bec:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	603b      	str	r3, [r7, #0]
    }
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <prvSwitchTimerLists+0xc0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1b1      	bne.n	8006b78 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <prvSwitchTimerLists+0xc0>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <prvSwitchTimerLists+0xc4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <prvSwitchTimerLists+0xc0>)
 8006c20:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006c22:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <prvSwitchTimerLists+0xc4>)
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	6013      	str	r3, [r2, #0]
    }
 8006c28:	bf00      	nop
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000d8c 	.word	0x20000d8c
 8006c34:	20000d90 	.word	0x20000d90

08006c38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006c3c:	f000 f964 	bl	8006f08 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006c40:	4b12      	ldr	r3, [pc, #72]	; (8006c8c <prvCheckForValidListAndQueue+0x54>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11d      	bne.n	8006c84 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006c48:	4811      	ldr	r0, [pc, #68]	; (8006c90 <prvCheckForValidListAndQueue+0x58>)
 8006c4a:	f7fd fdce 	bl	80047ea <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006c4e:	4811      	ldr	r0, [pc, #68]	; (8006c94 <prvCheckForValidListAndQueue+0x5c>)
 8006c50:	f7fd fdcb 	bl	80047ea <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <prvCheckForValidListAndQueue+0x60>)
 8006c56:	4a0e      	ldr	r2, [pc, #56]	; (8006c90 <prvCheckForValidListAndQueue+0x58>)
 8006c58:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006c5a:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <prvCheckForValidListAndQueue+0x64>)
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	; (8006c94 <prvCheckForValidListAndQueue+0x5c>)
 8006c5e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006c60:	2200      	movs	r2, #0
 8006c62:	210c      	movs	r1, #12
 8006c64:	200a      	movs	r0, #10
 8006c66:	f7fd fedd 	bl	8004a24 <xQueueGenericCreate>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4a07      	ldr	r2, [pc, #28]	; (8006c8c <prvCheckForValidListAndQueue+0x54>)
 8006c6e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <prvCheckForValidListAndQueue+0x54>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <prvCheckForValidListAndQueue+0x54>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4908      	ldr	r1, [pc, #32]	; (8006ca0 <prvCheckForValidListAndQueue+0x68>)
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fba0 	bl	80053c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c84:	f000 f970 	bl	8006f68 <vPortExitCritical>
    }
 8006c88:	bf00      	nop
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000d94 	.word	0x20000d94
 8006c90:	20000d64 	.word	0x20000d64
 8006c94:	20000d78 	.word	0x20000d78
 8006c98:	20000d8c 	.word	0x20000d8c
 8006c9c:	20000d90 	.word	0x20000d90
 8006ca0:	08013950 	.word	0x08013950

08006ca4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3b04      	subs	r3, #4
 8006cb4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3b04      	subs	r3, #4
 8006cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3b04      	subs	r3, #4
 8006cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006cd4:	4a0c      	ldr	r2, [pc, #48]	; (8006d08 <pxPortInitialiseStack+0x64>)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3b14      	subs	r3, #20
 8006cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f06f 0202 	mvn.w	r2, #2
 8006cf2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3b20      	subs	r3, #32
 8006cf8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	08006d0d 	.word	0x08006d0d

08006d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006d16:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <prvTaskExitError+0x54>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d00a      	beq.n	8006d36 <prvTaskExitError+0x2a>
        __asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
    }
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <prvTaskExitError+0x28>
        __asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60bb      	str	r3, [r7, #8]
    }
 8006d48:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006d4a:	bf00      	nop
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0fc      	beq.n	8006d4c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	2000003c 	.word	0x2000003c
	...

08006d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006d70:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <pxCurrentTCBConst2>)
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f380 8809 	msr	PSP, r0
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	4770      	bx	lr
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst2>:
 8006d90:	20000c60 	.word	0x20000c60
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006d98:	4808      	ldr	r0, [pc, #32]	; (8006dbc <prvPortStartFirstTask+0x24>)
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f380 8808 	msr	MSP, r0
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8814 	msr	CONTROL, r0
 8006daa:	b662      	cpsie	i
 8006dac:	b661      	cpsie	f
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	df00      	svc	0
 8006db8:	bf00      	nop
 8006dba:	0000      	.short	0x0000
 8006dbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop

08006dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dca:	4b46      	ldr	r3, [pc, #280]	; (8006ee4 <xPortStartScheduler+0x120>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a46      	ldr	r2, [pc, #280]	; (8006ee8 <xPortStartScheduler+0x124>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d10a      	bne.n	8006dea <xPortStartScheduler+0x26>
        __asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	613b      	str	r3, [r7, #16]
    }
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006dea:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <xPortStartScheduler+0x120>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3f      	ldr	r2, [pc, #252]	; (8006eec <xPortStartScheduler+0x128>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d10a      	bne.n	8006e0a <xPortStartScheduler+0x46>
        __asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	60fb      	str	r3, [r7, #12]
    }
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <xPortStartScheduler+0x12c>)
 8006e0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	22ff      	movs	r2, #255	; 0xff
 8006e1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <xPortStartScheduler+0x130>)
 8006e30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e32:	4b31      	ldr	r3, [pc, #196]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e34:	2207      	movs	r2, #7
 8006e36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e38:	e009      	b.n	8006e4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006e3a:	4b2f      	ldr	r3, [pc, #188]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4a2d      	ldr	r2, [pc, #180]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e56:	2b80      	cmp	r3, #128	; 0x80
 8006e58:	d0ef      	beq.n	8006e3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e5a:	4b27      	ldr	r3, [pc, #156]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1c3 0307 	rsb	r3, r3, #7
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d00a      	beq.n	8006e7c <xPortStartScheduler+0xb8>
        __asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
    }
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e86:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ef8 <xPortStartScheduler+0x134>)
 8006e90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006e9a:	4b18      	ldr	r3, [pc, #96]	; (8006efc <xPortStartScheduler+0x138>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a17      	ldr	r2, [pc, #92]	; (8006efc <xPortStartScheduler+0x138>)
 8006ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ea4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006ea6:	4b15      	ldr	r3, [pc, #84]	; (8006efc <xPortStartScheduler+0x138>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a14      	ldr	r2, [pc, #80]	; (8006efc <xPortStartScheduler+0x138>)
 8006eac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006eb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006eb2:	f000 f8db 	bl	800706c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <xPortStartScheduler+0x13c>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006ebc:	f000 f8fa 	bl	80070b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ec0:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <xPortStartScheduler+0x140>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0f      	ldr	r2, [pc, #60]	; (8006f04 <xPortStartScheduler+0x140>)
 8006ec6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006eca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006ecc:	f7ff ff64 	bl	8006d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006ed0:	f7fe fdd2 	bl	8005a78 <vTaskSwitchContext>
    prvTaskExitError();
 8006ed4:	f7ff ff1a 	bl	8006d0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	e000ed00 	.word	0xe000ed00
 8006ee8:	410fc271 	.word	0x410fc271
 8006eec:	410fc270 	.word	0x410fc270
 8006ef0:	e000e400 	.word	0xe000e400
 8006ef4:	20000da0 	.word	0x20000da0
 8006ef8:	20000da4 	.word	0x20000da4
 8006efc:	e000ed20 	.word	0xe000ed20
 8006f00:	2000003c 	.word	0x2000003c
 8006f04:	e000ef34 	.word	0xe000ef34

08006f08 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
        __asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
    }
 8006f20:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006f22:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <vPortEnterCritical+0x58>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3301      	adds	r3, #1
 8006f28:	4a0d      	ldr	r2, [pc, #52]	; (8006f60 <vPortEnterCritical+0x58>)
 8006f2a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <vPortEnterCritical+0x58>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d10f      	bne.n	8006f54 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f34:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <vPortEnterCritical+0x5c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <vPortEnterCritical+0x4c>
        __asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	603b      	str	r3, [r7, #0]
    }
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <vPortEnterCritical+0x4a>
    }
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	2000003c 	.word	0x2000003c
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006f6e:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <vPortExitCritical+0x50>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <vPortExitCritical+0x24>
        __asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	607b      	str	r3, [r7, #4]
    }
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	; (8006fb8 <vPortExitCritical+0x50>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <vPortExitCritical+0x50>)
 8006f94:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006f96:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <vPortExitCritical+0x50>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <vPortExitCritical+0x42>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f383 8811 	msr	BASEPRI, r3
    }
 8006fa8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	2000003c 	.word	0x2000003c
 8006fbc:	00000000 	.word	0x00000000

08006fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006fc0:	f3ef 8009 	mrs	r0, PSP
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	4b15      	ldr	r3, [pc, #84]	; (8007020 <pxCurrentTCBConst>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f01e 0f10 	tst.w	lr, #16
 8006fd0:	bf08      	it	eq
 8006fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	6010      	str	r0, [r2, #0]
 8006fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fe4:	f380 8811 	msr	BASEPRI, r0
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f7fe fd42 	bl	8005a78 <vTaskSwitchContext>
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f380 8811 	msr	BASEPRI, r0
 8006ffc:	bc09      	pop	{r0, r3}
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007006:	f01e 0f10 	tst.w	lr, #16
 800700a:	bf08      	it	eq
 800700c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007010:	f380 8809 	msr	PSP, r0
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst>:
 8007020:	20000c60 	.word	0x20000c60
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
        __asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	607b      	str	r3, [r7, #4]
    }
 8007040:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007042:	f7fe fc6f 	bl	8005924 <xTaskIncrementTick>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <SysTick_Handler+0x40>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f383 8811 	msr	BASEPRI, r3
    }
 800705e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007070:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <vPortSetupTimerInterrupt+0x38>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <vPortSetupTimerInterrupt+0x3c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <vPortSetupTimerInterrupt+0x40>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <vPortSetupTimerInterrupt+0x44>)
 800708a:	3b01      	subs	r3, #1
 800708c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800708e:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000e010 	.word	0xe000e010
 80070a4:	e000e018 	.word	0xe000e018
 80070a8:	20000000 	.word	0x20000000
 80070ac:	10624dd3 	.word	0x10624dd3
 80070b0:	e000e014 	.word	0xe000e014

080070b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80070b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070c4 <vPortEnableVFP+0x10>
 80070b8:	6801      	ldr	r1, [r0, #0]
 80070ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070be:	6001      	str	r1, [r0, #0]
 80070c0:	4770      	bx	lr
 80070c2:	0000      	.short	0x0000
 80070c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop

080070cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80070d2:	f3ef 8305 	mrs	r3, IPSR
 80070d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b0f      	cmp	r3, #15
 80070dc:	d914      	bls.n	8007108 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070de:	4a17      	ldr	r2, [pc, #92]	; (800713c <vPortValidateInterruptPriority+0x70>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070e8:	4b15      	ldr	r3, [pc, #84]	; (8007140 <vPortValidateInterruptPriority+0x74>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	7afa      	ldrb	r2, [r7, #11]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d20a      	bcs.n	8007108 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	607b      	str	r3, [r7, #4]
    }
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <vPortValidateInterruptPriority+0x78>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <vPortValidateInterruptPriority+0x7c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d90a      	bls.n	800712e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	603b      	str	r3, [r7, #0]
    }
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <vPortValidateInterruptPriority+0x60>
    }
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000e3f0 	.word	0xe000e3f0
 8007140:	20000da0 	.word	0x20000da0
 8007144:	e000ed0c 	.word	0xe000ed0c
 8007148:	20000da4 	.word	0x20000da4

0800714c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	; 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007158:	f7fe fb2a 	bl	80057b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800715c:	4b65      	ldr	r3, [pc, #404]	; (80072f4 <pvPortMalloc+0x1a8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007164:	f000 f934 	bl	80073d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007168:	4b63      	ldr	r3, [pc, #396]	; (80072f8 <pvPortMalloc+0x1ac>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 80a7 	bne.w	80072c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d02d      	beq.n	80071d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800717c:	2208      	movs	r2, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d227      	bcs.n	80071d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007188:	2208      	movs	r2, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d021      	beq.n	80071de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	3308      	adds	r3, #8
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d214      	bcs.n	80071d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	3308      	adds	r3, #8
 80071b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <pvPortMalloc+0x92>
        __asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	617b      	str	r3, [r7, #20]
    }
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071d6:	e002      	b.n	80071de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	607b      	str	r3, [r7, #4]
 80071dc:	e000      	b.n	80071e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d06e      	beq.n	80072c4 <pvPortMalloc+0x178>
 80071e6:	4b45      	ldr	r3, [pc, #276]	; (80072fc <pvPortMalloc+0x1b0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d869      	bhi.n	80072c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80071f0:	4b43      	ldr	r3, [pc, #268]	; (8007300 <pvPortMalloc+0x1b4>)
 80071f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80071f4:	4b42      	ldr	r3, [pc, #264]	; (8007300 <pvPortMalloc+0x1b4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071fa:	e004      	b.n	8007206 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d903      	bls.n	8007218 <pvPortMalloc+0xcc>
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1f1      	bne.n	80071fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007218:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <pvPortMalloc+0x1a8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721e:	429a      	cmp	r2, r3
 8007220:	d050      	beq.n	80072c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2208      	movs	r2, #8
 8007228:	4413      	add	r3, r2
 800722a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	2308      	movs	r3, #8
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	429a      	cmp	r2, r3
 8007242:	d91f      	bls.n	8007284 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4413      	add	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <pvPortMalloc+0x120>
        __asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	613b      	str	r3, [r7, #16]
    }
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	1ad2      	subs	r2, r2, r3
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800727e:	69b8      	ldr	r0, [r7, #24]
 8007280:	f000 f908 	bl	8007494 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007284:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <pvPortMalloc+0x1b0>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <pvPortMalloc+0x1b0>)
 8007290:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007292:	4b1a      	ldr	r3, [pc, #104]	; (80072fc <pvPortMalloc+0x1b0>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b1b      	ldr	r3, [pc, #108]	; (8007304 <pvPortMalloc+0x1b8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d203      	bcs.n	80072a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800729e:	4b17      	ldr	r3, [pc, #92]	; (80072fc <pvPortMalloc+0x1b0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a18      	ldr	r2, [pc, #96]	; (8007304 <pvPortMalloc+0x1b8>)
 80072a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <pvPortMalloc+0x1ac>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <pvPortMalloc+0x1bc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3301      	adds	r3, #1
 80072c0:	4a11      	ldr	r2, [pc, #68]	; (8007308 <pvPortMalloc+0x1bc>)
 80072c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80072c4:	f7fe fa82 	bl	80057cc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <pvPortMalloc+0x19c>
        __asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
    }
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80072e8:	69fb      	ldr	r3, [r7, #28]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3728      	adds	r7, #40	; 0x28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200139b0 	.word	0x200139b0
 80072f8:	200139c4 	.word	0x200139c4
 80072fc:	200139b4 	.word	0x200139b4
 8007300:	200139a8 	.word	0x200139a8
 8007304:	200139b8 	.word	0x200139b8
 8007308:	200139bc 	.word	0x200139bc

0800730c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d04d      	beq.n	80073ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800731e:	2308      	movs	r3, #8
 8007320:	425b      	negs	r3, r3
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4413      	add	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <vPortFree+0xb8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4013      	ands	r3, r2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <vPortFree+0x44>
        __asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	60fb      	str	r3, [r7, #12]
    }
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <vPortFree+0x62>
        __asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60bb      	str	r3, [r7, #8]
    }
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <vPortFree+0xb8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01e      	beq.n	80073ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11a      	bne.n	80073ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <vPortFree+0xb8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007394:	f7fe fa0c 	bl	80057b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <vPortFree+0xbc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <vPortFree+0xbc>)
 80073a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073a6:	6938      	ldr	r0, [r7, #16]
 80073a8:	f000 f874 	bl	8007494 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <vPortFree+0xc0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	4a06      	ldr	r2, [pc, #24]	; (80073cc <vPortFree+0xc0>)
 80073b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80073b6:	f7fe fa09 	bl	80057cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80073ba:	bf00      	nop
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	200139c4 	.word	0x200139c4
 80073c8:	200139b4 	.word	0x200139b4
 80073cc:	200139c0 	.word	0x200139c0

080073d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80073da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80073dc:	4b27      	ldr	r3, [pc, #156]	; (800747c <prvHeapInit+0xac>)
 80073de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3307      	adds	r3, #7
 80073ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0307 	bic.w	r3, r3, #7
 80073f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	4a1f      	ldr	r2, [pc, #124]	; (800747c <prvHeapInit+0xac>)
 8007400:	4413      	add	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007408:	4a1d      	ldr	r2, [pc, #116]	; (8007480 <prvHeapInit+0xb0>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800740e:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <prvHeapInit+0xb0>)
 8007410:	2200      	movs	r2, #0
 8007412:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800741c:	2208      	movs	r2, #8
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a15      	ldr	r2, [pc, #84]	; (8007484 <prvHeapInit+0xb4>)
 8007430:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007432:	4b14      	ldr	r3, [pc, #80]	; (8007484 <prvHeapInit+0xb4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2200      	movs	r2, #0
 8007438:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800743a:	4b12      	ldr	r3, [pc, #72]	; (8007484 <prvHeapInit+0xb4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <prvHeapInit+0xb4>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4a0a      	ldr	r2, [pc, #40]	; (8007488 <prvHeapInit+0xb8>)
 800745e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	4a09      	ldr	r2, [pc, #36]	; (800748c <prvHeapInit+0xbc>)
 8007466:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007468:	4b09      	ldr	r3, [pc, #36]	; (8007490 <prvHeapInit+0xc0>)
 800746a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800746e:	601a      	str	r2, [r3, #0]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000da8 	.word	0x20000da8
 8007480:	200139a8 	.word	0x200139a8
 8007484:	200139b0 	.word	0x200139b0
 8007488:	200139b8 	.word	0x200139b8
 800748c:	200139b4 	.word	0x200139b4
 8007490:	200139c4 	.word	0x200139c4

08007494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800749c:	4b28      	ldr	r3, [pc, #160]	; (8007540 <prvInsertBlockIntoFreeList+0xac>)
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e002      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x14>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d8f7      	bhi.n	80074a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d108      	bne.n	80074d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	441a      	add	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d118      	bne.n	800751c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b15      	ldr	r3, [pc, #84]	; (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d00d      	beq.n	8007512 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e008      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e003      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d002      	beq.n	8007532 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	200139a8 	.word	0x200139a8
 8007544:	200139b0 	.word	0x200139b0

08007548 <findShorterWay>:
int findShorterWay(char terminalGrid[7][7],
				   char Gridcopy[7][7],
				   float matrixCosts[7][7][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[20][2]){
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800754e:	af00      	add	r7, sp, #0
 8007550:	f507 7404 	add.w	r4, r7, #528	; 0x210
 8007554:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 8007558:	6020      	str	r0, [r4, #0]
 800755a:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800755e:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 8007562:	6001      	str	r1, [r0, #0]
 8007564:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007568:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800756c:	600a      	str	r2, [r1, #0]
 800756e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007572:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8007576:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8007578:	49c8      	ldr	r1, [pc, #800]	; (800789c <findShorterWay+0x354>)
 800757a:	48c9      	ldr	r0, [pc, #804]	; (80078a0 <findShorterWay+0x358>)
 800757c:	f005 ffda 	bl	800d534 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 8007580:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	605a      	str	r2, [r3, #4]
 800758a:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 800758c:	2300      	movs	r3, #0
 800758e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t i = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	uint8_t j = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	int position[2];
	uint8_t numberOfPositions = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
	uint8_t counter = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	uint8_t counterStudy = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[30][4] = {0};
 80075b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075b4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80075b8:	4618      	mov	r0, r3
 80075ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80075be:	461a      	mov	r2, r3
 80075c0:	2100      	movs	r1, #0
 80075c2:	f006 fb45 	bl	800dc50 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 80075c6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	f001 fa9c 	bl	8008b0c <getRows>
 80075d4:	4603      	mov	r3, r0
 80075d6:	461a      	mov	r2, r3
 80075d8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075dc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 80075e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f001 fab1 	bl	8008b54 <getColums>
 80075f2:	4603      	mov	r3, r0
 80075f4:	461a      	mov	r2, r3
 80075f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075fa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 8007602:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007606:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800760a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800760e:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 8007612:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007616:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	6809      	ldr	r1, [r1, #0]
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	f001 fa21 	bl	8008a66 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8007624:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007628:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800762c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007630:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007634:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007638:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6812      	ldr	r2, [r2, #0]
 8007640:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007644:	6800      	ldr	r0, [r0, #0]
 8007646:	f000 ff89 	bl	800855c <setHeuristic>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <findShorterWay+0x12e>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8007650:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8007652:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007656:	f5a3 7104 	sub.w	r1, r3, #528	; 0x210
 800765a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800765e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007662:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8007666:	6809      	ldr	r1, [r1, #0]
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	f001 f990 	bl	800898e <findStart>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01e      	beq.n	80076b2 <findShorterWay+0x16a>
 8007674:	e002      	b.n	800767c <findShorterWay+0x134>
    	return 0;
 8007676:	2300      	movs	r3, #0
 8007678:	f000 beb6 	b.w	80083e8 <findShorterWay+0xea0>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 800767c:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 800767e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007684:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007688:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 800768a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800768e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007690:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007694:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8007696:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800769a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800769c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076a0:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 80076a2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076a8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076ac:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 80076ae:	f000 bdc1 	b.w	8008234 <findShorterWay+0xcec>
    	return 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	f000 be98 	b.w	80083e8 <findShorterWay+0xea0>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 80076b8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076c2:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 80076c4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076c8:	695a      	ldr	r2, [r3, #20]
 80076ca:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076ce:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 80076d0:	2300      	movs	r3, #0
 80076d2:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80076d6:	e09a      	b.n	800780e <findShorterWay+0x2c6>
    		for (j = 0; j < 3; j++){
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80076de:	e08c      	b.n	80077fa <findShorterWay+0x2b2>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80076e0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80076ea:	4413      	add	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd07      	ble.n	8007700 <findShorterWay+0x1b8>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 80076f0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80076fa:	4413      	add	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dc0e      	bgt.n	800771e <findShorterWay+0x1d6>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 8007700:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007704:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8007708:	4613      	mov	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4413      	add	r3, r2
 800770e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007712:	443b      	add	r3, r7
 8007714:	440b      	add	r3, r1
 8007716:	3b18      	subs	r3, #24
 8007718:	2230      	movs	r2, #48	; 0x30
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e068      	b.n	80077f0 <findShorterWay+0x2a8>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 800771e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007728:	4413      	add	r3, r2
 800772a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800772e:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	7a12      	ldrb	r2, [r2, #8]
 8007736:	4293      	cmp	r3, r2
 8007738:	dc0d      	bgt.n	8007756 <findShorterWay+0x20e>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 800773a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007744:	4413      	add	r3, r2
 8007746:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800774a:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	7a52      	ldrb	r2, [r2, #9]
 8007752:	4293      	cmp	r3, r2
 8007754:	dd0e      	ble.n	8007774 <findShorterWay+0x22c>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 8007756:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800775a:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007768:	443b      	add	r3, r7
 800776a:	440b      	add	r3, r1
 800776c:	3b18      	subs	r3, #24
 800776e:	2230      	movs	r2, #48	; 0x30
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e03d      	b.n	80077f0 <findShorterWay+0x2a8>
    			}else if(i == 1 && j == 1){
 8007774:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007778:	2b01      	cmp	r3, #1
 800777a:	d112      	bne.n	80077a2 <findShorterWay+0x25a>
 800777c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007780:	2b01      	cmp	r3, #1
 8007782:	d10e      	bne.n	80077a2 <findShorterWay+0x25a>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8007784:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007788:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007796:	443b      	add	r3, r7
 8007798:	440b      	add	r3, r1
 800779a:	3b18      	subs	r3, #24
 800779c:	2250      	movs	r2, #80	; 0x50
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e026      	b.n	80077f0 <findShorterWay+0x2a8>
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 80077a2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80077ac:	4413      	add	r3, r2
 80077ae:	461a      	mov	r2, r3
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	3b07      	subs	r3, #7
 80077b8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80077bc:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	18d0      	adds	r0, r2, r3
 80077c4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80077ce:	4413      	add	r3, r2
 80077d0:	3b01      	subs	r3, #1
 80077d2:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80077d6:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80077da:	5cc0      	ldrb	r0, [r0, r3]
 80077dc:	4613      	mov	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80077e6:	443b      	add	r3, r7
 80077e8:	440b      	add	r3, r1
 80077ea:	3b18      	subs	r3, #24
 80077ec:	4602      	mov	r2, r0
 80077ee:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 80077f0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80077f4:	3301      	adds	r3, #1
 80077f6:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80077fa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80077fe:	2b02      	cmp	r3, #2
 8007800:	f67f af6e 	bls.w	80076e0 <findShorterWay+0x198>
    	for(i = 0; i < 3; i++){
 8007804:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007808:	3301      	adds	r3, #1
 800780a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800780e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007812:	2b02      	cmp	r3, #2
 8007814:	f67f af60 	bls.w	80076d8 <findShorterWay+0x190>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 8007818:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 800781c:	461a      	mov	r2, r3
 800781e:	4921      	ldr	r1, [pc, #132]	; (80078a4 <findShorterWay+0x35c>)
 8007820:	4821      	ldr	r0, [pc, #132]	; (80078a8 <findShorterWay+0x360>)
 8007822:	f006 ff77 	bl	800e714 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 8007826:	4920      	ldr	r1, [pc, #128]	; (80078a8 <findShorterWay+0x360>)
 8007828:	481d      	ldr	r0, [pc, #116]	; (80078a0 <findShorterWay+0x358>)
 800782a:	f005 fe83 	bl	800d534 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 800782e:	2300      	movs	r3, #0
 8007830:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007834:	e026      	b.n	8007884 <findShorterWay+0x33c>
			for (j = 0; j < 3; j++){
 8007836:	2300      	movs	r3, #0
 8007838:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800783c:	e015      	b.n	800786a <findShorterWay+0x322>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 800783e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007842:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8007846:	4613      	mov	r3, r2
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007850:	443b      	add	r3, r7
 8007852:	440b      	add	r3, r1
 8007854:	3b18      	subs	r3, #24
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	4811      	ldr	r0, [pc, #68]	; (80078a0 <findShorterWay+0x358>)
 800785c:	f005 fe52 	bl	800d504 <writeChar>
			for (j = 0; j < 3; j++){
 8007860:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007864:	3301      	adds	r3, #1
 8007866:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800786a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800786e:	2b02      	cmp	r3, #2
 8007870:	d9e5      	bls.n	800783e <findShorterWay+0x2f6>
			}
			writeChar(&handlerAstarUsart, '\r');
 8007872:	210d      	movs	r1, #13
 8007874:	480a      	ldr	r0, [pc, #40]	; (80078a0 <findShorterWay+0x358>)
 8007876:	f005 fe45 	bl	800d504 <writeChar>
    	for(i = 0; i < 3; i++){
 800787a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800787e:	3301      	adds	r3, #1
 8007880:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007884:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007888:	2b02      	cmp	r3, #2
 800788a:	d9d4      	bls.n	8007836 <findShorterWay+0x2ee>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 800788c:	210d      	movs	r1, #13
 800788e:	4804      	ldr	r0, [pc, #16]	; (80078a0 <findShorterWay+0x358>)
 8007890:	f005 fe38 	bl	800d504 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 800789a:	e01b      	b.n	80078d4 <findShorterWay+0x38c>
 800789c:	08013958 	.word	0x08013958
 80078a0:	200139c8 	.word	0x200139c8
 80078a4:	0801398c 	.word	0x0801398c
 80078a8:	20013a74 	.word	0x20013a74
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 80078ac:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 80078b0:	4613      	mov	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80078ba:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	4413      	add	r3, r2
 80078c2:	4619      	mov	r1, r3
 80078c4:	48b2      	ldr	r0, [pc, #712]	; (8007b90 <findShorterWay+0x648>)
 80078c6:	f005 fe35 	bl	800d534 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80078ca:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 80078ce:	3301      	adds	r3, #1
 80078d0:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 80078d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80078d8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	7a1b      	ldrb	r3, [r3, #8]
 80078e0:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d3e1      	bcc.n	80078ac <findShorterWay+0x364>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 80078e8:	210d      	movs	r1, #13
 80078ea:	48a9      	ldr	r0, [pc, #676]	; (8007b90 <findShorterWay+0x648>)
 80078ec:	f005 fe0a 	bl	800d504 <writeChar>


    	for(i = 0; i < 3; i++){
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80078f6:	e275      	b.n	8007de4 <findShorterWay+0x89c>
			for (j = 0; j < 3; j++){
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80078fe:	e261      	b.n	8007dc4 <findShorterWay+0x87c>
				switch (nineSlotsMatriz[i][j]) {
 8007900:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007904:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007912:	443b      	add	r3, r7
 8007914:	440b      	add	r3, r1
 8007916:	3b18      	subs	r3, #24
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b73      	cmp	r3, #115	; 0x73
 800791c:	d074      	beq.n	8007a08 <findShorterWay+0x4c0>
 800791e:	2b73      	cmp	r3, #115	; 0x73
 8007920:	f300 8245 	bgt.w	8007dae <findShorterWay+0x866>
 8007924:	2b50      	cmp	r3, #80	; 0x50
 8007926:	dc65      	bgt.n	80079f4 <findShorterWay+0x4ac>
 8007928:	2b23      	cmp	r3, #35	; 0x23
 800792a:	f2c0 8240 	blt.w	8007dae <findShorterWay+0x866>
 800792e:	3b23      	subs	r3, #35	; 0x23
 8007930:	2b2d      	cmp	r3, #45	; 0x2d
 8007932:	f200 823c 	bhi.w	8007dae <findShorterWay+0x866>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <findShorterWay+0x3f4>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	080079fd 	.word	0x080079fd
 8007940:	08007daf 	.word	0x08007daf
 8007944:	08007daf 	.word	0x08007daf
 8007948:	08007daf 	.word	0x08007daf
 800794c:	08007daf 	.word	0x08007daf
 8007950:	08007daf 	.word	0x08007daf
 8007954:	08007daf 	.word	0x08007daf
 8007958:	08007b95 	.word	0x08007b95
 800795c:	08007daf 	.word	0x08007daf
 8007960:	08007daf 	.word	0x08007daf
 8007964:	08007daf 	.word	0x08007daf
 8007968:	08007daf 	.word	0x08007daf
 800796c:	08007daf 	.word	0x08007daf
 8007970:	08007a05 	.word	0x08007a05
 8007974:	08007daf 	.word	0x08007daf
 8007978:	08007daf 	.word	0x08007daf
 800797c:	08007daf 	.word	0x08007daf
 8007980:	08007daf 	.word	0x08007daf
 8007984:	08007daf 	.word	0x08007daf
 8007988:	08007daf 	.word	0x08007daf
 800798c:	08007daf 	.word	0x08007daf
 8007990:	08007daf 	.word	0x08007daf
 8007994:	08007daf 	.word	0x08007daf
 8007998:	08007daf 	.word	0x08007daf
 800799c:	08007daf 	.word	0x08007daf
 80079a0:	08007daf 	.word	0x08007daf
 80079a4:	08007daf 	.word	0x08007daf
 80079a8:	08007daf 	.word	0x08007daf
 80079ac:	08007daf 	.word	0x08007daf
 80079b0:	08007daf 	.word	0x08007daf
 80079b4:	08007daf 	.word	0x08007daf
 80079b8:	08007daf 	.word	0x08007daf
 80079bc:	08007daf 	.word	0x08007daf
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	08007daf 	.word	0x08007daf
 80079c8:	08007daf 	.word	0x08007daf
 80079cc:	08007daf 	.word	0x08007daf
 80079d0:	08007daf 	.word	0x08007daf
 80079d4:	08007daf 	.word	0x08007daf
 80079d8:	08007daf 	.word	0x08007daf
 80079dc:	08007daf 	.word	0x08007daf
 80079e0:	08007daf 	.word	0x08007daf
 80079e4:	08007daf 	.word	0x08007daf
 80079e8:	08007daf 	.word	0x08007daf
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a0d 	.word	0x08007a0d
 80079f4:	2b65      	cmp	r3, #101	; 0x65
 80079f6:	f000 81c3 	beq.w	8007d80 <findShorterWay+0x838>
 80079fa:	e1d8      	b.n	8007dae <findShorterWay+0x866>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 80079fc:	bf00      	nop
						break;
 80079fe:	e1d8      	b.n	8007db2 <findShorterWay+0x86a>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8007a00:	bf00      	nop
						break;
 8007a02:	e1d6      	b.n	8007db2 <findShorterWay+0x86a>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8007a04:	bf00      	nop
						break;
 8007a06:	e1d4      	b.n	8007db2 <findShorterWay+0x86a>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 8007a08:	bf00      	nop
						break;
 8007a0a:	e1d2      	b.n	8007db2 <findShorterWay+0x86a>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8007a0c:	bf00      	nop
						break;
 8007a0e:	e1d0      	b.n	8007db2 <findShorterWay+0x86a>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8007a10:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007a14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007a18:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007a1c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 8007a20:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007a24:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007a28:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007a2c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007a30:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	f000 ff3b 	bl	80088b6 <setFcost>
 8007a40:	eef0 7a40 	vmov.f32	s15, s0
 8007a44:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a48:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 8007a4c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a50:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a54:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007a5e:	4413      	add	r3, r2
 8007a60:	461a      	mov	r2, r3
 8007a62:	23a8      	movs	r3, #168	; 0xa8
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
 8007a68:	3ba8      	subs	r3, #168	; 0xa8
 8007a6a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007a6e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	18d1      	adds	r1, r2, r3
 8007a76:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007a80:	4413      	add	r3, r2
 8007a82:	1e5a      	subs	r2, r3, #1
 8007a84:	4613      	mov	r3, r2
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	4413      	add	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	440b      	add	r3, r1
 8007a8e:	3304      	adds	r3, #4
 8007a90:	edd3 7a00 	vldr	s15, [r3]
 8007a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9c:	db01      	blt.n	8007aa2 <findShorterWay+0x55a>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8007a9e:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 8007aa0:	e187      	b.n	8007db2 <findShorterWay+0x86a>
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8007aa2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007aa6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007aaa:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007aae:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007ab2:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007abc:	6800      	ldr	r0, [r0, #0]
 8007abe:	f000 fcf3 	bl	80084a8 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 8007ac2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007ac6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007aca:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007ace:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007ad2:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	f000 fd0f 	bl	8008500 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8007ae2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007ae6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007aea:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007af4:	f000 fc84 	bl	8008400 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007af8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007b02:	4413      	add	r3, r2
 8007b04:	461a      	mov	r2, r3
 8007b06:	23a8      	movs	r3, #168	; 0xa8
 8007b08:	fb02 f303 	mul.w	r3, r2, r3
 8007b0c:	3ba8      	subs	r3, #168	; 0xa8
 8007b0e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007b12:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	18d0      	adds	r0, r2, r3
 8007b1a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007b24:	4413      	add	r3, r2
 8007b26:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8007b28:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b2c:	6899      	ldr	r1, [r3, #8]
 8007b2e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007b32:	440b      	add	r3, r1
 8007b34:	4619      	mov	r1, r3
 8007b36:	23a8      	movs	r3, #168	; 0xa8
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	3ba8      	subs	r3, #168	; 0xa8
 8007b3e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007b42:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8007b46:	6809      	ldr	r1, [r1, #0]
 8007b48:	18cc      	adds	r4, r1, r3
 8007b4a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b4e:	68d9      	ldr	r1, [r3, #12]
 8007b50:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007b54:	440b      	add	r3, r1
 8007b56:	1e59      	subs	r1, r3, #1
 8007b58:	460b      	mov	r3, r1
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	440b      	add	r3, r1
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	4423      	add	r3, r4
 8007b62:	3314      	adds	r3, #20
 8007b64:	edd3 7a00 	vldr	s15, [r3]
 8007b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b6c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007b70:	4613      	mov	r3, r2
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	4413      	add	r3, r2
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4403      	add	r3, r0
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8007b7e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007b82:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007b86:	0123      	lsls	r3, r4, #4
 8007b88:	440b      	add	r3, r1
 8007b8a:	601a      	str	r2, [r3, #0]
						break;
 8007b8c:	e111      	b.n	8007db2 <findShorterWay+0x86a>
 8007b8e:	bf00      	nop
 8007b90:	200139c8 	.word	0x200139c8
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8007b94:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007b98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007b9c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007ba0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8007ba4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007ba8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007bac:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007bb0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007bb4:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007bbe:	6800      	ldr	r0, [r0, #0]
 8007bc0:	f000 fc72 	bl	80084a8 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8007bc4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007bc8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007bcc:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007bd0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007bd4:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007bde:	6800      	ldr	r0, [r0, #0]
 8007be0:	f000 fc8e 	bl	8008500 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8007be4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007be8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007bec:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007bf6:	f000 fc03 	bl	8008400 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8007bfa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c04:	4413      	add	r3, r2
 8007c06:	461a      	mov	r2, r3
 8007c08:	4613      	mov	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	3b07      	subs	r3, #7
 8007c10:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007c14:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c20:	68d9      	ldr	r1, [r3, #12]
 8007c22:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c26:	440b      	add	r3, r1
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	214f      	movs	r1, #79	; 0x4f
 8007c2c:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8007c2e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c38:	4413      	add	r3, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	23a8      	movs	r3, #168	; 0xa8
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
 8007c42:	3ba8      	subs	r3, #168	; 0xa8
 8007c44:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007c48:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	18d1      	adds	r1, r2, r3
 8007c50:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c5a:	4413      	add	r3, r2
 8007c5c:	1e5a      	subs	r2, r3, #1
 8007c5e:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8007c62:	4613      	mov	r3, r2
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	4413      	add	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007c74:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007c78:	0103      	lsls	r3, r0, #4
 8007c7a:	440b      	add	r3, r1
 8007c7c:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 8007c7e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c88:	4413      	add	r3, r2
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	23a8      	movs	r3, #168	; 0xa8
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	3ba8      	subs	r3, #168	; 0xa8
 8007c94:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007c98:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	18d1      	adds	r1, r2, r3
 8007ca0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007caa:	4413      	add	r3, r2
 8007cac:	1e5a      	subs	r2, r3, #1
 8007cae:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	4413      	add	r3, r2
 8007cb8:	00db      	lsls	r3, r3, #3
 8007cba:	440b      	add	r3, r1
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007cc4:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007cc8:	0103      	lsls	r3, r0, #4
 8007cca:	440b      	add	r3, r1
 8007ccc:	3304      	adds	r3, #4
 8007cce:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8007cd0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007cda:	4413      	add	r3, r2
 8007cdc:	1e5a      	subs	r2, r3, #1
 8007cde:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007ce2:	ee07 2a90 	vmov	s15, r2
 8007ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cea:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007cee:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8007cfc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d06:	4413      	add	r3, r2
 8007d08:	1e5a      	subs	r2, r3, #1
 8007d0a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007d0e:	ee07 2a90 	vmov	s15, r2
 8007d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d16:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d1a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	4413      	add	r3, r2
 8007d22:	330c      	adds	r3, #12
 8007d24:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8007d28:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d32:	4413      	add	r3, r2
 8007d34:	461a      	mov	r2, r3
 8007d36:	23a8      	movs	r3, #168	; 0xa8
 8007d38:	fb02 f303 	mul.w	r3, r2, r3
 8007d3c:	3ba8      	subs	r3, #168	; 0xa8
 8007d3e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d42:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	18d1      	adds	r1, r2, r3
 8007d4a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d54:	4413      	add	r3, r2
 8007d56:	1e5a      	subs	r2, r3, #1
 8007d58:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007d5c:	ee07 3a90 	vmov	s15, r3
 8007d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d64:	4613      	mov	r3, r2
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	4413      	add	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	440b      	add	r3, r1
 8007d6e:	3314      	adds	r3, #20
 8007d70:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8007d74:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

						break;
 8007d7e:	e018      	b.n	8007db2 <findShorterWay+0x86a>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8007d80:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007d88:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateParent(ptrChanges, position, matrixCosts);
 8007d90:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007d94:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007d98:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007da2:	f000 fb2d 	bl	8008400 <updateParent>
						shorterWayFound = SET;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
						break;
 8007dac:	e001      	b.n	8007db2 <findShorterWay+0x86a>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e31a      	b.n	80083e8 <findShorterWay+0xea0>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8007db2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <findShorterWay+0x888>
			for (j = 0; j < 3; j++){
 8007dba:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007dc4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	f67f ad99 	bls.w	8007900 <findShorterWay+0x3b8>
 8007dce:	e000      	b.n	8007dd2 <findShorterWay+0x88a>
					break;
 8007dd0:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8007dd2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <findShorterWay+0x8a8>
    	for(i = 0; i < 3; i++){
 8007dda:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007dde:	3301      	adds	r3, #1
 8007de0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007de4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	f67f ad85 	bls.w	80078f8 <findShorterWay+0x3b0>
 8007dee:	e000      	b.n	8007df2 <findShorterWay+0x8aa>
				break;
 8007df0:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8007df2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 81be 	bne.w	8008178 <findShorterWay+0xc30>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8007dfc:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8007e00:	f107 0310 	add.w	r3, r7, #16
 8007e04:	4619      	mov	r1, r3
 8007e06:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007e0a:	f000 feb9 	bl	8008b80 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8007e0e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80d7 	beq.w	8007fca <findShorterWay+0xa82>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8007e1c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e26:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8007e28:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e32:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8007e34:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e46:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	441a      	add	r2, r3
 8007e4e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	5cd3      	ldrb	r3, [r2, r3]
 8007e56:	2b73      	cmp	r3, #115	; 0x73
 8007e58:	d101      	bne.n	8007e5e <findShorterWay+0x916>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8007e5a:	bf00      	nop
 8007e5c:	e011      	b.n	8007e82 <findShorterWay+0x93a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8007e5e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	461a      	mov	r2, r3
 8007e66:	4613      	mov	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e70:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	441a      	add	r2, r3
 8007e78:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2144      	movs	r1, #68	; 0x44
 8007e80:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8007e82:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e8c:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	4413      	add	r3, r2
 8007e94:	3308      	adds	r3, #8
 8007e96:	edd3 7a00 	vldr	s15, [r3]
 8007e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e9e:	ee17 2a90 	vmov	r2, s15
 8007ea2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ea6:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8007ea8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007eb2:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	4413      	add	r3, r2
 8007eba:	330c      	adds	r3, #12
 8007ebc:	edd3 7a00 	vldr	s15, [r3]
 8007ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ec4:	ee17 2a90 	vmov	r2, s15
 8007ec8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ecc:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007ed4:	e014      	b.n	8007f00 <findShorterWay+0x9b8>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8007ed6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007eda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007edc:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ee0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007ee4:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007ee8:	0089      	lsls	r1, r1, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8007ef6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007efa:	3301      	adds	r3, #1
 8007efc:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007f00:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d9e6      	bls.n	8007ed6 <findShorterWay+0x98e>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8007f08:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	3301      	adds	r3, #1
 8007f12:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007f16:	e03b      	b.n	8007f90 <findShorterWay+0xa48>
					for (j = 0 ; j < 4 ; j++){
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007f1e:	e02e      	b.n	8007f7e <findShorterWay+0xa36>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8007f20:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8007f24:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8007f28:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007f2c:	1e58      	subs	r0, r3, #1
 8007f2e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007f32:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007f36:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007f3a:	00a4      	lsls	r4, r4, #2
 8007f3c:	4422      	add	r2, r4
 8007f3e:	0092      	lsls	r2, r2, #2
 8007f40:	440a      	add	r2, r1
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007f48:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007f4c:	0080      	lsls	r0, r0, #2
 8007f4e:	4403      	add	r3, r0
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8007f56:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8007f5a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007f5e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f62:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007f66:	0089      	lsls	r1, r1, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8007f74:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007f78:	3301      	adds	r3, #1
 8007f7a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007f7e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d9cc      	bls.n	8007f20 <findShorterWay+0x9d8>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8007f86:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007f90:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007f94:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d3bd      	bcc.n	8007f18 <findShorterWay+0x9d0>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8007f9c:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8007fa6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fb0:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8007fb2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fbc:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8007fbe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007fc8:	e0d0      	b.n	800816c <findShorterWay+0xc24>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8007fca:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fd4:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8007fd6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fe0:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8007fe2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4613      	mov	r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	1a9b      	subs	r3, r3, r2
 8007ff0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007ff4:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007ff8:	6812      	ldr	r2, [r2, #0]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	5cd3      	ldrb	r3, [r2, r3]
 8008004:	2b73      	cmp	r3, #115	; 0x73
 8008006:	d101      	bne.n	800800c <findShorterWay+0xac4>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8008008:	bf00      	nop
 800800a:	e011      	b.n	8008030 <findShorterWay+0xae8>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 800800c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	461a      	mov	r2, r3
 8008014:	4613      	mov	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	1a9b      	subs	r3, r3, r2
 800801a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800801e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	441a      	add	r2, r3
 8008026:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	2144      	movs	r1, #68	; 0x44
 800802e:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8008030:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800803a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	4413      	add	r3, r2
 8008042:	3308      	adds	r3, #8
 8008044:	edd3 7a00 	vldr	s15, [r3]
 8008048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800804c:	ee17 2a90 	vmov	r2, s15
 8008050:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008054:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8008056:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800805a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008060:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	4413      	add	r3, r2
 8008068:	330c      	adds	r3, #12
 800806a:	edd3 7a00 	vldr	s15, [r3]
 800806e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008072:	ee17 2a90 	vmov	r2, s15
 8008076:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800807a:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 800807c:	2300      	movs	r3, #0
 800807e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8008082:	e014      	b.n	80080ae <findShorterWay+0xb66>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 8008084:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800808a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800808e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008092:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008096:	0089      	lsls	r1, r1, #2
 8008098:	440b      	add	r3, r1
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 80080a4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80080a8:	3301      	adds	r3, #1
 80080aa:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80080ae:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d9e6      	bls.n	8008084 <findShorterWay+0xb3c>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 80080b6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	3301      	adds	r3, #1
 80080c0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80080c4:	e03b      	b.n	800813e <findShorterWay+0xbf6>
					for (j = 0 ; j < 4 ; j++){
 80080c6:	2300      	movs	r3, #0
 80080c8:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80080cc:	e02e      	b.n	800812c <findShorterWay+0xbe4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 80080ce:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 80080d2:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80080d6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80080da:	1e58      	subs	r0, r3, #1
 80080dc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80080e0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80080e4:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 80080e8:	00a4      	lsls	r4, r4, #2
 80080ea:	4422      	add	r2, r4
 80080ec:	0092      	lsls	r2, r2, #2
 80080ee:	440a      	add	r2, r1
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80080f6:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 80080fa:	0080      	lsls	r0, r0, #2
 80080fc:	4403      	add	r3, r0
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	440b      	add	r3, r1
 8008102:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8008104:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8008108:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800810c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008110:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008114:	0089      	lsls	r1, r1, #2
 8008116:	440b      	add	r3, r1
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8008122:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008126:	3301      	adds	r3, #1
 8008128:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800812c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008130:	2b03      	cmp	r3, #3
 8008132:	d9cc      	bls.n	80080ce <findShorterWay+0xb86>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8008134:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008138:	3301      	adds	r3, #1
 800813a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800813e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008142:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008146:	429a      	cmp	r2, r3
 8008148:	d3bd      	bcc.n	80080c6 <findShorterWay+0xb7e>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 800814a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800814e:	3b01      	subs	r3, #1
 8008150:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8008154:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800815e:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8008160:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800816a:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 800816c:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8008170:	3301      	adds	r3, #1
 8008172:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
 8008176:	e05d      	b.n	8008234 <findShorterWay+0xcec>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8008178:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			j = ptrChanges->endPos[1];
 8008182:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008188:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			while(Gridcopy[i][j] != 's'){
 800818c:	e042      	b.n	8008214 <findShorterWay+0xccc>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 800818e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008192:	22a8      	movs	r2, #168	; 0xa8
 8008194:	fb02 f303 	mul.w	r3, r2, r3
 8008198:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800819c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	18d1      	adds	r1, r2, r3
 80081a4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80081a8:	4613      	mov	r3, r2
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	4413      	add	r3, r2
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	440b      	add	r3, r1
 80081b2:	330c      	adds	r3, #12
 80081b4:	edd3 7a00 	vldr	s15, [r3]
 80081b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081bc:	ee17 3a90 	vmov	r3, s15
 80081c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				position[1] = matrixCosts[i][j][4];
 80081c4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80081c8:	22a8      	movs	r2, #168	; 0xa8
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80081d2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	18d1      	adds	r1, r2, r3
 80081da:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80081de:	4613      	mov	r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	440b      	add	r3, r1
 80081e8:	3310      	adds	r3, #16
 80081ea:	edd3 7a00 	vldr	s15, [r3]
 80081ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081f2:	ee17 3a90 	vmov	r3, s15
 80081f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

				// actualizamos la nueva posición
				i = position[0];
 80081fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80081fe:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
				j = position[1];
 8008202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008206:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 800820a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800820e:	3301      	adds	r3, #1
 8008210:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			while(Gridcopy[i][j] != 's'){
 8008214:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008218:	4613      	mov	r3, r2
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	1a9b      	subs	r3, r3, r2
 800821e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008222:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	441a      	add	r2, r3
 800822a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800822e:	5cd3      	ldrb	r3, [r2, r3]
 8008230:	2b73      	cmp	r3, #115	; 0x73
 8008232:	d1ac      	bne.n	800818e <findShorterWay+0xc46>
    while(!shorterWayFound){
 8008234:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008238:	2b00      	cmp	r3, #0
 800823a:	f43f aa3d 	beq.w	80076b8 <findShorterWay+0x170>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 800823e:	496d      	ldr	r1, [pc, #436]	; (80083f4 <findShorterWay+0xeac>)
 8008240:	486d      	ldr	r0, [pc, #436]	; (80083f8 <findShorterWay+0xeb0>)
 8008242:	f005 f977 	bl	800d534 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8008246:	210d      	movs	r1, #13
 8008248:	486b      	ldr	r0, [pc, #428]	; (80083f8 <findShorterWay+0xeb0>)
 800824a:	f005 f95b 	bl	800d504 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 800824e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8008252:	3301      	adds	r3, #1
 8008254:	b2da      	uxtb	r2, r3
 8008256:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800825a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8008262:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	j = ptrChanges->endPos[1];
 800826c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8008276:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800827a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800827e:	e087      	b.n	8008390 <findShorterWay+0xe48>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8008280:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	1a9b      	subs	r3, r3, r2
 800828a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800828e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	441a      	add	r2, r3
 8008296:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800829a:	5cd3      	ldrb	r3, [r2, r3]
 800829c:	2b65      	cmp	r3, #101	; 0x65
 800829e:	d101      	bne.n	80082a4 <findShorterWay+0xd5c>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 80082a0:	bf00      	nop
 80082a2:	e020      	b.n	80082e6 <findShorterWay+0xd9e>
    	}else if (Gridcopy[i][j] == 's'){
 80082a4:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80082a8:	4613      	mov	r3, r2
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	1a9b      	subs	r3, r3, r2
 80082ae:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80082b2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	441a      	add	r2, r3
 80082ba:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80082be:	5cd3      	ldrb	r3, [r2, r3]
 80082c0:	2b73      	cmp	r3, #115	; 0x73
 80082c2:	d101      	bne.n	80082c8 <findShorterWay+0xd80>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 80082c4:	bf00      	nop
 80082c6:	e00e      	b.n	80082e6 <findShorterWay+0xd9e>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 80082c8:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80082d6:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80082da:	6812      	ldr	r2, [r2, #0]
 80082dc:	441a      	add	r2, r3
 80082de:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80082e2:	2149      	movs	r1, #73	; 0x49
 80082e4:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 80082e6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80082f0:	4413      	add	r3, r2
 80082f2:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80082f6:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 80082f8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8008302:	4413      	add	r3, r2
 8008304:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008308:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 800830a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800830e:	22a8      	movs	r2, #168	; 0xa8
 8008310:	fb02 f303 	mul.w	r3, r2, r3
 8008314:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008318:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	18d1      	adds	r1, r2, r3
 8008320:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008324:	4613      	mov	r3, r2
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4413      	add	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	440b      	add	r3, r1
 800832e:	330c      	adds	r3, #12
 8008330:	edd3 7a00 	vldr	s15, [r3]
 8008334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008338:	ee17 3a90 	vmov	r3, s15
 800833c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		position[1] = matrixCosts[i][j][4];
 8008340:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008344:	22a8      	movs	r2, #168	; 0xa8
 8008346:	fb02 f303 	mul.w	r3, r2, r3
 800834a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800834e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	18d1      	adds	r1, r2, r3
 8008356:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 800835a:	4613      	mov	r3, r2
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	4413      	add	r3, r2
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	440b      	add	r3, r1
 8008364:	3310      	adds	r3, #16
 8008366:	edd3 7a00 	vldr	s15, [r3]
 800836a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800836e:	ee17 3a90 	vmov	r3, s15
 8008372:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

		// actualizamos la nueva posición
		i = position[0];
 8008376:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800837a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
		j = position[1];
 800837e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008382:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8008386:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800838a:	3b01      	subs	r3, #1
 800838c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8008390:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008394:	2b00      	cmp	r3, #0
 8008396:	f6bf af73 	bge.w	8008280 <findShorterWay+0xd38>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800839a:	2300      	movs	r3, #0
 800839c:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 80083a0:	e013      	b.n	80083ca <findShorterWay+0xe82>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 80083a2:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 80083a6:	4613      	mov	r3, r2
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80083b0:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80083b4:	6812      	ldr	r2, [r2, #0]
 80083b6:	4413      	add	r3, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	480f      	ldr	r0, [pc, #60]	; (80083f8 <findShorterWay+0xeb0>)
 80083bc:	f005 f8ba 	bl	800d534 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80083c0:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80083c4:	3301      	adds	r3, #1
 80083c6:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 80083ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80083ce:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	7a1b      	ldrb	r3, [r3, #8]
 80083d6:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 80083da:	429a      	cmp	r2, r3
 80083dc:	d3e1      	bcc.n	80083a2 <findShorterWay+0xe5a>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 80083de:	4907      	ldr	r1, [pc, #28]	; (80083fc <findShorterWay+0xeb4>)
 80083e0:	4805      	ldr	r0, [pc, #20]	; (80083f8 <findShorterWay+0xeb0>)
 80083e2:	f005 f8a7 	bl	800d534 <writeMsg>

    return 1;
 80083e6:	2301      	movs	r3, #1


}
 80083e8:	4618      	mov	r0, r3
 80083ea:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd90      	pop	{r4, r7, pc}
 80083f2:	bf00      	nop
 80083f4:	080139b4 	.word	0x080139b4
 80083f8:	200139c8 	.word	0x200139c8
 80083fc:	080139f4 	.word	0x080139f4

08008400 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fa8e 	bl	8008930 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800841a:	b2d8      	uxtb	r0, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4413      	add	r3, r2
 8008426:	461a      	mov	r2, r3
 8008428:	23a8      	movs	r3, #168	; 0xa8
 800842a:	fb02 f303 	mul.w	r3, r2, r3
 800842e:	3ba8      	subs	r3, #168	; 0xa8
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	18d1      	adds	r1, r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	3304      	adds	r3, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4413      	add	r3, r2
 8008440:	1e5a      	subs	r2, r3, #1
 8008442:	ee07 0a90 	vmov	s15, r0
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	4613      	mov	r3, r2
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4413      	add	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	440b      	add	r3, r1
 8008454:	330c      	adds	r3, #12
 8008456:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008460:	b2d8      	uxtb	r0, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4413      	add	r3, r2
 800846c:	461a      	mov	r2, r3
 800846e:	23a8      	movs	r3, #168	; 0xa8
 8008470:	fb02 f303 	mul.w	r3, r2, r3
 8008474:	3ba8      	subs	r3, #168	; 0xa8
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	18d1      	adds	r1, r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	3304      	adds	r3, #4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4413      	add	r3, r2
 8008486:	1e5a      	subs	r2, r3, #1
 8008488:	ee07 0a90 	vmov	s15, r0
 800848c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008490:	4613      	mov	r3, r2
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4413      	add	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	440b      	add	r3, r1
 800849a:	3310      	adds	r3, #16
 800849c:	edc3 7a00 	vstr	s15, [r3]

}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 80084a8:	b5b0      	push	{r4, r5, r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4413      	add	r3, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	23a8      	movs	r3, #168	; 0xa8
 80084c4:	fb02 f303 	mul.w	r3, r2, r3
 80084c8:	3ba8      	subs	r3, #168	; 0xa8
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	18d5      	adds	r5, r2, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3304      	adds	r3, #4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4413      	add	r3, r2
 80084da:	1e5c      	subs	r4, r3, #1
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f901 	bl	80086e8 <setGcost>
 80084e6:	eef0 7a40 	vmov.f32	s15, s0
 80084ea:	4623      	mov	r3, r4
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4423      	add	r3, r4
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	442b      	add	r3, r5
 80084f4:	edc3 7a00 	vstr	s15, [r3]
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bdb0      	pop	{r4, r5, r7, pc}

08008500 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 8008500:	b5b0      	push	{r4, r5, r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4413      	add	r3, r2
 8008518:	461a      	mov	r2, r3
 800851a:	23a8      	movs	r3, #168	; 0xa8
 800851c:	fb02 f303 	mul.w	r3, r2, r3
 8008520:	3ba8      	subs	r3, #168	; 0xa8
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	18d5      	adds	r5, r2, r3
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3304      	adds	r3, #4
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4413      	add	r3, r2
 8008532:	1e5c      	subs	r4, r3, #1
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 f9bb 	bl	80088b6 <setFcost>
 8008540:	eef0 7a40 	vmov.f32	s15, s0
 8008544:	4623      	mov	r3, r4
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	4423      	add	r3, r4
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	442b      	add	r3, r5
 800854e:	3304      	adds	r3, #4
 8008550:	edc3 7a00 	vstr	s15, [r3]

}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bdb0      	pop	{r4, r5, r7, pc}

0800855c <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[7][7][6] , char Gridcopy[7][7]){
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	68f9      	ldr	r1, [r7, #12]
 800857a:	6838      	ldr	r0, [r7, #0]
 800857c:	f000 fa3d 	bl	80089fa <findEnd>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8008586:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8008588:	2300      	movs	r3, #0
 800858a:	77fb      	strb	r3, [r7, #31]
 800858c:	e0a1      	b.n	80086d2 <setHeuristic+0x176>
		return RESET;
 800858e:	2300      	movs	r3, #0
 8008590:	e0a6      	b.n	80086e0 <setHeuristic+0x184>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8008592:	2300      	movs	r3, #0
 8008594:	77bb      	strb	r3, [r7, #30]
 8008596:	e093      	b.n	80086c0 <setHeuristic+0x164>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8008598:	7ffa      	ldrb	r2, [r7, #31]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bfb8      	it	lt
 80085a4:	425b      	neglt	r3, r3
 80085a6:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 80085a8:	7fba      	ldrb	r2, [r7, #30]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfb8      	it	lt
 80085b4:	425b      	neglt	r3, r3
 80085b6:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	429a      	cmp	r2, r3
 80085be:	dc3e      	bgt.n	800863e <setHeuristic+0xe2>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d8:	ee17 3a90 	vmov	r3, s15
 80085dc:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	ee07 3a90 	vmov	s15, r3
 80085e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	edd3 6a00 	vldr	s13, [r3]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bfb8      	it	lt
 80085f8:	425b      	neglt	r3, r3
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800860a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800860e:	ee17 3a90 	vmov	r3, s15
 8008612:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8008614:	7ffb      	ldrb	r3, [r7, #31]
 8008616:	22a8      	movs	r2, #168	; 0xa8
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	18d1      	adds	r1, r2, r3
 8008620:	7fba      	ldrb	r2, [r7, #30]
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800862c:	4613      	mov	r3, r2
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	4413      	add	r3, r2
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	440b      	add	r3, r1
 8008636:	3308      	adds	r3, #8
 8008638:	edc3 7a00 	vstr	s15, [r3]
 800863c:	e03d      	b.n	80086ba <setHeuristic+0x15e>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	ed93 7a01 	vldr	s14, [r3, #4]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800864e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008656:	ee17 3a90 	vmov	r3, s15
 800865a:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	edd3 6a00 	vldr	s13, [r3]
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	bfb8      	it	lt
 8008676:	425b      	neglt	r3, r3
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800868c:	ee17 3a90 	vmov	r3, s15
 8008690:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 8008692:	7ffb      	ldrb	r3, [r7, #31]
 8008694:	22a8      	movs	r2, #168	; 0xa8
 8008696:	fb02 f303 	mul.w	r3, r2, r3
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	18d1      	adds	r1, r2, r3
 800869e:	7fba      	ldrb	r2, [r7, #30]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086aa:	4613      	mov	r3, r2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4413      	add	r3, r2
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	440b      	add	r3, r1
 80086b4:	3308      	adds	r3, #8
 80086b6:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80086ba:	7fbb      	ldrb	r3, [r7, #30]
 80086bc:	3301      	adds	r3, #1
 80086be:	77bb      	strb	r3, [r7, #30]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	7a5b      	ldrb	r3, [r3, #9]
 80086c4:	7fba      	ldrb	r2, [r7, #30]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f4ff af66 	bcc.w	8008598 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80086cc:	7ffb      	ldrb	r3, [r7, #31]
 80086ce:	3301      	adds	r3, #1
 80086d0:	77fb      	strb	r3, [r7, #31]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	7a1b      	ldrb	r3, [r3, #8]
 80086d6:	7ffa      	ldrb	r2, [r7, #31]
 80086d8:	429a      	cmp	r2, r3
 80086da:	f4ff af5a 	bcc.w	8008592 <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 80086de:	2301      	movs	r3, #1

}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3720      	adds	r7, #32
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80086e8:	b480      	push	{r7}
 80086ea:	b089      	sub	sp, #36	; 0x24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	bfb8      	it	lt
 8008710:	425b      	neglt	r3, r3
 8008712:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfb8      	it	lt
 8008722:	425b      	neglt	r3, r3
 8008724:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4413      	add	r3, r2
 8008730:	1e5a      	subs	r2, r3, #1
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	d05d      	beq.n	80087f6 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3304      	adds	r3, #4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4413      	add	r3, r2
 8008746:	1e5a      	subs	r2, r3, #1
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	429a      	cmp	r2, r3
 800874e:	d052      	beq.n	80087f6 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	429a      	cmp	r2, r3
 800875c:	dc25      	bgt.n	80087aa <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	ed93 7a01 	vldr	s14, [r3, #4]
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800876e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008772:	ed97 7a07 	vldr	s14, [r7, #28]
 8008776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800877a:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	ed93 7a00 	vldr	s14, [r3]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfb8      	it	lt
 800878e:	425b      	neglt	r3, r3
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879c:	ed97 7a07 	vldr	s14, [r7, #28]
 80087a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087a4:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 80087a8:	e077      	b.n	800889a <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087be:	ed97 7a07 	vldr	s14, [r7, #28]
 80087c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	ed93 7a00 	vldr	s14, [r3]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfb8      	it	lt
 80087da:	425b      	neglt	r3, r3
 80087dc:	ee07 3a90 	vmov	s15, r3
 80087e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80087ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087f0:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 80087f4:	e051      	b.n	800889a <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	429a      	cmp	r2, r3
 8008802:	dc25      	bgt.n	8008850 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	ed93 7a01 	vldr	s14, [r3, #4]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008818:	ed97 7a07 	vldr	s14, [r7, #28]
 800881c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008820:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	ed93 7a00 	vldr	s14, [r3]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	bfb8      	it	lt
 8008834:	425b      	neglt	r3, r3
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800883e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008842:	ed97 7a07 	vldr	s14, [r7, #28]
 8008846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800884a:	edc7 7a07 	vstr	s15, [r7, #28]
 800884e:	e024      	b.n	800889a <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	ed93 7a01 	vldr	s14, [r3, #4]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008864:	ed97 7a07 	vldr	s14, [r7, #28]
 8008868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800886c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	ed93 7a00 	vldr	s14, [r3]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfb8      	it	lt
 8008880:	425b      	neglt	r3, r3
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	ee07 3a90 	vmov	s15, r3
}
 80088a8:	eeb0 0a67 	vmov.f32	s0, s15
 80088ac:	3724      	adds	r7, #36	; 0x24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff ff0d 	bl	80086e8 <setGcost>
 80088ce:	eef0 7a40 	vmov.f32	s15, s0
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4413      	add	r3, r2
 80088e8:	461a      	mov	r2, r3
 80088ea:	23a8      	movs	r3, #168	; 0xa8
 80088ec:	fb02 f303 	mul.w	r3, r2, r3
 80088f0:	3ba8      	subs	r3, #168	; 0xa8
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	18d1      	adds	r1, r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3304      	adds	r3, #4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4413      	add	r3, r2
 8008902:	1e5a      	subs	r2, r3, #1
 8008904:	4613      	mov	r3, r2
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	4413      	add	r3, r2
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	440b      	add	r3, r1
 800890e:	3308      	adds	r3, #8
 8008910:	edd3 7a00 	vldr	s15, [r3]
 8008914:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	ee07 3a90 	vmov	s15, r3

}
 8008926:	eeb0 0a67 	vmov.f32	s0, s15
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4413      	add	r3, r2
 8008944:	1e5a      	subs	r2, r3, #1
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	d10c      	bne.n	8008968 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	3304      	adds	r3, #4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4413      	add	r3, r2
 800895a:	1e5a      	subs	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d101      	bne.n	8008968 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8008964:	bf00      	nop
 8008966:	e00c      	b.n	8008982 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	b2da      	uxtb	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8008980:	bf00      	nop
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800898e:	b480      	push	{r7}
 8008990:	b087      	sub	sp, #28
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
 800899e:	e020      	b.n	80089e2 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80089a0:	2300      	movs	r3, #0
 80089a2:	75bb      	strb	r3, [r7, #22]
 80089a4:	e015      	b.n	80089d2 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 80089a6:	7dfa      	ldrb	r2, [r7, #23]
 80089a8:	4613      	mov	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	441a      	add	r2, r3
 80089b2:	7dbb      	ldrb	r3, [r7, #22]
 80089b4:	5cd3      	ldrb	r3, [r2, r3]
 80089b6:	2b73      	cmp	r3, #115	; 0x73
 80089b8:	d107      	bne.n	80089ca <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 80089ba:	7dfa      	ldrb	r2, [r7, #23]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 80089c0:	7dba      	ldrb	r2, [r7, #22]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e011      	b.n	80089ee <findStart+0x60>
			}else{
				__NOP();
 80089ca:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80089cc:	7dbb      	ldrb	r3, [r7, #22]
 80089ce:	3301      	adds	r3, #1
 80089d0:	75bb      	strb	r3, [r7, #22]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	7a5b      	ldrb	r3, [r3, #9]
 80089d6:	7dba      	ldrb	r2, [r7, #22]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d3e4      	bcc.n	80089a6 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	3301      	adds	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	7a1b      	ldrb	r3, [r3, #8]
 80089e6:	7dfa      	ldrb	r2, [r7, #23]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d3d9      	bcc.n	80089a0 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80089ec:	2300      	movs	r3, #0



}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <findEnd>:
int findEnd(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 80089fa:	b480      	push	{r7}
 80089fc:	b087      	sub	sp, #28
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
 8008a0a:	e020      	b.n	8008a4e <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	75bb      	strb	r3, [r7, #22]
 8008a10:	e015      	b.n	8008a3e <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8008a12:	7dfa      	ldrb	r2, [r7, #23]
 8008a14:	4613      	mov	r3, r2
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	441a      	add	r2, r3
 8008a1e:	7dbb      	ldrb	r3, [r7, #22]
 8008a20:	5cd3      	ldrb	r3, [r2, r3]
 8008a22:	2b65      	cmp	r3, #101	; 0x65
 8008a24:	d107      	bne.n	8008a36 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8008a26:	7dfa      	ldrb	r2, [r7, #23]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 8008a2c:	7dba      	ldrb	r2, [r7, #22]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e011      	b.n	8008a5a <findEnd+0x60>
			}else{
				__NOP();
 8008a36:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008a38:	7dbb      	ldrb	r3, [r7, #22]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	75bb      	strb	r3, [r7, #22]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	7a5b      	ldrb	r3, [r3, #9]
 8008a42:	7dba      	ldrb	r2, [r7, #22]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d3e4      	bcc.n	8008a12 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	75fb      	strb	r3, [r7, #23]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	7a1b      	ldrb	r3, [r3, #8]
 8008a52:	7dfa      	ldrb	r2, [r7, #23]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d3d9      	bcc.n	8008a0c <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8008a58:	2300      	movs	r3, #0

}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	371c      	adds	r7, #28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[7][7], char Gridcopy[7][7]){
 8008a66:	b480      	push	{r7}
 8008a68:	b087      	sub	sp, #28
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8008a72:	2300      	movs	r3, #0
 8008a74:	75fb      	strb	r3, [r7, #23]
 8008a76:	e03d      	b.n	8008af4 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8008a78:	2300      	movs	r3, #0
 8008a7a:	75bb      	strb	r3, [r7, #22]
 8008a7c:	e031      	b.n	8008ae2 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	7a5b      	ldrb	r3, [r3, #9]
 8008a82:	7dba      	ldrb	r2, [r7, #22]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d109      	bne.n	8008a9c <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8008a88:	7dfa      	ldrb	r2, [r7, #23]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	441a      	add	r2, r3
 8008a94:	7dbb      	ldrb	r3, [r7, #22]
 8008a96:	210d      	movs	r1, #13
 8008a98:	54d1      	strb	r1, [r2, r3]
 8008a9a:	e01f      	b.n	8008adc <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8008a9c:	7dba      	ldrb	r2, [r7, #22]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	7a5b      	ldrb	r3, [r3, #9]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d109      	bne.n	8008abc <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8008aa8:	7dfa      	ldrb	r2, [r7, #23]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	1a9b      	subs	r3, r3, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	441a      	add	r2, r3
 8008ab4:	7dbb      	ldrb	r3, [r7, #22]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	54d1      	strb	r1, [r2, r3]
 8008aba:	e00f      	b.n	8008adc <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8008abc:	7dfa      	ldrb	r2, [r7, #23]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	18d0      	adds	r0, r2, r3
 8008ac8:	7db9      	ldrb	r1, [r7, #22]
 8008aca:	7dfa      	ldrb	r2, [r7, #23]
 8008acc:	4613      	mov	r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	441a      	add	r2, r3
 8008ad6:	7dbb      	ldrb	r3, [r7, #22]
 8008ad8:	5c41      	ldrb	r1, [r0, r1]
 8008ada:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8008adc:	7dbb      	ldrb	r3, [r7, #22]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	75bb      	strb	r3, [r7, #22]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	7a5b      	ldrb	r3, [r3, #9]
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	7dbb      	ldrb	r3, [r7, #22]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	dac7      	bge.n	8008a7e <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	3301      	adds	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	7a1b      	ldrb	r3, [r3, #8]
 8008af8:	7dfa      	ldrb	r2, [r7, #23]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d3bc      	bcc.n	8008a78 <buildMatrixCopy+0x12>
			}
		}
	}

}
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[7][7]){
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8008b1c:	e00a      	b.n	8008b34 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 8008b1e:	7bfa      	ldrb	r2, [r7, #15]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	1a9b      	subs	r3, r3, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	3301      	adds	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8008b34:	7bfa      	ldrb	r2, [r7, #15]
 8008b36:	4613      	mov	r3, r2
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	4413      	add	r3, r2
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1eb      	bne.n	8008b1e <getRows+0x12>

	}

	return counterRows;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[7][7]){
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008b60:	e002      	b.n	8008b68 <getColums+0x14>

		counterColumns++;
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	3301      	adds	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	5cd3      	ldrb	r3, [r2, r3]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f7      	bne.n	8008b62 <getColums+0xe>

	}

	return counterColumns;
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8008b80:	b480      	push	{r7}
 8008b82:	b089      	sub	sp, #36	; 0x24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8008b94:	f04f 0300 	mov.w	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	77fb      	strb	r3, [r7, #31]
 8008b9e:	e04d      	b.n	8008c3c <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	77bb      	strb	r3, [r7, #30]
 8008ba4:	e034      	b.n	8008c10 <findLesserValue+0x90>
			if (i == j){
 8008ba6:	7ffa      	ldrb	r2, [r7, #31]
 8008ba8:	7fbb      	ldrb	r3, [r7, #30]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d101      	bne.n	8008bb2 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 8008bae:	bf00      	nop
 8008bb0:	e02b      	b.n	8008c0a <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8008bb2:	7ffb      	ldrb	r3, [r7, #31]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	4413      	add	r3, r2
 8008bba:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 8008bbe:	7fbb      	ldrb	r3, [r7, #30]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8008bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd2:	d41a      	bmi.n	8008c0a <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8008bd4:	7ffb      	ldrb	r3, [r7, #31]
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	4413      	add	r3, r2
 8008bdc:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8008be0:	7fbb      	ldrb	r3, [r7, #30]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	4413      	add	r3, r2
 8008be8:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8008bec:	eeb4 7a67 	vcmp.f32	s14, s15
 8008bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf4:	d104      	bne.n	8008c00 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008bfe:	e004      	b.n	8008c0a <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8008c08:	e006      	b.n	8008c18 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8008c0a:	7fbb      	ldrb	r3, [r7, #30]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	77bb      	strb	r3, [r7, #30]
 8008c10:	7fba      	ldrb	r2, [r7, #30]
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3c6      	bcc.n	8008ba6 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8008c18:	7fba      	ldrb	r2, [r7, #30]
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d10a      	bne.n	8008c36 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8008c20:	7ffa      	ldrb	r2, [r7, #31]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8008c26:	7ffb      	ldrb	r3, [r7, #31]
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8008c34:	e006      	b.n	8008c44 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8008c36:	7ffb      	ldrb	r3, [r7, #31]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	7ffa      	ldrb	r2, [r7, #31]
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d3ad      	bcc.n	8008ba0 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d076      	beq.n	8008d3c <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 8008c4e:	2300      	movs	r3, #0
 8008c50:	77fb      	strb	r3, [r7, #31]
 8008c52:	e06e      	b.n	8008d32 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8008c54:	7ffb      	ldrb	r3, [r7, #31]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	edd3 6a00 	vldr	s13, [r3]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c6a:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 8008c6e:	2300      	movs	r3, #0
 8008c70:	77bb      	strb	r3, [r7, #30]
 8008c72:	e045      	b.n	8008d00 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8008c74:	7fbb      	ldrb	r3, [r7, #30]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	edd3 6a00 	vldr	s13, [r3]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c8a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 8008c8e:	7ffa      	ldrb	r2, [r7, #31]
 8008c90:	7fbb      	ldrb	r3, [r7, #30]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d101      	bne.n	8008c9a <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8008c96:	bf00      	nop
 8008c98:	e02f      	b.n	8008cfa <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8008c9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca2:	eef4 7a47 	vcmp.f32	s15, s14
 8008ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008caa:	d11c      	bne.n	8008ce6 <findLesserValue+0x166>
 8008cac:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cb4:	eef4 7a47 	vcmp.f32	s15, s14
 8008cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbc:	d113      	bne.n	8008ce6 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8008cbe:	7ffb      	ldrb	r3, [r7, #31]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8008cca:	7fbb      	ldrb	r3, [r7, #30]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cde:	d900      	bls.n	8008ce2 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8008ce0:	e014      	b.n	8008d0c <findLesserValue+0x18c>
						__NOP();
 8008ce2:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8008ce4:	e009      	b.n	8008cfa <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8008ce6:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cee:	eef4 7a47 	vcmp.f32	s15, s14
 8008cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf6:	d108      	bne.n	8008d0a <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8008cf8:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8008cfa:	7fbb      	ldrb	r3, [r7, #30]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	77bb      	strb	r3, [r7, #30]
 8008d00:	7fba      	ldrb	r2, [r7, #30]
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d3b5      	bcc.n	8008c74 <findLesserValue+0xf4>
 8008d08:	e000      	b.n	8008d0c <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 8008d0a:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8008d0c:	7fba      	ldrb	r2, [r7, #30]
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d10b      	bne.n	8008d2c <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8008d14:	7ffa      	ldrb	r2, [r7, #31]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 8008d1a:	7ffb      	ldrb	r3, [r7, #31]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	4413      	add	r3, r2
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8008d28:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 8008d2a:	e008      	b.n	8008d3e <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8008d2c:	7ffb      	ldrb	r3, [r7, #31]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	77fb      	strb	r3, [r7, #31]
 8008d32:	7ffa      	ldrb	r2, [r7, #31]
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d38c      	bcc.n	8008c54 <findLesserValue+0xd4>
}
 8008d3a:	e000      	b.n	8008d3e <findLesserValue+0x1be>
		__NOP();
 8008d3c:	bf00      	nop
}
 8008d3e:	bf00      	nop
 8008d40:	3724      	adds	r7, #36	; 0x24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <initSerialComunication+0xc8>)
 8008d5e:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	4a2b      	ldr	r2, [pc, #172]	; (8008e14 <initSerialComunication+0xc8>)
 8008d66:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	79da      	ldrb	r2, [r3, #7]
 8008d6c:	4b29      	ldr	r3, [pc, #164]	; (8008e14 <initSerialComunication+0xc8>)
 8008d6e:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	791a      	ldrb	r2, [r3, #4]
 8008d74:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <initSerialComunication+0xc8>)
 8008d76:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	799a      	ldrb	r2, [r3, #6]
 8008d7c:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <initSerialComunication+0xc8>)
 8008d7e:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	7a5a      	ldrb	r2, [r3, #9]
 8008d84:	4b23      	ldr	r3, [pc, #140]	; (8008e14 <initSerialComunication+0xc8>)
 8008d86:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	7a9a      	ldrb	r2, [r3, #10]
 8008d8c:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <initSerialComunication+0xc8>)
 8008d8e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	7a1a      	ldrb	r2, [r3, #8]
 8008d94:	4b1f      	ldr	r3, [pc, #124]	; (8008e14 <initSerialComunication+0xc8>)
 8008d96:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1e      	ldr	r2, [pc, #120]	; (8008e18 <initSerialComunication+0xcc>)
 8008d9e:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	7a5a      	ldrb	r2, [r3, #9]
 8008da4:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <initSerialComunication+0xcc>)
 8008da6:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	795a      	ldrb	r2, [r3, #5]
 8008dac:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <initSerialComunication+0xcc>)
 8008dae:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	7a1a      	ldrb	r2, [r3, #8]
 8008db4:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <initSerialComunication+0xcc>)
 8008db6:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	791a      	ldrb	r2, [r3, #4]
 8008dbc:	4b16      	ldr	r3, [pc, #88]	; (8008e18 <initSerialComunication+0xcc>)
 8008dbe:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	79da      	ldrb	r2, [r3, #7]
 8008dc4:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <initSerialComunication+0xcc>)
 8008dc6:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	799a      	ldrb	r2, [r3, #6]
 8008dcc:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <initSerialComunication+0xcc>)
 8008dce:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a11      	ldr	r2, [pc, #68]	; (8008e1c <initSerialComunication+0xd0>)
 8008dd6:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7a5a      	ldrb	r2, [r3, #9]
 8008ddc:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <initSerialComunication+0xd0>)
 8008dde:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	795a      	ldrb	r2, [r3, #5]
 8008de4:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <initSerialComunication+0xd0>)
 8008de6:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7a1a      	ldrb	r2, [r3, #8]
 8008dec:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <initSerialComunication+0xd0>)
 8008dee:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	791a      	ldrb	r2, [r3, #4]
 8008df4:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <initSerialComunication+0xd0>)
 8008df6:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	79da      	ldrb	r2, [r3, #7]
 8008dfc:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <initSerialComunication+0xd0>)
 8008dfe:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	799a      	ldrb	r2, [r3, #6]
 8008e04:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <initSerialComunication+0xd0>)
 8008e06:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8008e08:	bf00      	nop
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	200139c8 	.word	0x200139c8
 8008e18:	20013a5c 	.word	0x20013a5c
 8008e1c:	20013a68 	.word	0x20013a68

08008e20 <create_Astar_operations>:
void create_Astar_operations(AStar_distancesHandler *parameters,
					   int shorterWayArray[100][2],
					   Parameters_Operation_t prtList[30],
					   Parameter_build_t *ptrbuild,
					   Parameters_Path_t *ptrPath,
					   Parameters_Position_t *ptrPos){
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08e      	sub	sp, #56	; 0x38
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double finishline_y = 0;
 8008e3a:	f04f 0200 	mov.w	r2, #0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dist_to_x = 0;
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	f04f 0300 	mov.w	r3, #0
 8008e4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dist_to_y = 0;
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	e9c1 2300 	strd	r2, r3, [r1]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e74:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e8e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// calculo del vector unitario del robot


	unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8008e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e94:	ed93 7b04 	vldr	d7, [r3, #16]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	3310      	adds	r3, #16
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8008ea2:	eef0 0a67 	vmov.f32	s1, s15
 8008ea6:	f002 febd 	bl	800bc24 <unitary_vector>




	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008eb0:	e06f      	b.n	8008f92 <create_Astar_operations+0x172>

		// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir

		dist_to_y = -(shorterWayArray[i+1][0] - shorterWayArray[i][0]) * parameters->parallelDistance;
 8008eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	4413      	add	r3, r2
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	440b      	add	r3, r1
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	edd3 7a00 	vldr	s15, [r3]
 8008edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee0:	ee17 0a90 	vmov	r0, s15
 8008ee4:	f7f7 fb48 	bl	8000578 <__aeabi_f2d>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dist_to_x = (shorterWayArray[i+1][1] - shorterWayArray[i][1]) * parameters->parallelDistance;
 8008ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	4413      	add	r3, r2
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	440b      	add	r3, r1
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	ee07 3a90 	vmov	s15, r3
 8008f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	edd3 7a00 	vldr	s15, [r3]
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	ee17 0a90 	vmov	r0, s15
 8008f22:	f7f7 fb29 	bl	8000578 <__aeabi_f2d>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	e9c7 2306 	strd	r2, r3, [r7, #24]

		finishline_x += dist_to_x; // Coordenada x a ir
 8008f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008f36:	f7f7 f9c1 	bl	80002bc <__adddf3>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		finishline_y += dist_to_y; // Coordenada y a ir
 8008f42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008f4a:	f7f7 f9b7 	bl	80002bc <__adddf3>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		ptrPath->goal_Position_x = finishline_x;
 8008f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f5c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		ptrPath->goal_Position_y = finishline_y;
 8008f60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f66:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8008f6a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8008f6e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f002 fae7 	bl	800b548 <build_Operation>

		change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8008f7a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8008f7e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008f82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f84:	f002 fbc4 	bl	800b710 <change_coordinates_position>
	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8008f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	7a9b      	ldrb	r3, [r3, #10]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	db88      	blt.n	8008eb2 <create_Astar_operations+0x92>

	}


	// Agregamos la operacion nula
	add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fa6:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8008fd0 <create_Astar_operations+0x1b0>
 8008faa:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8008fd0 <create_Astar_operations+0x1b0>
 8008fae:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8008fd0 <create_Astar_operations+0x1b0>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f002 fb66 	bl	800b688 <add_Operation>
	ptrbuild->number_operation = 0;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


}
 8008fc4:	bf00      	nop
 8008fc6:	3738      	adds	r7, #56	; 0x38
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	f3af 8000 	nop.w
	...

08008fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	db0b      	blt.n	8009002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	f003 021f 	and.w	r2, r3, #31
 8008ff0:	4907      	ldr	r1, [pc, #28]	; (8009010 <__NVIC_EnableIRQ+0x38>)
 8008ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8008ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009002:	bf00      	nop
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	e000e100 	.word	0xe000e100

08009014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009024:	2b00      	cmp	r3, #0
 8009026:	db0a      	blt.n	800903e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	b2da      	uxtb	r2, r3
 800902c:	490c      	ldr	r1, [pc, #48]	; (8009060 <__NVIC_SetPriority+0x4c>)
 800902e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009032:	0112      	lsls	r2, r2, #4
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	440b      	add	r3, r1
 8009038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800903c:	e00a      	b.n	8009054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	b2da      	uxtb	r2, r3
 8009042:	4908      	ldr	r1, [pc, #32]	; (8009064 <__NVIC_SetPriority+0x50>)
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	3b04      	subs	r3, #4
 800904c:	0112      	lsls	r2, r2, #4
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	440b      	add	r3, r1
 8009052:	761a      	strb	r2, [r3, #24]
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	e000e100 	.word	0xe000e100
 8009064:	e000ed00 	.word	0xe000ed00

08009068 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <inTIM4+0x30>)
 800906e:	4a0b      	ldr	r2, [pc, #44]	; (800909c <inTIM4+0x34>)
 8009070:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8009072:	4b09      	ldr	r3, [pc, #36]	; (8009098 <inTIM4+0x30>)
 8009074:	2200      	movs	r2, #0
 8009076:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8009078:	4b07      	ldr	r3, [pc, #28]	; (8009098 <inTIM4+0x30>)
 800907a:	2200      	movs	r2, #0
 800907c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800907e:	4b06      	ldr	r3, [pc, #24]	; (8009098 <inTIM4+0x30>)
 8009080:	f242 7210 	movw	r2, #10000	; 0x2710
 8009084:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8009086:	4b04      	ldr	r3, [pc, #16]	; (8009098 <inTIM4+0x30>)
 8009088:	220a      	movs	r2, #10
 800908a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 800908c:	4802      	ldr	r0, [pc, #8]	; (8009098 <inTIM4+0x30>)
 800908e:	f000 f807 	bl	80090a0 <BasicTimer_Config>

}
 8009092:	bf00      	nop
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000338 	.word	0x20000338
 800909c:	40000800 	.word	0x40000800

080090a0 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80090b0:	b672      	cpsid	i
}
 80090b2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a85      	ldr	r2, [pc, #532]	; (80092d0 <BasicTimer_Config+0x230>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d106      	bne.n	80090cc <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80090be:	4b85      	ldr	r3, [pc, #532]	; (80092d4 <BasicTimer_Config+0x234>)
 80090c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c2:	4a84      	ldr	r2, [pc, #528]	; (80092d4 <BasicTimer_Config+0x234>)
 80090c4:	f043 0301 	orr.w	r3, r3, #1
 80090c8:	6453      	str	r3, [r2, #68]	; 0x44
 80090ca:	e030      	b.n	800912e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d4:	d106      	bne.n	80090e4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80090d6:	4b7f      	ldr	r3, [pc, #508]	; (80092d4 <BasicTimer_Config+0x234>)
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	4a7e      	ldr	r2, [pc, #504]	; (80092d4 <BasicTimer_Config+0x234>)
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	6413      	str	r3, [r2, #64]	; 0x40
 80090e2:	e024      	b.n	800912e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a7b      	ldr	r2, [pc, #492]	; (80092d8 <BasicTimer_Config+0x238>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d106      	bne.n	80090fc <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80090ee:	4b79      	ldr	r3, [pc, #484]	; (80092d4 <BasicTimer_Config+0x234>)
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	4a78      	ldr	r2, [pc, #480]	; (80092d4 <BasicTimer_Config+0x234>)
 80090f4:	f043 0302 	orr.w	r3, r3, #2
 80090f8:	6413      	str	r3, [r2, #64]	; 0x40
 80090fa:	e018      	b.n	800912e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a76      	ldr	r2, [pc, #472]	; (80092dc <BasicTimer_Config+0x23c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d106      	bne.n	8009114 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8009106:	4b73      	ldr	r3, [pc, #460]	; (80092d4 <BasicTimer_Config+0x234>)
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	4a72      	ldr	r2, [pc, #456]	; (80092d4 <BasicTimer_Config+0x234>)
 800910c:	f043 0304 	orr.w	r3, r3, #4
 8009110:	6413      	str	r3, [r2, #64]	; 0x40
 8009112:	e00c      	b.n	800912e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a71      	ldr	r2, [pc, #452]	; (80092e0 <BasicTimer_Config+0x240>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d106      	bne.n	800912c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800911e:	4b6d      	ldr	r3, [pc, #436]	; (80092d4 <BasicTimer_Config+0x234>)
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	4a6c      	ldr	r2, [pc, #432]	; (80092d4 <BasicTimer_Config+0x234>)
 8009124:	f043 0308 	orr.w	r3, r3, #8
 8009128:	6413      	str	r3, [r2, #64]	; 0x40
 800912a:	e000      	b.n	800912e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800912c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800913c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6892      	ldr	r2, [r2, #8]
 8009146:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	791b      	ldrb	r3, [r3, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 80d3 	bne.w	80092f8 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0210 	bic.w	r2, r2, #16
 8009160:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2ba0      	cmp	r3, #160	; 0xa0
 800916c:	d022      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2bc8      	cmp	r3, #200	; 0xc8
 8009172:	d01f      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800917a:	d01b      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009182:	d017      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800918a:	d013      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009192:	d00f      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800919a:	d00b      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80091a2:	d007      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80091aa:	d003      	beq.n	80091b4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091b2:	d10b      	bne.n	80091cc <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	2264      	movs	r2, #100	; 0x64
 80091ba:	fb02 f303 	mul.w	r3, r2, r3
 80091be:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	3a01      	subs	r2, #1
 80091c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80091ca:	e07c      	b.n	80092c6 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091d2:	d029      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80091da:	d025      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d020      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80091ec:	d01c      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d017      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f241 7270 	movw	r2, #6000	; 0x1770
 80091fe:	4293      	cmp	r3, r2
 8009200:	d012      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f641 3258 	movw	r2, #7000	; 0x1b58
 8009208:	4293      	cmp	r3, r2
 800920a:	d00d      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8009212:	d009      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f242 3228 	movw	r2, #9000	; 0x2328
 800921a:	4293      	cmp	r3, r2
 800921c:	d004      	beq.n	8009228 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f242 7210 	movw	r2, #10000	; 0x2710
 8009224:	4293      	cmp	r3, r2
 8009226:	d10c      	bne.n	8009242 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	4613      	mov	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	3a01      	subs	r2, #1
 800923e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009240:	e041      	b.n	80092c6 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8009248:	d028      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009250:	4293      	cmp	r3, r2
 8009252:	d023      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f247 5230 	movw	r2, #30000	; 0x7530
 800925a:	4293      	cmp	r3, r2
 800925c:	d01e      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f649 4240 	movw	r2, #40000	; 0x9c40
 8009264:	4293      	cmp	r3, r2
 8009266:	d019      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800926e:	4293      	cmp	r3, r2
 8009270:	d014      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009278:	4293      	cmp	r3, r2
 800927a:	d00f      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <BasicTimer_Config+0x244>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00b      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <BasicTimer_Config+0x248>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d007      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4a17      	ldr	r2, [pc, #92]	; (80092ec <BasicTimer_Config+0x24c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d003      	beq.n	800929c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4a16      	ldr	r2, [pc, #88]	; (80092f0 <BasicTimer_Config+0x250>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d108      	bne.n	80092ae <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	3a01      	subs	r2, #1
 80092aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80092ac:	e00b      	b.n	80092c6 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <BasicTimer_Config+0x254>)
 80092b4:	fba2 2303 	umull	r2, r3, r2, r3
 80092b8:	08db      	lsrs	r3, r3, #3
 80092ba:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	3a01      	subs	r2, #1
 80092c4:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	625a      	str	r2, [r3, #36]	; 0x24
 80092ce:	e027      	b.n	8009320 <BasicTimer_Config+0x280>
 80092d0:	40010000 	.word	0x40010000
 80092d4:	40023800 	.word	0x40023800
 80092d8:	40000400 	.word	0x40000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	40000c00 	.word	0x40000c00
 80092e4:	00011170 	.word	0x00011170
 80092e8:	00013880 	.word	0x00013880
 80092ec:	00015f90 	.word	0x00015f90
 80092f0:	000186a0 	.word	0x000186a0
 80092f4:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0210 	orr.w	r2, r2, #16
 8009306:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3a01      	subs	r2, #1
 8009312:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3a01      	subs	r2, #1
 800931e:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7c1b      	ldrb	r3, [r3, #16]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d12d      	bne.n	8009384 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0201 	orr.w	r2, r2, #1
 8009336:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009340:	d103      	bne.n	800934a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8009342:	201c      	movs	r0, #28
 8009344:	f7ff fe48 	bl	8008fd8 <__NVIC_EnableIRQ>
 8009348:	e024      	b.n	8009394 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a14      	ldr	r2, [pc, #80]	; (80093a0 <BasicTimer_Config+0x300>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d103      	bne.n	800935c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8009354:	201d      	movs	r0, #29
 8009356:	f7ff fe3f 	bl	8008fd8 <__NVIC_EnableIRQ>
 800935a:	e01b      	b.n	8009394 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a10      	ldr	r2, [pc, #64]	; (80093a4 <BasicTimer_Config+0x304>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d103      	bne.n	800936e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8009366:	201e      	movs	r0, #30
 8009368:	f7ff fe36 	bl	8008fd8 <__NVIC_EnableIRQ>
 800936c:	e012      	b.n	8009394 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a0d      	ldr	r2, [pc, #52]	; (80093a8 <BasicTimer_Config+0x308>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d103      	bne.n	8009380 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8009378:	2032      	movs	r0, #50	; 0x32
 800937a:	f7ff fe2d 	bl	8008fd8 <__NVIC_EnableIRQ>
 800937e:	e009      	b.n	8009394 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8009380:	bf00      	nop
 8009382:	e007      	b.n	8009394 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0201 	bic.w	r2, r2, #1
 8009392:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009394:	b662      	cpsie	i
}
 8009396:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	40000400 	.word	0x40000400
 80093a4:	40000800 	.word	0x40000800
 80093a8:	40000c00 	.word	0x40000c00

080093ac <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 80093b6:	4818      	ldr	r0, [pc, #96]	; (8009418 <delay_ms+0x6c>)
 80093b8:	f000 fab8 	bl	800992c <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 80093bc:	88fb      	ldrh	r3, [r7, #6]
 80093be:	461a      	mov	r2, r3
 80093c0:	0092      	lsls	r2, r2, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 80093d0:	e016      	b.n	8009400 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 80093d2:	4b11      	ldr	r3, [pc, #68]	; (8009418 <delay_ms+0x6c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00f      	beq.n	8009400 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 80093e0:	4b0d      	ldr	r3, [pc, #52]	; (8009418 <delay_ms+0x6c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	3301      	adds	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	89fb      	ldrh	r3, [r7, #14]
 80093ec:	4413      	add	r3, r2
 80093ee:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 80093f0:	4b09      	ldr	r3, [pc, #36]	; (8009418 <delay_ms+0x6c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	4b08      	ldr	r3, [pc, #32]	; (8009418 <delay_ms+0x6c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0201 	bic.w	r2, r2, #1
 80093fe:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8009400:	89fa      	ldrh	r2, [r7, #14]
 8009402:	89bb      	ldrh	r3, [r7, #12]
 8009404:	429a      	cmp	r2, r3
 8009406:	d3e4      	bcc.n	80093d2 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8009408:	4803      	ldr	r0, [pc, #12]	; (8009418 <delay_ms+0x6c>)
 800940a:	f000 faa1 	bl	8009950 <stopTimer>
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000338 	.word	0x20000338

0800941c <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8009428:	b672      	cpsid	i
}
 800942a:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009434:	d105      	bne.n	8009442 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	4619      	mov	r1, r3
 800943a:	201c      	movs	r0, #28
 800943c:	f7ff fdea 	bl	8009014 <__NVIC_SetPriority>
 8009440:	e021      	b.n	8009486 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a13      	ldr	r2, [pc, #76]	; (8009494 <TIM_SetPriority+0x78>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d105      	bne.n	8009458 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	4619      	mov	r1, r3
 8009450:	201d      	movs	r0, #29
 8009452:	f7ff fddf 	bl	8009014 <__NVIC_SetPriority>
 8009456:	e016      	b.n	8009486 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <TIM_SetPriority+0x7c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d105      	bne.n	800946e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	4619      	mov	r1, r3
 8009466:	201e      	movs	r0, #30
 8009468:	f7ff fdd4 	bl	8009014 <__NVIC_SetPriority>
 800946c:	e00b      	b.n	8009486 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a0a      	ldr	r2, [pc, #40]	; (800949c <TIM_SetPriority+0x80>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d105      	bne.n	8009484 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	4619      	mov	r1, r3
 800947c:	2032      	movs	r0, #50	; 0x32
 800947e:	f7ff fdc9 	bl	8009014 <__NVIC_SetPriority>
 8009482:	e000      	b.n	8009486 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8009484:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009486:	b662      	cpsie	i
}
 8009488:	bf00      	nop
	}

	__enable_irq();

}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	40000400 	.word	0x40000400
 8009498:	40000800 	.word	0x40000800
 800949c:	40000c00 	.word	0x40000c00

080094a0 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094a4:	bf00      	nop
}
 80094a6:	bf00      	nop
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094b4:	bf00      	nop
}
 80094b6:	bf00      	nop
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094c4:	bf00      	nop
}
 80094c6:	bf00      	nop
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094d4:	bf00      	nop
}
 80094d6:	bf00      	nop
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094e4:	bf00      	nop
}
 80094e6:	bf00      	nop
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094f4:	bf00      	nop
}
 80094f6:	bf00      	nop
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009504:	bf00      	nop
}
 8009506:	bf00      	nop
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009514:	bf00      	nop
}
 8009516:	bf00      	nop
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009524:	bf00      	nop
}
 8009526:	bf00      	nop
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009534:	bf00      	nop
}
 8009536:	bf00      	nop
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009544:	bf00      	nop
}
 8009546:	bf00      	nop
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009554:	bf00      	nop
}
 8009556:	bf00      	nop
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009564:	bf00      	nop
}
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009574:	bf00      	nop
}
 8009576:	bf00      	nop
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009584:	bf00      	nop
}
 8009586:	bf00      	nop
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009594:	bf00      	nop
}
 8009596:	bf00      	nop
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095a4:	bf00      	nop
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095b4:	bf00      	nop
}
 80095b6:	bf00      	nop
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80095c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80095d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095dc:	f023 0301 	bic.w	r3, r3, #1
 80095e0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80095e2:	f7f9 faa5 	bl	8002b30 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80095e6:	e066      	b.n	80096b6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80095e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d012      	beq.n	800961c <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80095f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009600:	f023 0302 	bic.w	r3, r3, #2
 8009604:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8009606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009614:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8009616:	f7ff ff5b 	bl	80094d0 <Capture_TIM2_Ch1_Callback>
}
 800961a:	e04c      	b.n	80096b6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 800961c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d012      	beq.n	8009650 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800962a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009634:	f023 0304 	bic.w	r3, r3, #4
 8009638:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 800963a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009648:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800964a:	f7ff ff49 	bl	80094e0 <Capture_TIM2_Ch2_Callback>
}
 800964e:	e032      	b.n	80096b6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8009650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	2b00      	cmp	r3, #0
 800965c:	d012      	beq.n	8009684 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800965e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009668:	f023 0308 	bic.w	r3, r3, #8
 800966c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800966e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800967c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800967e:	f7ff ff37 	bl	80094f0 <Capture_TIM2_Ch3_Callback>
}
 8009682:	e018      	b.n	80096b6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8009684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 0310 	and.w	r3, r3, #16
 800968e:	2b00      	cmp	r3, #0
 8009690:	d011      	beq.n	80096b6 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8009692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800969c:	f023 0310 	bic.w	r3, r3, #16
 80096a0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80096a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80096ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096b0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80096b2:	f7ff ff25 	bl	8009500 <Capture_TIM2_Ch4_Callback>
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80096c0:	4b31      	ldr	r3, [pc, #196]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d008      	beq.n	80096de <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80096cc:	4b2e      	ldr	r3, [pc, #184]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	4a2d      	ldr	r2, [pc, #180]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096d2:	f023 0301 	bic.w	r3, r3, #1
 80096d6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80096d8:	f7ff fee2 	bl	80094a0 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80096dc:	e052      	b.n	8009784 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80096de:	4b2a      	ldr	r3, [pc, #168]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00e      	beq.n	8009708 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80096ea:	4b27      	ldr	r3, [pc, #156]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	4a26      	ldr	r2, [pc, #152]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096f0:	f023 0302 	bic.w	r3, r3, #2
 80096f4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80096f6:	4b24      	ldr	r3, [pc, #144]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	4a23      	ldr	r2, [pc, #140]	; (8009788 <TIM3_IRQHandler+0xcc>)
 80096fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009700:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8009702:	f7ff ff05 	bl	8009510 <Capture_TIM3_Ch1_Callback>
}
 8009706:	e03d      	b.n	8009784 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8009708:	4b1f      	ldr	r3, [pc, #124]	; (8009788 <TIM3_IRQHandler+0xcc>)
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00e      	beq.n	8009732 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8009714:	4b1c      	ldr	r3, [pc, #112]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	4a1b      	ldr	r2, [pc, #108]	; (8009788 <TIM3_IRQHandler+0xcc>)
 800971a:	f023 0304 	bic.w	r3, r3, #4
 800971e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8009720:	4b19      	ldr	r3, [pc, #100]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	4a18      	ldr	r2, [pc, #96]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800972a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 800972c:	f7ff fef8 	bl	8009520 <Capture_TIM3_Ch2_Callback>
}
 8009730:	e028      	b.n	8009784 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8009732:	4b15      	ldr	r3, [pc, #84]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	f003 0308 	and.w	r3, r3, #8
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00e      	beq.n	800975c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 800973e:	4b12      	ldr	r3, [pc, #72]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	4a11      	ldr	r2, [pc, #68]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009744:	f023 0308 	bic.w	r3, r3, #8
 8009748:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800974a:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <TIM3_IRQHandler+0xcc>)
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	4a0e      	ldr	r2, [pc, #56]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009754:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8009756:	f7ff feeb 	bl	8009530 <Capture_TIM3_Ch3_Callback>
}
 800975a:	e013      	b.n	8009784 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <TIM3_IRQHandler+0xcc>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00d      	beq.n	8009784 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8009768:	4b07      	ldr	r3, [pc, #28]	; (8009788 <TIM3_IRQHandler+0xcc>)
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	4a06      	ldr	r2, [pc, #24]	; (8009788 <TIM3_IRQHandler+0xcc>)
 800976e:	f023 0310 	bic.w	r3, r3, #16
 8009772:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <TIM3_IRQHandler+0xcc>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4a03      	ldr	r2, [pc, #12]	; (8009788 <TIM3_IRQHandler+0xcc>)
 800977a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800977e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8009780:	f7ff fede 	bl	8009540 <Capture_TIM3_Ch4_Callback>
}
 8009784:	bf00      	nop
 8009786:	bd80      	pop	{r7, pc}
 8009788:	40000400 	.word	0x40000400

0800978c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8009790:	4b31      	ldr	r3, [pc, #196]	; (8009858 <TIM4_IRQHandler+0xcc>)
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800979c:	4b2e      	ldr	r3, [pc, #184]	; (8009858 <TIM4_IRQHandler+0xcc>)
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	4a2d      	ldr	r2, [pc, #180]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097a2:	f023 0301 	bic.w	r3, r3, #1
 80097a6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80097a8:	f7ff fe82 	bl	80094b0 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80097ac:	e052      	b.n	8009854 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80097ae:	4b2a      	ldr	r3, [pc, #168]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00e      	beq.n	80097d8 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80097ba:	4b27      	ldr	r3, [pc, #156]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	4a26      	ldr	r2, [pc, #152]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097c0:	f023 0302 	bic.w	r3, r3, #2
 80097c4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80097c6:	4b24      	ldr	r3, [pc, #144]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	4a23      	ldr	r2, [pc, #140]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097d0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80097d2:	f7ff febd 	bl	8009550 <Capture_TIM4_Ch1_Callback>
}
 80097d6:	e03d      	b.n	8009854 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80097d8:	4b1f      	ldr	r3, [pc, #124]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00e      	beq.n	8009802 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80097e4:	4b1c      	ldr	r3, [pc, #112]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	4a1b      	ldr	r2, [pc, #108]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097ea:	f023 0304 	bic.w	r3, r3, #4
 80097ee:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80097f0:	4b19      	ldr	r3, [pc, #100]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	4a18      	ldr	r2, [pc, #96]	; (8009858 <TIM4_IRQHandler+0xcc>)
 80097f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097fa:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80097fc:	f7ff fec8 	bl	8009590 <Capture_TIM5_Ch2_Callback>
}
 8009800:	e028      	b.n	8009854 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8009802:	4b15      	ldr	r3, [pc, #84]	; (8009858 <TIM4_IRQHandler+0xcc>)
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00e      	beq.n	800982c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800980e:	4b12      	ldr	r3, [pc, #72]	; (8009858 <TIM4_IRQHandler+0xcc>)
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	4a11      	ldr	r2, [pc, #68]	; (8009858 <TIM4_IRQHandler+0xcc>)
 8009814:	f023 0308 	bic.w	r3, r3, #8
 8009818:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 800981a:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <TIM4_IRQHandler+0xcc>)
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	4a0e      	ldr	r2, [pc, #56]	; (8009858 <TIM4_IRQHandler+0xcc>)
 8009820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009824:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8009826:	f7ff fe9b 	bl	8009560 <Capture_TIM4_Ch3_Callback>
}
 800982a:	e013      	b.n	8009854 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 800982c:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <TIM4_IRQHandler+0xcc>)
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f003 0310 	and.w	r3, r3, #16
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00d      	beq.n	8009854 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8009838:	4b07      	ldr	r3, [pc, #28]	; (8009858 <TIM4_IRQHandler+0xcc>)
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	4a06      	ldr	r2, [pc, #24]	; (8009858 <TIM4_IRQHandler+0xcc>)
 800983e:	f023 0310 	bic.w	r3, r3, #16
 8009842:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8009844:	4b04      	ldr	r3, [pc, #16]	; (8009858 <TIM4_IRQHandler+0xcc>)
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	4a03      	ldr	r2, [pc, #12]	; (8009858 <TIM4_IRQHandler+0xcc>)
 800984a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800984e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8009850:	f7ff fe8e 	bl	8009570 <Capture_TIM4_Ch4_Callback>
}
 8009854:	bf00      	nop
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40000800 	.word	0x40000800

0800985c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8009860:	4b31      	ldr	r3, [pc, #196]	; (8009928 <TIM5_IRQHandler+0xcc>)
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d008      	beq.n	800987e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800986c:	4b2e      	ldr	r3, [pc, #184]	; (8009928 <TIM5_IRQHandler+0xcc>)
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	4a2d      	ldr	r2, [pc, #180]	; (8009928 <TIM5_IRQHandler+0xcc>)
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8009878:	f7ff fe22 	bl	80094c0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800987c:	e052      	b.n	8009924 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800987e:	4b2a      	ldr	r3, [pc, #168]	; (8009928 <TIM5_IRQHandler+0xcc>)
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00e      	beq.n	80098a8 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800988a:	4b27      	ldr	r3, [pc, #156]	; (8009928 <TIM5_IRQHandler+0xcc>)
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	4a26      	ldr	r2, [pc, #152]	; (8009928 <TIM5_IRQHandler+0xcc>)
 8009890:	f023 0302 	bic.w	r3, r3, #2
 8009894:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8009896:	4b24      	ldr	r3, [pc, #144]	; (8009928 <TIM5_IRQHandler+0xcc>)
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	4a23      	ldr	r2, [pc, #140]	; (8009928 <TIM5_IRQHandler+0xcc>)
 800989c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098a0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80098a2:	f7ff fe6d 	bl	8009580 <Capture_TIM5_Ch1_Callback>
}
 80098a6:	e03d      	b.n	8009924 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80098a8:	4b1f      	ldr	r3, [pc, #124]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00e      	beq.n	80098d2 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80098b4:	4b1c      	ldr	r3, [pc, #112]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4a1b      	ldr	r2, [pc, #108]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098ba:	f023 0304 	bic.w	r3, r3, #4
 80098be:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80098c0:	4b19      	ldr	r3, [pc, #100]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	4a18      	ldr	r2, [pc, #96]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098ca:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80098cc:	f7ff fe60 	bl	8009590 <Capture_TIM5_Ch2_Callback>
}
 80098d0:	e028      	b.n	8009924 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00e      	beq.n	80098fc <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80098de:	4b12      	ldr	r3, [pc, #72]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	4a11      	ldr	r2, [pc, #68]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098e4:	f023 0308 	bic.w	r3, r3, #8
 80098e8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80098ea:	4b0f      	ldr	r3, [pc, #60]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	4a0e      	ldr	r2, [pc, #56]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098f4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80098f6:	f7ff fe53 	bl	80095a0 <Capture_TIM5_Ch3_Callback>
}
 80098fa:	e013      	b.n	8009924 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <TIM5_IRQHandler+0xcc>)
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00d      	beq.n	8009924 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8009908:	4b07      	ldr	r3, [pc, #28]	; (8009928 <TIM5_IRQHandler+0xcc>)
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	4a06      	ldr	r2, [pc, #24]	; (8009928 <TIM5_IRQHandler+0xcc>)
 800990e:	f023 0310 	bic.w	r3, r3, #16
 8009912:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8009914:	4b04      	ldr	r3, [pc, #16]	; (8009928 <TIM5_IRQHandler+0xcc>)
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	4a03      	ldr	r2, [pc, #12]	; (8009928 <TIM5_IRQHandler+0xcc>)
 800991a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800991e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8009920:	f7ff fe46 	bl	80095b0 <Capture_TIM5_Ch4_Callback>
}
 8009924:	bf00      	nop
 8009926:	bd80      	pop	{r7, pc}
 8009928:	40000c00 	.word	0x40000c00

0800992c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f042 0201 	orr.w	r2, r2, #1
 8009942:	601a      	str	r2, [r3, #0]
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0201 	bic.w	r2, r2, #1
 8009966:	601a      	str	r2, [r3, #0]
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <__NVIC_EnableIRQ>:
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800997e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009982:	2b00      	cmp	r3, #0
 8009984:	db0b      	blt.n	800999e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	f003 021f 	and.w	r2, r3, #31
 800998c:	4907      	ldr	r1, [pc, #28]	; (80099ac <__NVIC_EnableIRQ+0x38>)
 800998e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009992:	095b      	lsrs	r3, r3, #5
 8009994:	2001      	movs	r0, #1
 8009996:	fa00 f202 	lsl.w	r2, r0, r2
 800999a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	e000e100 	.word	0xe000e100

080099b0 <__NVIC_SetPriority>:
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	6039      	str	r1, [r7, #0]
 80099ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db0a      	blt.n	80099da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	490c      	ldr	r1, [pc, #48]	; (80099fc <__NVIC_SetPriority+0x4c>)
 80099ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ce:	0112      	lsls	r2, r2, #4
 80099d0:	b2d2      	uxtb	r2, r2
 80099d2:	440b      	add	r3, r1
 80099d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099d8:	e00a      	b.n	80099f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	4908      	ldr	r1, [pc, #32]	; (8009a00 <__NVIC_SetPriority+0x50>)
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	3b04      	subs	r3, #4
 80099e8:	0112      	lsls	r2, r2, #4
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	440b      	add	r3, r1
 80099ee:	761a      	strb	r2, [r3, #24]
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	e000e100 	.word	0xe000e100
 8009a00:	e000ed00 	.word	0xe000ed00

08009a04 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 f8bf 	bl	800ab94 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8009a16:	4b96      	ldr	r3, [pc, #600]	; (8009c70 <extInt_Config+0x26c>)
 8009a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a1c:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	791b      	ldrb	r3, [r3, #4]
 8009a24:	2b0f      	cmp	r3, #15
 8009a26:	f200 85cd 	bhi.w	800a5c4 <extInt_Config+0xbc0>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <extInt_Config+0x2c>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a71 	.word	0x08009a71
 8009a34:	08009b27 	.word	0x08009b27
 8009a38:	08009bdd 	.word	0x08009bdd
 8009a3c:	08009cb3 	.word	0x08009cb3
 8009a40:	08009d69 	.word	0x08009d69
 8009a44:	08009e17 	.word	0x08009e17
 8009a48:	08009edd 	.word	0x08009edd
 8009a4c:	08009f85 	.word	0x08009f85
 8009a50:	0800a02d 	.word	0x0800a02d
 8009a54:	0800a0d5 	.word	0x0800a0d5
 8009a58:	0800a19b 	.word	0x0800a19b
 8009a5c:	0800a243 	.word	0x0800a243
 8009a60:	0800a2eb 	.word	0x0800a2eb
 8009a64:	0800a3b1 	.word	0x0800a3b1
 8009a68:	0800a457 	.word	0x0800a457
 8009a6c:	0800a4ff 	.word	0x0800a4ff
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8009a70:	4b80      	ldr	r3, [pc, #512]	; (8009c74 <extInt_Config+0x270>)
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	4a7f      	ldr	r2, [pc, #508]	; (8009c74 <extInt_Config+0x270>)
 8009a76:	f023 030f 	bic.w	r3, r3, #15
 8009a7a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a7d      	ldr	r2, [pc, #500]	; (8009c78 <extInt_Config+0x274>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d105      	bne.n	8009a94 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8009a88:	4b7a      	ldr	r3, [pc, #488]	; (8009c74 <extInt_Config+0x270>)
 8009a8a:	4a7a      	ldr	r2, [pc, #488]	; (8009c74 <extInt_Config+0x270>)
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009a90:	f000 bd9a 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a78      	ldr	r2, [pc, #480]	; (8009c7c <extInt_Config+0x278>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d107      	bne.n	8009ab0 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8009aa0:	4b74      	ldr	r3, [pc, #464]	; (8009c74 <extInt_Config+0x270>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	4a73      	ldr	r2, [pc, #460]	; (8009c74 <extInt_Config+0x270>)
 8009aa6:	f043 0301 	orr.w	r3, r3, #1
 8009aaa:	6093      	str	r3, [r2, #8]
					break;
 8009aac:	f000 bd8c 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a72      	ldr	r2, [pc, #456]	; (8009c80 <extInt_Config+0x27c>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d107      	bne.n	8009acc <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8009abc:	4b6d      	ldr	r3, [pc, #436]	; (8009c74 <extInt_Config+0x270>)
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	4a6c      	ldr	r2, [pc, #432]	; (8009c74 <extInt_Config+0x270>)
 8009ac2:	f043 0302 	orr.w	r3, r3, #2
 8009ac6:	6093      	str	r3, [r2, #8]
					break;
 8009ac8:	f000 bd7e 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a6c      	ldr	r2, [pc, #432]	; (8009c84 <extInt_Config+0x280>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d107      	bne.n	8009ae8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8009ad8:	4b66      	ldr	r3, [pc, #408]	; (8009c74 <extInt_Config+0x270>)
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	4a65      	ldr	r2, [pc, #404]	; (8009c74 <extInt_Config+0x270>)
 8009ade:	f043 0303 	orr.w	r3, r3, #3
 8009ae2:	6093      	str	r3, [r2, #8]
					break;
 8009ae4:	f000 bd70 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a66      	ldr	r2, [pc, #408]	; (8009c88 <extInt_Config+0x284>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d107      	bne.n	8009b04 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8009af4:	4b5f      	ldr	r3, [pc, #380]	; (8009c74 <extInt_Config+0x270>)
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	4a5e      	ldr	r2, [pc, #376]	; (8009c74 <extInt_Config+0x270>)
 8009afa:	f043 0304 	orr.w	r3, r3, #4
 8009afe:	6093      	str	r3, [r2, #8]
					break;
 8009b00:	f000 bd62 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a60      	ldr	r2, [pc, #384]	; (8009c8c <extInt_Config+0x288>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d107      	bne.n	8009b20 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8009b10:	4b58      	ldr	r3, [pc, #352]	; (8009c74 <extInt_Config+0x270>)
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	4a57      	ldr	r2, [pc, #348]	; (8009c74 <extInt_Config+0x270>)
 8009b16:	f043 0307 	orr.w	r3, r3, #7
 8009b1a:	6093      	str	r3, [r2, #8]
					break;
 8009b1c:	f000 bd54 	b.w	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 8009b20:	bf00      	nop
					break;
 8009b22:	f000 bd51 	b.w	800a5c8 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8009b26:	4b53      	ldr	r3, [pc, #332]	; (8009c74 <extInt_Config+0x270>)
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	4a52      	ldr	r2, [pc, #328]	; (8009c74 <extInt_Config+0x270>)
 8009b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b30:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a4f      	ldr	r2, [pc, #316]	; (8009c78 <extInt_Config+0x274>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d105      	bne.n	8009b4a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8009b3e:	4b4d      	ldr	r3, [pc, #308]	; (8009c74 <extInt_Config+0x270>)
 8009b40:	4a4c      	ldr	r2, [pc, #304]	; (8009c74 <extInt_Config+0x270>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009b46:	f000 bd3f 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a4a      	ldr	r2, [pc, #296]	; (8009c7c <extInt_Config+0x278>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d107      	bne.n	8009b66 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8009b56:	4b47      	ldr	r3, [pc, #284]	; (8009c74 <extInt_Config+0x270>)
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	4a46      	ldr	r2, [pc, #280]	; (8009c74 <extInt_Config+0x270>)
 8009b5c:	f043 0310 	orr.w	r3, r3, #16
 8009b60:	6093      	str	r3, [r2, #8]
					break;
 8009b62:	f000 bd31 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a44      	ldr	r2, [pc, #272]	; (8009c80 <extInt_Config+0x27c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d107      	bne.n	8009b82 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8009b72:	4b40      	ldr	r3, [pc, #256]	; (8009c74 <extInt_Config+0x270>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	4a3f      	ldr	r2, [pc, #252]	; (8009c74 <extInt_Config+0x270>)
 8009b78:	f043 0320 	orr.w	r3, r3, #32
 8009b7c:	6093      	str	r3, [r2, #8]
					break;
 8009b7e:	f000 bd23 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a3e      	ldr	r2, [pc, #248]	; (8009c84 <extInt_Config+0x280>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d107      	bne.n	8009b9e <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8009b8e:	4b39      	ldr	r3, [pc, #228]	; (8009c74 <extInt_Config+0x270>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	4a38      	ldr	r2, [pc, #224]	; (8009c74 <extInt_Config+0x270>)
 8009b94:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009b98:	6093      	str	r3, [r2, #8]
					break;
 8009b9a:	f000 bd15 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a38      	ldr	r2, [pc, #224]	; (8009c88 <extInt_Config+0x284>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d107      	bne.n	8009bba <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8009baa:	4b32      	ldr	r3, [pc, #200]	; (8009c74 <extInt_Config+0x270>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	4a31      	ldr	r2, [pc, #196]	; (8009c74 <extInt_Config+0x270>)
 8009bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb4:	6093      	str	r3, [r2, #8]
					break;
 8009bb6:	f000 bd07 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a32      	ldr	r2, [pc, #200]	; (8009c8c <extInt_Config+0x288>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d107      	bne.n	8009bd6 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8009bc6:	4b2b      	ldr	r3, [pc, #172]	; (8009c74 <extInt_Config+0x270>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	4a2a      	ldr	r2, [pc, #168]	; (8009c74 <extInt_Config+0x270>)
 8009bcc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009bd0:	6093      	str	r3, [r2, #8]
					break;
 8009bd2:	f000 bcf9 	b.w	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 8009bd6:	bf00      	nop
					break;
 8009bd8:	f000 bcf6 	b.w	800a5c8 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8009bdc:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <extInt_Config+0x270>)
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	4a24      	ldr	r2, [pc, #144]	; (8009c74 <extInt_Config+0x270>)
 8009be2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009be6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a22      	ldr	r2, [pc, #136]	; (8009c78 <extInt_Config+0x274>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d105      	bne.n	8009c00 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8009bf4:	4b1f      	ldr	r3, [pc, #124]	; (8009c74 <extInt_Config+0x270>)
 8009bf6:	4a1f      	ldr	r2, [pc, #124]	; (8009c74 <extInt_Config+0x270>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009bfc:	f000 bce4 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a1d      	ldr	r2, [pc, #116]	; (8009c7c <extInt_Config+0x278>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d107      	bne.n	8009c1c <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8009c0c:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <extInt_Config+0x270>)
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	4a18      	ldr	r2, [pc, #96]	; (8009c74 <extInt_Config+0x270>)
 8009c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c16:	6093      	str	r3, [r2, #8]
					break;
 8009c18:	f000 bcd6 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a17      	ldr	r2, [pc, #92]	; (8009c80 <extInt_Config+0x27c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d107      	bne.n	8009c38 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8009c28:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <extInt_Config+0x270>)
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	4a11      	ldr	r2, [pc, #68]	; (8009c74 <extInt_Config+0x270>)
 8009c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c32:	6093      	str	r3, [r2, #8]
					break;
 8009c34:	f000 bcc8 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a11      	ldr	r2, [pc, #68]	; (8009c84 <extInt_Config+0x280>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d107      	bne.n	8009c54 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8009c44:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <extInt_Config+0x270>)
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	4a0a      	ldr	r2, [pc, #40]	; (8009c74 <extInt_Config+0x270>)
 8009c4a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009c4e:	6093      	str	r3, [r2, #8]
					break;
 8009c50:	f000 bcba 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a0b      	ldr	r2, [pc, #44]	; (8009c88 <extInt_Config+0x284>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d117      	bne.n	8009c90 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <extInt_Config+0x270>)
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	4a03      	ldr	r2, [pc, #12]	; (8009c74 <extInt_Config+0x270>)
 8009c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c6a:	6093      	str	r3, [r2, #8]
					break;
 8009c6c:	f000 bcac 	b.w	800a5c8 <extInt_Config+0xbc4>
 8009c70:	40023800 	.word	0x40023800
 8009c74:	40013800 	.word	0x40013800
 8009c78:	40020000 	.word	0x40020000
 8009c7c:	40020400 	.word	0x40020400
 8009c80:	40020800 	.word	0x40020800
 8009c84:	40020c00 	.word	0x40020c00
 8009c88:	40021000 	.word	0x40021000
 8009c8c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a8a      	ldr	r2, [pc, #552]	; (8009ec0 <extInt_Config+0x4bc>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d107      	bne.n	8009cac <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8009c9c:	4b89      	ldr	r3, [pc, #548]	; (8009ec4 <extInt_Config+0x4c0>)
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	4a88      	ldr	r2, [pc, #544]	; (8009ec4 <extInt_Config+0x4c0>)
 8009ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009ca6:	6093      	str	r3, [r2, #8]
					break;
 8009ca8:	f000 bc8e 	b.w	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 8009cac:	bf00      	nop
					break;
 8009cae:	f000 bc8b 	b.w	800a5c8 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8009cb2:	4b84      	ldr	r3, [pc, #528]	; (8009ec4 <extInt_Config+0x4c0>)
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	4a83      	ldr	r2, [pc, #524]	; (8009ec4 <extInt_Config+0x4c0>)
 8009cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cbc:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a80      	ldr	r2, [pc, #512]	; (8009ec8 <extInt_Config+0x4c4>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d105      	bne.n	8009cd6 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8009cca:	4b7e      	ldr	r3, [pc, #504]	; (8009ec4 <extInt_Config+0x4c0>)
 8009ccc:	4a7d      	ldr	r2, [pc, #500]	; (8009ec4 <extInt_Config+0x4c0>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009cd2:	f000 bc79 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a7b      	ldr	r2, [pc, #492]	; (8009ecc <extInt_Config+0x4c8>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d107      	bne.n	8009cf2 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8009ce2:	4b78      	ldr	r3, [pc, #480]	; (8009ec4 <extInt_Config+0x4c0>)
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	4a77      	ldr	r2, [pc, #476]	; (8009ec4 <extInt_Config+0x4c0>)
 8009ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cec:	6093      	str	r3, [r2, #8]
					break;
 8009cee:	f000 bc6b 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a75      	ldr	r2, [pc, #468]	; (8009ed0 <extInt_Config+0x4cc>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d107      	bne.n	8009d0e <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8009cfe:	4b71      	ldr	r3, [pc, #452]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	4a70      	ldr	r2, [pc, #448]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009d08:	6093      	str	r3, [r2, #8]
					break;
 8009d0a:	f000 bc5d 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a6f      	ldr	r2, [pc, #444]	; (8009ed4 <extInt_Config+0x4d0>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d107      	bne.n	8009d2a <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8009d1a:	4b6a      	ldr	r3, [pc, #424]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	4a69      	ldr	r2, [pc, #420]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d20:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009d24:	6093      	str	r3, [r2, #8]
					break;
 8009d26:	f000 bc4f 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a69      	ldr	r2, [pc, #420]	; (8009ed8 <extInt_Config+0x4d4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d107      	bne.n	8009d46 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8009d36:	4b63      	ldr	r3, [pc, #396]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	4a62      	ldr	r2, [pc, #392]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d40:	6093      	str	r3, [r2, #8]
					break;
 8009d42:	f000 bc41 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a5c      	ldr	r2, [pc, #368]	; (8009ec0 <extInt_Config+0x4bc>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d107      	bne.n	8009d62 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8009d52:	4b5c      	ldr	r3, [pc, #368]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	4a5b      	ldr	r2, [pc, #364]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d58:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009d5c:	6093      	str	r3, [r2, #8]
					break;
 8009d5e:	f000 bc33 	b.w	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 8009d62:	bf00      	nop
					break;
 8009d64:	f000 bc30 	b.w	800a5c8 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8009d68:	4b56      	ldr	r3, [pc, #344]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	4a55      	ldr	r2, [pc, #340]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d6e:	f023 030f 	bic.w	r3, r3, #15
 8009d72:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a53      	ldr	r2, [pc, #332]	; (8009ec8 <extInt_Config+0x4c4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d105      	bne.n	8009d8c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8009d80:	4b50      	ldr	r3, [pc, #320]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d82:	4a50      	ldr	r2, [pc, #320]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009d88:	f000 bc1e 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a4e      	ldr	r2, [pc, #312]	; (8009ecc <extInt_Config+0x4c8>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d107      	bne.n	8009da8 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8009d98:	4b4a      	ldr	r3, [pc, #296]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	4a49      	ldr	r2, [pc, #292]	; (8009ec4 <extInt_Config+0x4c0>)
 8009d9e:	f043 0301 	orr.w	r3, r3, #1
 8009da2:	60d3      	str	r3, [r2, #12]
					break;
 8009da4:	f000 bc10 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a48      	ldr	r2, [pc, #288]	; (8009ed0 <extInt_Config+0x4cc>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d107      	bne.n	8009dc4 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8009db4:	4b43      	ldr	r3, [pc, #268]	; (8009ec4 <extInt_Config+0x4c0>)
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	4a42      	ldr	r2, [pc, #264]	; (8009ec4 <extInt_Config+0x4c0>)
 8009dba:	f043 0302 	orr.w	r3, r3, #2
 8009dbe:	60d3      	str	r3, [r2, #12]
					break;
 8009dc0:	f000 bc02 	b.w	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a42      	ldr	r2, [pc, #264]	; (8009ed4 <extInt_Config+0x4d0>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d106      	bne.n	8009dde <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8009dd0:	4b3c      	ldr	r3, [pc, #240]	; (8009ec4 <extInt_Config+0x4c0>)
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	4a3b      	ldr	r2, [pc, #236]	; (8009ec4 <extInt_Config+0x4c0>)
 8009dd6:	f043 0303 	orr.w	r3, r3, #3
 8009dda:	60d3      	str	r3, [r2, #12]
					break;
 8009ddc:	e3f4      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a3c      	ldr	r2, [pc, #240]	; (8009ed8 <extInt_Config+0x4d4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d106      	bne.n	8009df8 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8009dea:	4b36      	ldr	r3, [pc, #216]	; (8009ec4 <extInt_Config+0x4c0>)
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	4a35      	ldr	r2, [pc, #212]	; (8009ec4 <extInt_Config+0x4c0>)
 8009df0:	f043 0304 	orr.w	r3, r3, #4
 8009df4:	60d3      	str	r3, [r2, #12]
					break;
 8009df6:	e3e7      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a30      	ldr	r2, [pc, #192]	; (8009ec0 <extInt_Config+0x4bc>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d106      	bne.n	8009e12 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8009e04:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	4a2e      	ldr	r2, [pc, #184]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e0a:	f043 0307 	orr.w	r3, r3, #7
 8009e0e:	60d3      	str	r3, [r2, #12]
					break;
 8009e10:	e3da      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 8009e12:	bf00      	nop
					break;
 8009e14:	e3d8      	b.n	800a5c8 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8009e16:	4b2b      	ldr	r3, [pc, #172]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	4a2a      	ldr	r2, [pc, #168]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e20:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a27      	ldr	r2, [pc, #156]	; (8009ec8 <extInt_Config+0x4c4>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d104      	bne.n	8009e38 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8009e2e:	4b25      	ldr	r3, [pc, #148]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e30:	4a24      	ldr	r2, [pc, #144]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009e36:	e3c7      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a23      	ldr	r2, [pc, #140]	; (8009ecc <extInt_Config+0x4c8>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d106      	bne.n	8009e52 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8009e44:	4b1f      	ldr	r3, [pc, #124]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	4a1e      	ldr	r2, [pc, #120]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e4a:	f043 0310 	orr.w	r3, r3, #16
 8009e4e:	60d3      	str	r3, [r2, #12]
					break;
 8009e50:	e3ba      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <extInt_Config+0x4cc>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d106      	bne.n	8009e6c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8009e5e:	4b19      	ldr	r3, [pc, #100]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	4a18      	ldr	r2, [pc, #96]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e64:	f043 0320 	orr.w	r3, r3, #32
 8009e68:	60d3      	str	r3, [r2, #12]
					break;
 8009e6a:	e3ad      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a18      	ldr	r2, [pc, #96]	; (8009ed4 <extInt_Config+0x4d0>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d106      	bne.n	8009e86 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8009e78:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	4a11      	ldr	r2, [pc, #68]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e7e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009e82:	60d3      	str	r3, [r2, #12]
					break;
 8009e84:	e3a0      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a12      	ldr	r2, [pc, #72]	; (8009ed8 <extInt_Config+0x4d4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d106      	bne.n	8009ea0 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8009e92:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	4a0b      	ldr	r2, [pc, #44]	; (8009ec4 <extInt_Config+0x4c0>)
 8009e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9c:	60d3      	str	r3, [r2, #12]
					break;
 8009e9e:	e393      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a06      	ldr	r2, [pc, #24]	; (8009ec0 <extInt_Config+0x4bc>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d106      	bne.n	8009eba <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <extInt_Config+0x4c0>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <extInt_Config+0x4c0>)
 8009eb2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009eb6:	60d3      	str	r3, [r2, #12]
					break;
 8009eb8:	e386      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 8009eba:	bf00      	nop
					break;
 8009ebc:	e384      	b.n	800a5c8 <extInt_Config+0xbc4>
 8009ebe:	bf00      	nop
 8009ec0:	40021c00 	.word	0x40021c00
 8009ec4:	40013800 	.word	0x40013800
 8009ec8:	40020000 	.word	0x40020000
 8009ecc:	40020400 	.word	0x40020400
 8009ed0:	40020800 	.word	0x40020800
 8009ed4:	40020c00 	.word	0x40020c00
 8009ed8:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8009edc:	4b86      	ldr	r3, [pc, #536]	; (800a0f8 <extInt_Config+0x6f4>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	4a85      	ldr	r2, [pc, #532]	; (800a0f8 <extInt_Config+0x6f4>)
 8009ee2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ee6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a83      	ldr	r2, [pc, #524]	; (800a0fc <extInt_Config+0x6f8>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d104      	bne.n	8009efe <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8009ef4:	4b80      	ldr	r3, [pc, #512]	; (800a0f8 <extInt_Config+0x6f4>)
 8009ef6:	4a80      	ldr	r2, [pc, #512]	; (800a0f8 <extInt_Config+0x6f4>)
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009efc:	e364      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a7e      	ldr	r2, [pc, #504]	; (800a100 <extInt_Config+0x6fc>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d106      	bne.n	8009f18 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8009f0a:	4b7b      	ldr	r3, [pc, #492]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	4a7a      	ldr	r2, [pc, #488]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f14:	60d3      	str	r3, [r2, #12]
					break;
 8009f16:	e357      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a79      	ldr	r2, [pc, #484]	; (800a104 <extInt_Config+0x700>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d106      	bne.n	8009f32 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8009f24:	4b74      	ldr	r3, [pc, #464]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	4a73      	ldr	r2, [pc, #460]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f2e:	60d3      	str	r3, [r2, #12]
					break;
 8009f30:	e34a      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a73      	ldr	r2, [pc, #460]	; (800a108 <extInt_Config+0x704>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d106      	bne.n	8009f4c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8009f3e:	4b6e      	ldr	r3, [pc, #440]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	4a6d      	ldr	r2, [pc, #436]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f48:	60d3      	str	r3, [r2, #12]
					break;
 8009f4a:	e33d      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a6e      	ldr	r2, [pc, #440]	; (800a10c <extInt_Config+0x708>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d106      	bne.n	8009f66 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8009f58:	4b67      	ldr	r3, [pc, #412]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	4a66      	ldr	r2, [pc, #408]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f62:	60d3      	str	r3, [r2, #12]
					break;
 8009f64:	e330      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a68      	ldr	r2, [pc, #416]	; (800a110 <extInt_Config+0x70c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d106      	bne.n	8009f80 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8009f72:	4b61      	ldr	r3, [pc, #388]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	4a60      	ldr	r2, [pc, #384]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f78:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009f7c:	60d3      	str	r3, [r2, #12]
					break;
 8009f7e:	e323      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 8009f80:	bf00      	nop
					break;
 8009f82:	e321      	b.n	800a5c8 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8009f84:	4b5c      	ldr	r3, [pc, #368]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	4a5b      	ldr	r2, [pc, #364]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f8e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a59      	ldr	r2, [pc, #356]	; (800a0fc <extInt_Config+0x6f8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d104      	bne.n	8009fa6 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8009f9c:	4b56      	ldr	r3, [pc, #344]	; (800a0f8 <extInt_Config+0x6f4>)
 8009f9e:	4a56      	ldr	r2, [pc, #344]	; (800a0f8 <extInt_Config+0x6f4>)
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009fa4:	e310      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a54      	ldr	r2, [pc, #336]	; (800a100 <extInt_Config+0x6fc>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d106      	bne.n	8009fc0 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8009fb2:	4b51      	ldr	r3, [pc, #324]	; (800a0f8 <extInt_Config+0x6f4>)
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	4a50      	ldr	r2, [pc, #320]	; (800a0f8 <extInt_Config+0x6f4>)
 8009fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fbc:	60d3      	str	r3, [r2, #12]
					break;
 8009fbe:	e303      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a4f      	ldr	r2, [pc, #316]	; (800a104 <extInt_Config+0x700>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d106      	bne.n	8009fda <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8009fcc:	4b4a      	ldr	r3, [pc, #296]	; (800a0f8 <extInt_Config+0x6f4>)
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	4a49      	ldr	r2, [pc, #292]	; (800a0f8 <extInt_Config+0x6f4>)
 8009fd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009fd6:	60d3      	str	r3, [r2, #12]
					break;
 8009fd8:	e2f6      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a49      	ldr	r2, [pc, #292]	; (800a108 <extInt_Config+0x704>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d106      	bne.n	8009ff4 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8009fe6:	4b44      	ldr	r3, [pc, #272]	; (800a0f8 <extInt_Config+0x6f4>)
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	4a43      	ldr	r2, [pc, #268]	; (800a0f8 <extInt_Config+0x6f4>)
 8009fec:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009ff0:	60d3      	str	r3, [r2, #12]
					break;
 8009ff2:	e2e9      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a44      	ldr	r2, [pc, #272]	; (800a10c <extInt_Config+0x708>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d106      	bne.n	800a00e <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800a000:	4b3d      	ldr	r3, [pc, #244]	; (800a0f8 <extInt_Config+0x6f4>)
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	4a3c      	ldr	r2, [pc, #240]	; (800a0f8 <extInt_Config+0x6f4>)
 800a006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a00a:	60d3      	str	r3, [r2, #12]
					break;
 800a00c:	e2dc      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a3e      	ldr	r2, [pc, #248]	; (800a110 <extInt_Config+0x70c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d106      	bne.n	800a028 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800a01a:	4b37      	ldr	r3, [pc, #220]	; (800a0f8 <extInt_Config+0x6f4>)
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	4a36      	ldr	r2, [pc, #216]	; (800a0f8 <extInt_Config+0x6f4>)
 800a020:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a024:	60d3      	str	r3, [r2, #12]
					break;
 800a026:	e2cf      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 800a028:	bf00      	nop
					break;
 800a02a:	e2cd      	b.n	800a5c8 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 800a02c:	4b32      	ldr	r3, [pc, #200]	; (800a0f8 <extInt_Config+0x6f4>)
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	4a31      	ldr	r2, [pc, #196]	; (800a0f8 <extInt_Config+0x6f4>)
 800a032:	f023 030f 	bic.w	r3, r3, #15
 800a036:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a2f      	ldr	r2, [pc, #188]	; (800a0fc <extInt_Config+0x6f8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d104      	bne.n	800a04e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 800a044:	4b2c      	ldr	r3, [pc, #176]	; (800a0f8 <extInt_Config+0x6f4>)
 800a046:	4a2c      	ldr	r2, [pc, #176]	; (800a0f8 <extInt_Config+0x6f4>)
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a04c:	e2bc      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a2a      	ldr	r2, [pc, #168]	; (800a100 <extInt_Config+0x6fc>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d106      	bne.n	800a068 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800a05a:	4b27      	ldr	r3, [pc, #156]	; (800a0f8 <extInt_Config+0x6f4>)
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	4a26      	ldr	r2, [pc, #152]	; (800a0f8 <extInt_Config+0x6f4>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6113      	str	r3, [r2, #16]
					break;
 800a066:	e2af      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a25      	ldr	r2, [pc, #148]	; (800a104 <extInt_Config+0x700>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d106      	bne.n	800a082 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 800a074:	4b20      	ldr	r3, [pc, #128]	; (800a0f8 <extInt_Config+0x6f4>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4a1f      	ldr	r2, [pc, #124]	; (800a0f8 <extInt_Config+0x6f4>)
 800a07a:	f043 0302 	orr.w	r3, r3, #2
 800a07e:	6113      	str	r3, [r2, #16]
					break;
 800a080:	e2a2      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a1f      	ldr	r2, [pc, #124]	; (800a108 <extInt_Config+0x704>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d106      	bne.n	800a09c <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800a08e:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <extInt_Config+0x6f4>)
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	4a19      	ldr	r2, [pc, #100]	; (800a0f8 <extInt_Config+0x6f4>)
 800a094:	f043 0303 	orr.w	r3, r3, #3
 800a098:	6113      	str	r3, [r2, #16]
					break;
 800a09a:	e295      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a1a      	ldr	r2, [pc, #104]	; (800a10c <extInt_Config+0x708>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d106      	bne.n	800a0b6 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800a0a8:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	4a12      	ldr	r2, [pc, #72]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0ae:	f043 0304 	orr.w	r3, r3, #4
 800a0b2:	6113      	str	r3, [r2, #16]
					break;
 800a0b4:	e288      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a14      	ldr	r2, [pc, #80]	; (800a110 <extInt_Config+0x70c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d106      	bne.n	800a0d0 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	4a0c      	ldr	r2, [pc, #48]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0c8:	f043 0307 	orr.w	r3, r3, #7
 800a0cc:	6113      	str	r3, [r2, #16]
					break;
 800a0ce:	e27b      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 800a0d0:	bf00      	nop
					break;
 800a0d2:	e279      	b.n	800a5c8 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 800a0d4:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	4a07      	ldr	r2, [pc, #28]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0de:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <extInt_Config+0x6f8>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d113      	bne.n	800a114 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800a0ec:	4b02      	ldr	r3, [pc, #8]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0ee:	4a02      	ldr	r2, [pc, #8]	; (800a0f8 <extInt_Config+0x6f4>)
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a0f4:	e268      	b.n	800a5c8 <extInt_Config+0xbc4>
 800a0f6:	bf00      	nop
 800a0f8:	40013800 	.word	0x40013800
 800a0fc:	40020000 	.word	0x40020000
 800a100:	40020400 	.word	0x40020400
 800a104:	40020800 	.word	0x40020800
 800a108:	40020c00 	.word	0x40020c00
 800a10c:	40021000 	.word	0x40021000
 800a110:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a83      	ldr	r2, [pc, #524]	; (800a328 <extInt_Config+0x924>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d106      	bne.n	800a12e <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800a120:	4b82      	ldr	r3, [pc, #520]	; (800a32c <extInt_Config+0x928>)
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	4a81      	ldr	r2, [pc, #516]	; (800a32c <extInt_Config+0x928>)
 800a126:	f043 0310 	orr.w	r3, r3, #16
 800a12a:	6113      	str	r3, [r2, #16]
					break;
 800a12c:	e24c      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a7e      	ldr	r2, [pc, #504]	; (800a330 <extInt_Config+0x92c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d106      	bne.n	800a148 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800a13a:	4b7c      	ldr	r3, [pc, #496]	; (800a32c <extInt_Config+0x928>)
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	4a7b      	ldr	r2, [pc, #492]	; (800a32c <extInt_Config+0x928>)
 800a140:	f043 0320 	orr.w	r3, r3, #32
 800a144:	6113      	str	r3, [r2, #16]
					break;
 800a146:	e23f      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a79      	ldr	r2, [pc, #484]	; (800a334 <extInt_Config+0x930>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d106      	bne.n	800a162 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800a154:	4b75      	ldr	r3, [pc, #468]	; (800a32c <extInt_Config+0x928>)
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	4a74      	ldr	r2, [pc, #464]	; (800a32c <extInt_Config+0x928>)
 800a15a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a15e:	6113      	str	r3, [r2, #16]
					break;
 800a160:	e232      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a73      	ldr	r2, [pc, #460]	; (800a338 <extInt_Config+0x934>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d106      	bne.n	800a17c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800a16e:	4b6f      	ldr	r3, [pc, #444]	; (800a32c <extInt_Config+0x928>)
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	4a6e      	ldr	r2, [pc, #440]	; (800a32c <extInt_Config+0x928>)
 800a174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a178:	6113      	str	r3, [r2, #16]
					break;
 800a17a:	e225      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a6e      	ldr	r2, [pc, #440]	; (800a33c <extInt_Config+0x938>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d106      	bne.n	800a196 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800a188:	4b68      	ldr	r3, [pc, #416]	; (800a32c <extInt_Config+0x928>)
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	4a67      	ldr	r2, [pc, #412]	; (800a32c <extInt_Config+0x928>)
 800a18e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a192:	6113      	str	r3, [r2, #16]
					break;
 800a194:	e218      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 800a196:	bf00      	nop
					break;
 800a198:	e216      	b.n	800a5c8 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 800a19a:	4b64      	ldr	r3, [pc, #400]	; (800a32c <extInt_Config+0x928>)
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	4a63      	ldr	r2, [pc, #396]	; (800a32c <extInt_Config+0x928>)
 800a1a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a1a4:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a64      	ldr	r2, [pc, #400]	; (800a340 <extInt_Config+0x93c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d104      	bne.n	800a1bc <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800a1b2:	4b5e      	ldr	r3, [pc, #376]	; (800a32c <extInt_Config+0x928>)
 800a1b4:	4a5d      	ldr	r2, [pc, #372]	; (800a32c <extInt_Config+0x928>)
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a1ba:	e205      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a59      	ldr	r2, [pc, #356]	; (800a328 <extInt_Config+0x924>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d106      	bne.n	800a1d6 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800a1c8:	4b58      	ldr	r3, [pc, #352]	; (800a32c <extInt_Config+0x928>)
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	4a57      	ldr	r2, [pc, #348]	; (800a32c <extInt_Config+0x928>)
 800a1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d2:	6113      	str	r3, [r2, #16]
					break;
 800a1d4:	e1f8      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a54      	ldr	r2, [pc, #336]	; (800a330 <extInt_Config+0x92c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d106      	bne.n	800a1f0 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800a1e2:	4b52      	ldr	r3, [pc, #328]	; (800a32c <extInt_Config+0x928>)
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	4a51      	ldr	r2, [pc, #324]	; (800a32c <extInt_Config+0x928>)
 800a1e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1ec:	6113      	str	r3, [r2, #16]
					break;
 800a1ee:	e1eb      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a4f      	ldr	r2, [pc, #316]	; (800a334 <extInt_Config+0x930>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d106      	bne.n	800a20a <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800a1fc:	4b4b      	ldr	r3, [pc, #300]	; (800a32c <extInt_Config+0x928>)
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	4a4a      	ldr	r2, [pc, #296]	; (800a32c <extInt_Config+0x928>)
 800a202:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a206:	6113      	str	r3, [r2, #16]
					break;
 800a208:	e1de      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a49      	ldr	r2, [pc, #292]	; (800a338 <extInt_Config+0x934>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d106      	bne.n	800a224 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800a216:	4b45      	ldr	r3, [pc, #276]	; (800a32c <extInt_Config+0x928>)
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	4a44      	ldr	r2, [pc, #272]	; (800a32c <extInt_Config+0x928>)
 800a21c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a220:	6113      	str	r3, [r2, #16]
					break;
 800a222:	e1d1      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a44      	ldr	r2, [pc, #272]	; (800a33c <extInt_Config+0x938>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d106      	bne.n	800a23e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800a230:	4b3e      	ldr	r3, [pc, #248]	; (800a32c <extInt_Config+0x928>)
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	4a3d      	ldr	r2, [pc, #244]	; (800a32c <extInt_Config+0x928>)
 800a236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a23a:	6113      	str	r3, [r2, #16]
					break;
 800a23c:	e1c4      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 800a23e:	bf00      	nop
					break;
 800a240:	e1c2      	b.n	800a5c8 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 800a242:	4b3a      	ldr	r3, [pc, #232]	; (800a32c <extInt_Config+0x928>)
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	4a39      	ldr	r2, [pc, #228]	; (800a32c <extInt_Config+0x928>)
 800a248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a24c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a3a      	ldr	r2, [pc, #232]	; (800a340 <extInt_Config+0x93c>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d104      	bne.n	800a264 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800a25a:	4b34      	ldr	r3, [pc, #208]	; (800a32c <extInt_Config+0x928>)
 800a25c:	4a33      	ldr	r2, [pc, #204]	; (800a32c <extInt_Config+0x928>)
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a262:	e1b1      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a2f      	ldr	r2, [pc, #188]	; (800a328 <extInt_Config+0x924>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d106      	bne.n	800a27e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 800a270:	4b2e      	ldr	r3, [pc, #184]	; (800a32c <extInt_Config+0x928>)
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	4a2d      	ldr	r2, [pc, #180]	; (800a32c <extInt_Config+0x928>)
 800a276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a27a:	6113      	str	r3, [r2, #16]
					break;
 800a27c:	e1a4      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a2a      	ldr	r2, [pc, #168]	; (800a330 <extInt_Config+0x92c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d106      	bne.n	800a298 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800a28a:	4b28      	ldr	r3, [pc, #160]	; (800a32c <extInt_Config+0x928>)
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	4a27      	ldr	r2, [pc, #156]	; (800a32c <extInt_Config+0x928>)
 800a290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a294:	6113      	str	r3, [r2, #16]
					break;
 800a296:	e197      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a25      	ldr	r2, [pc, #148]	; (800a334 <extInt_Config+0x930>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d106      	bne.n	800a2b2 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800a2a4:	4b21      	ldr	r3, [pc, #132]	; (800a32c <extInt_Config+0x928>)
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	4a20      	ldr	r2, [pc, #128]	; (800a32c <extInt_Config+0x928>)
 800a2aa:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a2ae:	6113      	str	r3, [r2, #16]
					break;
 800a2b0:	e18a      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1f      	ldr	r2, [pc, #124]	; (800a338 <extInt_Config+0x934>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d106      	bne.n	800a2cc <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800a2be:	4b1b      	ldr	r3, [pc, #108]	; (800a32c <extInt_Config+0x928>)
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	4a1a      	ldr	r2, [pc, #104]	; (800a32c <extInt_Config+0x928>)
 800a2c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2c8:	6113      	str	r3, [r2, #16]
					break;
 800a2ca:	e17d      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a1a      	ldr	r2, [pc, #104]	; (800a33c <extInt_Config+0x938>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d106      	bne.n	800a2e6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800a2d8:	4b14      	ldr	r3, [pc, #80]	; (800a32c <extInt_Config+0x928>)
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	4a13      	ldr	r2, [pc, #76]	; (800a32c <extInt_Config+0x928>)
 800a2de:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a2e2:	6113      	str	r3, [r2, #16]
					break;
 800a2e4:	e170      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 800a2e6:	bf00      	nop
					break;
 800a2e8:	e16e      	b.n	800a5c8 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800a2ea:	4b10      	ldr	r3, [pc, #64]	; (800a32c <extInt_Config+0x928>)
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	4a0f      	ldr	r2, [pc, #60]	; (800a32c <extInt_Config+0x928>)
 800a2f0:	f023 030f 	bic.w	r3, r3, #15
 800a2f4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a10      	ldr	r2, [pc, #64]	; (800a340 <extInt_Config+0x93c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d104      	bne.n	800a30c <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800a302:	4b0a      	ldr	r3, [pc, #40]	; (800a32c <extInt_Config+0x928>)
 800a304:	4a09      	ldr	r2, [pc, #36]	; (800a32c <extInt_Config+0x928>)
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a30a:	e15d      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a05      	ldr	r2, [pc, #20]	; (800a328 <extInt_Config+0x924>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d115      	bne.n	800a344 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800a318:	4b04      	ldr	r3, [pc, #16]	; (800a32c <extInt_Config+0x928>)
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	4a03      	ldr	r2, [pc, #12]	; (800a32c <extInt_Config+0x928>)
 800a31e:	f043 0301 	orr.w	r3, r3, #1
 800a322:	6153      	str	r3, [r2, #20]
					break;
 800a324:	e150      	b.n	800a5c8 <extInt_Config+0xbc4>
 800a326:	bf00      	nop
 800a328:	40020400 	.word	0x40020400
 800a32c:	40013800 	.word	0x40013800
 800a330:	40020800 	.word	0x40020800
 800a334:	40020c00 	.word	0x40020c00
 800a338:	40021000 	.word	0x40021000
 800a33c:	40021c00 	.word	0x40021c00
 800a340:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a89      	ldr	r2, [pc, #548]	; (800a570 <extInt_Config+0xb6c>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d106      	bne.n	800a35e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800a350:	4b88      	ldr	r3, [pc, #544]	; (800a574 <extInt_Config+0xb70>)
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	4a87      	ldr	r2, [pc, #540]	; (800a574 <extInt_Config+0xb70>)
 800a356:	f043 0302 	orr.w	r3, r3, #2
 800a35a:	6153      	str	r3, [r2, #20]
					break;
 800a35c:	e134      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a84      	ldr	r2, [pc, #528]	; (800a578 <extInt_Config+0xb74>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d106      	bne.n	800a378 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800a36a:	4b82      	ldr	r3, [pc, #520]	; (800a574 <extInt_Config+0xb70>)
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	4a81      	ldr	r2, [pc, #516]	; (800a574 <extInt_Config+0xb70>)
 800a370:	f043 0303 	orr.w	r3, r3, #3
 800a374:	6153      	str	r3, [r2, #20]
					break;
 800a376:	e127      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a7f      	ldr	r2, [pc, #508]	; (800a57c <extInt_Config+0xb78>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d106      	bne.n	800a392 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 800a384:	4b7b      	ldr	r3, [pc, #492]	; (800a574 <extInt_Config+0xb70>)
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	4a7a      	ldr	r2, [pc, #488]	; (800a574 <extInt_Config+0xb70>)
 800a38a:	f043 0304 	orr.w	r3, r3, #4
 800a38e:	6153      	str	r3, [r2, #20]
					break;
 800a390:	e11a      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a79      	ldr	r2, [pc, #484]	; (800a580 <extInt_Config+0xb7c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d106      	bne.n	800a3ac <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800a39e:	4b75      	ldr	r3, [pc, #468]	; (800a574 <extInt_Config+0xb70>)
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	4a74      	ldr	r2, [pc, #464]	; (800a574 <extInt_Config+0xb70>)
 800a3a4:	f043 0307 	orr.w	r3, r3, #7
 800a3a8:	6153      	str	r3, [r2, #20]
					break;
 800a3aa:	e10d      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 800a3ac:	bf00      	nop
					break;
 800a3ae:	e10b      	b.n	800a5c8 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 800a3b0:	4b70      	ldr	r3, [pc, #448]	; (800a574 <extInt_Config+0xb70>)
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	4a6f      	ldr	r2, [pc, #444]	; (800a574 <extInt_Config+0xb70>)
 800a3b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3ba:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a70      	ldr	r2, [pc, #448]	; (800a584 <extInt_Config+0xb80>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d104      	bne.n	800a3d2 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800a3c8:	4b6a      	ldr	r3, [pc, #424]	; (800a574 <extInt_Config+0xb70>)
 800a3ca:	4a6a      	ldr	r2, [pc, #424]	; (800a574 <extInt_Config+0xb70>)
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	6153      	str	r3, [r2, #20]
 800a3d0:	e041      	b.n	800a456 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a6b      	ldr	r2, [pc, #428]	; (800a588 <extInt_Config+0xb84>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d106      	bne.n	800a3ec <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800a3de:	4b65      	ldr	r3, [pc, #404]	; (800a574 <extInt_Config+0xb70>)
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	4a64      	ldr	r2, [pc, #400]	; (800a574 <extInt_Config+0xb70>)
 800a3e4:	f043 0310 	orr.w	r3, r3, #16
 800a3e8:	6153      	str	r3, [r2, #20]
 800a3ea:	e034      	b.n	800a456 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a5f      	ldr	r2, [pc, #380]	; (800a570 <extInt_Config+0xb6c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d106      	bne.n	800a406 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800a3f8:	4b5e      	ldr	r3, [pc, #376]	; (800a574 <extInt_Config+0xb70>)
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	4a5d      	ldr	r2, [pc, #372]	; (800a574 <extInt_Config+0xb70>)
 800a3fe:	f043 0320 	orr.w	r3, r3, #32
 800a402:	6153      	str	r3, [r2, #20]
 800a404:	e027      	b.n	800a456 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a5a      	ldr	r2, [pc, #360]	; (800a578 <extInt_Config+0xb74>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d106      	bne.n	800a420 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800a412:	4b58      	ldr	r3, [pc, #352]	; (800a574 <extInt_Config+0xb70>)
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	4a57      	ldr	r2, [pc, #348]	; (800a574 <extInt_Config+0xb70>)
 800a418:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a41c:	6153      	str	r3, [r2, #20]
 800a41e:	e01a      	b.n	800a456 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a55      	ldr	r2, [pc, #340]	; (800a57c <extInt_Config+0xb78>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d106      	bne.n	800a43a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800a42c:	4b51      	ldr	r3, [pc, #324]	; (800a574 <extInt_Config+0xb70>)
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	4a50      	ldr	r2, [pc, #320]	; (800a574 <extInt_Config+0xb70>)
 800a432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a436:	6153      	str	r3, [r2, #20]
 800a438:	e00d      	b.n	800a456 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a4f      	ldr	r2, [pc, #316]	; (800a580 <extInt_Config+0xb7c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d106      	bne.n	800a454 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800a446:	4b4b      	ldr	r3, [pc, #300]	; (800a574 <extInt_Config+0xb70>)
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	4a4a      	ldr	r2, [pc, #296]	; (800a574 <extInt_Config+0xb70>)
 800a44c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a450:	6153      	str	r3, [r2, #20]
 800a452:	e000      	b.n	800a456 <extInt_Config+0xa52>

					} else {
						__NOP();
 800a454:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 800a456:	4b47      	ldr	r3, [pc, #284]	; (800a574 <extInt_Config+0xb70>)
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	4a46      	ldr	r2, [pc, #280]	; (800a574 <extInt_Config+0xb70>)
 800a45c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a460:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a46      	ldr	r2, [pc, #280]	; (800a584 <extInt_Config+0xb80>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d104      	bne.n	800a478 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800a46e:	4b41      	ldr	r3, [pc, #260]	; (800a574 <extInt_Config+0xb70>)
 800a470:	4a40      	ldr	r2, [pc, #256]	; (800a574 <extInt_Config+0xb70>)
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a476:	e0a7      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a42      	ldr	r2, [pc, #264]	; (800a588 <extInt_Config+0xb84>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d106      	bne.n	800a492 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800a484:	4b3b      	ldr	r3, [pc, #236]	; (800a574 <extInt_Config+0xb70>)
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	4a3a      	ldr	r2, [pc, #232]	; (800a574 <extInt_Config+0xb70>)
 800a48a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a48e:	6153      	str	r3, [r2, #20]
					break;
 800a490:	e09a      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a35      	ldr	r2, [pc, #212]	; (800a570 <extInt_Config+0xb6c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d106      	bne.n	800a4ac <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800a49e:	4b35      	ldr	r3, [pc, #212]	; (800a574 <extInt_Config+0xb70>)
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	4a34      	ldr	r2, [pc, #208]	; (800a574 <extInt_Config+0xb70>)
 800a4a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4a8:	6153      	str	r3, [r2, #20]
					break;
 800a4aa:	e08d      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a31      	ldr	r2, [pc, #196]	; (800a578 <extInt_Config+0xb74>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d106      	bne.n	800a4c6 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800a4b8:	4b2e      	ldr	r3, [pc, #184]	; (800a574 <extInt_Config+0xb70>)
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	4a2d      	ldr	r2, [pc, #180]	; (800a574 <extInt_Config+0xb70>)
 800a4be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a4c2:	6153      	str	r3, [r2, #20]
					break;
 800a4c4:	e080      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a2b      	ldr	r2, [pc, #172]	; (800a57c <extInt_Config+0xb78>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d106      	bne.n	800a4e0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800a4d2:	4b28      	ldr	r3, [pc, #160]	; (800a574 <extInt_Config+0xb70>)
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	4a27      	ldr	r2, [pc, #156]	; (800a574 <extInt_Config+0xb70>)
 800a4d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4dc:	6153      	str	r3, [r2, #20]
					break;
 800a4de:	e073      	b.n	800a5c8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a26      	ldr	r2, [pc, #152]	; (800a580 <extInt_Config+0xb7c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d106      	bne.n	800a4fa <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800a4ec:	4b21      	ldr	r3, [pc, #132]	; (800a574 <extInt_Config+0xb70>)
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	4a20      	ldr	r2, [pc, #128]	; (800a574 <extInt_Config+0xb70>)
 800a4f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a4f6:	6153      	str	r3, [r2, #20]
					break;
 800a4f8:	e066      	b.n	800a5c8 <extInt_Config+0xbc4>
						__NOP();
 800a4fa:	bf00      	nop
					break;
 800a4fc:	e064      	b.n	800a5c8 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800a4fe:	4b1d      	ldr	r3, [pc, #116]	; (800a574 <extInt_Config+0xb70>)
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	4a1c      	ldr	r2, [pc, #112]	; (800a574 <extInt_Config+0xb70>)
 800a504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a508:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <extInt_Config+0xb80>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d104      	bne.n	800a520 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800a516:	4b17      	ldr	r3, [pc, #92]	; (800a574 <extInt_Config+0xb70>)
 800a518:	4a16      	ldr	r2, [pc, #88]	; (800a574 <extInt_Config+0xb70>)
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800a51e:	e053      	b.n	800a5c8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a18      	ldr	r2, [pc, #96]	; (800a588 <extInt_Config+0xb84>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d106      	bne.n	800a53a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800a52c:	4b11      	ldr	r3, [pc, #68]	; (800a574 <extInt_Config+0xb70>)
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	4a10      	ldr	r2, [pc, #64]	; (800a574 <extInt_Config+0xb70>)
 800a532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a536:	6153      	str	r3, [r2, #20]
						break;
 800a538:	e046      	b.n	800a5c8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a0b      	ldr	r2, [pc, #44]	; (800a570 <extInt_Config+0xb6c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d106      	bne.n	800a554 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800a546:	4b0b      	ldr	r3, [pc, #44]	; (800a574 <extInt_Config+0xb70>)
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	4a0a      	ldr	r2, [pc, #40]	; (800a574 <extInt_Config+0xb70>)
 800a54c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a550:	6153      	str	r3, [r2, #20]
						break;
 800a552:	e039      	b.n	800a5c8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a07      	ldr	r2, [pc, #28]	; (800a578 <extInt_Config+0xb74>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d115      	bne.n	800a58c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 800a560:	4b04      	ldr	r3, [pc, #16]	; (800a574 <extInt_Config+0xb70>)
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	4a03      	ldr	r2, [pc, #12]	; (800a574 <extInt_Config+0xb70>)
 800a566:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a56a:	6153      	str	r3, [r2, #20]
						break;
 800a56c:	e02c      	b.n	800a5c8 <extInt_Config+0xbc4>
 800a56e:	bf00      	nop
 800a570:	40020800 	.word	0x40020800
 800a574:	40013800 	.word	0x40013800
 800a578:	40020c00 	.word	0x40020c00
 800a57c:	40021000 	.word	0x40021000
 800a580:	40021c00 	.word	0x40021c00
 800a584:	40020000 	.word	0x40020000
 800a588:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a6c      	ldr	r2, [pc, #432]	; (800a744 <extInt_Config+0xd40>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d106      	bne.n	800a5a6 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800a598:	4b6b      	ldr	r3, [pc, #428]	; (800a748 <extInt_Config+0xd44>)
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	4a6a      	ldr	r2, [pc, #424]	; (800a748 <extInt_Config+0xd44>)
 800a59e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5a2:	6153      	str	r3, [r2, #20]
						break;
 800a5a4:	e010      	b.n	800a5c8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a67      	ldr	r2, [pc, #412]	; (800a74c <extInt_Config+0xd48>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d106      	bne.n	800a5c0 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800a5b2:	4b65      	ldr	r3, [pc, #404]	; (800a748 <extInt_Config+0xd44>)
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	4a64      	ldr	r2, [pc, #400]	; (800a748 <extInt_Config+0xd44>)
 800a5b8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a5bc:	6153      	str	r3, [r2, #20]
						break;
 800a5be:	e003      	b.n	800a5c8 <extInt_Config+0xbc4>
							__NOP();
 800a5c0:	bf00      	nop
						break;
 800a5c2:	e001      	b.n	800a5c8 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 800a5c4:	bf00      	nop
						break;
 800a5c6:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	791b      	ldrb	r3, [r3, #4]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d020      	beq.n	800a612 <extInt_Config+0xc0e>
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	dc37      	bgt.n	800a644 <extInt_Config+0xc40>
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <extInt_Config+0xbda>
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d00d      	beq.n	800a5f8 <extInt_Config+0xbf4>
 800a5dc:	e032      	b.n	800a644 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5de:	4b5c      	ldr	r3, [pc, #368]	; (800a750 <extInt_Config+0xd4c>)
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	6812      	ldr	r2, [r2, #0]
 800a5e6:	7912      	ldrb	r2, [r2, #4]
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	408a      	lsls	r2, r1
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	4a57      	ldr	r2, [pc, #348]	; (800a750 <extInt_Config+0xd4c>)
 800a5f2:	430b      	orrs	r3, r1
 800a5f4:	60d3      	str	r3, [r2, #12]

		break;
 800a5f6:	e027      	b.n	800a648 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5f8:	4b55      	ldr	r3, [pc, #340]	; (800a750 <extInt_Config+0xd4c>)
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	6812      	ldr	r2, [r2, #0]
 800a600:	7912      	ldrb	r2, [r2, #4]
 800a602:	4611      	mov	r1, r2
 800a604:	2201      	movs	r2, #1
 800a606:	408a      	lsls	r2, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	4a51      	ldr	r2, [pc, #324]	; (800a750 <extInt_Config+0xd4c>)
 800a60c:	430b      	orrs	r3, r1
 800a60e:	6093      	str	r3, [r2, #8]

		break;
 800a610:	e01a      	b.n	800a648 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a612:	4b4f      	ldr	r3, [pc, #316]	; (800a750 <extInt_Config+0xd4c>)
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6812      	ldr	r2, [r2, #0]
 800a61a:	7912      	ldrb	r2, [r2, #4]
 800a61c:	4611      	mov	r1, r2
 800a61e:	2201      	movs	r2, #1
 800a620:	408a      	lsls	r2, r1
 800a622:	4611      	mov	r1, r2
 800a624:	4a4a      	ldr	r2, [pc, #296]	; (800a750 <extInt_Config+0xd4c>)
 800a626:	430b      	orrs	r3, r1
 800a628:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a62a:	4b49      	ldr	r3, [pc, #292]	; (800a750 <extInt_Config+0xd4c>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6812      	ldr	r2, [r2, #0]
 800a632:	7912      	ldrb	r2, [r2, #4]
 800a634:	4611      	mov	r1, r2
 800a636:	2201      	movs	r2, #1
 800a638:	408a      	lsls	r2, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	4a44      	ldr	r2, [pc, #272]	; (800a750 <extInt_Config+0xd4c>)
 800a63e:	430b      	orrs	r3, r1
 800a640:	6093      	str	r3, [r2, #8]

		break;
 800a642:	e001      	b.n	800a648 <extInt_Config+0xc44>

	}default :{

		__NOP();
 800a644:	bf00      	nop
		break;
 800a646:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800a648:	b672      	cpsid	i
}
 800a64a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a64c:	4b40      	ldr	r3, [pc, #256]	; (800a750 <extInt_Config+0xd4c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	7912      	ldrb	r2, [r2, #4]
 800a656:	4611      	mov	r1, r2
 800a658:	2201      	movs	r2, #1
 800a65a:	408a      	lsls	r2, r1
 800a65c:	4611      	mov	r1, r2
 800a65e:	4a3c      	ldr	r2, [pc, #240]	; (800a750 <extInt_Config+0xd4c>)
 800a660:	430b      	orrs	r3, r1
 800a662:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	791b      	ldrb	r3, [r3, #4]
 800a66a:	2b0f      	cmp	r3, #15
 800a66c:	d862      	bhi.n	800a734 <extInt_Config+0xd30>
 800a66e:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <extInt_Config+0xc70>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a6b5 	.word	0x0800a6b5
 800a678:	0800a6bd 	.word	0x0800a6bd
 800a67c:	0800a6c5 	.word	0x0800a6c5
 800a680:	0800a6cd 	.word	0x0800a6cd
 800a684:	0800a6d5 	.word	0x0800a6d5
 800a688:	0800a6dd 	.word	0x0800a6dd
 800a68c:	0800a6e5 	.word	0x0800a6e5
 800a690:	0800a6ed 	.word	0x0800a6ed
 800a694:	0800a6f5 	.word	0x0800a6f5
 800a698:	0800a6fd 	.word	0x0800a6fd
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a70d 	.word	0x0800a70d
 800a6a4:	0800a715 	.word	0x0800a715
 800a6a8:	0800a71d 	.word	0x0800a71d
 800a6ac:	0800a725 	.word	0x0800a725
 800a6b0:	0800a72d 	.word	0x0800a72d
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 800a6b4:	2006      	movs	r0, #6
 800a6b6:	f7ff f95d 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6ba:	e03d      	b.n	800a738 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800a6bc:	2007      	movs	r0, #7
 800a6be:	f7ff f959 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6c2:	e039      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 800a6c4:	2008      	movs	r0, #8
 800a6c6:	f7ff f955 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6ca:	e035      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800a6cc:	2009      	movs	r0, #9
 800a6ce:	f7ff f951 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6d2:	e031      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 800a6d4:	200a      	movs	r0, #10
 800a6d6:	f7ff f94d 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6da:	e02d      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a6dc:	2017      	movs	r0, #23
 800a6de:	f7ff f949 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6e2:	e029      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a6e4:	2017      	movs	r0, #23
 800a6e6:	f7ff f945 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6ea:	e025      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a6ec:	2017      	movs	r0, #23
 800a6ee:	f7ff f941 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6f2:	e021      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a6f4:	2017      	movs	r0, #23
 800a6f6:	f7ff f93d 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a6fa:	e01d      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a6fc:	2017      	movs	r0, #23
 800a6fe:	f7ff f939 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a702:	e019      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a704:	2028      	movs	r0, #40	; 0x28
 800a706:	f7ff f935 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a70a:	e015      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a70c:	2028      	movs	r0, #40	; 0x28
 800a70e:	f7ff f931 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a712:	e011      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a714:	2028      	movs	r0, #40	; 0x28
 800a716:	f7ff f92d 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a71a:	e00d      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a71c:	2028      	movs	r0, #40	; 0x28
 800a71e:	f7ff f929 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a722:	e009      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a724:	2028      	movs	r0, #40	; 0x28
 800a726:	f7ff f925 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a72a:	e005      	b.n	800a738 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a72c:	2028      	movs	r0, #40	; 0x28
 800a72e:	f7ff f921 	bl	8009974 <__NVIC_EnableIRQ>
			break;
 800a732:	e001      	b.n	800a738 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 800a734:	bf00      	nop
			break;
 800a736:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a738:	b662      	cpsie	i
}
 800a73a:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	40021000 	.word	0x40021000
 800a748:	40013800 	.word	0x40013800
 800a74c:	40021c00 	.word	0x40021c00
 800a750:	40013c00 	.word	0x40013c00

0800a754 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	460b      	mov	r3, r1
 800a75e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a760:	b672      	cpsid	i
}
 800a762:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	791b      	ldrb	r3, [r3, #4]
 800a76a:	2b0f      	cmp	r3, #15
 800a76c:	f200 8084 	bhi.w	800a878 <exti_Set_Priority+0x124>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <exti_Set_Priority+0x24>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a7b9 	.word	0x0800a7b9
 800a77c:	0800a7c5 	.word	0x0800a7c5
 800a780:	0800a7d1 	.word	0x0800a7d1
 800a784:	0800a7dd 	.word	0x0800a7dd
 800a788:	0800a7e9 	.word	0x0800a7e9
 800a78c:	0800a7f5 	.word	0x0800a7f5
 800a790:	0800a801 	.word	0x0800a801
 800a794:	0800a80d 	.word	0x0800a80d
 800a798:	0800a819 	.word	0x0800a819
 800a79c:	0800a825 	.word	0x0800a825
 800a7a0:	0800a831 	.word	0x0800a831
 800a7a4:	0800a83d 	.word	0x0800a83d
 800a7a8:	0800a849 	.word	0x0800a849
 800a7ac:	0800a855 	.word	0x0800a855
 800a7b0:	0800a861 	.word	0x0800a861
 800a7b4:	0800a86d 	.word	0x0800a86d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	2006      	movs	r0, #6
 800a7be:	f7ff f8f7 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a7c2:	e05b      	b.n	800a87c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	2007      	movs	r0, #7
 800a7ca:	f7ff f8f1 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a7ce:	e055      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	2008      	movs	r0, #8
 800a7d6:	f7ff f8eb 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a7da:	e04f      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800a7dc:	78fb      	ldrb	r3, [r7, #3]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	2009      	movs	r0, #9
 800a7e2:	f7ff f8e5 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a7e6:	e049      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	200a      	movs	r0, #10
 800a7ee:	f7ff f8df 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a7f2:	e043      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	2017      	movs	r0, #23
 800a7fa:	f7ff f8d9 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a7fe:	e03d      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	4619      	mov	r1, r3
 800a804:	2017      	movs	r0, #23
 800a806:	f7ff f8d3 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a80a:	e037      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	4619      	mov	r1, r3
 800a810:	2017      	movs	r0, #23
 800a812:	f7ff f8cd 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a816:	e031      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	4619      	mov	r1, r3
 800a81c:	2017      	movs	r0, #23
 800a81e:	f7ff f8c7 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a822:	e02b      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	4619      	mov	r1, r3
 800a828:	2017      	movs	r0, #23
 800a82a:	f7ff f8c1 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a82e:	e025      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	4619      	mov	r1, r3
 800a834:	2028      	movs	r0, #40	; 0x28
 800a836:	f7ff f8bb 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a83a:	e01f      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	4619      	mov	r1, r3
 800a840:	2028      	movs	r0, #40	; 0x28
 800a842:	f7ff f8b5 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a846:	e019      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	4619      	mov	r1, r3
 800a84c:	2028      	movs	r0, #40	; 0x28
 800a84e:	f7ff f8af 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a852:	e013      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	4619      	mov	r1, r3
 800a858:	2028      	movs	r0, #40	; 0x28
 800a85a:	f7ff f8a9 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a85e:	e00d      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	4619      	mov	r1, r3
 800a864:	2028      	movs	r0, #40	; 0x28
 800a866:	f7ff f8a3 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a86a:	e007      	b.n	800a87c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	4619      	mov	r1, r3
 800a870:	2028      	movs	r0, #40	; 0x28
 800a872:	f7ff f89d 	bl	80099b0 <__NVIC_SetPriority>
				break;
 800a876:	e001      	b.n	800a87c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 800a878:	bf00      	nop
				break;
 800a87a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a87c:	b662      	cpsie	i
}
 800a87e:	bf00      	nop

		}

	__enable_irq();

}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0
	__NOP();
 800a88c:	bf00      	nop
}
 800a88e:	bf00      	nop
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
	__NOP();
 800a89c:	bf00      	nop
}
 800a89e:	bf00      	nop
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0
	__NOP();
 800a8ac:	bf00      	nop
}
 800a8ae:	bf00      	nop
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 800a8b8:	b480      	push	{r7}
 800a8ba:	af00      	add	r7, sp, #0
	__NOP();
 800a8bc:	bf00      	nop
}
 800a8be:	bf00      	nop
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
	__NOP();
 800a8cc:	bf00      	nop
}
 800a8ce:	bf00      	nop
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
	__NOP();
 800a8dc:	bf00      	nop
}
 800a8de:	bf00      	nop
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
	__NOP();
 800a8ec:	bf00      	nop
}
 800a8ee:	bf00      	nop
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
	__NOP();
 800a8fc:	bf00      	nop
}
 800a8fe:	bf00      	nop
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
	__NOP();
 800a90c:	bf00      	nop
}
 800a90e:	bf00      	nop
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 800a918:	b480      	push	{r7}
 800a91a:	af00      	add	r7, sp, #0
	__NOP();
 800a91c:	bf00      	nop
}
 800a91e:	bf00      	nop
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
	__NOP();
 800a92c:	bf00      	nop
}
 800a92e:	bf00      	nop
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0
	__NOP();
 800a93c:	bf00      	nop
}
 800a93e:	bf00      	nop
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
	__NOP();
 800a94c:	bf00      	nop
}
 800a94e:	bf00      	nop
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
	__NOP();
 800a95c:	bf00      	nop
}
 800a95e:	bf00      	nop
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800a96c:	4b07      	ldr	r3, [pc, #28]	; (800a98c <EXTI0_IRQHandler+0x24>)
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	d007      	beq.n	800a988 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <EXTI0_IRQHandler+0x24>)
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	4a03      	ldr	r2, [pc, #12]	; (800a98c <EXTI0_IRQHandler+0x24>)
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 800a984:	f7ff ff80 	bl	800a888 <callback_extInt0>
	}
}
 800a988:	bf00      	nop
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	40013c00 	.word	0x40013c00

0800a990 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 800a994:	4b07      	ldr	r3, [pc, #28]	; (800a9b4 <EXTI1_IRQHandler+0x24>)
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	f003 0302 	and.w	r3, r3, #2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d007      	beq.n	800a9b0 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 800a9a0:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <EXTI1_IRQHandler+0x24>)
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	4a03      	ldr	r2, [pc, #12]	; (800a9b4 <EXTI1_IRQHandler+0x24>)
 800a9a6:	f043 0302 	orr.w	r3, r3, #2
 800a9aa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800a9ac:	f7f8 f81c 	bl	80029e8 <callback_extInt1>
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	40013c00 	.word	0x40013c00

0800a9b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800a9bc:	4b07      	ldr	r3, [pc, #28]	; (800a9dc <EXTI2_IRQHandler+0x24>)
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d007      	beq.n	800a9d8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 800a9c8:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <EXTI2_IRQHandler+0x24>)
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	4a03      	ldr	r2, [pc, #12]	; (800a9dc <EXTI2_IRQHandler+0x24>)
 800a9ce:	f043 0304 	orr.w	r3, r3, #4
 800a9d2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 800a9d4:	f7ff ff60 	bl	800a898 <callback_extInt2>
	}
}
 800a9d8:	bf00      	nop
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	40013c00 	.word	0x40013c00

0800a9e0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 800a9e4:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <EXTI3_IRQHandler+0x24>)
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	f003 0308 	and.w	r3, r3, #8
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d007      	beq.n	800aa00 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <EXTI3_IRQHandler+0x24>)
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	4a03      	ldr	r2, [pc, #12]	; (800aa04 <EXTI3_IRQHandler+0x24>)
 800a9f6:	f043 0308 	orr.w	r3, r3, #8
 800a9fa:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800a9fc:	f7f8 f80a 	bl	8002a14 <callback_extInt3>
	}
}
 800aa00:	bf00      	nop
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	40013c00 	.word	0x40013c00

0800aa08 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800aa0c:	4b07      	ldr	r3, [pc, #28]	; (800aa2c <EXTI4_IRQHandler+0x24>)
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	f003 0310 	and.w	r3, r3, #16
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d007      	beq.n	800aa28 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 800aa18:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <EXTI4_IRQHandler+0x24>)
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	4a03      	ldr	r2, [pc, #12]	; (800aa2c <EXTI4_IRQHandler+0x24>)
 800aa1e:	f043 0310 	orr.w	r3, r3, #16
 800aa22:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800aa24:	f7ff ff40 	bl	800a8a8 <callback_extInt4>
	}
}
 800aa28:	bf00      	nop
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	40013c00 	.word	0x40013c00

0800aa30 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800aa34:	4b26      	ldr	r3, [pc, #152]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d008      	beq.n	800aa52 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 800aa40:	4b23      	ldr	r3, [pc, #140]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	4a22      	ldr	r2, [pc, #136]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa46:	f043 0320 	orr.w	r3, r3, #32
 800aa4a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800aa4c:	f7ff ff34 	bl	800a8b8 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 800aa50:	e03c      	b.n	800aacc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800aa52:	4b1f      	ldr	r3, [pc, #124]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d008      	beq.n	800aa70 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800aa5e:	4b1c      	ldr	r3, [pc, #112]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	4a1b      	ldr	r2, [pc, #108]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa68:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800aa6a:	f7ff ff2d 	bl	800a8c8 <callback_extInt6>
}
 800aa6e:	e02d      	b.n	800aacc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 800aa70:	4b17      	ldr	r3, [pc, #92]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d008      	beq.n	800aa8e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800aa7c:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	4a13      	ldr	r2, [pc, #76]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa86:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 800aa88:	f7ff ff26 	bl	800a8d8 <callback_extInt7>
}
 800aa8c:	e01e      	b.n	800aacc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800aa8e:	4b10      	ldr	r3, [pc, #64]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d008      	beq.n	800aaac <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800aa9a:	4b0d      	ldr	r3, [pc, #52]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	4a0c      	ldr	r2, [pc, #48]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aaa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaa4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 800aaa6:	f7ff ff1f 	bl	800a8e8 <callback_extInt8>
}
 800aaaa:	e00f      	b.n	800aacc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800aaac:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d008      	beq.n	800aaca <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	4a04      	ldr	r2, [pc, #16]	; (800aad0 <EXTI9_5_IRQHandler+0xa0>)
 800aabe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aac2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 800aac4:	f7ff ff18 	bl	800a8f8 <callback_extInt9>
}
 800aac8:	e000      	b.n	800aacc <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800aaca:	bf00      	nop
}
 800aacc:	bf00      	nop
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	40013c00 	.word	0x40013c00

0800aad4 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 800aad8:	4b2d      	ldr	r3, [pc, #180]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d008      	beq.n	800aaf6 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800aae4:	4b2a      	ldr	r3, [pc, #168]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	4a29      	ldr	r2, [pc, #164]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800aaea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aaee:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 800aaf0:	f7ff ff0a 	bl	800a908 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 800aaf4:	e049      	b.n	800ab8a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800aaf6:	4b26      	ldr	r3, [pc, #152]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d008      	beq.n	800ab14 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800ab02:	4b23      	ldr	r3, [pc, #140]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	4a22      	ldr	r2, [pc, #136]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ab0c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800ab0e:	f7ff ff03 	bl	800a918 <callback_extInt11>
}
 800ab12:	e03a      	b.n	800ab8a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800ab14:	4b1e      	ldr	r3, [pc, #120]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d008      	beq.n	800ab32 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 800ab20:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab22:	695b      	ldr	r3, [r3, #20]
 800ab24:	4a1a      	ldr	r2, [pc, #104]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab2a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800ab2c:	f7ff fefc 	bl	800a928 <callback_extInt12>
}
 800ab30:	e02b      	b.n	800ab8a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800ab32:	4b17      	ldr	r3, [pc, #92]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d008      	beq.n	800ab50 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800ab3e:	4b14      	ldr	r3, [pc, #80]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	4a13      	ldr	r2, [pc, #76]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab48:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800ab4a:	f7ff fef5 	bl	800a938 <callback_extInt13>
}
 800ab4e:	e01c      	b.n	800ab8a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d008      	beq.n	800ab6e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800ab5c:	4b0c      	ldr	r3, [pc, #48]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	4a0b      	ldr	r2, [pc, #44]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab66:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 800ab68:	f7ff feee 	bl	800a948 <callback_extInt14>
}
 800ab6c:	e00d      	b.n	800ab8a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800ab6e:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d007      	beq.n	800ab8a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800ab7a:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	4a04      	ldr	r2, [pc, #16]	; (800ab90 <EXTI15_10_IRQHandler+0xbc>)
 800ab80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab84:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800ab86:	f7ff fee7 	bl	800a958 <callback_extInt15>
}
 800ab8a:	bf00      	nop
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	40013c00 	.word	0x40013c00

0800ab94 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a88      	ldr	r2, [pc, #544]	; (800adcc <GPIO_Config+0x238>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d106      	bne.n	800abbc <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800abae:	4b88      	ldr	r3, [pc, #544]	; (800add0 <GPIO_Config+0x23c>)
 800abb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb2:	4a87      	ldr	r2, [pc, #540]	; (800add0 <GPIO_Config+0x23c>)
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	6313      	str	r3, [r2, #48]	; 0x30
 800abba:	e03a      	b.n	800ac32 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a84      	ldr	r2, [pc, #528]	; (800add4 <GPIO_Config+0x240>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d106      	bne.n	800abd4 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800abc6:	4b82      	ldr	r3, [pc, #520]	; (800add0 <GPIO_Config+0x23c>)
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	4a81      	ldr	r2, [pc, #516]	; (800add0 <GPIO_Config+0x23c>)
 800abcc:	f043 0302 	orr.w	r3, r3, #2
 800abd0:	6313      	str	r3, [r2, #48]	; 0x30
 800abd2:	e02e      	b.n	800ac32 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a7f      	ldr	r2, [pc, #508]	; (800add8 <GPIO_Config+0x244>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d106      	bne.n	800abec <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800abde:	4b7c      	ldr	r3, [pc, #496]	; (800add0 <GPIO_Config+0x23c>)
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	4a7b      	ldr	r2, [pc, #492]	; (800add0 <GPIO_Config+0x23c>)
 800abe4:	f043 0304 	orr.w	r3, r3, #4
 800abe8:	6313      	str	r3, [r2, #48]	; 0x30
 800abea:	e022      	b.n	800ac32 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a7a      	ldr	r2, [pc, #488]	; (800addc <GPIO_Config+0x248>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d106      	bne.n	800ac04 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800abf6:	4b76      	ldr	r3, [pc, #472]	; (800add0 <GPIO_Config+0x23c>)
 800abf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfa:	4a75      	ldr	r2, [pc, #468]	; (800add0 <GPIO_Config+0x23c>)
 800abfc:	f043 0308 	orr.w	r3, r3, #8
 800ac00:	6313      	str	r3, [r2, #48]	; 0x30
 800ac02:	e016      	b.n	800ac32 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a75      	ldr	r2, [pc, #468]	; (800ade0 <GPIO_Config+0x24c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d106      	bne.n	800ac1c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800ac0e:	4b70      	ldr	r3, [pc, #448]	; (800add0 <GPIO_Config+0x23c>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	4a6f      	ldr	r2, [pc, #444]	; (800add0 <GPIO_Config+0x23c>)
 800ac14:	f043 0310 	orr.w	r3, r3, #16
 800ac18:	6313      	str	r3, [r2, #48]	; 0x30
 800ac1a:	e00a      	b.n	800ac32 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a70      	ldr	r2, [pc, #448]	; (800ade4 <GPIO_Config+0x250>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d105      	bne.n	800ac32 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800ac26:	4b6a      	ldr	r3, [pc, #424]	; (800add0 <GPIO_Config+0x23c>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	4a69      	ldr	r2, [pc, #420]	; (800add0 <GPIO_Config+0x23c>)
 800ac2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac30:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	795b      	ldrb	r3, [r3, #5]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d143      	bne.n	800acc2 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	791b      	ldrb	r3, [r3, #4]
 800ac3e:	2b07      	cmp	r3, #7
 800ac40:	d81f      	bhi.n	800ac82 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	791b      	ldrb	r3, [r3, #4]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6a1a      	ldr	r2, [r3, #32]
 800ac50:	210f      	movs	r1, #15
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	fa01 f303 	lsl.w	r3, r1, r3
 800ac58:	43db      	mvns	r3, r3
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	400a      	ands	r2, r1
 800ac62:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6a1a      	ldr	r2, [r3, #32]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7a5b      	ldrb	r3, [r3, #9]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	fa01 f303 	lsl.w	r3, r1, r3
 800ac76:	4619      	mov	r1, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	621a      	str	r2, [r3, #32]
 800ac80:	e01f      	b.n	800acc2 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	791b      	ldrb	r3, [r3, #4]
 800ac86:	3b08      	subs	r3, #8
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac92:	210f      	movs	r1, #15
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	fa01 f303 	lsl.w	r3, r1, r3
 800ac9a:	43db      	mvns	r3, r3
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	400a      	ands	r2, r1
 800aca4:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	7a5b      	ldrb	r3, [r3, #9]
 800acb0:	4619      	mov	r1, r3
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	fa01 f303 	lsl.w	r3, r1, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	795b      	ldrb	r3, [r3, #5]
 800acc6:	461a      	mov	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	791b      	ldrb	r3, [r3, #4]
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	fa02 f303 	lsl.w	r3, r2, r3
 800acd2:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	791b      	ldrb	r3, [r3, #4]
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	2103      	movs	r1, #3
 800ace2:	fa01 f303 	lsl.w	r3, r1, r3
 800ace6:	43db      	mvns	r3, r3
 800ace8:	4619      	mov	r1, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	400a      	ands	r2, r1
 800acf0:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6819      	ldr	r1, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	7a1b      	ldrb	r3, [r3, #8]
 800ad06:	461a      	mov	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	791b      	ldrb	r3, [r3, #4]
 800ad0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad10:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	791b      	ldrb	r3, [r3, #4]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	2301      	movs	r3, #1
 800ad20:	408b      	lsls	r3, r1
 800ad22:	43db      	mvns	r3, r3
 800ad24:	4619      	mov	r1, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	400a      	ands	r2, r1
 800ad2c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6859      	ldr	r1, [r3, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	799b      	ldrb	r3, [r3, #6]
 800ad42:	461a      	mov	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	791b      	ldrb	r3, [r3, #4]
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	2103      	movs	r1, #3
 800ad5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad62:	43db      	mvns	r3, r3
 800ad64:	4619      	mov	r1, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	400a      	ands	r2, r1
 800ad6c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6899      	ldr	r1, [r3, #8]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	79db      	ldrb	r3, [r3, #7]
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	791b      	ldrb	r3, [r3, #4]
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad8e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	791b      	ldrb	r3, [r3, #4]
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	2103      	movs	r1, #3
 800ad9e:	fa01 f303 	lsl.w	r3, r1, r3
 800ada2:	43db      	mvns	r3, r3
 800ada4:	4619      	mov	r1, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	400a      	ands	r2, r1
 800adac:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68d9      	ldr	r1, [r3, #12]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	430a      	orrs	r2, r1
 800adbc:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800adbe:	bf00      	nop
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	40020000 	.word	0x40020000
 800add0:	40023800 	.word	0x40023800
 800add4:	40020400 	.word	0x40020400
 800add8:	40020800 	.word	0x40020800
 800addc:	40020c00 	.word	0x40020c00
 800ade0:	40021000 	.word	0x40021000
 800ade4:	40021c00 	.word	0x40021c00

0800ade8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d10d      	bne.n	800ae16 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	699a      	ldr	r2, [r3, #24]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	791b      	ldrb	r3, [r3, #4]
 800ae04:	4619      	mov	r1, r3
 800ae06:	2301      	movs	r3, #1
 800ae08:	408b      	lsls	r3, r1
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	430a      	orrs	r2, r1
 800ae12:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800ae14:	e00d      	b.n	800ae32 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	699a      	ldr	r2, [r3, #24]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	791b      	ldrb	r3, [r3, #4]
 800ae20:	3310      	adds	r3, #16
 800ae22:	2101      	movs	r1, #1
 800ae24:	fa01 f303 	lsl.w	r3, r1, r3
 800ae28:	4619      	mov	r1, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	619a      	str	r2, [r3, #24]
}
 800ae32:	bf00      	nop
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10d      	bne.n	800ae6c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	699a      	ldr	r2, [r3, #24]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	791b      	ldrb	r3, [r3, #4]
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	408b      	lsls	r3, r1
 800ae60:	4619      	mov	r1, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	430a      	orrs	r2, r1
 800ae68:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 800ae6a:	e00d      	b.n	800ae88 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	699a      	ldr	r2, [r3, #24]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	791b      	ldrb	r3, [r3, #4]
 800ae76:	3310      	adds	r3, #16
 800ae78:	2101      	movs	r1, #1
 800ae7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7e:	4619      	mov	r1, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	430a      	orrs	r2, r1
 800ae86:	619a      	str	r2, [r3, #24]
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	791b      	ldrb	r3, [r3, #4]
 800aea4:	461a      	mov	r2, r3
 800aea6:	2301      	movs	r3, #1
 800aea8:	4093      	lsls	r3, r2
 800aeaa:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800aeb4:	897b      	ldrh	r3, [r7, #10]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	791b      	ldrb	r3, [r3, #4]
 800aec0:	461a      	mov	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	40d3      	lsrs	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800aec8:	68fb      	ldr	r3, [r7, #12]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7ff ffd8 	bl	800ae94 <GPIO_ReadPin>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bf0c      	ite	eq
 800aeee:	2301      	moveq	r3, #1
 800aef0:	2300      	movne	r3, #0
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff ff76 	bl	800ade8 <GPIO_WritePin>
}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7ff fe3b 	bl	800ab94 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff fe36 	bl	800ab94 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f002 fbfd 	bl	800d72c <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800af32:	e004      	b.n	800af3e <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f94f 	bl	800b1d8 <WHOIAM>
 800af3a:	4603      	mov	r3, r0
 800af3c:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0f7      	beq.n	800af34 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800af44:	216b      	movs	r1, #107	; 0x6b
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f8f1 	bl	800b12e <readData>
 800af4c:	4603      	mov	r3, r0
 800af4e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 800af50:	2300      	movs	r3, #0
 800af52:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	461a      	mov	r2, r3
 800af58:	216b      	movs	r1, #107	; 0x6b
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f89c 	bl	800b098 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 800af60:	216b      	movs	r1, #107	; 0x6b
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f8e3 	bl	800b12e <readData>
 800af68:	4603      	mov	r3, r0
 800af6a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800af6c:	211c      	movs	r1, #28
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f8dd 	bl	800b12e <readData>
 800af74:	4603      	mov	r3, r0
 800af76:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	f023 0318 	bic.w	r3, r3, #24
 800af7e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b03      	cmp	r3, #3
 800af86:	d833      	bhi.n	800aff0 <configMPUAccel+0xec>
 800af88:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <configMPUAccel+0x8c>)
 800af8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8e:	bf00      	nop
 800af90:	0800afa1 	.word	0x0800afa1
 800af94:	0800afaf 	.word	0x0800afaf
 800af98:	0800afc5 	.word	0x0800afc5
 800af9c:	0800afdb 	.word	0x0800afdb
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	461a      	mov	r2, r3
 800afa4:	211c      	movs	r1, #28
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f876 	bl	800b098 <writeData>


				break;
 800afac:	e021      	b.n	800aff2 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 800afae:	7bbb      	ldrb	r3, [r7, #14]
 800afb0:	f043 0308 	orr.w	r3, r3, #8
 800afb4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	461a      	mov	r2, r3
 800afba:	211c      	movs	r1, #28
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f86b 	bl	800b098 <writeData>


				break;
 800afc2:	e016      	b.n	800aff2 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	f043 0310 	orr.w	r3, r3, #16
 800afca:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	461a      	mov	r2, r3
 800afd0:	211c      	movs	r1, #28
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f860 	bl	800b098 <writeData>


				break;
 800afd8:	e00b      	b.n	800aff2 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	f043 0318 	orr.w	r3, r3, #24
 800afe0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	461a      	mov	r2, r3
 800afe6:	211c      	movs	r1, #28
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f855 	bl	800b098 <writeData>


				break;
 800afee:	e000      	b.n	800aff2 <configMPUAccel+0xee>
			}default:{
				break;
 800aff0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 800aff2:	211c      	movs	r1, #28
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f89a 	bl	800b12e <readData>
 800affa:	4603      	mov	r3, r0
 800affc:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800affe:	211b      	movs	r1, #27
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f894 	bl	800b12e <readData>
 800b006:	4603      	mov	r3, r0
 800b008:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	f023 0318 	bic.w	r3, r3, #24
 800b010:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b03      	cmp	r3, #3
 800b018:	d832      	bhi.n	800b080 <configMPUAccel+0x17c>
 800b01a:	a201      	add	r2, pc, #4	; (adr r2, 800b020 <configMPUAccel+0x11c>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b031 	.word	0x0800b031
 800b024:	0800b03f 	.word	0x0800b03f
 800b028:	0800b055 	.word	0x0800b055
 800b02c:	0800b06b 	.word	0x0800b06b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	461a      	mov	r2, r3
 800b034:	211b      	movs	r1, #27
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f82e 	bl	800b098 <writeData>


				break;
 800b03c:	e021      	b.n	800b082 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	f043 0308 	orr.w	r3, r3, #8
 800b044:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	461a      	mov	r2, r3
 800b04a:	211b      	movs	r1, #27
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f823 	bl	800b098 <writeData>


				break;
 800b052:	e016      	b.n	800b082 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	f043 0310 	orr.w	r3, r3, #16
 800b05a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	461a      	mov	r2, r3
 800b060:	211b      	movs	r1, #27
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f818 	bl	800b098 <writeData>


				break;
 800b068:	e00b      	b.n	800b082 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	f043 0318 	orr.w	r3, r3, #24
 800b070:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800b072:	7bbb      	ldrb	r3, [r7, #14]
 800b074:	461a      	mov	r2, r3
 800b076:	211b      	movs	r1, #27
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f80d 	bl	800b098 <writeData>


				break;
 800b07e:	e000      	b.n	800b082 <configMPUAccel+0x17e>
			}default:{
				break;
 800b080:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800b082:	211b      	movs	r1, #27
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f852 	bl	800b12e <readData>
 800b08a:	4603      	mov	r3, r0
 800b08c:	73bb      	strb	r3, [r7, #14]


}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop

0800b098 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	70fb      	strb	r3, [r7, #3]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	695a      	ldr	r2, [r3, #20]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0ba:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f002 fca3 	bl	800da0c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68d8      	ldr	r0, [r3, #12]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	791b      	ldrb	r3, [r3, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f002 fd05 	bl	800dae2 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	78fa      	ldrb	r2, [r7, #3]
 800b0de:	4611      	mov	r1, r2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f002 fd26 	bl	800db32 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b0e6:	e000      	b.n	800b0ea <writeData+0x52>
		__NOP();
 800b0e8:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1f6      	bne.n	800b0e8 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	78ba      	ldrb	r2, [r7, #2]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f002 fd2f 	bl	800db66 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b108:	e000      	b.n	800b10c <writeData+0x74>
		__NOP();
 800b10a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1f6      	bne.n	800b10a <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	4618      	mov	r0, r3
 800b122:	f002 fc61 	bl	800d9e8 <i2c_stopTransaction>



}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	695a      	ldr	r2, [r3, #20]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b150:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	4618      	mov	r0, r3
 800b158:	f002 fc58 	bl	800da0c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68d8      	ldr	r0, [r3, #12]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	791b      	ldrb	r3, [r3, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	4619      	mov	r1, r3
 800b16a:	f002 fcba 	bl	800dae2 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	78fa      	ldrb	r2, [r7, #3]
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f002 fcdb 	bl	800db32 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b17c:	e000      	b.n	800b180 <readData+0x52>
		__NOP();
 800b17e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1f6      	bne.n	800b17e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	4618      	mov	r0, r3
 800b196:	f002 fc6a 	bl	800da6e <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68d8      	ldr	r0, [r3, #12]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	791b      	ldrb	r3, [r3, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	f002 fc9b 	bl	800dae2 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f002 fc84 	bl	800dabe <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f002 fc14 	bl	800d9e8 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f002 fce8 	bl	800db9a <i2c_readDataByte>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 800b1e8:	2175      	movs	r1, #117	; 0x75
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff ff9f 	bl	800b12e <readData>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b1fa:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	085b      	lsrs	r3, r3, #1
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	bf14      	ite	ne
 800b206:	2301      	movne	r3, #1
 800b208:	2300      	moveq	r3, #0
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800b20e:	7bbb      	ldrb	r3, [r7, #14]

}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800b22c:	f04f 0200 	mov.w	r2, #0
 800b230:	f04f 0300 	mov.w	r3, #0
 800b234:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 800b238:	2143      	movs	r1, #67	; 0x43
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff ff77 	bl	800b12e <readData>
 800b240:	4603      	mov	r3, r0
 800b242:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 800b244:	2144      	movs	r1, #68	; 0x44
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff ff71 	bl	800b12e <readData>
 800b24c:	4603      	mov	r3, r0
 800b24e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 800b250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	b21a      	sxth	r2, r3
 800b258:	89bb      	ldrh	r3, [r7, #12]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	785b      	ldrb	r3, [r3, #1]
 800b262:	2b03      	cmp	r3, #3
 800b264:	d846      	bhi.n	800b2f4 <readGyro_X+0xdc>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <readGyro_X+0x54>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b29b 	.word	0x0800b29b
 800b274:	0800b2b9 	.word	0x0800b2b9
 800b278:	0800b2d7 	.word	0x0800b2d7
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800b27c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b280:	4618      	mov	r0, r3
 800b282:	f7f5 f967 	bl	8000554 <__aeabi_i2d>
 800b286:	a325      	add	r3, pc, #148	; (adr r3, 800b31c <readGyro_X+0x104>)
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	f7f5 faf6 	bl	800087c <__aeabi_ddiv>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b298:	e02d      	b.n	800b2f6 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 800b29a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f5 f958 	bl	8000554 <__aeabi_i2d>
 800b2a4:	f04f 0200 	mov.w	r2, #0
 800b2a8:	4b19      	ldr	r3, [pc, #100]	; (800b310 <readGyro_X+0xf8>)
 800b2aa:	f7f5 fae7 	bl	800087c <__aeabi_ddiv>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b2b6:	e01e      	b.n	800b2f6 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 800b2b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7f5 f949 	bl	8000554 <__aeabi_i2d>
 800b2c2:	f04f 0200 	mov.w	r2, #0
 800b2c6:	4b13      	ldr	r3, [pc, #76]	; (800b314 <readGyro_X+0xfc>)
 800b2c8:	f7f5 fad8 	bl	800087c <__aeabi_ddiv>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b2d4:	e00f      	b.n	800b2f6 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 800b2d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7f5 f93a 	bl	8000554 <__aeabi_i2d>
 800b2e0:	f04f 0200 	mov.w	r2, #0
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <readGyro_X+0x100>)
 800b2e6:	f7f5 fac9 	bl	800087c <__aeabi_ddiv>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b2f2:	e000      	b.n	800b2f6 <readGyro_X+0xde>
		}default:{
			break;
 800b2f4:	bf00      	nop
		}

	}

	return GYROX_R;
 800b2f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b2fa:	f7f5 fc8d 	bl	8000c18 <__aeabi_d2f>
 800b2fe:	4603      	mov	r3, r0
 800b300:	ee07 3a90 	vmov	s15, r3

}
 800b304:	eeb0 0a67 	vmov.f32	s0, s15
 800b308:	3718      	adds	r7, #24
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	40508000 	.word	0x40508000
 800b314:	40408000 	.word	0x40408000
 800b318:	40300000 	.word	0x40300000
 800b31c:	00000000 	.word	0x00000000
 800b320:	40606000 	.word	0x40606000
 800b324:	00000000 	.word	0x00000000

0800b328 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800b33c:	f04f 0200 	mov.w	r2, #0
 800b340:	f04f 0300 	mov.w	r3, #0
 800b344:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 800b348:	2145      	movs	r1, #69	; 0x45
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff feef 	bl	800b12e <readData>
 800b350:	4603      	mov	r3, r0
 800b352:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 800b354:	2146      	movs	r1, #70	; 0x46
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff fee9 	bl	800b12e <readData>
 800b35c:	4603      	mov	r3, r0
 800b35e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 800b360:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	b21a      	sxth	r2, r3
 800b368:	89bb      	ldrh	r3, [r7, #12]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	785b      	ldrb	r3, [r3, #1]
 800b372:	2b03      	cmp	r3, #3
 800b374:	d846      	bhi.n	800b404 <readGyro_Y+0xdc>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <readGyro_Y+0x54>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b3ab 	.word	0x0800b3ab
 800b384:	0800b3c9 	.word	0x0800b3c9
 800b388:	0800b3e7 	.word	0x0800b3e7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 800b38c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b390:	4618      	mov	r0, r3
 800b392:	f7f5 f8df 	bl	8000554 <__aeabi_i2d>
 800b396:	a325      	add	r3, pc, #148	; (adr r3, 800b42c <readGyro_Y+0x104>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f5 fa6e 	bl	800087c <__aeabi_ddiv>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b3a8:	e02d      	b.n	800b406 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 800b3aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7f5 f8d0 	bl	8000554 <__aeabi_i2d>
 800b3b4:	f04f 0200 	mov.w	r2, #0
 800b3b8:	4b19      	ldr	r3, [pc, #100]	; (800b420 <readGyro_Y+0xf8>)
 800b3ba:	f7f5 fa5f 	bl	800087c <__aeabi_ddiv>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b3c6:	e01e      	b.n	800b406 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 800b3c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7f5 f8c1 	bl	8000554 <__aeabi_i2d>
 800b3d2:	f04f 0200 	mov.w	r2, #0
 800b3d6:	4b13      	ldr	r3, [pc, #76]	; (800b424 <readGyro_Y+0xfc>)
 800b3d8:	f7f5 fa50 	bl	800087c <__aeabi_ddiv>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b3e4:	e00f      	b.n	800b406 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 800b3e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f5 f8b2 	bl	8000554 <__aeabi_i2d>
 800b3f0:	f04f 0200 	mov.w	r2, #0
 800b3f4:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <readGyro_Y+0x100>)
 800b3f6:	f7f5 fa41 	bl	800087c <__aeabi_ddiv>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b402:	e000      	b.n	800b406 <readGyro_Y+0xde>
		}default:{
			break;
 800b404:	bf00      	nop
		}

	}

	return GYROY_R;
 800b406:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b40a:	f7f5 fc05 	bl	8000c18 <__aeabi_d2f>
 800b40e:	4603      	mov	r3, r0
 800b410:	ee07 3a90 	vmov	s15, r3

}
 800b414:	eeb0 0a67 	vmov.f32	s0, s15
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	40508000 	.word	0x40508000
 800b424:	40408000 	.word	0x40408000
 800b428:	40300000 	.word	0x40300000
 800b42c:	00000000 	.word	0x00000000
 800b430:	40606000 	.word	0x40606000
 800b434:	00000000 	.word	0x00000000

0800b438 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800b44c:	f04f 0200 	mov.w	r2, #0
 800b450:	f04f 0300 	mov.w	r3, #0
 800b454:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 800b458:	2147      	movs	r1, #71	; 0x47
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff fe67 	bl	800b12e <readData>
 800b460:	4603      	mov	r3, r0
 800b462:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 800b464:	2148      	movs	r1, #72	; 0x48
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff fe61 	bl	800b12e <readData>
 800b46c:	4603      	mov	r3, r0
 800b46e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 800b470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b474:	021b      	lsls	r3, r3, #8
 800b476:	b21a      	sxth	r2, r3
 800b478:	89bb      	ldrh	r3, [r7, #12]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	785b      	ldrb	r3, [r3, #1]
 800b482:	2b03      	cmp	r3, #3
 800b484:	d846      	bhi.n	800b514 <readGyro_Z+0xdc>
 800b486:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <readGyro_Z+0x54>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b49d 	.word	0x0800b49d
 800b490:	0800b4bb 	.word	0x0800b4bb
 800b494:	0800b4d9 	.word	0x0800b4d9
 800b498:	0800b4f7 	.word	0x0800b4f7
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 800b49c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7f5 f857 	bl	8000554 <__aeabi_i2d>
 800b4a6:	a325      	add	r3, pc, #148	; (adr r3, 800b53c <readGyro_Z+0x104>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f7f5 f9e6 	bl	800087c <__aeabi_ddiv>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b4b8:	e02d      	b.n	800b516 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 800b4ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f5 f848 	bl	8000554 <__aeabi_i2d>
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	4b19      	ldr	r3, [pc, #100]	; (800b530 <readGyro_Z+0xf8>)
 800b4ca:	f7f5 f9d7 	bl	800087c <__aeabi_ddiv>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b4d6:	e01e      	b.n	800b516 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 800b4d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7f5 f839 	bl	8000554 <__aeabi_i2d>
 800b4e2:	f04f 0200 	mov.w	r2, #0
 800b4e6:	4b13      	ldr	r3, [pc, #76]	; (800b534 <readGyro_Z+0xfc>)
 800b4e8:	f7f5 f9c8 	bl	800087c <__aeabi_ddiv>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b4f4:	e00f      	b.n	800b516 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 800b4f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f5 f82a 	bl	8000554 <__aeabi_i2d>
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <readGyro_Z+0x100>)
 800b506:	f7f5 f9b9 	bl	800087c <__aeabi_ddiv>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b512:	e000      	b.n	800b516 <readGyro_Z+0xde>
		}default:{
			break;
 800b514:	bf00      	nop
		}

	}

	return GYROZ_R;
 800b516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b51a:	f7f5 fb7d 	bl	8000c18 <__aeabi_d2f>
 800b51e:	4603      	mov	r3, r0
 800b520:	ee07 3a90 	vmov	s15, r3

}
 800b524:	eeb0 0a67 	vmov.f32	s0, s15
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	40508000 	.word	0x40508000
 800b534:	40408000 	.word	0x40408000
 800b538:	40300000 	.word	0x40300000
 800b53c:	00000000 	.word	0x00000000
 800b540:	40606000 	.word	0x40606000
 800b544:	00000000 	.word	0x00000000

0800b548 <build_Operation>:



//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08c      	sub	sp, #48	; 0x30
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6178      	str	r0, [r7, #20]
 800b550:	6139      	str	r1, [r7, #16]
 800b552:	ed87 0b02 	vstr	d0, [r7, #8]
 800b556:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b564:	f7f4 fea8 	bl	80002b8 <__aeabi_dsub>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b57a:	f7f4 fe9d 	bl	80002b8 <__aeabi_dsub>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//Calculo angulo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	3310      	adds	r3, #16
 800b58a:	f107 0218 	add.w	r2, r7, #24
 800b58e:	4611      	mov	r1, r2
 800b590:	4618      	mov	r0, r3
 800b592:	f000 fa55 	bl	800ba40 <calculed_ang_turn>
 800b596:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if( -5 < grad_turn_res  && grad_turn_res < 5 )
 800b59a:	f04f 0200 	mov.w	r2, #0
 800b59e:	4b38      	ldr	r3, [pc, #224]	; (800b680 <build_Operation+0x138>)
 800b5a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b5a4:	f7f5 fad0 	bl	8000b48 <__aeabi_dcmpgt>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d020      	beq.n	800b5f0 <build_Operation+0xa8>
 800b5ae:	f04f 0200 	mov.w	r2, #0
 800b5b2:	4b34      	ldr	r3, [pc, #208]	; (800b684 <build_Operation+0x13c>)
 800b5b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b5b8:	f7f5 faa8 	bl	8000b0c <__aeabi_dcmplt>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d016      	beq.n	800b5f0 <build_Operation+0xa8>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c8:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 800b678 <build_Operation+0x130>
 800b5cc:	ed97 1b00 	vldr	d1, [r7]
 800b5d0:	ed97 0b02 	vldr	d0, [r7, #8]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6978      	ldr	r0, [r7, #20]
 800b5da:	f000 f855 	bl	800b688 <add_Operation>
		 //Agregar operacion de rotacion
		 prtbuild->number_operation++;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b5ee:	e02b      	b.n	800b648 <build_Operation+0x100>
	}
	else
	{
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res); // Agregamos la operacion de girar
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5f6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800b5fa:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b678 <build_Operation+0x130>
 800b5fe:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b678 <build_Operation+0x130>
 800b602:	2202      	movs	r2, #2
 800b604:	4619      	mov	r1, r3
 800b606:	6978      	ldr	r0, [r7, #20]
 800b608:	f000 f83e 	bl	800b688 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b612:	3301      	adds	r3, #1
 800b614:	b2da      	uxtb	r2, r3
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0); // Agregamos la operacion de ir a
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b622:	ed9f 2b15 	vldr	d2, [pc, #84]	; 800b678 <build_Operation+0x130>
 800b626:	ed97 1b00 	vldr	d1, [r7]
 800b62a:	ed97 0b02 	vldr	d0, [r7, #8]
 800b62e:	2201      	movs	r2, #1
 800b630:	4619      	mov	r1, r3
 800b632:	6978      	ldr	r0, [r7, #20]
 800b634:	f000 f828 	bl	800b688 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b63e:	3301      	adds	r3, #1
 800b640:	b2da      	uxtb	r2, r3
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 800b648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b64c:	6939      	ldr	r1, [r7, #16]
 800b64e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 800b652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b656:	6939      	ldr	r1, [r7, #16]
 800b658:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 800b65c:	6939      	ldr	r1, [r7, #16]
 800b65e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b662:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 800b666:	6939      	ldr	r1, [r7, #16]
 800b668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b66c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800b670:	bf00      	nop
 800b672:	3730      	adds	r7, #48	; 0x30
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
	...
 800b680:	c0140000 	.word	0xc0140000
 800b684:	40140000 	.word	0x40140000

0800b688 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 800b688:	b480      	push	{r7}
 800b68a:	b089      	sub	sp, #36	; 0x24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	61f8      	str	r0, [r7, #28]
 800b690:	460b      	mov	r3, r1
 800b692:	ed87 0b04 	vstr	d0, [r7, #16]
 800b696:	ed87 1b02 	vstr	d1, [r7, #8]
 800b69a:	ed87 2b00 	vstr	d2, [r7]
 800b69e:	76fb      	strb	r3, [r7, #27]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 800b6a4:	7efa      	ldrb	r2, [r7, #27]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	7eba      	ldrb	r2, [r7, #26]
 800b6b6:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 800b6b8:	7efa      	ldrb	r2, [r7, #27]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	00db      	lsls	r3, r3, #3
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	1899      	adds	r1, r3, r2
 800b6c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b6cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 800b6d0:	7efa      	ldrb	r2, [r7, #27]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	1899      	adds	r1, r3, r2
 800b6e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 800b6e8:	7efa      	ldrb	r2, [r7, #27]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	1899      	adds	r1, r3, r2
 800b6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800b700:	bf00      	nop
 800b702:	3724      	adds	r7, #36	; 0x24
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	0000      	movs	r0, r0
	...

0800b710 <change_coordinates_position>:
	ptrParameterPath->goal_Position_x += pot_x;
	ptrParameterPath->goal_Position_y += pot_y;
}

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 800b710:	b5b0      	push	{r4, r5, r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	6178      	str	r0, [r7, #20]
 800b718:	ed87 0b02 	vstr	d0, [r7, #8]
 800b71c:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800b726:	6979      	ldr	r1, [r7, #20]
 800b728:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800b732:	6979      	ldr	r1, [r7, #20]
 800b734:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 800b738:	6979      	ldr	r1, [r7, #20]
 800b73a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b73e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y = coor_y;
 800b742:	6979      	ldr	r1, [r7, #20]
 800b744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b748:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b758:	f7f4 fdae 	bl	80002b8 <__aeabi_dsub>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	ec43 2b17 	vmov	d7, r2, r3
 800b764:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800b7d8 <change_coordinates_position+0xc8>
 800b768:	eeb0 0a47 	vmov.f32	s0, s14
 800b76c:	eef0 0a67 	vmov.f32	s1, s15
 800b770:	f005 fa70 	bl	8010c54 <pow>
 800b774:	ec55 4b10 	vmov	r4, r5, d0
										   pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));                  //[mm]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800b784:	f7f4 fd98 	bl	80002b8 <__aeabi_dsub>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	ec43 2b17 	vmov	d7, r2, r3
 800b790:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800b7d8 <change_coordinates_position+0xc8>
 800b794:	eeb0 0a47 	vmov.f32	s0, s14
 800b798:	eef0 0a67 	vmov.f32	s1, s15
 800b79c:	f005 fa5a 	bl	8010c54 <pow>
 800b7a0:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 fd88 	bl	80002bc <__adddf3>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	ec43 2b17 	vmov	d7, r2, r3
 800b7b4:	eeb0 0a47 	vmov.f32	s0, s14
 800b7b8:	eef0 0a67 	vmov.f32	s1, s15
 800b7bc:	f005 faba 	bl	8010d34 <sqrt>
 800b7c0:	eeb0 7a40 	vmov.f32	s14, s0
 800b7c4:	eef0 7a60 	vmov.f32	s15, s1
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

}
 800b7ce:	bf00      	nop
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	00000000 	.word	0x00000000
 800b7dc:	40000000 	.word	0x40000000

0800b7e0 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 800b7e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b7e4:	b08a      	sub	sp, #40	; 0x28
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b7f6:	f7f4 fd5f 	bl	80002b8 <__aeabi_dsub>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800b80e:	f7f4 fd53 	bl	80002b8 <__aeabi_dsub>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 800b81a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 800b928 <calculation_parameter_distance+0x148>
 800b81e:	ed97 0b08 	vldr	d0, [r7, #32]
 800b822:	f005 fa17 	bl	8010c54 <pow>
 800b826:	ec59 8b10 	vmov	r8, r9, d0
 800b82a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 800b928 <calculation_parameter_distance+0x148>
 800b82e:	ed97 0b06 	vldr	d0, [r7, #24]
 800b832:	f005 fa0f 	bl	8010c54 <pow>
 800b836:	ec53 2b10 	vmov	r2, r3, d0
 800b83a:	4640      	mov	r0, r8
 800b83c:	4649      	mov	r1, r9
 800b83e:	f7f4 fd3d 	bl	80002bc <__adddf3>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	ec43 2b17 	vmov	d7, r2, r3
 800b84a:	eeb0 0a47 	vmov.f32	s0, s14
 800b84e:	eef0 0a67 	vmov.f32	s1, s15
 800b852:	f005 fa6f 	bl	8010d34 <sqrt>
 800b856:	eeb0 7a40 	vmov.f32	s14, s0
 800b85a:	eef0 7a60 	vmov.f32	s15, s1
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 800b864:	6979      	ldr	r1, [r7, #20]
 800b866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b86a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 800b86e:	6979      	ldr	r1, [r7, #20]
 800b870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b874:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	60bb      	str	r3, [r7, #8]
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b88a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b88e:	f7f4 fecb 	bl	8000628 <__aeabi_dmul>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4690      	mov	r8, r2
 800b898:	4699      	mov	r9, r3
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b8a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b8a4:	f7f4 fec0 	bl	8000628 <__aeabi_dmul>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	f7f4 fd02 	bl	80002b8 <__aeabi_dsub>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	6979      	ldr	r1, [r7, #20]
 800b8ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 800b8be:	6979      	ldr	r1, [r7, #20]
 800b8c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b8c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 800b8c8:	6a3c      	ldr	r4, [r7, #32]
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	603b      	str	r3, [r7, #0]
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b8e0:	607b      	str	r3, [r7, #4]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b8e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8ec:	f7f4 fe9c 	bl	8000628 <__aeabi_dmul>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4614      	mov	r4, r2
 800b8f6:	461d      	mov	r5, r3
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b8fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b902:	f7f4 fe91 	bl	8000628 <__aeabi_dmul>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4620      	mov	r0, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	f7f4 fcd5 	bl	80002bc <__adddf3>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	6979      	ldr	r1, [r7, #20]
 800b918:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 800b91c:	bf00      	nop
 800b91e:	3728      	adds	r7, #40	; 0x28
 800b920:	46bd      	mov	sp, r7
 800b922:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b926:	bf00      	nop
 800b928:	00000000 	.word	0x00000000
 800b92c:	40000000 	.word	0x40000000

0800b930 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b930:	b5b0      	push	{r4, r5, r7, lr}
 800b932:	b088      	sub	sp, #32
 800b934:	af00      	add	r7, sp, #0
 800b936:	6178      	str	r0, [r7, #20]
 800b938:	ed87 0b02 	vstr	d0, [r7, #8]
 800b93c:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b94a:	f7f4 fe6d 	bl	8000628 <__aeabi_dmul>
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	4614      	mov	r4, r2
 800b954:	461d      	mov	r5, r3
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800b95c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b960:	f7f4 fe62 	bl	8000628 <__aeabi_dmul>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	4620      	mov	r0, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	f7f4 fca6 	bl	80002bc <__adddf3>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	4610      	mov	r0, r2
 800b976:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b97e:	f7f4 fc9d 	bl	80002bc <__adddf3>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4610      	mov	r0, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 ff74 	bl	800087c <__aeabi_ddiv>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b998:	4611      	mov	r1, r2
 800b99a:	61b9      	str	r1, [r7, #24]
 800b99c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b9a0:	61fb      	str	r3, [r7, #28]

	return distance;
 800b9a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9a6:	ec43 2b17 	vmov	d7, r2, r3
}
 800b9aa:	eeb0 0a47 	vmov.f32	s0, s14
 800b9ae:	eef0 0a67 	vmov.f32	s1, s15
 800b9b2:	3720      	adds	r7, #32
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bdb0      	pop	{r4, r5, r7, pc}

0800b9b8 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b9b8:	b5b0      	push	{r4, r5, r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6178      	str	r0, [r7, #20]
 800b9c0:	ed87 0b02 	vstr	d0, [r7, #8]
 800b9c4:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b9ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9d2:	f7f4 fe29 	bl	8000628 <__aeabi_dmul>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4614      	mov	r4, r2
 800b9dc:	461d      	mov	r5, r3
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9e8:	f7f4 fe1e 	bl	8000628 <__aeabi_dmul>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	f7f4 fc62 	bl	80002bc <__adddf3>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ba06:	f7f4 fc59 	bl	80002bc <__adddf3>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	4610      	mov	r0, r2
 800ba10:	4619      	mov	r1, r3
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800ba18:	f7f4 ff30 	bl	800087c <__aeabi_ddiv>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 800ba24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba28:	ec43 2b17 	vmov	d7, r2, r3
}
 800ba2c:	eeb0 0a47 	vmov.f32	s0, s14
 800ba30:	eef0 0a67 	vmov.f32	s1, s15
 800ba34:	3720      	adds	r7, #32
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bdb0      	pop	{r4, r5, r7, pc}
 800ba3a:	0000      	movs	r0, r0
 800ba3c:	0000      	movs	r0, r0
	...

0800ba40 <calculed_ang_turn>:

//------------------------------Funciones auxiliares-----------------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 800ba40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ba44:	b08a      	sub	sp, #40	; 0x28
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	3308      	adds	r3, #8
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fde5 	bl	8000628 <__aeabi_dmul>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	4690      	mov	r8, r2
 800ba64:	4699      	mov	r9, r3
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3308      	adds	r3, #8
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7f4 fdd8 	bl	8000628 <__aeabi_dmul>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	4649      	mov	r1, r9
 800ba80:	f7f4 fc1a 	bl	80002b8 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	ed93 7b00 	vldr	d7, [r3]
 800ba92:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 800bc10 <calculed_ang_turn+0x1d0>
 800ba96:	eeb0 0a47 	vmov.f32	s0, s14
 800ba9a:	eef0 0a67 	vmov.f32	s1, s15
 800ba9e:	f005 f8d9 	bl	8010c54 <pow>
 800baa2:	ec59 8b10 	vmov	r8, r9, d0
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3308      	adds	r3, #8
 800baaa:	ed93 7b00 	vldr	d7, [r3]
 800baae:	ed9f 1b58 	vldr	d1, [pc, #352]	; 800bc10 <calculed_ang_turn+0x1d0>
 800bab2:	eeb0 0a47 	vmov.f32	s0, s14
 800bab6:	eef0 0a67 	vmov.f32	s1, s15
 800baba:	f005 f8cb 	bl	8010c54 <pow>
 800babe:	ec53 2b10 	vmov	r2, r3, d0
 800bac2:	4640      	mov	r0, r8
 800bac4:	4649      	mov	r1, r9
 800bac6:	f7f4 fbf9 	bl	80002bc <__adddf3>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	ec43 2b17 	vmov	d7, r2, r3
 800bad2:	eeb0 0a47 	vmov.f32	s0, s14
 800bad6:	eef0 0a67 	vmov.f32	s1, s15
 800bada:	f005 f92b 	bl	8010d34 <sqrt>
 800bade:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	ed93 7b00 	vldr	d7, [r3]
 800bae8:	ed9f 1b49 	vldr	d1, [pc, #292]	; 800bc10 <calculed_ang_turn+0x1d0>
 800baec:	eeb0 0a47 	vmov.f32	s0, s14
 800baf0:	eef0 0a67 	vmov.f32	s1, s15
 800baf4:	f005 f8ae 	bl	8010c54 <pow>
 800baf8:	ec59 8b10 	vmov	r8, r9, d0
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	3308      	adds	r3, #8
 800bb00:	ed93 7b00 	vldr	d7, [r3]
 800bb04:	ed9f 1b42 	vldr	d1, [pc, #264]	; 800bc10 <calculed_ang_turn+0x1d0>
 800bb08:	eeb0 0a47 	vmov.f32	s0, s14
 800bb0c:	eef0 0a67 	vmov.f32	s1, s15
 800bb10:	f005 f8a0 	bl	8010c54 <pow>
 800bb14:	ec53 2b10 	vmov	r2, r3, d0
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	f7f4 fbce 	bl	80002bc <__adddf3>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	ec43 2b17 	vmov	d7, r2, r3
 800bb28:	eeb0 0a47 	vmov.f32	s0, s14
 800bb2c:	eef0 0a67 	vmov.f32	s1, s15
 800bb30:	f005 f900 	bl	8010d34 <sqrt>
 800bb34:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1]) / (magvector_b * magvector_a));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f7f4 fd70 	bl	8000628 <__aeabi_dmul>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4690      	mov	r8, r2
 800bb4e:	4699      	mov	r9, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3308      	adds	r3, #8
 800bb54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	f7f4 fd62 	bl	8000628 <__aeabi_dmul>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4640      	mov	r0, r8
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	f7f4 fba6 	bl	80002bc <__adddf3>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4690      	mov	r8, r2
 800bb76:	4699      	mov	r9, r3
 800bb78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb80:	f7f4 fd52 	bl	8000628 <__aeabi_dmul>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4640      	mov	r0, r8
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	f7f4 fe76 	bl	800087c <__aeabi_ddiv>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	ec43 2b17 	vmov	d7, r2, r3
 800bb98:	eeb0 0a47 	vmov.f32	s0, s14
 800bb9c:	eef0 0a67 	vmov.f32	s1, s15
 800bba0:	f005 f822 	bl	8010be8 <acos>
 800bba4:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180) / M_PI;
 800bba8:	f04f 0200 	mov.w	r2, #0
 800bbac:	4b1c      	ldr	r3, [pc, #112]	; (800bc20 <calculed_ang_turn+0x1e0>)
 800bbae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bbb2:	f7f4 fd39 	bl	8000628 <__aeabi_dmul>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4610      	mov	r0, r2
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	a316      	add	r3, pc, #88	; (adr r3, 800bc18 <calculed_ang_turn+0x1d8>)
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f7f4 fe5a 	bl	800087c <__aeabi_ddiv>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ang_between_vector = -ang_between_vector;}
 800bbd0:	f04f 0200 	mov.w	r2, #0
 800bbd4:	f04f 0300 	mov.w	r3, #0
 800bbd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bbdc:	f7f4 ff96 	bl	8000b0c <__aeabi_dcmplt>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <calculed_ang_turn+0x1b2>
 800bbe6:	6a3c      	ldr	r4, [r7, #32]
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800bbee:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 800bbf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbf6:	ec43 2b17 	vmov	d7, r2, r3
}
 800bbfa:	eeb0 0a47 	vmov.f32	s0, s14
 800bbfe:	eef0 0a67 	vmov.f32	s1, s15
 800bc02:	3728      	adds	r7, #40	; 0x28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bc0a:	bf00      	nop
 800bc0c:	f3af 8000 	nop.w
 800bc10:	00000000 	.word	0x00000000
 800bc14:	40000000 	.word	0x40000000
 800bc18:	54442d18 	.word	0x54442d18
 800bc1c:	400921fb 	.word	0x400921fb
 800bc20:	40668000 	.word	0x40668000

0800bc24 <unitary_vector>:



void unitary_vector (double angle,double vector_b[2]){
 800bc24:	b590      	push	{r4, r7, lr}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	ed87 0b02 	vstr	d0, [r7, #8]
 800bc2e:	6078      	str	r0, [r7, #4]

	// Esta función lo que haremos es definir un vector unitario con respecto al angulo actual que tenga el robot
	vector_b[0] = cos(angle);
 800bc30:	ed97 0b02 	vldr	d0, [r7, #8]
 800bc34:	f004 fee4 	bl	8010a00 <cos>
 800bc38:	eeb0 7a40 	vmov.f32	s14, s0
 800bc3c:	eef0 7a60 	vmov.f32	s15, s1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	ed83 7b00 	vstr	d7, [r3]
	vector_b[1] = sin(angle);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f103 0408 	add.w	r4, r3, #8
 800bc4c:	ed97 0b02 	vldr	d0, [r7, #8]
 800bc50:	f004 ff72 	bl	8010b38 <sin>
 800bc54:	eeb0 7a40 	vmov.f32	s14, s0
 800bc58:	eef0 7a60 	vmov.f32	s15, s1
 800bc5c:	ed84 7b00 	vstr	d7, [r4]

}
 800bc60:	bf00      	nop
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd90      	pop	{r4, r7, pc}

0800bc68 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a6c      	ldr	r2, [pc, #432]	; (800be28 <pwm_Config+0x1c0>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d106      	bne.n	800bc88 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800bc7a:	4b6c      	ldr	r3, [pc, #432]	; (800be2c <pwm_Config+0x1c4>)
 800bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7e:	4a6b      	ldr	r2, [pc, #428]	; (800be2c <pwm_Config+0x1c4>)
 800bc80:	f043 0301 	orr.w	r3, r3, #1
 800bc84:	6453      	str	r3, [r2, #68]	; 0x44
 800bc86:	e030      	b.n	800bcea <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc90:	d106      	bne.n	800bca0 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800bc92:	4b66      	ldr	r3, [pc, #408]	; (800be2c <pwm_Config+0x1c4>)
 800bc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc96:	4a65      	ldr	r2, [pc, #404]	; (800be2c <pwm_Config+0x1c4>)
 800bc98:	f043 0301 	orr.w	r3, r3, #1
 800bc9c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc9e:	e024      	b.n	800bcea <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a62      	ldr	r2, [pc, #392]	; (800be30 <pwm_Config+0x1c8>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d106      	bne.n	800bcb8 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800bcaa:	4b60      	ldr	r3, [pc, #384]	; (800be2c <pwm_Config+0x1c4>)
 800bcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcae:	4a5f      	ldr	r2, [pc, #380]	; (800be2c <pwm_Config+0x1c4>)
 800bcb0:	f043 0302 	orr.w	r3, r3, #2
 800bcb4:	6413      	str	r3, [r2, #64]	; 0x40
 800bcb6:	e018      	b.n	800bcea <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a5d      	ldr	r2, [pc, #372]	; (800be34 <pwm_Config+0x1cc>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d106      	bne.n	800bcd0 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800bcc2:	4b5a      	ldr	r3, [pc, #360]	; (800be2c <pwm_Config+0x1c4>)
 800bcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc6:	4a59      	ldr	r2, [pc, #356]	; (800be2c <pwm_Config+0x1c4>)
 800bcc8:	f043 0304 	orr.w	r3, r3, #4
 800bccc:	6413      	str	r3, [r2, #64]	; 0x40
 800bcce:	e00c      	b.n	800bcea <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a58      	ldr	r2, [pc, #352]	; (800be38 <pwm_Config+0x1d0>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d106      	bne.n	800bce8 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800bcda:	4b54      	ldr	r3, [pc, #336]	; (800be2c <pwm_Config+0x1c4>)
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	4a53      	ldr	r2, [pc, #332]	; (800be2c <pwm_Config+0x1c4>)
 800bce0:	f043 0308 	orr.w	r3, r3, #8
 800bce4:	6413      	str	r3, [r2, #64]	; 0x40
 800bce6:	e000      	b.n	800bcea <pwm_Config+0x82>
	}
	else{
		__NOP();
 800bce8:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bcf8:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7f5b      	ldrb	r3, [r3, #29]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f930 	bl	800bf68 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fa67 	bl	800c1dc <setDuttyCycle>
 800bd0e:	e005      	b.n	800bd1c <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f929 	bl	800bf68 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fb38 	bl	800c38c <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f022 0210 	bic.w	r2, r2, #16
 800bd2a:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2200      	movs	r2, #0
 800bd32:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	7a1b      	ldrb	r3, [r3, #8]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d86f      	bhi.n	800be1c <pwm_Config+0x1b4>
 800bd3c:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <pwm_Config+0xdc>)
 800bd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd42:	bf00      	nop
 800bd44:	0800bd55 	.word	0x0800bd55
 800bd48:	0800bd87 	.word	0x0800bd87
 800bd4c:	0800bdb9 	.word	0x0800bdb9
 800bd50:	0800bdeb 	.word	0x0800bdeb
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	699a      	ldr	r2, [r3, #24]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f022 0203 	bic.w	r2, r2, #3
 800bd62:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	699a      	ldr	r2, [r3, #24]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bd72:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	699a      	ldr	r2, [r3, #24]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0208 	orr.w	r2, r2, #8
 800bd82:	619a      	str	r2, [r3, #24]


		break;
 800bd84:	e04b      	b.n	800be1e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	699a      	ldr	r2, [r3, #24]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bd94:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800bda4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	699a      	ldr	r2, [r3, #24]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdb4:	619a      	str	r2, [r3, #24]

		break;
 800bdb6:	e032      	b.n	800be1e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	69da      	ldr	r2, [r3, #28]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0203 	bic.w	r2, r2, #3
 800bdc6:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	69da      	ldr	r2, [r3, #28]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bdd6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	69da      	ldr	r2, [r3, #28]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f042 0208 	orr.w	r2, r2, #8
 800bde6:	61da      	str	r2, [r3, #28]

		break;
 800bde8:	e019      	b.n	800be1e <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	69da      	ldr	r2, [r3, #28]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bdf8:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	69da      	ldr	r2, [r3, #28]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800be08:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	69da      	ldr	r2, [r3, #28]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be18:	61da      	str	r2, [r3, #28]

		break;
 800be1a:	e000      	b.n	800be1e <pwm_Config+0x1b6>
	}

	default:{
		break;
 800be1c:	bf00      	nop
	}// fin del switch-case




}
 800be1e:	bf00      	nop
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	40010000 	.word	0x40010000
 800be2c:	40023800 	.word	0x40023800
 800be30:	40000400 	.word	0x40000400
 800be34:	40000800 	.word	0x40000800
 800be38:	40000c00 	.word	0x40000c00

0800be3c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f042 0201 	orr.w	r2, r2, #1
 800be52:	601a      	str	r2, [r3, #0]

}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a3d      	ldr	r2, [pc, #244]	; (800bf64 <enableOutput+0x104>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d13a      	bne.n	800bee8 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be80:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7a1b      	ldrb	r3, [r3, #8]
 800be86:	2b03      	cmp	r3, #3
 800be88:	d862      	bhi.n	800bf50 <enableOutput+0xf0>
 800be8a:	a201      	add	r2, pc, #4	; (adr r2, 800be90 <enableOutput+0x30>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bea1 	.word	0x0800bea1
 800be94:	0800beb3 	.word	0x0800beb3
 800be98:	0800bec5 	.word	0x0800bec5
 800be9c:	0800bed7 	.word	0x0800bed7
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6a1a      	ldr	r2, [r3, #32]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f042 0201 	orr.w	r2, r2, #1
 800beae:	621a      	str	r2, [r3, #32]

				break;
 800beb0:	e051      	b.n	800bf56 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6a1a      	ldr	r2, [r3, #32]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f042 0210 	orr.w	r2, r2, #16
 800bec0:	621a      	str	r2, [r3, #32]

				break;
 800bec2:	e048      	b.n	800bf56 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6a1a      	ldr	r2, [r3, #32]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bed2:	621a      	str	r2, [r3, #32]

				break;
 800bed4:	e03f      	b.n	800bf56 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	6a1a      	ldr	r2, [r3, #32]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bee4:	621a      	str	r2, [r3, #32]

				break;
 800bee6:	e036      	b.n	800bf56 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	7a1b      	ldrb	r3, [r3, #8]
 800beec:	2b03      	cmp	r3, #3
 800beee:	d831      	bhi.n	800bf54 <enableOutput+0xf4>
 800bef0:	a201      	add	r2, pc, #4	; (adr r2, 800bef8 <enableOutput+0x98>)
 800bef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef6:	bf00      	nop
 800bef8:	0800bf09 	.word	0x0800bf09
 800befc:	0800bf1b 	.word	0x0800bf1b
 800bf00:	0800bf2d 	.word	0x0800bf2d
 800bf04:	0800bf3f 	.word	0x0800bf3f
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6a1a      	ldr	r2, [r3, #32]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0201 	orr.w	r2, r2, #1
 800bf16:	621a      	str	r2, [r3, #32]

				break;
 800bf18:	e01d      	b.n	800bf56 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6a1a      	ldr	r2, [r3, #32]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f042 0210 	orr.w	r2, r2, #16
 800bf28:	621a      	str	r2, [r3, #32]

				break;
 800bf2a:	e014      	b.n	800bf56 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6a1a      	ldr	r2, [r3, #32]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf3a:	621a      	str	r2, [r3, #32]

				break;
 800bf3c:	e00b      	b.n	800bf56 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	6a1a      	ldr	r2, [r3, #32]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf4c:	621a      	str	r2, [r3, #32]

				break;
 800bf4e:	e002      	b.n	800bf56 <enableOutput+0xf6>
				break;
 800bf50:	bf00      	nop
 800bf52:	e000      	b.n	800bf56 <enableOutput+0xf6>
			}

			default: {
				break;
 800bf54:	bf00      	nop
			}

		}
	}
	return SET;
 800bf56:	2301      	movs	r3, #1
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	40010000 	.word	0x40010000

0800bf68 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	68d2      	ldr	r2, [r2, #12]
 800bf7c:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b10      	cmp	r3, #16
 800bf88:	d01a      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b14      	cmp	r3, #20
 800bf8e:	d017      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b1e      	cmp	r3, #30
 800bf94:	d014      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b28      	cmp	r3, #40	; 0x28
 800bf9a:	d011      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2b32      	cmp	r3, #50	; 0x32
 800bfa0:	d00e      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2b3c      	cmp	r3, #60	; 0x3c
 800bfa6:	d00b      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b46      	cmp	r3, #70	; 0x46
 800bfac:	d008      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b50      	cmp	r3, #80	; 0x50
 800bfb2:	d005      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b5a      	cmp	r3, #90	; 0x5a
 800bfb8:	d002      	beq.n	800bfc0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b64      	cmp	r3, #100	; 0x64
 800bfbe:	d118      	bne.n	800bff2 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bfc6:	f04f 0200 	mov.w	r2, #0
 800bfca:	4b7b      	ldr	r3, [pc, #492]	; (800c1b8 <setFrequency+0x250>)
 800bfcc:	f7f4 fb2c 	bl	8000628 <__aeabi_dmul>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f7f4 fdfe 	bl	8000bd8 <__aeabi_d2uiz>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	4b76      	ldr	r3, [pc, #472]	; (800c1bc <setFrequency+0x254>)
 800bfe2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800bfe4:	4b75      	ldr	r3, [pc, #468]	; (800c1bc <setFrequency+0x254>)
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	1e5a      	subs	r2, r3, #1
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	62da      	str	r2, [r3, #44]	; 0x2c
 800bff0:	e0dd      	b.n	800c1ae <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2ba0      	cmp	r3, #160	; 0xa0
 800bff6:	d022      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2bc8      	cmp	r3, #200	; 0xc8
 800bffc:	d01f      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c004:	d01b      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800c00c:	d017      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c014:	d013      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800c01c:	d00f      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c024:	d00b      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800c02c:	d007      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800c034:	d003      	beq.n	800c03e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c03c:	d118      	bne.n	800c070 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c044:	f04f 0200 	mov.w	r2, #0
 800c048:	4b5d      	ldr	r3, [pc, #372]	; (800c1c0 <setFrequency+0x258>)
 800c04a:	f7f4 faed 	bl	8000628 <__aeabi_dmul>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4610      	mov	r0, r2
 800c054:	4619      	mov	r1, r3
 800c056:	f7f4 fdbf 	bl	8000bd8 <__aeabi_d2uiz>
 800c05a:	4603      	mov	r3, r0
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	4b57      	ldr	r3, [pc, #348]	; (800c1bc <setFrequency+0x254>)
 800c060:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c062:	4b56      	ldr	r3, [pc, #344]	; (800c1bc <setFrequency+0x254>)
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	1e5a      	subs	r2, r3, #1
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c06e:	e09e      	b.n	800c1ae <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c076:	d029      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c07e:	d025      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c086:	4293      	cmp	r3, r2
 800c088:	d020      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800c090:	d01c      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f241 3288 	movw	r2, #5000	; 0x1388
 800c098:	4293      	cmp	r3, r2
 800c09a:	d017      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f241 7270 	movw	r2, #6000	; 0x1770
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d012      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d00d      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800c0b6:	d009      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f242 3228 	movw	r2, #9000	; 0x2328
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d004      	beq.n	800c0cc <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f242 7210 	movw	r2, #10000	; 0x2710
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d118      	bne.n	800c0fe <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	4b3b      	ldr	r3, [pc, #236]	; (800c1c4 <setFrequency+0x25c>)
 800c0d8:	f7f4 faa6 	bl	8000628 <__aeabi_dmul>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	f7f4 fd78 	bl	8000bd8 <__aeabi_d2uiz>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	4b33      	ldr	r3, [pc, #204]	; (800c1bc <setFrequency+0x254>)
 800c0ee:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c0f0:	4b32      	ldr	r3, [pc, #200]	; (800c1bc <setFrequency+0x254>)
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	1e5a      	subs	r2, r3, #1
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	62da      	str	r2, [r3, #44]	; 0x2c
 800c0fc:	e057      	b.n	800c1ae <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c104:	d028      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d023      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f247 5230 	movw	r2, #30000	; 0x7530
 800c116:	4293      	cmp	r3, r2
 800c118:	d01e      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f649 4240 	movw	r2, #40000	; 0x9c40
 800c120:	4293      	cmp	r3, r2
 800c122:	d019      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d014      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f64e 2260 	movw	r2, #60000	; 0xea60
 800c134:	4293      	cmp	r3, r2
 800c136:	d00f      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4a23      	ldr	r2, [pc, #140]	; (800c1c8 <setFrequency+0x260>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d00b      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4a22      	ldr	r2, [pc, #136]	; (800c1cc <setFrequency+0x264>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d007      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4a21      	ldr	r2, [pc, #132]	; (800c1d0 <setFrequency+0x268>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d003      	beq.n	800c158 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4a20      	ldr	r2, [pc, #128]	; (800c1d4 <setFrequency+0x26c>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d111      	bne.n	800c17c <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c15e:	4610      	mov	r0, r2
 800c160:	4619      	mov	r1, r3
 800c162:	f7f4 fd39 	bl	8000bd8 <__aeabi_d2uiz>
 800c166:	4603      	mov	r3, r0
 800c168:	b29a      	uxth	r2, r3
 800c16a:	4b14      	ldr	r3, [pc, #80]	; (800c1bc <setFrequency+0x254>)
 800c16c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c16e:	4b13      	ldr	r3, [pc, #76]	; (800c1bc <setFrequency+0x254>)
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	1e5a      	subs	r2, r3, #1
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	62da      	str	r2, [r3, #44]	; 0x2c
 800c17a:	e018      	b.n	800c1ae <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	4b14      	ldr	r3, [pc, #80]	; (800c1d8 <setFrequency+0x270>)
 800c188:	f7f4 fb78 	bl	800087c <__aeabi_ddiv>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4610      	mov	r0, r2
 800c192:	4619      	mov	r1, r3
 800c194:	f7f4 fd20 	bl	8000bd8 <__aeabi_d2uiz>
 800c198:	4603      	mov	r3, r0
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <setFrequency+0x254>)
 800c19e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c1a0:	4b06      	ldr	r3, [pc, #24]	; (800c1bc <setFrequency+0x254>)
 800c1a2:	881b      	ldrh	r3, [r3, #0]
 800c1a4:	1e5a      	subs	r2, r3, #1
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	408f4000 	.word	0x408f4000
 800c1bc:	20014020 	.word	0x20014020
 800c1c0:	40590000 	.word	0x40590000
 800c1c4:	40240000 	.word	0x40240000
 800c1c8:	00011170 	.word	0x00011170
 800c1cc:	00013880 	.word	0x00013880
 800c1d0:	00015f90 	.word	0x00015f90
 800c1d4:	000186a0 	.word	0x000186a0
 800c1d8:	40340000 	.word	0x40340000

0800c1dc <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 800c1dc:	b590      	push	{r4, r7, lr}
 800c1de:	b08b      	sub	sp, #44	; 0x2c
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	7a1b      	ldrb	r3, [r3, #8]
 800c1e8:	2b03      	cmp	r3, #3
 800c1ea:	f200 80c3 	bhi.w	800c374 <setDuttyCycle+0x198>
 800c1ee:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <setDuttyCycle+0x18>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c205 	.word	0x0800c205
 800c1f8:	0800c261 	.word	0x0800c261
 800c1fc:	0800c2bd 	.word	0x0800c2bd
 800c200:	0800c319 	.word	0x0800c319
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	ed93 7a06 	vldr	s14, [r3, #24]
 800c20a:	4b5d      	ldr	r3, [pc, #372]	; (800c380 <setDuttyCycle+0x1a4>)
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	ee07 3a90 	vmov	s15, r3
 800c212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c21a:	ee17 0a90 	vmov	r0, s15
 800c21e:	f7f4 f9ab 	bl	8000578 <__aeabi_f2d>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800c22a:	f04f 0200 	mov.w	r2, #0
 800c22e:	4b55      	ldr	r3, [pc, #340]	; (800c384 <setDuttyCycle+0x1a8>)
 800c230:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c234:	f7f4 fb22 	bl	800087c <__aeabi_ddiv>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	4610      	mov	r0, r2
 800c23e:	4619      	mov	r1, r3
 800c240:	f04f 0200 	mov.w	r2, #0
 800c244:	4b50      	ldr	r3, [pc, #320]	; (800c388 <setDuttyCycle+0x1ac>)
 800c246:	f7f4 f837 	bl	80002b8 <__aeabi_dsub>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4610      	mov	r0, r2
 800c250:	4619      	mov	r1, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681c      	ldr	r4, [r3, #0]
 800c256:	f7f4 fcbf 	bl	8000bd8 <__aeabi_d2uiz>
 800c25a:	4603      	mov	r3, r0
 800c25c:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800c25e:	e08a      	b.n	800c376 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	ed93 7a06 	vldr	s14, [r3, #24]
 800c266:	4b46      	ldr	r3, [pc, #280]	; (800c380 <setDuttyCycle+0x1a4>)
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	ee07 3a90 	vmov	s15, r3
 800c26e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c276:	ee17 0a90 	vmov	r0, s15
 800c27a:	f7f4 f97d 	bl	8000578 <__aeabi_f2d>
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800c286:	f04f 0200 	mov.w	r2, #0
 800c28a:	4b3e      	ldr	r3, [pc, #248]	; (800c384 <setDuttyCycle+0x1a8>)
 800c28c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c290:	f7f4 faf4 	bl	800087c <__aeabi_ddiv>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4610      	mov	r0, r2
 800c29a:	4619      	mov	r1, r3
 800c29c:	f04f 0200 	mov.w	r2, #0
 800c2a0:	4b39      	ldr	r3, [pc, #228]	; (800c388 <setDuttyCycle+0x1ac>)
 800c2a2:	f7f4 f809 	bl	80002b8 <__aeabi_dsub>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681c      	ldr	r4, [r3, #0]
 800c2b2:	f7f4 fc91 	bl	8000bd8 <__aeabi_d2uiz>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800c2ba:	e05c      	b.n	800c376 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	ed93 7a06 	vldr	s14, [r3, #24]
 800c2c2:	4b2f      	ldr	r3, [pc, #188]	; (800c380 <setDuttyCycle+0x1a4>)
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d2:	ee17 0a90 	vmov	r0, s15
 800c2d6:	f7f4 f94f 	bl	8000578 <__aeabi_f2d>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 800c2e2:	f04f 0200 	mov.w	r2, #0
 800c2e6:	4b27      	ldr	r3, [pc, #156]	; (800c384 <setDuttyCycle+0x1a8>)
 800c2e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c2ec:	f7f4 fac6 	bl	800087c <__aeabi_ddiv>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	f04f 0200 	mov.w	r2, #0
 800c2fc:	4b22      	ldr	r3, [pc, #136]	; (800c388 <setDuttyCycle+0x1ac>)
 800c2fe:	f7f3 ffdb 	bl	80002b8 <__aeabi_dsub>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4610      	mov	r0, r2
 800c308:	4619      	mov	r1, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681c      	ldr	r4, [r3, #0]
 800c30e:	f7f4 fc63 	bl	8000bd8 <__aeabi_d2uiz>
 800c312:	4603      	mov	r3, r0
 800c314:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c316:	e02e      	b.n	800c376 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	ed93 7a06 	vldr	s14, [r3, #24]
 800c31e:	4b18      	ldr	r3, [pc, #96]	; (800c380 <setDuttyCycle+0x1a4>)
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	ee07 3a90 	vmov	s15, r3
 800c326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c32e:	ee17 0a90 	vmov	r0, s15
 800c332:	f7f4 f921 	bl	8000578 <__aeabi_f2d>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 800c33e:	f04f 0200 	mov.w	r2, #0
 800c342:	4b10      	ldr	r3, [pc, #64]	; (800c384 <setDuttyCycle+0x1a8>)
 800c344:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c348:	f7f4 fa98 	bl	800087c <__aeabi_ddiv>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	4610      	mov	r0, r2
 800c352:	4619      	mov	r1, r3
 800c354:	f04f 0200 	mov.w	r2, #0
 800c358:	4b0b      	ldr	r3, [pc, #44]	; (800c388 <setDuttyCycle+0x1ac>)
 800c35a:	f7f3 ffad 	bl	80002b8 <__aeabi_dsub>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4610      	mov	r0, r2
 800c364:	4619      	mov	r1, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681c      	ldr	r4, [r3, #0]
 800c36a:	f7f4 fc35 	bl	8000bd8 <__aeabi_d2uiz>
 800c36e:	4603      	mov	r3, r0
 800c370:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c372:	e000      	b.n	800c376 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 800c374:	bf00      	nop
	}

	}// fin del switch-case

}
 800c376:	bf00      	nop
 800c378:	372c      	adds	r7, #44	; 0x2c
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd90      	pop	{r4, r7, pc}
 800c37e:	bf00      	nop
 800c380:	20014020 	.word	0x20014020
 800c384:	40590000 	.word	0x40590000
 800c388:	3ff00000 	.word	0x3ff00000

0800c38c <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 800c38c:	b590      	push	{r4, r7, lr}
 800c38e:	b08b      	sub	sp, #44	; 0x2c
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	7a1b      	ldrb	r3, [r3, #8]
 800c398:	2b03      	cmp	r3, #3
 800c39a:	f200 80d3 	bhi.w	800c544 <setDuttyCycleAfOpt+0x1b8>
 800c39e:	a201      	add	r2, pc, #4	; (adr r2, 800c3a4 <setDuttyCycleAfOpt+0x18>)
 800c3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a4:	0800c3b5 	.word	0x0800c3b5
 800c3a8:	0800c419 	.word	0x0800c419
 800c3ac:	0800c47d 	.word	0x0800c47d
 800c3b0:	0800c4e1 	.word	0x0800c4e1
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c3ba:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c550 <setDuttyCycleAfOpt+0x1c4>
 800c3be:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c3c2:	4b64      	ldr	r3, [pc, #400]	; (800c554 <setDuttyCycleAfOpt+0x1c8>)
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	ee07 3a90 	vmov	s15, r3
 800c3ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d2:	ee17 0a90 	vmov	r0, s15
 800c3d6:	f7f4 f8cf 	bl	8000578 <__aeabi_f2d>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 800c3e2:	f04f 0200 	mov.w	r2, #0
 800c3e6:	4b5c      	ldr	r3, [pc, #368]	; (800c558 <setDuttyCycleAfOpt+0x1cc>)
 800c3e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3ec:	f7f4 fa46 	bl	800087c <__aeabi_ddiv>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	f04f 0200 	mov.w	r2, #0
 800c3fc:	4b57      	ldr	r3, [pc, #348]	; (800c55c <setDuttyCycleAfOpt+0x1d0>)
 800c3fe:	f7f3 ff5b 	bl	80002b8 <__aeabi_dsub>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	4610      	mov	r0, r2
 800c408:	4619      	mov	r1, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681c      	ldr	r4, [r3, #0]
 800c40e:	f7f4 fbe3 	bl	8000bd8 <__aeabi_d2uiz>
 800c412:	4603      	mov	r3, r0
 800c414:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800c416:	e096      	b.n	800c546 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c41e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c550 <setDuttyCycleAfOpt+0x1c4>
 800c422:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c426:	4b4b      	ldr	r3, [pc, #300]	; (800c554 <setDuttyCycleAfOpt+0x1c8>)
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	ee07 3a90 	vmov	s15, r3
 800c42e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c436:	ee17 0a90 	vmov	r0, s15
 800c43a:	f7f4 f89d 	bl	8000578 <__aeabi_f2d>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 800c446:	f04f 0200 	mov.w	r2, #0
 800c44a:	4b43      	ldr	r3, [pc, #268]	; (800c558 <setDuttyCycleAfOpt+0x1cc>)
 800c44c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c450:	f7f4 fa14 	bl	800087c <__aeabi_ddiv>
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	4610      	mov	r0, r2
 800c45a:	4619      	mov	r1, r3
 800c45c:	f04f 0200 	mov.w	r2, #0
 800c460:	4b3e      	ldr	r3, [pc, #248]	; (800c55c <setDuttyCycleAfOpt+0x1d0>)
 800c462:	f7f3 ff29 	bl	80002b8 <__aeabi_dsub>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	4610      	mov	r0, r2
 800c46c:	4619      	mov	r1, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681c      	ldr	r4, [r3, #0]
 800c472:	f7f4 fbb1 	bl	8000bd8 <__aeabi_d2uiz>
 800c476:	4603      	mov	r3, r0
 800c478:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800c47a:	e064      	b.n	800c546 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c482:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c550 <setDuttyCycleAfOpt+0x1c4>
 800c486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c48a:	4b32      	ldr	r3, [pc, #200]	; (800c554 <setDuttyCycleAfOpt+0x1c8>)
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	ee07 3a90 	vmov	s15, r3
 800c492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49a:	ee17 0a90 	vmov	r0, s15
 800c49e:	f7f4 f86b 	bl	8000578 <__aeabi_f2d>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800c4aa:	f04f 0200 	mov.w	r2, #0
 800c4ae:	4b2a      	ldr	r3, [pc, #168]	; (800c558 <setDuttyCycleAfOpt+0x1cc>)
 800c4b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c4b4:	f7f4 f9e2 	bl	800087c <__aeabi_ddiv>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	4610      	mov	r0, r2
 800c4be:	4619      	mov	r1, r3
 800c4c0:	f04f 0200 	mov.w	r2, #0
 800c4c4:	4b25      	ldr	r3, [pc, #148]	; (800c55c <setDuttyCycleAfOpt+0x1d0>)
 800c4c6:	f7f3 fef7 	bl	80002b8 <__aeabi_dsub>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681c      	ldr	r4, [r3, #0]
 800c4d6:	f7f4 fb7f 	bl	8000bd8 <__aeabi_d2uiz>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c4de:	e032      	b.n	800c546 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c4e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c550 <setDuttyCycleAfOpt+0x1c4>
 800c4ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4ee:	4b19      	ldr	r3, [pc, #100]	; (800c554 <setDuttyCycleAfOpt+0x1c8>)
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	ee07 3a90 	vmov	s15, r3
 800c4f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4fe:	ee17 0a90 	vmov	r0, s15
 800c502:	f7f4 f839 	bl	8000578 <__aeabi_f2d>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800c50e:	f04f 0200 	mov.w	r2, #0
 800c512:	4b11      	ldr	r3, [pc, #68]	; (800c558 <setDuttyCycleAfOpt+0x1cc>)
 800c514:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c518:	f7f4 f9b0 	bl	800087c <__aeabi_ddiv>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	4610      	mov	r0, r2
 800c522:	4619      	mov	r1, r3
 800c524:	f04f 0200 	mov.w	r2, #0
 800c528:	4b0c      	ldr	r3, [pc, #48]	; (800c55c <setDuttyCycleAfOpt+0x1d0>)
 800c52a:	f7f3 fec5 	bl	80002b8 <__aeabi_dsub>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4610      	mov	r0, r2
 800c534:	4619      	mov	r1, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681c      	ldr	r4, [r3, #0]
 800c53a:	f7f4 fb4d 	bl	8000bd8 <__aeabi_d2uiz>
 800c53e:	4603      	mov	r3, r0
 800c540:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c542:	e000      	b.n	800c546 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 800c544:	bf00      	nop
	}

	}// fin del switch-case


}
 800c546:	bf00      	nop
 800c548:	372c      	adds	r7, #44	; 0x2c
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd90      	pop	{r4, r7, pc}
 800c54e:	bf00      	nop
 800c550:	42c80000 	.word	0x42c80000
 800c554:	20014020 	.word	0x20014020
 800c558:	40590000 	.word	0x40590000
 800c55c:	3ff00000 	.word	0x3ff00000

0800c560 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7a1b      	ldrb	r3, [r3, #8]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d82f      	bhi.n	800c5d0 <disableOutput+0x70>
 800c570:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <disableOutput+0x18>)
 800c572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c576:	bf00      	nop
 800c578:	0800c589 	.word	0x0800c589
 800c57c:	0800c59b 	.word	0x0800c59b
 800c580:	0800c5ad 	.word	0x0800c5ad
 800c584:	0800c5bf 	.word	0x0800c5bf
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6a1a      	ldr	r2, [r3, #32]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f022 0201 	bic.w	r2, r2, #1
 800c596:	621a      	str	r2, [r3, #32]

			break;
 800c598:	e01b      	b.n	800c5d2 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6a1a      	ldr	r2, [r3, #32]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f022 0210 	bic.w	r2, r2, #16
 800c5a8:	621a      	str	r2, [r3, #32]

			break;
 800c5aa:	e012      	b.n	800c5d2 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6a1a      	ldr	r2, [r3, #32]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5ba:	621a      	str	r2, [r3, #32]

			break;
 800c5bc:	e009      	b.n	800c5d2 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	6a1a      	ldr	r2, [r3, #32]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5cc:	621a      	str	r2, [r3, #32]

			break;
 800c5ce:	e000      	b.n	800c5d2 <disableOutput+0x72>
		}

		default: {
			break;
 800c5d0:	bf00      	nop
		}
		}

	return RESET;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7a1b      	ldrb	r3, [r3, #8]
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	d82f      	bhi.n	800c650 <PWMx_Toggle+0x70>
 800c5f0:	a201      	add	r2, pc, #4	; (adr r2, 800c5f8 <PWMx_Toggle+0x18>)
 800c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f6:	bf00      	nop
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c61b 	.word	0x0800c61b
 800c600:	0800c62d 	.word	0x0800c62d
 800c604:	0800c63f 	.word	0x0800c63f
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	6a1a      	ldr	r2, [r3, #32]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f082 0202 	eor.w	r2, r2, #2
 800c616:	621a      	str	r2, [r3, #32]

				break;
 800c618:	e01b      	b.n	800c652 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6a1a      	ldr	r2, [r3, #32]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f082 0220 	eor.w	r2, r2, #32
 800c628:	621a      	str	r2, [r3, #32]

				break;
 800c62a:	e012      	b.n	800c652 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6a1a      	ldr	r2, [r3, #32]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800c63a:	621a      	str	r2, [r3, #32]

				break;
 800c63c:	e009      	b.n	800c652 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6a1a      	ldr	r2, [r3, #32]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800c64c:	621a      	str	r2, [r3, #32]

				break;
 800c64e:	e000      	b.n	800c652 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 800c650:	bf00      	nop
			}
			}


}
 800c652:	bf00      	nop
 800c654:	370c      	adds	r7, #12
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop

0800c660 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 800c66a:	4b92      	ldr	r3, [pc, #584]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a91      	ldr	r2, [pc, #580]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c674:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800c676:	4b8f      	ldr	r3, [pc, #572]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67c:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800c67e:	4b8e      	ldr	r3, [pc, #568]	; (800c8b8 <RCC_enableMaxFrequencies+0x258>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a8d      	ldr	r2, [pc, #564]	; (800c8b8 <RCC_enableMaxFrequencies+0x258>)
 800c684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c688:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800c68a:	4b8a      	ldr	r3, [pc, #552]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	4a89      	ldr	r2, [pc, #548]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c690:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c694:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800c696:	79fb      	ldrb	r3, [r7, #7]
 800c698:	2b08      	cmp	r3, #8
 800c69a:	f200 82fc 	bhi.w	800cc96 <RCC_enableMaxFrequencies+0x636>
 800c69e:	a201      	add	r2, pc, #4	; (adr r2, 800c6a4 <RCC_enableMaxFrequencies+0x44>)
 800c6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a4:	0800c6c9 	.word	0x0800c6c9
 800c6a8:	0800c76b 	.word	0x0800c76b
 800c6ac:	0800c80d 	.word	0x0800c80d
 800c6b0:	0800c8c1 	.word	0x0800c8c1
 800c6b4:	0800c963 	.word	0x0800c963
 800c6b8:	0800ca05 	.word	0x0800ca05
 800c6bc:	0800cab1 	.word	0x0800cab1
 800c6c0:	0800cb53 	.word	0x0800cb53
 800c6c4:	0800cbf5 	.word	0x0800cbf5
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c6c8:	4b7a      	ldr	r3, [pc, #488]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	4a79      	ldr	r2, [pc, #484]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c6d4:	4b77      	ldr	r3, [pc, #476]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	4a76      	ldr	r2, [pc, #472]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6da:	f043 0310 	orr.w	r3, r3, #16
 800c6de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c6e0:	4b74      	ldr	r3, [pc, #464]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	4a73      	ldr	r2, [pc, #460]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c6ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c6f0:	4b70      	ldr	r3, [pc, #448]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	4a6f      	ldr	r2, [pc, #444]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6f6:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c6fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c6fc:	4b6d      	ldr	r3, [pc, #436]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	4a6c      	ldr	r2, [pc, #432]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c702:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c706:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c708:	4b6a      	ldr	r3, [pc, #424]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	4a69      	ldr	r2, [pc, #420]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c70e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c712:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c714:	4b67      	ldr	r3, [pc, #412]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	4a66      	ldr	r2, [pc, #408]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c71a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c71e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c720:	4b64      	ldr	r3, [pc, #400]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	4a63      	ldr	r2, [pc, #396]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c726:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c72a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c72c:	4b61      	ldr	r3, [pc, #388]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	4a60      	ldr	r2, [pc, #384]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c736:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c738:	4b5e      	ldr	r3, [pc, #376]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a5d      	ldr	r2, [pc, #372]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c73e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c742:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c744:	e000      	b.n	800c748 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 800c746:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c748:	4b5a      	ldr	r3, [pc, #360]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0f8      	beq.n	800c746 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c754:	4b59      	ldr	r3, [pc, #356]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a58      	ldr	r2, [pc, #352]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c75a:	f023 030f 	bic.w	r3, r3, #15
 800c75e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c760:	4b56      	ldr	r3, [pc, #344]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c762:	4a56      	ldr	r2, [pc, #344]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6013      	str	r3, [r2, #0]

			break;
 800c768:	e296      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c76a:	4b52      	ldr	r3, [pc, #328]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	4a51      	ldr	r2, [pc, #324]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c770:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c774:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c776:	4b4f      	ldr	r3, [pc, #316]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	4a4e      	ldr	r2, [pc, #312]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c77c:	f043 0310 	orr.w	r3, r3, #16
 800c780:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c782:	4b4c      	ldr	r3, [pc, #304]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	4a4b      	ldr	r2, [pc, #300]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c788:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c78c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c790:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c792:	4b48      	ldr	r3, [pc, #288]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	4a47      	ldr	r2, [pc, #284]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c798:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c79c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c79e:	4b45      	ldr	r3, [pc, #276]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	4a44      	ldr	r2, [pc, #272]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c7a8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800c7aa:	4b42      	ldr	r3, [pc, #264]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	4a41      	ldr	r2, [pc, #260]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7b4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c7b6:	4b3f      	ldr	r3, [pc, #252]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	4a3e      	ldr	r2, [pc, #248]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7c0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c7c2:	4b3c      	ldr	r3, [pc, #240]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	4a3b      	ldr	r2, [pc, #236]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7cc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c7ce:	4b39      	ldr	r3, [pc, #228]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	4a38      	ldr	r2, [pc, #224]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7d8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c7da:	4b36      	ldr	r3, [pc, #216]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a35      	ldr	r2, [pc, #212]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7e4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c7e6:	e000      	b.n	800c7ea <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800c7e8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c7ea:	4b32      	ldr	r3, [pc, #200]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0f8      	beq.n	800c7e8 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c7f6:	4b31      	ldr	r3, [pc, #196]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a30      	ldr	r2, [pc, #192]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c7fc:	f023 030f 	bic.w	r3, r3, #15
 800c800:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c802:	4b2e      	ldr	r3, [pc, #184]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c804:	4a2d      	ldr	r2, [pc, #180]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	6013      	str	r3, [r2, #0]

			break;
 800c80a:	e245      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c80c:	4b29      	ldr	r3, [pc, #164]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	4a28      	ldr	r2, [pc, #160]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c816:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c818:	4b26      	ldr	r3, [pc, #152]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	4a25      	ldr	r2, [pc, #148]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c81e:	f043 0310 	orr.w	r3, r3, #16
 800c822:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c824:	4b23      	ldr	r3, [pc, #140]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	4a22      	ldr	r2, [pc, #136]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c82a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c82e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c832:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 800c834:	4b1f      	ldr	r3, [pc, #124]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	4a1e      	ldr	r2, [pc, #120]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c83a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800c83e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c840:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	4a1b      	ldr	r2, [pc, #108]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c846:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c84a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c84c:	4b19      	ldr	r3, [pc, #100]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	4a18      	ldr	r2, [pc, #96]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c856:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c858:	4b16      	ldr	r3, [pc, #88]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	4a15      	ldr	r2, [pc, #84]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c85e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c862:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c864:	4b13      	ldr	r3, [pc, #76]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	4a12      	ldr	r2, [pc, #72]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c86a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c86e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c870:	4b10      	ldr	r3, [pc, #64]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	4a0f      	ldr	r2, [pc, #60]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c87a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c87c:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a0c      	ldr	r2, [pc, #48]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c886:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c888:	e000      	b.n	800c88c <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800c88a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c88c:	4b09      	ldr	r3, [pc, #36]	; (800c8b4 <RCC_enableMaxFrequencies+0x254>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c894:	2b00      	cmp	r3, #0
 800c896:	d0f8      	beq.n	800c88a <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c898:	4b08      	ldr	r3, [pc, #32]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a07      	ldr	r2, [pc, #28]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c89e:	f023 030f 	bic.w	r3, r3, #15
 800c8a2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c8a4:	4b05      	ldr	r3, [pc, #20]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a04      	ldr	r2, [pc, #16]	; (800c8bc <RCC_enableMaxFrequencies+0x25c>)
 800c8aa:	f043 0301 	orr.w	r3, r3, #1
 800c8ae:	6013      	str	r3, [r2, #0]


			break;
 800c8b0:	e1f2      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
 800c8b2:	bf00      	nop
 800c8b4:	40023800 	.word	0x40023800
 800c8b8:	40007000 	.word	0x40007000
 800c8bc:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c8c0:	4b79      	ldr	r3, [pc, #484]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	4a78      	ldr	r2, [pc, #480]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c8ca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c8cc:	4b76      	ldr	r3, [pc, #472]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	4a75      	ldr	r2, [pc, #468]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8d2:	f043 0310 	orr.w	r3, r3, #16
 800c8d6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c8d8:	4b73      	ldr	r3, [pc, #460]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	4a72      	ldr	r2, [pc, #456]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8e6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800c8e8:	4b6f      	ldr	r3, [pc, #444]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	4a6e      	ldr	r2, [pc, #440]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8ee:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800c8f2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c8f4:	4b6c      	ldr	r3, [pc, #432]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	4a6b      	ldr	r2, [pc, #428]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c8fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c8fe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c900:	4b69      	ldr	r3, [pc, #420]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c902:	4a69      	ldr	r2, [pc, #420]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c908:	4b67      	ldr	r3, [pc, #412]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	4a66      	ldr	r2, [pc, #408]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c912:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c914:	4b64      	ldr	r3, [pc, #400]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	4a63      	ldr	r2, [pc, #396]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c91a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c91e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c920:	4b61      	ldr	r3, [pc, #388]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	4a60      	ldr	r2, [pc, #384]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c92a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c92c:	4b5e      	ldr	r3, [pc, #376]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a5d      	ldr	r2, [pc, #372]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c936:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c938:	e000      	b.n	800c93c <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 800c93a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c93c:	4b5a      	ldr	r3, [pc, #360]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d0f8      	beq.n	800c93a <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c948:	4b58      	ldr	r3, [pc, #352]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a57      	ldr	r2, [pc, #348]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c94e:	f023 030f 	bic.w	r3, r3, #15
 800c952:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c954:	4b55      	ldr	r3, [pc, #340]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a54      	ldr	r2, [pc, #336]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c95a:	f043 0301 	orr.w	r3, r3, #1
 800c95e:	6013      	str	r3, [r2, #0]

			break;
 800c960:	e19a      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c962:	4b51      	ldr	r3, [pc, #324]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	4a50      	ldr	r2, [pc, #320]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c968:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c96c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c96e:	4b4e      	ldr	r3, [pc, #312]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	4a4d      	ldr	r2, [pc, #308]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c974:	f043 0310 	orr.w	r3, r3, #16
 800c978:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c97a:	4b4b      	ldr	r3, [pc, #300]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	4a4a      	ldr	r2, [pc, #296]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c980:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c988:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c98a:	4b47      	ldr	r3, [pc, #284]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	4a46      	ldr	r2, [pc, #280]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c990:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c994:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c996:	4b44      	ldr	r3, [pc, #272]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	4a43      	ldr	r2, [pc, #268]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c99c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c9a0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c9a2:	4b41      	ldr	r3, [pc, #260]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9a4:	4a40      	ldr	r2, [pc, #256]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c9aa:	4b3f      	ldr	r3, [pc, #252]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	4a3e      	ldr	r2, [pc, #248]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9b4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c9b6:	4b3c      	ldr	r3, [pc, #240]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	4a3b      	ldr	r2, [pc, #236]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c9c0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c9c2:	4b39      	ldr	r3, [pc, #228]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	4a38      	ldr	r2, [pc, #224]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c9cc:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c9ce:	4b36      	ldr	r3, [pc, #216]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a35      	ldr	r2, [pc, #212]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c9d8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c9da:	e000      	b.n	800c9de <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 800c9dc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c9de:	4b32      	ldr	r3, [pc, #200]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d0f8      	beq.n	800c9dc <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c9ea:	4b30      	ldr	r3, [pc, #192]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a2f      	ldr	r2, [pc, #188]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c9f0:	f023 030f 	bic.w	r3, r3, #15
 800c9f4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c9f6:	4b2d      	ldr	r3, [pc, #180]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a2c      	ldr	r2, [pc, #176]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800c9fc:	f043 0301 	orr.w	r3, r3, #1
 800ca00:	6013      	str	r3, [r2, #0]

			break;
 800ca02:	e149      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800ca04:	4b28      	ldr	r3, [pc, #160]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	4a27      	ldr	r2, [pc, #156]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca0e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800ca10:	4b25      	ldr	r3, [pc, #148]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4a24      	ldr	r2, [pc, #144]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca16:	f043 0310 	orr.w	r3, r3, #16
 800ca1a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800ca1c:	4b22      	ldr	r3, [pc, #136]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	4a21      	ldr	r2, [pc, #132]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ca26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca2a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 800ca2c:	4b1e      	ldr	r3, [pc, #120]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	4a1d      	ldr	r2, [pc, #116]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca32:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800ca36:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800ca38:	4b1b      	ldr	r3, [pc, #108]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	4a1a      	ldr	r2, [pc, #104]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ca42:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800ca44:	4b18      	ldr	r3, [pc, #96]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca46:	4a18      	ldr	r2, [pc, #96]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800ca4c:	4b16      	ldr	r3, [pc, #88]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	4a15      	ldr	r2, [pc, #84]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca56:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800ca58:	4b13      	ldr	r3, [pc, #76]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	4a12      	ldr	r2, [pc, #72]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca62:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800ca64:	4b10      	ldr	r3, [pc, #64]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	4a0f      	ldr	r2, [pc, #60]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca6e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800ca70:	4b0d      	ldr	r3, [pc, #52]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a0c      	ldr	r2, [pc, #48]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca7a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800ca7c:	e000      	b.n	800ca80 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800ca7e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800ca80:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <RCC_enableMaxFrequencies+0x448>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d0f8      	beq.n	800ca7e <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800ca8c:	4b07      	ldr	r3, [pc, #28]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a06      	ldr	r2, [pc, #24]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800ca92:	f023 030f 	bic.w	r3, r3, #15
 800ca96:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800ca98:	4b04      	ldr	r3, [pc, #16]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a03      	ldr	r2, [pc, #12]	; (800caac <RCC_enableMaxFrequencies+0x44c>)
 800ca9e:	f043 0302 	orr.w	r3, r3, #2
 800caa2:	6013      	str	r3, [r2, #0]

			break;
 800caa4:	e0f8      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
 800caa6:	bf00      	nop
 800caa8:	40023800 	.word	0x40023800
 800caac:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800cab0:	4b84      	ldr	r3, [pc, #528]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	4a83      	ldr	r2, [pc, #524]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800caba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800cabc:	4b81      	ldr	r3, [pc, #516]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	4a80      	ldr	r2, [pc, #512]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cac2:	f043 0310 	orr.w	r3, r3, #16
 800cac6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800cac8:	4b7e      	ldr	r3, [pc, #504]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	4a7d      	ldr	r2, [pc, #500]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cad6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 800cad8:	4b7a      	ldr	r3, [pc, #488]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	4a79      	ldr	r2, [pc, #484]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cade:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800cae2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cae4:	4b77      	ldr	r3, [pc, #476]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	4a76      	ldr	r2, [pc, #472]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800caea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800caee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800caf0:	4b74      	ldr	r3, [pc, #464]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800caf2:	4a74      	ldr	r2, [pc, #464]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800caf8:	4b72      	ldr	r3, [pc, #456]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	4a71      	ldr	r2, [pc, #452]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cafe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb02:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cb04:	4b6f      	ldr	r3, [pc, #444]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	4a6e      	ldr	r2, [pc, #440]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb0e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cb10:	4b6c      	ldr	r3, [pc, #432]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	4a6b      	ldr	r2, [pc, #428]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cb1a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cb1c:	4b69      	ldr	r3, [pc, #420]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a68      	ldr	r2, [pc, #416]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb26:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cb28:	e000      	b.n	800cb2c <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 800cb2a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cb2c:	4b65      	ldr	r3, [pc, #404]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0f8      	beq.n	800cb2a <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cb38:	4b63      	ldr	r3, [pc, #396]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a62      	ldr	r2, [pc, #392]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cb3e:	f023 030f 	bic.w	r3, r3, #15
 800cb42:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800cb44:	4b60      	ldr	r3, [pc, #384]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a5f      	ldr	r2, [pc, #380]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cb4a:	f043 0302 	orr.w	r3, r3, #2
 800cb4e:	6013      	str	r3, [r2, #0]

			break;
 800cb50:	e0a2      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800cb52:	4b5c      	ldr	r3, [pc, #368]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	4a5b      	ldr	r2, [pc, #364]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb5c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800cb5e:	4b59      	ldr	r3, [pc, #356]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	4a58      	ldr	r2, [pc, #352]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb64:	f043 0310 	orr.w	r3, r3, #16
 800cb68:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800cb6a:	4b56      	ldr	r3, [pc, #344]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	4a55      	ldr	r2, [pc, #340]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb70:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cb74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb78:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800cb7a:	4b52      	ldr	r3, [pc, #328]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	4a51      	ldr	r2, [pc, #324]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb80:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800cb84:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cb86:	4b4f      	ldr	r3, [pc, #316]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	4a4e      	ldr	r2, [pc, #312]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cb90:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800cb92:	4b4c      	ldr	r3, [pc, #304]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb94:	4a4b      	ldr	r2, [pc, #300]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800cb9a:	4b4a      	ldr	r3, [pc, #296]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	4a49      	ldr	r2, [pc, #292]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cba4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cba6:	4b47      	ldr	r3, [pc, #284]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	4a46      	ldr	r2, [pc, #280]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbb0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cbb2:	4b44      	ldr	r3, [pc, #272]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	4a43      	ldr	r2, [pc, #268]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cbbc:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cbbe:	4b41      	ldr	r3, [pc, #260]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a40      	ldr	r2, [pc, #256]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cbc8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cbca:	e000      	b.n	800cbce <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 800cbcc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cbce:	4b3d      	ldr	r3, [pc, #244]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d0f8      	beq.n	800cbcc <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cbda:	4b3b      	ldr	r3, [pc, #236]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a3a      	ldr	r2, [pc, #232]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cbe0:	f023 030f 	bic.w	r3, r3, #15
 800cbe4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800cbe6:	4b38      	ldr	r3, [pc, #224]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a37      	ldr	r2, [pc, #220]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cbec:	f043 0302 	orr.w	r3, r3, #2
 800cbf0:	6013      	str	r3, [r2, #0]

			break;
 800cbf2:	e051      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800cbf4:	4b33      	ldr	r3, [pc, #204]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	4a32      	ldr	r2, [pc, #200]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cbfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbfe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 800cc00:	4b30      	ldr	r3, [pc, #192]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	4a2f      	ldr	r2, [pc, #188]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc06:	f043 0308 	orr.w	r3, r3, #8
 800cc0a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800cc0c:	4b2d      	ldr	r3, [pc, #180]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	4a2c      	ldr	r2, [pc, #176]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cc16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc1a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800cc1c:	4b29      	ldr	r3, [pc, #164]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	4a28      	ldr	r2, [pc, #160]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc22:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800cc26:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cc28:	4b26      	ldr	r3, [pc, #152]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	4a25      	ldr	r2, [pc, #148]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cc32:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800cc34:	4b23      	ldr	r3, [pc, #140]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc36:	4a23      	ldr	r2, [pc, #140]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800cc3c:	4b21      	ldr	r3, [pc, #132]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	4a20      	ldr	r2, [pc, #128]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc46:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cc48:	4b1e      	ldr	r3, [pc, #120]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	4a1d      	ldr	r2, [pc, #116]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc52:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cc54:	4b1b      	ldr	r3, [pc, #108]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	4a1a      	ldr	r2, [pc, #104]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc5e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cc60:	4b18      	ldr	r3, [pc, #96]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a17      	ldr	r2, [pc, #92]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc6a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cc6c:	e000      	b.n	800cc70 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800cc6e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cc70:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d0f8      	beq.n	800cc6e <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cc7c:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a11      	ldr	r2, [pc, #68]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cc82:	f023 030f 	bic.w	r3, r3, #15
 800cc86:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800cc88:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a0e      	ldr	r2, [pc, #56]	; (800ccc8 <RCC_enableMaxFrequencies+0x668>)
 800cc8e:	f043 0303 	orr.w	r3, r3, #3
 800cc92:	6013      	str	r3, [r2, #0]

			break;
 800cc94:	e000      	b.n	800cc98 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800cc96:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800cc98:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	4a09      	ldr	r2, [pc, #36]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800cc9e:	f043 0302 	orr.w	r3, r3, #2
 800cca2:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800cca4:	e000      	b.n	800cca8 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800cca6:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800cca8:	4b06      	ldr	r3, [pc, #24]	; (800ccc4 <RCC_enableMaxFrequencies+0x664>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f003 0308 	and.w	r3, r3, #8
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0f8      	beq.n	800cca6 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	40023800 	.word	0x40023800
 800ccc8:	40023c00 	.word	0x40023c00

0800cccc <__NVIC_EnableIRQ>:
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ccd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	db0b      	blt.n	800ccf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ccde:	79fb      	ldrb	r3, [r7, #7]
 800cce0:	f003 021f 	and.w	r2, r3, #31
 800cce4:	4907      	ldr	r1, [pc, #28]	; (800cd04 <__NVIC_EnableIRQ+0x38>)
 800cce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccea:	095b      	lsrs	r3, r3, #5
 800ccec:	2001      	movs	r0, #1
 800ccee:	fa00 f202 	lsl.w	r2, r0, r2
 800ccf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ccf6:	bf00      	nop
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	e000e100 	.word	0xe000e100

0800cd08 <__NVIC_SetPriority>:
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	6039      	str	r1, [r7, #0]
 800cd12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cd14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	db0a      	blt.n	800cd32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	490c      	ldr	r1, [pc, #48]	; (800cd54 <__NVIC_SetPriority+0x4c>)
 800cd22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd26:	0112      	lsls	r2, r2, #4
 800cd28:	b2d2      	uxtb	r2, r2
 800cd2a:	440b      	add	r3, r1
 800cd2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cd30:	e00a      	b.n	800cd48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	4908      	ldr	r1, [pc, #32]	; (800cd58 <__NVIC_SetPriority+0x50>)
 800cd38:	79fb      	ldrb	r3, [r7, #7]
 800cd3a:	f003 030f 	and.w	r3, r3, #15
 800cd3e:	3b04      	subs	r3, #4
 800cd40:	0112      	lsls	r2, r2, #4
 800cd42:	b2d2      	uxtb	r2, r2
 800cd44:	440b      	add	r3, r1
 800cd46:	761a      	strb	r2, [r3, #24]
}
 800cd48:	bf00      	nop
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr
 800cd54:	e000e100 	.word	0xe000e100
 800cd58:	e000ed00 	.word	0xe000ed00

0800cd5c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 800cd5c:	b590      	push	{r4, r7, lr}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd64:	b672      	cpsid	i
}
 800cd66:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a91      	ldr	r2, [pc, #580]	; (800cfb4 <USART_Config+0x258>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d106      	bne.n	800cd80 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800cd72:	4b91      	ldr	r3, [pc, #580]	; (800cfb8 <USART_Config+0x25c>)
 800cd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd76:	4a90      	ldr	r2, [pc, #576]	; (800cfb8 <USART_Config+0x25c>)
 800cd78:	f043 0310 	orr.w	r3, r3, #16
 800cd7c:	6453      	str	r3, [r2, #68]	; 0x44
 800cd7e:	e018      	b.n	800cdb2 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a8d      	ldr	r2, [pc, #564]	; (800cfbc <USART_Config+0x260>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d106      	bne.n	800cd98 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800cd8a:	4b8b      	ldr	r3, [pc, #556]	; (800cfb8 <USART_Config+0x25c>)
 800cd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8e:	4a8a      	ldr	r2, [pc, #552]	; (800cfb8 <USART_Config+0x25c>)
 800cd90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd94:	6413      	str	r3, [r2, #64]	; 0x40
 800cd96:	e00c      	b.n	800cdb2 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a88      	ldr	r2, [pc, #544]	; (800cfc0 <USART_Config+0x264>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d106      	bne.n	800cdb0 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800cda2:	4b85      	ldr	r3, [pc, #532]	; (800cfb8 <USART_Config+0x25c>)
 800cda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda6:	4a84      	ldr	r2, [pc, #528]	; (800cfb8 <USART_Config+0x25c>)
 800cda8:	f043 0320 	orr.w	r3, r3, #32
 800cdac:	6453      	str	r3, [r2, #68]	; 0x44
 800cdae:	e000      	b.n	800cdb2 <USART_Config+0x56>
	}
	else{
		__NOP();
 800cdb0:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	7a5b      	ldrb	r3, [r3, #9]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d025      	beq.n	800ce16 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7a5b      	ldrb	r3, [r3, #9]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d110      	bne.n	800cdf4 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68da      	ldr	r2, [r3, #12]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cde0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68da      	ldr	r2, [r3, #12]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdf0:	60da      	str	r2, [r3, #12]
 800cdf2:	e018      	b.n	800ce26 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce02:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68da      	ldr	r2, [r3, #12]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce12:	60da      	str	r2, [r3, #12]
 800ce14:	e007      	b.n	800ce26 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	68da      	ldr	r2, [r3, #12]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce24:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7a1b      	ldrb	r3, [r3, #8]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d108      	bne.n	800ce40 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68da      	ldr	r2, [r3, #12]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ce3c:	60da      	str	r2, [r3, #12]
 800ce3e:	e007      	b.n	800ce50 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68da      	ldr	r2, [r3, #12]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce4e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	7a9b      	ldrb	r3, [r3, #10]
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d82f      	bhi.n	800ceb8 <USART_Config+0x15c>
 800ce58:	a201      	add	r2, pc, #4	; (adr r2, 800ce60 <USART_Config+0x104>)
 800ce5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5e:	bf00      	nop
 800ce60:	0800ce71 	.word	0x0800ce71
 800ce64:	0800ce83 	.word	0x0800ce83
 800ce68:	0800ce95 	.word	0x0800ce95
 800ce6c:	0800cea7 	.word	0x0800cea7
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	691a      	ldr	r2, [r3, #16]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ce7e:	611a      	str	r2, [r3, #16]
			break;
 800ce80:	e023      	b.n	800ceca <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	691a      	ldr	r2, [r3, #16]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce90:	611a      	str	r2, [r3, #16]
			break;
 800ce92:	e01a      	b.n	800ceca <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	691a      	ldr	r2, [r3, #16]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cea2:	611a      	str	r2, [r3, #16]
			break;
 800cea4:	e011      	b.n	800ceca <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	691a      	ldr	r2, [r3, #16]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800ceb4:	611a      	str	r2, [r3, #16]
			break;
 800ceb6:	e008      	b.n	800ceca <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	691a      	ldr	r2, [r3, #16]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800cec6:	611a      	str	r2, [r3, #16]
			break;
 800cec8:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	68da      	ldr	r2, [r3, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681c      	ldr	r4, [r3, #0]
 800ced2:	4611      	mov	r1, r2
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f8d7 	bl	800d088 <brrCalculus>
 800ceda:	4603      	mov	r3, r0
 800cedc:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	799b      	ldrb	r3, [r3, #6]
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	d82e      	bhi.n	800cf44 <USART_Config+0x1e8>
 800cee6:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <USART_Config+0x190>)
 800cee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceec:	0800cefd 	.word	0x0800cefd
 800cef0:	0800cf0f 	.word	0x0800cf0f
 800cef4:	0800cf21 	.word	0x0800cf21
 800cef8:	0800cf33 	.word	0x0800cf33
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68da      	ldr	r2, [r3, #12]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f042 0208 	orr.w	r2, r2, #8
 800cf0a:	60da      	str	r2, [r3, #12]
			break;
 800cf0c:	e023      	b.n	800cf56 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68da      	ldr	r2, [r3, #12]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f042 0204 	orr.w	r2, r2, #4
 800cf1c:	60da      	str	r2, [r3, #12]
			break;
 800cf1e:	e01a      	b.n	800cf56 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f042 020c 	orr.w	r2, r2, #12
 800cf2e:	60da      	str	r2, [r3, #12]
			break;
 800cf30:	e011      	b.n	800cf56 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68da      	ldr	r2, [r3, #12]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f022 020c 	bic.w	r2, r2, #12
 800cf40:	60da      	str	r2, [r3, #12]
			break;
 800cf42:	e008      	b.n	800cf56 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	68da      	ldr	r2, [r3, #12]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f022 020c 	bic.w	r2, r2, #12
 800cf52:	60da      	str	r2, [r3, #12]
			break;
 800cf54:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	799b      	ldrb	r3, [r3, #6]
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	d008      	beq.n	800cf70 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68da      	ldr	r2, [r3, #12]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf6c:	60da      	str	r2, [r3, #12]
 800cf6e:	e007      	b.n	800cf80 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68da      	ldr	r2, [r3, #12]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf7e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	795b      	ldrb	r3, [r3, #5]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d139      	bne.n	800cffc <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68da      	ldr	r2, [r3, #12]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f042 0220 	orr.w	r2, r2, #32
 800cf96:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a05      	ldr	r2, [pc, #20]	; (800cfb4 <USART_Config+0x258>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d110      	bne.n	800cfc4 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800cfa2:	2025      	movs	r0, #37	; 0x25
 800cfa4:	f7ff fe92 	bl	800cccc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	2025      	movs	r0, #37	; 0x25
 800cfac:	f7ff feac 	bl	800cd08 <__NVIC_SetPriority>
 800cfb0:	e02c      	b.n	800d00c <USART_Config+0x2b0>
 800cfb2:	bf00      	nop
 800cfb4:	40011000 	.word	0x40011000
 800cfb8:	40023800 	.word	0x40023800
 800cfbc:	40004400 	.word	0x40004400
 800cfc0:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a2c      	ldr	r2, [pc, #176]	; (800d07c <USART_Config+0x320>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d107      	bne.n	800cfde <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800cfce:	2026      	movs	r0, #38	; 0x26
 800cfd0:	f7ff fe7c 	bl	800cccc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	2026      	movs	r0, #38	; 0x26
 800cfd8:	f7ff fe96 	bl	800cd08 <__NVIC_SetPriority>
 800cfdc:	e016      	b.n	800d00c <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a27      	ldr	r2, [pc, #156]	; (800d080 <USART_Config+0x324>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d107      	bne.n	800cff8 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800cfe8:	2047      	movs	r0, #71	; 0x47
 800cfea:	f7ff fe6f 	bl	800cccc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 800cfee:	2101      	movs	r1, #1
 800cff0:	2047      	movs	r0, #71	; 0x47
 800cff2:	f7ff fe89 	bl	800cd08 <__NVIC_SetPriority>
 800cff6:	e009      	b.n	800d00c <USART_Config+0x2b0>
		}
		else{
				__NOP();
 800cff8:	bf00      	nop
 800cffa:	e007      	b.n	800d00c <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68da      	ldr	r2, [r3, #12]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f022 0220 	bic.w	r2, r2, #32
 800d00a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	791b      	ldrb	r3, [r3, #4]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d124      	bne.n	800d05e <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68da      	ldr	r2, [r3, #12]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d022:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a16      	ldr	r2, [pc, #88]	; (800d084 <USART_Config+0x328>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d103      	bne.n	800d036 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800d02e:	2025      	movs	r0, #37	; 0x25
 800d030:	f7ff fe4c 	bl	800cccc <__NVIC_EnableIRQ>
 800d034:	e01b      	b.n	800d06e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a10      	ldr	r2, [pc, #64]	; (800d07c <USART_Config+0x320>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d103      	bne.n	800d048 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800d040:	2026      	movs	r0, #38	; 0x26
 800d042:	f7ff fe43 	bl	800cccc <__NVIC_EnableIRQ>
 800d046:	e012      	b.n	800d06e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a0c      	ldr	r2, [pc, #48]	; (800d080 <USART_Config+0x324>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d103      	bne.n	800d05a <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800d052:	2047      	movs	r0, #71	; 0x47
 800d054:	f7ff fe3a 	bl	800cccc <__NVIC_EnableIRQ>
 800d058:	e009      	b.n	800d06e <USART_Config+0x312>
		}
		else{
				__NOP();
 800d05a:	bf00      	nop
 800d05c:	e007      	b.n	800d06e <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68da      	ldr	r2, [r3, #12]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d06c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800d06e:	b662      	cpsie	i
}
 800d070:	bf00      	nop
	}

	__enable_irq();
}
 800d072:	bf00      	nop
 800d074:	370c      	adds	r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	bd90      	pop	{r4, r7, pc}
 800d07a:	bf00      	nop
 800d07c:	40004400 	.word	0x40004400
 800d080:	40011400 	.word	0x40011400
 800d084:	40011000 	.word	0x40011000

0800d088 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 800d088:	b5b0      	push	{r4, r5, r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	79db      	ldrb	r3, [r3, #7]
 800d096:	2b03      	cmp	r3, #3
 800d098:	f200 8217 	bhi.w	800d4ca <brrCalculus+0x442>
 800d09c:	a201      	add	r2, pc, #4	; (adr r2, 800d0a4 <brrCalculus+0x1c>)
 800d09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a2:	bf00      	nop
 800d0a4:	0800d0b5 	.word	0x0800d0b5
 800d0a8:	0800d1af 	.word	0x0800d1af
 800d0ac:	0800d2c9 	.word	0x0800d2c9
 800d0b0:	0800d3d1 	.word	0x0800d3d1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800d0b4:	4980      	ldr	r1, [pc, #512]	; (800d2b8 <brrCalculus+0x230>)
 800d0b6:	a37c      	add	r3, pc, #496	; (adr r3, 800d2a8 <brrCalculus+0x220>)
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ca:	ee17 0a90 	vmov	r0, s15
 800d0ce:	f7f3 fa53 	bl	8000578 <__aeabi_f2d>
 800d0d2:	4b79      	ldr	r3, [pc, #484]	; (800d2b8 <brrCalculus+0x230>)
 800d0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d8:	f7f3 faa6 	bl	8000628 <__aeabi_dmul>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4975      	ldr	r1, [pc, #468]	; (800d2b8 <brrCalculus+0x230>)
 800d0e2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d0e6:	4b74      	ldr	r3, [pc, #464]	; (800d2b8 <brrCalculus+0x230>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	f7f3 fd4a 	bl	8000b88 <__aeabi_d2iz>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	4b70      	ldr	r3, [pc, #448]	; (800d2bc <brrCalculus+0x234>)
 800d0fa:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d0fc:	4b6e      	ldr	r3, [pc, #440]	; (800d2b8 <brrCalculus+0x230>)
 800d0fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d102:	4b6d      	ldr	r3, [pc, #436]	; (800d2b8 <brrCalculus+0x230>)
 800d104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d108:	4610      	mov	r0, r2
 800d10a:	4619      	mov	r1, r3
 800d10c:	f7f3 fd3c 	bl	8000b88 <__aeabi_d2iz>
 800d110:	4603      	mov	r3, r0
 800d112:	4618      	mov	r0, r3
 800d114:	f7f3 fa1e 	bl	8000554 <__aeabi_i2d>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	4620      	mov	r0, r4
 800d11e:	4629      	mov	r1, r5
 800d120:	f7f3 f8ca 	bl	80002b8 <__aeabi_dsub>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4610      	mov	r0, r2
 800d12a:	4619      	mov	r1, r3
 800d12c:	f7f3 fd74 	bl	8000c18 <__aeabi_d2f>
 800d130:	4603      	mov	r3, r0
 800d132:	4a63      	ldr	r2, [pc, #396]	; (800d2c0 <brrCalculus+0x238>)
 800d134:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d136:	4b62      	ldr	r3, [pc, #392]	; (800d2c0 <brrCalculus+0x238>)
 800d138:	edd3 7a00 	vldr	s15, [r3]
 800d13c:	2004      	movs	r0, #4
 800d13e:	eeb0 0a67 	vmov.f32	s0, s15
 800d142:	f000 fa6d 	bl	800d620 <roundToNDecimals>
 800d146:	eef0 7a40 	vmov.f32	s15, s0
 800d14a:	4b5d      	ldr	r3, [pc, #372]	; (800d2c0 <brrCalculus+0x238>)
 800d14c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d150:	4b5b      	ldr	r3, [pc, #364]	; (800d2c0 <brrCalculus+0x238>)
 800d152:	edd3 7a00 	vldr	s15, [r3]
 800d156:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d15a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d15e:	4b58      	ldr	r3, [pc, #352]	; (800d2c0 <brrCalculus+0x238>)
 800d160:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d164:	4b56      	ldr	r3, [pc, #344]	; (800d2c0 <brrCalculus+0x238>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4618      	mov	r0, r3
 800d16a:	f7f3 fa05 	bl	8000578 <__aeabi_f2d>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	ec43 2b10 	vmov	d0, r2, r3
 800d176:	f003 fc97 	bl	8010aa8 <round>
 800d17a:	ec53 2b10 	vmov	r2, r3, d0
 800d17e:	4610      	mov	r0, r2
 800d180:	4619      	mov	r1, r3
 800d182:	f7f3 fd49 	bl	8000c18 <__aeabi_d2f>
 800d186:	4603      	mov	r3, r0
 800d188:	4a4d      	ldr	r2, [pc, #308]	; (800d2c0 <brrCalculus+0x238>)
 800d18a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d18c:	4b4b      	ldr	r3, [pc, #300]	; (800d2bc <brrCalculus+0x234>)
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	011b      	lsls	r3, r3, #4
 800d192:	b29a      	uxth	r2, r3
 800d194:	4b4a      	ldr	r3, [pc, #296]	; (800d2c0 <brrCalculus+0x238>)
 800d196:	edd3 7a00 	vldr	s15, [r3]
 800d19a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d19e:	ee17 3a90 	vmov	r3, s15
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	4b46      	ldr	r3, [pc, #280]	; (800d2c4 <brrCalculus+0x23c>)
 800d1aa:	801a      	strh	r2, [r3, #0]


		break;
 800d1ac:	e18f      	b.n	800d4ce <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800d1ae:	4942      	ldr	r1, [pc, #264]	; (800d2b8 <brrCalculus+0x230>)
 800d1b0:	a33f      	add	r3, pc, #252	; (adr r3, 800d2b0 <brrCalculus+0x228>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	ee07 3a90 	vmov	s15, r3
 800d1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c4:	ee17 0a90 	vmov	r0, s15
 800d1c8:	f7f3 f9d6 	bl	8000578 <__aeabi_f2d>
 800d1cc:	4b3a      	ldr	r3, [pc, #232]	; (800d2b8 <brrCalculus+0x230>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	f7f3 fa29 	bl	8000628 <__aeabi_dmul>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4937      	ldr	r1, [pc, #220]	; (800d2b8 <brrCalculus+0x230>)
 800d1dc:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d1e0:	4b35      	ldr	r3, [pc, #212]	; (800d2b8 <brrCalculus+0x230>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	f7f3 fccd 	bl	8000b88 <__aeabi_d2iz>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	4b32      	ldr	r3, [pc, #200]	; (800d2bc <brrCalculus+0x234>)
 800d1f4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d1f6:	4b30      	ldr	r3, [pc, #192]	; (800d2b8 <brrCalculus+0x230>)
 800d1f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d1fc:	4b2e      	ldr	r3, [pc, #184]	; (800d2b8 <brrCalculus+0x230>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	4610      	mov	r0, r2
 800d204:	4619      	mov	r1, r3
 800d206:	f7f3 fcbf 	bl	8000b88 <__aeabi_d2iz>
 800d20a:	4603      	mov	r3, r0
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7f3 f9a1 	bl	8000554 <__aeabi_i2d>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4620      	mov	r0, r4
 800d218:	4629      	mov	r1, r5
 800d21a:	f7f3 f84d 	bl	80002b8 <__aeabi_dsub>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4610      	mov	r0, r2
 800d224:	4619      	mov	r1, r3
 800d226:	f7f3 fcf7 	bl	8000c18 <__aeabi_d2f>
 800d22a:	4603      	mov	r3, r0
 800d22c:	4a24      	ldr	r2, [pc, #144]	; (800d2c0 <brrCalculus+0x238>)
 800d22e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d230:	4b23      	ldr	r3, [pc, #140]	; (800d2c0 <brrCalculus+0x238>)
 800d232:	edd3 7a00 	vldr	s15, [r3]
 800d236:	2004      	movs	r0, #4
 800d238:	eeb0 0a67 	vmov.f32	s0, s15
 800d23c:	f000 f9f0 	bl	800d620 <roundToNDecimals>
 800d240:	eef0 7a40 	vmov.f32	s15, s0
 800d244:	4b1e      	ldr	r3, [pc, #120]	; (800d2c0 <brrCalculus+0x238>)
 800d246:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d24a:	4b1d      	ldr	r3, [pc, #116]	; (800d2c0 <brrCalculus+0x238>)
 800d24c:	edd3 7a00 	vldr	s15, [r3]
 800d250:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d254:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d258:	4b19      	ldr	r3, [pc, #100]	; (800d2c0 <brrCalculus+0x238>)
 800d25a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d25e:	4b18      	ldr	r3, [pc, #96]	; (800d2c0 <brrCalculus+0x238>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4618      	mov	r0, r3
 800d264:	f7f3 f988 	bl	8000578 <__aeabi_f2d>
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	ec43 2b10 	vmov	d0, r2, r3
 800d270:	f003 fc1a 	bl	8010aa8 <round>
 800d274:	ec53 2b10 	vmov	r2, r3, d0
 800d278:	4610      	mov	r0, r2
 800d27a:	4619      	mov	r1, r3
 800d27c:	f7f3 fccc 	bl	8000c18 <__aeabi_d2f>
 800d280:	4603      	mov	r3, r0
 800d282:	4a0f      	ldr	r2, [pc, #60]	; (800d2c0 <brrCalculus+0x238>)
 800d284:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d286:	4b0d      	ldr	r3, [pc, #52]	; (800d2bc <brrCalculus+0x234>)
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	011b      	lsls	r3, r3, #4
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <brrCalculus+0x238>)
 800d290:	edd3 7a00 	vldr	s15, [r3]
 800d294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d298:	ee17 3a90 	vmov	r3, s15
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	4b08      	ldr	r3, [pc, #32]	; (800d2c4 <brrCalculus+0x23c>)
 800d2a4:	801a      	strh	r2, [r3, #0]


		break;
 800d2a6:	e112      	b.n	800d4ce <brrCalculus+0x446>
 800d2a8:	b4e81b4f 	.word	0xb4e81b4f
 800d2ac:	3edb4e81 	.word	0x3edb4e81
 800d2b0:	b4e81b4f 	.word	0xb4e81b4f
 800d2b4:	3ecb4e81 	.word	0x3ecb4e81
 800d2b8:	20014030 	.word	0x20014030
 800d2bc:	20014024 	.word	0x20014024
 800d2c0:	20014028 	.word	0x20014028
 800d2c4:	20014022 	.word	0x20014022
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 800d2c8:	4989      	ldr	r1, [pc, #548]	; (800d4f0 <brrCalculus+0x468>)
 800d2ca:	a385      	add	r3, pc, #532	; (adr r3, 800d4e0 <brrCalculus+0x458>)
 800d2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	ee07 3a90 	vmov	s15, r3
 800d2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2de:	ee17 0a90 	vmov	r0, s15
 800d2e2:	f7f3 f949 	bl	8000578 <__aeabi_f2d>
 800d2e6:	4b82      	ldr	r3, [pc, #520]	; (800d4f0 <brrCalculus+0x468>)
 800d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ec:	f7f3 f99c 	bl	8000628 <__aeabi_dmul>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	497e      	ldr	r1, [pc, #504]	; (800d4f0 <brrCalculus+0x468>)
 800d2f6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d2fa:	4b7d      	ldr	r3, [pc, #500]	; (800d4f0 <brrCalculus+0x468>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	4610      	mov	r0, r2
 800d302:	4619      	mov	r1, r3
 800d304:	f7f3 fc40 	bl	8000b88 <__aeabi_d2iz>
 800d308:	4603      	mov	r3, r0
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	4b79      	ldr	r3, [pc, #484]	; (800d4f4 <brrCalculus+0x46c>)
 800d30e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d310:	4b77      	ldr	r3, [pc, #476]	; (800d4f0 <brrCalculus+0x468>)
 800d312:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d316:	4b76      	ldr	r3, [pc, #472]	; (800d4f0 <brrCalculus+0x468>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	4610      	mov	r0, r2
 800d31e:	4619      	mov	r1, r3
 800d320:	f7f3 fc32 	bl	8000b88 <__aeabi_d2iz>
 800d324:	4603      	mov	r3, r0
 800d326:	4618      	mov	r0, r3
 800d328:	f7f3 f914 	bl	8000554 <__aeabi_i2d>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4620      	mov	r0, r4
 800d332:	4629      	mov	r1, r5
 800d334:	f7f2 ffc0 	bl	80002b8 <__aeabi_dsub>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4610      	mov	r0, r2
 800d33e:	4619      	mov	r1, r3
 800d340:	f7f3 fc6a 	bl	8000c18 <__aeabi_d2f>
 800d344:	4603      	mov	r3, r0
 800d346:	4a6c      	ldr	r2, [pc, #432]	; (800d4f8 <brrCalculus+0x470>)
 800d348:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d34a:	4b6b      	ldr	r3, [pc, #428]	; (800d4f8 <brrCalculus+0x470>)
 800d34c:	edd3 7a00 	vldr	s15, [r3]
 800d350:	2004      	movs	r0, #4
 800d352:	eeb0 0a67 	vmov.f32	s0, s15
 800d356:	f000 f963 	bl	800d620 <roundToNDecimals>
 800d35a:	eef0 7a40 	vmov.f32	s15, s0
 800d35e:	4b66      	ldr	r3, [pc, #408]	; (800d4f8 <brrCalculus+0x470>)
 800d360:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d364:	4b64      	ldr	r3, [pc, #400]	; (800d4f8 <brrCalculus+0x470>)
 800d366:	edd3 7a00 	vldr	s15, [r3]
 800d36a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d36e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d372:	4b61      	ldr	r3, [pc, #388]	; (800d4f8 <brrCalculus+0x470>)
 800d374:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 800d378:	4b5f      	ldr	r3, [pc, #380]	; (800d4f8 <brrCalculus+0x470>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7f3 f8fb 	bl	8000578 <__aeabi_f2d>
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	ec43 2b10 	vmov	d0, r2, r3
 800d38a:	f003 fb8d 	bl	8010aa8 <round>
 800d38e:	ec51 0b10 	vmov	r0, r1, d0
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	4b59      	ldr	r3, [pc, #356]	; (800d4fc <brrCalculus+0x474>)
 800d398:	f7f2 ff90 	bl	80002bc <__adddf3>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	f7f3 fc38 	bl	8000c18 <__aeabi_d2f>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	4a53      	ldr	r2, [pc, #332]	; (800d4f8 <brrCalculus+0x470>)
 800d3ac:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d3ae:	4b51      	ldr	r3, [pc, #324]	; (800d4f4 <brrCalculus+0x46c>)
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	011b      	lsls	r3, r3, #4
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	4b50      	ldr	r3, [pc, #320]	; (800d4f8 <brrCalculus+0x470>)
 800d3b8:	edd3 7a00 	vldr	s15, [r3]
 800d3bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c0:	ee17 3a90 	vmov	r3, s15
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	4b4d      	ldr	r3, [pc, #308]	; (800d500 <brrCalculus+0x478>)
 800d3cc:	801a      	strh	r2, [r3, #0]


		break;
 800d3ce:	e07e      	b.n	800d4ce <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 800d3d0:	4947      	ldr	r1, [pc, #284]	; (800d4f0 <brrCalculus+0x468>)
 800d3d2:	a345      	add	r3, pc, #276	; (adr r3, 800d4e8 <brrCalculus+0x460>)
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	ee07 3a90 	vmov	s15, r3
 800d3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e6:	ee17 0a90 	vmov	r0, s15
 800d3ea:	f7f3 f8c5 	bl	8000578 <__aeabi_f2d>
 800d3ee:	4b40      	ldr	r3, [pc, #256]	; (800d4f0 <brrCalculus+0x468>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f7f3 f918 	bl	8000628 <__aeabi_dmul>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	493c      	ldr	r1, [pc, #240]	; (800d4f0 <brrCalculus+0x468>)
 800d3fe:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d402:	4b3b      	ldr	r3, [pc, #236]	; (800d4f0 <brrCalculus+0x468>)
 800d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d408:	4610      	mov	r0, r2
 800d40a:	4619      	mov	r1, r3
 800d40c:	f7f3 fbbc 	bl	8000b88 <__aeabi_d2iz>
 800d410:	4603      	mov	r3, r0
 800d412:	b29a      	uxth	r2, r3
 800d414:	4b37      	ldr	r3, [pc, #220]	; (800d4f4 <brrCalculus+0x46c>)
 800d416:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d418:	4b35      	ldr	r3, [pc, #212]	; (800d4f0 <brrCalculus+0x468>)
 800d41a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d41e:	4b34      	ldr	r3, [pc, #208]	; (800d4f0 <brrCalculus+0x468>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	4610      	mov	r0, r2
 800d426:	4619      	mov	r1, r3
 800d428:	f7f3 fbae 	bl	8000b88 <__aeabi_d2iz>
 800d42c:	4603      	mov	r3, r0
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f3 f890 	bl	8000554 <__aeabi_i2d>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4620      	mov	r0, r4
 800d43a:	4629      	mov	r1, r5
 800d43c:	f7f2 ff3c 	bl	80002b8 <__aeabi_dsub>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	4610      	mov	r0, r2
 800d446:	4619      	mov	r1, r3
 800d448:	f7f3 fbe6 	bl	8000c18 <__aeabi_d2f>
 800d44c:	4603      	mov	r3, r0
 800d44e:	4a2a      	ldr	r2, [pc, #168]	; (800d4f8 <brrCalculus+0x470>)
 800d450:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d452:	4b29      	ldr	r3, [pc, #164]	; (800d4f8 <brrCalculus+0x470>)
 800d454:	edd3 7a00 	vldr	s15, [r3]
 800d458:	2004      	movs	r0, #4
 800d45a:	eeb0 0a67 	vmov.f32	s0, s15
 800d45e:	f000 f8df 	bl	800d620 <roundToNDecimals>
 800d462:	eef0 7a40 	vmov.f32	s15, s0
 800d466:	4b24      	ldr	r3, [pc, #144]	; (800d4f8 <brrCalculus+0x470>)
 800d468:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d46c:	4b22      	ldr	r3, [pc, #136]	; (800d4f8 <brrCalculus+0x470>)
 800d46e:	edd3 7a00 	vldr	s15, [r3]
 800d472:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d47a:	4b1f      	ldr	r3, [pc, #124]	; (800d4f8 <brrCalculus+0x470>)
 800d47c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d480:	4b1d      	ldr	r3, [pc, #116]	; (800d4f8 <brrCalculus+0x470>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4618      	mov	r0, r3
 800d486:	f7f3 f877 	bl	8000578 <__aeabi_f2d>
 800d48a:	4602      	mov	r2, r0
 800d48c:	460b      	mov	r3, r1
 800d48e:	ec43 2b10 	vmov	d0, r2, r3
 800d492:	f003 fb09 	bl	8010aa8 <round>
 800d496:	ec53 2b10 	vmov	r2, r3, d0
 800d49a:	4610      	mov	r0, r2
 800d49c:	4619      	mov	r1, r3
 800d49e:	f7f3 fbbb 	bl	8000c18 <__aeabi_d2f>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4a14      	ldr	r2, [pc, #80]	; (800d4f8 <brrCalculus+0x470>)
 800d4a6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d4a8:	4b12      	ldr	r3, [pc, #72]	; (800d4f4 <brrCalculus+0x46c>)
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	011b      	lsls	r3, r3, #4
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	4b11      	ldr	r3, [pc, #68]	; (800d4f8 <brrCalculus+0x470>)
 800d4b2:	edd3 7a00 	vldr	s15, [r3]
 800d4b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ba:	ee17 3a90 	vmov	r3, s15
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	4b0e      	ldr	r3, [pc, #56]	; (800d500 <brrCalculus+0x478>)
 800d4c6:	801a      	strh	r2, [r3, #0]


		break;
 800d4c8:	e001      	b.n	800d4ce <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800d4ca:	bf00      	nop
		break;
 800d4cc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800d4ce:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <brrCalculus+0x478>)
 800d4d0:	881b      	ldrh	r3, [r3, #0]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	f3af 8000 	nop.w
 800d4e0:	789abcdf 	.word	0x789abcdf
 800d4e4:	3ec23456 	.word	0x3ec23456
 800d4e8:	789abcdf 	.word	0x789abcdf
 800d4ec:	3ea23456 	.word	0x3ea23456
 800d4f0:	20014030 	.word	0x20014030
 800d4f4:	20014024 	.word	0x20014024
 800d4f8:	20014028 	.word	0x20014028
 800d4fc:	3ff00000 	.word	0x3ff00000
 800d500:	20014022 	.word	0x20014022

0800d504 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d50e:	e000      	b.n	800d512 <writeChar+0xe>
		__NOP();
 800d510:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d0f7      	beq.n	800d510 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	605a      	str	r2, [r3, #4]

}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800d53e:	e008      	b.n	800d552 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff ffdc 	bl	800d504 <writeChar>
		msgToSend ++ ;
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	3301      	adds	r3, #1
 800d550:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f2      	bne.n	800d540 <writeMsg+0xc>
	}
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 800d564:	b480      	push	{r7}
 800d566:	af00      	add	r7, sp, #0
	__NOP();
 800d568:	bf00      	nop
}
 800d56a:	bf00      	nop
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 800d574:	b480      	push	{r7}
 800d576:	af00      	add	r7, sp, #0
	__NOP();
 800d578:	bf00      	nop
}
 800d57a:	bf00      	nop
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800d584:	b480      	push	{r7}
 800d586:	af00      	add	r7, sp, #0
	return auxRxData;
 800d588:	4b03      	ldr	r3, [pc, #12]	; (800d598 <getRxData+0x14>)
 800d58a:	781b      	ldrb	r3, [r3, #0]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	20014038 	.word	0x20014038

0800d59c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 800d5a0:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <USART2_IRQHandler+0x24>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 0320 	and.w	r3, r3, #32
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d006      	beq.n	800d5ba <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800d5ac:	4b04      	ldr	r3, [pc, #16]	; (800d5c0 <USART2_IRQHandler+0x24>)
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	4b04      	ldr	r3, [pc, #16]	; (800d5c4 <USART2_IRQHandler+0x28>)
 800d5b4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800d5b6:	f7ff ffd5 	bl	800d564 <usart2Rx_Callback>
	}

}
 800d5ba:	bf00      	nop
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	40004400 	.word	0x40004400
 800d5c4:	20014038 	.word	0x20014038

0800d5c8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800d5cc:	4b07      	ldr	r3, [pc, #28]	; (800d5ec <USART1_IRQHandler+0x24>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f003 0320 	and.w	r3, r3, #32
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d006      	beq.n	800d5e6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 800d5d8:	4b04      	ldr	r3, [pc, #16]	; (800d5ec <USART1_IRQHandler+0x24>)
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	b2da      	uxtb	r2, r3
 800d5de:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <USART1_IRQHandler+0x28>)
 800d5e0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800d5e2:	f7f5 fa2d 	bl	8002a40 <usart1Rx_Callback>
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	40011000 	.word	0x40011000
 800d5f0:	20014038 	.word	0x20014038

0800d5f4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 800d5f8:	4b07      	ldr	r3, [pc, #28]	; (800d618 <USART6_IRQHandler+0x24>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 0320 	and.w	r3, r3, #32
 800d600:	2b00      	cmp	r3, #0
 800d602:	d006      	beq.n	800d612 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800d604:	4b04      	ldr	r3, [pc, #16]	; (800d618 <USART6_IRQHandler+0x24>)
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	4b04      	ldr	r3, [pc, #16]	; (800d61c <USART6_IRQHandler+0x28>)
 800d60c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800d60e:	f7ff ffb1 	bl	800d574 <usart6Rx_Callback>
	}

}
 800d612:	bf00      	nop
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	40011400 	.word	0x40011400
 800d61c:	20014038 	.word	0x20014038

0800d620 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	ed87 0a01 	vstr	s0, [r7, #4]
 800d62a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800d62c:	6838      	ldr	r0, [r7, #0]
 800d62e:	f7f2 ff91 	bl	8000554 <__aeabi_i2d>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	ec43 2b11 	vmov	d1, r2, r3
 800d63a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800d6b8 <roundToNDecimals+0x98>
 800d63e:	f003 fb09 	bl	8010c54 <pow>
 800d642:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7f2 ff96 	bl	8000578 <__aeabi_f2d>
 800d64c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d650:	f7f2 ffea 	bl	8000628 <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4610      	mov	r0, r2
 800d65a:	4619      	mov	r1, r3
 800d65c:	f7f3 fadc 	bl	8000c18 <__aeabi_d2f>
 800d660:	4603      	mov	r3, r0
 800d662:	607b      	str	r3, [r7, #4]

    number = round(number);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7f2 ff87 	bl	8000578 <__aeabi_f2d>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	ec43 2b10 	vmov	d0, r2, r3
 800d672:	f003 fa19 	bl	8010aa8 <round>
 800d676:	ec53 2b10 	vmov	r2, r3, d0
 800d67a:	4610      	mov	r0, r2
 800d67c:	4619      	mov	r1, r3
 800d67e:	f7f3 facb 	bl	8000c18 <__aeabi_d2f>
 800d682:	4603      	mov	r3, r0
 800d684:	607b      	str	r3, [r7, #4]

    number /= factor;
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7f2 ff76 	bl	8000578 <__aeabi_f2d>
 800d68c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d690:	f7f3 f8f4 	bl	800087c <__aeabi_ddiv>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	4610      	mov	r0, r2
 800d69a:	4619      	mov	r1, r3
 800d69c:	f7f3 fabc 	bl	8000c18 <__aeabi_d2f>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	607b      	str	r3, [r7, #4]

    return number;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	ee07 3a90 	vmov	s15, r3
}
 800d6aa:	eeb0 0a67 	vmov.f32	s0, s15
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	00000000 	.word	0x00000000
 800d6bc:	40240000 	.word	0x40240000

0800d6c0 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6cc:	b672      	cpsid	i
}
 800d6ce:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a12      	ldr	r2, [pc, #72]	; (800d720 <usart_Set_Priority+0x60>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d105      	bne.n	800d6e6 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 800d6da:	78fb      	ldrb	r3, [r7, #3]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	2025      	movs	r0, #37	; 0x25
 800d6e0:	f7ff fb12 	bl	800cd08 <__NVIC_SetPriority>
 800d6e4:	e016      	b.n	800d714 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a0e      	ldr	r2, [pc, #56]	; (800d724 <usart_Set_Priority+0x64>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d105      	bne.n	800d6fc <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	2026      	movs	r0, #38	; 0x26
 800d6f6:	f7ff fb07 	bl	800cd08 <__NVIC_SetPriority>
 800d6fa:	e00b      	b.n	800d714 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a09      	ldr	r2, [pc, #36]	; (800d728 <usart_Set_Priority+0x68>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d105      	bne.n	800d712 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800d706:	78fb      	ldrb	r3, [r7, #3]
 800d708:	4619      	mov	r1, r3
 800d70a:	2047      	movs	r0, #71	; 0x47
 800d70c:	f7ff fafc 	bl	800cd08 <__NVIC_SetPriority>
 800d710:	e000      	b.n	800d714 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800d712:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800d714:	b662      	cpsie	i
}
 800d716:	bf00      	nop



	__enable_irq();

}
 800d718:	bf00      	nop
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	40011000 	.word	0x40011000
 800d724:	40004400 	.word	0x40004400
 800d728:	40011400 	.word	0x40011400

0800d72c <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a89      	ldr	r2, [pc, #548]	; (800d960 <i2c_config+0x234>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d106      	bne.n	800d74c <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800d73e:	4b89      	ldr	r3, [pc, #548]	; (800d964 <i2c_config+0x238>)
 800d740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d742:	4a88      	ldr	r2, [pc, #544]	; (800d964 <i2c_config+0x238>)
 800d744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d748:	6413      	str	r3, [r2, #64]	; 0x40
 800d74a:	e016      	b.n	800d77a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a85      	ldr	r2, [pc, #532]	; (800d968 <i2c_config+0x23c>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d106      	bne.n	800d764 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800d756:	4b83      	ldr	r3, [pc, #524]	; (800d964 <i2c_config+0x238>)
 800d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75a:	4a82      	ldr	r2, [pc, #520]	; (800d964 <i2c_config+0x238>)
 800d75c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d760:	6413      	str	r3, [r2, #64]	; 0x40
 800d762:	e00a      	b.n	800d77a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a80      	ldr	r2, [pc, #512]	; (800d96c <i2c_config+0x240>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d105      	bne.n	800d77a <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800d76e:	4b7d      	ldr	r3, [pc, #500]	; (800d964 <i2c_config+0x238>)
 800d770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d772:	4a7c      	ldr	r2, [pc, #496]	; (800d964 <i2c_config+0x238>)
 800d774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d778:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f022 0201 	bic.w	r2, r2, #1
 800d788:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d78a:	e000      	b.n	800d78e <i2c_config+0x62>
		__NOP();
 800d78c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	f003 0302 	and.w	r3, r3, #2
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1f7      	bne.n	800d78c <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d7aa:	601a      	str	r2, [r3, #0]

	__NOP();
 800d7ac:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7bc:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800d7cc:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	79db      	ldrb	r3, [r3, #7]
 800d7d2:	2b10      	cmp	r3, #16
 800d7d4:	d108      	bne.n	800d7e8 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f042 0210 	orr.w	r2, r2, #16
 800d7e4:	605a      	str	r2, [r3, #4]
 800d7e6:	e018      	b.n	800d81a <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	79db      	ldrb	r3, [r3, #7]
 800d7ec:	2b19      	cmp	r3, #25
 800d7ee:	d108      	bne.n	800d802 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f042 0219 	orr.w	r2, r2, #25
 800d7fe:	605a      	str	r2, [r3, #4]
 800d800:	e00b      	b.n	800d81a <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	79db      	ldrb	r3, [r3, #7]
 800d806:	2b32      	cmp	r3, #50	; 0x32
 800d808:	d107      	bne.n	800d81a <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800d818:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2200      	movs	r2, #0
 800d820:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2200      	movs	r2, #0
 800d828:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	795b      	ldrb	r3, [r3, #5]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d15c      	bne.n	800d8ec <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	69da      	ldr	r2, [r3, #28]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d840:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	79db      	ldrb	r3, [r3, #7]
 800d846:	2b32      	cmp	r3, #50	; 0x32
 800d848:	d03f      	beq.n	800d8ca <i2c_config+0x19e>
 800d84a:	2b32      	cmp	r3, #50	; 0x32
 800d84c:	f300 80b2 	bgt.w	800d9b4 <i2c_config+0x288>
 800d850:	2b19      	cmp	r3, #25
 800d852:	d029      	beq.n	800d8a8 <i2c_config+0x17c>
 800d854:	2b19      	cmp	r3, #25
 800d856:	f300 80ad 	bgt.w	800d9b4 <i2c_config+0x288>
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d002      	beq.n	800d864 <i2c_config+0x138>
 800d85e:	2b10      	cmp	r3, #16
 800d860:	d011      	beq.n	800d886 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800d862:	e0a7      	b.n	800d9b4 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	69da      	ldr	r2, [r3, #28]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f042 0214 	orr.w	r2, r2, #20
 800d872:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6a1a      	ldr	r2, [r3, #32]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f042 0205 	orr.w	r2, r2, #5
 800d882:	621a      	str	r2, [r3, #32]
				break;
 800d884:	e099      	b.n	800d9ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	69da      	ldr	r2, [r3, #28]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d894:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6a1a      	ldr	r2, [r3, #32]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f042 0211 	orr.w	r2, r2, #17
 800d8a4:	621a      	str	r2, [r3, #32]
				break;
 800d8a6:	e088      	b.n	800d9ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	69da      	ldr	r2, [r3, #28]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800d8b6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6a1a      	ldr	r2, [r3, #32]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f042 0215 	orr.w	r2, r2, #21
 800d8c6:	621a      	str	r2, [r3, #32]
				break;
 800d8c8:	e077      	b.n	800d9ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69da      	ldr	r2, [r3, #28]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800d8d8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6a1a      	ldr	r2, [r3, #32]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800d8e8:	621a      	str	r2, [r3, #32]
				break;
 800d8ea:	e066      	b.n	800d9ba <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	69da      	ldr	r2, [r3, #28]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d8fa:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	79db      	ldrb	r3, [r3, #7]
 800d900:	2b32      	cmp	r3, #50	; 0x32
 800d902:	d046      	beq.n	800d992 <i2c_config+0x266>
 800d904:	2b32      	cmp	r3, #50	; 0x32
 800d906:	dc57      	bgt.n	800d9b8 <i2c_config+0x28c>
 800d908:	2b19      	cmp	r3, #25
 800d90a:	d031      	beq.n	800d970 <i2c_config+0x244>
 800d90c:	2b19      	cmp	r3, #25
 800d90e:	dc53      	bgt.n	800d9b8 <i2c_config+0x28c>
 800d910:	2b04      	cmp	r3, #4
 800d912:	d002      	beq.n	800d91a <i2c_config+0x1ee>
 800d914:	2b10      	cmp	r3, #16
 800d916:	d011      	beq.n	800d93c <i2c_config+0x210>


				break;
			}default:{

				break;
 800d918:	e04e      	b.n	800d9b8 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	69da      	ldr	r2, [r3, #28]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f042 0203 	orr.w	r2, r2, #3
 800d928:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6a1a      	ldr	r2, [r3, #32]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f042 0202 	orr.w	r2, r2, #2
 800d938:	621a      	str	r2, [r3, #32]
				break;
 800d93a:	e03e      	b.n	800d9ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	69da      	ldr	r2, [r3, #28]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f042 020d 	orr.w	r2, r2, #13
 800d94a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6a1a      	ldr	r2, [r3, #32]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f042 0206 	orr.w	r2, r2, #6
 800d95a:	621a      	str	r2, [r3, #32]
				break;
 800d95c:	e02d      	b.n	800d9ba <i2c_config+0x28e>
 800d95e:	bf00      	nop
 800d960:	40005400 	.word	0x40005400
 800d964:	40023800 	.word	0x40023800
 800d968:	40005800 	.word	0x40005800
 800d96c:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	69da      	ldr	r2, [r3, #28]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f042 0215 	orr.w	r2, r2, #21
 800d97e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6a1a      	ldr	r2, [r3, #32]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f042 0208 	orr.w	r2, r2, #8
 800d98e:	621a      	str	r2, [r3, #32]
				break;
 800d990:	e013      	b.n	800d9ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	69da      	ldr	r2, [r3, #28]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800d9a0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	6a1a      	ldr	r2, [r3, #32]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f042 0210 	orr.w	r2, r2, #16
 800d9b0:	621a      	str	r2, [r3, #32]
				break;
 800d9b2:	e002      	b.n	800d9ba <i2c_config+0x28e>
				break;
 800d9b4:	bf00      	nop
 800d9b6:	e002      	b.n	800d9be <i2c_config+0x292>
				break;
 800d9b8:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d9ba:	e000      	b.n	800d9be <i2c_config+0x292>
		__NOP();
 800d9bc:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	699b      	ldr	r3, [r3, #24]
 800d9c4:	f003 0302 	and.w	r3, r3, #2
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1f7      	bne.n	800d9bc <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f042 0201 	orr.w	r2, r2, #1
 800d9da:	601a      	str	r2, [r3, #0]


}
 800d9dc:	bf00      	nop
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9fe:	601a      	str	r2, [r3, #0]
}
 800da00:	bf00      	nop
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7a1b      	ldrb	r3, [r3, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d009      	beq.n	800da30 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	685a      	ldr	r2, [r3, #4]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da2a:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800da2c:	e000      	b.n	800da30 <i2c_startTransaction+0x24>
		__NOP();
 800da2e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	f003 0302 	and.w	r3, r3, #2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1f7      	bne.n	800da2e <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da4c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800da4e:	e000      	b.n	800da52 <i2c_startTransaction+0x46>
		__NOP();
 800da50:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	f003 0301 	and.w	r3, r3, #1
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d0f7      	beq.n	800da50 <i2c_startTransaction+0x44>
	}
}
 800da60:	bf00      	nop
 800da62:	bf00      	nop
 800da64:	370c      	adds	r7, #12
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800da6e:	b480      	push	{r7}
 800da70:	b083      	sub	sp, #12
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	7a1b      	ldrb	r3, [r3, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d007      	beq.n	800da8e <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da8c:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da9c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800da9e:	e000      	b.n	800daa2 <i2c_reStartTransaction+0x34>
		__NOP();
 800daa0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	f003 0301 	and.w	r3, r3, #1
 800daac:	2b00      	cmp	r3, #0
 800daae:	d0f7      	beq.n	800daa0 <i2c_reStartTransaction+0x32>
	}
}
 800dab0:	bf00      	nop
 800dab2:	bf00      	nop
 800dab4:	370c      	adds	r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800dabe:	b480      	push	{r7}
 800dac0:	b083      	sub	sp, #12
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dad4:	601a      	str	r2, [r3, #0]
}
 800dad6:	bf00      	nop
 800dad8:	370c      	adds	r7, #12
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800dae2:	b480      	push	{r7}
 800dae4:	b085      	sub	sp, #20
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	460b      	mov	r3, r1
 800daec:	70fb      	strb	r3, [r7, #3]
 800daee:	4613      	mov	r3, r2
 800daf0:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800daf6:	78fb      	ldrb	r3, [r7, #3]
 800daf8:	005a      	lsls	r2, r3, #1
 800dafa:	78bb      	ldrb	r3, [r7, #2]
 800dafc:	431a      	orrs	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800db04:	e000      	b.n	800db08 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800db06:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d0f7      	beq.n	800db06 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	73fb      	strb	r3, [r7, #15]

}
 800db26:	bf00      	nop
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800db32:	b480      	push	{r7}
 800db34:	b083      	sub	sp, #12
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	460b      	mov	r3, r1
 800db3c:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	78fa      	ldrb	r2, [r7, #3]
 800db44:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800db46:	e000      	b.n	800db4a <i2c_sendMemoryAddress+0x18>
		__NOP();
 800db48:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db54:	2b00      	cmp	r3, #0
 800db56:	d0f7      	beq.n	800db48 <i2c_sendMemoryAddress+0x16>
	}
}
 800db58:	bf00      	nop
 800db5a:	bf00      	nop
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800db66:	b480      	push	{r7}
 800db68:	b083      	sub	sp, #12
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	460b      	mov	r3, r1
 800db70:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	78fa      	ldrb	r2, [r7, #3]
 800db78:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800db7a:	e000      	b.n	800db7e <i2c_sendDataByte+0x18>
		__NOP();
 800db7c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	f003 0304 	and.w	r3, r3, #4
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d0f7      	beq.n	800db7c <i2c_sendDataByte+0x16>
	}
}
 800db8c:	bf00      	nop
 800db8e:	bf00      	nop
 800db90:	370c      	adds	r7, #12
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr

0800db9a <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800db9a:	b480      	push	{r7}
 800db9c:	b083      	sub	sp, #12
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800dba2:	e000      	b.n	800dba6 <i2c_readDataByte+0xc>
		__NOP();
 800dba4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d0f7      	beq.n	800dba4 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	799b      	ldrb	r3, [r3, #6]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <__errno>:
 800dbd0:	4b01      	ldr	r3, [pc, #4]	; (800dbd8 <__errno+0x8>)
 800dbd2:	6818      	ldr	r0, [r3, #0]
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	20000040 	.word	0x20000040

0800dbdc <__libc_init_array>:
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	4d0d      	ldr	r5, [pc, #52]	; (800dc14 <__libc_init_array+0x38>)
 800dbe0:	4c0d      	ldr	r4, [pc, #52]	; (800dc18 <__libc_init_array+0x3c>)
 800dbe2:	1b64      	subs	r4, r4, r5
 800dbe4:	10a4      	asrs	r4, r4, #2
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	42a6      	cmp	r6, r4
 800dbea:	d109      	bne.n	800dc00 <__libc_init_array+0x24>
 800dbec:	4d0b      	ldr	r5, [pc, #44]	; (800dc1c <__libc_init_array+0x40>)
 800dbee:	4c0c      	ldr	r4, [pc, #48]	; (800dc20 <__libc_init_array+0x44>)
 800dbf0:	f005 fbc2 	bl	8013378 <_init>
 800dbf4:	1b64      	subs	r4, r4, r5
 800dbf6:	10a4      	asrs	r4, r4, #2
 800dbf8:	2600      	movs	r6, #0
 800dbfa:	42a6      	cmp	r6, r4
 800dbfc:	d105      	bne.n	800dc0a <__libc_init_array+0x2e>
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc04:	4798      	blx	r3
 800dc06:	3601      	adds	r6, #1
 800dc08:	e7ee      	b.n	800dbe8 <__libc_init_array+0xc>
 800dc0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc0e:	4798      	blx	r3
 800dc10:	3601      	adds	r6, #1
 800dc12:	e7f2      	b.n	800dbfa <__libc_init_array+0x1e>
 800dc14:	080140a8 	.word	0x080140a8
 800dc18:	080140a8 	.word	0x080140a8
 800dc1c:	080140a8 	.word	0x080140a8
 800dc20:	080140ac 	.word	0x080140ac

0800dc24 <malloc>:
 800dc24:	4b02      	ldr	r3, [pc, #8]	; (800dc30 <malloc+0xc>)
 800dc26:	4601      	mov	r1, r0
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	f000 b885 	b.w	800dd38 <_malloc_r>
 800dc2e:	bf00      	nop
 800dc30:	20000040 	.word	0x20000040

0800dc34 <memcpy>:
 800dc34:	440a      	add	r2, r1
 800dc36:	4291      	cmp	r1, r2
 800dc38:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc3c:	d100      	bne.n	800dc40 <memcpy+0xc>
 800dc3e:	4770      	bx	lr
 800dc40:	b510      	push	{r4, lr}
 800dc42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc4a:	4291      	cmp	r1, r2
 800dc4c:	d1f9      	bne.n	800dc42 <memcpy+0xe>
 800dc4e:	bd10      	pop	{r4, pc}

0800dc50 <memset>:
 800dc50:	4402      	add	r2, r0
 800dc52:	4603      	mov	r3, r0
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d100      	bne.n	800dc5a <memset+0xa>
 800dc58:	4770      	bx	lr
 800dc5a:	f803 1b01 	strb.w	r1, [r3], #1
 800dc5e:	e7f9      	b.n	800dc54 <memset+0x4>

0800dc60 <_free_r>:
 800dc60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc62:	2900      	cmp	r1, #0
 800dc64:	d044      	beq.n	800dcf0 <_free_r+0x90>
 800dc66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc6a:	9001      	str	r0, [sp, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f1a1 0404 	sub.w	r4, r1, #4
 800dc72:	bfb8      	it	lt
 800dc74:	18e4      	addlt	r4, r4, r3
 800dc76:	f001 fbed 	bl	800f454 <__malloc_lock>
 800dc7a:	4a1e      	ldr	r2, [pc, #120]	; (800dcf4 <_free_r+0x94>)
 800dc7c:	9801      	ldr	r0, [sp, #4]
 800dc7e:	6813      	ldr	r3, [r2, #0]
 800dc80:	b933      	cbnz	r3, 800dc90 <_free_r+0x30>
 800dc82:	6063      	str	r3, [r4, #4]
 800dc84:	6014      	str	r4, [r2, #0]
 800dc86:	b003      	add	sp, #12
 800dc88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc8c:	f001 bbe8 	b.w	800f460 <__malloc_unlock>
 800dc90:	42a3      	cmp	r3, r4
 800dc92:	d908      	bls.n	800dca6 <_free_r+0x46>
 800dc94:	6825      	ldr	r5, [r4, #0]
 800dc96:	1961      	adds	r1, r4, r5
 800dc98:	428b      	cmp	r3, r1
 800dc9a:	bf01      	itttt	eq
 800dc9c:	6819      	ldreq	r1, [r3, #0]
 800dc9e:	685b      	ldreq	r3, [r3, #4]
 800dca0:	1949      	addeq	r1, r1, r5
 800dca2:	6021      	streq	r1, [r4, #0]
 800dca4:	e7ed      	b.n	800dc82 <_free_r+0x22>
 800dca6:	461a      	mov	r2, r3
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	b10b      	cbz	r3, 800dcb0 <_free_r+0x50>
 800dcac:	42a3      	cmp	r3, r4
 800dcae:	d9fa      	bls.n	800dca6 <_free_r+0x46>
 800dcb0:	6811      	ldr	r1, [r2, #0]
 800dcb2:	1855      	adds	r5, r2, r1
 800dcb4:	42a5      	cmp	r5, r4
 800dcb6:	d10b      	bne.n	800dcd0 <_free_r+0x70>
 800dcb8:	6824      	ldr	r4, [r4, #0]
 800dcba:	4421      	add	r1, r4
 800dcbc:	1854      	adds	r4, r2, r1
 800dcbe:	42a3      	cmp	r3, r4
 800dcc0:	6011      	str	r1, [r2, #0]
 800dcc2:	d1e0      	bne.n	800dc86 <_free_r+0x26>
 800dcc4:	681c      	ldr	r4, [r3, #0]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	6053      	str	r3, [r2, #4]
 800dcca:	4421      	add	r1, r4
 800dccc:	6011      	str	r1, [r2, #0]
 800dcce:	e7da      	b.n	800dc86 <_free_r+0x26>
 800dcd0:	d902      	bls.n	800dcd8 <_free_r+0x78>
 800dcd2:	230c      	movs	r3, #12
 800dcd4:	6003      	str	r3, [r0, #0]
 800dcd6:	e7d6      	b.n	800dc86 <_free_r+0x26>
 800dcd8:	6825      	ldr	r5, [r4, #0]
 800dcda:	1961      	adds	r1, r4, r5
 800dcdc:	428b      	cmp	r3, r1
 800dcde:	bf04      	itt	eq
 800dce0:	6819      	ldreq	r1, [r3, #0]
 800dce2:	685b      	ldreq	r3, [r3, #4]
 800dce4:	6063      	str	r3, [r4, #4]
 800dce6:	bf04      	itt	eq
 800dce8:	1949      	addeq	r1, r1, r5
 800dcea:	6021      	streq	r1, [r4, #0]
 800dcec:	6054      	str	r4, [r2, #4]
 800dcee:	e7ca      	b.n	800dc86 <_free_r+0x26>
 800dcf0:	b003      	add	sp, #12
 800dcf2:	bd30      	pop	{r4, r5, pc}
 800dcf4:	2001403c 	.word	0x2001403c

0800dcf8 <sbrk_aligned>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	4e0e      	ldr	r6, [pc, #56]	; (800dd34 <sbrk_aligned+0x3c>)
 800dcfc:	460c      	mov	r4, r1
 800dcfe:	6831      	ldr	r1, [r6, #0]
 800dd00:	4605      	mov	r5, r0
 800dd02:	b911      	cbnz	r1, 800dd0a <sbrk_aligned+0x12>
 800dd04:	f000 fcf6 	bl	800e6f4 <_sbrk_r>
 800dd08:	6030      	str	r0, [r6, #0]
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	f000 fcf1 	bl	800e6f4 <_sbrk_r>
 800dd12:	1c43      	adds	r3, r0, #1
 800dd14:	d00a      	beq.n	800dd2c <sbrk_aligned+0x34>
 800dd16:	1cc4      	adds	r4, r0, #3
 800dd18:	f024 0403 	bic.w	r4, r4, #3
 800dd1c:	42a0      	cmp	r0, r4
 800dd1e:	d007      	beq.n	800dd30 <sbrk_aligned+0x38>
 800dd20:	1a21      	subs	r1, r4, r0
 800dd22:	4628      	mov	r0, r5
 800dd24:	f000 fce6 	bl	800e6f4 <_sbrk_r>
 800dd28:	3001      	adds	r0, #1
 800dd2a:	d101      	bne.n	800dd30 <sbrk_aligned+0x38>
 800dd2c:	f04f 34ff 	mov.w	r4, #4294967295
 800dd30:	4620      	mov	r0, r4
 800dd32:	bd70      	pop	{r4, r5, r6, pc}
 800dd34:	20014040 	.word	0x20014040

0800dd38 <_malloc_r>:
 800dd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3c:	1ccd      	adds	r5, r1, #3
 800dd3e:	f025 0503 	bic.w	r5, r5, #3
 800dd42:	3508      	adds	r5, #8
 800dd44:	2d0c      	cmp	r5, #12
 800dd46:	bf38      	it	cc
 800dd48:	250c      	movcc	r5, #12
 800dd4a:	2d00      	cmp	r5, #0
 800dd4c:	4607      	mov	r7, r0
 800dd4e:	db01      	blt.n	800dd54 <_malloc_r+0x1c>
 800dd50:	42a9      	cmp	r1, r5
 800dd52:	d905      	bls.n	800dd60 <_malloc_r+0x28>
 800dd54:	230c      	movs	r3, #12
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	2600      	movs	r6, #0
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd60:	4e2e      	ldr	r6, [pc, #184]	; (800de1c <_malloc_r+0xe4>)
 800dd62:	f001 fb77 	bl	800f454 <__malloc_lock>
 800dd66:	6833      	ldr	r3, [r6, #0]
 800dd68:	461c      	mov	r4, r3
 800dd6a:	bb34      	cbnz	r4, 800ddba <_malloc_r+0x82>
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4638      	mov	r0, r7
 800dd70:	f7ff ffc2 	bl	800dcf8 <sbrk_aligned>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	4604      	mov	r4, r0
 800dd78:	d14d      	bne.n	800de16 <_malloc_r+0xde>
 800dd7a:	6834      	ldr	r4, [r6, #0]
 800dd7c:	4626      	mov	r6, r4
 800dd7e:	2e00      	cmp	r6, #0
 800dd80:	d140      	bne.n	800de04 <_malloc_r+0xcc>
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	4631      	mov	r1, r6
 800dd86:	4638      	mov	r0, r7
 800dd88:	eb04 0803 	add.w	r8, r4, r3
 800dd8c:	f000 fcb2 	bl	800e6f4 <_sbrk_r>
 800dd90:	4580      	cmp	r8, r0
 800dd92:	d13a      	bne.n	800de0a <_malloc_r+0xd2>
 800dd94:	6821      	ldr	r1, [r4, #0]
 800dd96:	3503      	adds	r5, #3
 800dd98:	1a6d      	subs	r5, r5, r1
 800dd9a:	f025 0503 	bic.w	r5, r5, #3
 800dd9e:	3508      	adds	r5, #8
 800dda0:	2d0c      	cmp	r5, #12
 800dda2:	bf38      	it	cc
 800dda4:	250c      	movcc	r5, #12
 800dda6:	4629      	mov	r1, r5
 800dda8:	4638      	mov	r0, r7
 800ddaa:	f7ff ffa5 	bl	800dcf8 <sbrk_aligned>
 800ddae:	3001      	adds	r0, #1
 800ddb0:	d02b      	beq.n	800de0a <_malloc_r+0xd2>
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	442b      	add	r3, r5
 800ddb6:	6023      	str	r3, [r4, #0]
 800ddb8:	e00e      	b.n	800ddd8 <_malloc_r+0xa0>
 800ddba:	6822      	ldr	r2, [r4, #0]
 800ddbc:	1b52      	subs	r2, r2, r5
 800ddbe:	d41e      	bmi.n	800ddfe <_malloc_r+0xc6>
 800ddc0:	2a0b      	cmp	r2, #11
 800ddc2:	d916      	bls.n	800ddf2 <_malloc_r+0xba>
 800ddc4:	1961      	adds	r1, r4, r5
 800ddc6:	42a3      	cmp	r3, r4
 800ddc8:	6025      	str	r5, [r4, #0]
 800ddca:	bf18      	it	ne
 800ddcc:	6059      	strne	r1, [r3, #4]
 800ddce:	6863      	ldr	r3, [r4, #4]
 800ddd0:	bf08      	it	eq
 800ddd2:	6031      	streq	r1, [r6, #0]
 800ddd4:	5162      	str	r2, [r4, r5]
 800ddd6:	604b      	str	r3, [r1, #4]
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f104 060b 	add.w	r6, r4, #11
 800ddde:	f001 fb3f 	bl	800f460 <__malloc_unlock>
 800dde2:	f026 0607 	bic.w	r6, r6, #7
 800dde6:	1d23      	adds	r3, r4, #4
 800dde8:	1af2      	subs	r2, r6, r3
 800ddea:	d0b6      	beq.n	800dd5a <_malloc_r+0x22>
 800ddec:	1b9b      	subs	r3, r3, r6
 800ddee:	50a3      	str	r3, [r4, r2]
 800ddf0:	e7b3      	b.n	800dd5a <_malloc_r+0x22>
 800ddf2:	6862      	ldr	r2, [r4, #4]
 800ddf4:	42a3      	cmp	r3, r4
 800ddf6:	bf0c      	ite	eq
 800ddf8:	6032      	streq	r2, [r6, #0]
 800ddfa:	605a      	strne	r2, [r3, #4]
 800ddfc:	e7ec      	b.n	800ddd8 <_malloc_r+0xa0>
 800ddfe:	4623      	mov	r3, r4
 800de00:	6864      	ldr	r4, [r4, #4]
 800de02:	e7b2      	b.n	800dd6a <_malloc_r+0x32>
 800de04:	4634      	mov	r4, r6
 800de06:	6876      	ldr	r6, [r6, #4]
 800de08:	e7b9      	b.n	800dd7e <_malloc_r+0x46>
 800de0a:	230c      	movs	r3, #12
 800de0c:	603b      	str	r3, [r7, #0]
 800de0e:	4638      	mov	r0, r7
 800de10:	f001 fb26 	bl	800f460 <__malloc_unlock>
 800de14:	e7a1      	b.n	800dd5a <_malloc_r+0x22>
 800de16:	6025      	str	r5, [r4, #0]
 800de18:	e7de      	b.n	800ddd8 <_malloc_r+0xa0>
 800de1a:	bf00      	nop
 800de1c:	2001403c 	.word	0x2001403c

0800de20 <__cvt>:
 800de20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	ec55 4b10 	vmov	r4, r5, d0
 800de28:	2d00      	cmp	r5, #0
 800de2a:	460e      	mov	r6, r1
 800de2c:	4619      	mov	r1, r3
 800de2e:	462b      	mov	r3, r5
 800de30:	bfbb      	ittet	lt
 800de32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de36:	461d      	movlt	r5, r3
 800de38:	2300      	movge	r3, #0
 800de3a:	232d      	movlt	r3, #45	; 0x2d
 800de3c:	700b      	strb	r3, [r1, #0]
 800de3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800de44:	4691      	mov	r9, r2
 800de46:	f023 0820 	bic.w	r8, r3, #32
 800de4a:	bfbc      	itt	lt
 800de4c:	4622      	movlt	r2, r4
 800de4e:	4614      	movlt	r4, r2
 800de50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de54:	d005      	beq.n	800de62 <__cvt+0x42>
 800de56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de5a:	d100      	bne.n	800de5e <__cvt+0x3e>
 800de5c:	3601      	adds	r6, #1
 800de5e:	2102      	movs	r1, #2
 800de60:	e000      	b.n	800de64 <__cvt+0x44>
 800de62:	2103      	movs	r1, #3
 800de64:	ab03      	add	r3, sp, #12
 800de66:	9301      	str	r3, [sp, #4]
 800de68:	ab02      	add	r3, sp, #8
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	ec45 4b10 	vmov	d0, r4, r5
 800de70:	4653      	mov	r3, sl
 800de72:	4632      	mov	r2, r6
 800de74:	f000 fcfc 	bl	800e870 <_dtoa_r>
 800de78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800de7c:	4607      	mov	r7, r0
 800de7e:	d102      	bne.n	800de86 <__cvt+0x66>
 800de80:	f019 0f01 	tst.w	r9, #1
 800de84:	d022      	beq.n	800decc <__cvt+0xac>
 800de86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de8a:	eb07 0906 	add.w	r9, r7, r6
 800de8e:	d110      	bne.n	800deb2 <__cvt+0x92>
 800de90:	783b      	ldrb	r3, [r7, #0]
 800de92:	2b30      	cmp	r3, #48	; 0x30
 800de94:	d10a      	bne.n	800deac <__cvt+0x8c>
 800de96:	2200      	movs	r2, #0
 800de98:	2300      	movs	r3, #0
 800de9a:	4620      	mov	r0, r4
 800de9c:	4629      	mov	r1, r5
 800de9e:	f7f2 fe2b 	bl	8000af8 <__aeabi_dcmpeq>
 800dea2:	b918      	cbnz	r0, 800deac <__cvt+0x8c>
 800dea4:	f1c6 0601 	rsb	r6, r6, #1
 800dea8:	f8ca 6000 	str.w	r6, [sl]
 800deac:	f8da 3000 	ldr.w	r3, [sl]
 800deb0:	4499      	add	r9, r3
 800deb2:	2200      	movs	r2, #0
 800deb4:	2300      	movs	r3, #0
 800deb6:	4620      	mov	r0, r4
 800deb8:	4629      	mov	r1, r5
 800deba:	f7f2 fe1d 	bl	8000af8 <__aeabi_dcmpeq>
 800debe:	b108      	cbz	r0, 800dec4 <__cvt+0xa4>
 800dec0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dec4:	2230      	movs	r2, #48	; 0x30
 800dec6:	9b03      	ldr	r3, [sp, #12]
 800dec8:	454b      	cmp	r3, r9
 800deca:	d307      	bcc.n	800dedc <__cvt+0xbc>
 800decc:	9b03      	ldr	r3, [sp, #12]
 800dece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ded0:	1bdb      	subs	r3, r3, r7
 800ded2:	4638      	mov	r0, r7
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	b004      	add	sp, #16
 800ded8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dedc:	1c59      	adds	r1, r3, #1
 800dede:	9103      	str	r1, [sp, #12]
 800dee0:	701a      	strb	r2, [r3, #0]
 800dee2:	e7f0      	b.n	800dec6 <__cvt+0xa6>

0800dee4 <__exponent>:
 800dee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dee6:	4603      	mov	r3, r0
 800dee8:	2900      	cmp	r1, #0
 800deea:	bfb8      	it	lt
 800deec:	4249      	neglt	r1, r1
 800deee:	f803 2b02 	strb.w	r2, [r3], #2
 800def2:	bfb4      	ite	lt
 800def4:	222d      	movlt	r2, #45	; 0x2d
 800def6:	222b      	movge	r2, #43	; 0x2b
 800def8:	2909      	cmp	r1, #9
 800defa:	7042      	strb	r2, [r0, #1]
 800defc:	dd2a      	ble.n	800df54 <__exponent+0x70>
 800defe:	f10d 0407 	add.w	r4, sp, #7
 800df02:	46a4      	mov	ip, r4
 800df04:	270a      	movs	r7, #10
 800df06:	46a6      	mov	lr, r4
 800df08:	460a      	mov	r2, r1
 800df0a:	fb91 f6f7 	sdiv	r6, r1, r7
 800df0e:	fb07 1516 	mls	r5, r7, r6, r1
 800df12:	3530      	adds	r5, #48	; 0x30
 800df14:	2a63      	cmp	r2, #99	; 0x63
 800df16:	f104 34ff 	add.w	r4, r4, #4294967295
 800df1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df1e:	4631      	mov	r1, r6
 800df20:	dcf1      	bgt.n	800df06 <__exponent+0x22>
 800df22:	3130      	adds	r1, #48	; 0x30
 800df24:	f1ae 0502 	sub.w	r5, lr, #2
 800df28:	f804 1c01 	strb.w	r1, [r4, #-1]
 800df2c:	1c44      	adds	r4, r0, #1
 800df2e:	4629      	mov	r1, r5
 800df30:	4561      	cmp	r1, ip
 800df32:	d30a      	bcc.n	800df4a <__exponent+0x66>
 800df34:	f10d 0209 	add.w	r2, sp, #9
 800df38:	eba2 020e 	sub.w	r2, r2, lr
 800df3c:	4565      	cmp	r5, ip
 800df3e:	bf88      	it	hi
 800df40:	2200      	movhi	r2, #0
 800df42:	4413      	add	r3, r2
 800df44:	1a18      	subs	r0, r3, r0
 800df46:	b003      	add	sp, #12
 800df48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800df52:	e7ed      	b.n	800df30 <__exponent+0x4c>
 800df54:	2330      	movs	r3, #48	; 0x30
 800df56:	3130      	adds	r1, #48	; 0x30
 800df58:	7083      	strb	r3, [r0, #2]
 800df5a:	70c1      	strb	r1, [r0, #3]
 800df5c:	1d03      	adds	r3, r0, #4
 800df5e:	e7f1      	b.n	800df44 <__exponent+0x60>

0800df60 <_printf_float>:
 800df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	ed2d 8b02 	vpush	{d8}
 800df68:	b08d      	sub	sp, #52	; 0x34
 800df6a:	460c      	mov	r4, r1
 800df6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800df70:	4616      	mov	r6, r2
 800df72:	461f      	mov	r7, r3
 800df74:	4605      	mov	r5, r0
 800df76:	f001 fa69 	bl	800f44c <_localeconv_r>
 800df7a:	f8d0 a000 	ldr.w	sl, [r0]
 800df7e:	4650      	mov	r0, sl
 800df80:	f7f2 f938 	bl	80001f4 <strlen>
 800df84:	2300      	movs	r3, #0
 800df86:	930a      	str	r3, [sp, #40]	; 0x28
 800df88:	6823      	ldr	r3, [r4, #0]
 800df8a:	9305      	str	r3, [sp, #20]
 800df8c:	f8d8 3000 	ldr.w	r3, [r8]
 800df90:	f894 b018 	ldrb.w	fp, [r4, #24]
 800df94:	3307      	adds	r3, #7
 800df96:	f023 0307 	bic.w	r3, r3, #7
 800df9a:	f103 0208 	add.w	r2, r3, #8
 800df9e:	f8c8 2000 	str.w	r2, [r8]
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dfaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dfae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dfb2:	9307      	str	r3, [sp, #28]
 800dfb4:	f8cd 8018 	str.w	r8, [sp, #24]
 800dfb8:	ee08 0a10 	vmov	s16, r0
 800dfbc:	4b9f      	ldr	r3, [pc, #636]	; (800e23c <_printf_float+0x2dc>)
 800dfbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfc2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc6:	f7f2 fdc9 	bl	8000b5c <__aeabi_dcmpun>
 800dfca:	bb88      	cbnz	r0, 800e030 <_printf_float+0xd0>
 800dfcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfd0:	4b9a      	ldr	r3, [pc, #616]	; (800e23c <_printf_float+0x2dc>)
 800dfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd6:	f7f2 fda3 	bl	8000b20 <__aeabi_dcmple>
 800dfda:	bb48      	cbnz	r0, 800e030 <_printf_float+0xd0>
 800dfdc:	2200      	movs	r2, #0
 800dfde:	2300      	movs	r3, #0
 800dfe0:	4640      	mov	r0, r8
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	f7f2 fd92 	bl	8000b0c <__aeabi_dcmplt>
 800dfe8:	b110      	cbz	r0, 800dff0 <_printf_float+0x90>
 800dfea:	232d      	movs	r3, #45	; 0x2d
 800dfec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dff0:	4b93      	ldr	r3, [pc, #588]	; (800e240 <_printf_float+0x2e0>)
 800dff2:	4894      	ldr	r0, [pc, #592]	; (800e244 <_printf_float+0x2e4>)
 800dff4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dff8:	bf94      	ite	ls
 800dffa:	4698      	movls	r8, r3
 800dffc:	4680      	movhi	r8, r0
 800dffe:	2303      	movs	r3, #3
 800e000:	6123      	str	r3, [r4, #16]
 800e002:	9b05      	ldr	r3, [sp, #20]
 800e004:	f023 0204 	bic.w	r2, r3, #4
 800e008:	6022      	str	r2, [r4, #0]
 800e00a:	f04f 0900 	mov.w	r9, #0
 800e00e:	9700      	str	r7, [sp, #0]
 800e010:	4633      	mov	r3, r6
 800e012:	aa0b      	add	r2, sp, #44	; 0x2c
 800e014:	4621      	mov	r1, r4
 800e016:	4628      	mov	r0, r5
 800e018:	f000 f9d8 	bl	800e3cc <_printf_common>
 800e01c:	3001      	adds	r0, #1
 800e01e:	f040 8090 	bne.w	800e142 <_printf_float+0x1e2>
 800e022:	f04f 30ff 	mov.w	r0, #4294967295
 800e026:	b00d      	add	sp, #52	; 0x34
 800e028:	ecbd 8b02 	vpop	{d8}
 800e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e030:	4642      	mov	r2, r8
 800e032:	464b      	mov	r3, r9
 800e034:	4640      	mov	r0, r8
 800e036:	4649      	mov	r1, r9
 800e038:	f7f2 fd90 	bl	8000b5c <__aeabi_dcmpun>
 800e03c:	b140      	cbz	r0, 800e050 <_printf_float+0xf0>
 800e03e:	464b      	mov	r3, r9
 800e040:	2b00      	cmp	r3, #0
 800e042:	bfbc      	itt	lt
 800e044:	232d      	movlt	r3, #45	; 0x2d
 800e046:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e04a:	487f      	ldr	r0, [pc, #508]	; (800e248 <_printf_float+0x2e8>)
 800e04c:	4b7f      	ldr	r3, [pc, #508]	; (800e24c <_printf_float+0x2ec>)
 800e04e:	e7d1      	b.n	800dff4 <_printf_float+0x94>
 800e050:	6863      	ldr	r3, [r4, #4]
 800e052:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e056:	9206      	str	r2, [sp, #24]
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	d13f      	bne.n	800e0dc <_printf_float+0x17c>
 800e05c:	2306      	movs	r3, #6
 800e05e:	6063      	str	r3, [r4, #4]
 800e060:	9b05      	ldr	r3, [sp, #20]
 800e062:	6861      	ldr	r1, [r4, #4]
 800e064:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e068:	2300      	movs	r3, #0
 800e06a:	9303      	str	r3, [sp, #12]
 800e06c:	ab0a      	add	r3, sp, #40	; 0x28
 800e06e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e072:	ab09      	add	r3, sp, #36	; 0x24
 800e074:	ec49 8b10 	vmov	d0, r8, r9
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	6022      	str	r2, [r4, #0]
 800e07c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e080:	4628      	mov	r0, r5
 800e082:	f7ff fecd 	bl	800de20 <__cvt>
 800e086:	9b06      	ldr	r3, [sp, #24]
 800e088:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e08a:	2b47      	cmp	r3, #71	; 0x47
 800e08c:	4680      	mov	r8, r0
 800e08e:	d108      	bne.n	800e0a2 <_printf_float+0x142>
 800e090:	1cc8      	adds	r0, r1, #3
 800e092:	db02      	blt.n	800e09a <_printf_float+0x13a>
 800e094:	6863      	ldr	r3, [r4, #4]
 800e096:	4299      	cmp	r1, r3
 800e098:	dd41      	ble.n	800e11e <_printf_float+0x1be>
 800e09a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e09e:	fa5f fb8b 	uxtb.w	fp, fp
 800e0a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0a6:	d820      	bhi.n	800e0ea <_printf_float+0x18a>
 800e0a8:	3901      	subs	r1, #1
 800e0aa:	465a      	mov	r2, fp
 800e0ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0b0:	9109      	str	r1, [sp, #36]	; 0x24
 800e0b2:	f7ff ff17 	bl	800dee4 <__exponent>
 800e0b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0b8:	1813      	adds	r3, r2, r0
 800e0ba:	2a01      	cmp	r2, #1
 800e0bc:	4681      	mov	r9, r0
 800e0be:	6123      	str	r3, [r4, #16]
 800e0c0:	dc02      	bgt.n	800e0c8 <_printf_float+0x168>
 800e0c2:	6822      	ldr	r2, [r4, #0]
 800e0c4:	07d2      	lsls	r2, r2, #31
 800e0c6:	d501      	bpl.n	800e0cc <_printf_float+0x16c>
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	6123      	str	r3, [r4, #16]
 800e0cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d09c      	beq.n	800e00e <_printf_float+0xae>
 800e0d4:	232d      	movs	r3, #45	; 0x2d
 800e0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0da:	e798      	b.n	800e00e <_printf_float+0xae>
 800e0dc:	9a06      	ldr	r2, [sp, #24]
 800e0de:	2a47      	cmp	r2, #71	; 0x47
 800e0e0:	d1be      	bne.n	800e060 <_printf_float+0x100>
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1bc      	bne.n	800e060 <_printf_float+0x100>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e7b9      	b.n	800e05e <_printf_float+0xfe>
 800e0ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e0ee:	d118      	bne.n	800e122 <_printf_float+0x1c2>
 800e0f0:	2900      	cmp	r1, #0
 800e0f2:	6863      	ldr	r3, [r4, #4]
 800e0f4:	dd0b      	ble.n	800e10e <_printf_float+0x1ae>
 800e0f6:	6121      	str	r1, [r4, #16]
 800e0f8:	b913      	cbnz	r3, 800e100 <_printf_float+0x1a0>
 800e0fa:	6822      	ldr	r2, [r4, #0]
 800e0fc:	07d0      	lsls	r0, r2, #31
 800e0fe:	d502      	bpl.n	800e106 <_printf_float+0x1a6>
 800e100:	3301      	adds	r3, #1
 800e102:	440b      	add	r3, r1
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	65a1      	str	r1, [r4, #88]	; 0x58
 800e108:	f04f 0900 	mov.w	r9, #0
 800e10c:	e7de      	b.n	800e0cc <_printf_float+0x16c>
 800e10e:	b913      	cbnz	r3, 800e116 <_printf_float+0x1b6>
 800e110:	6822      	ldr	r2, [r4, #0]
 800e112:	07d2      	lsls	r2, r2, #31
 800e114:	d501      	bpl.n	800e11a <_printf_float+0x1ba>
 800e116:	3302      	adds	r3, #2
 800e118:	e7f4      	b.n	800e104 <_printf_float+0x1a4>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e7f2      	b.n	800e104 <_printf_float+0x1a4>
 800e11e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e124:	4299      	cmp	r1, r3
 800e126:	db05      	blt.n	800e134 <_printf_float+0x1d4>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	6121      	str	r1, [r4, #16]
 800e12c:	07d8      	lsls	r0, r3, #31
 800e12e:	d5ea      	bpl.n	800e106 <_printf_float+0x1a6>
 800e130:	1c4b      	adds	r3, r1, #1
 800e132:	e7e7      	b.n	800e104 <_printf_float+0x1a4>
 800e134:	2900      	cmp	r1, #0
 800e136:	bfd4      	ite	le
 800e138:	f1c1 0202 	rsble	r2, r1, #2
 800e13c:	2201      	movgt	r2, #1
 800e13e:	4413      	add	r3, r2
 800e140:	e7e0      	b.n	800e104 <_printf_float+0x1a4>
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	055a      	lsls	r2, r3, #21
 800e146:	d407      	bmi.n	800e158 <_printf_float+0x1f8>
 800e148:	6923      	ldr	r3, [r4, #16]
 800e14a:	4642      	mov	r2, r8
 800e14c:	4631      	mov	r1, r6
 800e14e:	4628      	mov	r0, r5
 800e150:	47b8      	blx	r7
 800e152:	3001      	adds	r0, #1
 800e154:	d12c      	bne.n	800e1b0 <_printf_float+0x250>
 800e156:	e764      	b.n	800e022 <_printf_float+0xc2>
 800e158:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e15c:	f240 80e0 	bls.w	800e320 <_printf_float+0x3c0>
 800e160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e164:	2200      	movs	r2, #0
 800e166:	2300      	movs	r3, #0
 800e168:	f7f2 fcc6 	bl	8000af8 <__aeabi_dcmpeq>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d034      	beq.n	800e1da <_printf_float+0x27a>
 800e170:	4a37      	ldr	r2, [pc, #220]	; (800e250 <_printf_float+0x2f0>)
 800e172:	2301      	movs	r3, #1
 800e174:	4631      	mov	r1, r6
 800e176:	4628      	mov	r0, r5
 800e178:	47b8      	blx	r7
 800e17a:	3001      	adds	r0, #1
 800e17c:	f43f af51 	beq.w	800e022 <_printf_float+0xc2>
 800e180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e184:	429a      	cmp	r2, r3
 800e186:	db02      	blt.n	800e18e <_printf_float+0x22e>
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	07d8      	lsls	r0, r3, #31
 800e18c:	d510      	bpl.n	800e1b0 <_printf_float+0x250>
 800e18e:	ee18 3a10 	vmov	r3, s16
 800e192:	4652      	mov	r2, sl
 800e194:	4631      	mov	r1, r6
 800e196:	4628      	mov	r0, r5
 800e198:	47b8      	blx	r7
 800e19a:	3001      	adds	r0, #1
 800e19c:	f43f af41 	beq.w	800e022 <_printf_float+0xc2>
 800e1a0:	f04f 0800 	mov.w	r8, #0
 800e1a4:	f104 091a 	add.w	r9, r4, #26
 800e1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	4543      	cmp	r3, r8
 800e1ae:	dc09      	bgt.n	800e1c4 <_printf_float+0x264>
 800e1b0:	6823      	ldr	r3, [r4, #0]
 800e1b2:	079b      	lsls	r3, r3, #30
 800e1b4:	f100 8105 	bmi.w	800e3c2 <_printf_float+0x462>
 800e1b8:	68e0      	ldr	r0, [r4, #12]
 800e1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1bc:	4298      	cmp	r0, r3
 800e1be:	bfb8      	it	lt
 800e1c0:	4618      	movlt	r0, r3
 800e1c2:	e730      	b.n	800e026 <_printf_float+0xc6>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	464a      	mov	r2, r9
 800e1c8:	4631      	mov	r1, r6
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	47b8      	blx	r7
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f43f af27 	beq.w	800e022 <_printf_float+0xc2>
 800e1d4:	f108 0801 	add.w	r8, r8, #1
 800e1d8:	e7e6      	b.n	800e1a8 <_printf_float+0x248>
 800e1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dc39      	bgt.n	800e254 <_printf_float+0x2f4>
 800e1e0:	4a1b      	ldr	r2, [pc, #108]	; (800e250 <_printf_float+0x2f0>)
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	4631      	mov	r1, r6
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	47b8      	blx	r7
 800e1ea:	3001      	adds	r0, #1
 800e1ec:	f43f af19 	beq.w	800e022 <_printf_float+0xc2>
 800e1f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	d102      	bne.n	800e1fe <_printf_float+0x29e>
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	07d9      	lsls	r1, r3, #31
 800e1fc:	d5d8      	bpl.n	800e1b0 <_printf_float+0x250>
 800e1fe:	ee18 3a10 	vmov	r3, s16
 800e202:	4652      	mov	r2, sl
 800e204:	4631      	mov	r1, r6
 800e206:	4628      	mov	r0, r5
 800e208:	47b8      	blx	r7
 800e20a:	3001      	adds	r0, #1
 800e20c:	f43f af09 	beq.w	800e022 <_printf_float+0xc2>
 800e210:	f04f 0900 	mov.w	r9, #0
 800e214:	f104 0a1a 	add.w	sl, r4, #26
 800e218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e21a:	425b      	negs	r3, r3
 800e21c:	454b      	cmp	r3, r9
 800e21e:	dc01      	bgt.n	800e224 <_printf_float+0x2c4>
 800e220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e222:	e792      	b.n	800e14a <_printf_float+0x1ea>
 800e224:	2301      	movs	r3, #1
 800e226:	4652      	mov	r2, sl
 800e228:	4631      	mov	r1, r6
 800e22a:	4628      	mov	r0, r5
 800e22c:	47b8      	blx	r7
 800e22e:	3001      	adds	r0, #1
 800e230:	f43f aef7 	beq.w	800e022 <_printf_float+0xc2>
 800e234:	f109 0901 	add.w	r9, r9, #1
 800e238:	e7ee      	b.n	800e218 <_printf_float+0x2b8>
 800e23a:	bf00      	nop
 800e23c:	7fefffff 	.word	0x7fefffff
 800e240:	08013a54 	.word	0x08013a54
 800e244:	08013a58 	.word	0x08013a58
 800e248:	08013a60 	.word	0x08013a60
 800e24c:	08013a5c 	.word	0x08013a5c
 800e250:	08013a64 	.word	0x08013a64
 800e254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e258:	429a      	cmp	r2, r3
 800e25a:	bfa8      	it	ge
 800e25c:	461a      	movge	r2, r3
 800e25e:	2a00      	cmp	r2, #0
 800e260:	4691      	mov	r9, r2
 800e262:	dc37      	bgt.n	800e2d4 <_printf_float+0x374>
 800e264:	f04f 0b00 	mov.w	fp, #0
 800e268:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e26c:	f104 021a 	add.w	r2, r4, #26
 800e270:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e272:	9305      	str	r3, [sp, #20]
 800e274:	eba3 0309 	sub.w	r3, r3, r9
 800e278:	455b      	cmp	r3, fp
 800e27a:	dc33      	bgt.n	800e2e4 <_printf_float+0x384>
 800e27c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e280:	429a      	cmp	r2, r3
 800e282:	db3b      	blt.n	800e2fc <_printf_float+0x39c>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	07da      	lsls	r2, r3, #31
 800e288:	d438      	bmi.n	800e2fc <_printf_float+0x39c>
 800e28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e28c:	9a05      	ldr	r2, [sp, #20]
 800e28e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e290:	1a9a      	subs	r2, r3, r2
 800e292:	eba3 0901 	sub.w	r9, r3, r1
 800e296:	4591      	cmp	r9, r2
 800e298:	bfa8      	it	ge
 800e29a:	4691      	movge	r9, r2
 800e29c:	f1b9 0f00 	cmp.w	r9, #0
 800e2a0:	dc35      	bgt.n	800e30e <_printf_float+0x3ae>
 800e2a2:	f04f 0800 	mov.w	r8, #0
 800e2a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2aa:	f104 0a1a 	add.w	sl, r4, #26
 800e2ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2b2:	1a9b      	subs	r3, r3, r2
 800e2b4:	eba3 0309 	sub.w	r3, r3, r9
 800e2b8:	4543      	cmp	r3, r8
 800e2ba:	f77f af79 	ble.w	800e1b0 <_printf_float+0x250>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	4652      	mov	r2, sl
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	47b8      	blx	r7
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	f43f aeaa 	beq.w	800e022 <_printf_float+0xc2>
 800e2ce:	f108 0801 	add.w	r8, r8, #1
 800e2d2:	e7ec      	b.n	800e2ae <_printf_float+0x34e>
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4642      	mov	r2, r8
 800e2da:	4628      	mov	r0, r5
 800e2dc:	47b8      	blx	r7
 800e2de:	3001      	adds	r0, #1
 800e2e0:	d1c0      	bne.n	800e264 <_printf_float+0x304>
 800e2e2:	e69e      	b.n	800e022 <_printf_float+0xc2>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	4631      	mov	r1, r6
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	9205      	str	r2, [sp, #20]
 800e2ec:	47b8      	blx	r7
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	f43f ae97 	beq.w	800e022 <_printf_float+0xc2>
 800e2f4:	9a05      	ldr	r2, [sp, #20]
 800e2f6:	f10b 0b01 	add.w	fp, fp, #1
 800e2fa:	e7b9      	b.n	800e270 <_printf_float+0x310>
 800e2fc:	ee18 3a10 	vmov	r3, s16
 800e300:	4652      	mov	r2, sl
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	47b8      	blx	r7
 800e308:	3001      	adds	r0, #1
 800e30a:	d1be      	bne.n	800e28a <_printf_float+0x32a>
 800e30c:	e689      	b.n	800e022 <_printf_float+0xc2>
 800e30e:	9a05      	ldr	r2, [sp, #20]
 800e310:	464b      	mov	r3, r9
 800e312:	4442      	add	r2, r8
 800e314:	4631      	mov	r1, r6
 800e316:	4628      	mov	r0, r5
 800e318:	47b8      	blx	r7
 800e31a:	3001      	adds	r0, #1
 800e31c:	d1c1      	bne.n	800e2a2 <_printf_float+0x342>
 800e31e:	e680      	b.n	800e022 <_printf_float+0xc2>
 800e320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e322:	2a01      	cmp	r2, #1
 800e324:	dc01      	bgt.n	800e32a <_printf_float+0x3ca>
 800e326:	07db      	lsls	r3, r3, #31
 800e328:	d538      	bpl.n	800e39c <_printf_float+0x43c>
 800e32a:	2301      	movs	r3, #1
 800e32c:	4642      	mov	r2, r8
 800e32e:	4631      	mov	r1, r6
 800e330:	4628      	mov	r0, r5
 800e332:	47b8      	blx	r7
 800e334:	3001      	adds	r0, #1
 800e336:	f43f ae74 	beq.w	800e022 <_printf_float+0xc2>
 800e33a:	ee18 3a10 	vmov	r3, s16
 800e33e:	4652      	mov	r2, sl
 800e340:	4631      	mov	r1, r6
 800e342:	4628      	mov	r0, r5
 800e344:	47b8      	blx	r7
 800e346:	3001      	adds	r0, #1
 800e348:	f43f ae6b 	beq.w	800e022 <_printf_float+0xc2>
 800e34c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e350:	2200      	movs	r2, #0
 800e352:	2300      	movs	r3, #0
 800e354:	f7f2 fbd0 	bl	8000af8 <__aeabi_dcmpeq>
 800e358:	b9d8      	cbnz	r0, 800e392 <_printf_float+0x432>
 800e35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e35c:	f108 0201 	add.w	r2, r8, #1
 800e360:	3b01      	subs	r3, #1
 800e362:	4631      	mov	r1, r6
 800e364:	4628      	mov	r0, r5
 800e366:	47b8      	blx	r7
 800e368:	3001      	adds	r0, #1
 800e36a:	d10e      	bne.n	800e38a <_printf_float+0x42a>
 800e36c:	e659      	b.n	800e022 <_printf_float+0xc2>
 800e36e:	2301      	movs	r3, #1
 800e370:	4652      	mov	r2, sl
 800e372:	4631      	mov	r1, r6
 800e374:	4628      	mov	r0, r5
 800e376:	47b8      	blx	r7
 800e378:	3001      	adds	r0, #1
 800e37a:	f43f ae52 	beq.w	800e022 <_printf_float+0xc2>
 800e37e:	f108 0801 	add.w	r8, r8, #1
 800e382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e384:	3b01      	subs	r3, #1
 800e386:	4543      	cmp	r3, r8
 800e388:	dcf1      	bgt.n	800e36e <_printf_float+0x40e>
 800e38a:	464b      	mov	r3, r9
 800e38c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e390:	e6dc      	b.n	800e14c <_printf_float+0x1ec>
 800e392:	f04f 0800 	mov.w	r8, #0
 800e396:	f104 0a1a 	add.w	sl, r4, #26
 800e39a:	e7f2      	b.n	800e382 <_printf_float+0x422>
 800e39c:	2301      	movs	r3, #1
 800e39e:	4642      	mov	r2, r8
 800e3a0:	e7df      	b.n	800e362 <_printf_float+0x402>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	464a      	mov	r2, r9
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	47b8      	blx	r7
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	f43f ae38 	beq.w	800e022 <_printf_float+0xc2>
 800e3b2:	f108 0801 	add.w	r8, r8, #1
 800e3b6:	68e3      	ldr	r3, [r4, #12]
 800e3b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ba:	1a5b      	subs	r3, r3, r1
 800e3bc:	4543      	cmp	r3, r8
 800e3be:	dcf0      	bgt.n	800e3a2 <_printf_float+0x442>
 800e3c0:	e6fa      	b.n	800e1b8 <_printf_float+0x258>
 800e3c2:	f04f 0800 	mov.w	r8, #0
 800e3c6:	f104 0919 	add.w	r9, r4, #25
 800e3ca:	e7f4      	b.n	800e3b6 <_printf_float+0x456>

0800e3cc <_printf_common>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	4616      	mov	r6, r2
 800e3d2:	4699      	mov	r9, r3
 800e3d4:	688a      	ldr	r2, [r1, #8]
 800e3d6:	690b      	ldr	r3, [r1, #16]
 800e3d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	bfb8      	it	lt
 800e3e0:	4613      	movlt	r3, r2
 800e3e2:	6033      	str	r3, [r6, #0]
 800e3e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	b10a      	cbz	r2, 800e3f2 <_printf_common+0x26>
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	6033      	str	r3, [r6, #0]
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	0699      	lsls	r1, r3, #26
 800e3f6:	bf42      	ittt	mi
 800e3f8:	6833      	ldrmi	r3, [r6, #0]
 800e3fa:	3302      	addmi	r3, #2
 800e3fc:	6033      	strmi	r3, [r6, #0]
 800e3fe:	6825      	ldr	r5, [r4, #0]
 800e400:	f015 0506 	ands.w	r5, r5, #6
 800e404:	d106      	bne.n	800e414 <_printf_common+0x48>
 800e406:	f104 0a19 	add.w	sl, r4, #25
 800e40a:	68e3      	ldr	r3, [r4, #12]
 800e40c:	6832      	ldr	r2, [r6, #0]
 800e40e:	1a9b      	subs	r3, r3, r2
 800e410:	42ab      	cmp	r3, r5
 800e412:	dc26      	bgt.n	800e462 <_printf_common+0x96>
 800e414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e418:	1e13      	subs	r3, r2, #0
 800e41a:	6822      	ldr	r2, [r4, #0]
 800e41c:	bf18      	it	ne
 800e41e:	2301      	movne	r3, #1
 800e420:	0692      	lsls	r2, r2, #26
 800e422:	d42b      	bmi.n	800e47c <_printf_common+0xb0>
 800e424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e428:	4649      	mov	r1, r9
 800e42a:	4638      	mov	r0, r7
 800e42c:	47c0      	blx	r8
 800e42e:	3001      	adds	r0, #1
 800e430:	d01e      	beq.n	800e470 <_printf_common+0xa4>
 800e432:	6823      	ldr	r3, [r4, #0]
 800e434:	68e5      	ldr	r5, [r4, #12]
 800e436:	6832      	ldr	r2, [r6, #0]
 800e438:	f003 0306 	and.w	r3, r3, #6
 800e43c:	2b04      	cmp	r3, #4
 800e43e:	bf08      	it	eq
 800e440:	1aad      	subeq	r5, r5, r2
 800e442:	68a3      	ldr	r3, [r4, #8]
 800e444:	6922      	ldr	r2, [r4, #16]
 800e446:	bf0c      	ite	eq
 800e448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e44c:	2500      	movne	r5, #0
 800e44e:	4293      	cmp	r3, r2
 800e450:	bfc4      	itt	gt
 800e452:	1a9b      	subgt	r3, r3, r2
 800e454:	18ed      	addgt	r5, r5, r3
 800e456:	2600      	movs	r6, #0
 800e458:	341a      	adds	r4, #26
 800e45a:	42b5      	cmp	r5, r6
 800e45c:	d11a      	bne.n	800e494 <_printf_common+0xc8>
 800e45e:	2000      	movs	r0, #0
 800e460:	e008      	b.n	800e474 <_printf_common+0xa8>
 800e462:	2301      	movs	r3, #1
 800e464:	4652      	mov	r2, sl
 800e466:	4649      	mov	r1, r9
 800e468:	4638      	mov	r0, r7
 800e46a:	47c0      	blx	r8
 800e46c:	3001      	adds	r0, #1
 800e46e:	d103      	bne.n	800e478 <_printf_common+0xac>
 800e470:	f04f 30ff 	mov.w	r0, #4294967295
 800e474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e478:	3501      	adds	r5, #1
 800e47a:	e7c6      	b.n	800e40a <_printf_common+0x3e>
 800e47c:	18e1      	adds	r1, r4, r3
 800e47e:	1c5a      	adds	r2, r3, #1
 800e480:	2030      	movs	r0, #48	; 0x30
 800e482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e486:	4422      	add	r2, r4
 800e488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e48c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e490:	3302      	adds	r3, #2
 800e492:	e7c7      	b.n	800e424 <_printf_common+0x58>
 800e494:	2301      	movs	r3, #1
 800e496:	4622      	mov	r2, r4
 800e498:	4649      	mov	r1, r9
 800e49a:	4638      	mov	r0, r7
 800e49c:	47c0      	blx	r8
 800e49e:	3001      	adds	r0, #1
 800e4a0:	d0e6      	beq.n	800e470 <_printf_common+0xa4>
 800e4a2:	3601      	adds	r6, #1
 800e4a4:	e7d9      	b.n	800e45a <_printf_common+0x8e>
	...

0800e4a8 <_printf_i>:
 800e4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ac:	7e0f      	ldrb	r7, [r1, #24]
 800e4ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4b0:	2f78      	cmp	r7, #120	; 0x78
 800e4b2:	4691      	mov	r9, r2
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	469a      	mov	sl, r3
 800e4ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4be:	d807      	bhi.n	800e4d0 <_printf_i+0x28>
 800e4c0:	2f62      	cmp	r7, #98	; 0x62
 800e4c2:	d80a      	bhi.n	800e4da <_printf_i+0x32>
 800e4c4:	2f00      	cmp	r7, #0
 800e4c6:	f000 80d8 	beq.w	800e67a <_printf_i+0x1d2>
 800e4ca:	2f58      	cmp	r7, #88	; 0x58
 800e4cc:	f000 80a3 	beq.w	800e616 <_printf_i+0x16e>
 800e4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4d8:	e03a      	b.n	800e550 <_printf_i+0xa8>
 800e4da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4de:	2b15      	cmp	r3, #21
 800e4e0:	d8f6      	bhi.n	800e4d0 <_printf_i+0x28>
 800e4e2:	a101      	add	r1, pc, #4	; (adr r1, 800e4e8 <_printf_i+0x40>)
 800e4e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4e8:	0800e541 	.word	0x0800e541
 800e4ec:	0800e555 	.word	0x0800e555
 800e4f0:	0800e4d1 	.word	0x0800e4d1
 800e4f4:	0800e4d1 	.word	0x0800e4d1
 800e4f8:	0800e4d1 	.word	0x0800e4d1
 800e4fc:	0800e4d1 	.word	0x0800e4d1
 800e500:	0800e555 	.word	0x0800e555
 800e504:	0800e4d1 	.word	0x0800e4d1
 800e508:	0800e4d1 	.word	0x0800e4d1
 800e50c:	0800e4d1 	.word	0x0800e4d1
 800e510:	0800e4d1 	.word	0x0800e4d1
 800e514:	0800e661 	.word	0x0800e661
 800e518:	0800e585 	.word	0x0800e585
 800e51c:	0800e643 	.word	0x0800e643
 800e520:	0800e4d1 	.word	0x0800e4d1
 800e524:	0800e4d1 	.word	0x0800e4d1
 800e528:	0800e683 	.word	0x0800e683
 800e52c:	0800e4d1 	.word	0x0800e4d1
 800e530:	0800e585 	.word	0x0800e585
 800e534:	0800e4d1 	.word	0x0800e4d1
 800e538:	0800e4d1 	.word	0x0800e4d1
 800e53c:	0800e64b 	.word	0x0800e64b
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	1d1a      	adds	r2, r3, #4
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	602a      	str	r2, [r5, #0]
 800e548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e54c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e550:	2301      	movs	r3, #1
 800e552:	e0a3      	b.n	800e69c <_printf_i+0x1f4>
 800e554:	6820      	ldr	r0, [r4, #0]
 800e556:	6829      	ldr	r1, [r5, #0]
 800e558:	0606      	lsls	r6, r0, #24
 800e55a:	f101 0304 	add.w	r3, r1, #4
 800e55e:	d50a      	bpl.n	800e576 <_printf_i+0xce>
 800e560:	680e      	ldr	r6, [r1, #0]
 800e562:	602b      	str	r3, [r5, #0]
 800e564:	2e00      	cmp	r6, #0
 800e566:	da03      	bge.n	800e570 <_printf_i+0xc8>
 800e568:	232d      	movs	r3, #45	; 0x2d
 800e56a:	4276      	negs	r6, r6
 800e56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e570:	485e      	ldr	r0, [pc, #376]	; (800e6ec <_printf_i+0x244>)
 800e572:	230a      	movs	r3, #10
 800e574:	e019      	b.n	800e5aa <_printf_i+0x102>
 800e576:	680e      	ldr	r6, [r1, #0]
 800e578:	602b      	str	r3, [r5, #0]
 800e57a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e57e:	bf18      	it	ne
 800e580:	b236      	sxthne	r6, r6
 800e582:	e7ef      	b.n	800e564 <_printf_i+0xbc>
 800e584:	682b      	ldr	r3, [r5, #0]
 800e586:	6820      	ldr	r0, [r4, #0]
 800e588:	1d19      	adds	r1, r3, #4
 800e58a:	6029      	str	r1, [r5, #0]
 800e58c:	0601      	lsls	r1, r0, #24
 800e58e:	d501      	bpl.n	800e594 <_printf_i+0xec>
 800e590:	681e      	ldr	r6, [r3, #0]
 800e592:	e002      	b.n	800e59a <_printf_i+0xf2>
 800e594:	0646      	lsls	r6, r0, #25
 800e596:	d5fb      	bpl.n	800e590 <_printf_i+0xe8>
 800e598:	881e      	ldrh	r6, [r3, #0]
 800e59a:	4854      	ldr	r0, [pc, #336]	; (800e6ec <_printf_i+0x244>)
 800e59c:	2f6f      	cmp	r7, #111	; 0x6f
 800e59e:	bf0c      	ite	eq
 800e5a0:	2308      	moveq	r3, #8
 800e5a2:	230a      	movne	r3, #10
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5aa:	6865      	ldr	r5, [r4, #4]
 800e5ac:	60a5      	str	r5, [r4, #8]
 800e5ae:	2d00      	cmp	r5, #0
 800e5b0:	bfa2      	ittt	ge
 800e5b2:	6821      	ldrge	r1, [r4, #0]
 800e5b4:	f021 0104 	bicge.w	r1, r1, #4
 800e5b8:	6021      	strge	r1, [r4, #0]
 800e5ba:	b90e      	cbnz	r6, 800e5c0 <_printf_i+0x118>
 800e5bc:	2d00      	cmp	r5, #0
 800e5be:	d04d      	beq.n	800e65c <_printf_i+0x1b4>
 800e5c0:	4615      	mov	r5, r2
 800e5c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5c6:	fb03 6711 	mls	r7, r3, r1, r6
 800e5ca:	5dc7      	ldrb	r7, [r0, r7]
 800e5cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5d0:	4637      	mov	r7, r6
 800e5d2:	42bb      	cmp	r3, r7
 800e5d4:	460e      	mov	r6, r1
 800e5d6:	d9f4      	bls.n	800e5c2 <_printf_i+0x11a>
 800e5d8:	2b08      	cmp	r3, #8
 800e5da:	d10b      	bne.n	800e5f4 <_printf_i+0x14c>
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	07de      	lsls	r6, r3, #31
 800e5e0:	d508      	bpl.n	800e5f4 <_printf_i+0x14c>
 800e5e2:	6923      	ldr	r3, [r4, #16]
 800e5e4:	6861      	ldr	r1, [r4, #4]
 800e5e6:	4299      	cmp	r1, r3
 800e5e8:	bfde      	ittt	le
 800e5ea:	2330      	movle	r3, #48	; 0x30
 800e5ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e5f4:	1b52      	subs	r2, r2, r5
 800e5f6:	6122      	str	r2, [r4, #16]
 800e5f8:	f8cd a000 	str.w	sl, [sp]
 800e5fc:	464b      	mov	r3, r9
 800e5fe:	aa03      	add	r2, sp, #12
 800e600:	4621      	mov	r1, r4
 800e602:	4640      	mov	r0, r8
 800e604:	f7ff fee2 	bl	800e3cc <_printf_common>
 800e608:	3001      	adds	r0, #1
 800e60a:	d14c      	bne.n	800e6a6 <_printf_i+0x1fe>
 800e60c:	f04f 30ff 	mov.w	r0, #4294967295
 800e610:	b004      	add	sp, #16
 800e612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e616:	4835      	ldr	r0, [pc, #212]	; (800e6ec <_printf_i+0x244>)
 800e618:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e61c:	6829      	ldr	r1, [r5, #0]
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	f851 6b04 	ldr.w	r6, [r1], #4
 800e624:	6029      	str	r1, [r5, #0]
 800e626:	061d      	lsls	r5, r3, #24
 800e628:	d514      	bpl.n	800e654 <_printf_i+0x1ac>
 800e62a:	07df      	lsls	r7, r3, #31
 800e62c:	bf44      	itt	mi
 800e62e:	f043 0320 	orrmi.w	r3, r3, #32
 800e632:	6023      	strmi	r3, [r4, #0]
 800e634:	b91e      	cbnz	r6, 800e63e <_printf_i+0x196>
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	f023 0320 	bic.w	r3, r3, #32
 800e63c:	6023      	str	r3, [r4, #0]
 800e63e:	2310      	movs	r3, #16
 800e640:	e7b0      	b.n	800e5a4 <_printf_i+0xfc>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	f043 0320 	orr.w	r3, r3, #32
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	2378      	movs	r3, #120	; 0x78
 800e64c:	4828      	ldr	r0, [pc, #160]	; (800e6f0 <_printf_i+0x248>)
 800e64e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e652:	e7e3      	b.n	800e61c <_printf_i+0x174>
 800e654:	0659      	lsls	r1, r3, #25
 800e656:	bf48      	it	mi
 800e658:	b2b6      	uxthmi	r6, r6
 800e65a:	e7e6      	b.n	800e62a <_printf_i+0x182>
 800e65c:	4615      	mov	r5, r2
 800e65e:	e7bb      	b.n	800e5d8 <_printf_i+0x130>
 800e660:	682b      	ldr	r3, [r5, #0]
 800e662:	6826      	ldr	r6, [r4, #0]
 800e664:	6961      	ldr	r1, [r4, #20]
 800e666:	1d18      	adds	r0, r3, #4
 800e668:	6028      	str	r0, [r5, #0]
 800e66a:	0635      	lsls	r5, r6, #24
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	d501      	bpl.n	800e674 <_printf_i+0x1cc>
 800e670:	6019      	str	r1, [r3, #0]
 800e672:	e002      	b.n	800e67a <_printf_i+0x1d2>
 800e674:	0670      	lsls	r0, r6, #25
 800e676:	d5fb      	bpl.n	800e670 <_printf_i+0x1c8>
 800e678:	8019      	strh	r1, [r3, #0]
 800e67a:	2300      	movs	r3, #0
 800e67c:	6123      	str	r3, [r4, #16]
 800e67e:	4615      	mov	r5, r2
 800e680:	e7ba      	b.n	800e5f8 <_printf_i+0x150>
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	1d1a      	adds	r2, r3, #4
 800e686:	602a      	str	r2, [r5, #0]
 800e688:	681d      	ldr	r5, [r3, #0]
 800e68a:	6862      	ldr	r2, [r4, #4]
 800e68c:	2100      	movs	r1, #0
 800e68e:	4628      	mov	r0, r5
 800e690:	f7f1 fdbe 	bl	8000210 <memchr>
 800e694:	b108      	cbz	r0, 800e69a <_printf_i+0x1f2>
 800e696:	1b40      	subs	r0, r0, r5
 800e698:	6060      	str	r0, [r4, #4]
 800e69a:	6863      	ldr	r3, [r4, #4]
 800e69c:	6123      	str	r3, [r4, #16]
 800e69e:	2300      	movs	r3, #0
 800e6a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6a4:	e7a8      	b.n	800e5f8 <_printf_i+0x150>
 800e6a6:	6923      	ldr	r3, [r4, #16]
 800e6a8:	462a      	mov	r2, r5
 800e6aa:	4649      	mov	r1, r9
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	47d0      	blx	sl
 800e6b0:	3001      	adds	r0, #1
 800e6b2:	d0ab      	beq.n	800e60c <_printf_i+0x164>
 800e6b4:	6823      	ldr	r3, [r4, #0]
 800e6b6:	079b      	lsls	r3, r3, #30
 800e6b8:	d413      	bmi.n	800e6e2 <_printf_i+0x23a>
 800e6ba:	68e0      	ldr	r0, [r4, #12]
 800e6bc:	9b03      	ldr	r3, [sp, #12]
 800e6be:	4298      	cmp	r0, r3
 800e6c0:	bfb8      	it	lt
 800e6c2:	4618      	movlt	r0, r3
 800e6c4:	e7a4      	b.n	800e610 <_printf_i+0x168>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	4632      	mov	r2, r6
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	47d0      	blx	sl
 800e6d0:	3001      	adds	r0, #1
 800e6d2:	d09b      	beq.n	800e60c <_printf_i+0x164>
 800e6d4:	3501      	adds	r5, #1
 800e6d6:	68e3      	ldr	r3, [r4, #12]
 800e6d8:	9903      	ldr	r1, [sp, #12]
 800e6da:	1a5b      	subs	r3, r3, r1
 800e6dc:	42ab      	cmp	r3, r5
 800e6de:	dcf2      	bgt.n	800e6c6 <_printf_i+0x21e>
 800e6e0:	e7eb      	b.n	800e6ba <_printf_i+0x212>
 800e6e2:	2500      	movs	r5, #0
 800e6e4:	f104 0619 	add.w	r6, r4, #25
 800e6e8:	e7f5      	b.n	800e6d6 <_printf_i+0x22e>
 800e6ea:	bf00      	nop
 800e6ec:	08013a66 	.word	0x08013a66
 800e6f0:	08013a77 	.word	0x08013a77

0800e6f4 <_sbrk_r>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	4d06      	ldr	r5, [pc, #24]	; (800e710 <_sbrk_r+0x1c>)
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	4608      	mov	r0, r1
 800e6fe:	602b      	str	r3, [r5, #0]
 800e700:	f004 fe2c 	bl	801335c <_sbrk>
 800e704:	1c43      	adds	r3, r0, #1
 800e706:	d102      	bne.n	800e70e <_sbrk_r+0x1a>
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	b103      	cbz	r3, 800e70e <_sbrk_r+0x1a>
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	bd38      	pop	{r3, r4, r5, pc}
 800e710:	20014044 	.word	0x20014044

0800e714 <siprintf>:
 800e714:	b40e      	push	{r1, r2, r3}
 800e716:	b500      	push	{lr}
 800e718:	b09c      	sub	sp, #112	; 0x70
 800e71a:	ab1d      	add	r3, sp, #116	; 0x74
 800e71c:	9002      	str	r0, [sp, #8]
 800e71e:	9006      	str	r0, [sp, #24]
 800e720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e724:	4809      	ldr	r0, [pc, #36]	; (800e74c <siprintf+0x38>)
 800e726:	9107      	str	r1, [sp, #28]
 800e728:	9104      	str	r1, [sp, #16]
 800e72a:	4909      	ldr	r1, [pc, #36]	; (800e750 <siprintf+0x3c>)
 800e72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e730:	9105      	str	r1, [sp, #20]
 800e732:	6800      	ldr	r0, [r0, #0]
 800e734:	9301      	str	r3, [sp, #4]
 800e736:	a902      	add	r1, sp, #8
 800e738:	f001 fa8e 	bl	800fc58 <_svfiprintf_r>
 800e73c:	9b02      	ldr	r3, [sp, #8]
 800e73e:	2200      	movs	r2, #0
 800e740:	701a      	strb	r2, [r3, #0]
 800e742:	b01c      	add	sp, #112	; 0x70
 800e744:	f85d eb04 	ldr.w	lr, [sp], #4
 800e748:	b003      	add	sp, #12
 800e74a:	4770      	bx	lr
 800e74c:	20000040 	.word	0x20000040
 800e750:	ffff0208 	.word	0xffff0208

0800e754 <quorem>:
 800e754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	6903      	ldr	r3, [r0, #16]
 800e75a:	690c      	ldr	r4, [r1, #16]
 800e75c:	42a3      	cmp	r3, r4
 800e75e:	4607      	mov	r7, r0
 800e760:	f2c0 8081 	blt.w	800e866 <quorem+0x112>
 800e764:	3c01      	subs	r4, #1
 800e766:	f101 0814 	add.w	r8, r1, #20
 800e76a:	f100 0514 	add.w	r5, r0, #20
 800e76e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e77c:	3301      	adds	r3, #1
 800e77e:	429a      	cmp	r2, r3
 800e780:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e784:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e788:	fbb2 f6f3 	udiv	r6, r2, r3
 800e78c:	d331      	bcc.n	800e7f2 <quorem+0x9e>
 800e78e:	f04f 0e00 	mov.w	lr, #0
 800e792:	4640      	mov	r0, r8
 800e794:	46ac      	mov	ip, r5
 800e796:	46f2      	mov	sl, lr
 800e798:	f850 2b04 	ldr.w	r2, [r0], #4
 800e79c:	b293      	uxth	r3, r2
 800e79e:	fb06 e303 	mla	r3, r6, r3, lr
 800e7a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	ebaa 0303 	sub.w	r3, sl, r3
 800e7ac:	f8dc a000 	ldr.w	sl, [ip]
 800e7b0:	0c12      	lsrs	r2, r2, #16
 800e7b2:	fa13 f38a 	uxtah	r3, r3, sl
 800e7b6:	fb06 e202 	mla	r2, r6, r2, lr
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	9b00      	ldr	r3, [sp, #0]
 800e7be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7c2:	b292      	uxth	r2, r2
 800e7c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7cc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7d0:	4581      	cmp	r9, r0
 800e7d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7d6:	f84c 3b04 	str.w	r3, [ip], #4
 800e7da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7de:	d2db      	bcs.n	800e798 <quorem+0x44>
 800e7e0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7e4:	b92b      	cbnz	r3, 800e7f2 <quorem+0x9e>
 800e7e6:	9b01      	ldr	r3, [sp, #4]
 800e7e8:	3b04      	subs	r3, #4
 800e7ea:	429d      	cmp	r5, r3
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	d32e      	bcc.n	800e84e <quorem+0xfa>
 800e7f0:	613c      	str	r4, [r7, #16]
 800e7f2:	4638      	mov	r0, r7
 800e7f4:	f001 f8bc 	bl	800f970 <__mcmp>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	db24      	blt.n	800e846 <quorem+0xf2>
 800e7fc:	3601      	adds	r6, #1
 800e7fe:	4628      	mov	r0, r5
 800e800:	f04f 0c00 	mov.w	ip, #0
 800e804:	f858 2b04 	ldr.w	r2, [r8], #4
 800e808:	f8d0 e000 	ldr.w	lr, [r0]
 800e80c:	b293      	uxth	r3, r2
 800e80e:	ebac 0303 	sub.w	r3, ip, r3
 800e812:	0c12      	lsrs	r2, r2, #16
 800e814:	fa13 f38e 	uxtah	r3, r3, lr
 800e818:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e81c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e820:	b29b      	uxth	r3, r3
 800e822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e826:	45c1      	cmp	r9, r8
 800e828:	f840 3b04 	str.w	r3, [r0], #4
 800e82c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e830:	d2e8      	bcs.n	800e804 <quorem+0xb0>
 800e832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e83a:	b922      	cbnz	r2, 800e846 <quorem+0xf2>
 800e83c:	3b04      	subs	r3, #4
 800e83e:	429d      	cmp	r5, r3
 800e840:	461a      	mov	r2, r3
 800e842:	d30a      	bcc.n	800e85a <quorem+0x106>
 800e844:	613c      	str	r4, [r7, #16]
 800e846:	4630      	mov	r0, r6
 800e848:	b003      	add	sp, #12
 800e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84e:	6812      	ldr	r2, [r2, #0]
 800e850:	3b04      	subs	r3, #4
 800e852:	2a00      	cmp	r2, #0
 800e854:	d1cc      	bne.n	800e7f0 <quorem+0x9c>
 800e856:	3c01      	subs	r4, #1
 800e858:	e7c7      	b.n	800e7ea <quorem+0x96>
 800e85a:	6812      	ldr	r2, [r2, #0]
 800e85c:	3b04      	subs	r3, #4
 800e85e:	2a00      	cmp	r2, #0
 800e860:	d1f0      	bne.n	800e844 <quorem+0xf0>
 800e862:	3c01      	subs	r4, #1
 800e864:	e7eb      	b.n	800e83e <quorem+0xea>
 800e866:	2000      	movs	r0, #0
 800e868:	e7ee      	b.n	800e848 <quorem+0xf4>
 800e86a:	0000      	movs	r0, r0
 800e86c:	0000      	movs	r0, r0
	...

0800e870 <_dtoa_r>:
 800e870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e874:	ed2d 8b04 	vpush	{d8-d9}
 800e878:	ec57 6b10 	vmov	r6, r7, d0
 800e87c:	b093      	sub	sp, #76	; 0x4c
 800e87e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e880:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e884:	9106      	str	r1, [sp, #24]
 800e886:	ee10 aa10 	vmov	sl, s0
 800e88a:	4604      	mov	r4, r0
 800e88c:	9209      	str	r2, [sp, #36]	; 0x24
 800e88e:	930c      	str	r3, [sp, #48]	; 0x30
 800e890:	46bb      	mov	fp, r7
 800e892:	b975      	cbnz	r5, 800e8b2 <_dtoa_r+0x42>
 800e894:	2010      	movs	r0, #16
 800e896:	f7ff f9c5 	bl	800dc24 <malloc>
 800e89a:	4602      	mov	r2, r0
 800e89c:	6260      	str	r0, [r4, #36]	; 0x24
 800e89e:	b920      	cbnz	r0, 800e8aa <_dtoa_r+0x3a>
 800e8a0:	4ba7      	ldr	r3, [pc, #668]	; (800eb40 <_dtoa_r+0x2d0>)
 800e8a2:	21ea      	movs	r1, #234	; 0xea
 800e8a4:	48a7      	ldr	r0, [pc, #668]	; (800eb44 <_dtoa_r+0x2d4>)
 800e8a6:	f001 fad7 	bl	800fe58 <__assert_func>
 800e8aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8ae:	6005      	str	r5, [r0, #0]
 800e8b0:	60c5      	str	r5, [r0, #12]
 800e8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8b4:	6819      	ldr	r1, [r3, #0]
 800e8b6:	b151      	cbz	r1, 800e8ce <_dtoa_r+0x5e>
 800e8b8:	685a      	ldr	r2, [r3, #4]
 800e8ba:	604a      	str	r2, [r1, #4]
 800e8bc:	2301      	movs	r3, #1
 800e8be:	4093      	lsls	r3, r2
 800e8c0:	608b      	str	r3, [r1, #8]
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f000 fe12 	bl	800f4ec <_Bfree>
 800e8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	1e3b      	subs	r3, r7, #0
 800e8d0:	bfaa      	itet	ge
 800e8d2:	2300      	movge	r3, #0
 800e8d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e8d8:	f8c8 3000 	strge.w	r3, [r8]
 800e8dc:	4b9a      	ldr	r3, [pc, #616]	; (800eb48 <_dtoa_r+0x2d8>)
 800e8de:	bfbc      	itt	lt
 800e8e0:	2201      	movlt	r2, #1
 800e8e2:	f8c8 2000 	strlt.w	r2, [r8]
 800e8e6:	ea33 030b 	bics.w	r3, r3, fp
 800e8ea:	d11b      	bne.n	800e924 <_dtoa_r+0xb4>
 800e8ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8f8:	4333      	orrs	r3, r6
 800e8fa:	f000 8592 	beq.w	800f422 <_dtoa_r+0xbb2>
 800e8fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e900:	b963      	cbnz	r3, 800e91c <_dtoa_r+0xac>
 800e902:	4b92      	ldr	r3, [pc, #584]	; (800eb4c <_dtoa_r+0x2dc>)
 800e904:	e022      	b.n	800e94c <_dtoa_r+0xdc>
 800e906:	4b92      	ldr	r3, [pc, #584]	; (800eb50 <_dtoa_r+0x2e0>)
 800e908:	9301      	str	r3, [sp, #4]
 800e90a:	3308      	adds	r3, #8
 800e90c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	9801      	ldr	r0, [sp, #4]
 800e912:	b013      	add	sp, #76	; 0x4c
 800e914:	ecbd 8b04 	vpop	{d8-d9}
 800e918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91c:	4b8b      	ldr	r3, [pc, #556]	; (800eb4c <_dtoa_r+0x2dc>)
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	3303      	adds	r3, #3
 800e922:	e7f3      	b.n	800e90c <_dtoa_r+0x9c>
 800e924:	2200      	movs	r2, #0
 800e926:	2300      	movs	r3, #0
 800e928:	4650      	mov	r0, sl
 800e92a:	4659      	mov	r1, fp
 800e92c:	f7f2 f8e4 	bl	8000af8 <__aeabi_dcmpeq>
 800e930:	ec4b ab19 	vmov	d9, sl, fp
 800e934:	4680      	mov	r8, r0
 800e936:	b158      	cbz	r0, 800e950 <_dtoa_r+0xe0>
 800e938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e93a:	2301      	movs	r3, #1
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e940:	2b00      	cmp	r3, #0
 800e942:	f000 856b 	beq.w	800f41c <_dtoa_r+0xbac>
 800e946:	4883      	ldr	r0, [pc, #524]	; (800eb54 <_dtoa_r+0x2e4>)
 800e948:	6018      	str	r0, [r3, #0]
 800e94a:	1e43      	subs	r3, r0, #1
 800e94c:	9301      	str	r3, [sp, #4]
 800e94e:	e7df      	b.n	800e910 <_dtoa_r+0xa0>
 800e950:	ec4b ab10 	vmov	d0, sl, fp
 800e954:	aa10      	add	r2, sp, #64	; 0x40
 800e956:	a911      	add	r1, sp, #68	; 0x44
 800e958:	4620      	mov	r0, r4
 800e95a:	f001 f8af 	bl	800fabc <__d2b>
 800e95e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e962:	ee08 0a10 	vmov	s16, r0
 800e966:	2d00      	cmp	r5, #0
 800e968:	f000 8084 	beq.w	800ea74 <_dtoa_r+0x204>
 800e96c:	ee19 3a90 	vmov	r3, s19
 800e970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e974:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e978:	4656      	mov	r6, sl
 800e97a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e97e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e982:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e986:	4b74      	ldr	r3, [pc, #464]	; (800eb58 <_dtoa_r+0x2e8>)
 800e988:	2200      	movs	r2, #0
 800e98a:	4630      	mov	r0, r6
 800e98c:	4639      	mov	r1, r7
 800e98e:	f7f1 fc93 	bl	80002b8 <__aeabi_dsub>
 800e992:	a365      	add	r3, pc, #404	; (adr r3, 800eb28 <_dtoa_r+0x2b8>)
 800e994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e998:	f7f1 fe46 	bl	8000628 <__aeabi_dmul>
 800e99c:	a364      	add	r3, pc, #400	; (adr r3, 800eb30 <_dtoa_r+0x2c0>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	f7f1 fc8b 	bl	80002bc <__adddf3>
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	460f      	mov	r7, r1
 800e9ac:	f7f1 fdd2 	bl	8000554 <__aeabi_i2d>
 800e9b0:	a361      	add	r3, pc, #388	; (adr r3, 800eb38 <_dtoa_r+0x2c8>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	f7f1 fe37 	bl	8000628 <__aeabi_dmul>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4630      	mov	r0, r6
 800e9c0:	4639      	mov	r1, r7
 800e9c2:	f7f1 fc7b 	bl	80002bc <__adddf3>
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	460f      	mov	r7, r1
 800e9ca:	f7f2 f8dd 	bl	8000b88 <__aeabi_d2iz>
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	9000      	str	r0, [sp, #0]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	f7f2 f898 	bl	8000b0c <__aeabi_dcmplt>
 800e9dc:	b150      	cbz	r0, 800e9f4 <_dtoa_r+0x184>
 800e9de:	9800      	ldr	r0, [sp, #0]
 800e9e0:	f7f1 fdb8 	bl	8000554 <__aeabi_i2d>
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	463b      	mov	r3, r7
 800e9e8:	f7f2 f886 	bl	8000af8 <__aeabi_dcmpeq>
 800e9ec:	b910      	cbnz	r0, 800e9f4 <_dtoa_r+0x184>
 800e9ee:	9b00      	ldr	r3, [sp, #0]
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	9b00      	ldr	r3, [sp, #0]
 800e9f6:	2b16      	cmp	r3, #22
 800e9f8:	d85a      	bhi.n	800eab0 <_dtoa_r+0x240>
 800e9fa:	9a00      	ldr	r2, [sp, #0]
 800e9fc:	4b57      	ldr	r3, [pc, #348]	; (800eb5c <_dtoa_r+0x2ec>)
 800e9fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	ec51 0b19 	vmov	r0, r1, d9
 800ea0a:	f7f2 f87f 	bl	8000b0c <__aeabi_dcmplt>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d050      	beq.n	800eab4 <_dtoa_r+0x244>
 800ea12:	9b00      	ldr	r3, [sp, #0]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	2300      	movs	r3, #0
 800ea1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea1e:	1b5d      	subs	r5, r3, r5
 800ea20:	1e6b      	subs	r3, r5, #1
 800ea22:	9305      	str	r3, [sp, #20]
 800ea24:	bf45      	ittet	mi
 800ea26:	f1c5 0301 	rsbmi	r3, r5, #1
 800ea2a:	9304      	strmi	r3, [sp, #16]
 800ea2c:	2300      	movpl	r3, #0
 800ea2e:	2300      	movmi	r3, #0
 800ea30:	bf4c      	ite	mi
 800ea32:	9305      	strmi	r3, [sp, #20]
 800ea34:	9304      	strpl	r3, [sp, #16]
 800ea36:	9b00      	ldr	r3, [sp, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	db3d      	blt.n	800eab8 <_dtoa_r+0x248>
 800ea3c:	9b05      	ldr	r3, [sp, #20]
 800ea3e:	9a00      	ldr	r2, [sp, #0]
 800ea40:	920a      	str	r2, [sp, #40]	; 0x28
 800ea42:	4413      	add	r3, r2
 800ea44:	9305      	str	r3, [sp, #20]
 800ea46:	2300      	movs	r3, #0
 800ea48:	9307      	str	r3, [sp, #28]
 800ea4a:	9b06      	ldr	r3, [sp, #24]
 800ea4c:	2b09      	cmp	r3, #9
 800ea4e:	f200 8089 	bhi.w	800eb64 <_dtoa_r+0x2f4>
 800ea52:	2b05      	cmp	r3, #5
 800ea54:	bfc4      	itt	gt
 800ea56:	3b04      	subgt	r3, #4
 800ea58:	9306      	strgt	r3, [sp, #24]
 800ea5a:	9b06      	ldr	r3, [sp, #24]
 800ea5c:	f1a3 0302 	sub.w	r3, r3, #2
 800ea60:	bfcc      	ite	gt
 800ea62:	2500      	movgt	r5, #0
 800ea64:	2501      	movle	r5, #1
 800ea66:	2b03      	cmp	r3, #3
 800ea68:	f200 8087 	bhi.w	800eb7a <_dtoa_r+0x30a>
 800ea6c:	e8df f003 	tbb	[pc, r3]
 800ea70:	59383a2d 	.word	0x59383a2d
 800ea74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea78:	441d      	add	r5, r3
 800ea7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea7e:	2b20      	cmp	r3, #32
 800ea80:	bfc1      	itttt	gt
 800ea82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea8a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ea8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea92:	bfda      	itte	le
 800ea94:	f1c3 0320 	rsble	r3, r3, #32
 800ea98:	fa06 f003 	lslle.w	r0, r6, r3
 800ea9c:	4318      	orrgt	r0, r3
 800ea9e:	f7f1 fd49 	bl	8000534 <__aeabi_ui2d>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	4606      	mov	r6, r0
 800eaa6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eaaa:	3d01      	subs	r5, #1
 800eaac:	930e      	str	r3, [sp, #56]	; 0x38
 800eaae:	e76a      	b.n	800e986 <_dtoa_r+0x116>
 800eab0:	2301      	movs	r3, #1
 800eab2:	e7b2      	b.n	800ea1a <_dtoa_r+0x1aa>
 800eab4:	900b      	str	r0, [sp, #44]	; 0x2c
 800eab6:	e7b1      	b.n	800ea1c <_dtoa_r+0x1ac>
 800eab8:	9b04      	ldr	r3, [sp, #16]
 800eaba:	9a00      	ldr	r2, [sp, #0]
 800eabc:	1a9b      	subs	r3, r3, r2
 800eabe:	9304      	str	r3, [sp, #16]
 800eac0:	4253      	negs	r3, r2
 800eac2:	9307      	str	r3, [sp, #28]
 800eac4:	2300      	movs	r3, #0
 800eac6:	930a      	str	r3, [sp, #40]	; 0x28
 800eac8:	e7bf      	b.n	800ea4a <_dtoa_r+0x1da>
 800eaca:	2300      	movs	r3, #0
 800eacc:	9308      	str	r3, [sp, #32]
 800eace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	dc55      	bgt.n	800eb80 <_dtoa_r+0x310>
 800ead4:	2301      	movs	r3, #1
 800ead6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eada:	461a      	mov	r2, r3
 800eadc:	9209      	str	r2, [sp, #36]	; 0x24
 800eade:	e00c      	b.n	800eafa <_dtoa_r+0x28a>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e7f3      	b.n	800eacc <_dtoa_r+0x25c>
 800eae4:	2300      	movs	r3, #0
 800eae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eae8:	9308      	str	r3, [sp, #32]
 800eaea:	9b00      	ldr	r3, [sp, #0]
 800eaec:	4413      	add	r3, r2
 800eaee:	9302      	str	r3, [sp, #8]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	9303      	str	r3, [sp, #12]
 800eaf6:	bfb8      	it	lt
 800eaf8:	2301      	movlt	r3, #1
 800eafa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eafc:	2200      	movs	r2, #0
 800eafe:	6042      	str	r2, [r0, #4]
 800eb00:	2204      	movs	r2, #4
 800eb02:	f102 0614 	add.w	r6, r2, #20
 800eb06:	429e      	cmp	r6, r3
 800eb08:	6841      	ldr	r1, [r0, #4]
 800eb0a:	d93d      	bls.n	800eb88 <_dtoa_r+0x318>
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f000 fcad 	bl	800f46c <_Balloc>
 800eb12:	9001      	str	r0, [sp, #4]
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d13b      	bne.n	800eb90 <_dtoa_r+0x320>
 800eb18:	4b11      	ldr	r3, [pc, #68]	; (800eb60 <_dtoa_r+0x2f0>)
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eb20:	e6c0      	b.n	800e8a4 <_dtoa_r+0x34>
 800eb22:	2301      	movs	r3, #1
 800eb24:	e7df      	b.n	800eae6 <_dtoa_r+0x276>
 800eb26:	bf00      	nop
 800eb28:	636f4361 	.word	0x636f4361
 800eb2c:	3fd287a7 	.word	0x3fd287a7
 800eb30:	8b60c8b3 	.word	0x8b60c8b3
 800eb34:	3fc68a28 	.word	0x3fc68a28
 800eb38:	509f79fb 	.word	0x509f79fb
 800eb3c:	3fd34413 	.word	0x3fd34413
 800eb40:	08013a95 	.word	0x08013a95
 800eb44:	08013aac 	.word	0x08013aac
 800eb48:	7ff00000 	.word	0x7ff00000
 800eb4c:	08013a91 	.word	0x08013a91
 800eb50:	08013a88 	.word	0x08013a88
 800eb54:	08013a65 	.word	0x08013a65
 800eb58:	3ff80000 	.word	0x3ff80000
 800eb5c:	08013ba0 	.word	0x08013ba0
 800eb60:	08013b07 	.word	0x08013b07
 800eb64:	2501      	movs	r5, #1
 800eb66:	2300      	movs	r3, #0
 800eb68:	9306      	str	r3, [sp, #24]
 800eb6a:	9508      	str	r5, [sp, #32]
 800eb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb74:	2200      	movs	r2, #0
 800eb76:	2312      	movs	r3, #18
 800eb78:	e7b0      	b.n	800eadc <_dtoa_r+0x26c>
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	9308      	str	r3, [sp, #32]
 800eb7e:	e7f5      	b.n	800eb6c <_dtoa_r+0x2fc>
 800eb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb86:	e7b8      	b.n	800eafa <_dtoa_r+0x28a>
 800eb88:	3101      	adds	r1, #1
 800eb8a:	6041      	str	r1, [r0, #4]
 800eb8c:	0052      	lsls	r2, r2, #1
 800eb8e:	e7b8      	b.n	800eb02 <_dtoa_r+0x292>
 800eb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb92:	9a01      	ldr	r2, [sp, #4]
 800eb94:	601a      	str	r2, [r3, #0]
 800eb96:	9b03      	ldr	r3, [sp, #12]
 800eb98:	2b0e      	cmp	r3, #14
 800eb9a:	f200 809d 	bhi.w	800ecd8 <_dtoa_r+0x468>
 800eb9e:	2d00      	cmp	r5, #0
 800eba0:	f000 809a 	beq.w	800ecd8 <_dtoa_r+0x468>
 800eba4:	9b00      	ldr	r3, [sp, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dd32      	ble.n	800ec10 <_dtoa_r+0x3a0>
 800ebaa:	4ab7      	ldr	r2, [pc, #732]	; (800ee88 <_dtoa_r+0x618>)
 800ebac:	f003 030f 	and.w	r3, r3, #15
 800ebb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebb8:	9b00      	ldr	r3, [sp, #0]
 800ebba:	05d8      	lsls	r0, r3, #23
 800ebbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ebc0:	d516      	bpl.n	800ebf0 <_dtoa_r+0x380>
 800ebc2:	4bb2      	ldr	r3, [pc, #712]	; (800ee8c <_dtoa_r+0x61c>)
 800ebc4:	ec51 0b19 	vmov	r0, r1, d9
 800ebc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebcc:	f7f1 fe56 	bl	800087c <__aeabi_ddiv>
 800ebd0:	f007 070f 	and.w	r7, r7, #15
 800ebd4:	4682      	mov	sl, r0
 800ebd6:	468b      	mov	fp, r1
 800ebd8:	2503      	movs	r5, #3
 800ebda:	4eac      	ldr	r6, [pc, #688]	; (800ee8c <_dtoa_r+0x61c>)
 800ebdc:	b957      	cbnz	r7, 800ebf4 <_dtoa_r+0x384>
 800ebde:	4642      	mov	r2, r8
 800ebe0:	464b      	mov	r3, r9
 800ebe2:	4650      	mov	r0, sl
 800ebe4:	4659      	mov	r1, fp
 800ebe6:	f7f1 fe49 	bl	800087c <__aeabi_ddiv>
 800ebea:	4682      	mov	sl, r0
 800ebec:	468b      	mov	fp, r1
 800ebee:	e028      	b.n	800ec42 <_dtoa_r+0x3d2>
 800ebf0:	2502      	movs	r5, #2
 800ebf2:	e7f2      	b.n	800ebda <_dtoa_r+0x36a>
 800ebf4:	07f9      	lsls	r1, r7, #31
 800ebf6:	d508      	bpl.n	800ec0a <_dtoa_r+0x39a>
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	4649      	mov	r1, r9
 800ebfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec00:	f7f1 fd12 	bl	8000628 <__aeabi_dmul>
 800ec04:	3501      	adds	r5, #1
 800ec06:	4680      	mov	r8, r0
 800ec08:	4689      	mov	r9, r1
 800ec0a:	107f      	asrs	r7, r7, #1
 800ec0c:	3608      	adds	r6, #8
 800ec0e:	e7e5      	b.n	800ebdc <_dtoa_r+0x36c>
 800ec10:	f000 809b 	beq.w	800ed4a <_dtoa_r+0x4da>
 800ec14:	9b00      	ldr	r3, [sp, #0]
 800ec16:	4f9d      	ldr	r7, [pc, #628]	; (800ee8c <_dtoa_r+0x61c>)
 800ec18:	425e      	negs	r6, r3
 800ec1a:	4b9b      	ldr	r3, [pc, #620]	; (800ee88 <_dtoa_r+0x618>)
 800ec1c:	f006 020f 	and.w	r2, r6, #15
 800ec20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	ec51 0b19 	vmov	r0, r1, d9
 800ec2c:	f7f1 fcfc 	bl	8000628 <__aeabi_dmul>
 800ec30:	1136      	asrs	r6, r6, #4
 800ec32:	4682      	mov	sl, r0
 800ec34:	468b      	mov	fp, r1
 800ec36:	2300      	movs	r3, #0
 800ec38:	2502      	movs	r5, #2
 800ec3a:	2e00      	cmp	r6, #0
 800ec3c:	d17a      	bne.n	800ed34 <_dtoa_r+0x4c4>
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1d3      	bne.n	800ebea <_dtoa_r+0x37a>
 800ec42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f000 8082 	beq.w	800ed4e <_dtoa_r+0x4de>
 800ec4a:	4b91      	ldr	r3, [pc, #580]	; (800ee90 <_dtoa_r+0x620>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	4650      	mov	r0, sl
 800ec50:	4659      	mov	r1, fp
 800ec52:	f7f1 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d079      	beq.n	800ed4e <_dtoa_r+0x4de>
 800ec5a:	9b03      	ldr	r3, [sp, #12]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d076      	beq.n	800ed4e <_dtoa_r+0x4de>
 800ec60:	9b02      	ldr	r3, [sp, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dd36      	ble.n	800ecd4 <_dtoa_r+0x464>
 800ec66:	9b00      	ldr	r3, [sp, #0]
 800ec68:	4650      	mov	r0, sl
 800ec6a:	4659      	mov	r1, fp
 800ec6c:	1e5f      	subs	r7, r3, #1
 800ec6e:	2200      	movs	r2, #0
 800ec70:	4b88      	ldr	r3, [pc, #544]	; (800ee94 <_dtoa_r+0x624>)
 800ec72:	f7f1 fcd9 	bl	8000628 <__aeabi_dmul>
 800ec76:	9e02      	ldr	r6, [sp, #8]
 800ec78:	4682      	mov	sl, r0
 800ec7a:	468b      	mov	fp, r1
 800ec7c:	3501      	adds	r5, #1
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f7f1 fc68 	bl	8000554 <__aeabi_i2d>
 800ec84:	4652      	mov	r2, sl
 800ec86:	465b      	mov	r3, fp
 800ec88:	f7f1 fcce 	bl	8000628 <__aeabi_dmul>
 800ec8c:	4b82      	ldr	r3, [pc, #520]	; (800ee98 <_dtoa_r+0x628>)
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f7f1 fb14 	bl	80002bc <__adddf3>
 800ec94:	46d0      	mov	r8, sl
 800ec96:	46d9      	mov	r9, fp
 800ec98:	4682      	mov	sl, r0
 800ec9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ec9e:	2e00      	cmp	r6, #0
 800eca0:	d158      	bne.n	800ed54 <_dtoa_r+0x4e4>
 800eca2:	4b7e      	ldr	r3, [pc, #504]	; (800ee9c <_dtoa_r+0x62c>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	4640      	mov	r0, r8
 800eca8:	4649      	mov	r1, r9
 800ecaa:	f7f1 fb05 	bl	80002b8 <__aeabi_dsub>
 800ecae:	4652      	mov	r2, sl
 800ecb0:	465b      	mov	r3, fp
 800ecb2:	4680      	mov	r8, r0
 800ecb4:	4689      	mov	r9, r1
 800ecb6:	f7f1 ff47 	bl	8000b48 <__aeabi_dcmpgt>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	f040 8295 	bne.w	800f1ea <_dtoa_r+0x97a>
 800ecc0:	4652      	mov	r2, sl
 800ecc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecc6:	4640      	mov	r0, r8
 800ecc8:	4649      	mov	r1, r9
 800ecca:	f7f1 ff1f 	bl	8000b0c <__aeabi_dcmplt>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	f040 8289 	bne.w	800f1e6 <_dtoa_r+0x976>
 800ecd4:	ec5b ab19 	vmov	sl, fp, d9
 800ecd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f2c0 8148 	blt.w	800ef70 <_dtoa_r+0x700>
 800ece0:	9a00      	ldr	r2, [sp, #0]
 800ece2:	2a0e      	cmp	r2, #14
 800ece4:	f300 8144 	bgt.w	800ef70 <_dtoa_r+0x700>
 800ece8:	4b67      	ldr	r3, [pc, #412]	; (800ee88 <_dtoa_r+0x618>)
 800ecea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ecf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f280 80d5 	bge.w	800eea4 <_dtoa_r+0x634>
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f300 80d1 	bgt.w	800eea4 <_dtoa_r+0x634>
 800ed02:	f040 826f 	bne.w	800f1e4 <_dtoa_r+0x974>
 800ed06:	4b65      	ldr	r3, [pc, #404]	; (800ee9c <_dtoa_r+0x62c>)
 800ed08:	2200      	movs	r2, #0
 800ed0a:	4640      	mov	r0, r8
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	f7f1 fc8b 	bl	8000628 <__aeabi_dmul>
 800ed12:	4652      	mov	r2, sl
 800ed14:	465b      	mov	r3, fp
 800ed16:	f7f1 ff0d 	bl	8000b34 <__aeabi_dcmpge>
 800ed1a:	9e03      	ldr	r6, [sp, #12]
 800ed1c:	4637      	mov	r7, r6
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	f040 8245 	bne.w	800f1ae <_dtoa_r+0x93e>
 800ed24:	9d01      	ldr	r5, [sp, #4]
 800ed26:	2331      	movs	r3, #49	; 0x31
 800ed28:	f805 3b01 	strb.w	r3, [r5], #1
 800ed2c:	9b00      	ldr	r3, [sp, #0]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	e240      	b.n	800f1b6 <_dtoa_r+0x946>
 800ed34:	07f2      	lsls	r2, r6, #31
 800ed36:	d505      	bpl.n	800ed44 <_dtoa_r+0x4d4>
 800ed38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed3c:	f7f1 fc74 	bl	8000628 <__aeabi_dmul>
 800ed40:	3501      	adds	r5, #1
 800ed42:	2301      	movs	r3, #1
 800ed44:	1076      	asrs	r6, r6, #1
 800ed46:	3708      	adds	r7, #8
 800ed48:	e777      	b.n	800ec3a <_dtoa_r+0x3ca>
 800ed4a:	2502      	movs	r5, #2
 800ed4c:	e779      	b.n	800ec42 <_dtoa_r+0x3d2>
 800ed4e:	9f00      	ldr	r7, [sp, #0]
 800ed50:	9e03      	ldr	r6, [sp, #12]
 800ed52:	e794      	b.n	800ec7e <_dtoa_r+0x40e>
 800ed54:	9901      	ldr	r1, [sp, #4]
 800ed56:	4b4c      	ldr	r3, [pc, #304]	; (800ee88 <_dtoa_r+0x618>)
 800ed58:	4431      	add	r1, r6
 800ed5a:	910d      	str	r1, [sp, #52]	; 0x34
 800ed5c:	9908      	ldr	r1, [sp, #32]
 800ed5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed66:	2900      	cmp	r1, #0
 800ed68:	d043      	beq.n	800edf2 <_dtoa_r+0x582>
 800ed6a:	494d      	ldr	r1, [pc, #308]	; (800eea0 <_dtoa_r+0x630>)
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f7f1 fd85 	bl	800087c <__aeabi_ddiv>
 800ed72:	4652      	mov	r2, sl
 800ed74:	465b      	mov	r3, fp
 800ed76:	f7f1 fa9f 	bl	80002b8 <__aeabi_dsub>
 800ed7a:	9d01      	ldr	r5, [sp, #4]
 800ed7c:	4682      	mov	sl, r0
 800ed7e:	468b      	mov	fp, r1
 800ed80:	4649      	mov	r1, r9
 800ed82:	4640      	mov	r0, r8
 800ed84:	f7f1 ff00 	bl	8000b88 <__aeabi_d2iz>
 800ed88:	4606      	mov	r6, r0
 800ed8a:	f7f1 fbe3 	bl	8000554 <__aeabi_i2d>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	460b      	mov	r3, r1
 800ed92:	4640      	mov	r0, r8
 800ed94:	4649      	mov	r1, r9
 800ed96:	f7f1 fa8f 	bl	80002b8 <__aeabi_dsub>
 800ed9a:	3630      	adds	r6, #48	; 0x30
 800ed9c:	f805 6b01 	strb.w	r6, [r5], #1
 800eda0:	4652      	mov	r2, sl
 800eda2:	465b      	mov	r3, fp
 800eda4:	4680      	mov	r8, r0
 800eda6:	4689      	mov	r9, r1
 800eda8:	f7f1 feb0 	bl	8000b0c <__aeabi_dcmplt>
 800edac:	2800      	cmp	r0, #0
 800edae:	d163      	bne.n	800ee78 <_dtoa_r+0x608>
 800edb0:	4642      	mov	r2, r8
 800edb2:	464b      	mov	r3, r9
 800edb4:	4936      	ldr	r1, [pc, #216]	; (800ee90 <_dtoa_r+0x620>)
 800edb6:	2000      	movs	r0, #0
 800edb8:	f7f1 fa7e 	bl	80002b8 <__aeabi_dsub>
 800edbc:	4652      	mov	r2, sl
 800edbe:	465b      	mov	r3, fp
 800edc0:	f7f1 fea4 	bl	8000b0c <__aeabi_dcmplt>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	f040 80b5 	bne.w	800ef34 <_dtoa_r+0x6c4>
 800edca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edcc:	429d      	cmp	r5, r3
 800edce:	d081      	beq.n	800ecd4 <_dtoa_r+0x464>
 800edd0:	4b30      	ldr	r3, [pc, #192]	; (800ee94 <_dtoa_r+0x624>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	4650      	mov	r0, sl
 800edd6:	4659      	mov	r1, fp
 800edd8:	f7f1 fc26 	bl	8000628 <__aeabi_dmul>
 800eddc:	4b2d      	ldr	r3, [pc, #180]	; (800ee94 <_dtoa_r+0x624>)
 800edde:	4682      	mov	sl, r0
 800ede0:	468b      	mov	fp, r1
 800ede2:	4640      	mov	r0, r8
 800ede4:	4649      	mov	r1, r9
 800ede6:	2200      	movs	r2, #0
 800ede8:	f7f1 fc1e 	bl	8000628 <__aeabi_dmul>
 800edec:	4680      	mov	r8, r0
 800edee:	4689      	mov	r9, r1
 800edf0:	e7c6      	b.n	800ed80 <_dtoa_r+0x510>
 800edf2:	4650      	mov	r0, sl
 800edf4:	4659      	mov	r1, fp
 800edf6:	f7f1 fc17 	bl	8000628 <__aeabi_dmul>
 800edfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edfc:	9d01      	ldr	r5, [sp, #4]
 800edfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee00:	4682      	mov	sl, r0
 800ee02:	468b      	mov	fp, r1
 800ee04:	4649      	mov	r1, r9
 800ee06:	4640      	mov	r0, r8
 800ee08:	f7f1 febe 	bl	8000b88 <__aeabi_d2iz>
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	f7f1 fba1 	bl	8000554 <__aeabi_i2d>
 800ee12:	3630      	adds	r6, #48	; 0x30
 800ee14:	4602      	mov	r2, r0
 800ee16:	460b      	mov	r3, r1
 800ee18:	4640      	mov	r0, r8
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	f7f1 fa4c 	bl	80002b8 <__aeabi_dsub>
 800ee20:	f805 6b01 	strb.w	r6, [r5], #1
 800ee24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee26:	429d      	cmp	r5, r3
 800ee28:	4680      	mov	r8, r0
 800ee2a:	4689      	mov	r9, r1
 800ee2c:	f04f 0200 	mov.w	r2, #0
 800ee30:	d124      	bne.n	800ee7c <_dtoa_r+0x60c>
 800ee32:	4b1b      	ldr	r3, [pc, #108]	; (800eea0 <_dtoa_r+0x630>)
 800ee34:	4650      	mov	r0, sl
 800ee36:	4659      	mov	r1, fp
 800ee38:	f7f1 fa40 	bl	80002bc <__adddf3>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4640      	mov	r0, r8
 800ee42:	4649      	mov	r1, r9
 800ee44:	f7f1 fe80 	bl	8000b48 <__aeabi_dcmpgt>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d173      	bne.n	800ef34 <_dtoa_r+0x6c4>
 800ee4c:	4652      	mov	r2, sl
 800ee4e:	465b      	mov	r3, fp
 800ee50:	4913      	ldr	r1, [pc, #76]	; (800eea0 <_dtoa_r+0x630>)
 800ee52:	2000      	movs	r0, #0
 800ee54:	f7f1 fa30 	bl	80002b8 <__aeabi_dsub>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4640      	mov	r0, r8
 800ee5e:	4649      	mov	r1, r9
 800ee60:	f7f1 fe54 	bl	8000b0c <__aeabi_dcmplt>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	f43f af35 	beq.w	800ecd4 <_dtoa_r+0x464>
 800ee6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee6c:	1e6b      	subs	r3, r5, #1
 800ee6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee74:	2b30      	cmp	r3, #48	; 0x30
 800ee76:	d0f8      	beq.n	800ee6a <_dtoa_r+0x5fa>
 800ee78:	9700      	str	r7, [sp, #0]
 800ee7a:	e049      	b.n	800ef10 <_dtoa_r+0x6a0>
 800ee7c:	4b05      	ldr	r3, [pc, #20]	; (800ee94 <_dtoa_r+0x624>)
 800ee7e:	f7f1 fbd3 	bl	8000628 <__aeabi_dmul>
 800ee82:	4680      	mov	r8, r0
 800ee84:	4689      	mov	r9, r1
 800ee86:	e7bd      	b.n	800ee04 <_dtoa_r+0x594>
 800ee88:	08013ba0 	.word	0x08013ba0
 800ee8c:	08013b78 	.word	0x08013b78
 800ee90:	3ff00000 	.word	0x3ff00000
 800ee94:	40240000 	.word	0x40240000
 800ee98:	401c0000 	.word	0x401c0000
 800ee9c:	40140000 	.word	0x40140000
 800eea0:	3fe00000 	.word	0x3fe00000
 800eea4:	9d01      	ldr	r5, [sp, #4]
 800eea6:	4656      	mov	r6, sl
 800eea8:	465f      	mov	r7, fp
 800eeaa:	4642      	mov	r2, r8
 800eeac:	464b      	mov	r3, r9
 800eeae:	4630      	mov	r0, r6
 800eeb0:	4639      	mov	r1, r7
 800eeb2:	f7f1 fce3 	bl	800087c <__aeabi_ddiv>
 800eeb6:	f7f1 fe67 	bl	8000b88 <__aeabi_d2iz>
 800eeba:	4682      	mov	sl, r0
 800eebc:	f7f1 fb4a 	bl	8000554 <__aeabi_i2d>
 800eec0:	4642      	mov	r2, r8
 800eec2:	464b      	mov	r3, r9
 800eec4:	f7f1 fbb0 	bl	8000628 <__aeabi_dmul>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	4630      	mov	r0, r6
 800eece:	4639      	mov	r1, r7
 800eed0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eed4:	f7f1 f9f0 	bl	80002b8 <__aeabi_dsub>
 800eed8:	f805 6b01 	strb.w	r6, [r5], #1
 800eedc:	9e01      	ldr	r6, [sp, #4]
 800eede:	9f03      	ldr	r7, [sp, #12]
 800eee0:	1bae      	subs	r6, r5, r6
 800eee2:	42b7      	cmp	r7, r6
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	d135      	bne.n	800ef56 <_dtoa_r+0x6e6>
 800eeea:	f7f1 f9e7 	bl	80002bc <__adddf3>
 800eeee:	4642      	mov	r2, r8
 800eef0:	464b      	mov	r3, r9
 800eef2:	4606      	mov	r6, r0
 800eef4:	460f      	mov	r7, r1
 800eef6:	f7f1 fe27 	bl	8000b48 <__aeabi_dcmpgt>
 800eefa:	b9d0      	cbnz	r0, 800ef32 <_dtoa_r+0x6c2>
 800eefc:	4642      	mov	r2, r8
 800eefe:	464b      	mov	r3, r9
 800ef00:	4630      	mov	r0, r6
 800ef02:	4639      	mov	r1, r7
 800ef04:	f7f1 fdf8 	bl	8000af8 <__aeabi_dcmpeq>
 800ef08:	b110      	cbz	r0, 800ef10 <_dtoa_r+0x6a0>
 800ef0a:	f01a 0f01 	tst.w	sl, #1
 800ef0e:	d110      	bne.n	800ef32 <_dtoa_r+0x6c2>
 800ef10:	4620      	mov	r0, r4
 800ef12:	ee18 1a10 	vmov	r1, s16
 800ef16:	f000 fae9 	bl	800f4ec <_Bfree>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	9800      	ldr	r0, [sp, #0]
 800ef1e:	702b      	strb	r3, [r5, #0]
 800ef20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef22:	3001      	adds	r0, #1
 800ef24:	6018      	str	r0, [r3, #0]
 800ef26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f43f acf1 	beq.w	800e910 <_dtoa_r+0xa0>
 800ef2e:	601d      	str	r5, [r3, #0]
 800ef30:	e4ee      	b.n	800e910 <_dtoa_r+0xa0>
 800ef32:	9f00      	ldr	r7, [sp, #0]
 800ef34:	462b      	mov	r3, r5
 800ef36:	461d      	mov	r5, r3
 800ef38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef3c:	2a39      	cmp	r2, #57	; 0x39
 800ef3e:	d106      	bne.n	800ef4e <_dtoa_r+0x6de>
 800ef40:	9a01      	ldr	r2, [sp, #4]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d1f7      	bne.n	800ef36 <_dtoa_r+0x6c6>
 800ef46:	9901      	ldr	r1, [sp, #4]
 800ef48:	2230      	movs	r2, #48	; 0x30
 800ef4a:	3701      	adds	r7, #1
 800ef4c:	700a      	strb	r2, [r1, #0]
 800ef4e:	781a      	ldrb	r2, [r3, #0]
 800ef50:	3201      	adds	r2, #1
 800ef52:	701a      	strb	r2, [r3, #0]
 800ef54:	e790      	b.n	800ee78 <_dtoa_r+0x608>
 800ef56:	4ba6      	ldr	r3, [pc, #664]	; (800f1f0 <_dtoa_r+0x980>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f7f1 fb65 	bl	8000628 <__aeabi_dmul>
 800ef5e:	2200      	movs	r2, #0
 800ef60:	2300      	movs	r3, #0
 800ef62:	4606      	mov	r6, r0
 800ef64:	460f      	mov	r7, r1
 800ef66:	f7f1 fdc7 	bl	8000af8 <__aeabi_dcmpeq>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d09d      	beq.n	800eeaa <_dtoa_r+0x63a>
 800ef6e:	e7cf      	b.n	800ef10 <_dtoa_r+0x6a0>
 800ef70:	9a08      	ldr	r2, [sp, #32]
 800ef72:	2a00      	cmp	r2, #0
 800ef74:	f000 80d7 	beq.w	800f126 <_dtoa_r+0x8b6>
 800ef78:	9a06      	ldr	r2, [sp, #24]
 800ef7a:	2a01      	cmp	r2, #1
 800ef7c:	f300 80ba 	bgt.w	800f0f4 <_dtoa_r+0x884>
 800ef80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef82:	2a00      	cmp	r2, #0
 800ef84:	f000 80b2 	beq.w	800f0ec <_dtoa_r+0x87c>
 800ef88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef8c:	9e07      	ldr	r6, [sp, #28]
 800ef8e:	9d04      	ldr	r5, [sp, #16]
 800ef90:	9a04      	ldr	r2, [sp, #16]
 800ef92:	441a      	add	r2, r3
 800ef94:	9204      	str	r2, [sp, #16]
 800ef96:	9a05      	ldr	r2, [sp, #20]
 800ef98:	2101      	movs	r1, #1
 800ef9a:	441a      	add	r2, r3
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	9205      	str	r2, [sp, #20]
 800efa0:	f000 fb5c 	bl	800f65c <__i2b>
 800efa4:	4607      	mov	r7, r0
 800efa6:	2d00      	cmp	r5, #0
 800efa8:	dd0c      	ble.n	800efc4 <_dtoa_r+0x754>
 800efaa:	9b05      	ldr	r3, [sp, #20]
 800efac:	2b00      	cmp	r3, #0
 800efae:	dd09      	ble.n	800efc4 <_dtoa_r+0x754>
 800efb0:	42ab      	cmp	r3, r5
 800efb2:	9a04      	ldr	r2, [sp, #16]
 800efb4:	bfa8      	it	ge
 800efb6:	462b      	movge	r3, r5
 800efb8:	1ad2      	subs	r2, r2, r3
 800efba:	9204      	str	r2, [sp, #16]
 800efbc:	9a05      	ldr	r2, [sp, #20]
 800efbe:	1aed      	subs	r5, r5, r3
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	9305      	str	r3, [sp, #20]
 800efc4:	9b07      	ldr	r3, [sp, #28]
 800efc6:	b31b      	cbz	r3, 800f010 <_dtoa_r+0x7a0>
 800efc8:	9b08      	ldr	r3, [sp, #32]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 80af 	beq.w	800f12e <_dtoa_r+0x8be>
 800efd0:	2e00      	cmp	r6, #0
 800efd2:	dd13      	ble.n	800effc <_dtoa_r+0x78c>
 800efd4:	4639      	mov	r1, r7
 800efd6:	4632      	mov	r2, r6
 800efd8:	4620      	mov	r0, r4
 800efda:	f000 fbff 	bl	800f7dc <__pow5mult>
 800efde:	ee18 2a10 	vmov	r2, s16
 800efe2:	4601      	mov	r1, r0
 800efe4:	4607      	mov	r7, r0
 800efe6:	4620      	mov	r0, r4
 800efe8:	f000 fb4e 	bl	800f688 <__multiply>
 800efec:	ee18 1a10 	vmov	r1, s16
 800eff0:	4680      	mov	r8, r0
 800eff2:	4620      	mov	r0, r4
 800eff4:	f000 fa7a 	bl	800f4ec <_Bfree>
 800eff8:	ee08 8a10 	vmov	s16, r8
 800effc:	9b07      	ldr	r3, [sp, #28]
 800effe:	1b9a      	subs	r2, r3, r6
 800f000:	d006      	beq.n	800f010 <_dtoa_r+0x7a0>
 800f002:	ee18 1a10 	vmov	r1, s16
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fbe8 	bl	800f7dc <__pow5mult>
 800f00c:	ee08 0a10 	vmov	s16, r0
 800f010:	2101      	movs	r1, #1
 800f012:	4620      	mov	r0, r4
 800f014:	f000 fb22 	bl	800f65c <__i2b>
 800f018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	4606      	mov	r6, r0
 800f01e:	f340 8088 	ble.w	800f132 <_dtoa_r+0x8c2>
 800f022:	461a      	mov	r2, r3
 800f024:	4601      	mov	r1, r0
 800f026:	4620      	mov	r0, r4
 800f028:	f000 fbd8 	bl	800f7dc <__pow5mult>
 800f02c:	9b06      	ldr	r3, [sp, #24]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	4606      	mov	r6, r0
 800f032:	f340 8081 	ble.w	800f138 <_dtoa_r+0x8c8>
 800f036:	f04f 0800 	mov.w	r8, #0
 800f03a:	6933      	ldr	r3, [r6, #16]
 800f03c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f040:	6918      	ldr	r0, [r3, #16]
 800f042:	f000 fabb 	bl	800f5bc <__hi0bits>
 800f046:	f1c0 0020 	rsb	r0, r0, #32
 800f04a:	9b05      	ldr	r3, [sp, #20]
 800f04c:	4418      	add	r0, r3
 800f04e:	f010 001f 	ands.w	r0, r0, #31
 800f052:	f000 8092 	beq.w	800f17a <_dtoa_r+0x90a>
 800f056:	f1c0 0320 	rsb	r3, r0, #32
 800f05a:	2b04      	cmp	r3, #4
 800f05c:	f340 808a 	ble.w	800f174 <_dtoa_r+0x904>
 800f060:	f1c0 001c 	rsb	r0, r0, #28
 800f064:	9b04      	ldr	r3, [sp, #16]
 800f066:	4403      	add	r3, r0
 800f068:	9304      	str	r3, [sp, #16]
 800f06a:	9b05      	ldr	r3, [sp, #20]
 800f06c:	4403      	add	r3, r0
 800f06e:	4405      	add	r5, r0
 800f070:	9305      	str	r3, [sp, #20]
 800f072:	9b04      	ldr	r3, [sp, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dd07      	ble.n	800f088 <_dtoa_r+0x818>
 800f078:	ee18 1a10 	vmov	r1, s16
 800f07c:	461a      	mov	r2, r3
 800f07e:	4620      	mov	r0, r4
 800f080:	f000 fc06 	bl	800f890 <__lshift>
 800f084:	ee08 0a10 	vmov	s16, r0
 800f088:	9b05      	ldr	r3, [sp, #20]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	dd05      	ble.n	800f09a <_dtoa_r+0x82a>
 800f08e:	4631      	mov	r1, r6
 800f090:	461a      	mov	r2, r3
 800f092:	4620      	mov	r0, r4
 800f094:	f000 fbfc 	bl	800f890 <__lshift>
 800f098:	4606      	mov	r6, r0
 800f09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d06e      	beq.n	800f17e <_dtoa_r+0x90e>
 800f0a0:	ee18 0a10 	vmov	r0, s16
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	f000 fc63 	bl	800f970 <__mcmp>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	da67      	bge.n	800f17e <_dtoa_r+0x90e>
 800f0ae:	9b00      	ldr	r3, [sp, #0]
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	ee18 1a10 	vmov	r1, s16
 800f0b6:	9300      	str	r3, [sp, #0]
 800f0b8:	220a      	movs	r2, #10
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f000 fa37 	bl	800f530 <__multadd>
 800f0c2:	9b08      	ldr	r3, [sp, #32]
 800f0c4:	ee08 0a10 	vmov	s16, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 81b1 	beq.w	800f430 <_dtoa_r+0xbc0>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	220a      	movs	r2, #10
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f000 fa2b 	bl	800f530 <__multadd>
 800f0da:	9b02      	ldr	r3, [sp, #8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	4607      	mov	r7, r0
 800f0e0:	f300 808e 	bgt.w	800f200 <_dtoa_r+0x990>
 800f0e4:	9b06      	ldr	r3, [sp, #24]
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	dc51      	bgt.n	800f18e <_dtoa_r+0x91e>
 800f0ea:	e089      	b.n	800f200 <_dtoa_r+0x990>
 800f0ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f0f2:	e74b      	b.n	800ef8c <_dtoa_r+0x71c>
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	1e5e      	subs	r6, r3, #1
 800f0f8:	9b07      	ldr	r3, [sp, #28]
 800f0fa:	42b3      	cmp	r3, r6
 800f0fc:	bfbf      	itttt	lt
 800f0fe:	9b07      	ldrlt	r3, [sp, #28]
 800f100:	9607      	strlt	r6, [sp, #28]
 800f102:	1af2      	sublt	r2, r6, r3
 800f104:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f106:	bfb6      	itet	lt
 800f108:	189b      	addlt	r3, r3, r2
 800f10a:	1b9e      	subge	r6, r3, r6
 800f10c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f10e:	9b03      	ldr	r3, [sp, #12]
 800f110:	bfb8      	it	lt
 800f112:	2600      	movlt	r6, #0
 800f114:	2b00      	cmp	r3, #0
 800f116:	bfb7      	itett	lt
 800f118:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f11c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f120:	1a9d      	sublt	r5, r3, r2
 800f122:	2300      	movlt	r3, #0
 800f124:	e734      	b.n	800ef90 <_dtoa_r+0x720>
 800f126:	9e07      	ldr	r6, [sp, #28]
 800f128:	9d04      	ldr	r5, [sp, #16]
 800f12a:	9f08      	ldr	r7, [sp, #32]
 800f12c:	e73b      	b.n	800efa6 <_dtoa_r+0x736>
 800f12e:	9a07      	ldr	r2, [sp, #28]
 800f130:	e767      	b.n	800f002 <_dtoa_r+0x792>
 800f132:	9b06      	ldr	r3, [sp, #24]
 800f134:	2b01      	cmp	r3, #1
 800f136:	dc18      	bgt.n	800f16a <_dtoa_r+0x8fa>
 800f138:	f1ba 0f00 	cmp.w	sl, #0
 800f13c:	d115      	bne.n	800f16a <_dtoa_r+0x8fa>
 800f13e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f142:	b993      	cbnz	r3, 800f16a <_dtoa_r+0x8fa>
 800f144:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f148:	0d1b      	lsrs	r3, r3, #20
 800f14a:	051b      	lsls	r3, r3, #20
 800f14c:	b183      	cbz	r3, 800f170 <_dtoa_r+0x900>
 800f14e:	9b04      	ldr	r3, [sp, #16]
 800f150:	3301      	adds	r3, #1
 800f152:	9304      	str	r3, [sp, #16]
 800f154:	9b05      	ldr	r3, [sp, #20]
 800f156:	3301      	adds	r3, #1
 800f158:	9305      	str	r3, [sp, #20]
 800f15a:	f04f 0801 	mov.w	r8, #1
 800f15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f160:	2b00      	cmp	r3, #0
 800f162:	f47f af6a 	bne.w	800f03a <_dtoa_r+0x7ca>
 800f166:	2001      	movs	r0, #1
 800f168:	e76f      	b.n	800f04a <_dtoa_r+0x7da>
 800f16a:	f04f 0800 	mov.w	r8, #0
 800f16e:	e7f6      	b.n	800f15e <_dtoa_r+0x8ee>
 800f170:	4698      	mov	r8, r3
 800f172:	e7f4      	b.n	800f15e <_dtoa_r+0x8ee>
 800f174:	f43f af7d 	beq.w	800f072 <_dtoa_r+0x802>
 800f178:	4618      	mov	r0, r3
 800f17a:	301c      	adds	r0, #28
 800f17c:	e772      	b.n	800f064 <_dtoa_r+0x7f4>
 800f17e:	9b03      	ldr	r3, [sp, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	dc37      	bgt.n	800f1f4 <_dtoa_r+0x984>
 800f184:	9b06      	ldr	r3, [sp, #24]
 800f186:	2b02      	cmp	r3, #2
 800f188:	dd34      	ble.n	800f1f4 <_dtoa_r+0x984>
 800f18a:	9b03      	ldr	r3, [sp, #12]
 800f18c:	9302      	str	r3, [sp, #8]
 800f18e:	9b02      	ldr	r3, [sp, #8]
 800f190:	b96b      	cbnz	r3, 800f1ae <_dtoa_r+0x93e>
 800f192:	4631      	mov	r1, r6
 800f194:	2205      	movs	r2, #5
 800f196:	4620      	mov	r0, r4
 800f198:	f000 f9ca 	bl	800f530 <__multadd>
 800f19c:	4601      	mov	r1, r0
 800f19e:	4606      	mov	r6, r0
 800f1a0:	ee18 0a10 	vmov	r0, s16
 800f1a4:	f000 fbe4 	bl	800f970 <__mcmp>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	f73f adbb 	bgt.w	800ed24 <_dtoa_r+0x4b4>
 800f1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b0:	9d01      	ldr	r5, [sp, #4]
 800f1b2:	43db      	mvns	r3, r3
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	f04f 0800 	mov.w	r8, #0
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	4620      	mov	r0, r4
 800f1be:	f000 f995 	bl	800f4ec <_Bfree>
 800f1c2:	2f00      	cmp	r7, #0
 800f1c4:	f43f aea4 	beq.w	800ef10 <_dtoa_r+0x6a0>
 800f1c8:	f1b8 0f00 	cmp.w	r8, #0
 800f1cc:	d005      	beq.n	800f1da <_dtoa_r+0x96a>
 800f1ce:	45b8      	cmp	r8, r7
 800f1d0:	d003      	beq.n	800f1da <_dtoa_r+0x96a>
 800f1d2:	4641      	mov	r1, r8
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f000 f989 	bl	800f4ec <_Bfree>
 800f1da:	4639      	mov	r1, r7
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 f985 	bl	800f4ec <_Bfree>
 800f1e2:	e695      	b.n	800ef10 <_dtoa_r+0x6a0>
 800f1e4:	2600      	movs	r6, #0
 800f1e6:	4637      	mov	r7, r6
 800f1e8:	e7e1      	b.n	800f1ae <_dtoa_r+0x93e>
 800f1ea:	9700      	str	r7, [sp, #0]
 800f1ec:	4637      	mov	r7, r6
 800f1ee:	e599      	b.n	800ed24 <_dtoa_r+0x4b4>
 800f1f0:	40240000 	.word	0x40240000
 800f1f4:	9b08      	ldr	r3, [sp, #32]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f000 80ca 	beq.w	800f390 <_dtoa_r+0xb20>
 800f1fc:	9b03      	ldr	r3, [sp, #12]
 800f1fe:	9302      	str	r3, [sp, #8]
 800f200:	2d00      	cmp	r5, #0
 800f202:	dd05      	ble.n	800f210 <_dtoa_r+0x9a0>
 800f204:	4639      	mov	r1, r7
 800f206:	462a      	mov	r2, r5
 800f208:	4620      	mov	r0, r4
 800f20a:	f000 fb41 	bl	800f890 <__lshift>
 800f20e:	4607      	mov	r7, r0
 800f210:	f1b8 0f00 	cmp.w	r8, #0
 800f214:	d05b      	beq.n	800f2ce <_dtoa_r+0xa5e>
 800f216:	6879      	ldr	r1, [r7, #4]
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 f927 	bl	800f46c <_Balloc>
 800f21e:	4605      	mov	r5, r0
 800f220:	b928      	cbnz	r0, 800f22e <_dtoa_r+0x9be>
 800f222:	4b87      	ldr	r3, [pc, #540]	; (800f440 <_dtoa_r+0xbd0>)
 800f224:	4602      	mov	r2, r0
 800f226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f22a:	f7ff bb3b 	b.w	800e8a4 <_dtoa_r+0x34>
 800f22e:	693a      	ldr	r2, [r7, #16]
 800f230:	3202      	adds	r2, #2
 800f232:	0092      	lsls	r2, r2, #2
 800f234:	f107 010c 	add.w	r1, r7, #12
 800f238:	300c      	adds	r0, #12
 800f23a:	f7fe fcfb 	bl	800dc34 <memcpy>
 800f23e:	2201      	movs	r2, #1
 800f240:	4629      	mov	r1, r5
 800f242:	4620      	mov	r0, r4
 800f244:	f000 fb24 	bl	800f890 <__lshift>
 800f248:	9b01      	ldr	r3, [sp, #4]
 800f24a:	f103 0901 	add.w	r9, r3, #1
 800f24e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f252:	4413      	add	r3, r2
 800f254:	9305      	str	r3, [sp, #20]
 800f256:	f00a 0301 	and.w	r3, sl, #1
 800f25a:	46b8      	mov	r8, r7
 800f25c:	9304      	str	r3, [sp, #16]
 800f25e:	4607      	mov	r7, r0
 800f260:	4631      	mov	r1, r6
 800f262:	ee18 0a10 	vmov	r0, s16
 800f266:	f7ff fa75 	bl	800e754 <quorem>
 800f26a:	4641      	mov	r1, r8
 800f26c:	9002      	str	r0, [sp, #8]
 800f26e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f272:	ee18 0a10 	vmov	r0, s16
 800f276:	f000 fb7b 	bl	800f970 <__mcmp>
 800f27a:	463a      	mov	r2, r7
 800f27c:	9003      	str	r0, [sp, #12]
 800f27e:	4631      	mov	r1, r6
 800f280:	4620      	mov	r0, r4
 800f282:	f000 fb91 	bl	800f9a8 <__mdiff>
 800f286:	68c2      	ldr	r2, [r0, #12]
 800f288:	f109 3bff 	add.w	fp, r9, #4294967295
 800f28c:	4605      	mov	r5, r0
 800f28e:	bb02      	cbnz	r2, 800f2d2 <_dtoa_r+0xa62>
 800f290:	4601      	mov	r1, r0
 800f292:	ee18 0a10 	vmov	r0, s16
 800f296:	f000 fb6b 	bl	800f970 <__mcmp>
 800f29a:	4602      	mov	r2, r0
 800f29c:	4629      	mov	r1, r5
 800f29e:	4620      	mov	r0, r4
 800f2a0:	9207      	str	r2, [sp, #28]
 800f2a2:	f000 f923 	bl	800f4ec <_Bfree>
 800f2a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f2aa:	ea43 0102 	orr.w	r1, r3, r2
 800f2ae:	9b04      	ldr	r3, [sp, #16]
 800f2b0:	430b      	orrs	r3, r1
 800f2b2:	464d      	mov	r5, r9
 800f2b4:	d10f      	bne.n	800f2d6 <_dtoa_r+0xa66>
 800f2b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2ba:	d02a      	beq.n	800f312 <_dtoa_r+0xaa2>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	dd02      	ble.n	800f2c8 <_dtoa_r+0xa58>
 800f2c2:	9b02      	ldr	r3, [sp, #8]
 800f2c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f2c8:	f88b a000 	strb.w	sl, [fp]
 800f2cc:	e775      	b.n	800f1ba <_dtoa_r+0x94a>
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	e7ba      	b.n	800f248 <_dtoa_r+0x9d8>
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	e7e2      	b.n	800f29c <_dtoa_r+0xa2c>
 800f2d6:	9b03      	ldr	r3, [sp, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	db04      	blt.n	800f2e6 <_dtoa_r+0xa76>
 800f2dc:	9906      	ldr	r1, [sp, #24]
 800f2de:	430b      	orrs	r3, r1
 800f2e0:	9904      	ldr	r1, [sp, #16]
 800f2e2:	430b      	orrs	r3, r1
 800f2e4:	d122      	bne.n	800f32c <_dtoa_r+0xabc>
 800f2e6:	2a00      	cmp	r2, #0
 800f2e8:	ddee      	ble.n	800f2c8 <_dtoa_r+0xa58>
 800f2ea:	ee18 1a10 	vmov	r1, s16
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f000 facd 	bl	800f890 <__lshift>
 800f2f6:	4631      	mov	r1, r6
 800f2f8:	ee08 0a10 	vmov	s16, r0
 800f2fc:	f000 fb38 	bl	800f970 <__mcmp>
 800f300:	2800      	cmp	r0, #0
 800f302:	dc03      	bgt.n	800f30c <_dtoa_r+0xa9c>
 800f304:	d1e0      	bne.n	800f2c8 <_dtoa_r+0xa58>
 800f306:	f01a 0f01 	tst.w	sl, #1
 800f30a:	d0dd      	beq.n	800f2c8 <_dtoa_r+0xa58>
 800f30c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f310:	d1d7      	bne.n	800f2c2 <_dtoa_r+0xa52>
 800f312:	2339      	movs	r3, #57	; 0x39
 800f314:	f88b 3000 	strb.w	r3, [fp]
 800f318:	462b      	mov	r3, r5
 800f31a:	461d      	mov	r5, r3
 800f31c:	3b01      	subs	r3, #1
 800f31e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f322:	2a39      	cmp	r2, #57	; 0x39
 800f324:	d071      	beq.n	800f40a <_dtoa_r+0xb9a>
 800f326:	3201      	adds	r2, #1
 800f328:	701a      	strb	r2, [r3, #0]
 800f32a:	e746      	b.n	800f1ba <_dtoa_r+0x94a>
 800f32c:	2a00      	cmp	r2, #0
 800f32e:	dd07      	ble.n	800f340 <_dtoa_r+0xad0>
 800f330:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f334:	d0ed      	beq.n	800f312 <_dtoa_r+0xaa2>
 800f336:	f10a 0301 	add.w	r3, sl, #1
 800f33a:	f88b 3000 	strb.w	r3, [fp]
 800f33e:	e73c      	b.n	800f1ba <_dtoa_r+0x94a>
 800f340:	9b05      	ldr	r3, [sp, #20]
 800f342:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f346:	4599      	cmp	r9, r3
 800f348:	d047      	beq.n	800f3da <_dtoa_r+0xb6a>
 800f34a:	ee18 1a10 	vmov	r1, s16
 800f34e:	2300      	movs	r3, #0
 800f350:	220a      	movs	r2, #10
 800f352:	4620      	mov	r0, r4
 800f354:	f000 f8ec 	bl	800f530 <__multadd>
 800f358:	45b8      	cmp	r8, r7
 800f35a:	ee08 0a10 	vmov	s16, r0
 800f35e:	f04f 0300 	mov.w	r3, #0
 800f362:	f04f 020a 	mov.w	r2, #10
 800f366:	4641      	mov	r1, r8
 800f368:	4620      	mov	r0, r4
 800f36a:	d106      	bne.n	800f37a <_dtoa_r+0xb0a>
 800f36c:	f000 f8e0 	bl	800f530 <__multadd>
 800f370:	4680      	mov	r8, r0
 800f372:	4607      	mov	r7, r0
 800f374:	f109 0901 	add.w	r9, r9, #1
 800f378:	e772      	b.n	800f260 <_dtoa_r+0x9f0>
 800f37a:	f000 f8d9 	bl	800f530 <__multadd>
 800f37e:	4639      	mov	r1, r7
 800f380:	4680      	mov	r8, r0
 800f382:	2300      	movs	r3, #0
 800f384:	220a      	movs	r2, #10
 800f386:	4620      	mov	r0, r4
 800f388:	f000 f8d2 	bl	800f530 <__multadd>
 800f38c:	4607      	mov	r7, r0
 800f38e:	e7f1      	b.n	800f374 <_dtoa_r+0xb04>
 800f390:	9b03      	ldr	r3, [sp, #12]
 800f392:	9302      	str	r3, [sp, #8]
 800f394:	9d01      	ldr	r5, [sp, #4]
 800f396:	ee18 0a10 	vmov	r0, s16
 800f39a:	4631      	mov	r1, r6
 800f39c:	f7ff f9da 	bl	800e754 <quorem>
 800f3a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f3a4:	9b01      	ldr	r3, [sp, #4]
 800f3a6:	f805 ab01 	strb.w	sl, [r5], #1
 800f3aa:	1aea      	subs	r2, r5, r3
 800f3ac:	9b02      	ldr	r3, [sp, #8]
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	dd09      	ble.n	800f3c6 <_dtoa_r+0xb56>
 800f3b2:	ee18 1a10 	vmov	r1, s16
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	220a      	movs	r2, #10
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f000 f8b8 	bl	800f530 <__multadd>
 800f3c0:	ee08 0a10 	vmov	s16, r0
 800f3c4:	e7e7      	b.n	800f396 <_dtoa_r+0xb26>
 800f3c6:	9b02      	ldr	r3, [sp, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	bfc8      	it	gt
 800f3cc:	461d      	movgt	r5, r3
 800f3ce:	9b01      	ldr	r3, [sp, #4]
 800f3d0:	bfd8      	it	le
 800f3d2:	2501      	movle	r5, #1
 800f3d4:	441d      	add	r5, r3
 800f3d6:	f04f 0800 	mov.w	r8, #0
 800f3da:	ee18 1a10 	vmov	r1, s16
 800f3de:	2201      	movs	r2, #1
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f000 fa55 	bl	800f890 <__lshift>
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	ee08 0a10 	vmov	s16, r0
 800f3ec:	f000 fac0 	bl	800f970 <__mcmp>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	dc91      	bgt.n	800f318 <_dtoa_r+0xaa8>
 800f3f4:	d102      	bne.n	800f3fc <_dtoa_r+0xb8c>
 800f3f6:	f01a 0f01 	tst.w	sl, #1
 800f3fa:	d18d      	bne.n	800f318 <_dtoa_r+0xaa8>
 800f3fc:	462b      	mov	r3, r5
 800f3fe:	461d      	mov	r5, r3
 800f400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f404:	2a30      	cmp	r2, #48	; 0x30
 800f406:	d0fa      	beq.n	800f3fe <_dtoa_r+0xb8e>
 800f408:	e6d7      	b.n	800f1ba <_dtoa_r+0x94a>
 800f40a:	9a01      	ldr	r2, [sp, #4]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d184      	bne.n	800f31a <_dtoa_r+0xaaa>
 800f410:	9b00      	ldr	r3, [sp, #0]
 800f412:	3301      	adds	r3, #1
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	2331      	movs	r3, #49	; 0x31
 800f418:	7013      	strb	r3, [r2, #0]
 800f41a:	e6ce      	b.n	800f1ba <_dtoa_r+0x94a>
 800f41c:	4b09      	ldr	r3, [pc, #36]	; (800f444 <_dtoa_r+0xbd4>)
 800f41e:	f7ff ba95 	b.w	800e94c <_dtoa_r+0xdc>
 800f422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f424:	2b00      	cmp	r3, #0
 800f426:	f47f aa6e 	bne.w	800e906 <_dtoa_r+0x96>
 800f42a:	4b07      	ldr	r3, [pc, #28]	; (800f448 <_dtoa_r+0xbd8>)
 800f42c:	f7ff ba8e 	b.w	800e94c <_dtoa_r+0xdc>
 800f430:	9b02      	ldr	r3, [sp, #8]
 800f432:	2b00      	cmp	r3, #0
 800f434:	dcae      	bgt.n	800f394 <_dtoa_r+0xb24>
 800f436:	9b06      	ldr	r3, [sp, #24]
 800f438:	2b02      	cmp	r3, #2
 800f43a:	f73f aea8 	bgt.w	800f18e <_dtoa_r+0x91e>
 800f43e:	e7a9      	b.n	800f394 <_dtoa_r+0xb24>
 800f440:	08013b07 	.word	0x08013b07
 800f444:	08013a64 	.word	0x08013a64
 800f448:	08013a88 	.word	0x08013a88

0800f44c <_localeconv_r>:
 800f44c:	4800      	ldr	r0, [pc, #0]	; (800f450 <_localeconv_r+0x4>)
 800f44e:	4770      	bx	lr
 800f450:	20000194 	.word	0x20000194

0800f454 <__malloc_lock>:
 800f454:	4801      	ldr	r0, [pc, #4]	; (800f45c <__malloc_lock+0x8>)
 800f456:	f000 bd30 	b.w	800feba <__retarget_lock_acquire_recursive>
 800f45a:	bf00      	nop
 800f45c:	20014048 	.word	0x20014048

0800f460 <__malloc_unlock>:
 800f460:	4801      	ldr	r0, [pc, #4]	; (800f468 <__malloc_unlock+0x8>)
 800f462:	f000 bd2b 	b.w	800febc <__retarget_lock_release_recursive>
 800f466:	bf00      	nop
 800f468:	20014048 	.word	0x20014048

0800f46c <_Balloc>:
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f470:	4604      	mov	r4, r0
 800f472:	460d      	mov	r5, r1
 800f474:	b976      	cbnz	r6, 800f494 <_Balloc+0x28>
 800f476:	2010      	movs	r0, #16
 800f478:	f7fe fbd4 	bl	800dc24 <malloc>
 800f47c:	4602      	mov	r2, r0
 800f47e:	6260      	str	r0, [r4, #36]	; 0x24
 800f480:	b920      	cbnz	r0, 800f48c <_Balloc+0x20>
 800f482:	4b18      	ldr	r3, [pc, #96]	; (800f4e4 <_Balloc+0x78>)
 800f484:	4818      	ldr	r0, [pc, #96]	; (800f4e8 <_Balloc+0x7c>)
 800f486:	2166      	movs	r1, #102	; 0x66
 800f488:	f000 fce6 	bl	800fe58 <__assert_func>
 800f48c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f490:	6006      	str	r6, [r0, #0]
 800f492:	60c6      	str	r6, [r0, #12]
 800f494:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f496:	68f3      	ldr	r3, [r6, #12]
 800f498:	b183      	cbz	r3, 800f4bc <_Balloc+0x50>
 800f49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4a2:	b9b8      	cbnz	r0, 800f4d4 <_Balloc+0x68>
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	fa01 f605 	lsl.w	r6, r1, r5
 800f4aa:	1d72      	adds	r2, r6, #5
 800f4ac:	0092      	lsls	r2, r2, #2
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f000 fb60 	bl	800fb74 <_calloc_r>
 800f4b4:	b160      	cbz	r0, 800f4d0 <_Balloc+0x64>
 800f4b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4ba:	e00e      	b.n	800f4da <_Balloc+0x6e>
 800f4bc:	2221      	movs	r2, #33	; 0x21
 800f4be:	2104      	movs	r1, #4
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 fb57 	bl	800fb74 <_calloc_r>
 800f4c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4c8:	60f0      	str	r0, [r6, #12]
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1e4      	bne.n	800f49a <_Balloc+0x2e>
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	bd70      	pop	{r4, r5, r6, pc}
 800f4d4:	6802      	ldr	r2, [r0, #0]
 800f4d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4e0:	e7f7      	b.n	800f4d2 <_Balloc+0x66>
 800f4e2:	bf00      	nop
 800f4e4:	08013a95 	.word	0x08013a95
 800f4e8:	08013b18 	.word	0x08013b18

0800f4ec <_Bfree>:
 800f4ec:	b570      	push	{r4, r5, r6, lr}
 800f4ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	b976      	cbnz	r6, 800f514 <_Bfree+0x28>
 800f4f6:	2010      	movs	r0, #16
 800f4f8:	f7fe fb94 	bl	800dc24 <malloc>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	6268      	str	r0, [r5, #36]	; 0x24
 800f500:	b920      	cbnz	r0, 800f50c <_Bfree+0x20>
 800f502:	4b09      	ldr	r3, [pc, #36]	; (800f528 <_Bfree+0x3c>)
 800f504:	4809      	ldr	r0, [pc, #36]	; (800f52c <_Bfree+0x40>)
 800f506:	218a      	movs	r1, #138	; 0x8a
 800f508:	f000 fca6 	bl	800fe58 <__assert_func>
 800f50c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f510:	6006      	str	r6, [r0, #0]
 800f512:	60c6      	str	r6, [r0, #12]
 800f514:	b13c      	cbz	r4, 800f526 <_Bfree+0x3a>
 800f516:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f518:	6862      	ldr	r2, [r4, #4]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f520:	6021      	str	r1, [r4, #0]
 800f522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f526:	bd70      	pop	{r4, r5, r6, pc}
 800f528:	08013a95 	.word	0x08013a95
 800f52c:	08013b18 	.word	0x08013b18

0800f530 <__multadd>:
 800f530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f534:	690d      	ldr	r5, [r1, #16]
 800f536:	4607      	mov	r7, r0
 800f538:	460c      	mov	r4, r1
 800f53a:	461e      	mov	r6, r3
 800f53c:	f101 0c14 	add.w	ip, r1, #20
 800f540:	2000      	movs	r0, #0
 800f542:	f8dc 3000 	ldr.w	r3, [ip]
 800f546:	b299      	uxth	r1, r3
 800f548:	fb02 6101 	mla	r1, r2, r1, r6
 800f54c:	0c1e      	lsrs	r6, r3, #16
 800f54e:	0c0b      	lsrs	r3, r1, #16
 800f550:	fb02 3306 	mla	r3, r2, r6, r3
 800f554:	b289      	uxth	r1, r1
 800f556:	3001      	adds	r0, #1
 800f558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f55c:	4285      	cmp	r5, r0
 800f55e:	f84c 1b04 	str.w	r1, [ip], #4
 800f562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f566:	dcec      	bgt.n	800f542 <__multadd+0x12>
 800f568:	b30e      	cbz	r6, 800f5ae <__multadd+0x7e>
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	42ab      	cmp	r3, r5
 800f56e:	dc19      	bgt.n	800f5a4 <__multadd+0x74>
 800f570:	6861      	ldr	r1, [r4, #4]
 800f572:	4638      	mov	r0, r7
 800f574:	3101      	adds	r1, #1
 800f576:	f7ff ff79 	bl	800f46c <_Balloc>
 800f57a:	4680      	mov	r8, r0
 800f57c:	b928      	cbnz	r0, 800f58a <__multadd+0x5a>
 800f57e:	4602      	mov	r2, r0
 800f580:	4b0c      	ldr	r3, [pc, #48]	; (800f5b4 <__multadd+0x84>)
 800f582:	480d      	ldr	r0, [pc, #52]	; (800f5b8 <__multadd+0x88>)
 800f584:	21b5      	movs	r1, #181	; 0xb5
 800f586:	f000 fc67 	bl	800fe58 <__assert_func>
 800f58a:	6922      	ldr	r2, [r4, #16]
 800f58c:	3202      	adds	r2, #2
 800f58e:	f104 010c 	add.w	r1, r4, #12
 800f592:	0092      	lsls	r2, r2, #2
 800f594:	300c      	adds	r0, #12
 800f596:	f7fe fb4d 	bl	800dc34 <memcpy>
 800f59a:	4621      	mov	r1, r4
 800f59c:	4638      	mov	r0, r7
 800f59e:	f7ff ffa5 	bl	800f4ec <_Bfree>
 800f5a2:	4644      	mov	r4, r8
 800f5a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5a8:	3501      	adds	r5, #1
 800f5aa:	615e      	str	r6, [r3, #20]
 800f5ac:	6125      	str	r5, [r4, #16]
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b4:	08013b07 	.word	0x08013b07
 800f5b8:	08013b18 	.word	0x08013b18

0800f5bc <__hi0bits>:
 800f5bc:	0c03      	lsrs	r3, r0, #16
 800f5be:	041b      	lsls	r3, r3, #16
 800f5c0:	b9d3      	cbnz	r3, 800f5f8 <__hi0bits+0x3c>
 800f5c2:	0400      	lsls	r0, r0, #16
 800f5c4:	2310      	movs	r3, #16
 800f5c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5ca:	bf04      	itt	eq
 800f5cc:	0200      	lsleq	r0, r0, #8
 800f5ce:	3308      	addeq	r3, #8
 800f5d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5d4:	bf04      	itt	eq
 800f5d6:	0100      	lsleq	r0, r0, #4
 800f5d8:	3304      	addeq	r3, #4
 800f5da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f5de:	bf04      	itt	eq
 800f5e0:	0080      	lsleq	r0, r0, #2
 800f5e2:	3302      	addeq	r3, #2
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	db05      	blt.n	800f5f4 <__hi0bits+0x38>
 800f5e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f5ec:	f103 0301 	add.w	r3, r3, #1
 800f5f0:	bf08      	it	eq
 800f5f2:	2320      	moveq	r3, #32
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	4770      	bx	lr
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	e7e4      	b.n	800f5c6 <__hi0bits+0xa>

0800f5fc <__lo0bits>:
 800f5fc:	6803      	ldr	r3, [r0, #0]
 800f5fe:	f013 0207 	ands.w	r2, r3, #7
 800f602:	4601      	mov	r1, r0
 800f604:	d00b      	beq.n	800f61e <__lo0bits+0x22>
 800f606:	07da      	lsls	r2, r3, #31
 800f608:	d423      	bmi.n	800f652 <__lo0bits+0x56>
 800f60a:	0798      	lsls	r0, r3, #30
 800f60c:	bf49      	itett	mi
 800f60e:	085b      	lsrmi	r3, r3, #1
 800f610:	089b      	lsrpl	r3, r3, #2
 800f612:	2001      	movmi	r0, #1
 800f614:	600b      	strmi	r3, [r1, #0]
 800f616:	bf5c      	itt	pl
 800f618:	600b      	strpl	r3, [r1, #0]
 800f61a:	2002      	movpl	r0, #2
 800f61c:	4770      	bx	lr
 800f61e:	b298      	uxth	r0, r3
 800f620:	b9a8      	cbnz	r0, 800f64e <__lo0bits+0x52>
 800f622:	0c1b      	lsrs	r3, r3, #16
 800f624:	2010      	movs	r0, #16
 800f626:	b2da      	uxtb	r2, r3
 800f628:	b90a      	cbnz	r2, 800f62e <__lo0bits+0x32>
 800f62a:	3008      	adds	r0, #8
 800f62c:	0a1b      	lsrs	r3, r3, #8
 800f62e:	071a      	lsls	r2, r3, #28
 800f630:	bf04      	itt	eq
 800f632:	091b      	lsreq	r3, r3, #4
 800f634:	3004      	addeq	r0, #4
 800f636:	079a      	lsls	r2, r3, #30
 800f638:	bf04      	itt	eq
 800f63a:	089b      	lsreq	r3, r3, #2
 800f63c:	3002      	addeq	r0, #2
 800f63e:	07da      	lsls	r2, r3, #31
 800f640:	d403      	bmi.n	800f64a <__lo0bits+0x4e>
 800f642:	085b      	lsrs	r3, r3, #1
 800f644:	f100 0001 	add.w	r0, r0, #1
 800f648:	d005      	beq.n	800f656 <__lo0bits+0x5a>
 800f64a:	600b      	str	r3, [r1, #0]
 800f64c:	4770      	bx	lr
 800f64e:	4610      	mov	r0, r2
 800f650:	e7e9      	b.n	800f626 <__lo0bits+0x2a>
 800f652:	2000      	movs	r0, #0
 800f654:	4770      	bx	lr
 800f656:	2020      	movs	r0, #32
 800f658:	4770      	bx	lr
	...

0800f65c <__i2b>:
 800f65c:	b510      	push	{r4, lr}
 800f65e:	460c      	mov	r4, r1
 800f660:	2101      	movs	r1, #1
 800f662:	f7ff ff03 	bl	800f46c <_Balloc>
 800f666:	4602      	mov	r2, r0
 800f668:	b928      	cbnz	r0, 800f676 <__i2b+0x1a>
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <__i2b+0x24>)
 800f66c:	4805      	ldr	r0, [pc, #20]	; (800f684 <__i2b+0x28>)
 800f66e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f672:	f000 fbf1 	bl	800fe58 <__assert_func>
 800f676:	2301      	movs	r3, #1
 800f678:	6144      	str	r4, [r0, #20]
 800f67a:	6103      	str	r3, [r0, #16]
 800f67c:	bd10      	pop	{r4, pc}
 800f67e:	bf00      	nop
 800f680:	08013b07 	.word	0x08013b07
 800f684:	08013b18 	.word	0x08013b18

0800f688 <__multiply>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	4691      	mov	r9, r2
 800f68e:	690a      	ldr	r2, [r1, #16]
 800f690:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f694:	429a      	cmp	r2, r3
 800f696:	bfb8      	it	lt
 800f698:	460b      	movlt	r3, r1
 800f69a:	460c      	mov	r4, r1
 800f69c:	bfbc      	itt	lt
 800f69e:	464c      	movlt	r4, r9
 800f6a0:	4699      	movlt	r9, r3
 800f6a2:	6927      	ldr	r7, [r4, #16]
 800f6a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6a8:	68a3      	ldr	r3, [r4, #8]
 800f6aa:	6861      	ldr	r1, [r4, #4]
 800f6ac:	eb07 060a 	add.w	r6, r7, sl
 800f6b0:	42b3      	cmp	r3, r6
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	bfb8      	it	lt
 800f6b6:	3101      	addlt	r1, #1
 800f6b8:	f7ff fed8 	bl	800f46c <_Balloc>
 800f6bc:	b930      	cbnz	r0, 800f6cc <__multiply+0x44>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	4b44      	ldr	r3, [pc, #272]	; (800f7d4 <__multiply+0x14c>)
 800f6c2:	4845      	ldr	r0, [pc, #276]	; (800f7d8 <__multiply+0x150>)
 800f6c4:	f240 115d 	movw	r1, #349	; 0x15d
 800f6c8:	f000 fbc6 	bl	800fe58 <__assert_func>
 800f6cc:	f100 0514 	add.w	r5, r0, #20
 800f6d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6d4:	462b      	mov	r3, r5
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4543      	cmp	r3, r8
 800f6da:	d321      	bcc.n	800f720 <__multiply+0x98>
 800f6dc:	f104 0314 	add.w	r3, r4, #20
 800f6e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f6e4:	f109 0314 	add.w	r3, r9, #20
 800f6e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f6ec:	9202      	str	r2, [sp, #8]
 800f6ee:	1b3a      	subs	r2, r7, r4
 800f6f0:	3a15      	subs	r2, #21
 800f6f2:	f022 0203 	bic.w	r2, r2, #3
 800f6f6:	3204      	adds	r2, #4
 800f6f8:	f104 0115 	add.w	r1, r4, #21
 800f6fc:	428f      	cmp	r7, r1
 800f6fe:	bf38      	it	cc
 800f700:	2204      	movcc	r2, #4
 800f702:	9201      	str	r2, [sp, #4]
 800f704:	9a02      	ldr	r2, [sp, #8]
 800f706:	9303      	str	r3, [sp, #12]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d80c      	bhi.n	800f726 <__multiply+0x9e>
 800f70c:	2e00      	cmp	r6, #0
 800f70e:	dd03      	ble.n	800f718 <__multiply+0x90>
 800f710:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f714:	2b00      	cmp	r3, #0
 800f716:	d05a      	beq.n	800f7ce <__multiply+0x146>
 800f718:	6106      	str	r6, [r0, #16]
 800f71a:	b005      	add	sp, #20
 800f71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f720:	f843 2b04 	str.w	r2, [r3], #4
 800f724:	e7d8      	b.n	800f6d8 <__multiply+0x50>
 800f726:	f8b3 a000 	ldrh.w	sl, [r3]
 800f72a:	f1ba 0f00 	cmp.w	sl, #0
 800f72e:	d024      	beq.n	800f77a <__multiply+0xf2>
 800f730:	f104 0e14 	add.w	lr, r4, #20
 800f734:	46a9      	mov	r9, r5
 800f736:	f04f 0c00 	mov.w	ip, #0
 800f73a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f73e:	f8d9 1000 	ldr.w	r1, [r9]
 800f742:	fa1f fb82 	uxth.w	fp, r2
 800f746:	b289      	uxth	r1, r1
 800f748:	fb0a 110b 	mla	r1, sl, fp, r1
 800f74c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f750:	f8d9 2000 	ldr.w	r2, [r9]
 800f754:	4461      	add	r1, ip
 800f756:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f75a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f75e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f762:	b289      	uxth	r1, r1
 800f764:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f768:	4577      	cmp	r7, lr
 800f76a:	f849 1b04 	str.w	r1, [r9], #4
 800f76e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f772:	d8e2      	bhi.n	800f73a <__multiply+0xb2>
 800f774:	9a01      	ldr	r2, [sp, #4]
 800f776:	f845 c002 	str.w	ip, [r5, r2]
 800f77a:	9a03      	ldr	r2, [sp, #12]
 800f77c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f780:	3304      	adds	r3, #4
 800f782:	f1b9 0f00 	cmp.w	r9, #0
 800f786:	d020      	beq.n	800f7ca <__multiply+0x142>
 800f788:	6829      	ldr	r1, [r5, #0]
 800f78a:	f104 0c14 	add.w	ip, r4, #20
 800f78e:	46ae      	mov	lr, r5
 800f790:	f04f 0a00 	mov.w	sl, #0
 800f794:	f8bc b000 	ldrh.w	fp, [ip]
 800f798:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f79c:	fb09 220b 	mla	r2, r9, fp, r2
 800f7a0:	4492      	add	sl, r2
 800f7a2:	b289      	uxth	r1, r1
 800f7a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f7a8:	f84e 1b04 	str.w	r1, [lr], #4
 800f7ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7b0:	f8be 1000 	ldrh.w	r1, [lr]
 800f7b4:	0c12      	lsrs	r2, r2, #16
 800f7b6:	fb09 1102 	mla	r1, r9, r2, r1
 800f7ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f7be:	4567      	cmp	r7, ip
 800f7c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7c4:	d8e6      	bhi.n	800f794 <__multiply+0x10c>
 800f7c6:	9a01      	ldr	r2, [sp, #4]
 800f7c8:	50a9      	str	r1, [r5, r2]
 800f7ca:	3504      	adds	r5, #4
 800f7cc:	e79a      	b.n	800f704 <__multiply+0x7c>
 800f7ce:	3e01      	subs	r6, #1
 800f7d0:	e79c      	b.n	800f70c <__multiply+0x84>
 800f7d2:	bf00      	nop
 800f7d4:	08013b07 	.word	0x08013b07
 800f7d8:	08013b18 	.word	0x08013b18

0800f7dc <__pow5mult>:
 800f7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e0:	4615      	mov	r5, r2
 800f7e2:	f012 0203 	ands.w	r2, r2, #3
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	460f      	mov	r7, r1
 800f7ea:	d007      	beq.n	800f7fc <__pow5mult+0x20>
 800f7ec:	4c25      	ldr	r4, [pc, #148]	; (800f884 <__pow5mult+0xa8>)
 800f7ee:	3a01      	subs	r2, #1
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f7f6:	f7ff fe9b 	bl	800f530 <__multadd>
 800f7fa:	4607      	mov	r7, r0
 800f7fc:	10ad      	asrs	r5, r5, #2
 800f7fe:	d03d      	beq.n	800f87c <__pow5mult+0xa0>
 800f800:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f802:	b97c      	cbnz	r4, 800f824 <__pow5mult+0x48>
 800f804:	2010      	movs	r0, #16
 800f806:	f7fe fa0d 	bl	800dc24 <malloc>
 800f80a:	4602      	mov	r2, r0
 800f80c:	6270      	str	r0, [r6, #36]	; 0x24
 800f80e:	b928      	cbnz	r0, 800f81c <__pow5mult+0x40>
 800f810:	4b1d      	ldr	r3, [pc, #116]	; (800f888 <__pow5mult+0xac>)
 800f812:	481e      	ldr	r0, [pc, #120]	; (800f88c <__pow5mult+0xb0>)
 800f814:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f818:	f000 fb1e 	bl	800fe58 <__assert_func>
 800f81c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f820:	6004      	str	r4, [r0, #0]
 800f822:	60c4      	str	r4, [r0, #12]
 800f824:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f82c:	b94c      	cbnz	r4, 800f842 <__pow5mult+0x66>
 800f82e:	f240 2171 	movw	r1, #625	; 0x271
 800f832:	4630      	mov	r0, r6
 800f834:	f7ff ff12 	bl	800f65c <__i2b>
 800f838:	2300      	movs	r3, #0
 800f83a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f83e:	4604      	mov	r4, r0
 800f840:	6003      	str	r3, [r0, #0]
 800f842:	f04f 0900 	mov.w	r9, #0
 800f846:	07eb      	lsls	r3, r5, #31
 800f848:	d50a      	bpl.n	800f860 <__pow5mult+0x84>
 800f84a:	4639      	mov	r1, r7
 800f84c:	4622      	mov	r2, r4
 800f84e:	4630      	mov	r0, r6
 800f850:	f7ff ff1a 	bl	800f688 <__multiply>
 800f854:	4639      	mov	r1, r7
 800f856:	4680      	mov	r8, r0
 800f858:	4630      	mov	r0, r6
 800f85a:	f7ff fe47 	bl	800f4ec <_Bfree>
 800f85e:	4647      	mov	r7, r8
 800f860:	106d      	asrs	r5, r5, #1
 800f862:	d00b      	beq.n	800f87c <__pow5mult+0xa0>
 800f864:	6820      	ldr	r0, [r4, #0]
 800f866:	b938      	cbnz	r0, 800f878 <__pow5mult+0x9c>
 800f868:	4622      	mov	r2, r4
 800f86a:	4621      	mov	r1, r4
 800f86c:	4630      	mov	r0, r6
 800f86e:	f7ff ff0b 	bl	800f688 <__multiply>
 800f872:	6020      	str	r0, [r4, #0]
 800f874:	f8c0 9000 	str.w	r9, [r0]
 800f878:	4604      	mov	r4, r0
 800f87a:	e7e4      	b.n	800f846 <__pow5mult+0x6a>
 800f87c:	4638      	mov	r0, r7
 800f87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f882:	bf00      	nop
 800f884:	08013c68 	.word	0x08013c68
 800f888:	08013a95 	.word	0x08013a95
 800f88c:	08013b18 	.word	0x08013b18

0800f890 <__lshift>:
 800f890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	460c      	mov	r4, r1
 800f896:	6849      	ldr	r1, [r1, #4]
 800f898:	6923      	ldr	r3, [r4, #16]
 800f89a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f89e:	68a3      	ldr	r3, [r4, #8]
 800f8a0:	4607      	mov	r7, r0
 800f8a2:	4691      	mov	r9, r2
 800f8a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8a8:	f108 0601 	add.w	r6, r8, #1
 800f8ac:	42b3      	cmp	r3, r6
 800f8ae:	db0b      	blt.n	800f8c8 <__lshift+0x38>
 800f8b0:	4638      	mov	r0, r7
 800f8b2:	f7ff fddb 	bl	800f46c <_Balloc>
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	b948      	cbnz	r0, 800f8ce <__lshift+0x3e>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	4b2a      	ldr	r3, [pc, #168]	; (800f968 <__lshift+0xd8>)
 800f8be:	482b      	ldr	r0, [pc, #172]	; (800f96c <__lshift+0xdc>)
 800f8c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8c4:	f000 fac8 	bl	800fe58 <__assert_func>
 800f8c8:	3101      	adds	r1, #1
 800f8ca:	005b      	lsls	r3, r3, #1
 800f8cc:	e7ee      	b.n	800f8ac <__lshift+0x1c>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f100 0114 	add.w	r1, r0, #20
 800f8d4:	f100 0210 	add.w	r2, r0, #16
 800f8d8:	4618      	mov	r0, r3
 800f8da:	4553      	cmp	r3, sl
 800f8dc:	db37      	blt.n	800f94e <__lshift+0xbe>
 800f8de:	6920      	ldr	r0, [r4, #16]
 800f8e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8e4:	f104 0314 	add.w	r3, r4, #20
 800f8e8:	f019 091f 	ands.w	r9, r9, #31
 800f8ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f8f4:	d02f      	beq.n	800f956 <__lshift+0xc6>
 800f8f6:	f1c9 0e20 	rsb	lr, r9, #32
 800f8fa:	468a      	mov	sl, r1
 800f8fc:	f04f 0c00 	mov.w	ip, #0
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	fa02 f209 	lsl.w	r2, r2, r9
 800f906:	ea42 020c 	orr.w	r2, r2, ip
 800f90a:	f84a 2b04 	str.w	r2, [sl], #4
 800f90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f912:	4298      	cmp	r0, r3
 800f914:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f918:	d8f2      	bhi.n	800f900 <__lshift+0x70>
 800f91a:	1b03      	subs	r3, r0, r4
 800f91c:	3b15      	subs	r3, #21
 800f91e:	f023 0303 	bic.w	r3, r3, #3
 800f922:	3304      	adds	r3, #4
 800f924:	f104 0215 	add.w	r2, r4, #21
 800f928:	4290      	cmp	r0, r2
 800f92a:	bf38      	it	cc
 800f92c:	2304      	movcc	r3, #4
 800f92e:	f841 c003 	str.w	ip, [r1, r3]
 800f932:	f1bc 0f00 	cmp.w	ip, #0
 800f936:	d001      	beq.n	800f93c <__lshift+0xac>
 800f938:	f108 0602 	add.w	r6, r8, #2
 800f93c:	3e01      	subs	r6, #1
 800f93e:	4638      	mov	r0, r7
 800f940:	612e      	str	r6, [r5, #16]
 800f942:	4621      	mov	r1, r4
 800f944:	f7ff fdd2 	bl	800f4ec <_Bfree>
 800f948:	4628      	mov	r0, r5
 800f94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f952:	3301      	adds	r3, #1
 800f954:	e7c1      	b.n	800f8da <__lshift+0x4a>
 800f956:	3904      	subs	r1, #4
 800f958:	f853 2b04 	ldr.w	r2, [r3], #4
 800f95c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f960:	4298      	cmp	r0, r3
 800f962:	d8f9      	bhi.n	800f958 <__lshift+0xc8>
 800f964:	e7ea      	b.n	800f93c <__lshift+0xac>
 800f966:	bf00      	nop
 800f968:	08013b07 	.word	0x08013b07
 800f96c:	08013b18 	.word	0x08013b18

0800f970 <__mcmp>:
 800f970:	b530      	push	{r4, r5, lr}
 800f972:	6902      	ldr	r2, [r0, #16]
 800f974:	690c      	ldr	r4, [r1, #16]
 800f976:	1b12      	subs	r2, r2, r4
 800f978:	d10e      	bne.n	800f998 <__mcmp+0x28>
 800f97a:	f100 0314 	add.w	r3, r0, #20
 800f97e:	3114      	adds	r1, #20
 800f980:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f984:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f988:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f98c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f990:	42a5      	cmp	r5, r4
 800f992:	d003      	beq.n	800f99c <__mcmp+0x2c>
 800f994:	d305      	bcc.n	800f9a2 <__mcmp+0x32>
 800f996:	2201      	movs	r2, #1
 800f998:	4610      	mov	r0, r2
 800f99a:	bd30      	pop	{r4, r5, pc}
 800f99c:	4283      	cmp	r3, r0
 800f99e:	d3f3      	bcc.n	800f988 <__mcmp+0x18>
 800f9a0:	e7fa      	b.n	800f998 <__mcmp+0x28>
 800f9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a6:	e7f7      	b.n	800f998 <__mcmp+0x28>

0800f9a8 <__mdiff>:
 800f9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	460c      	mov	r4, r1
 800f9ae:	4606      	mov	r6, r0
 800f9b0:	4611      	mov	r1, r2
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	4690      	mov	r8, r2
 800f9b6:	f7ff ffdb 	bl	800f970 <__mcmp>
 800f9ba:	1e05      	subs	r5, r0, #0
 800f9bc:	d110      	bne.n	800f9e0 <__mdiff+0x38>
 800f9be:	4629      	mov	r1, r5
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	f7ff fd53 	bl	800f46c <_Balloc>
 800f9c6:	b930      	cbnz	r0, 800f9d6 <__mdiff+0x2e>
 800f9c8:	4b3a      	ldr	r3, [pc, #232]	; (800fab4 <__mdiff+0x10c>)
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	f240 2132 	movw	r1, #562	; 0x232
 800f9d0:	4839      	ldr	r0, [pc, #228]	; (800fab8 <__mdiff+0x110>)
 800f9d2:	f000 fa41 	bl	800fe58 <__assert_func>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e0:	bfa4      	itt	ge
 800f9e2:	4643      	movge	r3, r8
 800f9e4:	46a0      	movge	r8, r4
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9ec:	bfa6      	itte	ge
 800f9ee:	461c      	movge	r4, r3
 800f9f0:	2500      	movge	r5, #0
 800f9f2:	2501      	movlt	r5, #1
 800f9f4:	f7ff fd3a 	bl	800f46c <_Balloc>
 800f9f8:	b920      	cbnz	r0, 800fa04 <__mdiff+0x5c>
 800f9fa:	4b2e      	ldr	r3, [pc, #184]	; (800fab4 <__mdiff+0x10c>)
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa02:	e7e5      	b.n	800f9d0 <__mdiff+0x28>
 800fa04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa08:	6926      	ldr	r6, [r4, #16]
 800fa0a:	60c5      	str	r5, [r0, #12]
 800fa0c:	f104 0914 	add.w	r9, r4, #20
 800fa10:	f108 0514 	add.w	r5, r8, #20
 800fa14:	f100 0e14 	add.w	lr, r0, #20
 800fa18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa20:	f108 0210 	add.w	r2, r8, #16
 800fa24:	46f2      	mov	sl, lr
 800fa26:	2100      	movs	r1, #0
 800fa28:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa30:	fa1f f883 	uxth.w	r8, r3
 800fa34:	fa11 f18b 	uxtah	r1, r1, fp
 800fa38:	0c1b      	lsrs	r3, r3, #16
 800fa3a:	eba1 0808 	sub.w	r8, r1, r8
 800fa3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa46:	fa1f f888 	uxth.w	r8, r8
 800fa4a:	1419      	asrs	r1, r3, #16
 800fa4c:	454e      	cmp	r6, r9
 800fa4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa52:	f84a 3b04 	str.w	r3, [sl], #4
 800fa56:	d8e7      	bhi.n	800fa28 <__mdiff+0x80>
 800fa58:	1b33      	subs	r3, r6, r4
 800fa5a:	3b15      	subs	r3, #21
 800fa5c:	f023 0303 	bic.w	r3, r3, #3
 800fa60:	3304      	adds	r3, #4
 800fa62:	3415      	adds	r4, #21
 800fa64:	42a6      	cmp	r6, r4
 800fa66:	bf38      	it	cc
 800fa68:	2304      	movcc	r3, #4
 800fa6a:	441d      	add	r5, r3
 800fa6c:	4473      	add	r3, lr
 800fa6e:	469e      	mov	lr, r3
 800fa70:	462e      	mov	r6, r5
 800fa72:	4566      	cmp	r6, ip
 800fa74:	d30e      	bcc.n	800fa94 <__mdiff+0xec>
 800fa76:	f10c 0203 	add.w	r2, ip, #3
 800fa7a:	1b52      	subs	r2, r2, r5
 800fa7c:	f022 0203 	bic.w	r2, r2, #3
 800fa80:	3d03      	subs	r5, #3
 800fa82:	45ac      	cmp	ip, r5
 800fa84:	bf38      	it	cc
 800fa86:	2200      	movcc	r2, #0
 800fa88:	441a      	add	r2, r3
 800fa8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fa8e:	b17b      	cbz	r3, 800fab0 <__mdiff+0x108>
 800fa90:	6107      	str	r7, [r0, #16]
 800fa92:	e7a3      	b.n	800f9dc <__mdiff+0x34>
 800fa94:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa98:	fa11 f288 	uxtah	r2, r1, r8
 800fa9c:	1414      	asrs	r4, r2, #16
 800fa9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800faa2:	b292      	uxth	r2, r2
 800faa4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800faa8:	f84e 2b04 	str.w	r2, [lr], #4
 800faac:	1421      	asrs	r1, r4, #16
 800faae:	e7e0      	b.n	800fa72 <__mdiff+0xca>
 800fab0:	3f01      	subs	r7, #1
 800fab2:	e7ea      	b.n	800fa8a <__mdiff+0xe2>
 800fab4:	08013b07 	.word	0x08013b07
 800fab8:	08013b18 	.word	0x08013b18

0800fabc <__d2b>:
 800fabc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fac0:	4689      	mov	r9, r1
 800fac2:	2101      	movs	r1, #1
 800fac4:	ec57 6b10 	vmov	r6, r7, d0
 800fac8:	4690      	mov	r8, r2
 800faca:	f7ff fccf 	bl	800f46c <_Balloc>
 800face:	4604      	mov	r4, r0
 800fad0:	b930      	cbnz	r0, 800fae0 <__d2b+0x24>
 800fad2:	4602      	mov	r2, r0
 800fad4:	4b25      	ldr	r3, [pc, #148]	; (800fb6c <__d2b+0xb0>)
 800fad6:	4826      	ldr	r0, [pc, #152]	; (800fb70 <__d2b+0xb4>)
 800fad8:	f240 310a 	movw	r1, #778	; 0x30a
 800fadc:	f000 f9bc 	bl	800fe58 <__assert_func>
 800fae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fae8:	bb35      	cbnz	r5, 800fb38 <__d2b+0x7c>
 800faea:	2e00      	cmp	r6, #0
 800faec:	9301      	str	r3, [sp, #4]
 800faee:	d028      	beq.n	800fb42 <__d2b+0x86>
 800faf0:	4668      	mov	r0, sp
 800faf2:	9600      	str	r6, [sp, #0]
 800faf4:	f7ff fd82 	bl	800f5fc <__lo0bits>
 800faf8:	9900      	ldr	r1, [sp, #0]
 800fafa:	b300      	cbz	r0, 800fb3e <__d2b+0x82>
 800fafc:	9a01      	ldr	r2, [sp, #4]
 800fafe:	f1c0 0320 	rsb	r3, r0, #32
 800fb02:	fa02 f303 	lsl.w	r3, r2, r3
 800fb06:	430b      	orrs	r3, r1
 800fb08:	40c2      	lsrs	r2, r0
 800fb0a:	6163      	str	r3, [r4, #20]
 800fb0c:	9201      	str	r2, [sp, #4]
 800fb0e:	9b01      	ldr	r3, [sp, #4]
 800fb10:	61a3      	str	r3, [r4, #24]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	bf14      	ite	ne
 800fb16:	2202      	movne	r2, #2
 800fb18:	2201      	moveq	r2, #1
 800fb1a:	6122      	str	r2, [r4, #16]
 800fb1c:	b1d5      	cbz	r5, 800fb54 <__d2b+0x98>
 800fb1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fb22:	4405      	add	r5, r0
 800fb24:	f8c9 5000 	str.w	r5, [r9]
 800fb28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb2c:	f8c8 0000 	str.w	r0, [r8]
 800fb30:	4620      	mov	r0, r4
 800fb32:	b003      	add	sp, #12
 800fb34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb3c:	e7d5      	b.n	800faea <__d2b+0x2e>
 800fb3e:	6161      	str	r1, [r4, #20]
 800fb40:	e7e5      	b.n	800fb0e <__d2b+0x52>
 800fb42:	a801      	add	r0, sp, #4
 800fb44:	f7ff fd5a 	bl	800f5fc <__lo0bits>
 800fb48:	9b01      	ldr	r3, [sp, #4]
 800fb4a:	6163      	str	r3, [r4, #20]
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	6122      	str	r2, [r4, #16]
 800fb50:	3020      	adds	r0, #32
 800fb52:	e7e3      	b.n	800fb1c <__d2b+0x60>
 800fb54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb5c:	f8c9 0000 	str.w	r0, [r9]
 800fb60:	6918      	ldr	r0, [r3, #16]
 800fb62:	f7ff fd2b 	bl	800f5bc <__hi0bits>
 800fb66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb6a:	e7df      	b.n	800fb2c <__d2b+0x70>
 800fb6c:	08013b07 	.word	0x08013b07
 800fb70:	08013b18 	.word	0x08013b18

0800fb74 <_calloc_r>:
 800fb74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb76:	fba1 2402 	umull	r2, r4, r1, r2
 800fb7a:	b94c      	cbnz	r4, 800fb90 <_calloc_r+0x1c>
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	9201      	str	r2, [sp, #4]
 800fb80:	f7fe f8da 	bl	800dd38 <_malloc_r>
 800fb84:	9a01      	ldr	r2, [sp, #4]
 800fb86:	4605      	mov	r5, r0
 800fb88:	b930      	cbnz	r0, 800fb98 <_calloc_r+0x24>
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	b003      	add	sp, #12
 800fb8e:	bd30      	pop	{r4, r5, pc}
 800fb90:	220c      	movs	r2, #12
 800fb92:	6002      	str	r2, [r0, #0]
 800fb94:	2500      	movs	r5, #0
 800fb96:	e7f8      	b.n	800fb8a <_calloc_r+0x16>
 800fb98:	4621      	mov	r1, r4
 800fb9a:	f7fe f859 	bl	800dc50 <memset>
 800fb9e:	e7f4      	b.n	800fb8a <_calloc_r+0x16>

0800fba0 <__ssputs_r>:
 800fba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba4:	688e      	ldr	r6, [r1, #8]
 800fba6:	429e      	cmp	r6, r3
 800fba8:	4682      	mov	sl, r0
 800fbaa:	460c      	mov	r4, r1
 800fbac:	4690      	mov	r8, r2
 800fbae:	461f      	mov	r7, r3
 800fbb0:	d838      	bhi.n	800fc24 <__ssputs_r+0x84>
 800fbb2:	898a      	ldrh	r2, [r1, #12]
 800fbb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbb8:	d032      	beq.n	800fc20 <__ssputs_r+0x80>
 800fbba:	6825      	ldr	r5, [r4, #0]
 800fbbc:	6909      	ldr	r1, [r1, #16]
 800fbbe:	eba5 0901 	sub.w	r9, r5, r1
 800fbc2:	6965      	ldr	r5, [r4, #20]
 800fbc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbcc:	3301      	adds	r3, #1
 800fbce:	444b      	add	r3, r9
 800fbd0:	106d      	asrs	r5, r5, #1
 800fbd2:	429d      	cmp	r5, r3
 800fbd4:	bf38      	it	cc
 800fbd6:	461d      	movcc	r5, r3
 800fbd8:	0553      	lsls	r3, r2, #21
 800fbda:	d531      	bpl.n	800fc40 <__ssputs_r+0xa0>
 800fbdc:	4629      	mov	r1, r5
 800fbde:	f7fe f8ab 	bl	800dd38 <_malloc_r>
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	b950      	cbnz	r0, 800fbfc <__ssputs_r+0x5c>
 800fbe6:	230c      	movs	r3, #12
 800fbe8:	f8ca 3000 	str.w	r3, [sl]
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf2:	81a3      	strh	r3, [r4, #12]
 800fbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfc:	6921      	ldr	r1, [r4, #16]
 800fbfe:	464a      	mov	r2, r9
 800fc00:	f7fe f818 	bl	800dc34 <memcpy>
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc0e:	81a3      	strh	r3, [r4, #12]
 800fc10:	6126      	str	r6, [r4, #16]
 800fc12:	6165      	str	r5, [r4, #20]
 800fc14:	444e      	add	r6, r9
 800fc16:	eba5 0509 	sub.w	r5, r5, r9
 800fc1a:	6026      	str	r6, [r4, #0]
 800fc1c:	60a5      	str	r5, [r4, #8]
 800fc1e:	463e      	mov	r6, r7
 800fc20:	42be      	cmp	r6, r7
 800fc22:	d900      	bls.n	800fc26 <__ssputs_r+0x86>
 800fc24:	463e      	mov	r6, r7
 800fc26:	6820      	ldr	r0, [r4, #0]
 800fc28:	4632      	mov	r2, r6
 800fc2a:	4641      	mov	r1, r8
 800fc2c:	f000 f959 	bl	800fee2 <memmove>
 800fc30:	68a3      	ldr	r3, [r4, #8]
 800fc32:	1b9b      	subs	r3, r3, r6
 800fc34:	60a3      	str	r3, [r4, #8]
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	4433      	add	r3, r6
 800fc3a:	6023      	str	r3, [r4, #0]
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	e7db      	b.n	800fbf8 <__ssputs_r+0x58>
 800fc40:	462a      	mov	r2, r5
 800fc42:	f000 f968 	bl	800ff16 <_realloc_r>
 800fc46:	4606      	mov	r6, r0
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d1e1      	bne.n	800fc10 <__ssputs_r+0x70>
 800fc4c:	6921      	ldr	r1, [r4, #16]
 800fc4e:	4650      	mov	r0, sl
 800fc50:	f7fe f806 	bl	800dc60 <_free_r>
 800fc54:	e7c7      	b.n	800fbe6 <__ssputs_r+0x46>
	...

0800fc58 <_svfiprintf_r>:
 800fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5c:	4698      	mov	r8, r3
 800fc5e:	898b      	ldrh	r3, [r1, #12]
 800fc60:	061b      	lsls	r3, r3, #24
 800fc62:	b09d      	sub	sp, #116	; 0x74
 800fc64:	4607      	mov	r7, r0
 800fc66:	460d      	mov	r5, r1
 800fc68:	4614      	mov	r4, r2
 800fc6a:	d50e      	bpl.n	800fc8a <_svfiprintf_r+0x32>
 800fc6c:	690b      	ldr	r3, [r1, #16]
 800fc6e:	b963      	cbnz	r3, 800fc8a <_svfiprintf_r+0x32>
 800fc70:	2140      	movs	r1, #64	; 0x40
 800fc72:	f7fe f861 	bl	800dd38 <_malloc_r>
 800fc76:	6028      	str	r0, [r5, #0]
 800fc78:	6128      	str	r0, [r5, #16]
 800fc7a:	b920      	cbnz	r0, 800fc86 <_svfiprintf_r+0x2e>
 800fc7c:	230c      	movs	r3, #12
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	f04f 30ff 	mov.w	r0, #4294967295
 800fc84:	e0d1      	b.n	800fe2a <_svfiprintf_r+0x1d2>
 800fc86:	2340      	movs	r3, #64	; 0x40
 800fc88:	616b      	str	r3, [r5, #20]
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc8e:	2320      	movs	r3, #32
 800fc90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc94:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc98:	2330      	movs	r3, #48	; 0x30
 800fc9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe44 <_svfiprintf_r+0x1ec>
 800fc9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fca2:	f04f 0901 	mov.w	r9, #1
 800fca6:	4623      	mov	r3, r4
 800fca8:	469a      	mov	sl, r3
 800fcaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcae:	b10a      	cbz	r2, 800fcb4 <_svfiprintf_r+0x5c>
 800fcb0:	2a25      	cmp	r2, #37	; 0x25
 800fcb2:	d1f9      	bne.n	800fca8 <_svfiprintf_r+0x50>
 800fcb4:	ebba 0b04 	subs.w	fp, sl, r4
 800fcb8:	d00b      	beq.n	800fcd2 <_svfiprintf_r+0x7a>
 800fcba:	465b      	mov	r3, fp
 800fcbc:	4622      	mov	r2, r4
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	4638      	mov	r0, r7
 800fcc2:	f7ff ff6d 	bl	800fba0 <__ssputs_r>
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	f000 80aa 	beq.w	800fe20 <_svfiprintf_r+0x1c8>
 800fccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcce:	445a      	add	r2, fp
 800fcd0:	9209      	str	r2, [sp, #36]	; 0x24
 800fcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f000 80a2 	beq.w	800fe20 <_svfiprintf_r+0x1c8>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	f04f 32ff 	mov.w	r2, #4294967295
 800fce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fce6:	f10a 0a01 	add.w	sl, sl, #1
 800fcea:	9304      	str	r3, [sp, #16]
 800fcec:	9307      	str	r3, [sp, #28]
 800fcee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcf2:	931a      	str	r3, [sp, #104]	; 0x68
 800fcf4:	4654      	mov	r4, sl
 800fcf6:	2205      	movs	r2, #5
 800fcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcfc:	4851      	ldr	r0, [pc, #324]	; (800fe44 <_svfiprintf_r+0x1ec>)
 800fcfe:	f7f0 fa87 	bl	8000210 <memchr>
 800fd02:	9a04      	ldr	r2, [sp, #16]
 800fd04:	b9d8      	cbnz	r0, 800fd3e <_svfiprintf_r+0xe6>
 800fd06:	06d0      	lsls	r0, r2, #27
 800fd08:	bf44      	itt	mi
 800fd0a:	2320      	movmi	r3, #32
 800fd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd10:	0711      	lsls	r1, r2, #28
 800fd12:	bf44      	itt	mi
 800fd14:	232b      	movmi	r3, #43	; 0x2b
 800fd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd20:	d015      	beq.n	800fd4e <_svfiprintf_r+0xf6>
 800fd22:	9a07      	ldr	r2, [sp, #28]
 800fd24:	4654      	mov	r4, sl
 800fd26:	2000      	movs	r0, #0
 800fd28:	f04f 0c0a 	mov.w	ip, #10
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd32:	3b30      	subs	r3, #48	; 0x30
 800fd34:	2b09      	cmp	r3, #9
 800fd36:	d94e      	bls.n	800fdd6 <_svfiprintf_r+0x17e>
 800fd38:	b1b0      	cbz	r0, 800fd68 <_svfiprintf_r+0x110>
 800fd3a:	9207      	str	r2, [sp, #28]
 800fd3c:	e014      	b.n	800fd68 <_svfiprintf_r+0x110>
 800fd3e:	eba0 0308 	sub.w	r3, r0, r8
 800fd42:	fa09 f303 	lsl.w	r3, r9, r3
 800fd46:	4313      	orrs	r3, r2
 800fd48:	9304      	str	r3, [sp, #16]
 800fd4a:	46a2      	mov	sl, r4
 800fd4c:	e7d2      	b.n	800fcf4 <_svfiprintf_r+0x9c>
 800fd4e:	9b03      	ldr	r3, [sp, #12]
 800fd50:	1d19      	adds	r1, r3, #4
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	9103      	str	r1, [sp, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	bfbb      	ittet	lt
 800fd5a:	425b      	neglt	r3, r3
 800fd5c:	f042 0202 	orrlt.w	r2, r2, #2
 800fd60:	9307      	strge	r3, [sp, #28]
 800fd62:	9307      	strlt	r3, [sp, #28]
 800fd64:	bfb8      	it	lt
 800fd66:	9204      	strlt	r2, [sp, #16]
 800fd68:	7823      	ldrb	r3, [r4, #0]
 800fd6a:	2b2e      	cmp	r3, #46	; 0x2e
 800fd6c:	d10c      	bne.n	800fd88 <_svfiprintf_r+0x130>
 800fd6e:	7863      	ldrb	r3, [r4, #1]
 800fd70:	2b2a      	cmp	r3, #42	; 0x2a
 800fd72:	d135      	bne.n	800fde0 <_svfiprintf_r+0x188>
 800fd74:	9b03      	ldr	r3, [sp, #12]
 800fd76:	1d1a      	adds	r2, r3, #4
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	9203      	str	r2, [sp, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	bfb8      	it	lt
 800fd80:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd84:	3402      	adds	r4, #2
 800fd86:	9305      	str	r3, [sp, #20]
 800fd88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe54 <_svfiprintf_r+0x1fc>
 800fd8c:	7821      	ldrb	r1, [r4, #0]
 800fd8e:	2203      	movs	r2, #3
 800fd90:	4650      	mov	r0, sl
 800fd92:	f7f0 fa3d 	bl	8000210 <memchr>
 800fd96:	b140      	cbz	r0, 800fdaa <_svfiprintf_r+0x152>
 800fd98:	2340      	movs	r3, #64	; 0x40
 800fd9a:	eba0 000a 	sub.w	r0, r0, sl
 800fd9e:	fa03 f000 	lsl.w	r0, r3, r0
 800fda2:	9b04      	ldr	r3, [sp, #16]
 800fda4:	4303      	orrs	r3, r0
 800fda6:	3401      	adds	r4, #1
 800fda8:	9304      	str	r3, [sp, #16]
 800fdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdae:	4826      	ldr	r0, [pc, #152]	; (800fe48 <_svfiprintf_r+0x1f0>)
 800fdb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdb4:	2206      	movs	r2, #6
 800fdb6:	f7f0 fa2b 	bl	8000210 <memchr>
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d038      	beq.n	800fe30 <_svfiprintf_r+0x1d8>
 800fdbe:	4b23      	ldr	r3, [pc, #140]	; (800fe4c <_svfiprintf_r+0x1f4>)
 800fdc0:	bb1b      	cbnz	r3, 800fe0a <_svfiprintf_r+0x1b2>
 800fdc2:	9b03      	ldr	r3, [sp, #12]
 800fdc4:	3307      	adds	r3, #7
 800fdc6:	f023 0307 	bic.w	r3, r3, #7
 800fdca:	3308      	adds	r3, #8
 800fdcc:	9303      	str	r3, [sp, #12]
 800fdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdd0:	4433      	add	r3, r6
 800fdd2:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd4:	e767      	b.n	800fca6 <_svfiprintf_r+0x4e>
 800fdd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdda:	460c      	mov	r4, r1
 800fddc:	2001      	movs	r0, #1
 800fdde:	e7a5      	b.n	800fd2c <_svfiprintf_r+0xd4>
 800fde0:	2300      	movs	r3, #0
 800fde2:	3401      	adds	r4, #1
 800fde4:	9305      	str	r3, [sp, #20]
 800fde6:	4619      	mov	r1, r3
 800fde8:	f04f 0c0a 	mov.w	ip, #10
 800fdec:	4620      	mov	r0, r4
 800fdee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdf2:	3a30      	subs	r2, #48	; 0x30
 800fdf4:	2a09      	cmp	r2, #9
 800fdf6:	d903      	bls.n	800fe00 <_svfiprintf_r+0x1a8>
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d0c5      	beq.n	800fd88 <_svfiprintf_r+0x130>
 800fdfc:	9105      	str	r1, [sp, #20]
 800fdfe:	e7c3      	b.n	800fd88 <_svfiprintf_r+0x130>
 800fe00:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe04:	4604      	mov	r4, r0
 800fe06:	2301      	movs	r3, #1
 800fe08:	e7f0      	b.n	800fdec <_svfiprintf_r+0x194>
 800fe0a:	ab03      	add	r3, sp, #12
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	462a      	mov	r2, r5
 800fe10:	4b0f      	ldr	r3, [pc, #60]	; (800fe50 <_svfiprintf_r+0x1f8>)
 800fe12:	a904      	add	r1, sp, #16
 800fe14:	4638      	mov	r0, r7
 800fe16:	f7fe f8a3 	bl	800df60 <_printf_float>
 800fe1a:	1c42      	adds	r2, r0, #1
 800fe1c:	4606      	mov	r6, r0
 800fe1e:	d1d6      	bne.n	800fdce <_svfiprintf_r+0x176>
 800fe20:	89ab      	ldrh	r3, [r5, #12]
 800fe22:	065b      	lsls	r3, r3, #25
 800fe24:	f53f af2c 	bmi.w	800fc80 <_svfiprintf_r+0x28>
 800fe28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe2a:	b01d      	add	sp, #116	; 0x74
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe30:	ab03      	add	r3, sp, #12
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	462a      	mov	r2, r5
 800fe36:	4b06      	ldr	r3, [pc, #24]	; (800fe50 <_svfiprintf_r+0x1f8>)
 800fe38:	a904      	add	r1, sp, #16
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	f7fe fb34 	bl	800e4a8 <_printf_i>
 800fe40:	e7eb      	b.n	800fe1a <_svfiprintf_r+0x1c2>
 800fe42:	bf00      	nop
 800fe44:	08013c74 	.word	0x08013c74
 800fe48:	08013c7e 	.word	0x08013c7e
 800fe4c:	0800df61 	.word	0x0800df61
 800fe50:	0800fba1 	.word	0x0800fba1
 800fe54:	08013c7a 	.word	0x08013c7a

0800fe58 <__assert_func>:
 800fe58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe5a:	4614      	mov	r4, r2
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	4b09      	ldr	r3, [pc, #36]	; (800fe84 <__assert_func+0x2c>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4605      	mov	r5, r0
 800fe64:	68d8      	ldr	r0, [r3, #12]
 800fe66:	b14c      	cbz	r4, 800fe7c <__assert_func+0x24>
 800fe68:	4b07      	ldr	r3, [pc, #28]	; (800fe88 <__assert_func+0x30>)
 800fe6a:	9100      	str	r1, [sp, #0]
 800fe6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe70:	4906      	ldr	r1, [pc, #24]	; (800fe8c <__assert_func+0x34>)
 800fe72:	462b      	mov	r3, r5
 800fe74:	f000 f80e 	bl	800fe94 <fiprintf>
 800fe78:	f000 faa4 	bl	80103c4 <abort>
 800fe7c:	4b04      	ldr	r3, [pc, #16]	; (800fe90 <__assert_func+0x38>)
 800fe7e:	461c      	mov	r4, r3
 800fe80:	e7f3      	b.n	800fe6a <__assert_func+0x12>
 800fe82:	bf00      	nop
 800fe84:	20000040 	.word	0x20000040
 800fe88:	08013c85 	.word	0x08013c85
 800fe8c:	08013c92 	.word	0x08013c92
 800fe90:	08013cc0 	.word	0x08013cc0

0800fe94 <fiprintf>:
 800fe94:	b40e      	push	{r1, r2, r3}
 800fe96:	b503      	push	{r0, r1, lr}
 800fe98:	4601      	mov	r1, r0
 800fe9a:	ab03      	add	r3, sp, #12
 800fe9c:	4805      	ldr	r0, [pc, #20]	; (800feb4 <fiprintf+0x20>)
 800fe9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fea2:	6800      	ldr	r0, [r0, #0]
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	f000 f88f 	bl	800ffc8 <_vfiprintf_r>
 800feaa:	b002      	add	sp, #8
 800feac:	f85d eb04 	ldr.w	lr, [sp], #4
 800feb0:	b003      	add	sp, #12
 800feb2:	4770      	bx	lr
 800feb4:	20000040 	.word	0x20000040

0800feb8 <__retarget_lock_init_recursive>:
 800feb8:	4770      	bx	lr

0800feba <__retarget_lock_acquire_recursive>:
 800feba:	4770      	bx	lr

0800febc <__retarget_lock_release_recursive>:
 800febc:	4770      	bx	lr

0800febe <__ascii_mbtowc>:
 800febe:	b082      	sub	sp, #8
 800fec0:	b901      	cbnz	r1, 800fec4 <__ascii_mbtowc+0x6>
 800fec2:	a901      	add	r1, sp, #4
 800fec4:	b142      	cbz	r2, 800fed8 <__ascii_mbtowc+0x1a>
 800fec6:	b14b      	cbz	r3, 800fedc <__ascii_mbtowc+0x1e>
 800fec8:	7813      	ldrb	r3, [r2, #0]
 800feca:	600b      	str	r3, [r1, #0]
 800fecc:	7812      	ldrb	r2, [r2, #0]
 800fece:	1e10      	subs	r0, r2, #0
 800fed0:	bf18      	it	ne
 800fed2:	2001      	movne	r0, #1
 800fed4:	b002      	add	sp, #8
 800fed6:	4770      	bx	lr
 800fed8:	4610      	mov	r0, r2
 800feda:	e7fb      	b.n	800fed4 <__ascii_mbtowc+0x16>
 800fedc:	f06f 0001 	mvn.w	r0, #1
 800fee0:	e7f8      	b.n	800fed4 <__ascii_mbtowc+0x16>

0800fee2 <memmove>:
 800fee2:	4288      	cmp	r0, r1
 800fee4:	b510      	push	{r4, lr}
 800fee6:	eb01 0402 	add.w	r4, r1, r2
 800feea:	d902      	bls.n	800fef2 <memmove+0x10>
 800feec:	4284      	cmp	r4, r0
 800feee:	4623      	mov	r3, r4
 800fef0:	d807      	bhi.n	800ff02 <memmove+0x20>
 800fef2:	1e43      	subs	r3, r0, #1
 800fef4:	42a1      	cmp	r1, r4
 800fef6:	d008      	beq.n	800ff0a <memmove+0x28>
 800fef8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fefc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff00:	e7f8      	b.n	800fef4 <memmove+0x12>
 800ff02:	4402      	add	r2, r0
 800ff04:	4601      	mov	r1, r0
 800ff06:	428a      	cmp	r2, r1
 800ff08:	d100      	bne.n	800ff0c <memmove+0x2a>
 800ff0a:	bd10      	pop	{r4, pc}
 800ff0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff14:	e7f7      	b.n	800ff06 <memmove+0x24>

0800ff16 <_realloc_r>:
 800ff16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1a:	4680      	mov	r8, r0
 800ff1c:	4614      	mov	r4, r2
 800ff1e:	460e      	mov	r6, r1
 800ff20:	b921      	cbnz	r1, 800ff2c <_realloc_r+0x16>
 800ff22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff26:	4611      	mov	r1, r2
 800ff28:	f7fd bf06 	b.w	800dd38 <_malloc_r>
 800ff2c:	b92a      	cbnz	r2, 800ff3a <_realloc_r+0x24>
 800ff2e:	f7fd fe97 	bl	800dc60 <_free_r>
 800ff32:	4625      	mov	r5, r4
 800ff34:	4628      	mov	r0, r5
 800ff36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3a:	f000 fc67 	bl	801080c <_malloc_usable_size_r>
 800ff3e:	4284      	cmp	r4, r0
 800ff40:	4607      	mov	r7, r0
 800ff42:	d802      	bhi.n	800ff4a <_realloc_r+0x34>
 800ff44:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff48:	d812      	bhi.n	800ff70 <_realloc_r+0x5a>
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	f7fd fef3 	bl	800dd38 <_malloc_r>
 800ff52:	4605      	mov	r5, r0
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d0ed      	beq.n	800ff34 <_realloc_r+0x1e>
 800ff58:	42bc      	cmp	r4, r7
 800ff5a:	4622      	mov	r2, r4
 800ff5c:	4631      	mov	r1, r6
 800ff5e:	bf28      	it	cs
 800ff60:	463a      	movcs	r2, r7
 800ff62:	f7fd fe67 	bl	800dc34 <memcpy>
 800ff66:	4631      	mov	r1, r6
 800ff68:	4640      	mov	r0, r8
 800ff6a:	f7fd fe79 	bl	800dc60 <_free_r>
 800ff6e:	e7e1      	b.n	800ff34 <_realloc_r+0x1e>
 800ff70:	4635      	mov	r5, r6
 800ff72:	e7df      	b.n	800ff34 <_realloc_r+0x1e>

0800ff74 <__sfputc_r>:
 800ff74:	6893      	ldr	r3, [r2, #8]
 800ff76:	3b01      	subs	r3, #1
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	b410      	push	{r4}
 800ff7c:	6093      	str	r3, [r2, #8]
 800ff7e:	da08      	bge.n	800ff92 <__sfputc_r+0x1e>
 800ff80:	6994      	ldr	r4, [r2, #24]
 800ff82:	42a3      	cmp	r3, r4
 800ff84:	db01      	blt.n	800ff8a <__sfputc_r+0x16>
 800ff86:	290a      	cmp	r1, #10
 800ff88:	d103      	bne.n	800ff92 <__sfputc_r+0x1e>
 800ff8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff8e:	f000 b94b 	b.w	8010228 <__swbuf_r>
 800ff92:	6813      	ldr	r3, [r2, #0]
 800ff94:	1c58      	adds	r0, r3, #1
 800ff96:	6010      	str	r0, [r2, #0]
 800ff98:	7019      	strb	r1, [r3, #0]
 800ff9a:	4608      	mov	r0, r1
 800ff9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffa0:	4770      	bx	lr

0800ffa2 <__sfputs_r>:
 800ffa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa4:	4606      	mov	r6, r0
 800ffa6:	460f      	mov	r7, r1
 800ffa8:	4614      	mov	r4, r2
 800ffaa:	18d5      	adds	r5, r2, r3
 800ffac:	42ac      	cmp	r4, r5
 800ffae:	d101      	bne.n	800ffb4 <__sfputs_r+0x12>
 800ffb0:	2000      	movs	r0, #0
 800ffb2:	e007      	b.n	800ffc4 <__sfputs_r+0x22>
 800ffb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffb8:	463a      	mov	r2, r7
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f7ff ffda 	bl	800ff74 <__sfputc_r>
 800ffc0:	1c43      	adds	r3, r0, #1
 800ffc2:	d1f3      	bne.n	800ffac <__sfputs_r+0xa>
 800ffc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffc8 <_vfiprintf_r>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	460d      	mov	r5, r1
 800ffce:	b09d      	sub	sp, #116	; 0x74
 800ffd0:	4614      	mov	r4, r2
 800ffd2:	4698      	mov	r8, r3
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	b118      	cbz	r0, 800ffe0 <_vfiprintf_r+0x18>
 800ffd8:	6983      	ldr	r3, [r0, #24]
 800ffda:	b90b      	cbnz	r3, 800ffe0 <_vfiprintf_r+0x18>
 800ffdc:	f000 fb14 	bl	8010608 <__sinit>
 800ffe0:	4b89      	ldr	r3, [pc, #548]	; (8010208 <_vfiprintf_r+0x240>)
 800ffe2:	429d      	cmp	r5, r3
 800ffe4:	d11b      	bne.n	801001e <_vfiprintf_r+0x56>
 800ffe6:	6875      	ldr	r5, [r6, #4]
 800ffe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffea:	07d9      	lsls	r1, r3, #31
 800ffec:	d405      	bmi.n	800fffa <_vfiprintf_r+0x32>
 800ffee:	89ab      	ldrh	r3, [r5, #12]
 800fff0:	059a      	lsls	r2, r3, #22
 800fff2:	d402      	bmi.n	800fffa <_vfiprintf_r+0x32>
 800fff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fff6:	f7ff ff60 	bl	800feba <__retarget_lock_acquire_recursive>
 800fffa:	89ab      	ldrh	r3, [r5, #12]
 800fffc:	071b      	lsls	r3, r3, #28
 800fffe:	d501      	bpl.n	8010004 <_vfiprintf_r+0x3c>
 8010000:	692b      	ldr	r3, [r5, #16]
 8010002:	b9eb      	cbnz	r3, 8010040 <_vfiprintf_r+0x78>
 8010004:	4629      	mov	r1, r5
 8010006:	4630      	mov	r0, r6
 8010008:	f000 f96e 	bl	80102e8 <__swsetup_r>
 801000c:	b1c0      	cbz	r0, 8010040 <_vfiprintf_r+0x78>
 801000e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010010:	07dc      	lsls	r4, r3, #31
 8010012:	d50e      	bpl.n	8010032 <_vfiprintf_r+0x6a>
 8010014:	f04f 30ff 	mov.w	r0, #4294967295
 8010018:	b01d      	add	sp, #116	; 0x74
 801001a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801001e:	4b7b      	ldr	r3, [pc, #492]	; (801020c <_vfiprintf_r+0x244>)
 8010020:	429d      	cmp	r5, r3
 8010022:	d101      	bne.n	8010028 <_vfiprintf_r+0x60>
 8010024:	68b5      	ldr	r5, [r6, #8]
 8010026:	e7df      	b.n	800ffe8 <_vfiprintf_r+0x20>
 8010028:	4b79      	ldr	r3, [pc, #484]	; (8010210 <_vfiprintf_r+0x248>)
 801002a:	429d      	cmp	r5, r3
 801002c:	bf08      	it	eq
 801002e:	68f5      	ldreq	r5, [r6, #12]
 8010030:	e7da      	b.n	800ffe8 <_vfiprintf_r+0x20>
 8010032:	89ab      	ldrh	r3, [r5, #12]
 8010034:	0598      	lsls	r0, r3, #22
 8010036:	d4ed      	bmi.n	8010014 <_vfiprintf_r+0x4c>
 8010038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801003a:	f7ff ff3f 	bl	800febc <__retarget_lock_release_recursive>
 801003e:	e7e9      	b.n	8010014 <_vfiprintf_r+0x4c>
 8010040:	2300      	movs	r3, #0
 8010042:	9309      	str	r3, [sp, #36]	; 0x24
 8010044:	2320      	movs	r3, #32
 8010046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801004a:	f8cd 800c 	str.w	r8, [sp, #12]
 801004e:	2330      	movs	r3, #48	; 0x30
 8010050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010214 <_vfiprintf_r+0x24c>
 8010054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010058:	f04f 0901 	mov.w	r9, #1
 801005c:	4623      	mov	r3, r4
 801005e:	469a      	mov	sl, r3
 8010060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010064:	b10a      	cbz	r2, 801006a <_vfiprintf_r+0xa2>
 8010066:	2a25      	cmp	r2, #37	; 0x25
 8010068:	d1f9      	bne.n	801005e <_vfiprintf_r+0x96>
 801006a:	ebba 0b04 	subs.w	fp, sl, r4
 801006e:	d00b      	beq.n	8010088 <_vfiprintf_r+0xc0>
 8010070:	465b      	mov	r3, fp
 8010072:	4622      	mov	r2, r4
 8010074:	4629      	mov	r1, r5
 8010076:	4630      	mov	r0, r6
 8010078:	f7ff ff93 	bl	800ffa2 <__sfputs_r>
 801007c:	3001      	adds	r0, #1
 801007e:	f000 80aa 	beq.w	80101d6 <_vfiprintf_r+0x20e>
 8010082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010084:	445a      	add	r2, fp
 8010086:	9209      	str	r2, [sp, #36]	; 0x24
 8010088:	f89a 3000 	ldrb.w	r3, [sl]
 801008c:	2b00      	cmp	r3, #0
 801008e:	f000 80a2 	beq.w	80101d6 <_vfiprintf_r+0x20e>
 8010092:	2300      	movs	r3, #0
 8010094:	f04f 32ff 	mov.w	r2, #4294967295
 8010098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801009c:	f10a 0a01 	add.w	sl, sl, #1
 80100a0:	9304      	str	r3, [sp, #16]
 80100a2:	9307      	str	r3, [sp, #28]
 80100a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100a8:	931a      	str	r3, [sp, #104]	; 0x68
 80100aa:	4654      	mov	r4, sl
 80100ac:	2205      	movs	r2, #5
 80100ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100b2:	4858      	ldr	r0, [pc, #352]	; (8010214 <_vfiprintf_r+0x24c>)
 80100b4:	f7f0 f8ac 	bl	8000210 <memchr>
 80100b8:	9a04      	ldr	r2, [sp, #16]
 80100ba:	b9d8      	cbnz	r0, 80100f4 <_vfiprintf_r+0x12c>
 80100bc:	06d1      	lsls	r1, r2, #27
 80100be:	bf44      	itt	mi
 80100c0:	2320      	movmi	r3, #32
 80100c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100c6:	0713      	lsls	r3, r2, #28
 80100c8:	bf44      	itt	mi
 80100ca:	232b      	movmi	r3, #43	; 0x2b
 80100cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100d0:	f89a 3000 	ldrb.w	r3, [sl]
 80100d4:	2b2a      	cmp	r3, #42	; 0x2a
 80100d6:	d015      	beq.n	8010104 <_vfiprintf_r+0x13c>
 80100d8:	9a07      	ldr	r2, [sp, #28]
 80100da:	4654      	mov	r4, sl
 80100dc:	2000      	movs	r0, #0
 80100de:	f04f 0c0a 	mov.w	ip, #10
 80100e2:	4621      	mov	r1, r4
 80100e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100e8:	3b30      	subs	r3, #48	; 0x30
 80100ea:	2b09      	cmp	r3, #9
 80100ec:	d94e      	bls.n	801018c <_vfiprintf_r+0x1c4>
 80100ee:	b1b0      	cbz	r0, 801011e <_vfiprintf_r+0x156>
 80100f0:	9207      	str	r2, [sp, #28]
 80100f2:	e014      	b.n	801011e <_vfiprintf_r+0x156>
 80100f4:	eba0 0308 	sub.w	r3, r0, r8
 80100f8:	fa09 f303 	lsl.w	r3, r9, r3
 80100fc:	4313      	orrs	r3, r2
 80100fe:	9304      	str	r3, [sp, #16]
 8010100:	46a2      	mov	sl, r4
 8010102:	e7d2      	b.n	80100aa <_vfiprintf_r+0xe2>
 8010104:	9b03      	ldr	r3, [sp, #12]
 8010106:	1d19      	adds	r1, r3, #4
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	9103      	str	r1, [sp, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	bfbb      	ittet	lt
 8010110:	425b      	neglt	r3, r3
 8010112:	f042 0202 	orrlt.w	r2, r2, #2
 8010116:	9307      	strge	r3, [sp, #28]
 8010118:	9307      	strlt	r3, [sp, #28]
 801011a:	bfb8      	it	lt
 801011c:	9204      	strlt	r2, [sp, #16]
 801011e:	7823      	ldrb	r3, [r4, #0]
 8010120:	2b2e      	cmp	r3, #46	; 0x2e
 8010122:	d10c      	bne.n	801013e <_vfiprintf_r+0x176>
 8010124:	7863      	ldrb	r3, [r4, #1]
 8010126:	2b2a      	cmp	r3, #42	; 0x2a
 8010128:	d135      	bne.n	8010196 <_vfiprintf_r+0x1ce>
 801012a:	9b03      	ldr	r3, [sp, #12]
 801012c:	1d1a      	adds	r2, r3, #4
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	9203      	str	r2, [sp, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	bfb8      	it	lt
 8010136:	f04f 33ff 	movlt.w	r3, #4294967295
 801013a:	3402      	adds	r4, #2
 801013c:	9305      	str	r3, [sp, #20]
 801013e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010224 <_vfiprintf_r+0x25c>
 8010142:	7821      	ldrb	r1, [r4, #0]
 8010144:	2203      	movs	r2, #3
 8010146:	4650      	mov	r0, sl
 8010148:	f7f0 f862 	bl	8000210 <memchr>
 801014c:	b140      	cbz	r0, 8010160 <_vfiprintf_r+0x198>
 801014e:	2340      	movs	r3, #64	; 0x40
 8010150:	eba0 000a 	sub.w	r0, r0, sl
 8010154:	fa03 f000 	lsl.w	r0, r3, r0
 8010158:	9b04      	ldr	r3, [sp, #16]
 801015a:	4303      	orrs	r3, r0
 801015c:	3401      	adds	r4, #1
 801015e:	9304      	str	r3, [sp, #16]
 8010160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010164:	482c      	ldr	r0, [pc, #176]	; (8010218 <_vfiprintf_r+0x250>)
 8010166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801016a:	2206      	movs	r2, #6
 801016c:	f7f0 f850 	bl	8000210 <memchr>
 8010170:	2800      	cmp	r0, #0
 8010172:	d03f      	beq.n	80101f4 <_vfiprintf_r+0x22c>
 8010174:	4b29      	ldr	r3, [pc, #164]	; (801021c <_vfiprintf_r+0x254>)
 8010176:	bb1b      	cbnz	r3, 80101c0 <_vfiprintf_r+0x1f8>
 8010178:	9b03      	ldr	r3, [sp, #12]
 801017a:	3307      	adds	r3, #7
 801017c:	f023 0307 	bic.w	r3, r3, #7
 8010180:	3308      	adds	r3, #8
 8010182:	9303      	str	r3, [sp, #12]
 8010184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010186:	443b      	add	r3, r7
 8010188:	9309      	str	r3, [sp, #36]	; 0x24
 801018a:	e767      	b.n	801005c <_vfiprintf_r+0x94>
 801018c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010190:	460c      	mov	r4, r1
 8010192:	2001      	movs	r0, #1
 8010194:	e7a5      	b.n	80100e2 <_vfiprintf_r+0x11a>
 8010196:	2300      	movs	r3, #0
 8010198:	3401      	adds	r4, #1
 801019a:	9305      	str	r3, [sp, #20]
 801019c:	4619      	mov	r1, r3
 801019e:	f04f 0c0a 	mov.w	ip, #10
 80101a2:	4620      	mov	r0, r4
 80101a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101a8:	3a30      	subs	r2, #48	; 0x30
 80101aa:	2a09      	cmp	r2, #9
 80101ac:	d903      	bls.n	80101b6 <_vfiprintf_r+0x1ee>
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d0c5      	beq.n	801013e <_vfiprintf_r+0x176>
 80101b2:	9105      	str	r1, [sp, #20]
 80101b4:	e7c3      	b.n	801013e <_vfiprintf_r+0x176>
 80101b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80101ba:	4604      	mov	r4, r0
 80101bc:	2301      	movs	r3, #1
 80101be:	e7f0      	b.n	80101a2 <_vfiprintf_r+0x1da>
 80101c0:	ab03      	add	r3, sp, #12
 80101c2:	9300      	str	r3, [sp, #0]
 80101c4:	462a      	mov	r2, r5
 80101c6:	4b16      	ldr	r3, [pc, #88]	; (8010220 <_vfiprintf_r+0x258>)
 80101c8:	a904      	add	r1, sp, #16
 80101ca:	4630      	mov	r0, r6
 80101cc:	f7fd fec8 	bl	800df60 <_printf_float>
 80101d0:	4607      	mov	r7, r0
 80101d2:	1c78      	adds	r0, r7, #1
 80101d4:	d1d6      	bne.n	8010184 <_vfiprintf_r+0x1bc>
 80101d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101d8:	07d9      	lsls	r1, r3, #31
 80101da:	d405      	bmi.n	80101e8 <_vfiprintf_r+0x220>
 80101dc:	89ab      	ldrh	r3, [r5, #12]
 80101de:	059a      	lsls	r2, r3, #22
 80101e0:	d402      	bmi.n	80101e8 <_vfiprintf_r+0x220>
 80101e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101e4:	f7ff fe6a 	bl	800febc <__retarget_lock_release_recursive>
 80101e8:	89ab      	ldrh	r3, [r5, #12]
 80101ea:	065b      	lsls	r3, r3, #25
 80101ec:	f53f af12 	bmi.w	8010014 <_vfiprintf_r+0x4c>
 80101f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101f2:	e711      	b.n	8010018 <_vfiprintf_r+0x50>
 80101f4:	ab03      	add	r3, sp, #12
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	462a      	mov	r2, r5
 80101fa:	4b09      	ldr	r3, [pc, #36]	; (8010220 <_vfiprintf_r+0x258>)
 80101fc:	a904      	add	r1, sp, #16
 80101fe:	4630      	mov	r0, r6
 8010200:	f7fe f952 	bl	800e4a8 <_printf_i>
 8010204:	e7e4      	b.n	80101d0 <_vfiprintf_r+0x208>
 8010206:	bf00      	nop
 8010208:	08013dec 	.word	0x08013dec
 801020c:	08013e0c 	.word	0x08013e0c
 8010210:	08013dcc 	.word	0x08013dcc
 8010214:	08013c74 	.word	0x08013c74
 8010218:	08013c7e 	.word	0x08013c7e
 801021c:	0800df61 	.word	0x0800df61
 8010220:	0800ffa3 	.word	0x0800ffa3
 8010224:	08013c7a 	.word	0x08013c7a

08010228 <__swbuf_r>:
 8010228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022a:	460e      	mov	r6, r1
 801022c:	4614      	mov	r4, r2
 801022e:	4605      	mov	r5, r0
 8010230:	b118      	cbz	r0, 801023a <__swbuf_r+0x12>
 8010232:	6983      	ldr	r3, [r0, #24]
 8010234:	b90b      	cbnz	r3, 801023a <__swbuf_r+0x12>
 8010236:	f000 f9e7 	bl	8010608 <__sinit>
 801023a:	4b21      	ldr	r3, [pc, #132]	; (80102c0 <__swbuf_r+0x98>)
 801023c:	429c      	cmp	r4, r3
 801023e:	d12b      	bne.n	8010298 <__swbuf_r+0x70>
 8010240:	686c      	ldr	r4, [r5, #4]
 8010242:	69a3      	ldr	r3, [r4, #24]
 8010244:	60a3      	str	r3, [r4, #8]
 8010246:	89a3      	ldrh	r3, [r4, #12]
 8010248:	071a      	lsls	r2, r3, #28
 801024a:	d52f      	bpl.n	80102ac <__swbuf_r+0x84>
 801024c:	6923      	ldr	r3, [r4, #16]
 801024e:	b36b      	cbz	r3, 80102ac <__swbuf_r+0x84>
 8010250:	6923      	ldr	r3, [r4, #16]
 8010252:	6820      	ldr	r0, [r4, #0]
 8010254:	1ac0      	subs	r0, r0, r3
 8010256:	6963      	ldr	r3, [r4, #20]
 8010258:	b2f6      	uxtb	r6, r6
 801025a:	4283      	cmp	r3, r0
 801025c:	4637      	mov	r7, r6
 801025e:	dc04      	bgt.n	801026a <__swbuf_r+0x42>
 8010260:	4621      	mov	r1, r4
 8010262:	4628      	mov	r0, r5
 8010264:	f000 f93c 	bl	80104e0 <_fflush_r>
 8010268:	bb30      	cbnz	r0, 80102b8 <__swbuf_r+0x90>
 801026a:	68a3      	ldr	r3, [r4, #8]
 801026c:	3b01      	subs	r3, #1
 801026e:	60a3      	str	r3, [r4, #8]
 8010270:	6823      	ldr	r3, [r4, #0]
 8010272:	1c5a      	adds	r2, r3, #1
 8010274:	6022      	str	r2, [r4, #0]
 8010276:	701e      	strb	r6, [r3, #0]
 8010278:	6963      	ldr	r3, [r4, #20]
 801027a:	3001      	adds	r0, #1
 801027c:	4283      	cmp	r3, r0
 801027e:	d004      	beq.n	801028a <__swbuf_r+0x62>
 8010280:	89a3      	ldrh	r3, [r4, #12]
 8010282:	07db      	lsls	r3, r3, #31
 8010284:	d506      	bpl.n	8010294 <__swbuf_r+0x6c>
 8010286:	2e0a      	cmp	r6, #10
 8010288:	d104      	bne.n	8010294 <__swbuf_r+0x6c>
 801028a:	4621      	mov	r1, r4
 801028c:	4628      	mov	r0, r5
 801028e:	f000 f927 	bl	80104e0 <_fflush_r>
 8010292:	b988      	cbnz	r0, 80102b8 <__swbuf_r+0x90>
 8010294:	4638      	mov	r0, r7
 8010296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010298:	4b0a      	ldr	r3, [pc, #40]	; (80102c4 <__swbuf_r+0x9c>)
 801029a:	429c      	cmp	r4, r3
 801029c:	d101      	bne.n	80102a2 <__swbuf_r+0x7a>
 801029e:	68ac      	ldr	r4, [r5, #8]
 80102a0:	e7cf      	b.n	8010242 <__swbuf_r+0x1a>
 80102a2:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <__swbuf_r+0xa0>)
 80102a4:	429c      	cmp	r4, r3
 80102a6:	bf08      	it	eq
 80102a8:	68ec      	ldreq	r4, [r5, #12]
 80102aa:	e7ca      	b.n	8010242 <__swbuf_r+0x1a>
 80102ac:	4621      	mov	r1, r4
 80102ae:	4628      	mov	r0, r5
 80102b0:	f000 f81a 	bl	80102e8 <__swsetup_r>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d0cb      	beq.n	8010250 <__swbuf_r+0x28>
 80102b8:	f04f 37ff 	mov.w	r7, #4294967295
 80102bc:	e7ea      	b.n	8010294 <__swbuf_r+0x6c>
 80102be:	bf00      	nop
 80102c0:	08013dec 	.word	0x08013dec
 80102c4:	08013e0c 	.word	0x08013e0c
 80102c8:	08013dcc 	.word	0x08013dcc

080102cc <__ascii_wctomb>:
 80102cc:	b149      	cbz	r1, 80102e2 <__ascii_wctomb+0x16>
 80102ce:	2aff      	cmp	r2, #255	; 0xff
 80102d0:	bf85      	ittet	hi
 80102d2:	238a      	movhi	r3, #138	; 0x8a
 80102d4:	6003      	strhi	r3, [r0, #0]
 80102d6:	700a      	strbls	r2, [r1, #0]
 80102d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80102dc:	bf98      	it	ls
 80102de:	2001      	movls	r0, #1
 80102e0:	4770      	bx	lr
 80102e2:	4608      	mov	r0, r1
 80102e4:	4770      	bx	lr
	...

080102e8 <__swsetup_r>:
 80102e8:	4b32      	ldr	r3, [pc, #200]	; (80103b4 <__swsetup_r+0xcc>)
 80102ea:	b570      	push	{r4, r5, r6, lr}
 80102ec:	681d      	ldr	r5, [r3, #0]
 80102ee:	4606      	mov	r6, r0
 80102f0:	460c      	mov	r4, r1
 80102f2:	b125      	cbz	r5, 80102fe <__swsetup_r+0x16>
 80102f4:	69ab      	ldr	r3, [r5, #24]
 80102f6:	b913      	cbnz	r3, 80102fe <__swsetup_r+0x16>
 80102f8:	4628      	mov	r0, r5
 80102fa:	f000 f985 	bl	8010608 <__sinit>
 80102fe:	4b2e      	ldr	r3, [pc, #184]	; (80103b8 <__swsetup_r+0xd0>)
 8010300:	429c      	cmp	r4, r3
 8010302:	d10f      	bne.n	8010324 <__swsetup_r+0x3c>
 8010304:	686c      	ldr	r4, [r5, #4]
 8010306:	89a3      	ldrh	r3, [r4, #12]
 8010308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801030c:	0719      	lsls	r1, r3, #28
 801030e:	d42c      	bmi.n	801036a <__swsetup_r+0x82>
 8010310:	06dd      	lsls	r5, r3, #27
 8010312:	d411      	bmi.n	8010338 <__swsetup_r+0x50>
 8010314:	2309      	movs	r3, #9
 8010316:	6033      	str	r3, [r6, #0]
 8010318:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801031c:	81a3      	strh	r3, [r4, #12]
 801031e:	f04f 30ff 	mov.w	r0, #4294967295
 8010322:	e03e      	b.n	80103a2 <__swsetup_r+0xba>
 8010324:	4b25      	ldr	r3, [pc, #148]	; (80103bc <__swsetup_r+0xd4>)
 8010326:	429c      	cmp	r4, r3
 8010328:	d101      	bne.n	801032e <__swsetup_r+0x46>
 801032a:	68ac      	ldr	r4, [r5, #8]
 801032c:	e7eb      	b.n	8010306 <__swsetup_r+0x1e>
 801032e:	4b24      	ldr	r3, [pc, #144]	; (80103c0 <__swsetup_r+0xd8>)
 8010330:	429c      	cmp	r4, r3
 8010332:	bf08      	it	eq
 8010334:	68ec      	ldreq	r4, [r5, #12]
 8010336:	e7e6      	b.n	8010306 <__swsetup_r+0x1e>
 8010338:	0758      	lsls	r0, r3, #29
 801033a:	d512      	bpl.n	8010362 <__swsetup_r+0x7a>
 801033c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801033e:	b141      	cbz	r1, 8010352 <__swsetup_r+0x6a>
 8010340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010344:	4299      	cmp	r1, r3
 8010346:	d002      	beq.n	801034e <__swsetup_r+0x66>
 8010348:	4630      	mov	r0, r6
 801034a:	f7fd fc89 	bl	800dc60 <_free_r>
 801034e:	2300      	movs	r3, #0
 8010350:	6363      	str	r3, [r4, #52]	; 0x34
 8010352:	89a3      	ldrh	r3, [r4, #12]
 8010354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010358:	81a3      	strh	r3, [r4, #12]
 801035a:	2300      	movs	r3, #0
 801035c:	6063      	str	r3, [r4, #4]
 801035e:	6923      	ldr	r3, [r4, #16]
 8010360:	6023      	str	r3, [r4, #0]
 8010362:	89a3      	ldrh	r3, [r4, #12]
 8010364:	f043 0308 	orr.w	r3, r3, #8
 8010368:	81a3      	strh	r3, [r4, #12]
 801036a:	6923      	ldr	r3, [r4, #16]
 801036c:	b94b      	cbnz	r3, 8010382 <__swsetup_r+0x9a>
 801036e:	89a3      	ldrh	r3, [r4, #12]
 8010370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010378:	d003      	beq.n	8010382 <__swsetup_r+0x9a>
 801037a:	4621      	mov	r1, r4
 801037c:	4630      	mov	r0, r6
 801037e:	f000 fa05 	bl	801078c <__smakebuf_r>
 8010382:	89a0      	ldrh	r0, [r4, #12]
 8010384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010388:	f010 0301 	ands.w	r3, r0, #1
 801038c:	d00a      	beq.n	80103a4 <__swsetup_r+0xbc>
 801038e:	2300      	movs	r3, #0
 8010390:	60a3      	str	r3, [r4, #8]
 8010392:	6963      	ldr	r3, [r4, #20]
 8010394:	425b      	negs	r3, r3
 8010396:	61a3      	str	r3, [r4, #24]
 8010398:	6923      	ldr	r3, [r4, #16]
 801039a:	b943      	cbnz	r3, 80103ae <__swsetup_r+0xc6>
 801039c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80103a0:	d1ba      	bne.n	8010318 <__swsetup_r+0x30>
 80103a2:	bd70      	pop	{r4, r5, r6, pc}
 80103a4:	0781      	lsls	r1, r0, #30
 80103a6:	bf58      	it	pl
 80103a8:	6963      	ldrpl	r3, [r4, #20]
 80103aa:	60a3      	str	r3, [r4, #8]
 80103ac:	e7f4      	b.n	8010398 <__swsetup_r+0xb0>
 80103ae:	2000      	movs	r0, #0
 80103b0:	e7f7      	b.n	80103a2 <__swsetup_r+0xba>
 80103b2:	bf00      	nop
 80103b4:	20000040 	.word	0x20000040
 80103b8:	08013dec 	.word	0x08013dec
 80103bc:	08013e0c 	.word	0x08013e0c
 80103c0:	08013dcc 	.word	0x08013dcc

080103c4 <abort>:
 80103c4:	b508      	push	{r3, lr}
 80103c6:	2006      	movs	r0, #6
 80103c8:	f000 fa50 	bl	801086c <raise>
 80103cc:	2001      	movs	r0, #1
 80103ce:	f7f4 f96b 	bl	80046a8 <_exit>
	...

080103d4 <__sflush_r>:
 80103d4:	898a      	ldrh	r2, [r1, #12]
 80103d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103da:	4605      	mov	r5, r0
 80103dc:	0710      	lsls	r0, r2, #28
 80103de:	460c      	mov	r4, r1
 80103e0:	d458      	bmi.n	8010494 <__sflush_r+0xc0>
 80103e2:	684b      	ldr	r3, [r1, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	dc05      	bgt.n	80103f4 <__sflush_r+0x20>
 80103e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	dc02      	bgt.n	80103f4 <__sflush_r+0x20>
 80103ee:	2000      	movs	r0, #0
 80103f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103f6:	2e00      	cmp	r6, #0
 80103f8:	d0f9      	beq.n	80103ee <__sflush_r+0x1a>
 80103fa:	2300      	movs	r3, #0
 80103fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010400:	682f      	ldr	r7, [r5, #0]
 8010402:	602b      	str	r3, [r5, #0]
 8010404:	d032      	beq.n	801046c <__sflush_r+0x98>
 8010406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	075a      	lsls	r2, r3, #29
 801040c:	d505      	bpl.n	801041a <__sflush_r+0x46>
 801040e:	6863      	ldr	r3, [r4, #4]
 8010410:	1ac0      	subs	r0, r0, r3
 8010412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010414:	b10b      	cbz	r3, 801041a <__sflush_r+0x46>
 8010416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010418:	1ac0      	subs	r0, r0, r3
 801041a:	2300      	movs	r3, #0
 801041c:	4602      	mov	r2, r0
 801041e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010420:	6a21      	ldr	r1, [r4, #32]
 8010422:	4628      	mov	r0, r5
 8010424:	47b0      	blx	r6
 8010426:	1c43      	adds	r3, r0, #1
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	d106      	bne.n	801043a <__sflush_r+0x66>
 801042c:	6829      	ldr	r1, [r5, #0]
 801042e:	291d      	cmp	r1, #29
 8010430:	d82c      	bhi.n	801048c <__sflush_r+0xb8>
 8010432:	4a2a      	ldr	r2, [pc, #168]	; (80104dc <__sflush_r+0x108>)
 8010434:	40ca      	lsrs	r2, r1
 8010436:	07d6      	lsls	r6, r2, #31
 8010438:	d528      	bpl.n	801048c <__sflush_r+0xb8>
 801043a:	2200      	movs	r2, #0
 801043c:	6062      	str	r2, [r4, #4]
 801043e:	04d9      	lsls	r1, r3, #19
 8010440:	6922      	ldr	r2, [r4, #16]
 8010442:	6022      	str	r2, [r4, #0]
 8010444:	d504      	bpl.n	8010450 <__sflush_r+0x7c>
 8010446:	1c42      	adds	r2, r0, #1
 8010448:	d101      	bne.n	801044e <__sflush_r+0x7a>
 801044a:	682b      	ldr	r3, [r5, #0]
 801044c:	b903      	cbnz	r3, 8010450 <__sflush_r+0x7c>
 801044e:	6560      	str	r0, [r4, #84]	; 0x54
 8010450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010452:	602f      	str	r7, [r5, #0]
 8010454:	2900      	cmp	r1, #0
 8010456:	d0ca      	beq.n	80103ee <__sflush_r+0x1a>
 8010458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801045c:	4299      	cmp	r1, r3
 801045e:	d002      	beq.n	8010466 <__sflush_r+0x92>
 8010460:	4628      	mov	r0, r5
 8010462:	f7fd fbfd 	bl	800dc60 <_free_r>
 8010466:	2000      	movs	r0, #0
 8010468:	6360      	str	r0, [r4, #52]	; 0x34
 801046a:	e7c1      	b.n	80103f0 <__sflush_r+0x1c>
 801046c:	6a21      	ldr	r1, [r4, #32]
 801046e:	2301      	movs	r3, #1
 8010470:	4628      	mov	r0, r5
 8010472:	47b0      	blx	r6
 8010474:	1c41      	adds	r1, r0, #1
 8010476:	d1c7      	bne.n	8010408 <__sflush_r+0x34>
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d0c4      	beq.n	8010408 <__sflush_r+0x34>
 801047e:	2b1d      	cmp	r3, #29
 8010480:	d001      	beq.n	8010486 <__sflush_r+0xb2>
 8010482:	2b16      	cmp	r3, #22
 8010484:	d101      	bne.n	801048a <__sflush_r+0xb6>
 8010486:	602f      	str	r7, [r5, #0]
 8010488:	e7b1      	b.n	80103ee <__sflush_r+0x1a>
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010490:	81a3      	strh	r3, [r4, #12]
 8010492:	e7ad      	b.n	80103f0 <__sflush_r+0x1c>
 8010494:	690f      	ldr	r7, [r1, #16]
 8010496:	2f00      	cmp	r7, #0
 8010498:	d0a9      	beq.n	80103ee <__sflush_r+0x1a>
 801049a:	0793      	lsls	r3, r2, #30
 801049c:	680e      	ldr	r6, [r1, #0]
 801049e:	bf08      	it	eq
 80104a0:	694b      	ldreq	r3, [r1, #20]
 80104a2:	600f      	str	r7, [r1, #0]
 80104a4:	bf18      	it	ne
 80104a6:	2300      	movne	r3, #0
 80104a8:	eba6 0807 	sub.w	r8, r6, r7
 80104ac:	608b      	str	r3, [r1, #8]
 80104ae:	f1b8 0f00 	cmp.w	r8, #0
 80104b2:	dd9c      	ble.n	80103ee <__sflush_r+0x1a>
 80104b4:	6a21      	ldr	r1, [r4, #32]
 80104b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80104b8:	4643      	mov	r3, r8
 80104ba:	463a      	mov	r2, r7
 80104bc:	4628      	mov	r0, r5
 80104be:	47b0      	blx	r6
 80104c0:	2800      	cmp	r0, #0
 80104c2:	dc06      	bgt.n	80104d2 <__sflush_r+0xfe>
 80104c4:	89a3      	ldrh	r3, [r4, #12]
 80104c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104ca:	81a3      	strh	r3, [r4, #12]
 80104cc:	f04f 30ff 	mov.w	r0, #4294967295
 80104d0:	e78e      	b.n	80103f0 <__sflush_r+0x1c>
 80104d2:	4407      	add	r7, r0
 80104d4:	eba8 0800 	sub.w	r8, r8, r0
 80104d8:	e7e9      	b.n	80104ae <__sflush_r+0xda>
 80104da:	bf00      	nop
 80104dc:	20400001 	.word	0x20400001

080104e0 <_fflush_r>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	690b      	ldr	r3, [r1, #16]
 80104e4:	4605      	mov	r5, r0
 80104e6:	460c      	mov	r4, r1
 80104e8:	b913      	cbnz	r3, 80104f0 <_fflush_r+0x10>
 80104ea:	2500      	movs	r5, #0
 80104ec:	4628      	mov	r0, r5
 80104ee:	bd38      	pop	{r3, r4, r5, pc}
 80104f0:	b118      	cbz	r0, 80104fa <_fflush_r+0x1a>
 80104f2:	6983      	ldr	r3, [r0, #24]
 80104f4:	b90b      	cbnz	r3, 80104fa <_fflush_r+0x1a>
 80104f6:	f000 f887 	bl	8010608 <__sinit>
 80104fa:	4b14      	ldr	r3, [pc, #80]	; (801054c <_fflush_r+0x6c>)
 80104fc:	429c      	cmp	r4, r3
 80104fe:	d11b      	bne.n	8010538 <_fflush_r+0x58>
 8010500:	686c      	ldr	r4, [r5, #4]
 8010502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d0ef      	beq.n	80104ea <_fflush_r+0xa>
 801050a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801050c:	07d0      	lsls	r0, r2, #31
 801050e:	d404      	bmi.n	801051a <_fflush_r+0x3a>
 8010510:	0599      	lsls	r1, r3, #22
 8010512:	d402      	bmi.n	801051a <_fflush_r+0x3a>
 8010514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010516:	f7ff fcd0 	bl	800feba <__retarget_lock_acquire_recursive>
 801051a:	4628      	mov	r0, r5
 801051c:	4621      	mov	r1, r4
 801051e:	f7ff ff59 	bl	80103d4 <__sflush_r>
 8010522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010524:	07da      	lsls	r2, r3, #31
 8010526:	4605      	mov	r5, r0
 8010528:	d4e0      	bmi.n	80104ec <_fflush_r+0xc>
 801052a:	89a3      	ldrh	r3, [r4, #12]
 801052c:	059b      	lsls	r3, r3, #22
 801052e:	d4dd      	bmi.n	80104ec <_fflush_r+0xc>
 8010530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010532:	f7ff fcc3 	bl	800febc <__retarget_lock_release_recursive>
 8010536:	e7d9      	b.n	80104ec <_fflush_r+0xc>
 8010538:	4b05      	ldr	r3, [pc, #20]	; (8010550 <_fflush_r+0x70>)
 801053a:	429c      	cmp	r4, r3
 801053c:	d101      	bne.n	8010542 <_fflush_r+0x62>
 801053e:	68ac      	ldr	r4, [r5, #8]
 8010540:	e7df      	b.n	8010502 <_fflush_r+0x22>
 8010542:	4b04      	ldr	r3, [pc, #16]	; (8010554 <_fflush_r+0x74>)
 8010544:	429c      	cmp	r4, r3
 8010546:	bf08      	it	eq
 8010548:	68ec      	ldreq	r4, [r5, #12]
 801054a:	e7da      	b.n	8010502 <_fflush_r+0x22>
 801054c:	08013dec 	.word	0x08013dec
 8010550:	08013e0c 	.word	0x08013e0c
 8010554:	08013dcc 	.word	0x08013dcc

08010558 <std>:
 8010558:	2300      	movs	r3, #0
 801055a:	b510      	push	{r4, lr}
 801055c:	4604      	mov	r4, r0
 801055e:	e9c0 3300 	strd	r3, r3, [r0]
 8010562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010566:	6083      	str	r3, [r0, #8]
 8010568:	8181      	strh	r1, [r0, #12]
 801056a:	6643      	str	r3, [r0, #100]	; 0x64
 801056c:	81c2      	strh	r2, [r0, #14]
 801056e:	6183      	str	r3, [r0, #24]
 8010570:	4619      	mov	r1, r3
 8010572:	2208      	movs	r2, #8
 8010574:	305c      	adds	r0, #92	; 0x5c
 8010576:	f7fd fb6b 	bl	800dc50 <memset>
 801057a:	4b05      	ldr	r3, [pc, #20]	; (8010590 <std+0x38>)
 801057c:	6263      	str	r3, [r4, #36]	; 0x24
 801057e:	4b05      	ldr	r3, [pc, #20]	; (8010594 <std+0x3c>)
 8010580:	62a3      	str	r3, [r4, #40]	; 0x28
 8010582:	4b05      	ldr	r3, [pc, #20]	; (8010598 <std+0x40>)
 8010584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010586:	4b05      	ldr	r3, [pc, #20]	; (801059c <std+0x44>)
 8010588:	6224      	str	r4, [r4, #32]
 801058a:	6323      	str	r3, [r4, #48]	; 0x30
 801058c:	bd10      	pop	{r4, pc}
 801058e:	bf00      	nop
 8010590:	080108a5 	.word	0x080108a5
 8010594:	080108c7 	.word	0x080108c7
 8010598:	080108ff 	.word	0x080108ff
 801059c:	08010923 	.word	0x08010923

080105a0 <_cleanup_r>:
 80105a0:	4901      	ldr	r1, [pc, #4]	; (80105a8 <_cleanup_r+0x8>)
 80105a2:	f000 b8af 	b.w	8010704 <_fwalk_reent>
 80105a6:	bf00      	nop
 80105a8:	080104e1 	.word	0x080104e1

080105ac <__sfmoreglue>:
 80105ac:	b570      	push	{r4, r5, r6, lr}
 80105ae:	2268      	movs	r2, #104	; 0x68
 80105b0:	1e4d      	subs	r5, r1, #1
 80105b2:	4355      	muls	r5, r2
 80105b4:	460e      	mov	r6, r1
 80105b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80105ba:	f7fd fbbd 	bl	800dd38 <_malloc_r>
 80105be:	4604      	mov	r4, r0
 80105c0:	b140      	cbz	r0, 80105d4 <__sfmoreglue+0x28>
 80105c2:	2100      	movs	r1, #0
 80105c4:	e9c0 1600 	strd	r1, r6, [r0]
 80105c8:	300c      	adds	r0, #12
 80105ca:	60a0      	str	r0, [r4, #8]
 80105cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80105d0:	f7fd fb3e 	bl	800dc50 <memset>
 80105d4:	4620      	mov	r0, r4
 80105d6:	bd70      	pop	{r4, r5, r6, pc}

080105d8 <__sfp_lock_acquire>:
 80105d8:	4801      	ldr	r0, [pc, #4]	; (80105e0 <__sfp_lock_acquire+0x8>)
 80105da:	f7ff bc6e 	b.w	800feba <__retarget_lock_acquire_recursive>
 80105de:	bf00      	nop
 80105e0:	20014049 	.word	0x20014049

080105e4 <__sfp_lock_release>:
 80105e4:	4801      	ldr	r0, [pc, #4]	; (80105ec <__sfp_lock_release+0x8>)
 80105e6:	f7ff bc69 	b.w	800febc <__retarget_lock_release_recursive>
 80105ea:	bf00      	nop
 80105ec:	20014049 	.word	0x20014049

080105f0 <__sinit_lock_acquire>:
 80105f0:	4801      	ldr	r0, [pc, #4]	; (80105f8 <__sinit_lock_acquire+0x8>)
 80105f2:	f7ff bc62 	b.w	800feba <__retarget_lock_acquire_recursive>
 80105f6:	bf00      	nop
 80105f8:	2001404a 	.word	0x2001404a

080105fc <__sinit_lock_release>:
 80105fc:	4801      	ldr	r0, [pc, #4]	; (8010604 <__sinit_lock_release+0x8>)
 80105fe:	f7ff bc5d 	b.w	800febc <__retarget_lock_release_recursive>
 8010602:	bf00      	nop
 8010604:	2001404a 	.word	0x2001404a

08010608 <__sinit>:
 8010608:	b510      	push	{r4, lr}
 801060a:	4604      	mov	r4, r0
 801060c:	f7ff fff0 	bl	80105f0 <__sinit_lock_acquire>
 8010610:	69a3      	ldr	r3, [r4, #24]
 8010612:	b11b      	cbz	r3, 801061c <__sinit+0x14>
 8010614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010618:	f7ff bff0 	b.w	80105fc <__sinit_lock_release>
 801061c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010620:	6523      	str	r3, [r4, #80]	; 0x50
 8010622:	4b13      	ldr	r3, [pc, #76]	; (8010670 <__sinit+0x68>)
 8010624:	4a13      	ldr	r2, [pc, #76]	; (8010674 <__sinit+0x6c>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	62a2      	str	r2, [r4, #40]	; 0x28
 801062a:	42a3      	cmp	r3, r4
 801062c:	bf04      	itt	eq
 801062e:	2301      	moveq	r3, #1
 8010630:	61a3      	streq	r3, [r4, #24]
 8010632:	4620      	mov	r0, r4
 8010634:	f000 f820 	bl	8010678 <__sfp>
 8010638:	6060      	str	r0, [r4, #4]
 801063a:	4620      	mov	r0, r4
 801063c:	f000 f81c 	bl	8010678 <__sfp>
 8010640:	60a0      	str	r0, [r4, #8]
 8010642:	4620      	mov	r0, r4
 8010644:	f000 f818 	bl	8010678 <__sfp>
 8010648:	2200      	movs	r2, #0
 801064a:	60e0      	str	r0, [r4, #12]
 801064c:	2104      	movs	r1, #4
 801064e:	6860      	ldr	r0, [r4, #4]
 8010650:	f7ff ff82 	bl	8010558 <std>
 8010654:	68a0      	ldr	r0, [r4, #8]
 8010656:	2201      	movs	r2, #1
 8010658:	2109      	movs	r1, #9
 801065a:	f7ff ff7d 	bl	8010558 <std>
 801065e:	68e0      	ldr	r0, [r4, #12]
 8010660:	2202      	movs	r2, #2
 8010662:	2112      	movs	r1, #18
 8010664:	f7ff ff78 	bl	8010558 <std>
 8010668:	2301      	movs	r3, #1
 801066a:	61a3      	str	r3, [r4, #24]
 801066c:	e7d2      	b.n	8010614 <__sinit+0xc>
 801066e:	bf00      	nop
 8010670:	08013a50 	.word	0x08013a50
 8010674:	080105a1 	.word	0x080105a1

08010678 <__sfp>:
 8010678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067a:	4607      	mov	r7, r0
 801067c:	f7ff ffac 	bl	80105d8 <__sfp_lock_acquire>
 8010680:	4b1e      	ldr	r3, [pc, #120]	; (80106fc <__sfp+0x84>)
 8010682:	681e      	ldr	r6, [r3, #0]
 8010684:	69b3      	ldr	r3, [r6, #24]
 8010686:	b913      	cbnz	r3, 801068e <__sfp+0x16>
 8010688:	4630      	mov	r0, r6
 801068a:	f7ff ffbd 	bl	8010608 <__sinit>
 801068e:	3648      	adds	r6, #72	; 0x48
 8010690:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010694:	3b01      	subs	r3, #1
 8010696:	d503      	bpl.n	80106a0 <__sfp+0x28>
 8010698:	6833      	ldr	r3, [r6, #0]
 801069a:	b30b      	cbz	r3, 80106e0 <__sfp+0x68>
 801069c:	6836      	ldr	r6, [r6, #0]
 801069e:	e7f7      	b.n	8010690 <__sfp+0x18>
 80106a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80106a4:	b9d5      	cbnz	r5, 80106dc <__sfp+0x64>
 80106a6:	4b16      	ldr	r3, [pc, #88]	; (8010700 <__sfp+0x88>)
 80106a8:	60e3      	str	r3, [r4, #12]
 80106aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80106ae:	6665      	str	r5, [r4, #100]	; 0x64
 80106b0:	f7ff fc02 	bl	800feb8 <__retarget_lock_init_recursive>
 80106b4:	f7ff ff96 	bl	80105e4 <__sfp_lock_release>
 80106b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80106bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80106c0:	6025      	str	r5, [r4, #0]
 80106c2:	61a5      	str	r5, [r4, #24]
 80106c4:	2208      	movs	r2, #8
 80106c6:	4629      	mov	r1, r5
 80106c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106cc:	f7fd fac0 	bl	800dc50 <memset>
 80106d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80106d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80106d8:	4620      	mov	r0, r4
 80106da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106dc:	3468      	adds	r4, #104	; 0x68
 80106de:	e7d9      	b.n	8010694 <__sfp+0x1c>
 80106e0:	2104      	movs	r1, #4
 80106e2:	4638      	mov	r0, r7
 80106e4:	f7ff ff62 	bl	80105ac <__sfmoreglue>
 80106e8:	4604      	mov	r4, r0
 80106ea:	6030      	str	r0, [r6, #0]
 80106ec:	2800      	cmp	r0, #0
 80106ee:	d1d5      	bne.n	801069c <__sfp+0x24>
 80106f0:	f7ff ff78 	bl	80105e4 <__sfp_lock_release>
 80106f4:	230c      	movs	r3, #12
 80106f6:	603b      	str	r3, [r7, #0]
 80106f8:	e7ee      	b.n	80106d8 <__sfp+0x60>
 80106fa:	bf00      	nop
 80106fc:	08013a50 	.word	0x08013a50
 8010700:	ffff0001 	.word	0xffff0001

08010704 <_fwalk_reent>:
 8010704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010708:	4606      	mov	r6, r0
 801070a:	4688      	mov	r8, r1
 801070c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010710:	2700      	movs	r7, #0
 8010712:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010716:	f1b9 0901 	subs.w	r9, r9, #1
 801071a:	d505      	bpl.n	8010728 <_fwalk_reent+0x24>
 801071c:	6824      	ldr	r4, [r4, #0]
 801071e:	2c00      	cmp	r4, #0
 8010720:	d1f7      	bne.n	8010712 <_fwalk_reent+0xe>
 8010722:	4638      	mov	r0, r7
 8010724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010728:	89ab      	ldrh	r3, [r5, #12]
 801072a:	2b01      	cmp	r3, #1
 801072c:	d907      	bls.n	801073e <_fwalk_reent+0x3a>
 801072e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010732:	3301      	adds	r3, #1
 8010734:	d003      	beq.n	801073e <_fwalk_reent+0x3a>
 8010736:	4629      	mov	r1, r5
 8010738:	4630      	mov	r0, r6
 801073a:	47c0      	blx	r8
 801073c:	4307      	orrs	r7, r0
 801073e:	3568      	adds	r5, #104	; 0x68
 8010740:	e7e9      	b.n	8010716 <_fwalk_reent+0x12>

08010742 <__swhatbuf_r>:
 8010742:	b570      	push	{r4, r5, r6, lr}
 8010744:	460e      	mov	r6, r1
 8010746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801074a:	2900      	cmp	r1, #0
 801074c:	b096      	sub	sp, #88	; 0x58
 801074e:	4614      	mov	r4, r2
 8010750:	461d      	mov	r5, r3
 8010752:	da08      	bge.n	8010766 <__swhatbuf_r+0x24>
 8010754:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	602a      	str	r2, [r5, #0]
 801075c:	061a      	lsls	r2, r3, #24
 801075e:	d410      	bmi.n	8010782 <__swhatbuf_r+0x40>
 8010760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010764:	e00e      	b.n	8010784 <__swhatbuf_r+0x42>
 8010766:	466a      	mov	r2, sp
 8010768:	f000 f902 	bl	8010970 <_fstat_r>
 801076c:	2800      	cmp	r0, #0
 801076e:	dbf1      	blt.n	8010754 <__swhatbuf_r+0x12>
 8010770:	9a01      	ldr	r2, [sp, #4]
 8010772:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010776:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801077a:	425a      	negs	r2, r3
 801077c:	415a      	adcs	r2, r3
 801077e:	602a      	str	r2, [r5, #0]
 8010780:	e7ee      	b.n	8010760 <__swhatbuf_r+0x1e>
 8010782:	2340      	movs	r3, #64	; 0x40
 8010784:	2000      	movs	r0, #0
 8010786:	6023      	str	r3, [r4, #0]
 8010788:	b016      	add	sp, #88	; 0x58
 801078a:	bd70      	pop	{r4, r5, r6, pc}

0801078c <__smakebuf_r>:
 801078c:	898b      	ldrh	r3, [r1, #12]
 801078e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010790:	079d      	lsls	r5, r3, #30
 8010792:	4606      	mov	r6, r0
 8010794:	460c      	mov	r4, r1
 8010796:	d507      	bpl.n	80107a8 <__smakebuf_r+0x1c>
 8010798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801079c:	6023      	str	r3, [r4, #0]
 801079e:	6123      	str	r3, [r4, #16]
 80107a0:	2301      	movs	r3, #1
 80107a2:	6163      	str	r3, [r4, #20]
 80107a4:	b002      	add	sp, #8
 80107a6:	bd70      	pop	{r4, r5, r6, pc}
 80107a8:	ab01      	add	r3, sp, #4
 80107aa:	466a      	mov	r2, sp
 80107ac:	f7ff ffc9 	bl	8010742 <__swhatbuf_r>
 80107b0:	9900      	ldr	r1, [sp, #0]
 80107b2:	4605      	mov	r5, r0
 80107b4:	4630      	mov	r0, r6
 80107b6:	f7fd fabf 	bl	800dd38 <_malloc_r>
 80107ba:	b948      	cbnz	r0, 80107d0 <__smakebuf_r+0x44>
 80107bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107c0:	059a      	lsls	r2, r3, #22
 80107c2:	d4ef      	bmi.n	80107a4 <__smakebuf_r+0x18>
 80107c4:	f023 0303 	bic.w	r3, r3, #3
 80107c8:	f043 0302 	orr.w	r3, r3, #2
 80107cc:	81a3      	strh	r3, [r4, #12]
 80107ce:	e7e3      	b.n	8010798 <__smakebuf_r+0xc>
 80107d0:	4b0d      	ldr	r3, [pc, #52]	; (8010808 <__smakebuf_r+0x7c>)
 80107d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80107d4:	89a3      	ldrh	r3, [r4, #12]
 80107d6:	6020      	str	r0, [r4, #0]
 80107d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107dc:	81a3      	strh	r3, [r4, #12]
 80107de:	9b00      	ldr	r3, [sp, #0]
 80107e0:	6163      	str	r3, [r4, #20]
 80107e2:	9b01      	ldr	r3, [sp, #4]
 80107e4:	6120      	str	r0, [r4, #16]
 80107e6:	b15b      	cbz	r3, 8010800 <__smakebuf_r+0x74>
 80107e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107ec:	4630      	mov	r0, r6
 80107ee:	f000 f8d1 	bl	8010994 <_isatty_r>
 80107f2:	b128      	cbz	r0, 8010800 <__smakebuf_r+0x74>
 80107f4:	89a3      	ldrh	r3, [r4, #12]
 80107f6:	f023 0303 	bic.w	r3, r3, #3
 80107fa:	f043 0301 	orr.w	r3, r3, #1
 80107fe:	81a3      	strh	r3, [r4, #12]
 8010800:	89a0      	ldrh	r0, [r4, #12]
 8010802:	4305      	orrs	r5, r0
 8010804:	81a5      	strh	r5, [r4, #12]
 8010806:	e7cd      	b.n	80107a4 <__smakebuf_r+0x18>
 8010808:	080105a1 	.word	0x080105a1

0801080c <_malloc_usable_size_r>:
 801080c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010810:	1f18      	subs	r0, r3, #4
 8010812:	2b00      	cmp	r3, #0
 8010814:	bfbc      	itt	lt
 8010816:	580b      	ldrlt	r3, [r1, r0]
 8010818:	18c0      	addlt	r0, r0, r3
 801081a:	4770      	bx	lr

0801081c <_raise_r>:
 801081c:	291f      	cmp	r1, #31
 801081e:	b538      	push	{r3, r4, r5, lr}
 8010820:	4604      	mov	r4, r0
 8010822:	460d      	mov	r5, r1
 8010824:	d904      	bls.n	8010830 <_raise_r+0x14>
 8010826:	2316      	movs	r3, #22
 8010828:	6003      	str	r3, [r0, #0]
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010832:	b112      	cbz	r2, 801083a <_raise_r+0x1e>
 8010834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010838:	b94b      	cbnz	r3, 801084e <_raise_r+0x32>
 801083a:	4620      	mov	r0, r4
 801083c:	f000 f830 	bl	80108a0 <_getpid_r>
 8010840:	462a      	mov	r2, r5
 8010842:	4601      	mov	r1, r0
 8010844:	4620      	mov	r0, r4
 8010846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801084a:	f000 b817 	b.w	801087c <_kill_r>
 801084e:	2b01      	cmp	r3, #1
 8010850:	d00a      	beq.n	8010868 <_raise_r+0x4c>
 8010852:	1c59      	adds	r1, r3, #1
 8010854:	d103      	bne.n	801085e <_raise_r+0x42>
 8010856:	2316      	movs	r3, #22
 8010858:	6003      	str	r3, [r0, #0]
 801085a:	2001      	movs	r0, #1
 801085c:	e7e7      	b.n	801082e <_raise_r+0x12>
 801085e:	2400      	movs	r4, #0
 8010860:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010864:	4628      	mov	r0, r5
 8010866:	4798      	blx	r3
 8010868:	2000      	movs	r0, #0
 801086a:	e7e0      	b.n	801082e <_raise_r+0x12>

0801086c <raise>:
 801086c:	4b02      	ldr	r3, [pc, #8]	; (8010878 <raise+0xc>)
 801086e:	4601      	mov	r1, r0
 8010870:	6818      	ldr	r0, [r3, #0]
 8010872:	f7ff bfd3 	b.w	801081c <_raise_r>
 8010876:	bf00      	nop
 8010878:	20000040 	.word	0x20000040

0801087c <_kill_r>:
 801087c:	b538      	push	{r3, r4, r5, lr}
 801087e:	4d07      	ldr	r5, [pc, #28]	; (801089c <_kill_r+0x20>)
 8010880:	2300      	movs	r3, #0
 8010882:	4604      	mov	r4, r0
 8010884:	4608      	mov	r0, r1
 8010886:	4611      	mov	r1, r2
 8010888:	602b      	str	r3, [r5, #0]
 801088a:	f7f3 fefd 	bl	8004688 <_kill>
 801088e:	1c43      	adds	r3, r0, #1
 8010890:	d102      	bne.n	8010898 <_kill_r+0x1c>
 8010892:	682b      	ldr	r3, [r5, #0]
 8010894:	b103      	cbz	r3, 8010898 <_kill_r+0x1c>
 8010896:	6023      	str	r3, [r4, #0]
 8010898:	bd38      	pop	{r3, r4, r5, pc}
 801089a:	bf00      	nop
 801089c:	20014044 	.word	0x20014044

080108a0 <_getpid_r>:
 80108a0:	f7f3 beea 	b.w	8004678 <_getpid>

080108a4 <__sread>:
 80108a4:	b510      	push	{r4, lr}
 80108a6:	460c      	mov	r4, r1
 80108a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ac:	f000 f894 	bl	80109d8 <_read_r>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	bfab      	itete	ge
 80108b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108b6:	89a3      	ldrhlt	r3, [r4, #12]
 80108b8:	181b      	addge	r3, r3, r0
 80108ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108be:	bfac      	ite	ge
 80108c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80108c2:	81a3      	strhlt	r3, [r4, #12]
 80108c4:	bd10      	pop	{r4, pc}

080108c6 <__swrite>:
 80108c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ca:	461f      	mov	r7, r3
 80108cc:	898b      	ldrh	r3, [r1, #12]
 80108ce:	05db      	lsls	r3, r3, #23
 80108d0:	4605      	mov	r5, r0
 80108d2:	460c      	mov	r4, r1
 80108d4:	4616      	mov	r6, r2
 80108d6:	d505      	bpl.n	80108e4 <__swrite+0x1e>
 80108d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108dc:	2302      	movs	r3, #2
 80108de:	2200      	movs	r2, #0
 80108e0:	f000 f868 	bl	80109b4 <_lseek_r>
 80108e4:	89a3      	ldrh	r3, [r4, #12]
 80108e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80108ee:	81a3      	strh	r3, [r4, #12]
 80108f0:	4632      	mov	r2, r6
 80108f2:	463b      	mov	r3, r7
 80108f4:	4628      	mov	r0, r5
 80108f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108fa:	f000 b817 	b.w	801092c <_write_r>

080108fe <__sseek>:
 80108fe:	b510      	push	{r4, lr}
 8010900:	460c      	mov	r4, r1
 8010902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010906:	f000 f855 	bl	80109b4 <_lseek_r>
 801090a:	1c43      	adds	r3, r0, #1
 801090c:	89a3      	ldrh	r3, [r4, #12]
 801090e:	bf15      	itete	ne
 8010910:	6560      	strne	r0, [r4, #84]	; 0x54
 8010912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801091a:	81a3      	strheq	r3, [r4, #12]
 801091c:	bf18      	it	ne
 801091e:	81a3      	strhne	r3, [r4, #12]
 8010920:	bd10      	pop	{r4, pc}

08010922 <__sclose>:
 8010922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010926:	f000 b813 	b.w	8010950 <_close_r>
	...

0801092c <_write_r>:
 801092c:	b538      	push	{r3, r4, r5, lr}
 801092e:	4d07      	ldr	r5, [pc, #28]	; (801094c <_write_r+0x20>)
 8010930:	4604      	mov	r4, r0
 8010932:	4608      	mov	r0, r1
 8010934:	4611      	mov	r1, r2
 8010936:	2200      	movs	r2, #0
 8010938:	602a      	str	r2, [r5, #0]
 801093a:	461a      	mov	r2, r3
 801093c:	f7f3 fedb 	bl	80046f6 <_write>
 8010940:	1c43      	adds	r3, r0, #1
 8010942:	d102      	bne.n	801094a <_write_r+0x1e>
 8010944:	682b      	ldr	r3, [r5, #0]
 8010946:	b103      	cbz	r3, 801094a <_write_r+0x1e>
 8010948:	6023      	str	r3, [r4, #0]
 801094a:	bd38      	pop	{r3, r4, r5, pc}
 801094c:	20014044 	.word	0x20014044

08010950 <_close_r>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	4d06      	ldr	r5, [pc, #24]	; (801096c <_close_r+0x1c>)
 8010954:	2300      	movs	r3, #0
 8010956:	4604      	mov	r4, r0
 8010958:	4608      	mov	r0, r1
 801095a:	602b      	str	r3, [r5, #0]
 801095c:	f7f3 fee7 	bl	800472e <_close>
 8010960:	1c43      	adds	r3, r0, #1
 8010962:	d102      	bne.n	801096a <_close_r+0x1a>
 8010964:	682b      	ldr	r3, [r5, #0]
 8010966:	b103      	cbz	r3, 801096a <_close_r+0x1a>
 8010968:	6023      	str	r3, [r4, #0]
 801096a:	bd38      	pop	{r3, r4, r5, pc}
 801096c:	20014044 	.word	0x20014044

08010970 <_fstat_r>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4d07      	ldr	r5, [pc, #28]	; (8010990 <_fstat_r+0x20>)
 8010974:	2300      	movs	r3, #0
 8010976:	4604      	mov	r4, r0
 8010978:	4608      	mov	r0, r1
 801097a:	4611      	mov	r1, r2
 801097c:	602b      	str	r3, [r5, #0]
 801097e:	f7f3 fee2 	bl	8004746 <_fstat>
 8010982:	1c43      	adds	r3, r0, #1
 8010984:	d102      	bne.n	801098c <_fstat_r+0x1c>
 8010986:	682b      	ldr	r3, [r5, #0]
 8010988:	b103      	cbz	r3, 801098c <_fstat_r+0x1c>
 801098a:	6023      	str	r3, [r4, #0]
 801098c:	bd38      	pop	{r3, r4, r5, pc}
 801098e:	bf00      	nop
 8010990:	20014044 	.word	0x20014044

08010994 <_isatty_r>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	4d06      	ldr	r5, [pc, #24]	; (80109b0 <_isatty_r+0x1c>)
 8010998:	2300      	movs	r3, #0
 801099a:	4604      	mov	r4, r0
 801099c:	4608      	mov	r0, r1
 801099e:	602b      	str	r3, [r5, #0]
 80109a0:	f7f3 fee1 	bl	8004766 <_isatty>
 80109a4:	1c43      	adds	r3, r0, #1
 80109a6:	d102      	bne.n	80109ae <_isatty_r+0x1a>
 80109a8:	682b      	ldr	r3, [r5, #0]
 80109aa:	b103      	cbz	r3, 80109ae <_isatty_r+0x1a>
 80109ac:	6023      	str	r3, [r4, #0]
 80109ae:	bd38      	pop	{r3, r4, r5, pc}
 80109b0:	20014044 	.word	0x20014044

080109b4 <_lseek_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	4d07      	ldr	r5, [pc, #28]	; (80109d4 <_lseek_r+0x20>)
 80109b8:	4604      	mov	r4, r0
 80109ba:	4608      	mov	r0, r1
 80109bc:	4611      	mov	r1, r2
 80109be:	2200      	movs	r2, #0
 80109c0:	602a      	str	r2, [r5, #0]
 80109c2:	461a      	mov	r2, r3
 80109c4:	f7f3 feda 	bl	800477c <_lseek>
 80109c8:	1c43      	adds	r3, r0, #1
 80109ca:	d102      	bne.n	80109d2 <_lseek_r+0x1e>
 80109cc:	682b      	ldr	r3, [r5, #0]
 80109ce:	b103      	cbz	r3, 80109d2 <_lseek_r+0x1e>
 80109d0:	6023      	str	r3, [r4, #0]
 80109d2:	bd38      	pop	{r3, r4, r5, pc}
 80109d4:	20014044 	.word	0x20014044

080109d8 <_read_r>:
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	4d07      	ldr	r5, [pc, #28]	; (80109f8 <_read_r+0x20>)
 80109dc:	4604      	mov	r4, r0
 80109de:	4608      	mov	r0, r1
 80109e0:	4611      	mov	r1, r2
 80109e2:	2200      	movs	r2, #0
 80109e4:	602a      	str	r2, [r5, #0]
 80109e6:	461a      	mov	r2, r3
 80109e8:	f7f3 fe68 	bl	80046bc <_read>
 80109ec:	1c43      	adds	r3, r0, #1
 80109ee:	d102      	bne.n	80109f6 <_read_r+0x1e>
 80109f0:	682b      	ldr	r3, [r5, #0]
 80109f2:	b103      	cbz	r3, 80109f6 <_read_r+0x1e>
 80109f4:	6023      	str	r3, [r4, #0]
 80109f6:	bd38      	pop	{r3, r4, r5, pc}
 80109f8:	20014044 	.word	0x20014044
 80109fc:	00000000 	.word	0x00000000

08010a00 <cos>:
 8010a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a02:	ec53 2b10 	vmov	r2, r3, d0
 8010a06:	4826      	ldr	r0, [pc, #152]	; (8010aa0 <cos+0xa0>)
 8010a08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010a0c:	4281      	cmp	r1, r0
 8010a0e:	dc06      	bgt.n	8010a1e <cos+0x1e>
 8010a10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010a98 <cos+0x98>
 8010a14:	b005      	add	sp, #20
 8010a16:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a1a:	f001 bcd5 	b.w	80123c8 <__kernel_cos>
 8010a1e:	4821      	ldr	r0, [pc, #132]	; (8010aa4 <cos+0xa4>)
 8010a20:	4281      	cmp	r1, r0
 8010a22:	dd09      	ble.n	8010a38 <cos+0x38>
 8010a24:	ee10 0a10 	vmov	r0, s0
 8010a28:	4619      	mov	r1, r3
 8010a2a:	f7ef fc45 	bl	80002b8 <__aeabi_dsub>
 8010a2e:	ec41 0b10 	vmov	d0, r0, r1
 8010a32:	b005      	add	sp, #20
 8010a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a38:	4668      	mov	r0, sp
 8010a3a:	f001 fa05 	bl	8011e48 <__ieee754_rem_pio2>
 8010a3e:	f000 0003 	and.w	r0, r0, #3
 8010a42:	2801      	cmp	r0, #1
 8010a44:	d00b      	beq.n	8010a5e <cos+0x5e>
 8010a46:	2802      	cmp	r0, #2
 8010a48:	d016      	beq.n	8010a78 <cos+0x78>
 8010a4a:	b9e0      	cbnz	r0, 8010a86 <cos+0x86>
 8010a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a50:	ed9d 0b00 	vldr	d0, [sp]
 8010a54:	f001 fcb8 	bl	80123c8 <__kernel_cos>
 8010a58:	ec51 0b10 	vmov	r0, r1, d0
 8010a5c:	e7e7      	b.n	8010a2e <cos+0x2e>
 8010a5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a62:	ed9d 0b00 	vldr	d0, [sp]
 8010a66:	f002 f8c7 	bl	8012bf8 <__kernel_sin>
 8010a6a:	ec53 2b10 	vmov	r2, r3, d0
 8010a6e:	ee10 0a10 	vmov	r0, s0
 8010a72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010a76:	e7da      	b.n	8010a2e <cos+0x2e>
 8010a78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a7c:	ed9d 0b00 	vldr	d0, [sp]
 8010a80:	f001 fca2 	bl	80123c8 <__kernel_cos>
 8010a84:	e7f1      	b.n	8010a6a <cos+0x6a>
 8010a86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a8a:	ed9d 0b00 	vldr	d0, [sp]
 8010a8e:	2001      	movs	r0, #1
 8010a90:	f002 f8b2 	bl	8012bf8 <__kernel_sin>
 8010a94:	e7e0      	b.n	8010a58 <cos+0x58>
 8010a96:	bf00      	nop
	...
 8010aa0:	3fe921fb 	.word	0x3fe921fb
 8010aa4:	7fefffff 	.word	0x7fefffff

08010aa8 <round>:
 8010aa8:	ec51 0b10 	vmov	r0, r1, d0
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8010ab2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8010ab6:	2c13      	cmp	r4, #19
 8010ab8:	ee10 2a10 	vmov	r2, s0
 8010abc:	460b      	mov	r3, r1
 8010abe:	dc19      	bgt.n	8010af4 <round+0x4c>
 8010ac0:	2c00      	cmp	r4, #0
 8010ac2:	da09      	bge.n	8010ad8 <round+0x30>
 8010ac4:	3401      	adds	r4, #1
 8010ac6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010aca:	d103      	bne.n	8010ad4 <round+0x2c>
 8010acc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010ad0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	e028      	b.n	8010b2a <round+0x82>
 8010ad8:	4d15      	ldr	r5, [pc, #84]	; (8010b30 <round+0x88>)
 8010ada:	4125      	asrs	r5, r4
 8010adc:	ea01 0605 	and.w	r6, r1, r5
 8010ae0:	4332      	orrs	r2, r6
 8010ae2:	d00e      	beq.n	8010b02 <round+0x5a>
 8010ae4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010ae8:	fa42 f404 	asr.w	r4, r2, r4
 8010aec:	4423      	add	r3, r4
 8010aee:	ea23 0305 	bic.w	r3, r3, r5
 8010af2:	e7ef      	b.n	8010ad4 <round+0x2c>
 8010af4:	2c33      	cmp	r4, #51	; 0x33
 8010af6:	dd07      	ble.n	8010b08 <round+0x60>
 8010af8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010afc:	d101      	bne.n	8010b02 <round+0x5a>
 8010afe:	f7ef fbdd 	bl	80002bc <__adddf3>
 8010b02:	ec41 0b10 	vmov	d0, r0, r1
 8010b06:	bd70      	pop	{r4, r5, r6, pc}
 8010b08:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8010b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8010b10:	40f5      	lsrs	r5, r6
 8010b12:	4228      	tst	r0, r5
 8010b14:	d0f5      	beq.n	8010b02 <round+0x5a>
 8010b16:	2101      	movs	r1, #1
 8010b18:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010b1c:	fa01 f404 	lsl.w	r4, r1, r4
 8010b20:	1912      	adds	r2, r2, r4
 8010b22:	bf28      	it	cs
 8010b24:	185b      	addcs	r3, r3, r1
 8010b26:	ea22 0205 	bic.w	r2, r2, r5
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	e7e8      	b.n	8010b02 <round+0x5a>
 8010b30:	000fffff 	.word	0x000fffff
 8010b34:	00000000 	.word	0x00000000

08010b38 <sin>:
 8010b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b3a:	ec53 2b10 	vmov	r2, r3, d0
 8010b3e:	4828      	ldr	r0, [pc, #160]	; (8010be0 <sin+0xa8>)
 8010b40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b44:	4281      	cmp	r1, r0
 8010b46:	dc07      	bgt.n	8010b58 <sin+0x20>
 8010b48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010bd8 <sin+0xa0>
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	b005      	add	sp, #20
 8010b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b54:	f002 b850 	b.w	8012bf8 <__kernel_sin>
 8010b58:	4822      	ldr	r0, [pc, #136]	; (8010be4 <sin+0xac>)
 8010b5a:	4281      	cmp	r1, r0
 8010b5c:	dd09      	ble.n	8010b72 <sin+0x3a>
 8010b5e:	ee10 0a10 	vmov	r0, s0
 8010b62:	4619      	mov	r1, r3
 8010b64:	f7ef fba8 	bl	80002b8 <__aeabi_dsub>
 8010b68:	ec41 0b10 	vmov	d0, r0, r1
 8010b6c:	b005      	add	sp, #20
 8010b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b72:	4668      	mov	r0, sp
 8010b74:	f001 f968 	bl	8011e48 <__ieee754_rem_pio2>
 8010b78:	f000 0003 	and.w	r0, r0, #3
 8010b7c:	2801      	cmp	r0, #1
 8010b7e:	d00c      	beq.n	8010b9a <sin+0x62>
 8010b80:	2802      	cmp	r0, #2
 8010b82:	d011      	beq.n	8010ba8 <sin+0x70>
 8010b84:	b9f0      	cbnz	r0, 8010bc4 <sin+0x8c>
 8010b86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b8a:	ed9d 0b00 	vldr	d0, [sp]
 8010b8e:	2001      	movs	r0, #1
 8010b90:	f002 f832 	bl	8012bf8 <__kernel_sin>
 8010b94:	ec51 0b10 	vmov	r0, r1, d0
 8010b98:	e7e6      	b.n	8010b68 <sin+0x30>
 8010b9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b9e:	ed9d 0b00 	vldr	d0, [sp]
 8010ba2:	f001 fc11 	bl	80123c8 <__kernel_cos>
 8010ba6:	e7f5      	b.n	8010b94 <sin+0x5c>
 8010ba8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bac:	ed9d 0b00 	vldr	d0, [sp]
 8010bb0:	2001      	movs	r0, #1
 8010bb2:	f002 f821 	bl	8012bf8 <__kernel_sin>
 8010bb6:	ec53 2b10 	vmov	r2, r3, d0
 8010bba:	ee10 0a10 	vmov	r0, s0
 8010bbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010bc2:	e7d1      	b.n	8010b68 <sin+0x30>
 8010bc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bc8:	ed9d 0b00 	vldr	d0, [sp]
 8010bcc:	f001 fbfc 	bl	80123c8 <__kernel_cos>
 8010bd0:	e7f1      	b.n	8010bb6 <sin+0x7e>
 8010bd2:	bf00      	nop
 8010bd4:	f3af 8000 	nop.w
	...
 8010be0:	3fe921fb 	.word	0x3fe921fb
 8010be4:	7fefffff 	.word	0x7fefffff

08010be8 <acos>:
 8010be8:	b538      	push	{r3, r4, r5, lr}
 8010bea:	ed2d 8b02 	vpush	{d8}
 8010bee:	ec55 4b10 	vmov	r4, r5, d0
 8010bf2:	f000 f8cd 	bl	8010d90 <__ieee754_acos>
 8010bf6:	4622      	mov	r2, r4
 8010bf8:	462b      	mov	r3, r5
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8010c02:	eef0 8a60 	vmov.f32	s17, s1
 8010c06:	f7ef ffa9 	bl	8000b5c <__aeabi_dcmpun>
 8010c0a:	b9a8      	cbnz	r0, 8010c38 <acos+0x50>
 8010c0c:	ec45 4b10 	vmov	d0, r4, r5
 8010c10:	f002 fa82 	bl	8013118 <fabs>
 8010c14:	4b0c      	ldr	r3, [pc, #48]	; (8010c48 <acos+0x60>)
 8010c16:	ec51 0b10 	vmov	r0, r1, d0
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f7ef ff94 	bl	8000b48 <__aeabi_dcmpgt>
 8010c20:	b150      	cbz	r0, 8010c38 <acos+0x50>
 8010c22:	f7fc ffd5 	bl	800dbd0 <__errno>
 8010c26:	ecbd 8b02 	vpop	{d8}
 8010c2a:	2321      	movs	r3, #33	; 0x21
 8010c2c:	6003      	str	r3, [r0, #0]
 8010c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c32:	4806      	ldr	r0, [pc, #24]	; (8010c4c <acos+0x64>)
 8010c34:	f002 bb04 	b.w	8013240 <nan>
 8010c38:	eeb0 0a48 	vmov.f32	s0, s16
 8010c3c:	eef0 0a68 	vmov.f32	s1, s17
 8010c40:	ecbd 8b02 	vpop	{d8}
 8010c44:	bd38      	pop	{r3, r4, r5, pc}
 8010c46:	bf00      	nop
 8010c48:	3ff00000 	.word	0x3ff00000
 8010c4c:	08013cc0 	.word	0x08013cc0

08010c50 <atan2>:
 8010c50:	f000 bafe 	b.w	8011250 <__ieee754_atan2>

08010c54 <pow>:
 8010c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c56:	ed2d 8b02 	vpush	{d8}
 8010c5a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c5e:	eef0 8a60 	vmov.f32	s17, s1
 8010c62:	ec55 4b11 	vmov	r4, r5, d1
 8010c66:	f000 fbbf 	bl	80113e8 <__ieee754_pow>
 8010c6a:	4622      	mov	r2, r4
 8010c6c:	462b      	mov	r3, r5
 8010c6e:	4620      	mov	r0, r4
 8010c70:	4629      	mov	r1, r5
 8010c72:	ec57 6b10 	vmov	r6, r7, d0
 8010c76:	f7ef ff71 	bl	8000b5c <__aeabi_dcmpun>
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d13b      	bne.n	8010cf6 <pow+0xa2>
 8010c7e:	ec51 0b18 	vmov	r0, r1, d8
 8010c82:	2200      	movs	r2, #0
 8010c84:	2300      	movs	r3, #0
 8010c86:	f7ef ff37 	bl	8000af8 <__aeabi_dcmpeq>
 8010c8a:	b1b8      	cbz	r0, 8010cbc <pow+0x68>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	2300      	movs	r3, #0
 8010c90:	4620      	mov	r0, r4
 8010c92:	4629      	mov	r1, r5
 8010c94:	f7ef ff30 	bl	8000af8 <__aeabi_dcmpeq>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d146      	bne.n	8010d2a <pow+0xd6>
 8010c9c:	ec45 4b10 	vmov	d0, r4, r5
 8010ca0:	f002 fa43 	bl	801312a <finite>
 8010ca4:	b338      	cbz	r0, 8010cf6 <pow+0xa2>
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	2300      	movs	r3, #0
 8010caa:	4620      	mov	r0, r4
 8010cac:	4629      	mov	r1, r5
 8010cae:	f7ef ff2d 	bl	8000b0c <__aeabi_dcmplt>
 8010cb2:	b300      	cbz	r0, 8010cf6 <pow+0xa2>
 8010cb4:	f7fc ff8c 	bl	800dbd0 <__errno>
 8010cb8:	2322      	movs	r3, #34	; 0x22
 8010cba:	e01b      	b.n	8010cf4 <pow+0xa0>
 8010cbc:	ec47 6b10 	vmov	d0, r6, r7
 8010cc0:	f002 fa33 	bl	801312a <finite>
 8010cc4:	b9e0      	cbnz	r0, 8010d00 <pow+0xac>
 8010cc6:	eeb0 0a48 	vmov.f32	s0, s16
 8010cca:	eef0 0a68 	vmov.f32	s1, s17
 8010cce:	f002 fa2c 	bl	801312a <finite>
 8010cd2:	b1a8      	cbz	r0, 8010d00 <pow+0xac>
 8010cd4:	ec45 4b10 	vmov	d0, r4, r5
 8010cd8:	f002 fa27 	bl	801312a <finite>
 8010cdc:	b180      	cbz	r0, 8010d00 <pow+0xac>
 8010cde:	4632      	mov	r2, r6
 8010ce0:	463b      	mov	r3, r7
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	f7ef ff39 	bl	8000b5c <__aeabi_dcmpun>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d0e2      	beq.n	8010cb4 <pow+0x60>
 8010cee:	f7fc ff6f 	bl	800dbd0 <__errno>
 8010cf2:	2321      	movs	r3, #33	; 0x21
 8010cf4:	6003      	str	r3, [r0, #0]
 8010cf6:	ecbd 8b02 	vpop	{d8}
 8010cfa:	ec47 6b10 	vmov	d0, r6, r7
 8010cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d00:	2200      	movs	r2, #0
 8010d02:	2300      	movs	r3, #0
 8010d04:	4630      	mov	r0, r6
 8010d06:	4639      	mov	r1, r7
 8010d08:	f7ef fef6 	bl	8000af8 <__aeabi_dcmpeq>
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	d0f2      	beq.n	8010cf6 <pow+0xa2>
 8010d10:	eeb0 0a48 	vmov.f32	s0, s16
 8010d14:	eef0 0a68 	vmov.f32	s1, s17
 8010d18:	f002 fa07 	bl	801312a <finite>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	d0ea      	beq.n	8010cf6 <pow+0xa2>
 8010d20:	ec45 4b10 	vmov	d0, r4, r5
 8010d24:	f002 fa01 	bl	801312a <finite>
 8010d28:	e7c3      	b.n	8010cb2 <pow+0x5e>
 8010d2a:	4f01      	ldr	r7, [pc, #4]	; (8010d30 <pow+0xdc>)
 8010d2c:	2600      	movs	r6, #0
 8010d2e:	e7e2      	b.n	8010cf6 <pow+0xa2>
 8010d30:	3ff00000 	.word	0x3ff00000

08010d34 <sqrt>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	ed2d 8b02 	vpush	{d8}
 8010d3a:	ec55 4b10 	vmov	r4, r5, d0
 8010d3e:	f001 fa8f 	bl	8012260 <__ieee754_sqrt>
 8010d42:	4622      	mov	r2, r4
 8010d44:	462b      	mov	r3, r5
 8010d46:	4620      	mov	r0, r4
 8010d48:	4629      	mov	r1, r5
 8010d4a:	eeb0 8a40 	vmov.f32	s16, s0
 8010d4e:	eef0 8a60 	vmov.f32	s17, s1
 8010d52:	f7ef ff03 	bl	8000b5c <__aeabi_dcmpun>
 8010d56:	b990      	cbnz	r0, 8010d7e <sqrt+0x4a>
 8010d58:	2200      	movs	r2, #0
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	4629      	mov	r1, r5
 8010d60:	f7ef fed4 	bl	8000b0c <__aeabi_dcmplt>
 8010d64:	b158      	cbz	r0, 8010d7e <sqrt+0x4a>
 8010d66:	f7fc ff33 	bl	800dbd0 <__errno>
 8010d6a:	2321      	movs	r3, #33	; 0x21
 8010d6c:	6003      	str	r3, [r0, #0]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	2300      	movs	r3, #0
 8010d72:	4610      	mov	r0, r2
 8010d74:	4619      	mov	r1, r3
 8010d76:	f7ef fd81 	bl	800087c <__aeabi_ddiv>
 8010d7a:	ec41 0b18 	vmov	d8, r0, r1
 8010d7e:	eeb0 0a48 	vmov.f32	s0, s16
 8010d82:	eef0 0a68 	vmov.f32	s1, s17
 8010d86:	ecbd 8b02 	vpop	{d8}
 8010d8a:	bd38      	pop	{r3, r4, r5, pc}
 8010d8c:	0000      	movs	r0, r0
	...

08010d90 <__ieee754_acos>:
 8010d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	ec55 4b10 	vmov	r4, r5, d0
 8010d98:	49b7      	ldr	r1, [pc, #732]	; (8011078 <__ieee754_acos+0x2e8>)
 8010d9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d9e:	428b      	cmp	r3, r1
 8010da0:	dd1b      	ble.n	8010dda <__ieee754_acos+0x4a>
 8010da2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010da6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010daa:	4323      	orrs	r3, r4
 8010dac:	d106      	bne.n	8010dbc <__ieee754_acos+0x2c>
 8010dae:	2d00      	cmp	r5, #0
 8010db0:	f300 8211 	bgt.w	80111d6 <__ieee754_acos+0x446>
 8010db4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011010 <__ieee754_acos+0x280>
 8010db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dbc:	ee10 2a10 	vmov	r2, s0
 8010dc0:	462b      	mov	r3, r5
 8010dc2:	ee10 0a10 	vmov	r0, s0
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	f7ef fa76 	bl	80002b8 <__aeabi_dsub>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	460b      	mov	r3, r1
 8010dd0:	f7ef fd54 	bl	800087c <__aeabi_ddiv>
 8010dd4:	ec41 0b10 	vmov	d0, r0, r1
 8010dd8:	e7ee      	b.n	8010db8 <__ieee754_acos+0x28>
 8010dda:	49a8      	ldr	r1, [pc, #672]	; (801107c <__ieee754_acos+0x2ec>)
 8010ddc:	428b      	cmp	r3, r1
 8010dde:	f300 8087 	bgt.w	8010ef0 <__ieee754_acos+0x160>
 8010de2:	4aa7      	ldr	r2, [pc, #668]	; (8011080 <__ieee754_acos+0x2f0>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	f340 81f9 	ble.w	80111dc <__ieee754_acos+0x44c>
 8010dea:	ee10 2a10 	vmov	r2, s0
 8010dee:	ee10 0a10 	vmov	r0, s0
 8010df2:	462b      	mov	r3, r5
 8010df4:	4629      	mov	r1, r5
 8010df6:	f7ef fc17 	bl	8000628 <__aeabi_dmul>
 8010dfa:	a387      	add	r3, pc, #540	; (adr r3, 8011018 <__ieee754_acos+0x288>)
 8010dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e00:	4606      	mov	r6, r0
 8010e02:	460f      	mov	r7, r1
 8010e04:	f7ef fc10 	bl	8000628 <__aeabi_dmul>
 8010e08:	a385      	add	r3, pc, #532	; (adr r3, 8011020 <__ieee754_acos+0x290>)
 8010e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0e:	f7ef fa55 	bl	80002bc <__adddf3>
 8010e12:	4632      	mov	r2, r6
 8010e14:	463b      	mov	r3, r7
 8010e16:	f7ef fc07 	bl	8000628 <__aeabi_dmul>
 8010e1a:	a383      	add	r3, pc, #524	; (adr r3, 8011028 <__ieee754_acos+0x298>)
 8010e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e20:	f7ef fa4a 	bl	80002b8 <__aeabi_dsub>
 8010e24:	4632      	mov	r2, r6
 8010e26:	463b      	mov	r3, r7
 8010e28:	f7ef fbfe 	bl	8000628 <__aeabi_dmul>
 8010e2c:	a380      	add	r3, pc, #512	; (adr r3, 8011030 <__ieee754_acos+0x2a0>)
 8010e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e32:	f7ef fa43 	bl	80002bc <__adddf3>
 8010e36:	4632      	mov	r2, r6
 8010e38:	463b      	mov	r3, r7
 8010e3a:	f7ef fbf5 	bl	8000628 <__aeabi_dmul>
 8010e3e:	a37e      	add	r3, pc, #504	; (adr r3, 8011038 <__ieee754_acos+0x2a8>)
 8010e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e44:	f7ef fa38 	bl	80002b8 <__aeabi_dsub>
 8010e48:	4632      	mov	r2, r6
 8010e4a:	463b      	mov	r3, r7
 8010e4c:	f7ef fbec 	bl	8000628 <__aeabi_dmul>
 8010e50:	a37b      	add	r3, pc, #492	; (adr r3, 8011040 <__ieee754_acos+0x2b0>)
 8010e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e56:	f7ef fa31 	bl	80002bc <__adddf3>
 8010e5a:	4632      	mov	r2, r6
 8010e5c:	463b      	mov	r3, r7
 8010e5e:	f7ef fbe3 	bl	8000628 <__aeabi_dmul>
 8010e62:	a379      	add	r3, pc, #484	; (adr r3, 8011048 <__ieee754_acos+0x2b8>)
 8010e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e68:	4680      	mov	r8, r0
 8010e6a:	4689      	mov	r9, r1
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	4639      	mov	r1, r7
 8010e70:	f7ef fbda 	bl	8000628 <__aeabi_dmul>
 8010e74:	a376      	add	r3, pc, #472	; (adr r3, 8011050 <__ieee754_acos+0x2c0>)
 8010e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7a:	f7ef fa1d 	bl	80002b8 <__aeabi_dsub>
 8010e7e:	4632      	mov	r2, r6
 8010e80:	463b      	mov	r3, r7
 8010e82:	f7ef fbd1 	bl	8000628 <__aeabi_dmul>
 8010e86:	a374      	add	r3, pc, #464	; (adr r3, 8011058 <__ieee754_acos+0x2c8>)
 8010e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8c:	f7ef fa16 	bl	80002bc <__adddf3>
 8010e90:	4632      	mov	r2, r6
 8010e92:	463b      	mov	r3, r7
 8010e94:	f7ef fbc8 	bl	8000628 <__aeabi_dmul>
 8010e98:	a371      	add	r3, pc, #452	; (adr r3, 8011060 <__ieee754_acos+0x2d0>)
 8010e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9e:	f7ef fa0b 	bl	80002b8 <__aeabi_dsub>
 8010ea2:	4632      	mov	r2, r6
 8010ea4:	463b      	mov	r3, r7
 8010ea6:	f7ef fbbf 	bl	8000628 <__aeabi_dmul>
 8010eaa:	4b76      	ldr	r3, [pc, #472]	; (8011084 <__ieee754_acos+0x2f4>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	f7ef fa05 	bl	80002bc <__adddf3>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	4640      	mov	r0, r8
 8010eb8:	4649      	mov	r1, r9
 8010eba:	f7ef fcdf 	bl	800087c <__aeabi_ddiv>
 8010ebe:	4622      	mov	r2, r4
 8010ec0:	462b      	mov	r3, r5
 8010ec2:	f7ef fbb1 	bl	8000628 <__aeabi_dmul>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	a167      	add	r1, pc, #412	; (adr r1, 8011068 <__ieee754_acos+0x2d8>)
 8010ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ed0:	f7ef f9f2 	bl	80002b8 <__aeabi_dsub>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	4620      	mov	r0, r4
 8010eda:	4629      	mov	r1, r5
 8010edc:	f7ef f9ec 	bl	80002b8 <__aeabi_dsub>
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	a162      	add	r1, pc, #392	; (adr r1, 8011070 <__ieee754_acos+0x2e0>)
 8010ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eea:	f7ef f9e5 	bl	80002b8 <__aeabi_dsub>
 8010eee:	e771      	b.n	8010dd4 <__ieee754_acos+0x44>
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	f280 80cb 	bge.w	801108c <__ieee754_acos+0x2fc>
 8010ef6:	ee10 0a10 	vmov	r0, s0
 8010efa:	4b62      	ldr	r3, [pc, #392]	; (8011084 <__ieee754_acos+0x2f4>)
 8010efc:	2200      	movs	r2, #0
 8010efe:	4629      	mov	r1, r5
 8010f00:	f7ef f9dc 	bl	80002bc <__adddf3>
 8010f04:	4b60      	ldr	r3, [pc, #384]	; (8011088 <__ieee754_acos+0x2f8>)
 8010f06:	2200      	movs	r2, #0
 8010f08:	f7ef fb8e 	bl	8000628 <__aeabi_dmul>
 8010f0c:	a342      	add	r3, pc, #264	; (adr r3, 8011018 <__ieee754_acos+0x288>)
 8010f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f12:	4604      	mov	r4, r0
 8010f14:	460d      	mov	r5, r1
 8010f16:	f7ef fb87 	bl	8000628 <__aeabi_dmul>
 8010f1a:	a341      	add	r3, pc, #260	; (adr r3, 8011020 <__ieee754_acos+0x290>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	f7ef f9cc 	bl	80002bc <__adddf3>
 8010f24:	4622      	mov	r2, r4
 8010f26:	462b      	mov	r3, r5
 8010f28:	f7ef fb7e 	bl	8000628 <__aeabi_dmul>
 8010f2c:	a33e      	add	r3, pc, #248	; (adr r3, 8011028 <__ieee754_acos+0x298>)
 8010f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f32:	f7ef f9c1 	bl	80002b8 <__aeabi_dsub>
 8010f36:	4622      	mov	r2, r4
 8010f38:	462b      	mov	r3, r5
 8010f3a:	f7ef fb75 	bl	8000628 <__aeabi_dmul>
 8010f3e:	a33c      	add	r3, pc, #240	; (adr r3, 8011030 <__ieee754_acos+0x2a0>)
 8010f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f44:	f7ef f9ba 	bl	80002bc <__adddf3>
 8010f48:	4622      	mov	r2, r4
 8010f4a:	462b      	mov	r3, r5
 8010f4c:	f7ef fb6c 	bl	8000628 <__aeabi_dmul>
 8010f50:	a339      	add	r3, pc, #228	; (adr r3, 8011038 <__ieee754_acos+0x2a8>)
 8010f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f56:	f7ef f9af 	bl	80002b8 <__aeabi_dsub>
 8010f5a:	4622      	mov	r2, r4
 8010f5c:	462b      	mov	r3, r5
 8010f5e:	f7ef fb63 	bl	8000628 <__aeabi_dmul>
 8010f62:	a337      	add	r3, pc, #220	; (adr r3, 8011040 <__ieee754_acos+0x2b0>)
 8010f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f68:	f7ef f9a8 	bl	80002bc <__adddf3>
 8010f6c:	4622      	mov	r2, r4
 8010f6e:	462b      	mov	r3, r5
 8010f70:	f7ef fb5a 	bl	8000628 <__aeabi_dmul>
 8010f74:	ec45 4b10 	vmov	d0, r4, r5
 8010f78:	4680      	mov	r8, r0
 8010f7a:	4689      	mov	r9, r1
 8010f7c:	f001 f970 	bl	8012260 <__ieee754_sqrt>
 8010f80:	a331      	add	r3, pc, #196	; (adr r3, 8011048 <__ieee754_acos+0x2b8>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	4620      	mov	r0, r4
 8010f88:	4629      	mov	r1, r5
 8010f8a:	ec57 6b10 	vmov	r6, r7, d0
 8010f8e:	f7ef fb4b 	bl	8000628 <__aeabi_dmul>
 8010f92:	a32f      	add	r3, pc, #188	; (adr r3, 8011050 <__ieee754_acos+0x2c0>)
 8010f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f98:	f7ef f98e 	bl	80002b8 <__aeabi_dsub>
 8010f9c:	4622      	mov	r2, r4
 8010f9e:	462b      	mov	r3, r5
 8010fa0:	f7ef fb42 	bl	8000628 <__aeabi_dmul>
 8010fa4:	a32c      	add	r3, pc, #176	; (adr r3, 8011058 <__ieee754_acos+0x2c8>)
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	f7ef f987 	bl	80002bc <__adddf3>
 8010fae:	4622      	mov	r2, r4
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	f7ef fb39 	bl	8000628 <__aeabi_dmul>
 8010fb6:	a32a      	add	r3, pc, #168	; (adr r3, 8011060 <__ieee754_acos+0x2d0>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	f7ef f97c 	bl	80002b8 <__aeabi_dsub>
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	462b      	mov	r3, r5
 8010fc4:	f7ef fb30 	bl	8000628 <__aeabi_dmul>
 8010fc8:	4b2e      	ldr	r3, [pc, #184]	; (8011084 <__ieee754_acos+0x2f4>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f7ef f976 	bl	80002bc <__adddf3>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	460b      	mov	r3, r1
 8010fd4:	4640      	mov	r0, r8
 8010fd6:	4649      	mov	r1, r9
 8010fd8:	f7ef fc50 	bl	800087c <__aeabi_ddiv>
 8010fdc:	4632      	mov	r2, r6
 8010fde:	463b      	mov	r3, r7
 8010fe0:	f7ef fb22 	bl	8000628 <__aeabi_dmul>
 8010fe4:	a320      	add	r3, pc, #128	; (adr r3, 8011068 <__ieee754_acos+0x2d8>)
 8010fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fea:	f7ef f965 	bl	80002b8 <__aeabi_dsub>
 8010fee:	4632      	mov	r2, r6
 8010ff0:	463b      	mov	r3, r7
 8010ff2:	f7ef f963 	bl	80002bc <__adddf3>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	f7ef f95f 	bl	80002bc <__adddf3>
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	a103      	add	r1, pc, #12	; (adr r1, 8011010 <__ieee754_acos+0x280>)
 8011004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011008:	e76f      	b.n	8010eea <__ieee754_acos+0x15a>
 801100a:	bf00      	nop
 801100c:	f3af 8000 	nop.w
 8011010:	54442d18 	.word	0x54442d18
 8011014:	400921fb 	.word	0x400921fb
 8011018:	0dfdf709 	.word	0x0dfdf709
 801101c:	3f023de1 	.word	0x3f023de1
 8011020:	7501b288 	.word	0x7501b288
 8011024:	3f49efe0 	.word	0x3f49efe0
 8011028:	b5688f3b 	.word	0xb5688f3b
 801102c:	3fa48228 	.word	0x3fa48228
 8011030:	0e884455 	.word	0x0e884455
 8011034:	3fc9c155 	.word	0x3fc9c155
 8011038:	03eb6f7d 	.word	0x03eb6f7d
 801103c:	3fd4d612 	.word	0x3fd4d612
 8011040:	55555555 	.word	0x55555555
 8011044:	3fc55555 	.word	0x3fc55555
 8011048:	b12e9282 	.word	0xb12e9282
 801104c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011050:	1b8d0159 	.word	0x1b8d0159
 8011054:	3fe6066c 	.word	0x3fe6066c
 8011058:	9c598ac8 	.word	0x9c598ac8
 801105c:	40002ae5 	.word	0x40002ae5
 8011060:	1c8a2d4b 	.word	0x1c8a2d4b
 8011064:	40033a27 	.word	0x40033a27
 8011068:	33145c07 	.word	0x33145c07
 801106c:	3c91a626 	.word	0x3c91a626
 8011070:	54442d18 	.word	0x54442d18
 8011074:	3ff921fb 	.word	0x3ff921fb
 8011078:	3fefffff 	.word	0x3fefffff
 801107c:	3fdfffff 	.word	0x3fdfffff
 8011080:	3c600000 	.word	0x3c600000
 8011084:	3ff00000 	.word	0x3ff00000
 8011088:	3fe00000 	.word	0x3fe00000
 801108c:	ee10 2a10 	vmov	r2, s0
 8011090:	462b      	mov	r3, r5
 8011092:	496d      	ldr	r1, [pc, #436]	; (8011248 <__ieee754_acos+0x4b8>)
 8011094:	2000      	movs	r0, #0
 8011096:	f7ef f90f 	bl	80002b8 <__aeabi_dsub>
 801109a:	4b6c      	ldr	r3, [pc, #432]	; (801124c <__ieee754_acos+0x4bc>)
 801109c:	2200      	movs	r2, #0
 801109e:	f7ef fac3 	bl	8000628 <__aeabi_dmul>
 80110a2:	4604      	mov	r4, r0
 80110a4:	460d      	mov	r5, r1
 80110a6:	ec45 4b10 	vmov	d0, r4, r5
 80110aa:	f001 f8d9 	bl	8012260 <__ieee754_sqrt>
 80110ae:	a34e      	add	r3, pc, #312	; (adr r3, 80111e8 <__ieee754_acos+0x458>)
 80110b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b4:	4620      	mov	r0, r4
 80110b6:	4629      	mov	r1, r5
 80110b8:	ec59 8b10 	vmov	r8, r9, d0
 80110bc:	f7ef fab4 	bl	8000628 <__aeabi_dmul>
 80110c0:	a34b      	add	r3, pc, #300	; (adr r3, 80111f0 <__ieee754_acos+0x460>)
 80110c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c6:	f7ef f8f9 	bl	80002bc <__adddf3>
 80110ca:	4622      	mov	r2, r4
 80110cc:	462b      	mov	r3, r5
 80110ce:	f7ef faab 	bl	8000628 <__aeabi_dmul>
 80110d2:	a349      	add	r3, pc, #292	; (adr r3, 80111f8 <__ieee754_acos+0x468>)
 80110d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d8:	f7ef f8ee 	bl	80002b8 <__aeabi_dsub>
 80110dc:	4622      	mov	r2, r4
 80110de:	462b      	mov	r3, r5
 80110e0:	f7ef faa2 	bl	8000628 <__aeabi_dmul>
 80110e4:	a346      	add	r3, pc, #280	; (adr r3, 8011200 <__ieee754_acos+0x470>)
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	f7ef f8e7 	bl	80002bc <__adddf3>
 80110ee:	4622      	mov	r2, r4
 80110f0:	462b      	mov	r3, r5
 80110f2:	f7ef fa99 	bl	8000628 <__aeabi_dmul>
 80110f6:	a344      	add	r3, pc, #272	; (adr r3, 8011208 <__ieee754_acos+0x478>)
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	f7ef f8dc 	bl	80002b8 <__aeabi_dsub>
 8011100:	4622      	mov	r2, r4
 8011102:	462b      	mov	r3, r5
 8011104:	f7ef fa90 	bl	8000628 <__aeabi_dmul>
 8011108:	a341      	add	r3, pc, #260	; (adr r3, 8011210 <__ieee754_acos+0x480>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef f8d5 	bl	80002bc <__adddf3>
 8011112:	4622      	mov	r2, r4
 8011114:	462b      	mov	r3, r5
 8011116:	f7ef fa87 	bl	8000628 <__aeabi_dmul>
 801111a:	a33f      	add	r3, pc, #252	; (adr r3, 8011218 <__ieee754_acos+0x488>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	4682      	mov	sl, r0
 8011122:	468b      	mov	fp, r1
 8011124:	4620      	mov	r0, r4
 8011126:	4629      	mov	r1, r5
 8011128:	f7ef fa7e 	bl	8000628 <__aeabi_dmul>
 801112c:	a33c      	add	r3, pc, #240	; (adr r3, 8011220 <__ieee754_acos+0x490>)
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	f7ef f8c1 	bl	80002b8 <__aeabi_dsub>
 8011136:	4622      	mov	r2, r4
 8011138:	462b      	mov	r3, r5
 801113a:	f7ef fa75 	bl	8000628 <__aeabi_dmul>
 801113e:	a33a      	add	r3, pc, #232	; (adr r3, 8011228 <__ieee754_acos+0x498>)
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	f7ef f8ba 	bl	80002bc <__adddf3>
 8011148:	4622      	mov	r2, r4
 801114a:	462b      	mov	r3, r5
 801114c:	f7ef fa6c 	bl	8000628 <__aeabi_dmul>
 8011150:	a337      	add	r3, pc, #220	; (adr r3, 8011230 <__ieee754_acos+0x4a0>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	f7ef f8af 	bl	80002b8 <__aeabi_dsub>
 801115a:	4622      	mov	r2, r4
 801115c:	462b      	mov	r3, r5
 801115e:	f7ef fa63 	bl	8000628 <__aeabi_dmul>
 8011162:	4b39      	ldr	r3, [pc, #228]	; (8011248 <__ieee754_acos+0x4b8>)
 8011164:	2200      	movs	r2, #0
 8011166:	f7ef f8a9 	bl	80002bc <__adddf3>
 801116a:	4602      	mov	r2, r0
 801116c:	460b      	mov	r3, r1
 801116e:	4650      	mov	r0, sl
 8011170:	4659      	mov	r1, fp
 8011172:	f7ef fb83 	bl	800087c <__aeabi_ddiv>
 8011176:	4642      	mov	r2, r8
 8011178:	464b      	mov	r3, r9
 801117a:	f7ef fa55 	bl	8000628 <__aeabi_dmul>
 801117e:	2600      	movs	r6, #0
 8011180:	4682      	mov	sl, r0
 8011182:	468b      	mov	fp, r1
 8011184:	4632      	mov	r2, r6
 8011186:	464b      	mov	r3, r9
 8011188:	4630      	mov	r0, r6
 801118a:	4649      	mov	r1, r9
 801118c:	f7ef fa4c 	bl	8000628 <__aeabi_dmul>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	4620      	mov	r0, r4
 8011196:	4629      	mov	r1, r5
 8011198:	f7ef f88e 	bl	80002b8 <__aeabi_dsub>
 801119c:	4632      	mov	r2, r6
 801119e:	4604      	mov	r4, r0
 80111a0:	460d      	mov	r5, r1
 80111a2:	464b      	mov	r3, r9
 80111a4:	4640      	mov	r0, r8
 80111a6:	4649      	mov	r1, r9
 80111a8:	f7ef f888 	bl	80002bc <__adddf3>
 80111ac:	4602      	mov	r2, r0
 80111ae:	460b      	mov	r3, r1
 80111b0:	4620      	mov	r0, r4
 80111b2:	4629      	mov	r1, r5
 80111b4:	f7ef fb62 	bl	800087c <__aeabi_ddiv>
 80111b8:	4602      	mov	r2, r0
 80111ba:	460b      	mov	r3, r1
 80111bc:	4650      	mov	r0, sl
 80111be:	4659      	mov	r1, fp
 80111c0:	f7ef f87c 	bl	80002bc <__adddf3>
 80111c4:	4632      	mov	r2, r6
 80111c6:	464b      	mov	r3, r9
 80111c8:	f7ef f878 	bl	80002bc <__adddf3>
 80111cc:	4602      	mov	r2, r0
 80111ce:	460b      	mov	r3, r1
 80111d0:	f7ef f874 	bl	80002bc <__adddf3>
 80111d4:	e5fe      	b.n	8010dd4 <__ieee754_acos+0x44>
 80111d6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011238 <__ieee754_acos+0x4a8>
 80111da:	e5ed      	b.n	8010db8 <__ieee754_acos+0x28>
 80111dc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011240 <__ieee754_acos+0x4b0>
 80111e0:	e5ea      	b.n	8010db8 <__ieee754_acos+0x28>
 80111e2:	bf00      	nop
 80111e4:	f3af 8000 	nop.w
 80111e8:	0dfdf709 	.word	0x0dfdf709
 80111ec:	3f023de1 	.word	0x3f023de1
 80111f0:	7501b288 	.word	0x7501b288
 80111f4:	3f49efe0 	.word	0x3f49efe0
 80111f8:	b5688f3b 	.word	0xb5688f3b
 80111fc:	3fa48228 	.word	0x3fa48228
 8011200:	0e884455 	.word	0x0e884455
 8011204:	3fc9c155 	.word	0x3fc9c155
 8011208:	03eb6f7d 	.word	0x03eb6f7d
 801120c:	3fd4d612 	.word	0x3fd4d612
 8011210:	55555555 	.word	0x55555555
 8011214:	3fc55555 	.word	0x3fc55555
 8011218:	b12e9282 	.word	0xb12e9282
 801121c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011220:	1b8d0159 	.word	0x1b8d0159
 8011224:	3fe6066c 	.word	0x3fe6066c
 8011228:	9c598ac8 	.word	0x9c598ac8
 801122c:	40002ae5 	.word	0x40002ae5
 8011230:	1c8a2d4b 	.word	0x1c8a2d4b
 8011234:	40033a27 	.word	0x40033a27
	...
 8011240:	54442d18 	.word	0x54442d18
 8011244:	3ff921fb 	.word	0x3ff921fb
 8011248:	3ff00000 	.word	0x3ff00000
 801124c:	3fe00000 	.word	0x3fe00000

08011250 <__ieee754_atan2>:
 8011250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011254:	ec57 6b11 	vmov	r6, r7, d1
 8011258:	4273      	negs	r3, r6
 801125a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80113e0 <__ieee754_atan2+0x190>
 801125e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011262:	4333      	orrs	r3, r6
 8011264:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011268:	4573      	cmp	r3, lr
 801126a:	ec51 0b10 	vmov	r0, r1, d0
 801126e:	ee11 8a10 	vmov	r8, s2
 8011272:	d80a      	bhi.n	801128a <__ieee754_atan2+0x3a>
 8011274:	4244      	negs	r4, r0
 8011276:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801127a:	4304      	orrs	r4, r0
 801127c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011280:	4574      	cmp	r4, lr
 8011282:	ee10 9a10 	vmov	r9, s0
 8011286:	468c      	mov	ip, r1
 8011288:	d907      	bls.n	801129a <__ieee754_atan2+0x4a>
 801128a:	4632      	mov	r2, r6
 801128c:	463b      	mov	r3, r7
 801128e:	f7ef f815 	bl	80002bc <__adddf3>
 8011292:	ec41 0b10 	vmov	d0, r0, r1
 8011296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801129a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801129e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80112a2:	4334      	orrs	r4, r6
 80112a4:	d103      	bne.n	80112ae <__ieee754_atan2+0x5e>
 80112a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112aa:	f001 bd95 	b.w	8012dd8 <atan>
 80112ae:	17bc      	asrs	r4, r7, #30
 80112b0:	f004 0402 	and.w	r4, r4, #2
 80112b4:	ea53 0909 	orrs.w	r9, r3, r9
 80112b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80112bc:	d107      	bne.n	80112ce <__ieee754_atan2+0x7e>
 80112be:	2c02      	cmp	r4, #2
 80112c0:	d060      	beq.n	8011384 <__ieee754_atan2+0x134>
 80112c2:	2c03      	cmp	r4, #3
 80112c4:	d1e5      	bne.n	8011292 <__ieee754_atan2+0x42>
 80112c6:	a142      	add	r1, pc, #264	; (adr r1, 80113d0 <__ieee754_atan2+0x180>)
 80112c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112cc:	e7e1      	b.n	8011292 <__ieee754_atan2+0x42>
 80112ce:	ea52 0808 	orrs.w	r8, r2, r8
 80112d2:	d106      	bne.n	80112e2 <__ieee754_atan2+0x92>
 80112d4:	f1bc 0f00 	cmp.w	ip, #0
 80112d8:	da5f      	bge.n	801139a <__ieee754_atan2+0x14a>
 80112da:	a13f      	add	r1, pc, #252	; (adr r1, 80113d8 <__ieee754_atan2+0x188>)
 80112dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112e0:	e7d7      	b.n	8011292 <__ieee754_atan2+0x42>
 80112e2:	4572      	cmp	r2, lr
 80112e4:	d10f      	bne.n	8011306 <__ieee754_atan2+0xb6>
 80112e6:	4293      	cmp	r3, r2
 80112e8:	f104 34ff 	add.w	r4, r4, #4294967295
 80112ec:	d107      	bne.n	80112fe <__ieee754_atan2+0xae>
 80112ee:	2c02      	cmp	r4, #2
 80112f0:	d84c      	bhi.n	801138c <__ieee754_atan2+0x13c>
 80112f2:	4b35      	ldr	r3, [pc, #212]	; (80113c8 <__ieee754_atan2+0x178>)
 80112f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80112f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80112fc:	e7c9      	b.n	8011292 <__ieee754_atan2+0x42>
 80112fe:	2c02      	cmp	r4, #2
 8011300:	d848      	bhi.n	8011394 <__ieee754_atan2+0x144>
 8011302:	4b32      	ldr	r3, [pc, #200]	; (80113cc <__ieee754_atan2+0x17c>)
 8011304:	e7f6      	b.n	80112f4 <__ieee754_atan2+0xa4>
 8011306:	4573      	cmp	r3, lr
 8011308:	d0e4      	beq.n	80112d4 <__ieee754_atan2+0x84>
 801130a:	1a9b      	subs	r3, r3, r2
 801130c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011310:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011314:	da1e      	bge.n	8011354 <__ieee754_atan2+0x104>
 8011316:	2f00      	cmp	r7, #0
 8011318:	da01      	bge.n	801131e <__ieee754_atan2+0xce>
 801131a:	323c      	adds	r2, #60	; 0x3c
 801131c:	db1e      	blt.n	801135c <__ieee754_atan2+0x10c>
 801131e:	4632      	mov	r2, r6
 8011320:	463b      	mov	r3, r7
 8011322:	f7ef faab 	bl	800087c <__aeabi_ddiv>
 8011326:	ec41 0b10 	vmov	d0, r0, r1
 801132a:	f001 fef5 	bl	8013118 <fabs>
 801132e:	f001 fd53 	bl	8012dd8 <atan>
 8011332:	ec51 0b10 	vmov	r0, r1, d0
 8011336:	2c01      	cmp	r4, #1
 8011338:	d013      	beq.n	8011362 <__ieee754_atan2+0x112>
 801133a:	2c02      	cmp	r4, #2
 801133c:	d015      	beq.n	801136a <__ieee754_atan2+0x11a>
 801133e:	2c00      	cmp	r4, #0
 8011340:	d0a7      	beq.n	8011292 <__ieee754_atan2+0x42>
 8011342:	a319      	add	r3, pc, #100	; (adr r3, 80113a8 <__ieee754_atan2+0x158>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ee ffb6 	bl	80002b8 <__aeabi_dsub>
 801134c:	a318      	add	r3, pc, #96	; (adr r3, 80113b0 <__ieee754_atan2+0x160>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	e014      	b.n	801137e <__ieee754_atan2+0x12e>
 8011354:	a118      	add	r1, pc, #96	; (adr r1, 80113b8 <__ieee754_atan2+0x168>)
 8011356:	e9d1 0100 	ldrd	r0, r1, [r1]
 801135a:	e7ec      	b.n	8011336 <__ieee754_atan2+0xe6>
 801135c:	2000      	movs	r0, #0
 801135e:	2100      	movs	r1, #0
 8011360:	e7e9      	b.n	8011336 <__ieee754_atan2+0xe6>
 8011362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011366:	4619      	mov	r1, r3
 8011368:	e793      	b.n	8011292 <__ieee754_atan2+0x42>
 801136a:	a30f      	add	r3, pc, #60	; (adr r3, 80113a8 <__ieee754_atan2+0x158>)
 801136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011370:	f7ee ffa2 	bl	80002b8 <__aeabi_dsub>
 8011374:	4602      	mov	r2, r0
 8011376:	460b      	mov	r3, r1
 8011378:	a10d      	add	r1, pc, #52	; (adr r1, 80113b0 <__ieee754_atan2+0x160>)
 801137a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801137e:	f7ee ff9b 	bl	80002b8 <__aeabi_dsub>
 8011382:	e786      	b.n	8011292 <__ieee754_atan2+0x42>
 8011384:	a10a      	add	r1, pc, #40	; (adr r1, 80113b0 <__ieee754_atan2+0x160>)
 8011386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801138a:	e782      	b.n	8011292 <__ieee754_atan2+0x42>
 801138c:	a10c      	add	r1, pc, #48	; (adr r1, 80113c0 <__ieee754_atan2+0x170>)
 801138e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011392:	e77e      	b.n	8011292 <__ieee754_atan2+0x42>
 8011394:	2000      	movs	r0, #0
 8011396:	2100      	movs	r1, #0
 8011398:	e77b      	b.n	8011292 <__ieee754_atan2+0x42>
 801139a:	a107      	add	r1, pc, #28	; (adr r1, 80113b8 <__ieee754_atan2+0x168>)
 801139c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113a0:	e777      	b.n	8011292 <__ieee754_atan2+0x42>
 80113a2:	bf00      	nop
 80113a4:	f3af 8000 	nop.w
 80113a8:	33145c07 	.word	0x33145c07
 80113ac:	3ca1a626 	.word	0x3ca1a626
 80113b0:	54442d18 	.word	0x54442d18
 80113b4:	400921fb 	.word	0x400921fb
 80113b8:	54442d18 	.word	0x54442d18
 80113bc:	3ff921fb 	.word	0x3ff921fb
 80113c0:	54442d18 	.word	0x54442d18
 80113c4:	3fe921fb 	.word	0x3fe921fb
 80113c8:	08013e30 	.word	0x08013e30
 80113cc:	08013e48 	.word	0x08013e48
 80113d0:	54442d18 	.word	0x54442d18
 80113d4:	c00921fb 	.word	0xc00921fb
 80113d8:	54442d18 	.word	0x54442d18
 80113dc:	bff921fb 	.word	0xbff921fb
 80113e0:	7ff00000 	.word	0x7ff00000
 80113e4:	00000000 	.word	0x00000000

080113e8 <__ieee754_pow>:
 80113e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ec:	ed2d 8b06 	vpush	{d8-d10}
 80113f0:	b089      	sub	sp, #36	; 0x24
 80113f2:	ed8d 1b00 	vstr	d1, [sp]
 80113f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80113fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80113fe:	ea58 0102 	orrs.w	r1, r8, r2
 8011402:	ec57 6b10 	vmov	r6, r7, d0
 8011406:	d115      	bne.n	8011434 <__ieee754_pow+0x4c>
 8011408:	19b3      	adds	r3, r6, r6
 801140a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801140e:	4152      	adcs	r2, r2
 8011410:	4299      	cmp	r1, r3
 8011412:	4b89      	ldr	r3, [pc, #548]	; (8011638 <__ieee754_pow+0x250>)
 8011414:	4193      	sbcs	r3, r2
 8011416:	f080 84d2 	bcs.w	8011dbe <__ieee754_pow+0x9d6>
 801141a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801141e:	4630      	mov	r0, r6
 8011420:	4639      	mov	r1, r7
 8011422:	f7ee ff4b 	bl	80002bc <__adddf3>
 8011426:	ec41 0b10 	vmov	d0, r0, r1
 801142a:	b009      	add	sp, #36	; 0x24
 801142c:	ecbd 8b06 	vpop	{d8-d10}
 8011430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011434:	4b81      	ldr	r3, [pc, #516]	; (801163c <__ieee754_pow+0x254>)
 8011436:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801143a:	429c      	cmp	r4, r3
 801143c:	ee10 aa10 	vmov	sl, s0
 8011440:	463d      	mov	r5, r7
 8011442:	dc06      	bgt.n	8011452 <__ieee754_pow+0x6a>
 8011444:	d101      	bne.n	801144a <__ieee754_pow+0x62>
 8011446:	2e00      	cmp	r6, #0
 8011448:	d1e7      	bne.n	801141a <__ieee754_pow+0x32>
 801144a:	4598      	cmp	r8, r3
 801144c:	dc01      	bgt.n	8011452 <__ieee754_pow+0x6a>
 801144e:	d10f      	bne.n	8011470 <__ieee754_pow+0x88>
 8011450:	b172      	cbz	r2, 8011470 <__ieee754_pow+0x88>
 8011452:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011456:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801145a:	ea55 050a 	orrs.w	r5, r5, sl
 801145e:	d1dc      	bne.n	801141a <__ieee754_pow+0x32>
 8011460:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011464:	18db      	adds	r3, r3, r3
 8011466:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801146a:	4152      	adcs	r2, r2
 801146c:	429d      	cmp	r5, r3
 801146e:	e7d0      	b.n	8011412 <__ieee754_pow+0x2a>
 8011470:	2d00      	cmp	r5, #0
 8011472:	da3b      	bge.n	80114ec <__ieee754_pow+0x104>
 8011474:	4b72      	ldr	r3, [pc, #456]	; (8011640 <__ieee754_pow+0x258>)
 8011476:	4598      	cmp	r8, r3
 8011478:	dc51      	bgt.n	801151e <__ieee754_pow+0x136>
 801147a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801147e:	4598      	cmp	r8, r3
 8011480:	f340 84ac 	ble.w	8011ddc <__ieee754_pow+0x9f4>
 8011484:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011488:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801148c:	2b14      	cmp	r3, #20
 801148e:	dd0f      	ble.n	80114b0 <__ieee754_pow+0xc8>
 8011490:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011494:	fa22 f103 	lsr.w	r1, r2, r3
 8011498:	fa01 f303 	lsl.w	r3, r1, r3
 801149c:	4293      	cmp	r3, r2
 801149e:	f040 849d 	bne.w	8011ddc <__ieee754_pow+0x9f4>
 80114a2:	f001 0101 	and.w	r1, r1, #1
 80114a6:	f1c1 0302 	rsb	r3, r1, #2
 80114aa:	9304      	str	r3, [sp, #16]
 80114ac:	b182      	cbz	r2, 80114d0 <__ieee754_pow+0xe8>
 80114ae:	e05f      	b.n	8011570 <__ieee754_pow+0x188>
 80114b0:	2a00      	cmp	r2, #0
 80114b2:	d15b      	bne.n	801156c <__ieee754_pow+0x184>
 80114b4:	f1c3 0314 	rsb	r3, r3, #20
 80114b8:	fa48 f103 	asr.w	r1, r8, r3
 80114bc:	fa01 f303 	lsl.w	r3, r1, r3
 80114c0:	4543      	cmp	r3, r8
 80114c2:	f040 8488 	bne.w	8011dd6 <__ieee754_pow+0x9ee>
 80114c6:	f001 0101 	and.w	r1, r1, #1
 80114ca:	f1c1 0302 	rsb	r3, r1, #2
 80114ce:	9304      	str	r3, [sp, #16]
 80114d0:	4b5c      	ldr	r3, [pc, #368]	; (8011644 <__ieee754_pow+0x25c>)
 80114d2:	4598      	cmp	r8, r3
 80114d4:	d132      	bne.n	801153c <__ieee754_pow+0x154>
 80114d6:	f1b9 0f00 	cmp.w	r9, #0
 80114da:	f280 8478 	bge.w	8011dce <__ieee754_pow+0x9e6>
 80114de:	4959      	ldr	r1, [pc, #356]	; (8011644 <__ieee754_pow+0x25c>)
 80114e0:	4632      	mov	r2, r6
 80114e2:	463b      	mov	r3, r7
 80114e4:	2000      	movs	r0, #0
 80114e6:	f7ef f9c9 	bl	800087c <__aeabi_ddiv>
 80114ea:	e79c      	b.n	8011426 <__ieee754_pow+0x3e>
 80114ec:	2300      	movs	r3, #0
 80114ee:	9304      	str	r3, [sp, #16]
 80114f0:	2a00      	cmp	r2, #0
 80114f2:	d13d      	bne.n	8011570 <__ieee754_pow+0x188>
 80114f4:	4b51      	ldr	r3, [pc, #324]	; (801163c <__ieee754_pow+0x254>)
 80114f6:	4598      	cmp	r8, r3
 80114f8:	d1ea      	bne.n	80114d0 <__ieee754_pow+0xe8>
 80114fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80114fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011502:	ea53 030a 	orrs.w	r3, r3, sl
 8011506:	f000 845a 	beq.w	8011dbe <__ieee754_pow+0x9d6>
 801150a:	4b4f      	ldr	r3, [pc, #316]	; (8011648 <__ieee754_pow+0x260>)
 801150c:	429c      	cmp	r4, r3
 801150e:	dd08      	ble.n	8011522 <__ieee754_pow+0x13a>
 8011510:	f1b9 0f00 	cmp.w	r9, #0
 8011514:	f2c0 8457 	blt.w	8011dc6 <__ieee754_pow+0x9de>
 8011518:	e9dd 0100 	ldrd	r0, r1, [sp]
 801151c:	e783      	b.n	8011426 <__ieee754_pow+0x3e>
 801151e:	2302      	movs	r3, #2
 8011520:	e7e5      	b.n	80114ee <__ieee754_pow+0x106>
 8011522:	f1b9 0f00 	cmp.w	r9, #0
 8011526:	f04f 0000 	mov.w	r0, #0
 801152a:	f04f 0100 	mov.w	r1, #0
 801152e:	f6bf af7a 	bge.w	8011426 <__ieee754_pow+0x3e>
 8011532:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011536:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801153a:	e774      	b.n	8011426 <__ieee754_pow+0x3e>
 801153c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011540:	d106      	bne.n	8011550 <__ieee754_pow+0x168>
 8011542:	4632      	mov	r2, r6
 8011544:	463b      	mov	r3, r7
 8011546:	4630      	mov	r0, r6
 8011548:	4639      	mov	r1, r7
 801154a:	f7ef f86d 	bl	8000628 <__aeabi_dmul>
 801154e:	e76a      	b.n	8011426 <__ieee754_pow+0x3e>
 8011550:	4b3e      	ldr	r3, [pc, #248]	; (801164c <__ieee754_pow+0x264>)
 8011552:	4599      	cmp	r9, r3
 8011554:	d10c      	bne.n	8011570 <__ieee754_pow+0x188>
 8011556:	2d00      	cmp	r5, #0
 8011558:	db0a      	blt.n	8011570 <__ieee754_pow+0x188>
 801155a:	ec47 6b10 	vmov	d0, r6, r7
 801155e:	b009      	add	sp, #36	; 0x24
 8011560:	ecbd 8b06 	vpop	{d8-d10}
 8011564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011568:	f000 be7a 	b.w	8012260 <__ieee754_sqrt>
 801156c:	2300      	movs	r3, #0
 801156e:	9304      	str	r3, [sp, #16]
 8011570:	ec47 6b10 	vmov	d0, r6, r7
 8011574:	f001 fdd0 	bl	8013118 <fabs>
 8011578:	ec51 0b10 	vmov	r0, r1, d0
 801157c:	f1ba 0f00 	cmp.w	sl, #0
 8011580:	d129      	bne.n	80115d6 <__ieee754_pow+0x1ee>
 8011582:	b124      	cbz	r4, 801158e <__ieee754_pow+0x1a6>
 8011584:	4b2f      	ldr	r3, [pc, #188]	; (8011644 <__ieee754_pow+0x25c>)
 8011586:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801158a:	429a      	cmp	r2, r3
 801158c:	d123      	bne.n	80115d6 <__ieee754_pow+0x1ee>
 801158e:	f1b9 0f00 	cmp.w	r9, #0
 8011592:	da05      	bge.n	80115a0 <__ieee754_pow+0x1b8>
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	2000      	movs	r0, #0
 801159a:	492a      	ldr	r1, [pc, #168]	; (8011644 <__ieee754_pow+0x25c>)
 801159c:	f7ef f96e 	bl	800087c <__aeabi_ddiv>
 80115a0:	2d00      	cmp	r5, #0
 80115a2:	f6bf af40 	bge.w	8011426 <__ieee754_pow+0x3e>
 80115a6:	9b04      	ldr	r3, [sp, #16]
 80115a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80115ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80115b0:	4323      	orrs	r3, r4
 80115b2:	d108      	bne.n	80115c6 <__ieee754_pow+0x1de>
 80115b4:	4602      	mov	r2, r0
 80115b6:	460b      	mov	r3, r1
 80115b8:	4610      	mov	r0, r2
 80115ba:	4619      	mov	r1, r3
 80115bc:	f7ee fe7c 	bl	80002b8 <__aeabi_dsub>
 80115c0:	4602      	mov	r2, r0
 80115c2:	460b      	mov	r3, r1
 80115c4:	e78f      	b.n	80114e6 <__ieee754_pow+0xfe>
 80115c6:	9b04      	ldr	r3, [sp, #16]
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	f47f af2c 	bne.w	8011426 <__ieee754_pow+0x3e>
 80115ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80115d2:	4619      	mov	r1, r3
 80115d4:	e727      	b.n	8011426 <__ieee754_pow+0x3e>
 80115d6:	0feb      	lsrs	r3, r5, #31
 80115d8:	3b01      	subs	r3, #1
 80115da:	9306      	str	r3, [sp, #24]
 80115dc:	9a06      	ldr	r2, [sp, #24]
 80115de:	9b04      	ldr	r3, [sp, #16]
 80115e0:	4313      	orrs	r3, r2
 80115e2:	d102      	bne.n	80115ea <__ieee754_pow+0x202>
 80115e4:	4632      	mov	r2, r6
 80115e6:	463b      	mov	r3, r7
 80115e8:	e7e6      	b.n	80115b8 <__ieee754_pow+0x1d0>
 80115ea:	4b19      	ldr	r3, [pc, #100]	; (8011650 <__ieee754_pow+0x268>)
 80115ec:	4598      	cmp	r8, r3
 80115ee:	f340 80fb 	ble.w	80117e8 <__ieee754_pow+0x400>
 80115f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80115f6:	4598      	cmp	r8, r3
 80115f8:	4b13      	ldr	r3, [pc, #76]	; (8011648 <__ieee754_pow+0x260>)
 80115fa:	dd0c      	ble.n	8011616 <__ieee754_pow+0x22e>
 80115fc:	429c      	cmp	r4, r3
 80115fe:	dc0f      	bgt.n	8011620 <__ieee754_pow+0x238>
 8011600:	f1b9 0f00 	cmp.w	r9, #0
 8011604:	da0f      	bge.n	8011626 <__ieee754_pow+0x23e>
 8011606:	2000      	movs	r0, #0
 8011608:	b009      	add	sp, #36	; 0x24
 801160a:	ecbd 8b06 	vpop	{d8-d10}
 801160e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011612:	f001 bbd6 	b.w	8012dc2 <__math_oflow>
 8011616:	429c      	cmp	r4, r3
 8011618:	dbf2      	blt.n	8011600 <__ieee754_pow+0x218>
 801161a:	4b0a      	ldr	r3, [pc, #40]	; (8011644 <__ieee754_pow+0x25c>)
 801161c:	429c      	cmp	r4, r3
 801161e:	dd19      	ble.n	8011654 <__ieee754_pow+0x26c>
 8011620:	f1b9 0f00 	cmp.w	r9, #0
 8011624:	dcef      	bgt.n	8011606 <__ieee754_pow+0x21e>
 8011626:	2000      	movs	r0, #0
 8011628:	b009      	add	sp, #36	; 0x24
 801162a:	ecbd 8b06 	vpop	{d8-d10}
 801162e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011632:	f001 bbbd 	b.w	8012db0 <__math_uflow>
 8011636:	bf00      	nop
 8011638:	fff00000 	.word	0xfff00000
 801163c:	7ff00000 	.word	0x7ff00000
 8011640:	433fffff 	.word	0x433fffff
 8011644:	3ff00000 	.word	0x3ff00000
 8011648:	3fefffff 	.word	0x3fefffff
 801164c:	3fe00000 	.word	0x3fe00000
 8011650:	41e00000 	.word	0x41e00000
 8011654:	4b60      	ldr	r3, [pc, #384]	; (80117d8 <__ieee754_pow+0x3f0>)
 8011656:	2200      	movs	r2, #0
 8011658:	f7ee fe2e 	bl	80002b8 <__aeabi_dsub>
 801165c:	a354      	add	r3, pc, #336	; (adr r3, 80117b0 <__ieee754_pow+0x3c8>)
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	4604      	mov	r4, r0
 8011664:	460d      	mov	r5, r1
 8011666:	f7ee ffdf 	bl	8000628 <__aeabi_dmul>
 801166a:	a353      	add	r3, pc, #332	; (adr r3, 80117b8 <__ieee754_pow+0x3d0>)
 801166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011670:	4606      	mov	r6, r0
 8011672:	460f      	mov	r7, r1
 8011674:	4620      	mov	r0, r4
 8011676:	4629      	mov	r1, r5
 8011678:	f7ee ffd6 	bl	8000628 <__aeabi_dmul>
 801167c:	4b57      	ldr	r3, [pc, #348]	; (80117dc <__ieee754_pow+0x3f4>)
 801167e:	4682      	mov	sl, r0
 8011680:	468b      	mov	fp, r1
 8011682:	2200      	movs	r2, #0
 8011684:	4620      	mov	r0, r4
 8011686:	4629      	mov	r1, r5
 8011688:	f7ee ffce 	bl	8000628 <__aeabi_dmul>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	a14b      	add	r1, pc, #300	; (adr r1, 80117c0 <__ieee754_pow+0x3d8>)
 8011692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011696:	f7ee fe0f 	bl	80002b8 <__aeabi_dsub>
 801169a:	4622      	mov	r2, r4
 801169c:	462b      	mov	r3, r5
 801169e:	f7ee ffc3 	bl	8000628 <__aeabi_dmul>
 80116a2:	4602      	mov	r2, r0
 80116a4:	460b      	mov	r3, r1
 80116a6:	2000      	movs	r0, #0
 80116a8:	494d      	ldr	r1, [pc, #308]	; (80117e0 <__ieee754_pow+0x3f8>)
 80116aa:	f7ee fe05 	bl	80002b8 <__aeabi_dsub>
 80116ae:	4622      	mov	r2, r4
 80116b0:	4680      	mov	r8, r0
 80116b2:	4689      	mov	r9, r1
 80116b4:	462b      	mov	r3, r5
 80116b6:	4620      	mov	r0, r4
 80116b8:	4629      	mov	r1, r5
 80116ba:	f7ee ffb5 	bl	8000628 <__aeabi_dmul>
 80116be:	4602      	mov	r2, r0
 80116c0:	460b      	mov	r3, r1
 80116c2:	4640      	mov	r0, r8
 80116c4:	4649      	mov	r1, r9
 80116c6:	f7ee ffaf 	bl	8000628 <__aeabi_dmul>
 80116ca:	a33f      	add	r3, pc, #252	; (adr r3, 80117c8 <__ieee754_pow+0x3e0>)
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	f7ee ffaa 	bl	8000628 <__aeabi_dmul>
 80116d4:	4602      	mov	r2, r0
 80116d6:	460b      	mov	r3, r1
 80116d8:	4650      	mov	r0, sl
 80116da:	4659      	mov	r1, fp
 80116dc:	f7ee fdec 	bl	80002b8 <__aeabi_dsub>
 80116e0:	4602      	mov	r2, r0
 80116e2:	460b      	mov	r3, r1
 80116e4:	4680      	mov	r8, r0
 80116e6:	4689      	mov	r9, r1
 80116e8:	4630      	mov	r0, r6
 80116ea:	4639      	mov	r1, r7
 80116ec:	f7ee fde6 	bl	80002bc <__adddf3>
 80116f0:	2000      	movs	r0, #0
 80116f2:	4632      	mov	r2, r6
 80116f4:	463b      	mov	r3, r7
 80116f6:	4604      	mov	r4, r0
 80116f8:	460d      	mov	r5, r1
 80116fa:	f7ee fddd 	bl	80002b8 <__aeabi_dsub>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	4640      	mov	r0, r8
 8011704:	4649      	mov	r1, r9
 8011706:	f7ee fdd7 	bl	80002b8 <__aeabi_dsub>
 801170a:	9b04      	ldr	r3, [sp, #16]
 801170c:	9a06      	ldr	r2, [sp, #24]
 801170e:	3b01      	subs	r3, #1
 8011710:	4313      	orrs	r3, r2
 8011712:	4682      	mov	sl, r0
 8011714:	468b      	mov	fp, r1
 8011716:	f040 81e7 	bne.w	8011ae8 <__ieee754_pow+0x700>
 801171a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80117d0 <__ieee754_pow+0x3e8>
 801171e:	eeb0 8a47 	vmov.f32	s16, s14
 8011722:	eef0 8a67 	vmov.f32	s17, s15
 8011726:	e9dd 6700 	ldrd	r6, r7, [sp]
 801172a:	2600      	movs	r6, #0
 801172c:	4632      	mov	r2, r6
 801172e:	463b      	mov	r3, r7
 8011730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011734:	f7ee fdc0 	bl	80002b8 <__aeabi_dsub>
 8011738:	4622      	mov	r2, r4
 801173a:	462b      	mov	r3, r5
 801173c:	f7ee ff74 	bl	8000628 <__aeabi_dmul>
 8011740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011744:	4680      	mov	r8, r0
 8011746:	4689      	mov	r9, r1
 8011748:	4650      	mov	r0, sl
 801174a:	4659      	mov	r1, fp
 801174c:	f7ee ff6c 	bl	8000628 <__aeabi_dmul>
 8011750:	4602      	mov	r2, r0
 8011752:	460b      	mov	r3, r1
 8011754:	4640      	mov	r0, r8
 8011756:	4649      	mov	r1, r9
 8011758:	f7ee fdb0 	bl	80002bc <__adddf3>
 801175c:	4632      	mov	r2, r6
 801175e:	463b      	mov	r3, r7
 8011760:	4680      	mov	r8, r0
 8011762:	4689      	mov	r9, r1
 8011764:	4620      	mov	r0, r4
 8011766:	4629      	mov	r1, r5
 8011768:	f7ee ff5e 	bl	8000628 <__aeabi_dmul>
 801176c:	460b      	mov	r3, r1
 801176e:	4604      	mov	r4, r0
 8011770:	460d      	mov	r5, r1
 8011772:	4602      	mov	r2, r0
 8011774:	4649      	mov	r1, r9
 8011776:	4640      	mov	r0, r8
 8011778:	f7ee fda0 	bl	80002bc <__adddf3>
 801177c:	4b19      	ldr	r3, [pc, #100]	; (80117e4 <__ieee754_pow+0x3fc>)
 801177e:	4299      	cmp	r1, r3
 8011780:	ec45 4b19 	vmov	d9, r4, r5
 8011784:	4606      	mov	r6, r0
 8011786:	460f      	mov	r7, r1
 8011788:	468b      	mov	fp, r1
 801178a:	f340 82f1 	ble.w	8011d70 <__ieee754_pow+0x988>
 801178e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011792:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011796:	4303      	orrs	r3, r0
 8011798:	f000 81e4 	beq.w	8011b64 <__ieee754_pow+0x77c>
 801179c:	ec51 0b18 	vmov	r0, r1, d8
 80117a0:	2200      	movs	r2, #0
 80117a2:	2300      	movs	r3, #0
 80117a4:	f7ef f9b2 	bl	8000b0c <__aeabi_dcmplt>
 80117a8:	3800      	subs	r0, #0
 80117aa:	bf18      	it	ne
 80117ac:	2001      	movne	r0, #1
 80117ae:	e72b      	b.n	8011608 <__ieee754_pow+0x220>
 80117b0:	60000000 	.word	0x60000000
 80117b4:	3ff71547 	.word	0x3ff71547
 80117b8:	f85ddf44 	.word	0xf85ddf44
 80117bc:	3e54ae0b 	.word	0x3e54ae0b
 80117c0:	55555555 	.word	0x55555555
 80117c4:	3fd55555 	.word	0x3fd55555
 80117c8:	652b82fe 	.word	0x652b82fe
 80117cc:	3ff71547 	.word	0x3ff71547
 80117d0:	00000000 	.word	0x00000000
 80117d4:	bff00000 	.word	0xbff00000
 80117d8:	3ff00000 	.word	0x3ff00000
 80117dc:	3fd00000 	.word	0x3fd00000
 80117e0:	3fe00000 	.word	0x3fe00000
 80117e4:	408fffff 	.word	0x408fffff
 80117e8:	4bd5      	ldr	r3, [pc, #852]	; (8011b40 <__ieee754_pow+0x758>)
 80117ea:	402b      	ands	r3, r5
 80117ec:	2200      	movs	r2, #0
 80117ee:	b92b      	cbnz	r3, 80117fc <__ieee754_pow+0x414>
 80117f0:	4bd4      	ldr	r3, [pc, #848]	; (8011b44 <__ieee754_pow+0x75c>)
 80117f2:	f7ee ff19 	bl	8000628 <__aeabi_dmul>
 80117f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80117fa:	460c      	mov	r4, r1
 80117fc:	1523      	asrs	r3, r4, #20
 80117fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011802:	4413      	add	r3, r2
 8011804:	9305      	str	r3, [sp, #20]
 8011806:	4bd0      	ldr	r3, [pc, #832]	; (8011b48 <__ieee754_pow+0x760>)
 8011808:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801180c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011810:	429c      	cmp	r4, r3
 8011812:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011816:	dd08      	ble.n	801182a <__ieee754_pow+0x442>
 8011818:	4bcc      	ldr	r3, [pc, #816]	; (8011b4c <__ieee754_pow+0x764>)
 801181a:	429c      	cmp	r4, r3
 801181c:	f340 8162 	ble.w	8011ae4 <__ieee754_pow+0x6fc>
 8011820:	9b05      	ldr	r3, [sp, #20]
 8011822:	3301      	adds	r3, #1
 8011824:	9305      	str	r3, [sp, #20]
 8011826:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801182a:	2400      	movs	r4, #0
 801182c:	00e3      	lsls	r3, r4, #3
 801182e:	9307      	str	r3, [sp, #28]
 8011830:	4bc7      	ldr	r3, [pc, #796]	; (8011b50 <__ieee754_pow+0x768>)
 8011832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011836:	ed93 7b00 	vldr	d7, [r3]
 801183a:	4629      	mov	r1, r5
 801183c:	ec53 2b17 	vmov	r2, r3, d7
 8011840:	eeb0 9a47 	vmov.f32	s18, s14
 8011844:	eef0 9a67 	vmov.f32	s19, s15
 8011848:	4682      	mov	sl, r0
 801184a:	f7ee fd35 	bl	80002b8 <__aeabi_dsub>
 801184e:	4652      	mov	r2, sl
 8011850:	4606      	mov	r6, r0
 8011852:	460f      	mov	r7, r1
 8011854:	462b      	mov	r3, r5
 8011856:	ec51 0b19 	vmov	r0, r1, d9
 801185a:	f7ee fd2f 	bl	80002bc <__adddf3>
 801185e:	4602      	mov	r2, r0
 8011860:	460b      	mov	r3, r1
 8011862:	2000      	movs	r0, #0
 8011864:	49bb      	ldr	r1, [pc, #748]	; (8011b54 <__ieee754_pow+0x76c>)
 8011866:	f7ef f809 	bl	800087c <__aeabi_ddiv>
 801186a:	ec41 0b1a 	vmov	d10, r0, r1
 801186e:	4602      	mov	r2, r0
 8011870:	460b      	mov	r3, r1
 8011872:	4630      	mov	r0, r6
 8011874:	4639      	mov	r1, r7
 8011876:	f7ee fed7 	bl	8000628 <__aeabi_dmul>
 801187a:	2300      	movs	r3, #0
 801187c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011880:	9302      	str	r3, [sp, #8]
 8011882:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011886:	46ab      	mov	fp, r5
 8011888:	106d      	asrs	r5, r5, #1
 801188a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801188e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011892:	ec41 0b18 	vmov	d8, r0, r1
 8011896:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801189a:	2200      	movs	r2, #0
 801189c:	4640      	mov	r0, r8
 801189e:	4649      	mov	r1, r9
 80118a0:	4614      	mov	r4, r2
 80118a2:	461d      	mov	r5, r3
 80118a4:	f7ee fec0 	bl	8000628 <__aeabi_dmul>
 80118a8:	4602      	mov	r2, r0
 80118aa:	460b      	mov	r3, r1
 80118ac:	4630      	mov	r0, r6
 80118ae:	4639      	mov	r1, r7
 80118b0:	f7ee fd02 	bl	80002b8 <__aeabi_dsub>
 80118b4:	ec53 2b19 	vmov	r2, r3, d9
 80118b8:	4606      	mov	r6, r0
 80118ba:	460f      	mov	r7, r1
 80118bc:	4620      	mov	r0, r4
 80118be:	4629      	mov	r1, r5
 80118c0:	f7ee fcfa 	bl	80002b8 <__aeabi_dsub>
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	4650      	mov	r0, sl
 80118ca:	4659      	mov	r1, fp
 80118cc:	f7ee fcf4 	bl	80002b8 <__aeabi_dsub>
 80118d0:	4642      	mov	r2, r8
 80118d2:	464b      	mov	r3, r9
 80118d4:	f7ee fea8 	bl	8000628 <__aeabi_dmul>
 80118d8:	4602      	mov	r2, r0
 80118da:	460b      	mov	r3, r1
 80118dc:	4630      	mov	r0, r6
 80118de:	4639      	mov	r1, r7
 80118e0:	f7ee fcea 	bl	80002b8 <__aeabi_dsub>
 80118e4:	ec53 2b1a 	vmov	r2, r3, d10
 80118e8:	f7ee fe9e 	bl	8000628 <__aeabi_dmul>
 80118ec:	ec53 2b18 	vmov	r2, r3, d8
 80118f0:	ec41 0b19 	vmov	d9, r0, r1
 80118f4:	ec51 0b18 	vmov	r0, r1, d8
 80118f8:	f7ee fe96 	bl	8000628 <__aeabi_dmul>
 80118fc:	a37c      	add	r3, pc, #496	; (adr r3, 8011af0 <__ieee754_pow+0x708>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	4604      	mov	r4, r0
 8011904:	460d      	mov	r5, r1
 8011906:	f7ee fe8f 	bl	8000628 <__aeabi_dmul>
 801190a:	a37b      	add	r3, pc, #492	; (adr r3, 8011af8 <__ieee754_pow+0x710>)
 801190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011910:	f7ee fcd4 	bl	80002bc <__adddf3>
 8011914:	4622      	mov	r2, r4
 8011916:	462b      	mov	r3, r5
 8011918:	f7ee fe86 	bl	8000628 <__aeabi_dmul>
 801191c:	a378      	add	r3, pc, #480	; (adr r3, 8011b00 <__ieee754_pow+0x718>)
 801191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011922:	f7ee fccb 	bl	80002bc <__adddf3>
 8011926:	4622      	mov	r2, r4
 8011928:	462b      	mov	r3, r5
 801192a:	f7ee fe7d 	bl	8000628 <__aeabi_dmul>
 801192e:	a376      	add	r3, pc, #472	; (adr r3, 8011b08 <__ieee754_pow+0x720>)
 8011930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011934:	f7ee fcc2 	bl	80002bc <__adddf3>
 8011938:	4622      	mov	r2, r4
 801193a:	462b      	mov	r3, r5
 801193c:	f7ee fe74 	bl	8000628 <__aeabi_dmul>
 8011940:	a373      	add	r3, pc, #460	; (adr r3, 8011b10 <__ieee754_pow+0x728>)
 8011942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011946:	f7ee fcb9 	bl	80002bc <__adddf3>
 801194a:	4622      	mov	r2, r4
 801194c:	462b      	mov	r3, r5
 801194e:	f7ee fe6b 	bl	8000628 <__aeabi_dmul>
 8011952:	a371      	add	r3, pc, #452	; (adr r3, 8011b18 <__ieee754_pow+0x730>)
 8011954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011958:	f7ee fcb0 	bl	80002bc <__adddf3>
 801195c:	4622      	mov	r2, r4
 801195e:	4606      	mov	r6, r0
 8011960:	460f      	mov	r7, r1
 8011962:	462b      	mov	r3, r5
 8011964:	4620      	mov	r0, r4
 8011966:	4629      	mov	r1, r5
 8011968:	f7ee fe5e 	bl	8000628 <__aeabi_dmul>
 801196c:	4602      	mov	r2, r0
 801196e:	460b      	mov	r3, r1
 8011970:	4630      	mov	r0, r6
 8011972:	4639      	mov	r1, r7
 8011974:	f7ee fe58 	bl	8000628 <__aeabi_dmul>
 8011978:	4642      	mov	r2, r8
 801197a:	4604      	mov	r4, r0
 801197c:	460d      	mov	r5, r1
 801197e:	464b      	mov	r3, r9
 8011980:	ec51 0b18 	vmov	r0, r1, d8
 8011984:	f7ee fc9a 	bl	80002bc <__adddf3>
 8011988:	ec53 2b19 	vmov	r2, r3, d9
 801198c:	f7ee fe4c 	bl	8000628 <__aeabi_dmul>
 8011990:	4622      	mov	r2, r4
 8011992:	462b      	mov	r3, r5
 8011994:	f7ee fc92 	bl	80002bc <__adddf3>
 8011998:	4642      	mov	r2, r8
 801199a:	4682      	mov	sl, r0
 801199c:	468b      	mov	fp, r1
 801199e:	464b      	mov	r3, r9
 80119a0:	4640      	mov	r0, r8
 80119a2:	4649      	mov	r1, r9
 80119a4:	f7ee fe40 	bl	8000628 <__aeabi_dmul>
 80119a8:	4b6b      	ldr	r3, [pc, #428]	; (8011b58 <__ieee754_pow+0x770>)
 80119aa:	2200      	movs	r2, #0
 80119ac:	4606      	mov	r6, r0
 80119ae:	460f      	mov	r7, r1
 80119b0:	f7ee fc84 	bl	80002bc <__adddf3>
 80119b4:	4652      	mov	r2, sl
 80119b6:	465b      	mov	r3, fp
 80119b8:	f7ee fc80 	bl	80002bc <__adddf3>
 80119bc:	2000      	movs	r0, #0
 80119be:	4604      	mov	r4, r0
 80119c0:	460d      	mov	r5, r1
 80119c2:	4602      	mov	r2, r0
 80119c4:	460b      	mov	r3, r1
 80119c6:	4640      	mov	r0, r8
 80119c8:	4649      	mov	r1, r9
 80119ca:	f7ee fe2d 	bl	8000628 <__aeabi_dmul>
 80119ce:	4b62      	ldr	r3, [pc, #392]	; (8011b58 <__ieee754_pow+0x770>)
 80119d0:	4680      	mov	r8, r0
 80119d2:	4689      	mov	r9, r1
 80119d4:	2200      	movs	r2, #0
 80119d6:	4620      	mov	r0, r4
 80119d8:	4629      	mov	r1, r5
 80119da:	f7ee fc6d 	bl	80002b8 <__aeabi_dsub>
 80119de:	4632      	mov	r2, r6
 80119e0:	463b      	mov	r3, r7
 80119e2:	f7ee fc69 	bl	80002b8 <__aeabi_dsub>
 80119e6:	4602      	mov	r2, r0
 80119e8:	460b      	mov	r3, r1
 80119ea:	4650      	mov	r0, sl
 80119ec:	4659      	mov	r1, fp
 80119ee:	f7ee fc63 	bl	80002b8 <__aeabi_dsub>
 80119f2:	ec53 2b18 	vmov	r2, r3, d8
 80119f6:	f7ee fe17 	bl	8000628 <__aeabi_dmul>
 80119fa:	4622      	mov	r2, r4
 80119fc:	4606      	mov	r6, r0
 80119fe:	460f      	mov	r7, r1
 8011a00:	462b      	mov	r3, r5
 8011a02:	ec51 0b19 	vmov	r0, r1, d9
 8011a06:	f7ee fe0f 	bl	8000628 <__aeabi_dmul>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	460b      	mov	r3, r1
 8011a0e:	4630      	mov	r0, r6
 8011a10:	4639      	mov	r1, r7
 8011a12:	f7ee fc53 	bl	80002bc <__adddf3>
 8011a16:	4606      	mov	r6, r0
 8011a18:	460f      	mov	r7, r1
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	4640      	mov	r0, r8
 8011a20:	4649      	mov	r1, r9
 8011a22:	f7ee fc4b 	bl	80002bc <__adddf3>
 8011a26:	a33e      	add	r3, pc, #248	; (adr r3, 8011b20 <__ieee754_pow+0x738>)
 8011a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	4604      	mov	r4, r0
 8011a30:	460d      	mov	r5, r1
 8011a32:	f7ee fdf9 	bl	8000628 <__aeabi_dmul>
 8011a36:	4642      	mov	r2, r8
 8011a38:	ec41 0b18 	vmov	d8, r0, r1
 8011a3c:	464b      	mov	r3, r9
 8011a3e:	4620      	mov	r0, r4
 8011a40:	4629      	mov	r1, r5
 8011a42:	f7ee fc39 	bl	80002b8 <__aeabi_dsub>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	4639      	mov	r1, r7
 8011a4e:	f7ee fc33 	bl	80002b8 <__aeabi_dsub>
 8011a52:	a335      	add	r3, pc, #212	; (adr r3, 8011b28 <__ieee754_pow+0x740>)
 8011a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a58:	f7ee fde6 	bl	8000628 <__aeabi_dmul>
 8011a5c:	a334      	add	r3, pc, #208	; (adr r3, 8011b30 <__ieee754_pow+0x748>)
 8011a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a62:	4606      	mov	r6, r0
 8011a64:	460f      	mov	r7, r1
 8011a66:	4620      	mov	r0, r4
 8011a68:	4629      	mov	r1, r5
 8011a6a:	f7ee fddd 	bl	8000628 <__aeabi_dmul>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	460b      	mov	r3, r1
 8011a72:	4630      	mov	r0, r6
 8011a74:	4639      	mov	r1, r7
 8011a76:	f7ee fc21 	bl	80002bc <__adddf3>
 8011a7a:	9a07      	ldr	r2, [sp, #28]
 8011a7c:	4b37      	ldr	r3, [pc, #220]	; (8011b5c <__ieee754_pow+0x774>)
 8011a7e:	4413      	add	r3, r2
 8011a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a84:	f7ee fc1a 	bl	80002bc <__adddf3>
 8011a88:	4682      	mov	sl, r0
 8011a8a:	9805      	ldr	r0, [sp, #20]
 8011a8c:	468b      	mov	fp, r1
 8011a8e:	f7ee fd61 	bl	8000554 <__aeabi_i2d>
 8011a92:	9a07      	ldr	r2, [sp, #28]
 8011a94:	4b32      	ldr	r3, [pc, #200]	; (8011b60 <__ieee754_pow+0x778>)
 8011a96:	4413      	add	r3, r2
 8011a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	460f      	mov	r7, r1
 8011aa0:	4652      	mov	r2, sl
 8011aa2:	465b      	mov	r3, fp
 8011aa4:	ec51 0b18 	vmov	r0, r1, d8
 8011aa8:	f7ee fc08 	bl	80002bc <__adddf3>
 8011aac:	4642      	mov	r2, r8
 8011aae:	464b      	mov	r3, r9
 8011ab0:	f7ee fc04 	bl	80002bc <__adddf3>
 8011ab4:	4632      	mov	r2, r6
 8011ab6:	463b      	mov	r3, r7
 8011ab8:	f7ee fc00 	bl	80002bc <__adddf3>
 8011abc:	2000      	movs	r0, #0
 8011abe:	4632      	mov	r2, r6
 8011ac0:	463b      	mov	r3, r7
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	460d      	mov	r5, r1
 8011ac6:	f7ee fbf7 	bl	80002b8 <__aeabi_dsub>
 8011aca:	4642      	mov	r2, r8
 8011acc:	464b      	mov	r3, r9
 8011ace:	f7ee fbf3 	bl	80002b8 <__aeabi_dsub>
 8011ad2:	ec53 2b18 	vmov	r2, r3, d8
 8011ad6:	f7ee fbef 	bl	80002b8 <__aeabi_dsub>
 8011ada:	4602      	mov	r2, r0
 8011adc:	460b      	mov	r3, r1
 8011ade:	4650      	mov	r0, sl
 8011ae0:	4659      	mov	r1, fp
 8011ae2:	e610      	b.n	8011706 <__ieee754_pow+0x31e>
 8011ae4:	2401      	movs	r4, #1
 8011ae6:	e6a1      	b.n	801182c <__ieee754_pow+0x444>
 8011ae8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011b38 <__ieee754_pow+0x750>
 8011aec:	e617      	b.n	801171e <__ieee754_pow+0x336>
 8011aee:	bf00      	nop
 8011af0:	4a454eef 	.word	0x4a454eef
 8011af4:	3fca7e28 	.word	0x3fca7e28
 8011af8:	93c9db65 	.word	0x93c9db65
 8011afc:	3fcd864a 	.word	0x3fcd864a
 8011b00:	a91d4101 	.word	0xa91d4101
 8011b04:	3fd17460 	.word	0x3fd17460
 8011b08:	518f264d 	.word	0x518f264d
 8011b0c:	3fd55555 	.word	0x3fd55555
 8011b10:	db6fabff 	.word	0xdb6fabff
 8011b14:	3fdb6db6 	.word	0x3fdb6db6
 8011b18:	33333303 	.word	0x33333303
 8011b1c:	3fe33333 	.word	0x3fe33333
 8011b20:	e0000000 	.word	0xe0000000
 8011b24:	3feec709 	.word	0x3feec709
 8011b28:	dc3a03fd 	.word	0xdc3a03fd
 8011b2c:	3feec709 	.word	0x3feec709
 8011b30:	145b01f5 	.word	0x145b01f5
 8011b34:	be3e2fe0 	.word	0xbe3e2fe0
 8011b38:	00000000 	.word	0x00000000
 8011b3c:	3ff00000 	.word	0x3ff00000
 8011b40:	7ff00000 	.word	0x7ff00000
 8011b44:	43400000 	.word	0x43400000
 8011b48:	0003988e 	.word	0x0003988e
 8011b4c:	000bb679 	.word	0x000bb679
 8011b50:	08013e60 	.word	0x08013e60
 8011b54:	3ff00000 	.word	0x3ff00000
 8011b58:	40080000 	.word	0x40080000
 8011b5c:	08013e80 	.word	0x08013e80
 8011b60:	08013e70 	.word	0x08013e70
 8011b64:	a3b5      	add	r3, pc, #724	; (adr r3, 8011e3c <__ieee754_pow+0xa54>)
 8011b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6a:	4640      	mov	r0, r8
 8011b6c:	4649      	mov	r1, r9
 8011b6e:	f7ee fba5 	bl	80002bc <__adddf3>
 8011b72:	4622      	mov	r2, r4
 8011b74:	ec41 0b1a 	vmov	d10, r0, r1
 8011b78:	462b      	mov	r3, r5
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	4639      	mov	r1, r7
 8011b7e:	f7ee fb9b 	bl	80002b8 <__aeabi_dsub>
 8011b82:	4602      	mov	r2, r0
 8011b84:	460b      	mov	r3, r1
 8011b86:	ec51 0b1a 	vmov	r0, r1, d10
 8011b8a:	f7ee ffdd 	bl	8000b48 <__aeabi_dcmpgt>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	f47f ae04 	bne.w	801179c <__ieee754_pow+0x3b4>
 8011b94:	4aa4      	ldr	r2, [pc, #656]	; (8011e28 <__ieee754_pow+0xa40>)
 8011b96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	f340 8108 	ble.w	8011db0 <__ieee754_pow+0x9c8>
 8011ba0:	151b      	asrs	r3, r3, #20
 8011ba2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011ba6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011baa:	fa4a f303 	asr.w	r3, sl, r3
 8011bae:	445b      	add	r3, fp
 8011bb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011bb4:	4e9d      	ldr	r6, [pc, #628]	; (8011e2c <__ieee754_pow+0xa44>)
 8011bb6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011bba:	4116      	asrs	r6, r2
 8011bbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	ea23 0106 	bic.w	r1, r3, r6
 8011bc6:	f1c2 0214 	rsb	r2, r2, #20
 8011bca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011bce:	fa4a fa02 	asr.w	sl, sl, r2
 8011bd2:	f1bb 0f00 	cmp.w	fp, #0
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	460b      	mov	r3, r1
 8011bda:	4620      	mov	r0, r4
 8011bdc:	4629      	mov	r1, r5
 8011bde:	bfb8      	it	lt
 8011be0:	f1ca 0a00 	rsblt	sl, sl, #0
 8011be4:	f7ee fb68 	bl	80002b8 <__aeabi_dsub>
 8011be8:	ec41 0b19 	vmov	d9, r0, r1
 8011bec:	4642      	mov	r2, r8
 8011bee:	464b      	mov	r3, r9
 8011bf0:	ec51 0b19 	vmov	r0, r1, d9
 8011bf4:	f7ee fb62 	bl	80002bc <__adddf3>
 8011bf8:	a37b      	add	r3, pc, #492	; (adr r3, 8011de8 <__ieee754_pow+0xa00>)
 8011bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfe:	2000      	movs	r0, #0
 8011c00:	4604      	mov	r4, r0
 8011c02:	460d      	mov	r5, r1
 8011c04:	f7ee fd10 	bl	8000628 <__aeabi_dmul>
 8011c08:	ec53 2b19 	vmov	r2, r3, d9
 8011c0c:	4606      	mov	r6, r0
 8011c0e:	460f      	mov	r7, r1
 8011c10:	4620      	mov	r0, r4
 8011c12:	4629      	mov	r1, r5
 8011c14:	f7ee fb50 	bl	80002b8 <__aeabi_dsub>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	4640      	mov	r0, r8
 8011c1e:	4649      	mov	r1, r9
 8011c20:	f7ee fb4a 	bl	80002b8 <__aeabi_dsub>
 8011c24:	a372      	add	r3, pc, #456	; (adr r3, 8011df0 <__ieee754_pow+0xa08>)
 8011c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2a:	f7ee fcfd 	bl	8000628 <__aeabi_dmul>
 8011c2e:	a372      	add	r3, pc, #456	; (adr r3, 8011df8 <__ieee754_pow+0xa10>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	4680      	mov	r8, r0
 8011c36:	4689      	mov	r9, r1
 8011c38:	4620      	mov	r0, r4
 8011c3a:	4629      	mov	r1, r5
 8011c3c:	f7ee fcf4 	bl	8000628 <__aeabi_dmul>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	4640      	mov	r0, r8
 8011c46:	4649      	mov	r1, r9
 8011c48:	f7ee fb38 	bl	80002bc <__adddf3>
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	460d      	mov	r5, r1
 8011c50:	4602      	mov	r2, r0
 8011c52:	460b      	mov	r3, r1
 8011c54:	4630      	mov	r0, r6
 8011c56:	4639      	mov	r1, r7
 8011c58:	f7ee fb30 	bl	80002bc <__adddf3>
 8011c5c:	4632      	mov	r2, r6
 8011c5e:	463b      	mov	r3, r7
 8011c60:	4680      	mov	r8, r0
 8011c62:	4689      	mov	r9, r1
 8011c64:	f7ee fb28 	bl	80002b8 <__aeabi_dsub>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	4629      	mov	r1, r5
 8011c70:	f7ee fb22 	bl	80002b8 <__aeabi_dsub>
 8011c74:	4642      	mov	r2, r8
 8011c76:	4606      	mov	r6, r0
 8011c78:	460f      	mov	r7, r1
 8011c7a:	464b      	mov	r3, r9
 8011c7c:	4640      	mov	r0, r8
 8011c7e:	4649      	mov	r1, r9
 8011c80:	f7ee fcd2 	bl	8000628 <__aeabi_dmul>
 8011c84:	a35e      	add	r3, pc, #376	; (adr r3, 8011e00 <__ieee754_pow+0xa18>)
 8011c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	460d      	mov	r5, r1
 8011c8e:	f7ee fccb 	bl	8000628 <__aeabi_dmul>
 8011c92:	a35d      	add	r3, pc, #372	; (adr r3, 8011e08 <__ieee754_pow+0xa20>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	f7ee fb0e 	bl	80002b8 <__aeabi_dsub>
 8011c9c:	4622      	mov	r2, r4
 8011c9e:	462b      	mov	r3, r5
 8011ca0:	f7ee fcc2 	bl	8000628 <__aeabi_dmul>
 8011ca4:	a35a      	add	r3, pc, #360	; (adr r3, 8011e10 <__ieee754_pow+0xa28>)
 8011ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011caa:	f7ee fb07 	bl	80002bc <__adddf3>
 8011cae:	4622      	mov	r2, r4
 8011cb0:	462b      	mov	r3, r5
 8011cb2:	f7ee fcb9 	bl	8000628 <__aeabi_dmul>
 8011cb6:	a358      	add	r3, pc, #352	; (adr r3, 8011e18 <__ieee754_pow+0xa30>)
 8011cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbc:	f7ee fafc 	bl	80002b8 <__aeabi_dsub>
 8011cc0:	4622      	mov	r2, r4
 8011cc2:	462b      	mov	r3, r5
 8011cc4:	f7ee fcb0 	bl	8000628 <__aeabi_dmul>
 8011cc8:	a355      	add	r3, pc, #340	; (adr r3, 8011e20 <__ieee754_pow+0xa38>)
 8011cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cce:	f7ee faf5 	bl	80002bc <__adddf3>
 8011cd2:	4622      	mov	r2, r4
 8011cd4:	462b      	mov	r3, r5
 8011cd6:	f7ee fca7 	bl	8000628 <__aeabi_dmul>
 8011cda:	4602      	mov	r2, r0
 8011cdc:	460b      	mov	r3, r1
 8011cde:	4640      	mov	r0, r8
 8011ce0:	4649      	mov	r1, r9
 8011ce2:	f7ee fae9 	bl	80002b8 <__aeabi_dsub>
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	460d      	mov	r5, r1
 8011cea:	4602      	mov	r2, r0
 8011cec:	460b      	mov	r3, r1
 8011cee:	4640      	mov	r0, r8
 8011cf0:	4649      	mov	r1, r9
 8011cf2:	f7ee fc99 	bl	8000628 <__aeabi_dmul>
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	ec41 0b19 	vmov	d9, r0, r1
 8011cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d00:	4620      	mov	r0, r4
 8011d02:	4629      	mov	r1, r5
 8011d04:	f7ee fad8 	bl	80002b8 <__aeabi_dsub>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	ec51 0b19 	vmov	r0, r1, d9
 8011d10:	f7ee fdb4 	bl	800087c <__aeabi_ddiv>
 8011d14:	4632      	mov	r2, r6
 8011d16:	4604      	mov	r4, r0
 8011d18:	460d      	mov	r5, r1
 8011d1a:	463b      	mov	r3, r7
 8011d1c:	4640      	mov	r0, r8
 8011d1e:	4649      	mov	r1, r9
 8011d20:	f7ee fc82 	bl	8000628 <__aeabi_dmul>
 8011d24:	4632      	mov	r2, r6
 8011d26:	463b      	mov	r3, r7
 8011d28:	f7ee fac8 	bl	80002bc <__adddf3>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	460b      	mov	r3, r1
 8011d30:	4620      	mov	r0, r4
 8011d32:	4629      	mov	r1, r5
 8011d34:	f7ee fac0 	bl	80002b8 <__aeabi_dsub>
 8011d38:	4642      	mov	r2, r8
 8011d3a:	464b      	mov	r3, r9
 8011d3c:	f7ee fabc 	bl	80002b8 <__aeabi_dsub>
 8011d40:	460b      	mov	r3, r1
 8011d42:	4602      	mov	r2, r0
 8011d44:	493a      	ldr	r1, [pc, #232]	; (8011e30 <__ieee754_pow+0xa48>)
 8011d46:	2000      	movs	r0, #0
 8011d48:	f7ee fab6 	bl	80002b8 <__aeabi_dsub>
 8011d4c:	ec41 0b10 	vmov	d0, r0, r1
 8011d50:	ee10 3a90 	vmov	r3, s1
 8011d54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d5c:	da2b      	bge.n	8011db6 <__ieee754_pow+0x9ce>
 8011d5e:	4650      	mov	r0, sl
 8011d60:	f001 fa76 	bl	8013250 <scalbn>
 8011d64:	ec51 0b10 	vmov	r0, r1, d0
 8011d68:	ec53 2b18 	vmov	r2, r3, d8
 8011d6c:	f7ff bbed 	b.w	801154a <__ieee754_pow+0x162>
 8011d70:	4b30      	ldr	r3, [pc, #192]	; (8011e34 <__ieee754_pow+0xa4c>)
 8011d72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011d76:	429e      	cmp	r6, r3
 8011d78:	f77f af0c 	ble.w	8011b94 <__ieee754_pow+0x7ac>
 8011d7c:	4b2e      	ldr	r3, [pc, #184]	; (8011e38 <__ieee754_pow+0xa50>)
 8011d7e:	440b      	add	r3, r1
 8011d80:	4303      	orrs	r3, r0
 8011d82:	d009      	beq.n	8011d98 <__ieee754_pow+0x9b0>
 8011d84:	ec51 0b18 	vmov	r0, r1, d8
 8011d88:	2200      	movs	r2, #0
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	f7ee febe 	bl	8000b0c <__aeabi_dcmplt>
 8011d90:	3800      	subs	r0, #0
 8011d92:	bf18      	it	ne
 8011d94:	2001      	movne	r0, #1
 8011d96:	e447      	b.n	8011628 <__ieee754_pow+0x240>
 8011d98:	4622      	mov	r2, r4
 8011d9a:	462b      	mov	r3, r5
 8011d9c:	f7ee fa8c 	bl	80002b8 <__aeabi_dsub>
 8011da0:	4642      	mov	r2, r8
 8011da2:	464b      	mov	r3, r9
 8011da4:	f7ee fec6 	bl	8000b34 <__aeabi_dcmpge>
 8011da8:	2800      	cmp	r0, #0
 8011daa:	f43f aef3 	beq.w	8011b94 <__ieee754_pow+0x7ac>
 8011dae:	e7e9      	b.n	8011d84 <__ieee754_pow+0x99c>
 8011db0:	f04f 0a00 	mov.w	sl, #0
 8011db4:	e71a      	b.n	8011bec <__ieee754_pow+0x804>
 8011db6:	ec51 0b10 	vmov	r0, r1, d0
 8011dba:	4619      	mov	r1, r3
 8011dbc:	e7d4      	b.n	8011d68 <__ieee754_pow+0x980>
 8011dbe:	491c      	ldr	r1, [pc, #112]	; (8011e30 <__ieee754_pow+0xa48>)
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	f7ff bb30 	b.w	8011426 <__ieee754_pow+0x3e>
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	2100      	movs	r1, #0
 8011dca:	f7ff bb2c 	b.w	8011426 <__ieee754_pow+0x3e>
 8011dce:	4630      	mov	r0, r6
 8011dd0:	4639      	mov	r1, r7
 8011dd2:	f7ff bb28 	b.w	8011426 <__ieee754_pow+0x3e>
 8011dd6:	9204      	str	r2, [sp, #16]
 8011dd8:	f7ff bb7a 	b.w	80114d0 <__ieee754_pow+0xe8>
 8011ddc:	2300      	movs	r3, #0
 8011dde:	f7ff bb64 	b.w	80114aa <__ieee754_pow+0xc2>
 8011de2:	bf00      	nop
 8011de4:	f3af 8000 	nop.w
 8011de8:	00000000 	.word	0x00000000
 8011dec:	3fe62e43 	.word	0x3fe62e43
 8011df0:	fefa39ef 	.word	0xfefa39ef
 8011df4:	3fe62e42 	.word	0x3fe62e42
 8011df8:	0ca86c39 	.word	0x0ca86c39
 8011dfc:	be205c61 	.word	0xbe205c61
 8011e00:	72bea4d0 	.word	0x72bea4d0
 8011e04:	3e663769 	.word	0x3e663769
 8011e08:	c5d26bf1 	.word	0xc5d26bf1
 8011e0c:	3ebbbd41 	.word	0x3ebbbd41
 8011e10:	af25de2c 	.word	0xaf25de2c
 8011e14:	3f11566a 	.word	0x3f11566a
 8011e18:	16bebd93 	.word	0x16bebd93
 8011e1c:	3f66c16c 	.word	0x3f66c16c
 8011e20:	5555553e 	.word	0x5555553e
 8011e24:	3fc55555 	.word	0x3fc55555
 8011e28:	3fe00000 	.word	0x3fe00000
 8011e2c:	000fffff 	.word	0x000fffff
 8011e30:	3ff00000 	.word	0x3ff00000
 8011e34:	4090cbff 	.word	0x4090cbff
 8011e38:	3f6f3400 	.word	0x3f6f3400
 8011e3c:	652b82fe 	.word	0x652b82fe
 8011e40:	3c971547 	.word	0x3c971547
 8011e44:	00000000 	.word	0x00000000

08011e48 <__ieee754_rem_pio2>:
 8011e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e4c:	ed2d 8b02 	vpush	{d8}
 8011e50:	ec55 4b10 	vmov	r4, r5, d0
 8011e54:	4bca      	ldr	r3, [pc, #808]	; (8012180 <__ieee754_rem_pio2+0x338>)
 8011e56:	b08b      	sub	sp, #44	; 0x2c
 8011e58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011e5c:	4598      	cmp	r8, r3
 8011e5e:	4682      	mov	sl, r0
 8011e60:	9502      	str	r5, [sp, #8]
 8011e62:	dc08      	bgt.n	8011e76 <__ieee754_rem_pio2+0x2e>
 8011e64:	2200      	movs	r2, #0
 8011e66:	2300      	movs	r3, #0
 8011e68:	ed80 0b00 	vstr	d0, [r0]
 8011e6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011e70:	f04f 0b00 	mov.w	fp, #0
 8011e74:	e028      	b.n	8011ec8 <__ieee754_rem_pio2+0x80>
 8011e76:	4bc3      	ldr	r3, [pc, #780]	; (8012184 <__ieee754_rem_pio2+0x33c>)
 8011e78:	4598      	cmp	r8, r3
 8011e7a:	dc78      	bgt.n	8011f6e <__ieee754_rem_pio2+0x126>
 8011e7c:	9b02      	ldr	r3, [sp, #8]
 8011e7e:	4ec2      	ldr	r6, [pc, #776]	; (8012188 <__ieee754_rem_pio2+0x340>)
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	ee10 0a10 	vmov	r0, s0
 8011e86:	a3b0      	add	r3, pc, #704	; (adr r3, 8012148 <__ieee754_rem_pio2+0x300>)
 8011e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	dd39      	ble.n	8011f04 <__ieee754_rem_pio2+0xbc>
 8011e90:	f7ee fa12 	bl	80002b8 <__aeabi_dsub>
 8011e94:	45b0      	cmp	r8, r6
 8011e96:	4604      	mov	r4, r0
 8011e98:	460d      	mov	r5, r1
 8011e9a:	d01b      	beq.n	8011ed4 <__ieee754_rem_pio2+0x8c>
 8011e9c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	f7ee fa09 	bl	80002b8 <__aeabi_dsub>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	e9ca 2300 	strd	r2, r3, [sl]
 8011eae:	4620      	mov	r0, r4
 8011eb0:	4629      	mov	r1, r5
 8011eb2:	f7ee fa01 	bl	80002b8 <__aeabi_dsub>
 8011eb6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebc:	f7ee f9fc 	bl	80002b8 <__aeabi_dsub>
 8011ec0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ec4:	f04f 0b01 	mov.w	fp, #1
 8011ec8:	4658      	mov	r0, fp
 8011eca:	b00b      	add	sp, #44	; 0x2c
 8011ecc:	ecbd 8b02 	vpop	{d8}
 8011ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed4:	a3a0      	add	r3, pc, #640	; (adr r3, 8012158 <__ieee754_rem_pio2+0x310>)
 8011ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eda:	f7ee f9ed 	bl	80002b8 <__aeabi_dsub>
 8011ede:	a3a0      	add	r3, pc, #640	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	460d      	mov	r5, r1
 8011ee8:	f7ee f9e6 	bl	80002b8 <__aeabi_dsub>
 8011eec:	4602      	mov	r2, r0
 8011eee:	460b      	mov	r3, r1
 8011ef0:	e9ca 2300 	strd	r2, r3, [sl]
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f7ee f9de 	bl	80002b8 <__aeabi_dsub>
 8011efc:	a398      	add	r3, pc, #608	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	e7db      	b.n	8011ebc <__ieee754_rem_pio2+0x74>
 8011f04:	f7ee f9da 	bl	80002bc <__adddf3>
 8011f08:	45b0      	cmp	r8, r6
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	d016      	beq.n	8011f3e <__ieee754_rem_pio2+0xf6>
 8011f10:	a38f      	add	r3, pc, #572	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f16:	f7ee f9d1 	bl	80002bc <__adddf3>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	e9ca 2300 	strd	r2, r3, [sl]
 8011f22:	4620      	mov	r0, r4
 8011f24:	4629      	mov	r1, r5
 8011f26:	f7ee f9c7 	bl	80002b8 <__aeabi_dsub>
 8011f2a:	a389      	add	r3, pc, #548	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f30:	f7ee f9c4 	bl	80002bc <__adddf3>
 8011f34:	f04f 3bff 	mov.w	fp, #4294967295
 8011f38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f3c:	e7c4      	b.n	8011ec8 <__ieee754_rem_pio2+0x80>
 8011f3e:	a386      	add	r3, pc, #536	; (adr r3, 8012158 <__ieee754_rem_pio2+0x310>)
 8011f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f44:	f7ee f9ba 	bl	80002bc <__adddf3>
 8011f48:	a385      	add	r3, pc, #532	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4e:	4604      	mov	r4, r0
 8011f50:	460d      	mov	r5, r1
 8011f52:	f7ee f9b3 	bl	80002bc <__adddf3>
 8011f56:	4602      	mov	r2, r0
 8011f58:	460b      	mov	r3, r1
 8011f5a:	e9ca 2300 	strd	r2, r3, [sl]
 8011f5e:	4620      	mov	r0, r4
 8011f60:	4629      	mov	r1, r5
 8011f62:	f7ee f9a9 	bl	80002b8 <__aeabi_dsub>
 8011f66:	a37e      	add	r3, pc, #504	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	e7e0      	b.n	8011f30 <__ieee754_rem_pio2+0xe8>
 8011f6e:	4b87      	ldr	r3, [pc, #540]	; (801218c <__ieee754_rem_pio2+0x344>)
 8011f70:	4598      	cmp	r8, r3
 8011f72:	f300 80d9 	bgt.w	8012128 <__ieee754_rem_pio2+0x2e0>
 8011f76:	f001 f8cf 	bl	8013118 <fabs>
 8011f7a:	ec55 4b10 	vmov	r4, r5, d0
 8011f7e:	ee10 0a10 	vmov	r0, s0
 8011f82:	a379      	add	r3, pc, #484	; (adr r3, 8012168 <__ieee754_rem_pio2+0x320>)
 8011f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f88:	4629      	mov	r1, r5
 8011f8a:	f7ee fb4d 	bl	8000628 <__aeabi_dmul>
 8011f8e:	4b80      	ldr	r3, [pc, #512]	; (8012190 <__ieee754_rem_pio2+0x348>)
 8011f90:	2200      	movs	r2, #0
 8011f92:	f7ee f993 	bl	80002bc <__adddf3>
 8011f96:	f7ee fdf7 	bl	8000b88 <__aeabi_d2iz>
 8011f9a:	4683      	mov	fp, r0
 8011f9c:	f7ee fada 	bl	8000554 <__aeabi_i2d>
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	ec43 2b18 	vmov	d8, r2, r3
 8011fa8:	a367      	add	r3, pc, #412	; (adr r3, 8012148 <__ieee754_rem_pio2+0x300>)
 8011faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fae:	f7ee fb3b 	bl	8000628 <__aeabi_dmul>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ee f97d 	bl	80002b8 <__aeabi_dsub>
 8011fbe:	a364      	add	r3, pc, #400	; (adr r3, 8012150 <__ieee754_rem_pio2+0x308>)
 8011fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc4:	4606      	mov	r6, r0
 8011fc6:	460f      	mov	r7, r1
 8011fc8:	ec51 0b18 	vmov	r0, r1, d8
 8011fcc:	f7ee fb2c 	bl	8000628 <__aeabi_dmul>
 8011fd0:	f1bb 0f1f 	cmp.w	fp, #31
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	dc0d      	bgt.n	8011ff6 <__ieee754_rem_pio2+0x1ae>
 8011fda:	4b6e      	ldr	r3, [pc, #440]	; (8012194 <__ieee754_rem_pio2+0x34c>)
 8011fdc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fe4:	4543      	cmp	r3, r8
 8011fe6:	d006      	beq.n	8011ff6 <__ieee754_rem_pio2+0x1ae>
 8011fe8:	4622      	mov	r2, r4
 8011fea:	462b      	mov	r3, r5
 8011fec:	4630      	mov	r0, r6
 8011fee:	4639      	mov	r1, r7
 8011ff0:	f7ee f962 	bl	80002b8 <__aeabi_dsub>
 8011ff4:	e00f      	b.n	8012016 <__ieee754_rem_pio2+0x1ce>
 8011ff6:	462b      	mov	r3, r5
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	4639      	mov	r1, r7
 8011ffe:	f7ee f95b 	bl	80002b8 <__aeabi_dsub>
 8012002:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012006:	9303      	str	r3, [sp, #12]
 8012008:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801200c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012010:	f1b8 0f10 	cmp.w	r8, #16
 8012014:	dc02      	bgt.n	801201c <__ieee754_rem_pio2+0x1d4>
 8012016:	e9ca 0100 	strd	r0, r1, [sl]
 801201a:	e039      	b.n	8012090 <__ieee754_rem_pio2+0x248>
 801201c:	a34e      	add	r3, pc, #312	; (adr r3, 8012158 <__ieee754_rem_pio2+0x310>)
 801201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012022:	ec51 0b18 	vmov	r0, r1, d8
 8012026:	f7ee faff 	bl	8000628 <__aeabi_dmul>
 801202a:	4604      	mov	r4, r0
 801202c:	460d      	mov	r5, r1
 801202e:	4602      	mov	r2, r0
 8012030:	460b      	mov	r3, r1
 8012032:	4630      	mov	r0, r6
 8012034:	4639      	mov	r1, r7
 8012036:	f7ee f93f 	bl	80002b8 <__aeabi_dsub>
 801203a:	4602      	mov	r2, r0
 801203c:	460b      	mov	r3, r1
 801203e:	4680      	mov	r8, r0
 8012040:	4689      	mov	r9, r1
 8012042:	4630      	mov	r0, r6
 8012044:	4639      	mov	r1, r7
 8012046:	f7ee f937 	bl	80002b8 <__aeabi_dsub>
 801204a:	4622      	mov	r2, r4
 801204c:	462b      	mov	r3, r5
 801204e:	f7ee f933 	bl	80002b8 <__aeabi_dsub>
 8012052:	a343      	add	r3, pc, #268	; (adr r3, 8012160 <__ieee754_rem_pio2+0x318>)
 8012054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012058:	4604      	mov	r4, r0
 801205a:	460d      	mov	r5, r1
 801205c:	ec51 0b18 	vmov	r0, r1, d8
 8012060:	f7ee fae2 	bl	8000628 <__aeabi_dmul>
 8012064:	4622      	mov	r2, r4
 8012066:	462b      	mov	r3, r5
 8012068:	f7ee f926 	bl	80002b8 <__aeabi_dsub>
 801206c:	4602      	mov	r2, r0
 801206e:	460b      	mov	r3, r1
 8012070:	4604      	mov	r4, r0
 8012072:	460d      	mov	r5, r1
 8012074:	4640      	mov	r0, r8
 8012076:	4649      	mov	r1, r9
 8012078:	f7ee f91e 	bl	80002b8 <__aeabi_dsub>
 801207c:	9a03      	ldr	r2, [sp, #12]
 801207e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	2b31      	cmp	r3, #49	; 0x31
 8012086:	dc24      	bgt.n	80120d2 <__ieee754_rem_pio2+0x28a>
 8012088:	e9ca 0100 	strd	r0, r1, [sl]
 801208c:	4646      	mov	r6, r8
 801208e:	464f      	mov	r7, r9
 8012090:	e9da 8900 	ldrd	r8, r9, [sl]
 8012094:	4630      	mov	r0, r6
 8012096:	4642      	mov	r2, r8
 8012098:	464b      	mov	r3, r9
 801209a:	4639      	mov	r1, r7
 801209c:	f7ee f90c 	bl	80002b8 <__aeabi_dsub>
 80120a0:	462b      	mov	r3, r5
 80120a2:	4622      	mov	r2, r4
 80120a4:	f7ee f908 	bl	80002b8 <__aeabi_dsub>
 80120a8:	9b02      	ldr	r3, [sp, #8]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120b0:	f6bf af0a 	bge.w	8011ec8 <__ieee754_rem_pio2+0x80>
 80120b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120b8:	f8ca 3004 	str.w	r3, [sl, #4]
 80120bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120c0:	f8ca 8000 	str.w	r8, [sl]
 80120c4:	f8ca 0008 	str.w	r0, [sl, #8]
 80120c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80120cc:	f1cb 0b00 	rsb	fp, fp, #0
 80120d0:	e6fa      	b.n	8011ec8 <__ieee754_rem_pio2+0x80>
 80120d2:	a327      	add	r3, pc, #156	; (adr r3, 8012170 <__ieee754_rem_pio2+0x328>)
 80120d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d8:	ec51 0b18 	vmov	r0, r1, d8
 80120dc:	f7ee faa4 	bl	8000628 <__aeabi_dmul>
 80120e0:	4604      	mov	r4, r0
 80120e2:	460d      	mov	r5, r1
 80120e4:	4602      	mov	r2, r0
 80120e6:	460b      	mov	r3, r1
 80120e8:	4640      	mov	r0, r8
 80120ea:	4649      	mov	r1, r9
 80120ec:	f7ee f8e4 	bl	80002b8 <__aeabi_dsub>
 80120f0:	4602      	mov	r2, r0
 80120f2:	460b      	mov	r3, r1
 80120f4:	4606      	mov	r6, r0
 80120f6:	460f      	mov	r7, r1
 80120f8:	4640      	mov	r0, r8
 80120fa:	4649      	mov	r1, r9
 80120fc:	f7ee f8dc 	bl	80002b8 <__aeabi_dsub>
 8012100:	4622      	mov	r2, r4
 8012102:	462b      	mov	r3, r5
 8012104:	f7ee f8d8 	bl	80002b8 <__aeabi_dsub>
 8012108:	a31b      	add	r3, pc, #108	; (adr r3, 8012178 <__ieee754_rem_pio2+0x330>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	4604      	mov	r4, r0
 8012110:	460d      	mov	r5, r1
 8012112:	ec51 0b18 	vmov	r0, r1, d8
 8012116:	f7ee fa87 	bl	8000628 <__aeabi_dmul>
 801211a:	4622      	mov	r2, r4
 801211c:	462b      	mov	r3, r5
 801211e:	f7ee f8cb 	bl	80002b8 <__aeabi_dsub>
 8012122:	4604      	mov	r4, r0
 8012124:	460d      	mov	r5, r1
 8012126:	e75f      	b.n	8011fe8 <__ieee754_rem_pio2+0x1a0>
 8012128:	4b1b      	ldr	r3, [pc, #108]	; (8012198 <__ieee754_rem_pio2+0x350>)
 801212a:	4598      	cmp	r8, r3
 801212c:	dd36      	ble.n	801219c <__ieee754_rem_pio2+0x354>
 801212e:	ee10 2a10 	vmov	r2, s0
 8012132:	462b      	mov	r3, r5
 8012134:	4620      	mov	r0, r4
 8012136:	4629      	mov	r1, r5
 8012138:	f7ee f8be 	bl	80002b8 <__aeabi_dsub>
 801213c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012140:	e9ca 0100 	strd	r0, r1, [sl]
 8012144:	e694      	b.n	8011e70 <__ieee754_rem_pio2+0x28>
 8012146:	bf00      	nop
 8012148:	54400000 	.word	0x54400000
 801214c:	3ff921fb 	.word	0x3ff921fb
 8012150:	1a626331 	.word	0x1a626331
 8012154:	3dd0b461 	.word	0x3dd0b461
 8012158:	1a600000 	.word	0x1a600000
 801215c:	3dd0b461 	.word	0x3dd0b461
 8012160:	2e037073 	.word	0x2e037073
 8012164:	3ba3198a 	.word	0x3ba3198a
 8012168:	6dc9c883 	.word	0x6dc9c883
 801216c:	3fe45f30 	.word	0x3fe45f30
 8012170:	2e000000 	.word	0x2e000000
 8012174:	3ba3198a 	.word	0x3ba3198a
 8012178:	252049c1 	.word	0x252049c1
 801217c:	397b839a 	.word	0x397b839a
 8012180:	3fe921fb 	.word	0x3fe921fb
 8012184:	4002d97b 	.word	0x4002d97b
 8012188:	3ff921fb 	.word	0x3ff921fb
 801218c:	413921fb 	.word	0x413921fb
 8012190:	3fe00000 	.word	0x3fe00000
 8012194:	08013e90 	.word	0x08013e90
 8012198:	7fefffff 	.word	0x7fefffff
 801219c:	ea4f 5428 	mov.w	r4, r8, asr #20
 80121a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80121a4:	ee10 0a10 	vmov	r0, s0
 80121a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80121ac:	ee10 6a10 	vmov	r6, s0
 80121b0:	460f      	mov	r7, r1
 80121b2:	f7ee fce9 	bl	8000b88 <__aeabi_d2iz>
 80121b6:	f7ee f9cd 	bl	8000554 <__aeabi_i2d>
 80121ba:	4602      	mov	r2, r0
 80121bc:	460b      	mov	r3, r1
 80121be:	4630      	mov	r0, r6
 80121c0:	4639      	mov	r1, r7
 80121c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80121c6:	f7ee f877 	bl	80002b8 <__aeabi_dsub>
 80121ca:	4b23      	ldr	r3, [pc, #140]	; (8012258 <__ieee754_rem_pio2+0x410>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	f7ee fa2b 	bl	8000628 <__aeabi_dmul>
 80121d2:	460f      	mov	r7, r1
 80121d4:	4606      	mov	r6, r0
 80121d6:	f7ee fcd7 	bl	8000b88 <__aeabi_d2iz>
 80121da:	f7ee f9bb 	bl	8000554 <__aeabi_i2d>
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	4630      	mov	r0, r6
 80121e4:	4639      	mov	r1, r7
 80121e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80121ea:	f7ee f865 	bl	80002b8 <__aeabi_dsub>
 80121ee:	4b1a      	ldr	r3, [pc, #104]	; (8012258 <__ieee754_rem_pio2+0x410>)
 80121f0:	2200      	movs	r2, #0
 80121f2:	f7ee fa19 	bl	8000628 <__aeabi_dmul>
 80121f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80121fa:	ad04      	add	r5, sp, #16
 80121fc:	f04f 0803 	mov.w	r8, #3
 8012200:	46a9      	mov	r9, r5
 8012202:	2600      	movs	r6, #0
 8012204:	2700      	movs	r7, #0
 8012206:	4632      	mov	r2, r6
 8012208:	463b      	mov	r3, r7
 801220a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801220e:	46c3      	mov	fp, r8
 8012210:	3d08      	subs	r5, #8
 8012212:	f108 38ff 	add.w	r8, r8, #4294967295
 8012216:	f7ee fc6f 	bl	8000af8 <__aeabi_dcmpeq>
 801221a:	2800      	cmp	r0, #0
 801221c:	d1f3      	bne.n	8012206 <__ieee754_rem_pio2+0x3be>
 801221e:	4b0f      	ldr	r3, [pc, #60]	; (801225c <__ieee754_rem_pio2+0x414>)
 8012220:	9301      	str	r3, [sp, #4]
 8012222:	2302      	movs	r3, #2
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	4622      	mov	r2, r4
 8012228:	465b      	mov	r3, fp
 801222a:	4651      	mov	r1, sl
 801222c:	4648      	mov	r0, r9
 801222e:	f000 f993 	bl	8012558 <__kernel_rem_pio2>
 8012232:	9b02      	ldr	r3, [sp, #8]
 8012234:	2b00      	cmp	r3, #0
 8012236:	4683      	mov	fp, r0
 8012238:	f6bf ae46 	bge.w	8011ec8 <__ieee754_rem_pio2+0x80>
 801223c:	e9da 2100 	ldrd	r2, r1, [sl]
 8012240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012244:	e9ca 2300 	strd	r2, r3, [sl]
 8012248:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801224c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012250:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012254:	e73a      	b.n	80120cc <__ieee754_rem_pio2+0x284>
 8012256:	bf00      	nop
 8012258:	41700000 	.word	0x41700000
 801225c:	08013f10 	.word	0x08013f10

08012260 <__ieee754_sqrt>:
 8012260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012264:	ec55 4b10 	vmov	r4, r5, d0
 8012268:	4e55      	ldr	r6, [pc, #340]	; (80123c0 <__ieee754_sqrt+0x160>)
 801226a:	43ae      	bics	r6, r5
 801226c:	ee10 0a10 	vmov	r0, s0
 8012270:	ee10 3a10 	vmov	r3, s0
 8012274:	462a      	mov	r2, r5
 8012276:	4629      	mov	r1, r5
 8012278:	d110      	bne.n	801229c <__ieee754_sqrt+0x3c>
 801227a:	ee10 2a10 	vmov	r2, s0
 801227e:	462b      	mov	r3, r5
 8012280:	f7ee f9d2 	bl	8000628 <__aeabi_dmul>
 8012284:	4602      	mov	r2, r0
 8012286:	460b      	mov	r3, r1
 8012288:	4620      	mov	r0, r4
 801228a:	4629      	mov	r1, r5
 801228c:	f7ee f816 	bl	80002bc <__adddf3>
 8012290:	4604      	mov	r4, r0
 8012292:	460d      	mov	r5, r1
 8012294:	ec45 4b10 	vmov	d0, r4, r5
 8012298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801229c:	2d00      	cmp	r5, #0
 801229e:	dc10      	bgt.n	80122c2 <__ieee754_sqrt+0x62>
 80122a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80122a4:	4330      	orrs	r0, r6
 80122a6:	d0f5      	beq.n	8012294 <__ieee754_sqrt+0x34>
 80122a8:	b15d      	cbz	r5, 80122c2 <__ieee754_sqrt+0x62>
 80122aa:	ee10 2a10 	vmov	r2, s0
 80122ae:	462b      	mov	r3, r5
 80122b0:	ee10 0a10 	vmov	r0, s0
 80122b4:	f7ee f800 	bl	80002b8 <__aeabi_dsub>
 80122b8:	4602      	mov	r2, r0
 80122ba:	460b      	mov	r3, r1
 80122bc:	f7ee fade 	bl	800087c <__aeabi_ddiv>
 80122c0:	e7e6      	b.n	8012290 <__ieee754_sqrt+0x30>
 80122c2:	1512      	asrs	r2, r2, #20
 80122c4:	d074      	beq.n	80123b0 <__ieee754_sqrt+0x150>
 80122c6:	07d4      	lsls	r4, r2, #31
 80122c8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80122cc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80122d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80122d4:	bf5e      	ittt	pl
 80122d6:	0fda      	lsrpl	r2, r3, #31
 80122d8:	005b      	lslpl	r3, r3, #1
 80122da:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80122de:	2400      	movs	r4, #0
 80122e0:	0fda      	lsrs	r2, r3, #31
 80122e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80122e6:	107f      	asrs	r7, r7, #1
 80122e8:	005b      	lsls	r3, r3, #1
 80122ea:	2516      	movs	r5, #22
 80122ec:	4620      	mov	r0, r4
 80122ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80122f2:	1886      	adds	r6, r0, r2
 80122f4:	428e      	cmp	r6, r1
 80122f6:	bfde      	ittt	le
 80122f8:	1b89      	suble	r1, r1, r6
 80122fa:	18b0      	addle	r0, r6, r2
 80122fc:	18a4      	addle	r4, r4, r2
 80122fe:	0049      	lsls	r1, r1, #1
 8012300:	3d01      	subs	r5, #1
 8012302:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012306:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801230a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801230e:	d1f0      	bne.n	80122f2 <__ieee754_sqrt+0x92>
 8012310:	462a      	mov	r2, r5
 8012312:	f04f 0e20 	mov.w	lr, #32
 8012316:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801231a:	4281      	cmp	r1, r0
 801231c:	eb06 0c05 	add.w	ip, r6, r5
 8012320:	dc02      	bgt.n	8012328 <__ieee754_sqrt+0xc8>
 8012322:	d113      	bne.n	801234c <__ieee754_sqrt+0xec>
 8012324:	459c      	cmp	ip, r3
 8012326:	d811      	bhi.n	801234c <__ieee754_sqrt+0xec>
 8012328:	f1bc 0f00 	cmp.w	ip, #0
 801232c:	eb0c 0506 	add.w	r5, ip, r6
 8012330:	da43      	bge.n	80123ba <__ieee754_sqrt+0x15a>
 8012332:	2d00      	cmp	r5, #0
 8012334:	db41      	blt.n	80123ba <__ieee754_sqrt+0x15a>
 8012336:	f100 0801 	add.w	r8, r0, #1
 801233a:	1a09      	subs	r1, r1, r0
 801233c:	459c      	cmp	ip, r3
 801233e:	bf88      	it	hi
 8012340:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012344:	eba3 030c 	sub.w	r3, r3, ip
 8012348:	4432      	add	r2, r6
 801234a:	4640      	mov	r0, r8
 801234c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012350:	f1be 0e01 	subs.w	lr, lr, #1
 8012354:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012358:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801235c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012360:	d1db      	bne.n	801231a <__ieee754_sqrt+0xba>
 8012362:	430b      	orrs	r3, r1
 8012364:	d006      	beq.n	8012374 <__ieee754_sqrt+0x114>
 8012366:	1c50      	adds	r0, r2, #1
 8012368:	bf13      	iteet	ne
 801236a:	3201      	addne	r2, #1
 801236c:	3401      	addeq	r4, #1
 801236e:	4672      	moveq	r2, lr
 8012370:	f022 0201 	bicne.w	r2, r2, #1
 8012374:	1063      	asrs	r3, r4, #1
 8012376:	0852      	lsrs	r2, r2, #1
 8012378:	07e1      	lsls	r1, r4, #31
 801237a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801237e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012382:	bf48      	it	mi
 8012384:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012388:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801238c:	4614      	mov	r4, r2
 801238e:	e781      	b.n	8012294 <__ieee754_sqrt+0x34>
 8012390:	0ad9      	lsrs	r1, r3, #11
 8012392:	3815      	subs	r0, #21
 8012394:	055b      	lsls	r3, r3, #21
 8012396:	2900      	cmp	r1, #0
 8012398:	d0fa      	beq.n	8012390 <__ieee754_sqrt+0x130>
 801239a:	02cd      	lsls	r5, r1, #11
 801239c:	d50a      	bpl.n	80123b4 <__ieee754_sqrt+0x154>
 801239e:	f1c2 0420 	rsb	r4, r2, #32
 80123a2:	fa23 f404 	lsr.w	r4, r3, r4
 80123a6:	1e55      	subs	r5, r2, #1
 80123a8:	4093      	lsls	r3, r2
 80123aa:	4321      	orrs	r1, r4
 80123ac:	1b42      	subs	r2, r0, r5
 80123ae:	e78a      	b.n	80122c6 <__ieee754_sqrt+0x66>
 80123b0:	4610      	mov	r0, r2
 80123b2:	e7f0      	b.n	8012396 <__ieee754_sqrt+0x136>
 80123b4:	0049      	lsls	r1, r1, #1
 80123b6:	3201      	adds	r2, #1
 80123b8:	e7ef      	b.n	801239a <__ieee754_sqrt+0x13a>
 80123ba:	4680      	mov	r8, r0
 80123bc:	e7bd      	b.n	801233a <__ieee754_sqrt+0xda>
 80123be:	bf00      	nop
 80123c0:	7ff00000 	.word	0x7ff00000
 80123c4:	00000000 	.word	0x00000000

080123c8 <__kernel_cos>:
 80123c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123cc:	ec57 6b10 	vmov	r6, r7, d0
 80123d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80123d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80123d8:	ed8d 1b00 	vstr	d1, [sp]
 80123dc:	da07      	bge.n	80123ee <__kernel_cos+0x26>
 80123de:	ee10 0a10 	vmov	r0, s0
 80123e2:	4639      	mov	r1, r7
 80123e4:	f7ee fbd0 	bl	8000b88 <__aeabi_d2iz>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f000 8088 	beq.w	80124fe <__kernel_cos+0x136>
 80123ee:	4632      	mov	r2, r6
 80123f0:	463b      	mov	r3, r7
 80123f2:	4630      	mov	r0, r6
 80123f4:	4639      	mov	r1, r7
 80123f6:	f7ee f917 	bl	8000628 <__aeabi_dmul>
 80123fa:	4b51      	ldr	r3, [pc, #324]	; (8012540 <__kernel_cos+0x178>)
 80123fc:	2200      	movs	r2, #0
 80123fe:	4604      	mov	r4, r0
 8012400:	460d      	mov	r5, r1
 8012402:	f7ee f911 	bl	8000628 <__aeabi_dmul>
 8012406:	a340      	add	r3, pc, #256	; (adr r3, 8012508 <__kernel_cos+0x140>)
 8012408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240c:	4682      	mov	sl, r0
 801240e:	468b      	mov	fp, r1
 8012410:	4620      	mov	r0, r4
 8012412:	4629      	mov	r1, r5
 8012414:	f7ee f908 	bl	8000628 <__aeabi_dmul>
 8012418:	a33d      	add	r3, pc, #244	; (adr r3, 8012510 <__kernel_cos+0x148>)
 801241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241e:	f7ed ff4d 	bl	80002bc <__adddf3>
 8012422:	4622      	mov	r2, r4
 8012424:	462b      	mov	r3, r5
 8012426:	f7ee f8ff 	bl	8000628 <__aeabi_dmul>
 801242a:	a33b      	add	r3, pc, #236	; (adr r3, 8012518 <__kernel_cos+0x150>)
 801242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012430:	f7ed ff42 	bl	80002b8 <__aeabi_dsub>
 8012434:	4622      	mov	r2, r4
 8012436:	462b      	mov	r3, r5
 8012438:	f7ee f8f6 	bl	8000628 <__aeabi_dmul>
 801243c:	a338      	add	r3, pc, #224	; (adr r3, 8012520 <__kernel_cos+0x158>)
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	f7ed ff3b 	bl	80002bc <__adddf3>
 8012446:	4622      	mov	r2, r4
 8012448:	462b      	mov	r3, r5
 801244a:	f7ee f8ed 	bl	8000628 <__aeabi_dmul>
 801244e:	a336      	add	r3, pc, #216	; (adr r3, 8012528 <__kernel_cos+0x160>)
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	f7ed ff30 	bl	80002b8 <__aeabi_dsub>
 8012458:	4622      	mov	r2, r4
 801245a:	462b      	mov	r3, r5
 801245c:	f7ee f8e4 	bl	8000628 <__aeabi_dmul>
 8012460:	a333      	add	r3, pc, #204	; (adr r3, 8012530 <__kernel_cos+0x168>)
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	f7ed ff29 	bl	80002bc <__adddf3>
 801246a:	4622      	mov	r2, r4
 801246c:	462b      	mov	r3, r5
 801246e:	f7ee f8db 	bl	8000628 <__aeabi_dmul>
 8012472:	4622      	mov	r2, r4
 8012474:	462b      	mov	r3, r5
 8012476:	f7ee f8d7 	bl	8000628 <__aeabi_dmul>
 801247a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801247e:	4604      	mov	r4, r0
 8012480:	460d      	mov	r5, r1
 8012482:	4630      	mov	r0, r6
 8012484:	4639      	mov	r1, r7
 8012486:	f7ee f8cf 	bl	8000628 <__aeabi_dmul>
 801248a:	460b      	mov	r3, r1
 801248c:	4602      	mov	r2, r0
 801248e:	4629      	mov	r1, r5
 8012490:	4620      	mov	r0, r4
 8012492:	f7ed ff11 	bl	80002b8 <__aeabi_dsub>
 8012496:	4b2b      	ldr	r3, [pc, #172]	; (8012544 <__kernel_cos+0x17c>)
 8012498:	4598      	cmp	r8, r3
 801249a:	4606      	mov	r6, r0
 801249c:	460f      	mov	r7, r1
 801249e:	dc10      	bgt.n	80124c2 <__kernel_cos+0xfa>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	4650      	mov	r0, sl
 80124a6:	4659      	mov	r1, fp
 80124a8:	f7ed ff06 	bl	80002b8 <__aeabi_dsub>
 80124ac:	460b      	mov	r3, r1
 80124ae:	4926      	ldr	r1, [pc, #152]	; (8012548 <__kernel_cos+0x180>)
 80124b0:	4602      	mov	r2, r0
 80124b2:	2000      	movs	r0, #0
 80124b4:	f7ed ff00 	bl	80002b8 <__aeabi_dsub>
 80124b8:	ec41 0b10 	vmov	d0, r0, r1
 80124bc:	b003      	add	sp, #12
 80124be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c2:	4b22      	ldr	r3, [pc, #136]	; (801254c <__kernel_cos+0x184>)
 80124c4:	4920      	ldr	r1, [pc, #128]	; (8012548 <__kernel_cos+0x180>)
 80124c6:	4598      	cmp	r8, r3
 80124c8:	bfcc      	ite	gt
 80124ca:	4d21      	ldrgt	r5, [pc, #132]	; (8012550 <__kernel_cos+0x188>)
 80124cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80124d0:	2400      	movs	r4, #0
 80124d2:	4622      	mov	r2, r4
 80124d4:	462b      	mov	r3, r5
 80124d6:	2000      	movs	r0, #0
 80124d8:	f7ed feee 	bl	80002b8 <__aeabi_dsub>
 80124dc:	4622      	mov	r2, r4
 80124de:	4680      	mov	r8, r0
 80124e0:	4689      	mov	r9, r1
 80124e2:	462b      	mov	r3, r5
 80124e4:	4650      	mov	r0, sl
 80124e6:	4659      	mov	r1, fp
 80124e8:	f7ed fee6 	bl	80002b8 <__aeabi_dsub>
 80124ec:	4632      	mov	r2, r6
 80124ee:	463b      	mov	r3, r7
 80124f0:	f7ed fee2 	bl	80002b8 <__aeabi_dsub>
 80124f4:	4602      	mov	r2, r0
 80124f6:	460b      	mov	r3, r1
 80124f8:	4640      	mov	r0, r8
 80124fa:	4649      	mov	r1, r9
 80124fc:	e7da      	b.n	80124b4 <__kernel_cos+0xec>
 80124fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012538 <__kernel_cos+0x170>
 8012502:	e7db      	b.n	80124bc <__kernel_cos+0xf4>
 8012504:	f3af 8000 	nop.w
 8012508:	be8838d4 	.word	0xbe8838d4
 801250c:	bda8fae9 	.word	0xbda8fae9
 8012510:	bdb4b1c4 	.word	0xbdb4b1c4
 8012514:	3e21ee9e 	.word	0x3e21ee9e
 8012518:	809c52ad 	.word	0x809c52ad
 801251c:	3e927e4f 	.word	0x3e927e4f
 8012520:	19cb1590 	.word	0x19cb1590
 8012524:	3efa01a0 	.word	0x3efa01a0
 8012528:	16c15177 	.word	0x16c15177
 801252c:	3f56c16c 	.word	0x3f56c16c
 8012530:	5555554c 	.word	0x5555554c
 8012534:	3fa55555 	.word	0x3fa55555
 8012538:	00000000 	.word	0x00000000
 801253c:	3ff00000 	.word	0x3ff00000
 8012540:	3fe00000 	.word	0x3fe00000
 8012544:	3fd33332 	.word	0x3fd33332
 8012548:	3ff00000 	.word	0x3ff00000
 801254c:	3fe90000 	.word	0x3fe90000
 8012550:	3fd20000 	.word	0x3fd20000
 8012554:	00000000 	.word	0x00000000

08012558 <__kernel_rem_pio2>:
 8012558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801255c:	ed2d 8b02 	vpush	{d8}
 8012560:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012564:	f112 0f14 	cmn.w	r2, #20
 8012568:	9308      	str	r3, [sp, #32]
 801256a:	9101      	str	r1, [sp, #4]
 801256c:	4bc4      	ldr	r3, [pc, #784]	; (8012880 <__kernel_rem_pio2+0x328>)
 801256e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012570:	900b      	str	r0, [sp, #44]	; 0x2c
 8012572:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012576:	9302      	str	r3, [sp, #8]
 8012578:	9b08      	ldr	r3, [sp, #32]
 801257a:	f103 33ff 	add.w	r3, r3, #4294967295
 801257e:	bfa8      	it	ge
 8012580:	1ed4      	subge	r4, r2, #3
 8012582:	9306      	str	r3, [sp, #24]
 8012584:	bfb2      	itee	lt
 8012586:	2400      	movlt	r4, #0
 8012588:	2318      	movge	r3, #24
 801258a:	fb94 f4f3 	sdivge	r4, r4, r3
 801258e:	f06f 0317 	mvn.w	r3, #23
 8012592:	fb04 3303 	mla	r3, r4, r3, r3
 8012596:	eb03 0a02 	add.w	sl, r3, r2
 801259a:	9b02      	ldr	r3, [sp, #8]
 801259c:	9a06      	ldr	r2, [sp, #24]
 801259e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012870 <__kernel_rem_pio2+0x318>
 80125a2:	eb03 0802 	add.w	r8, r3, r2
 80125a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80125a8:	1aa7      	subs	r7, r4, r2
 80125aa:	ae22      	add	r6, sp, #136	; 0x88
 80125ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80125b0:	2500      	movs	r5, #0
 80125b2:	4545      	cmp	r5, r8
 80125b4:	dd13      	ble.n	80125de <__kernel_rem_pio2+0x86>
 80125b6:	9b08      	ldr	r3, [sp, #32]
 80125b8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012870 <__kernel_rem_pio2+0x318>
 80125bc:	aa22      	add	r2, sp, #136	; 0x88
 80125be:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80125c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80125c6:	f04f 0800 	mov.w	r8, #0
 80125ca:	9b02      	ldr	r3, [sp, #8]
 80125cc:	4598      	cmp	r8, r3
 80125ce:	dc2f      	bgt.n	8012630 <__kernel_rem_pio2+0xd8>
 80125d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80125d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80125d8:	462f      	mov	r7, r5
 80125da:	2600      	movs	r6, #0
 80125dc:	e01b      	b.n	8012616 <__kernel_rem_pio2+0xbe>
 80125de:	42ef      	cmn	r7, r5
 80125e0:	d407      	bmi.n	80125f2 <__kernel_rem_pio2+0x9a>
 80125e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80125e6:	f7ed ffb5 	bl	8000554 <__aeabi_i2d>
 80125ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80125ee:	3501      	adds	r5, #1
 80125f0:	e7df      	b.n	80125b2 <__kernel_rem_pio2+0x5a>
 80125f2:	ec51 0b18 	vmov	r0, r1, d8
 80125f6:	e7f8      	b.n	80125ea <__kernel_rem_pio2+0x92>
 80125f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012600:	f7ee f812 	bl	8000628 <__aeabi_dmul>
 8012604:	4602      	mov	r2, r0
 8012606:	460b      	mov	r3, r1
 8012608:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801260c:	f7ed fe56 	bl	80002bc <__adddf3>
 8012610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012614:	3601      	adds	r6, #1
 8012616:	9b06      	ldr	r3, [sp, #24]
 8012618:	429e      	cmp	r6, r3
 801261a:	f1a7 0708 	sub.w	r7, r7, #8
 801261e:	ddeb      	ble.n	80125f8 <__kernel_rem_pio2+0xa0>
 8012620:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012624:	f108 0801 	add.w	r8, r8, #1
 8012628:	ecab 7b02 	vstmia	fp!, {d7}
 801262c:	3508      	adds	r5, #8
 801262e:	e7cc      	b.n	80125ca <__kernel_rem_pio2+0x72>
 8012630:	9b02      	ldr	r3, [sp, #8]
 8012632:	aa0e      	add	r2, sp, #56	; 0x38
 8012634:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012638:	930d      	str	r3, [sp, #52]	; 0x34
 801263a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801263c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012640:	9c02      	ldr	r4, [sp, #8]
 8012642:	930c      	str	r3, [sp, #48]	; 0x30
 8012644:	00e3      	lsls	r3, r4, #3
 8012646:	930a      	str	r3, [sp, #40]	; 0x28
 8012648:	ab9a      	add	r3, sp, #616	; 0x268
 801264a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801264e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012652:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012656:	ab72      	add	r3, sp, #456	; 0x1c8
 8012658:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801265c:	46c3      	mov	fp, r8
 801265e:	46a1      	mov	r9, r4
 8012660:	f1b9 0f00 	cmp.w	r9, #0
 8012664:	f1a5 0508 	sub.w	r5, r5, #8
 8012668:	dc77      	bgt.n	801275a <__kernel_rem_pio2+0x202>
 801266a:	ec47 6b10 	vmov	d0, r6, r7
 801266e:	4650      	mov	r0, sl
 8012670:	f000 fdee 	bl	8013250 <scalbn>
 8012674:	ec57 6b10 	vmov	r6, r7, d0
 8012678:	2200      	movs	r2, #0
 801267a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801267e:	ee10 0a10 	vmov	r0, s0
 8012682:	4639      	mov	r1, r7
 8012684:	f7ed ffd0 	bl	8000628 <__aeabi_dmul>
 8012688:	ec41 0b10 	vmov	d0, r0, r1
 801268c:	f000 fd58 	bl	8013140 <floor>
 8012690:	4b7c      	ldr	r3, [pc, #496]	; (8012884 <__kernel_rem_pio2+0x32c>)
 8012692:	ec51 0b10 	vmov	r0, r1, d0
 8012696:	2200      	movs	r2, #0
 8012698:	f7ed ffc6 	bl	8000628 <__aeabi_dmul>
 801269c:	4602      	mov	r2, r0
 801269e:	460b      	mov	r3, r1
 80126a0:	4630      	mov	r0, r6
 80126a2:	4639      	mov	r1, r7
 80126a4:	f7ed fe08 	bl	80002b8 <__aeabi_dsub>
 80126a8:	460f      	mov	r7, r1
 80126aa:	4606      	mov	r6, r0
 80126ac:	f7ee fa6c 	bl	8000b88 <__aeabi_d2iz>
 80126b0:	9004      	str	r0, [sp, #16]
 80126b2:	f7ed ff4f 	bl	8000554 <__aeabi_i2d>
 80126b6:	4602      	mov	r2, r0
 80126b8:	460b      	mov	r3, r1
 80126ba:	4630      	mov	r0, r6
 80126bc:	4639      	mov	r1, r7
 80126be:	f7ed fdfb 	bl	80002b8 <__aeabi_dsub>
 80126c2:	f1ba 0f00 	cmp.w	sl, #0
 80126c6:	4606      	mov	r6, r0
 80126c8:	460f      	mov	r7, r1
 80126ca:	dd6d      	ble.n	80127a8 <__kernel_rem_pio2+0x250>
 80126cc:	1e62      	subs	r2, r4, #1
 80126ce:	ab0e      	add	r3, sp, #56	; 0x38
 80126d0:	9d04      	ldr	r5, [sp, #16]
 80126d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80126d6:	f1ca 0118 	rsb	r1, sl, #24
 80126da:	fa40 f301 	asr.w	r3, r0, r1
 80126de:	441d      	add	r5, r3
 80126e0:	408b      	lsls	r3, r1
 80126e2:	1ac0      	subs	r0, r0, r3
 80126e4:	ab0e      	add	r3, sp, #56	; 0x38
 80126e6:	9504      	str	r5, [sp, #16]
 80126e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80126ec:	f1ca 0317 	rsb	r3, sl, #23
 80126f0:	fa40 fb03 	asr.w	fp, r0, r3
 80126f4:	f1bb 0f00 	cmp.w	fp, #0
 80126f8:	dd65      	ble.n	80127c6 <__kernel_rem_pio2+0x26e>
 80126fa:	9b04      	ldr	r3, [sp, #16]
 80126fc:	2200      	movs	r2, #0
 80126fe:	3301      	adds	r3, #1
 8012700:	9304      	str	r3, [sp, #16]
 8012702:	4615      	mov	r5, r2
 8012704:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012708:	4294      	cmp	r4, r2
 801270a:	f300 809c 	bgt.w	8012846 <__kernel_rem_pio2+0x2ee>
 801270e:	f1ba 0f00 	cmp.w	sl, #0
 8012712:	dd07      	ble.n	8012724 <__kernel_rem_pio2+0x1cc>
 8012714:	f1ba 0f01 	cmp.w	sl, #1
 8012718:	f000 80c0 	beq.w	801289c <__kernel_rem_pio2+0x344>
 801271c:	f1ba 0f02 	cmp.w	sl, #2
 8012720:	f000 80c6 	beq.w	80128b0 <__kernel_rem_pio2+0x358>
 8012724:	f1bb 0f02 	cmp.w	fp, #2
 8012728:	d14d      	bne.n	80127c6 <__kernel_rem_pio2+0x26e>
 801272a:	4632      	mov	r2, r6
 801272c:	463b      	mov	r3, r7
 801272e:	4956      	ldr	r1, [pc, #344]	; (8012888 <__kernel_rem_pio2+0x330>)
 8012730:	2000      	movs	r0, #0
 8012732:	f7ed fdc1 	bl	80002b8 <__aeabi_dsub>
 8012736:	4606      	mov	r6, r0
 8012738:	460f      	mov	r7, r1
 801273a:	2d00      	cmp	r5, #0
 801273c:	d043      	beq.n	80127c6 <__kernel_rem_pio2+0x26e>
 801273e:	4650      	mov	r0, sl
 8012740:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012878 <__kernel_rem_pio2+0x320>
 8012744:	f000 fd84 	bl	8013250 <scalbn>
 8012748:	4630      	mov	r0, r6
 801274a:	4639      	mov	r1, r7
 801274c:	ec53 2b10 	vmov	r2, r3, d0
 8012750:	f7ed fdb2 	bl	80002b8 <__aeabi_dsub>
 8012754:	4606      	mov	r6, r0
 8012756:	460f      	mov	r7, r1
 8012758:	e035      	b.n	80127c6 <__kernel_rem_pio2+0x26e>
 801275a:	4b4c      	ldr	r3, [pc, #304]	; (801288c <__kernel_rem_pio2+0x334>)
 801275c:	2200      	movs	r2, #0
 801275e:	4630      	mov	r0, r6
 8012760:	4639      	mov	r1, r7
 8012762:	f7ed ff61 	bl	8000628 <__aeabi_dmul>
 8012766:	f7ee fa0f 	bl	8000b88 <__aeabi_d2iz>
 801276a:	f7ed fef3 	bl	8000554 <__aeabi_i2d>
 801276e:	4602      	mov	r2, r0
 8012770:	460b      	mov	r3, r1
 8012772:	ec43 2b18 	vmov	d8, r2, r3
 8012776:	4b46      	ldr	r3, [pc, #280]	; (8012890 <__kernel_rem_pio2+0x338>)
 8012778:	2200      	movs	r2, #0
 801277a:	f7ed ff55 	bl	8000628 <__aeabi_dmul>
 801277e:	4602      	mov	r2, r0
 8012780:	460b      	mov	r3, r1
 8012782:	4630      	mov	r0, r6
 8012784:	4639      	mov	r1, r7
 8012786:	f7ed fd97 	bl	80002b8 <__aeabi_dsub>
 801278a:	f7ee f9fd 	bl	8000b88 <__aeabi_d2iz>
 801278e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012792:	f84b 0b04 	str.w	r0, [fp], #4
 8012796:	ec51 0b18 	vmov	r0, r1, d8
 801279a:	f7ed fd8f 	bl	80002bc <__adddf3>
 801279e:	f109 39ff 	add.w	r9, r9, #4294967295
 80127a2:	4606      	mov	r6, r0
 80127a4:	460f      	mov	r7, r1
 80127a6:	e75b      	b.n	8012660 <__kernel_rem_pio2+0x108>
 80127a8:	d106      	bne.n	80127b8 <__kernel_rem_pio2+0x260>
 80127aa:	1e63      	subs	r3, r4, #1
 80127ac:	aa0e      	add	r2, sp, #56	; 0x38
 80127ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80127b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80127b6:	e79d      	b.n	80126f4 <__kernel_rem_pio2+0x19c>
 80127b8:	4b36      	ldr	r3, [pc, #216]	; (8012894 <__kernel_rem_pio2+0x33c>)
 80127ba:	2200      	movs	r2, #0
 80127bc:	f7ee f9ba 	bl	8000b34 <__aeabi_dcmpge>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d13d      	bne.n	8012840 <__kernel_rem_pio2+0x2e8>
 80127c4:	4683      	mov	fp, r0
 80127c6:	2200      	movs	r2, #0
 80127c8:	2300      	movs	r3, #0
 80127ca:	4630      	mov	r0, r6
 80127cc:	4639      	mov	r1, r7
 80127ce:	f7ee f993 	bl	8000af8 <__aeabi_dcmpeq>
 80127d2:	2800      	cmp	r0, #0
 80127d4:	f000 80c0 	beq.w	8012958 <__kernel_rem_pio2+0x400>
 80127d8:	1e65      	subs	r5, r4, #1
 80127da:	462b      	mov	r3, r5
 80127dc:	2200      	movs	r2, #0
 80127de:	9902      	ldr	r1, [sp, #8]
 80127e0:	428b      	cmp	r3, r1
 80127e2:	da6c      	bge.n	80128be <__kernel_rem_pio2+0x366>
 80127e4:	2a00      	cmp	r2, #0
 80127e6:	f000 8089 	beq.w	80128fc <__kernel_rem_pio2+0x3a4>
 80127ea:	ab0e      	add	r3, sp, #56	; 0x38
 80127ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80127f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f000 80ad 	beq.w	8012954 <__kernel_rem_pio2+0x3fc>
 80127fa:	4650      	mov	r0, sl
 80127fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012878 <__kernel_rem_pio2+0x320>
 8012800:	f000 fd26 	bl	8013250 <scalbn>
 8012804:	ab9a      	add	r3, sp, #616	; 0x268
 8012806:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801280a:	ec57 6b10 	vmov	r6, r7, d0
 801280e:	00ec      	lsls	r4, r5, #3
 8012810:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8012814:	46aa      	mov	sl, r5
 8012816:	f1ba 0f00 	cmp.w	sl, #0
 801281a:	f280 80d6 	bge.w	80129ca <__kernel_rem_pio2+0x472>
 801281e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012870 <__kernel_rem_pio2+0x318>
 8012822:	462e      	mov	r6, r5
 8012824:	2e00      	cmp	r6, #0
 8012826:	f2c0 8104 	blt.w	8012a32 <__kernel_rem_pio2+0x4da>
 801282a:	ab72      	add	r3, sp, #456	; 0x1c8
 801282c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012830:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012898 <__kernel_rem_pio2+0x340>
 8012834:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012838:	f04f 0800 	mov.w	r8, #0
 801283c:	1baf      	subs	r7, r5, r6
 801283e:	e0ea      	b.n	8012a16 <__kernel_rem_pio2+0x4be>
 8012840:	f04f 0b02 	mov.w	fp, #2
 8012844:	e759      	b.n	80126fa <__kernel_rem_pio2+0x1a2>
 8012846:	f8d8 3000 	ldr.w	r3, [r8]
 801284a:	b955      	cbnz	r5, 8012862 <__kernel_rem_pio2+0x30a>
 801284c:	b123      	cbz	r3, 8012858 <__kernel_rem_pio2+0x300>
 801284e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012852:	f8c8 3000 	str.w	r3, [r8]
 8012856:	2301      	movs	r3, #1
 8012858:	3201      	adds	r2, #1
 801285a:	f108 0804 	add.w	r8, r8, #4
 801285e:	461d      	mov	r5, r3
 8012860:	e752      	b.n	8012708 <__kernel_rem_pio2+0x1b0>
 8012862:	1acb      	subs	r3, r1, r3
 8012864:	f8c8 3000 	str.w	r3, [r8]
 8012868:	462b      	mov	r3, r5
 801286a:	e7f5      	b.n	8012858 <__kernel_rem_pio2+0x300>
 801286c:	f3af 8000 	nop.w
	...
 801287c:	3ff00000 	.word	0x3ff00000
 8012880:	08014058 	.word	0x08014058
 8012884:	40200000 	.word	0x40200000
 8012888:	3ff00000 	.word	0x3ff00000
 801288c:	3e700000 	.word	0x3e700000
 8012890:	41700000 	.word	0x41700000
 8012894:	3fe00000 	.word	0x3fe00000
 8012898:	08014018 	.word	0x08014018
 801289c:	1e62      	subs	r2, r4, #1
 801289e:	ab0e      	add	r3, sp, #56	; 0x38
 80128a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80128a8:	a90e      	add	r1, sp, #56	; 0x38
 80128aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80128ae:	e739      	b.n	8012724 <__kernel_rem_pio2+0x1cc>
 80128b0:	1e62      	subs	r2, r4, #1
 80128b2:	ab0e      	add	r3, sp, #56	; 0x38
 80128b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80128bc:	e7f4      	b.n	80128a8 <__kernel_rem_pio2+0x350>
 80128be:	a90e      	add	r1, sp, #56	; 0x38
 80128c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80128c4:	3b01      	subs	r3, #1
 80128c6:	430a      	orrs	r2, r1
 80128c8:	e789      	b.n	80127de <__kernel_rem_pio2+0x286>
 80128ca:	3301      	adds	r3, #1
 80128cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80128d0:	2900      	cmp	r1, #0
 80128d2:	d0fa      	beq.n	80128ca <__kernel_rem_pio2+0x372>
 80128d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80128da:	446a      	add	r2, sp
 80128dc:	3a98      	subs	r2, #152	; 0x98
 80128de:	920a      	str	r2, [sp, #40]	; 0x28
 80128e0:	9a08      	ldr	r2, [sp, #32]
 80128e2:	18e3      	adds	r3, r4, r3
 80128e4:	18a5      	adds	r5, r4, r2
 80128e6:	aa22      	add	r2, sp, #136	; 0x88
 80128e8:	f104 0801 	add.w	r8, r4, #1
 80128ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80128f0:	9304      	str	r3, [sp, #16]
 80128f2:	9b04      	ldr	r3, [sp, #16]
 80128f4:	4543      	cmp	r3, r8
 80128f6:	da04      	bge.n	8012902 <__kernel_rem_pio2+0x3aa>
 80128f8:	461c      	mov	r4, r3
 80128fa:	e6a3      	b.n	8012644 <__kernel_rem_pio2+0xec>
 80128fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128fe:	2301      	movs	r3, #1
 8012900:	e7e4      	b.n	80128cc <__kernel_rem_pio2+0x374>
 8012902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012904:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012908:	f7ed fe24 	bl	8000554 <__aeabi_i2d>
 801290c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012912:	46ab      	mov	fp, r5
 8012914:	461c      	mov	r4, r3
 8012916:	f04f 0900 	mov.w	r9, #0
 801291a:	2600      	movs	r6, #0
 801291c:	2700      	movs	r7, #0
 801291e:	9b06      	ldr	r3, [sp, #24]
 8012920:	4599      	cmp	r9, r3
 8012922:	dd06      	ble.n	8012932 <__kernel_rem_pio2+0x3da>
 8012924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012926:	e8e3 6702 	strd	r6, r7, [r3], #8
 801292a:	f108 0801 	add.w	r8, r8, #1
 801292e:	930a      	str	r3, [sp, #40]	; 0x28
 8012930:	e7df      	b.n	80128f2 <__kernel_rem_pio2+0x39a>
 8012932:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012936:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801293a:	f7ed fe75 	bl	8000628 <__aeabi_dmul>
 801293e:	4602      	mov	r2, r0
 8012940:	460b      	mov	r3, r1
 8012942:	4630      	mov	r0, r6
 8012944:	4639      	mov	r1, r7
 8012946:	f7ed fcb9 	bl	80002bc <__adddf3>
 801294a:	f109 0901 	add.w	r9, r9, #1
 801294e:	4606      	mov	r6, r0
 8012950:	460f      	mov	r7, r1
 8012952:	e7e4      	b.n	801291e <__kernel_rem_pio2+0x3c6>
 8012954:	3d01      	subs	r5, #1
 8012956:	e748      	b.n	80127ea <__kernel_rem_pio2+0x292>
 8012958:	ec47 6b10 	vmov	d0, r6, r7
 801295c:	f1ca 0000 	rsb	r0, sl, #0
 8012960:	f000 fc76 	bl	8013250 <scalbn>
 8012964:	ec57 6b10 	vmov	r6, r7, d0
 8012968:	4ba0      	ldr	r3, [pc, #640]	; (8012bec <__kernel_rem_pio2+0x694>)
 801296a:	ee10 0a10 	vmov	r0, s0
 801296e:	2200      	movs	r2, #0
 8012970:	4639      	mov	r1, r7
 8012972:	f7ee f8df 	bl	8000b34 <__aeabi_dcmpge>
 8012976:	b1f8      	cbz	r0, 80129b8 <__kernel_rem_pio2+0x460>
 8012978:	4b9d      	ldr	r3, [pc, #628]	; (8012bf0 <__kernel_rem_pio2+0x698>)
 801297a:	2200      	movs	r2, #0
 801297c:	4630      	mov	r0, r6
 801297e:	4639      	mov	r1, r7
 8012980:	f7ed fe52 	bl	8000628 <__aeabi_dmul>
 8012984:	f7ee f900 	bl	8000b88 <__aeabi_d2iz>
 8012988:	4680      	mov	r8, r0
 801298a:	f7ed fde3 	bl	8000554 <__aeabi_i2d>
 801298e:	4b97      	ldr	r3, [pc, #604]	; (8012bec <__kernel_rem_pio2+0x694>)
 8012990:	2200      	movs	r2, #0
 8012992:	f7ed fe49 	bl	8000628 <__aeabi_dmul>
 8012996:	460b      	mov	r3, r1
 8012998:	4602      	mov	r2, r0
 801299a:	4639      	mov	r1, r7
 801299c:	4630      	mov	r0, r6
 801299e:	f7ed fc8b 	bl	80002b8 <__aeabi_dsub>
 80129a2:	f7ee f8f1 	bl	8000b88 <__aeabi_d2iz>
 80129a6:	1c65      	adds	r5, r4, #1
 80129a8:	ab0e      	add	r3, sp, #56	; 0x38
 80129aa:	f10a 0a18 	add.w	sl, sl, #24
 80129ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129b2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80129b6:	e720      	b.n	80127fa <__kernel_rem_pio2+0x2a2>
 80129b8:	4630      	mov	r0, r6
 80129ba:	4639      	mov	r1, r7
 80129bc:	f7ee f8e4 	bl	8000b88 <__aeabi_d2iz>
 80129c0:	ab0e      	add	r3, sp, #56	; 0x38
 80129c2:	4625      	mov	r5, r4
 80129c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129c8:	e717      	b.n	80127fa <__kernel_rem_pio2+0x2a2>
 80129ca:	ab0e      	add	r3, sp, #56	; 0x38
 80129cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80129d0:	f7ed fdc0 	bl	8000554 <__aeabi_i2d>
 80129d4:	4632      	mov	r2, r6
 80129d6:	463b      	mov	r3, r7
 80129d8:	f7ed fe26 	bl	8000628 <__aeabi_dmul>
 80129dc:	4b84      	ldr	r3, [pc, #528]	; (8012bf0 <__kernel_rem_pio2+0x698>)
 80129de:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80129e2:	2200      	movs	r2, #0
 80129e4:	4630      	mov	r0, r6
 80129e6:	4639      	mov	r1, r7
 80129e8:	f7ed fe1e 	bl	8000628 <__aeabi_dmul>
 80129ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80129f0:	4606      	mov	r6, r0
 80129f2:	460f      	mov	r7, r1
 80129f4:	e70f      	b.n	8012816 <__kernel_rem_pio2+0x2be>
 80129f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80129fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80129fe:	f7ed fe13 	bl	8000628 <__aeabi_dmul>
 8012a02:	4602      	mov	r2, r0
 8012a04:	460b      	mov	r3, r1
 8012a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a0a:	f7ed fc57 	bl	80002bc <__adddf3>
 8012a0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a12:	f108 0801 	add.w	r8, r8, #1
 8012a16:	9b02      	ldr	r3, [sp, #8]
 8012a18:	4598      	cmp	r8, r3
 8012a1a:	dc01      	bgt.n	8012a20 <__kernel_rem_pio2+0x4c8>
 8012a1c:	45b8      	cmp	r8, r7
 8012a1e:	ddea      	ble.n	80129f6 <__kernel_rem_pio2+0x49e>
 8012a20:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012a24:	ab4a      	add	r3, sp, #296	; 0x128
 8012a26:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012a2a:	ed87 7b00 	vstr	d7, [r7]
 8012a2e:	3e01      	subs	r6, #1
 8012a30:	e6f8      	b.n	8012824 <__kernel_rem_pio2+0x2cc>
 8012a32:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a34:	2b02      	cmp	r3, #2
 8012a36:	dc0b      	bgt.n	8012a50 <__kernel_rem_pio2+0x4f8>
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	dc35      	bgt.n	8012aa8 <__kernel_rem_pio2+0x550>
 8012a3c:	d059      	beq.n	8012af2 <__kernel_rem_pio2+0x59a>
 8012a3e:	9b04      	ldr	r3, [sp, #16]
 8012a40:	f003 0007 	and.w	r0, r3, #7
 8012a44:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012a48:	ecbd 8b02 	vpop	{d8}
 8012a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a50:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a52:	2b03      	cmp	r3, #3
 8012a54:	d1f3      	bne.n	8012a3e <__kernel_rem_pio2+0x4e6>
 8012a56:	ab4a      	add	r3, sp, #296	; 0x128
 8012a58:	4423      	add	r3, r4
 8012a5a:	9306      	str	r3, [sp, #24]
 8012a5c:	461c      	mov	r4, r3
 8012a5e:	469a      	mov	sl, r3
 8012a60:	9502      	str	r5, [sp, #8]
 8012a62:	9b02      	ldr	r3, [sp, #8]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	f1aa 0a08 	sub.w	sl, sl, #8
 8012a6a:	dc6b      	bgt.n	8012b44 <__kernel_rem_pio2+0x5ec>
 8012a6c:	46aa      	mov	sl, r5
 8012a6e:	f1ba 0f01 	cmp.w	sl, #1
 8012a72:	f1a4 0408 	sub.w	r4, r4, #8
 8012a76:	f300 8085 	bgt.w	8012b84 <__kernel_rem_pio2+0x62c>
 8012a7a:	9c06      	ldr	r4, [sp, #24]
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	3408      	adds	r4, #8
 8012a80:	2100      	movs	r1, #0
 8012a82:	2d01      	cmp	r5, #1
 8012a84:	f300 809d 	bgt.w	8012bc2 <__kernel_rem_pio2+0x66a>
 8012a88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012a8c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012a90:	f1bb 0f00 	cmp.w	fp, #0
 8012a94:	f040 809b 	bne.w	8012bce <__kernel_rem_pio2+0x676>
 8012a98:	9b01      	ldr	r3, [sp, #4]
 8012a9a:	e9c3 5600 	strd	r5, r6, [r3]
 8012a9e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012aa2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012aa6:	e7ca      	b.n	8012a3e <__kernel_rem_pio2+0x4e6>
 8012aa8:	3408      	adds	r4, #8
 8012aaa:	ab4a      	add	r3, sp, #296	; 0x128
 8012aac:	441c      	add	r4, r3
 8012aae:	462e      	mov	r6, r5
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	2e00      	cmp	r6, #0
 8012ab6:	da36      	bge.n	8012b26 <__kernel_rem_pio2+0x5ce>
 8012ab8:	f1bb 0f00 	cmp.w	fp, #0
 8012abc:	d039      	beq.n	8012b32 <__kernel_rem_pio2+0x5da>
 8012abe:	4602      	mov	r2, r0
 8012ac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ac4:	9c01      	ldr	r4, [sp, #4]
 8012ac6:	e9c4 2300 	strd	r2, r3, [r4]
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012ad2:	f7ed fbf1 	bl	80002b8 <__aeabi_dsub>
 8012ad6:	ae4c      	add	r6, sp, #304	; 0x130
 8012ad8:	2401      	movs	r4, #1
 8012ada:	42a5      	cmp	r5, r4
 8012adc:	da2c      	bge.n	8012b38 <__kernel_rem_pio2+0x5e0>
 8012ade:	f1bb 0f00 	cmp.w	fp, #0
 8012ae2:	d002      	beq.n	8012aea <__kernel_rem_pio2+0x592>
 8012ae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ae8:	4619      	mov	r1, r3
 8012aea:	9b01      	ldr	r3, [sp, #4]
 8012aec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012af0:	e7a5      	b.n	8012a3e <__kernel_rem_pio2+0x4e6>
 8012af2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012af6:	eb0d 0403 	add.w	r4, sp, r3
 8012afa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012afe:	2000      	movs	r0, #0
 8012b00:	2100      	movs	r1, #0
 8012b02:	2d00      	cmp	r5, #0
 8012b04:	da09      	bge.n	8012b1a <__kernel_rem_pio2+0x5c2>
 8012b06:	f1bb 0f00 	cmp.w	fp, #0
 8012b0a:	d002      	beq.n	8012b12 <__kernel_rem_pio2+0x5ba>
 8012b0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b10:	4619      	mov	r1, r3
 8012b12:	9b01      	ldr	r3, [sp, #4]
 8012b14:	e9c3 0100 	strd	r0, r1, [r3]
 8012b18:	e791      	b.n	8012a3e <__kernel_rem_pio2+0x4e6>
 8012b1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b1e:	f7ed fbcd 	bl	80002bc <__adddf3>
 8012b22:	3d01      	subs	r5, #1
 8012b24:	e7ed      	b.n	8012b02 <__kernel_rem_pio2+0x5aa>
 8012b26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b2a:	f7ed fbc7 	bl	80002bc <__adddf3>
 8012b2e:	3e01      	subs	r6, #1
 8012b30:	e7c0      	b.n	8012ab4 <__kernel_rem_pio2+0x55c>
 8012b32:	4602      	mov	r2, r0
 8012b34:	460b      	mov	r3, r1
 8012b36:	e7c5      	b.n	8012ac4 <__kernel_rem_pio2+0x56c>
 8012b38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012b3c:	f7ed fbbe 	bl	80002bc <__adddf3>
 8012b40:	3401      	adds	r4, #1
 8012b42:	e7ca      	b.n	8012ada <__kernel_rem_pio2+0x582>
 8012b44:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012b4c:	9b02      	ldr	r3, [sp, #8]
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	9302      	str	r3, [sp, #8]
 8012b52:	4632      	mov	r2, r6
 8012b54:	463b      	mov	r3, r7
 8012b56:	4640      	mov	r0, r8
 8012b58:	4649      	mov	r1, r9
 8012b5a:	f7ed fbaf 	bl	80002bc <__adddf3>
 8012b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	4640      	mov	r0, r8
 8012b68:	4649      	mov	r1, r9
 8012b6a:	f7ed fba5 	bl	80002b8 <__aeabi_dsub>
 8012b6e:	4632      	mov	r2, r6
 8012b70:	463b      	mov	r3, r7
 8012b72:	f7ed fba3 	bl	80002bc <__adddf3>
 8012b76:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012b7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b7e:	ed8a 7b00 	vstr	d7, [sl]
 8012b82:	e76e      	b.n	8012a62 <__kernel_rem_pio2+0x50a>
 8012b84:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012b88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012b8c:	4640      	mov	r0, r8
 8012b8e:	4632      	mov	r2, r6
 8012b90:	463b      	mov	r3, r7
 8012b92:	4649      	mov	r1, r9
 8012b94:	f7ed fb92 	bl	80002bc <__adddf3>
 8012b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b9c:	4602      	mov	r2, r0
 8012b9e:	460b      	mov	r3, r1
 8012ba0:	4640      	mov	r0, r8
 8012ba2:	4649      	mov	r1, r9
 8012ba4:	f7ed fb88 	bl	80002b8 <__aeabi_dsub>
 8012ba8:	4632      	mov	r2, r6
 8012baa:	463b      	mov	r3, r7
 8012bac:	f7ed fb86 	bl	80002bc <__adddf3>
 8012bb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012bb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012bb8:	ed84 7b00 	vstr	d7, [r4]
 8012bbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012bc0:	e755      	b.n	8012a6e <__kernel_rem_pio2+0x516>
 8012bc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012bc6:	f7ed fb79 	bl	80002bc <__adddf3>
 8012bca:	3d01      	subs	r5, #1
 8012bcc:	e759      	b.n	8012a82 <__kernel_rem_pio2+0x52a>
 8012bce:	9b01      	ldr	r3, [sp, #4]
 8012bd0:	9a01      	ldr	r2, [sp, #4]
 8012bd2:	601d      	str	r5, [r3, #0]
 8012bd4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012bd8:	605c      	str	r4, [r3, #4]
 8012bda:	609f      	str	r7, [r3, #8]
 8012bdc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012be0:	60d3      	str	r3, [r2, #12]
 8012be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012be6:	6110      	str	r0, [r2, #16]
 8012be8:	6153      	str	r3, [r2, #20]
 8012bea:	e728      	b.n	8012a3e <__kernel_rem_pio2+0x4e6>
 8012bec:	41700000 	.word	0x41700000
 8012bf0:	3e700000 	.word	0x3e700000
 8012bf4:	00000000 	.word	0x00000000

08012bf8 <__kernel_sin>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	ed2d 8b04 	vpush	{d8-d9}
 8012c00:	eeb0 8a41 	vmov.f32	s16, s2
 8012c04:	eef0 8a61 	vmov.f32	s17, s3
 8012c08:	ec55 4b10 	vmov	r4, r5, d0
 8012c0c:	b083      	sub	sp, #12
 8012c0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012c16:	9001      	str	r0, [sp, #4]
 8012c18:	da06      	bge.n	8012c28 <__kernel_sin+0x30>
 8012c1a:	ee10 0a10 	vmov	r0, s0
 8012c1e:	4629      	mov	r1, r5
 8012c20:	f7ed ffb2 	bl	8000b88 <__aeabi_d2iz>
 8012c24:	2800      	cmp	r0, #0
 8012c26:	d051      	beq.n	8012ccc <__kernel_sin+0xd4>
 8012c28:	4622      	mov	r2, r4
 8012c2a:	462b      	mov	r3, r5
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	4629      	mov	r1, r5
 8012c30:	f7ed fcfa 	bl	8000628 <__aeabi_dmul>
 8012c34:	4682      	mov	sl, r0
 8012c36:	468b      	mov	fp, r1
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	4629      	mov	r1, r5
 8012c40:	f7ed fcf2 	bl	8000628 <__aeabi_dmul>
 8012c44:	a341      	add	r3, pc, #260	; (adr r3, 8012d4c <__kernel_sin+0x154>)
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	4680      	mov	r8, r0
 8012c4c:	4689      	mov	r9, r1
 8012c4e:	4650      	mov	r0, sl
 8012c50:	4659      	mov	r1, fp
 8012c52:	f7ed fce9 	bl	8000628 <__aeabi_dmul>
 8012c56:	a33f      	add	r3, pc, #252	; (adr r3, 8012d54 <__kernel_sin+0x15c>)
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	f7ed fb2c 	bl	80002b8 <__aeabi_dsub>
 8012c60:	4652      	mov	r2, sl
 8012c62:	465b      	mov	r3, fp
 8012c64:	f7ed fce0 	bl	8000628 <__aeabi_dmul>
 8012c68:	a33c      	add	r3, pc, #240	; (adr r3, 8012d5c <__kernel_sin+0x164>)
 8012c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6e:	f7ed fb25 	bl	80002bc <__adddf3>
 8012c72:	4652      	mov	r2, sl
 8012c74:	465b      	mov	r3, fp
 8012c76:	f7ed fcd7 	bl	8000628 <__aeabi_dmul>
 8012c7a:	a33a      	add	r3, pc, #232	; (adr r3, 8012d64 <__kernel_sin+0x16c>)
 8012c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c80:	f7ed fb1a 	bl	80002b8 <__aeabi_dsub>
 8012c84:	4652      	mov	r2, sl
 8012c86:	465b      	mov	r3, fp
 8012c88:	f7ed fcce 	bl	8000628 <__aeabi_dmul>
 8012c8c:	a337      	add	r3, pc, #220	; (adr r3, 8012d6c <__kernel_sin+0x174>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	f7ed fb13 	bl	80002bc <__adddf3>
 8012c96:	9b01      	ldr	r3, [sp, #4]
 8012c98:	4606      	mov	r6, r0
 8012c9a:	460f      	mov	r7, r1
 8012c9c:	b9eb      	cbnz	r3, 8012cda <__kernel_sin+0xe2>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	4650      	mov	r0, sl
 8012ca4:	4659      	mov	r1, fp
 8012ca6:	f7ed fcbf 	bl	8000628 <__aeabi_dmul>
 8012caa:	a325      	add	r3, pc, #148	; (adr r3, 8012d40 <__kernel_sin+0x148>)
 8012cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb0:	f7ed fb02 	bl	80002b8 <__aeabi_dsub>
 8012cb4:	4642      	mov	r2, r8
 8012cb6:	464b      	mov	r3, r9
 8012cb8:	f7ed fcb6 	bl	8000628 <__aeabi_dmul>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	460b      	mov	r3, r1
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	f7ed fafa 	bl	80002bc <__adddf3>
 8012cc8:	4604      	mov	r4, r0
 8012cca:	460d      	mov	r5, r1
 8012ccc:	ec45 4b10 	vmov	d0, r4, r5
 8012cd0:	b003      	add	sp, #12
 8012cd2:	ecbd 8b04 	vpop	{d8-d9}
 8012cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cda:	4b1b      	ldr	r3, [pc, #108]	; (8012d48 <__kernel_sin+0x150>)
 8012cdc:	ec51 0b18 	vmov	r0, r1, d8
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	f7ed fca1 	bl	8000628 <__aeabi_dmul>
 8012ce6:	4632      	mov	r2, r6
 8012ce8:	ec41 0b19 	vmov	d9, r0, r1
 8012cec:	463b      	mov	r3, r7
 8012cee:	4640      	mov	r0, r8
 8012cf0:	4649      	mov	r1, r9
 8012cf2:	f7ed fc99 	bl	8000628 <__aeabi_dmul>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	ec51 0b19 	vmov	r0, r1, d9
 8012cfe:	f7ed fadb 	bl	80002b8 <__aeabi_dsub>
 8012d02:	4652      	mov	r2, sl
 8012d04:	465b      	mov	r3, fp
 8012d06:	f7ed fc8f 	bl	8000628 <__aeabi_dmul>
 8012d0a:	ec53 2b18 	vmov	r2, r3, d8
 8012d0e:	f7ed fad3 	bl	80002b8 <__aeabi_dsub>
 8012d12:	a30b      	add	r3, pc, #44	; (adr r3, 8012d40 <__kernel_sin+0x148>)
 8012d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d18:	4606      	mov	r6, r0
 8012d1a:	460f      	mov	r7, r1
 8012d1c:	4640      	mov	r0, r8
 8012d1e:	4649      	mov	r1, r9
 8012d20:	f7ed fc82 	bl	8000628 <__aeabi_dmul>
 8012d24:	4602      	mov	r2, r0
 8012d26:	460b      	mov	r3, r1
 8012d28:	4630      	mov	r0, r6
 8012d2a:	4639      	mov	r1, r7
 8012d2c:	f7ed fac6 	bl	80002bc <__adddf3>
 8012d30:	4602      	mov	r2, r0
 8012d32:	460b      	mov	r3, r1
 8012d34:	4620      	mov	r0, r4
 8012d36:	4629      	mov	r1, r5
 8012d38:	f7ed fabe 	bl	80002b8 <__aeabi_dsub>
 8012d3c:	e7c4      	b.n	8012cc8 <__kernel_sin+0xd0>
 8012d3e:	bf00      	nop
 8012d40:	55555549 	.word	0x55555549
 8012d44:	3fc55555 	.word	0x3fc55555
 8012d48:	3fe00000 	.word	0x3fe00000
 8012d4c:	5acfd57c 	.word	0x5acfd57c
 8012d50:	3de5d93a 	.word	0x3de5d93a
 8012d54:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d58:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d5c:	57b1fe7d 	.word	0x57b1fe7d
 8012d60:	3ec71de3 	.word	0x3ec71de3
 8012d64:	19c161d5 	.word	0x19c161d5
 8012d68:	3f2a01a0 	.word	0x3f2a01a0
 8012d6c:	1110f8a6 	.word	0x1110f8a6
 8012d70:	3f811111 	.word	0x3f811111

08012d74 <with_errno>:
 8012d74:	b570      	push	{r4, r5, r6, lr}
 8012d76:	4604      	mov	r4, r0
 8012d78:	460d      	mov	r5, r1
 8012d7a:	4616      	mov	r6, r2
 8012d7c:	f7fa ff28 	bl	800dbd0 <__errno>
 8012d80:	4629      	mov	r1, r5
 8012d82:	6006      	str	r6, [r0, #0]
 8012d84:	4620      	mov	r0, r4
 8012d86:	bd70      	pop	{r4, r5, r6, pc}

08012d88 <xflow>:
 8012d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d8a:	4614      	mov	r4, r2
 8012d8c:	461d      	mov	r5, r3
 8012d8e:	b108      	cbz	r0, 8012d94 <xflow+0xc>
 8012d90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012d94:	e9cd 2300 	strd	r2, r3, [sp]
 8012d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	4629      	mov	r1, r5
 8012da0:	f7ed fc42 	bl	8000628 <__aeabi_dmul>
 8012da4:	2222      	movs	r2, #34	; 0x22
 8012da6:	b003      	add	sp, #12
 8012da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012dac:	f7ff bfe2 	b.w	8012d74 <with_errno>

08012db0 <__math_uflow>:
 8012db0:	b508      	push	{r3, lr}
 8012db2:	2200      	movs	r2, #0
 8012db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012db8:	f7ff ffe6 	bl	8012d88 <xflow>
 8012dbc:	ec41 0b10 	vmov	d0, r0, r1
 8012dc0:	bd08      	pop	{r3, pc}

08012dc2 <__math_oflow>:
 8012dc2:	b508      	push	{r3, lr}
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012dca:	f7ff ffdd 	bl	8012d88 <xflow>
 8012dce:	ec41 0b10 	vmov	d0, r0, r1
 8012dd2:	bd08      	pop	{r3, pc}
 8012dd4:	0000      	movs	r0, r0
	...

08012dd8 <atan>:
 8012dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ddc:	ec55 4b10 	vmov	r4, r5, d0
 8012de0:	4bc3      	ldr	r3, [pc, #780]	; (80130f0 <atan+0x318>)
 8012de2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012de6:	429e      	cmp	r6, r3
 8012de8:	46ab      	mov	fp, r5
 8012dea:	dd18      	ble.n	8012e1e <atan+0x46>
 8012dec:	4bc1      	ldr	r3, [pc, #772]	; (80130f4 <atan+0x31c>)
 8012dee:	429e      	cmp	r6, r3
 8012df0:	dc01      	bgt.n	8012df6 <atan+0x1e>
 8012df2:	d109      	bne.n	8012e08 <atan+0x30>
 8012df4:	b144      	cbz	r4, 8012e08 <atan+0x30>
 8012df6:	4622      	mov	r2, r4
 8012df8:	462b      	mov	r3, r5
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	4629      	mov	r1, r5
 8012dfe:	f7ed fa5d 	bl	80002bc <__adddf3>
 8012e02:	4604      	mov	r4, r0
 8012e04:	460d      	mov	r5, r1
 8012e06:	e006      	b.n	8012e16 <atan+0x3e>
 8012e08:	f1bb 0f00 	cmp.w	fp, #0
 8012e0c:	f300 8131 	bgt.w	8013072 <atan+0x29a>
 8012e10:	a59b      	add	r5, pc, #620	; (adr r5, 8013080 <atan+0x2a8>)
 8012e12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012e16:	ec45 4b10 	vmov	d0, r4, r5
 8012e1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1e:	4bb6      	ldr	r3, [pc, #728]	; (80130f8 <atan+0x320>)
 8012e20:	429e      	cmp	r6, r3
 8012e22:	dc14      	bgt.n	8012e4e <atan+0x76>
 8012e24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012e28:	429e      	cmp	r6, r3
 8012e2a:	dc0d      	bgt.n	8012e48 <atan+0x70>
 8012e2c:	a396      	add	r3, pc, #600	; (adr r3, 8013088 <atan+0x2b0>)
 8012e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e32:	ee10 0a10 	vmov	r0, s0
 8012e36:	4629      	mov	r1, r5
 8012e38:	f7ed fa40 	bl	80002bc <__adddf3>
 8012e3c:	4baf      	ldr	r3, [pc, #700]	; (80130fc <atan+0x324>)
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f7ed fe82 	bl	8000b48 <__aeabi_dcmpgt>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d1e6      	bne.n	8012e16 <atan+0x3e>
 8012e48:	f04f 3aff 	mov.w	sl, #4294967295
 8012e4c:	e02b      	b.n	8012ea6 <atan+0xce>
 8012e4e:	f000 f963 	bl	8013118 <fabs>
 8012e52:	4bab      	ldr	r3, [pc, #684]	; (8013100 <atan+0x328>)
 8012e54:	429e      	cmp	r6, r3
 8012e56:	ec55 4b10 	vmov	r4, r5, d0
 8012e5a:	f300 80bf 	bgt.w	8012fdc <atan+0x204>
 8012e5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012e62:	429e      	cmp	r6, r3
 8012e64:	f300 80a0 	bgt.w	8012fa8 <atan+0x1d0>
 8012e68:	ee10 2a10 	vmov	r2, s0
 8012e6c:	ee10 0a10 	vmov	r0, s0
 8012e70:	462b      	mov	r3, r5
 8012e72:	4629      	mov	r1, r5
 8012e74:	f7ed fa22 	bl	80002bc <__adddf3>
 8012e78:	4ba0      	ldr	r3, [pc, #640]	; (80130fc <atan+0x324>)
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f7ed fa1c 	bl	80002b8 <__aeabi_dsub>
 8012e80:	2200      	movs	r2, #0
 8012e82:	4606      	mov	r6, r0
 8012e84:	460f      	mov	r7, r1
 8012e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	f7ed fa15 	bl	80002bc <__adddf3>
 8012e92:	4602      	mov	r2, r0
 8012e94:	460b      	mov	r3, r1
 8012e96:	4630      	mov	r0, r6
 8012e98:	4639      	mov	r1, r7
 8012e9a:	f7ed fcef 	bl	800087c <__aeabi_ddiv>
 8012e9e:	f04f 0a00 	mov.w	sl, #0
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	460d      	mov	r5, r1
 8012ea6:	4622      	mov	r2, r4
 8012ea8:	462b      	mov	r3, r5
 8012eaa:	4620      	mov	r0, r4
 8012eac:	4629      	mov	r1, r5
 8012eae:	f7ed fbbb 	bl	8000628 <__aeabi_dmul>
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	4680      	mov	r8, r0
 8012eb8:	4689      	mov	r9, r1
 8012eba:	f7ed fbb5 	bl	8000628 <__aeabi_dmul>
 8012ebe:	a374      	add	r3, pc, #464	; (adr r3, 8013090 <atan+0x2b8>)
 8012ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec4:	4606      	mov	r6, r0
 8012ec6:	460f      	mov	r7, r1
 8012ec8:	f7ed fbae 	bl	8000628 <__aeabi_dmul>
 8012ecc:	a372      	add	r3, pc, #456	; (adr r3, 8013098 <atan+0x2c0>)
 8012ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed2:	f7ed f9f3 	bl	80002bc <__adddf3>
 8012ed6:	4632      	mov	r2, r6
 8012ed8:	463b      	mov	r3, r7
 8012eda:	f7ed fba5 	bl	8000628 <__aeabi_dmul>
 8012ede:	a370      	add	r3, pc, #448	; (adr r3, 80130a0 <atan+0x2c8>)
 8012ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee4:	f7ed f9ea 	bl	80002bc <__adddf3>
 8012ee8:	4632      	mov	r2, r6
 8012eea:	463b      	mov	r3, r7
 8012eec:	f7ed fb9c 	bl	8000628 <__aeabi_dmul>
 8012ef0:	a36d      	add	r3, pc, #436	; (adr r3, 80130a8 <atan+0x2d0>)
 8012ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef6:	f7ed f9e1 	bl	80002bc <__adddf3>
 8012efa:	4632      	mov	r2, r6
 8012efc:	463b      	mov	r3, r7
 8012efe:	f7ed fb93 	bl	8000628 <__aeabi_dmul>
 8012f02:	a36b      	add	r3, pc, #428	; (adr r3, 80130b0 <atan+0x2d8>)
 8012f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f08:	f7ed f9d8 	bl	80002bc <__adddf3>
 8012f0c:	4632      	mov	r2, r6
 8012f0e:	463b      	mov	r3, r7
 8012f10:	f7ed fb8a 	bl	8000628 <__aeabi_dmul>
 8012f14:	a368      	add	r3, pc, #416	; (adr r3, 80130b8 <atan+0x2e0>)
 8012f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1a:	f7ed f9cf 	bl	80002bc <__adddf3>
 8012f1e:	4642      	mov	r2, r8
 8012f20:	464b      	mov	r3, r9
 8012f22:	f7ed fb81 	bl	8000628 <__aeabi_dmul>
 8012f26:	a366      	add	r3, pc, #408	; (adr r3, 80130c0 <atan+0x2e8>)
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	4680      	mov	r8, r0
 8012f2e:	4689      	mov	r9, r1
 8012f30:	4630      	mov	r0, r6
 8012f32:	4639      	mov	r1, r7
 8012f34:	f7ed fb78 	bl	8000628 <__aeabi_dmul>
 8012f38:	a363      	add	r3, pc, #396	; (adr r3, 80130c8 <atan+0x2f0>)
 8012f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3e:	f7ed f9bb 	bl	80002b8 <__aeabi_dsub>
 8012f42:	4632      	mov	r2, r6
 8012f44:	463b      	mov	r3, r7
 8012f46:	f7ed fb6f 	bl	8000628 <__aeabi_dmul>
 8012f4a:	a361      	add	r3, pc, #388	; (adr r3, 80130d0 <atan+0x2f8>)
 8012f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f50:	f7ed f9b2 	bl	80002b8 <__aeabi_dsub>
 8012f54:	4632      	mov	r2, r6
 8012f56:	463b      	mov	r3, r7
 8012f58:	f7ed fb66 	bl	8000628 <__aeabi_dmul>
 8012f5c:	a35e      	add	r3, pc, #376	; (adr r3, 80130d8 <atan+0x300>)
 8012f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f62:	f7ed f9a9 	bl	80002b8 <__aeabi_dsub>
 8012f66:	4632      	mov	r2, r6
 8012f68:	463b      	mov	r3, r7
 8012f6a:	f7ed fb5d 	bl	8000628 <__aeabi_dmul>
 8012f6e:	a35c      	add	r3, pc, #368	; (adr r3, 80130e0 <atan+0x308>)
 8012f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f74:	f7ed f9a0 	bl	80002b8 <__aeabi_dsub>
 8012f78:	4632      	mov	r2, r6
 8012f7a:	463b      	mov	r3, r7
 8012f7c:	f7ed fb54 	bl	8000628 <__aeabi_dmul>
 8012f80:	4602      	mov	r2, r0
 8012f82:	460b      	mov	r3, r1
 8012f84:	4640      	mov	r0, r8
 8012f86:	4649      	mov	r1, r9
 8012f88:	f7ed f998 	bl	80002bc <__adddf3>
 8012f8c:	4622      	mov	r2, r4
 8012f8e:	462b      	mov	r3, r5
 8012f90:	f7ed fb4a 	bl	8000628 <__aeabi_dmul>
 8012f94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012f98:	4602      	mov	r2, r0
 8012f9a:	460b      	mov	r3, r1
 8012f9c:	d14b      	bne.n	8013036 <atan+0x25e>
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	f7ed f989 	bl	80002b8 <__aeabi_dsub>
 8012fa6:	e72c      	b.n	8012e02 <atan+0x2a>
 8012fa8:	ee10 0a10 	vmov	r0, s0
 8012fac:	4b53      	ldr	r3, [pc, #332]	; (80130fc <atan+0x324>)
 8012fae:	2200      	movs	r2, #0
 8012fb0:	4629      	mov	r1, r5
 8012fb2:	f7ed f981 	bl	80002b8 <__aeabi_dsub>
 8012fb6:	4b51      	ldr	r3, [pc, #324]	; (80130fc <atan+0x324>)
 8012fb8:	4606      	mov	r6, r0
 8012fba:	460f      	mov	r7, r1
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	4629      	mov	r1, r5
 8012fc2:	f7ed f97b 	bl	80002bc <__adddf3>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	460b      	mov	r3, r1
 8012fca:	4630      	mov	r0, r6
 8012fcc:	4639      	mov	r1, r7
 8012fce:	f7ed fc55 	bl	800087c <__aeabi_ddiv>
 8012fd2:	f04f 0a01 	mov.w	sl, #1
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	460d      	mov	r5, r1
 8012fda:	e764      	b.n	8012ea6 <atan+0xce>
 8012fdc:	4b49      	ldr	r3, [pc, #292]	; (8013104 <atan+0x32c>)
 8012fde:	429e      	cmp	r6, r3
 8012fe0:	da1d      	bge.n	801301e <atan+0x246>
 8012fe2:	ee10 0a10 	vmov	r0, s0
 8012fe6:	4b48      	ldr	r3, [pc, #288]	; (8013108 <atan+0x330>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	4629      	mov	r1, r5
 8012fec:	f7ed f964 	bl	80002b8 <__aeabi_dsub>
 8012ff0:	4b45      	ldr	r3, [pc, #276]	; (8013108 <atan+0x330>)
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	460f      	mov	r7, r1
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	4629      	mov	r1, r5
 8012ffc:	f7ed fb14 	bl	8000628 <__aeabi_dmul>
 8013000:	4b3e      	ldr	r3, [pc, #248]	; (80130fc <atan+0x324>)
 8013002:	2200      	movs	r2, #0
 8013004:	f7ed f95a 	bl	80002bc <__adddf3>
 8013008:	4602      	mov	r2, r0
 801300a:	460b      	mov	r3, r1
 801300c:	4630      	mov	r0, r6
 801300e:	4639      	mov	r1, r7
 8013010:	f7ed fc34 	bl	800087c <__aeabi_ddiv>
 8013014:	f04f 0a02 	mov.w	sl, #2
 8013018:	4604      	mov	r4, r0
 801301a:	460d      	mov	r5, r1
 801301c:	e743      	b.n	8012ea6 <atan+0xce>
 801301e:	462b      	mov	r3, r5
 8013020:	ee10 2a10 	vmov	r2, s0
 8013024:	4939      	ldr	r1, [pc, #228]	; (801310c <atan+0x334>)
 8013026:	2000      	movs	r0, #0
 8013028:	f7ed fc28 	bl	800087c <__aeabi_ddiv>
 801302c:	f04f 0a03 	mov.w	sl, #3
 8013030:	4604      	mov	r4, r0
 8013032:	460d      	mov	r5, r1
 8013034:	e737      	b.n	8012ea6 <atan+0xce>
 8013036:	4b36      	ldr	r3, [pc, #216]	; (8013110 <atan+0x338>)
 8013038:	4e36      	ldr	r6, [pc, #216]	; (8013114 <atan+0x33c>)
 801303a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801303e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013042:	e9da 2300 	ldrd	r2, r3, [sl]
 8013046:	f7ed f937 	bl	80002b8 <__aeabi_dsub>
 801304a:	4622      	mov	r2, r4
 801304c:	462b      	mov	r3, r5
 801304e:	f7ed f933 	bl	80002b8 <__aeabi_dsub>
 8013052:	4602      	mov	r2, r0
 8013054:	460b      	mov	r3, r1
 8013056:	e9d6 0100 	ldrd	r0, r1, [r6]
 801305a:	f7ed f92d 	bl	80002b8 <__aeabi_dsub>
 801305e:	f1bb 0f00 	cmp.w	fp, #0
 8013062:	4604      	mov	r4, r0
 8013064:	460d      	mov	r5, r1
 8013066:	f6bf aed6 	bge.w	8012e16 <atan+0x3e>
 801306a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801306e:	461d      	mov	r5, r3
 8013070:	e6d1      	b.n	8012e16 <atan+0x3e>
 8013072:	a51d      	add	r5, pc, #116	; (adr r5, 80130e8 <atan+0x310>)
 8013074:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013078:	e6cd      	b.n	8012e16 <atan+0x3e>
 801307a:	bf00      	nop
 801307c:	f3af 8000 	nop.w
 8013080:	54442d18 	.word	0x54442d18
 8013084:	bff921fb 	.word	0xbff921fb
 8013088:	8800759c 	.word	0x8800759c
 801308c:	7e37e43c 	.word	0x7e37e43c
 8013090:	e322da11 	.word	0xe322da11
 8013094:	3f90ad3a 	.word	0x3f90ad3a
 8013098:	24760deb 	.word	0x24760deb
 801309c:	3fa97b4b 	.word	0x3fa97b4b
 80130a0:	a0d03d51 	.word	0xa0d03d51
 80130a4:	3fb10d66 	.word	0x3fb10d66
 80130a8:	c54c206e 	.word	0xc54c206e
 80130ac:	3fb745cd 	.word	0x3fb745cd
 80130b0:	920083ff 	.word	0x920083ff
 80130b4:	3fc24924 	.word	0x3fc24924
 80130b8:	5555550d 	.word	0x5555550d
 80130bc:	3fd55555 	.word	0x3fd55555
 80130c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80130c4:	bfa2b444 	.word	0xbfa2b444
 80130c8:	52defd9a 	.word	0x52defd9a
 80130cc:	3fadde2d 	.word	0x3fadde2d
 80130d0:	af749a6d 	.word	0xaf749a6d
 80130d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80130d8:	fe231671 	.word	0xfe231671
 80130dc:	3fbc71c6 	.word	0x3fbc71c6
 80130e0:	9998ebc4 	.word	0x9998ebc4
 80130e4:	3fc99999 	.word	0x3fc99999
 80130e8:	54442d18 	.word	0x54442d18
 80130ec:	3ff921fb 	.word	0x3ff921fb
 80130f0:	440fffff 	.word	0x440fffff
 80130f4:	7ff00000 	.word	0x7ff00000
 80130f8:	3fdbffff 	.word	0x3fdbffff
 80130fc:	3ff00000 	.word	0x3ff00000
 8013100:	3ff2ffff 	.word	0x3ff2ffff
 8013104:	40038000 	.word	0x40038000
 8013108:	3ff80000 	.word	0x3ff80000
 801310c:	bff00000 	.word	0xbff00000
 8013110:	08014088 	.word	0x08014088
 8013114:	08014068 	.word	0x08014068

08013118 <fabs>:
 8013118:	ec51 0b10 	vmov	r0, r1, d0
 801311c:	ee10 2a10 	vmov	r2, s0
 8013120:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013124:	ec43 2b10 	vmov	d0, r2, r3
 8013128:	4770      	bx	lr

0801312a <finite>:
 801312a:	b082      	sub	sp, #8
 801312c:	ed8d 0b00 	vstr	d0, [sp]
 8013130:	9801      	ldr	r0, [sp, #4]
 8013132:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013136:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801313a:	0fc0      	lsrs	r0, r0, #31
 801313c:	b002      	add	sp, #8
 801313e:	4770      	bx	lr

08013140 <floor>:
 8013140:	ec51 0b10 	vmov	r0, r1, d0
 8013144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013148:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801314c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013150:	2e13      	cmp	r6, #19
 8013152:	ee10 5a10 	vmov	r5, s0
 8013156:	ee10 8a10 	vmov	r8, s0
 801315a:	460c      	mov	r4, r1
 801315c:	dc32      	bgt.n	80131c4 <floor+0x84>
 801315e:	2e00      	cmp	r6, #0
 8013160:	da14      	bge.n	801318c <floor+0x4c>
 8013162:	a333      	add	r3, pc, #204	; (adr r3, 8013230 <floor+0xf0>)
 8013164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013168:	f7ed f8a8 	bl	80002bc <__adddf3>
 801316c:	2200      	movs	r2, #0
 801316e:	2300      	movs	r3, #0
 8013170:	f7ed fcea 	bl	8000b48 <__aeabi_dcmpgt>
 8013174:	b138      	cbz	r0, 8013186 <floor+0x46>
 8013176:	2c00      	cmp	r4, #0
 8013178:	da57      	bge.n	801322a <floor+0xea>
 801317a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801317e:	431d      	orrs	r5, r3
 8013180:	d001      	beq.n	8013186 <floor+0x46>
 8013182:	4c2d      	ldr	r4, [pc, #180]	; (8013238 <floor+0xf8>)
 8013184:	2500      	movs	r5, #0
 8013186:	4621      	mov	r1, r4
 8013188:	4628      	mov	r0, r5
 801318a:	e025      	b.n	80131d8 <floor+0x98>
 801318c:	4f2b      	ldr	r7, [pc, #172]	; (801323c <floor+0xfc>)
 801318e:	4137      	asrs	r7, r6
 8013190:	ea01 0307 	and.w	r3, r1, r7
 8013194:	4303      	orrs	r3, r0
 8013196:	d01f      	beq.n	80131d8 <floor+0x98>
 8013198:	a325      	add	r3, pc, #148	; (adr r3, 8013230 <floor+0xf0>)
 801319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319e:	f7ed f88d 	bl	80002bc <__adddf3>
 80131a2:	2200      	movs	r2, #0
 80131a4:	2300      	movs	r3, #0
 80131a6:	f7ed fccf 	bl	8000b48 <__aeabi_dcmpgt>
 80131aa:	2800      	cmp	r0, #0
 80131ac:	d0eb      	beq.n	8013186 <floor+0x46>
 80131ae:	2c00      	cmp	r4, #0
 80131b0:	bfbe      	ittt	lt
 80131b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80131b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80131ba:	19a4      	addlt	r4, r4, r6
 80131bc:	ea24 0407 	bic.w	r4, r4, r7
 80131c0:	2500      	movs	r5, #0
 80131c2:	e7e0      	b.n	8013186 <floor+0x46>
 80131c4:	2e33      	cmp	r6, #51	; 0x33
 80131c6:	dd0b      	ble.n	80131e0 <floor+0xa0>
 80131c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80131cc:	d104      	bne.n	80131d8 <floor+0x98>
 80131ce:	ee10 2a10 	vmov	r2, s0
 80131d2:	460b      	mov	r3, r1
 80131d4:	f7ed f872 	bl	80002bc <__adddf3>
 80131d8:	ec41 0b10 	vmov	d0, r0, r1
 80131dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80131e4:	f04f 33ff 	mov.w	r3, #4294967295
 80131e8:	fa23 f707 	lsr.w	r7, r3, r7
 80131ec:	4207      	tst	r7, r0
 80131ee:	d0f3      	beq.n	80131d8 <floor+0x98>
 80131f0:	a30f      	add	r3, pc, #60	; (adr r3, 8013230 <floor+0xf0>)
 80131f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f6:	f7ed f861 	bl	80002bc <__adddf3>
 80131fa:	2200      	movs	r2, #0
 80131fc:	2300      	movs	r3, #0
 80131fe:	f7ed fca3 	bl	8000b48 <__aeabi_dcmpgt>
 8013202:	2800      	cmp	r0, #0
 8013204:	d0bf      	beq.n	8013186 <floor+0x46>
 8013206:	2c00      	cmp	r4, #0
 8013208:	da02      	bge.n	8013210 <floor+0xd0>
 801320a:	2e14      	cmp	r6, #20
 801320c:	d103      	bne.n	8013216 <floor+0xd6>
 801320e:	3401      	adds	r4, #1
 8013210:	ea25 0507 	bic.w	r5, r5, r7
 8013214:	e7b7      	b.n	8013186 <floor+0x46>
 8013216:	2301      	movs	r3, #1
 8013218:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801321c:	fa03 f606 	lsl.w	r6, r3, r6
 8013220:	4435      	add	r5, r6
 8013222:	4545      	cmp	r5, r8
 8013224:	bf38      	it	cc
 8013226:	18e4      	addcc	r4, r4, r3
 8013228:	e7f2      	b.n	8013210 <floor+0xd0>
 801322a:	2500      	movs	r5, #0
 801322c:	462c      	mov	r4, r5
 801322e:	e7aa      	b.n	8013186 <floor+0x46>
 8013230:	8800759c 	.word	0x8800759c
 8013234:	7e37e43c 	.word	0x7e37e43c
 8013238:	bff00000 	.word	0xbff00000
 801323c:	000fffff 	.word	0x000fffff

08013240 <nan>:
 8013240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013248 <nan+0x8>
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop
 8013248:	00000000 	.word	0x00000000
 801324c:	7ff80000 	.word	0x7ff80000

08013250 <scalbn>:
 8013250:	b570      	push	{r4, r5, r6, lr}
 8013252:	ec55 4b10 	vmov	r4, r5, d0
 8013256:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801325a:	4606      	mov	r6, r0
 801325c:	462b      	mov	r3, r5
 801325e:	b99a      	cbnz	r2, 8013288 <scalbn+0x38>
 8013260:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013264:	4323      	orrs	r3, r4
 8013266:	d036      	beq.n	80132d6 <scalbn+0x86>
 8013268:	4b39      	ldr	r3, [pc, #228]	; (8013350 <scalbn+0x100>)
 801326a:	4629      	mov	r1, r5
 801326c:	ee10 0a10 	vmov	r0, s0
 8013270:	2200      	movs	r2, #0
 8013272:	f7ed f9d9 	bl	8000628 <__aeabi_dmul>
 8013276:	4b37      	ldr	r3, [pc, #220]	; (8013354 <scalbn+0x104>)
 8013278:	429e      	cmp	r6, r3
 801327a:	4604      	mov	r4, r0
 801327c:	460d      	mov	r5, r1
 801327e:	da10      	bge.n	80132a2 <scalbn+0x52>
 8013280:	a32b      	add	r3, pc, #172	; (adr r3, 8013330 <scalbn+0xe0>)
 8013282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013286:	e03a      	b.n	80132fe <scalbn+0xae>
 8013288:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801328c:	428a      	cmp	r2, r1
 801328e:	d10c      	bne.n	80132aa <scalbn+0x5a>
 8013290:	ee10 2a10 	vmov	r2, s0
 8013294:	4620      	mov	r0, r4
 8013296:	4629      	mov	r1, r5
 8013298:	f7ed f810 	bl	80002bc <__adddf3>
 801329c:	4604      	mov	r4, r0
 801329e:	460d      	mov	r5, r1
 80132a0:	e019      	b.n	80132d6 <scalbn+0x86>
 80132a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80132a6:	460b      	mov	r3, r1
 80132a8:	3a36      	subs	r2, #54	; 0x36
 80132aa:	4432      	add	r2, r6
 80132ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80132b0:	428a      	cmp	r2, r1
 80132b2:	dd08      	ble.n	80132c6 <scalbn+0x76>
 80132b4:	2d00      	cmp	r5, #0
 80132b6:	a120      	add	r1, pc, #128	; (adr r1, 8013338 <scalbn+0xe8>)
 80132b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132bc:	da1c      	bge.n	80132f8 <scalbn+0xa8>
 80132be:	a120      	add	r1, pc, #128	; (adr r1, 8013340 <scalbn+0xf0>)
 80132c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132c4:	e018      	b.n	80132f8 <scalbn+0xa8>
 80132c6:	2a00      	cmp	r2, #0
 80132c8:	dd08      	ble.n	80132dc <scalbn+0x8c>
 80132ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80132d6:	ec45 4b10 	vmov	d0, r4, r5
 80132da:	bd70      	pop	{r4, r5, r6, pc}
 80132dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80132e0:	da19      	bge.n	8013316 <scalbn+0xc6>
 80132e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80132e6:	429e      	cmp	r6, r3
 80132e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80132ec:	dd0a      	ble.n	8013304 <scalbn+0xb4>
 80132ee:	a112      	add	r1, pc, #72	; (adr r1, 8013338 <scalbn+0xe8>)
 80132f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d1e2      	bne.n	80132be <scalbn+0x6e>
 80132f8:	a30f      	add	r3, pc, #60	; (adr r3, 8013338 <scalbn+0xe8>)
 80132fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fe:	f7ed f993 	bl	8000628 <__aeabi_dmul>
 8013302:	e7cb      	b.n	801329c <scalbn+0x4c>
 8013304:	a10a      	add	r1, pc, #40	; (adr r1, 8013330 <scalbn+0xe0>)
 8013306:	e9d1 0100 	ldrd	r0, r1, [r1]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d0b8      	beq.n	8013280 <scalbn+0x30>
 801330e:	a10e      	add	r1, pc, #56	; (adr r1, 8013348 <scalbn+0xf8>)
 8013310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013314:	e7b4      	b.n	8013280 <scalbn+0x30>
 8013316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801331a:	3236      	adds	r2, #54	; 0x36
 801331c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013320:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013324:	4620      	mov	r0, r4
 8013326:	4b0c      	ldr	r3, [pc, #48]	; (8013358 <scalbn+0x108>)
 8013328:	2200      	movs	r2, #0
 801332a:	e7e8      	b.n	80132fe <scalbn+0xae>
 801332c:	f3af 8000 	nop.w
 8013330:	c2f8f359 	.word	0xc2f8f359
 8013334:	01a56e1f 	.word	0x01a56e1f
 8013338:	8800759c 	.word	0x8800759c
 801333c:	7e37e43c 	.word	0x7e37e43c
 8013340:	8800759c 	.word	0x8800759c
 8013344:	fe37e43c 	.word	0xfe37e43c
 8013348:	c2f8f359 	.word	0xc2f8f359
 801334c:	81a56e1f 	.word	0x81a56e1f
 8013350:	43500000 	.word	0x43500000
 8013354:	ffff3cb0 	.word	0xffff3cb0
 8013358:	3c900000 	.word	0x3c900000

0801335c <_sbrk>:
 801335c:	4a04      	ldr	r2, [pc, #16]	; (8013370 <_sbrk+0x14>)
 801335e:	6811      	ldr	r1, [r2, #0]
 8013360:	4603      	mov	r3, r0
 8013362:	b909      	cbnz	r1, 8013368 <_sbrk+0xc>
 8013364:	4903      	ldr	r1, [pc, #12]	; (8013374 <_sbrk+0x18>)
 8013366:	6011      	str	r1, [r2, #0]
 8013368:	6810      	ldr	r0, [r2, #0]
 801336a:	4403      	add	r3, r0
 801336c:	6013      	str	r3, [r2, #0]
 801336e:	4770      	bx	lr
 8013370:	2001404c 	.word	0x2001404c
 8013374:	200005e5 	.word	0x200005e5

08013378 <_init>:
 8013378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801337a:	bf00      	nop
 801337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801337e:	bc08      	pop	{r3}
 8013380:	469e      	mov	lr, r3
 8013382:	4770      	bx	lr

08013384 <_fini>:
 8013384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013386:	bf00      	nop
 8013388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801338a:	bc08      	pop	{r3}
 801338c:	469e      	mov	lr, r3
 801338e:	4770      	bx	lr
